
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026bc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048ac  08026dc8  08026dc8  00036dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000000e4  0802b674  0802b674  0003b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802b758  0802b758  00359bc8  2**0
                  CONTENTS
  5 .ARM          00000008  0802b758  0802b758  0003b758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802b760  0802b760  00359bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802b760  0802b760  0003b760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802b77c  0802b77c  0003b77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0802b784  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000150  0802b8d4  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001e6fc  20009750  08034ed4  00049750  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  20027e4c  08034ed4  00057e4c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00359bc8  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 003037c0  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00006348  903037c0  903037c0  003537c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000c0  90309b08  90309b08  00359b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  00360000  2**2
                  ALLOC
 18 .debug_line   00064df0  00000000  00000000  00359bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000f6d91  00000000  00000000  003be9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 000180c2  00000000  00000000  004b5777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003818  00000000  00000000  004cd840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001635c2  00000000  00000000  004d1058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000070f8  00000000  00000000  00634620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003fbcf  00000000  00000000  0063b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0067b2e7  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000a644  00000000  00000000  0067b3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    0003daf8  00000000  00000000  006859fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009750 	.word	0x20009750
 800021c:	00000000 	.word	0x00000000
 8000220:	08026db0 	.word	0x08026db0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009754 	.word	0x20009754
 800023c:	08026db0 	.word	0x08026db0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
  ldr  r2, =_sbss
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006ae:	f007 fb6f 	bl	8007d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f025 fb8d 	bl	8025dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006b6:	f003 fb85 	bl	8003dc4 <main>
  bx  lr    
 80006ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80006c0:	0802b784 	.word	0x0802b784
  ldr  r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006c8:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 80006cc:	20009750 	.word	0x20009750
  ldr  r3, = _ebss
 80006d0:	20027e4c 	.word	0x20027e4c

080006d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <CAN1_RX0_IRQHandler>

080006d6 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80006d6:	4770      	bx	lr

080006d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80006d8:	4770      	bx	lr

080006da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80006da:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80006dc:	f001 fd68 	bl	80021b0 <touchgfx_components_init>
  touchgfx_init();
}
 80006e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80006e4:	f001 bcf0 	b.w	80020c8 <touchgfx_init>

080006e8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80006e8:	f001 bd64 	b.w	80021b4 <touchgfx_taskEntry>

080006ec <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <BSP_PB_Init+0x60>)
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f0:	f042 0201 	orr.w	r2, r2, #1
    {
 80006f4:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
    {
 80006f8:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 8000704:	b959      	cbnz	r1, 800071e <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000706:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 8000708:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800070c:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000710:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000712:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000714:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000716:	f008 fd99 	bl	800924c <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 800071a:	b006      	add	sp, #24
 800071c:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 800071e:	2901      	cmp	r1, #1
 8000720:	d1fb      	bne.n	800071a <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000722:	2400      	movs	r4, #0
 8000724:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000726:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000728:	a901      	add	r1, sp, #4
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800072c:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000734:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000736:	f008 fd89 	bl	800924c <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800073a:	4622      	mov	r2, r4
 800073c:	210f      	movs	r1, #15
 800073e:	2006      	movs	r0, #6
 8000740:	f007 fdfe 	bl	8008340 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000744:	2006      	movs	r0, #6
 8000746:	f007 fe2d 	bl	80083a4 <HAL_NVIC_EnableIRQ>
    }
 800074a:	e7e6      	b.n	800071a <BSP_PB_Init+0x2e>
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000

08000754 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000754:	2100      	movs	r1, #0
{
 8000756:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000758:	4608      	mov	r0, r1
 800075a:	f7ff ffc7 	bl	80006ec <BSP_PB_Init>
}
 800075e:	bd08      	pop	{r3, pc}

08000760 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000760:	2101      	movs	r1, #1
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <BSP_PB_GetState+0xc>)
    {
 8000764:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000766:	f008 fef7 	bl	8009558 <HAL_GPIO_ReadPin>
    }
 800076a:	bd08      	pop	{r3, pc}
 800076c:	40020000 	.word	0x40020000

08000770 <_ZN8touchgfx7Buttons6sampleEv>:
{
 8000770:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fff4 	bl	8000760 <BSP_PB_GetState>
}
 8000778:	bd08      	pop	{r3, pc}

0800077a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800077a:	6840      	ldr	r0, [r0, #4]
    }
 800077c:	4770      	bx	lr

0800077e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800077e:	6041      	str	r1, [r0, #4]
    }
 8000780:	4770      	bx	lr
	...

08000784 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000784:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000788:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 800078c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000790:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000796:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000798:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 800079c:	430a      	orrs	r2, r1
 800079e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f042 0201 	orr.w	r2, r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	4770      	bx	lr
 80007ac:	e0001000 	.word	0xe0001000
 80007b0:	c5acce55 	.word	0xc5acce55

080007b4 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80007b4:	1a51      	subs	r1, r2, r1
 80007b6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80007ba:	fbb1 f0f3 	udiv	r0, r1, r3
 80007be:	4770      	bx	lr

080007c0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80007c0:	4b01      	ldr	r3, [pc, #4]	; (80007c8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80007c2:	6858      	ldr	r0, [r3, #4]
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e0001000 	.word	0xe0001000

080007cc <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80007cc:	4770      	bx	lr

080007ce <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80007ce:	b510      	push	{r4, lr}
 80007d0:	4604      	mov	r4, r0
 80007d2:	210c      	movs	r1, #12
 80007d4:	f025 f98d 	bl	8025af2 <_ZdlPvj>
 80007d8:	4620      	mov	r0, r4
 80007da:	bd10      	pop	{r4, pc}

080007dc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007dc:	6803      	ldr	r3, [r0, #0]
{
 80007de:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007e0:	691b      	ldr	r3, [r3, #16]
{
 80007e2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80007e4:	b131      	cbz	r1, 80007f4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007e6:	4798      	blx	r3
 80007e8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80007ea:	6863      	ldr	r3, [r4, #4]
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4418      	add	r0, r3
 80007f0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80007f2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80007f4:	4798      	blx	r3
 80007f6:	60a0      	str	r0, [r4, #8]
}
 80007f8:	e7fb      	b.n	80007f2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080007fa <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80007fa:	4770      	bx	lr

080007fc <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 80007fc:	4770      	bx	lr
	...

08000800 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000800:	b508      	push	{r3, lr}
    Buttons::init();
 8000802:	f7ff ffa7 	bl	8000754 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000806:	4b02      	ldr	r3, [pc, #8]	; (8000810 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bd08      	pop	{r3, pc}
 800080e:	bf00      	nop
 8000810:	2000976c 	.word	0x2000976c

08000814 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000818:	f7ff ffaa 	bl	8000770 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 800081e:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000820:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000822:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000824:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000826:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 800082a:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 800082c:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 800082e:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000830:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000832:	d00a      	beq.n	800084a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000834:	f016 0001 	ands.w	r0, r6, #1
 8000838:	d007      	beq.n	800084a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 800083a:	f011 0001 	ands.w	r0, r1, #1
 800083e:	d004      	beq.n	800084a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000840:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000842:	bf56      	itet	pl
 8000844:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000846:	2000      	movmi	r0, #0
        key = 1;
 8000848:	7028      	strbpl	r0, [r5, #0]
}
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	2000976c 	.word	0x2000976c

08000850 <_ZN8touchgfx10KeySamplerD0Ev>:
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	2104      	movs	r1, #4
 8000856:	f025 f94c 	bl	8025af2 <_ZdlPvj>
 800085a:	4620      	mov	r0, r4
 800085c:	bd10      	pop	{r4, pc}

0800085e <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800085e:	4770      	bx	lr

08000860 <_ZN20STM32TouchControllerD0Ev>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4604      	mov	r4, r0
 8000864:	2104      	movs	r1, #4
 8000866:	f025 f944 	bl	8025af2 <_ZdlPvj>
 800086a:	4620      	mov	r0, r4
 800086c:	bd10      	pop	{r4, pc}

0800086e <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 800086e:	4770      	bx	lr

08000870 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000872:	2301      	movs	r3, #1
    {
 8000874:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800087c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000880:	f10d 0217 	add.w	r2, sp, #23
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	460a      	mov	r2, r1
 8000888:	4601      	mov	r1, r0
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <TS_IO_Write+0x34>)
 800088c:	f009 f972 	bl	8009b74 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000890:	b120      	cbz	r0, 800089c <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <TS_IO_Write+0x34>)
 8000894:	f009 f826 	bl	80098e4 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000898:	f003 fa72 	bl	8003d80 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 800089c:	b007      	add	sp, #28
 800089e:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a2:	bf00      	nop
 80008a4:	2001217c 	.word	0x2001217c

080008a8 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 80008a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 80008aa:	2300      	movs	r3, #0
    {
 80008ac:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 80008b2:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008b6:	2301      	movs	r3, #1
 80008b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80008bc:	f10d 0117 	add.w	r1, sp, #23
 80008c0:	9100      	str	r1, [sp, #0]
 80008c2:	4601      	mov	r1, r0
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <TS_IO_Read+0x38>)
 80008c6:	f009 fa2f 	bl	8009d28 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008ca:	b120      	cbz	r0, 80008d6 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <TS_IO_Read+0x38>)
 80008ce:	f009 f809 	bl	80098e4 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80008d2:	f003 fa55 	bl	8003d80 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 80008d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80008da:	b007      	add	sp, #28
 80008dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e0:	2001217c 	.word	0x2001217c

080008e4 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 80008e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	460a      	mov	r2, r1
 80008ee:	4601      	mov	r1, r0
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <TS_IO_ReadMultiple+0x2c>)
 80008f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80008f6:	2301      	movs	r3, #1
 80008f8:	f009 fa16 	bl	8009d28 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008fc:	4604      	mov	r4, r0
 80008fe:	b120      	cbz	r0, 800090a <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <TS_IO_ReadMultiple+0x2c>)
 8000902:	f008 ffef 	bl	80098e4 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000906:	f003 fa3b 	bl	8003d80 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 800090a:	b2a0      	uxth	r0, r4
 800090c:	b004      	add	sp, #16
 800090e:	bd10      	pop	{r4, pc}
 8000910:	2001217c 	.word	0x2001217c

08000914 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000916:	4d13      	ldr	r5, [pc, #76]	; (8000964 <BSP_TS_Init+0x50>)
    {
 8000918:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 800091a:	4c13      	ldr	r4, [pc, #76]	; (8000968 <BSP_TS_Init+0x54>)
    {
 800091c:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	7820      	ldrb	r0, [r4, #0]
 8000922:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000924:	686b      	ldr	r3, [r5, #4]
 8000926:	2054      	movs	r0, #84	; 0x54
 8000928:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 800092a:	b2c0      	uxtb	r0, r0
 800092c:	2811      	cmp	r0, #17
 800092e:	d009      	beq.n	8000944 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000930:	686b      	ldr	r3, [r5, #4]
 8000932:	2070      	movs	r0, #112	; 0x70
 8000934:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000936:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000938:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 800093a:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800093c:	2811      	cmp	r0, #17
 800093e:	d003      	beq.n	8000948 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000940:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000944:	2354      	movs	r3, #84	; 0x54
 8000946:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 800094a:	42be      	cmp	r6, r7
 800094c:	bf34      	ite	cc
 800094e:	2601      	movcc	r6, #1
 8000950:	260c      	movcs	r6, #12
                ft6x06_ts_drv.Reset(I2C_Address);
 8000952:	7820      	ldrb	r0, [r4, #0]
 8000954:	701e      	strb	r6, [r3, #0]
 8000956:	68ab      	ldr	r3, [r5, #8]
 8000958:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 800095a:	7820      	ldrb	r0, [r4, #0]
 800095c:	68eb      	ldr	r3, [r5, #12]
 800095e:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 8000960:	2000      	movs	r0, #0
 8000962:	e7ee      	b.n	8000942 <BSP_TS_Init+0x2e>
 8000964:	20000038 	.word	0x20000038
 8000968:	20009770 	.word	0x20009770
 800096c:	20009771 	.word	0x20009771

08000970 <_ZN20STM32TouchController4initEv>:
{
 8000970:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000972:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000976:	f44f 7048 	mov.w	r0, #800	; 0x320
 800097a:	f7ff ffcb 	bl	8000914 <BSP_TS_Init>
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_ZN20STM32TouchController4initEv+0x2c>)
 8000980:	b910      	cbnz	r0, 8000988 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
}
 8000986:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1fb      	bne.n	8000986 <_ZN20STM32TouchController4initEv+0x16>
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <_ZN20STM32TouchController4initEv+0x30>)
 8000990:	216a      	movs	r1, #106	; 0x6a
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <_ZN20STM32TouchController4initEv+0x34>)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <_ZN20STM32TouchController4initEv+0x38>)
 8000996:	f025 f8db 	bl	8025b50 <__assert_func>
 800099a:	bf00      	nop
 800099c:	20009772 	.word	0x20009772
 80009a0:	08026ed4 	.word	0x08026ed4
 80009a4:	08026ee7 	.word	0x08026ee7
 80009a8:	08026f11 	.word	0x08026f11

080009ac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 80009ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009b0:	4a35      	ldr	r2, [pc, #212]	; (8000a88 <BSP_TS_GetState+0xdc>)
{
 80009b2:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009b4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000a98 <BSP_TS_GetState+0xec>
{
 80009b8:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009ba:	7810      	ldrb	r0, [r2, #0]
 80009bc:	f8da 3010 	ldr.w	r3, [sl, #16]
 80009c0:	4798      	blx	r3
 80009c2:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d05a      	beq.n	8000a7e <BSP_TS_GetState+0xd2>
 80009c8:	4e30      	ldr	r6, [pc, #192]	; (8000a8c <BSP_TS_GetState+0xe0>)
 80009ca:	f107 0902 	add.w	r9, r7, #2
 80009ce:	4d30      	ldr	r5, [pc, #192]	; (8000a90 <BSP_TS_GetState+0xe4>)
 80009d0:	f10d 0b0c 	add.w	fp, sp, #12
 80009d4:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 80009d6:	f04f 0800 	mov.w	r8, #0
 80009da:	783b      	ldrb	r3, [r7, #0]
 80009dc:	4543      	cmp	r3, r8
 80009de:	d94e      	bls.n	8000a7e <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <BSP_TS_GetState+0xdc>)
 80009e2:	465a      	mov	r2, fp
 80009e4:	4621      	mov	r1, r4
 80009e6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80009ea:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 80009ec:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009f0:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <BSP_TS_GetState+0xe8>)
 80009f4:	46b4      	mov	ip, r6
 80009f6:	46ae      	mov	lr, r5
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3604      	adds	r6, #4
 80009fc:	3504      	adds	r5, #4
 80009fe:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000a00:	bf41      	itttt	mi
 8000a02:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000a04:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000a08:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000a0c:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 8000a0e:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000a10:	bf41      	itttt	mi
 8000a12:	8822      	ldrhmi	r2, [r4, #0]
 8000a14:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000a18:	3203      	addmi	r2, #3
 8000a1a:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 8000a1c:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a1e:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a22:	bf48      	it	mi
 8000a24:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a28:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a2c:	bf42      	ittt	mi
 8000a2e:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000a32:	3301      	addmi	r3, #1
 8000a34:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a38:	b293      	uxth	r3, r2
 8000a3a:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a3c:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a40:	bf8c      	ite	hi
 8000a42:	1ac3      	subhi	r3, r0, r3
 8000a44:	1a1b      	subls	r3, r3, r0
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a4a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 8000a52:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a54:	bf8c      	ite	hi
 8000a56:	1a8a      	subhi	r2, r1, r2
 8000a58:	1a52      	subls	r2, r2, r1
 8000a5a:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000a5c:	441a      	add	r2, r3
 8000a5e:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 8000a60:	bfc8      	it	gt
 8000a62:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 8000a66:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000a6a:	bfc8      	it	gt
 8000a6c:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 8000a70:	f829 3b02 	strh.w	r3, [r9], #2
            TS_State->touchY[index] = _y[index];
 8000a74:	f8de 3000 	ldr.w	r3, [lr]
 8000a78:	f8a9 3002 	strh.w	r3, [r9, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000a7c:	e7ad      	b.n	80009da <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000a7e:	2000      	movs	r0, #0
 8000a80:	b005      	add	sp, #20
 8000a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a86:	bf00      	nop
 8000a88:	20009770 	.word	0x20009770
 8000a8c:	20009774 	.word	0x20009774
 8000a90:	2000977c 	.word	0x2000977c
 8000a94:	20009771 	.word	0x20009771
 8000a98:	20000038 	.word	0x20000038

08000a9c <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000aa0:	460e      	mov	r6, r1
 8000aa2:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000aa4:	781c      	ldrb	r4, [r3, #0]
 8000aa6:	b15c      	cbz	r4, 8000ac0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000aa8:	a801      	add	r0, sp, #4
 8000aaa:	f7ff ff7f 	bl	80009ac <BSP_TS_GetState>
        if (state.touchDetected)
 8000aae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ab2:	b143      	cbz	r3, 8000ac6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000ab4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ab8:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000aba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000abe:	602b      	str	r3, [r5, #0]
}
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000ac6:	461c      	mov	r4, r3
 8000ac8:	e7fa      	b.n	8000ac0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000aca:	bf00      	nop
 8000acc:	20009772 	.word	0x20009772

08000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000ad0:	2803      	cmp	r0, #3
 8000ad2:	d823      	bhi.n	8000b1c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000ad4:	e8df f000 	tbb	[pc, r0]
 8000ad8:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000ae8:	480e      	ldr	r0, [pc, #56]	; (8000b24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000aea:	f008 bd3b 	b.w	8009564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	0952      	lsrs	r2, r2, #5
 8000afa:	e7f5      	b.n	8000ae8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000afe:	2102      	movs	r1, #2
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	fab2 f282 	clz	r2, r2
 8000b08:	0952      	lsrs	r2, r2, #5
 8000b0a:	e7ee      	b.n	8000aea <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	fab2 f282 	clz	r2, r2
 8000b18:	0952      	lsrs	r2, r2, #5
 8000b1a:	e7e6      	b.n	8000aea <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20009784 	.word	0x20009784
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40022400 	.word	0x40022400
 8000b2c:	40021400 	.word	0x40021400

08000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000b30:	2803      	cmp	r0, #3
 8000b32:	d823      	bhi.n	8000b7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000b34:	e8df f000 	tbb	[pc, r0]
 8000b38:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	3a00      	subs	r2, #0
 8000b44:	bf18      	it	ne
 8000b46:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b4a:	f008 bd0b 	b.w	8009564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	3a00      	subs	r2, #0
 8000b56:	bf18      	it	ne
 8000b58:	2201      	movne	r2, #1
 8000b5a:	e7f5      	b.n	8000b48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	3a00      	subs	r2, #0
 8000b66:	bf18      	it	ne
 8000b68:	2201      	movne	r2, #1
 8000b6a:	e7ee      	b.n	8000b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	3a00      	subs	r2, #0
 8000b76:	bf18      	it	ne
 8000b78:	2201      	movne	r2, #1
 8000b7a:	e7e6      	b.n	8000b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20009784 	.word	0x20009784
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40022400 	.word	0x40022400
 8000b8c:	40021400 	.word	0x40021400

08000b90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000b90:	2803      	cmp	r0, #3
 8000b92:	d80f      	bhi.n	8000bb4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000b94:	e8df f000 	tbb	[pc, r0]
 8000b98:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000b9c:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000ba0:	f008 bce5 	b.w	800956e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	e7fa      	b.n	8000b9e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000bac:	e7f8      	b.n	8000ba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000bb2:	e7f5      	b.n	8000ba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40022400 	.word	0x40022400
 8000bc0:	40021400 	.word	0x40021400

08000bc4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000bc4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000bc6:	2803      	cmp	r0, #3
 8000bc8:	d813      	bhi.n	8000bf2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000bca:	e8df f000 	tbb	[pc, r0]
 8000bce:	0a02      	.short	0x0a02
 8000bd0:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000bd2:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bd6:	f008 fcbf 	bl	8009558 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000bda:	1e43      	subs	r3, r0, #1
 8000bdc:	4258      	negs	r0, r3
 8000bde:	4158      	adcs	r0, r3
 8000be0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	e7f6      	b.n	8000bd4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000be6:	2102      	movs	r1, #2
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000bea:	e7f4      	b.n	8000bd6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000bf0:	e7f1      	b.n	8000bd6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e7f1      	b.n	8000bda <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000bf6:	bf00      	nop
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40022400 	.word	0x40022400
 8000c00:	40021400 	.word	0x40021400

08000c04 <_ZN8touchgfx4GPIO4initEv>:
{
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	4d08      	ldr	r5, [pc, #32]	; (8000c28 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000c08:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000c0a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000c0c:	b2e0      	uxtb	r0, r4
 8000c0e:	f7ff ffd9 	bl	8000bc4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000c12:	b118      	cbz	r0, 8000c1c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000c18:	bf18      	it	ne
 8000c1a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000c1c:	3401      	adds	r4, #1
 8000c1e:	3504      	adds	r5, #4
 8000c20:	2c05      	cmp	r4, #5
 8000c22:	d1f3      	bne.n	8000c0c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	bf00      	nop
 8000c28:	20009784 	.word	0x20009784

08000c2c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000c2c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000c2e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000c32:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000c36:	4770      	bx	lr

08000c38 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000c38:	2000      	movs	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000c3c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000c3e:	3900      	subs	r1, #0
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000c42:	bf18      	it	ne
 8000c44:	2101      	movne	r1, #1
 8000c46:	7019      	strb	r1, [r3, #0]
    }
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20027b9f 	.word	0x20027b9f

08000c50 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000c50:	2000      	movs	r0, #0
 8000c52:	4770      	bx	lr

08000c54 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000c54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000c56:	b10b      	cbz	r3, 8000c5c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4718      	bx	r3
        }
    }
 8000c5c:	4770      	bx	lr

08000c5e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000c5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c62:	4770      	bx	lr

08000c64 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000c64:	6840      	ldr	r0, [r0, #4]
 8000c66:	6803      	ldr	r3, [r0, #0]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4718      	bx	r3

08000c6c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20009794 	.word	0x20009794

08000c78 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000c78:	4770      	bx	lr
	...

08000c7c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000c7c:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c7e:	2300      	movs	r3, #0
 8000c80:	4c10      	ldr	r4, [pc, #64]	; (8000cc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000c82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c86:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c8e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c92:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c96:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c9a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c9c:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ca0:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ca2:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ca6:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ca8:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000cac:	d2f9      	bcs.n	8000ca2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	f113 0f20 	cmn.w	r3, #32
 8000cb4:	d1f2      	bne.n	8000c9c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000cb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000cc0:	f001 bb68 	b.w	8002394 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000cc8:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000cca:	f001 faf7 	bl	80022bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000cd4:	bd08      	pop	{r3, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000ce0:	f001 fc60 	bl	80025a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000ce4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000ce8:	b113      	cbz	r3, 8000cf0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000cea:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
    }
}
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000014 	.word	0x20000014

08000cf8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000cf8:	f001 bae9 	b.w	80022ce <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000cfc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000cfc:	b510      	push	{r4, lr}
 8000cfe:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000d00:	f010 f912 	bl	8010f28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	4620      	mov	r0, r4
 8000d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000d10:	4718      	bx	r3

08000d12 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000d12:	f00f bb6f 	b.w	80103f4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000d16 <_ZN11TouchGFXHALD0Ev>:
 8000d16:	b510      	push	{r4, lr}
 8000d18:	4604      	mov	r4, r0
 8000d1a:	217c      	movs	r1, #124	; 0x7c
 8000d1c:	f024 fee9 	bl	8025af2 <_ZdlPvj>
 8000d20:	4620      	mov	r0, r4
 8000d22:	bd10      	pop	{r4, pc}

08000d24 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000d2a:	f00f bb9f 	b.w	801046c <_ZN8touchgfx3HAL10beginFrameEv>
 8000d2e:	bf00      	nop
 8000d30:	20000014 	.word	0x20000014

08000d34 <_ZN11TouchGFXHAL10initializeEv>:
{
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4604      	mov	r4, r0
    GPIO::init();
 8000d38:	f7ff ff64 	bl	8000c04 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000d3c:	4d08      	ldr	r5, [pc, #32]	; (8000d60 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f001 fb02 	bl	8002348 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000d44:	2300      	movs	r3, #0
    instrumentation.init();
 8000d46:	4628      	mov	r0, r5
 8000d48:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8000d4c:	f7ff fd1a 	bl	8000784 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000d50:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000d52:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000d54:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000d5a:	6163      	str	r3, [r4, #20]
}
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000979c 	.word	0x2000979c
 8000d64:	200097a8 	.word	0x200097a8

08000d68 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000d68:	6803      	ldr	r3, [r0, #0]
{
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d72:	4798      	blx	r3
    enableInterrupts();
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	4620      	mov	r0, r4
 8000d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d7a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000d7c:	f000 fef4 	bl	8001b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	4620      	mov	r0, r4
 8000d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d86:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2329      	movs	r3, #41	; 0x29
 8000d8c:	2215      	movs	r2, #21
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000d90:	9100      	str	r1, [sp, #0]
 8000d92:	f008 f9d2 	bl	800913a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000d96:	f000 fee7 	bl	8001b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da0:	4798      	blx	r3
    for (;;)
 8000da2:	e7f8      	b.n	8000d96 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000da4:	2001210c 	.word	0x2001210c

08000da8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000da8:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000daa:	f001 fa7f 	bl	80022ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2107      	movs	r1, #7
 8000db2:	205a      	movs	r0, #90	; 0x5a
 8000db4:	f007 fac4 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2107      	movs	r1, #7
 8000dbc:	2062      	movs	r0, #98	; 0x62
}
 8000dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000dc2:	f007 babd 	b.w	8008340 <HAL_NVIC_SetPriority>

08000dc6 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8000dc6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8000dca:	b11b      	cbz	r3, 8000dd4 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8000dcc:	6840      	ldr	r0, [r0, #4]
 8000dce:	6803      	ldr	r3, [r0, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4718      	bx	r3
    }
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4770      	bx	lr

08000dd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000dd8:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000dde:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000de0:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8000de4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000de6:	428c      	cmp	r4, r1
 8000de8:	d009      	beq.n	8000dfe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000dea:	b93a      	cbnz	r2, 8000dfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000dec:	490a      	ldr	r1, [pc, #40]	; (8000e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000df0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000df2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000df4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000df6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000df8:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000dfa:	701a      	strb	r2, [r3, #0]
        }
    }
 8000dfc:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000dfe:	2a00      	cmp	r2, #0
 8000e00:	d0fc      	beq.n	8000dfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000e04:	4904      	ldr	r1, [pc, #16]	; (8000e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000e06:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000e08:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000e0a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000e0c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000e0e:	2200      	movs	r2, #0
 8000e10:	e7f3      	b.n	8000dfa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000e12:	bf00      	nop
 8000e14:	20027b98 	.word	0x20027b98
 8000e18:	20027b96 	.word	0x20027b96
 8000e1c:	20027b94 	.word	0x20027b94

08000e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000e20:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d803      	bhi.n	8000e32 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d905      	bls.n	8000e3e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000e34:	219e      	movs	r1, #158	; 0x9e
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000e3a:	f024 fe89 	bl	8025b50 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000e40:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000e44:	801a      	strh	r2, [r3, #0]
    }
 8000e46:	bd08      	pop	{r3, pc}
 8000e48:	20027b94 	.word	0x20027b94
 8000e4c:	20027b96 	.word	0x20027b96
 8000e50:	08026f8c 	.word	0x08026f8c
 8000e54:	08026fef 	.word	0x08026fef
 8000e58:	08027032 	.word	0x08027032
 8000e5c:	20027b9a 	.word	0x20027b9a
 8000e60:	20027b9c 	.word	0x20027b9c

08000e64 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8000e64:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8000e66:	f001 fbcf 	bl	8002608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8000e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bd08      	pop	{r3, pc}
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	460d      	mov	r5, r1
 8000e84:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000e88:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000e8a:	b935      	cbnz	r5, 8000e9a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000e8e:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000e96:	f024 fe5b 	bl	8025b50 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000e9a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000e9e:	3a00      	subs	r2, #0
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000ea2:	bf18      	it	ne
 8000ea4:	2201      	movne	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000ea8:	6803      	ldr	r3, [r0, #0]
}
 8000eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb2:	4718      	bx	r3
 8000eb4:	20009794 	.word	0x20009794
 8000eb8:	08027077 	.word	0x08027077
 8000ebc:	080270af 	.word	0x080270af
 8000ec0:	08027032 	.word	0x08027032
 8000ec4:	20027b9e 	.word	0x20027b9e

08000ec8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8000ec8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8000ecc:	60c3      	str	r3, [r0, #12]
 8000ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8000eda:	8503      	strh	r3, [r0, #40]	; 0x28
 8000edc:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000ee0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000ee2:	8603      	strh	r3, [r0, #48]	; 0x30
 8000ee4:	6603      	str	r3, [r0, #96]	; 0x60
 8000ee6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8000eea:	6703      	str	r3, [r0, #112]	; 0x70
 8000eec:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8000ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	6742      	str	r2, [r0, #116]	; 0x74
 8000ef8:	2201      	movs	r2, #1
                           height)
 8000efa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000efe:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8000f02:	3520      	adds	r5, #32
 8000f04:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 8000f08:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000f0c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8000f10:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8000f14:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000f18:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8000f1c:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8000f20:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8000f24:	b2ad      	uxth	r5, r5
        instance = this;
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f28:	42b5      	cmp	r5, r6
        instance = this;
 8000f2a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8000f2e:	8015      	strh	r5, [r2, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8000f32:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f34:	bf28      	it	cs
 8000f36:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f3a:	bf38      	it	cc
 8000f3c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f3e:	8016      	strh	r6, [r2, #0]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f42:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f46:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8000f4a:	7013      	strb	r3, [r2, #0]
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8000f4e:	6003      	str	r3, [r0, #0]
}
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
 8000f52:	bf00      	nop
 8000f54:	01000001 	.word	0x01000001
 8000f58:	20027ba0 	.word	0x20027ba0
 8000f5c:	20027b94 	.word	0x20027b94
 8000f60:	20027b9a 	.word	0x20027b9a
 8000f64:	20027b96 	.word	0x20027b96
 8000f68:	20027b9c 	.word	0x20027b9c
 8000f6c:	20027b98 	.word	0x20027b98
 8000f70:	08027108 	.word	0x08027108

08000f74 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8000f74:	f006 bf56 	b.w	8007e24 <HAL_Delay>

08000f78 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000f78:	2801      	cmp	r0, #1
    {
 8000f7a:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8000f7c:	d80a      	bhi.n	8000f94 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000f7e:	784b      	ldrb	r3, [r1, #1]
 8000f80:	2215      	movs	r2, #21
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <DSI_IO_WriteCmd+0x30>)
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	780b      	ldrb	r3, [r1, #0]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f008 f8d6 	bl	800913a <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000f8e:	b003      	add	sp, #12
 8000f90:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000f94:	9101      	str	r1, [sp, #4]
 8000f96:	2239      	movs	r2, #57	; 0x39
 8000f98:	5c0b      	ldrb	r3, [r1, r0]
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <DSI_IO_WriteCmd+0x30>)
 8000fa2:	f008 f8db 	bl	800915c <HAL_DSI_LongWrite>
    }
 8000fa6:	e7f2      	b.n	8000f8e <DSI_IO_WriteCmd+0x16>
 8000fa8:	2001210c 	.word	0x2001210c

08000fac <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8000fb2:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000fb6:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fb8:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8000fba:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	9201      	str	r2, [sp, #4]
 8000fc0:	2244      	movs	r2, #68	; 0x44
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	2239      	movs	r2, #57	; 0x39
 8000fc6:	f008 f8c9 	bl	800915c <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2335      	movs	r3, #53	; 0x35
 8000fce:	462a      	mov	r2, r5
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	9100      	str	r1, [sp, #0]
 8000fd4:	f008 f8b1 	bl	800913a <HAL_DSI_ShortWrite>
    }
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd30      	pop	{r4, r5, pc}
 8000fdc:	200097ac 	.word	0x200097ac
 8000fe0:	2001210c 	.word	0x2001210c

08000fe4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000fe4:	b507      	push	{r0, r1, r2, lr}
 8000fe6:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 8000fe8:	f7ff ffe0 	bl	8000fac <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 8000fee:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000ff0:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8000ffe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800100a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800100e:	f042 0202 	orr.w	r2, r2, #2
 8001012:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800101c:	f043 0303 	orr.w	r3, r3, #3
 8001020:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001022:	b003      	add	sp, #12
 8001024:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001028:	f001 b950 	b.w	80022cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 800102c:	2001210c 	.word	0x2001210c
 8001030:	20012228 	.word	0x20012228

08001034 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LCD_SetUpdateRegion+0x20>)
    {
 8001036:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800103c:	232a      	movs	r3, #42	; 0x2a
 800103e:	2239      	movs	r2, #57	; 0x39
 8001040:	2100      	movs	r1, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2304      	movs	r3, #4
 8001046:	9001      	str	r0, [sp, #4]
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <LCD_SetUpdateRegion+0x24>)
 800104a:	f008 f887 	bl	800915c <HAL_DSI_LongWrite>
    }
 800104e:	b003      	add	sp, #12
 8001050:	f85d fb04 	ldr.w	pc, [sp], #4
 8001054:	20000004 	.word	0x20000004
 8001058:	2001210c 	.word	0x2001210c

0800105c <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 800105c:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800105e:	4d15      	ldr	r5, [pc, #84]	; (80010b4 <HAL_DSI_TearingEffectCallback+0x58>)
 8001060:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fd34 	bl	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001068:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 800106a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800106e:	3301      	adds	r3, #1
 8001070:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001074:	f000 fd6c 	bl	8001b50 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 800107a:	6828      	ldr	r0, [r5, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800107e:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 8001080:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8001084:	b123      	cbz	r3, 8001090 <HAL_DSI_TearingEffectCallback+0x34>
 8001086:	4d0d      	ldr	r5, [pc, #52]	; (80010bc <HAL_DSI_TearingEffectCallback+0x60>)
 8001088:	782b      	ldrb	r3, [r5, #0]
 800108a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800108e:	b123      	cbz	r3, 800109a <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001090:	2000      	movs	r0, #0
        }
    }
 8001092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001096:	f7ff bd4b 	b.w	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 800109a:	f00f ff45 	bl	8010f28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 80010a0:	4630      	mov	r0, r6
            updateRegion = 0;
 80010a2:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 80010a4:	f7ff ffc6 	bl	8001034 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 80010a8:	4620      	mov	r0, r4
 80010aa:	f008 f836 	bl	800911a <HAL_DSI_Refresh>
            displayRefreshing = true;
 80010ae:	2301      	movs	r3, #1
 80010b0:	702b      	strb	r3, [r5, #0]
    }
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	20027ba0 	.word	0x20027ba0
 80010b8:	20000014 	.word	0x20000014
 80010bc:	200097ae 	.word	0x200097ae
 80010c0:	20009798 	.word	0x20009798

080010c4 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	3201      	adds	r2, #1
    {
 80010ca:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 80010cc:	2a03      	cmp	r2, #3
        updateRegion++;
 80010ce:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 80010d2:	4605      	mov	r5, r0
 80010d4:	4c31      	ldr	r4, [pc, #196]	; (800119c <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 80010da:	dc2e      	bgt.n	800113a <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010dc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80010e0:	f020 0008 	bic.w	r0, r0, #8
 80010e4:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010ec:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 80010f0:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010f2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 80010f6:	bf0c      	ite	eq
 80010f8:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80010fa:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80010fc:	4928      	ldr	r1, [pc, #160]	; (80011a0 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 80010fe:	3302      	adds	r3, #2
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 8001106:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 800110a:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800110c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 8001116:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800111a:	2301      	movs	r3, #1
 800111c:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 800111e:	f7ff ff89 	bl	8001034 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 8001124:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8001126:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800112a:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 800112e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 8001132:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 8001136:	f007 bff0 	b.w	800911a <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800113a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 800113e:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001140:	f022 0208 	bic.w	r2, r2, #8
 8001144:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 800114a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800114e:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001150:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8001154:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_DSI_EndOfRefreshCallback+0xec>)
 8001158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800115e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001162:	2201      	movs	r2, #1
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 8001166:	f7ff ff65 	bl	8001034 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 800116a:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800116e:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001178:	f7ff fcda 	bl	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
        return instance;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 8001184:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001186:	b120      	cbz	r0, 8001192 <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 8001188:	6803      	ldr	r3, [r0, #0]
    }
 800118a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4718      	bx	r3
 8001192:	bd70      	pop	{r4, r5, r6, pc}
 8001194:	20009798 	.word	0x20009798
 8001198:	20009794 	.word	0x20009794
 800119c:	40016c00 	.word	0x40016c00
 80011a0:	40016800 	.word	0x40016800
 80011a4:	00ca01e3 	.word	0x00ca01e3
 80011a8:	06800193 	.word	0x06800193
 80011ac:	00ca01e2 	.word	0x00ca01e2
 80011b0:	00ca0003 	.word	0x00ca0003
 80011b4:	200097ae 	.word	0x200097ae
 80011b8:	20027ba0 	.word	0x20027ba0

080011bc <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 80011bc:	4601      	mov	r1, r0
 80011be:	b508      	push	{r3, lr}
        return instance;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <IdleTaskHook+0x14>)
 80011c2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80011c4:	b101      	cbz	r1, 80011c8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80011c6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80011c8:	f00f fec8 	bl	8010f5c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80011cc:	2001      	movs	r0, #1
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	20027ba0 	.word	0x20027ba0

080011d4 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80011d6:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80011e4:	6003      	str	r3, [r0, #0]
        init();
 80011e6:	f7ff bb0b 	b.w	8000800 <_ZN8touchgfx10KeySampler4initEv>
 80011ea:	bf00      	nop
 80011ec:	2000979c 	.word	0x2000979c
 80011f0:	200097a8 	.word	0x200097a8
 80011f4:	08026e98 	.word	0x08026e98
 80011f8:	08026ec0 	.word	0x08026ec0

080011fc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80011fc:	6940      	ldr	r0, [r0, #20]
 80011fe:	4770      	bx	lr

08001200 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8001200:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001204:	4770      	bx	lr

08001206 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001206:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001208:	b923      	cbnz	r3, 8001214 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800120a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800120c:	3800      	subs	r0, #0
 800120e:	bf18      	it	ne
 8001210:	2001      	movne	r0, #1
 8001212:	4770      	bx	lr
 8001214:	2001      	movs	r0, #1
}
 8001216:	4770      	bx	lr

08001218 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001218:	6880      	ldr	r0, [r0, #8]
 800121a:	4770      	bx	lr

0800121c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 800121c:	4770      	bx	lr

0800121e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800121e:	3004      	adds	r0, #4
{
 8001220:	b510      	push	{r4, lr}
 8001222:	460c      	mov	r4, r1
    *data = videoInfo;
 8001224:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800122a:	bd10      	pop	{r4, pc}

0800122c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800122c:	4770      	bx	lr
	...

08001230 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001230:	b508      	push	{r3, lr}
    assert(0);
 8001232:	4a03      	ldr	r2, [pc, #12]	; (8001240 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001234:	f240 11cb 	movw	r1, #459	; 0x1cb
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800123c:	f024 fc88 	bl	8025b50 <__assert_func>
 8001240:	080271d8 	.word	0x080271d8
 8001244:	08029bef 	.word	0x08029bef
 8001248:	08027233 	.word	0x08027233

0800124c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800124c:	b510      	push	{r4, lr}
 800124e:	4604      	mov	r4, r0
 8001250:	2144      	movs	r1, #68	; 0x44
 8001252:	f024 fc4e 	bl	8025af2 <_ZdlPvj>
 8001256:	4620      	mov	r0, r4
 8001258:	bd10      	pop	{r4, pc}
	...

0800125c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800125c:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800125e:	2500      	movs	r5, #0
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001262:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001264:	6003      	str	r3, [r0, #0]
 8001266:	63c5      	str	r5, [r0, #60]	; 0x3c
 8001268:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 800126c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8001270:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8001274:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8001278:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 800127c:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 8001280:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001284:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 8001288:	f001 fde8 	bl	8002e5c <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 800128c:	462a      	mov	r2, r5
 800128e:	4629      	mov	r1, r5
 8001290:	2001      	movs	r0, #1
 8001292:	f00b fe5f 	bl	800cf54 <osSemaphoreNew>
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 8001298:	6018      	str	r0, [r3, #0]
}
 800129a:	4620      	mov	r0, r4
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop
 80012a0:	080274d0 	.word	0x080274d0
 80012a4:	200097f4 	.word	0x200097f4

080012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80012a8:	b420      	push	{r5}
 80012aa:	460d      	mov	r5, r1
 80012ac:	4611      	mov	r1, r2
 80012ae:	461a      	mov	r2, r3
    if (reader != 0)
 80012b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80012b2:	b13b      	cbz	r3, 80012c4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80012b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80012b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80012b8:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80012ba:	4428      	add	r0, r5
}
 80012bc:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80012c0:	f025 baa3 	b.w	802680a <strncmp>
        src = (const char*)movieData + offset;
 80012c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80012c6:	e7f8      	b.n	80012ba <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80012c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80012ca:	b510      	push	{r4, lr}
    if (reader != 0)
 80012cc:	b173      	cbz	r3, 80012ec <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80012ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80012d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80012d2:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80012d4:	1853      	adds	r3, r2, r1
 80012d6:	5c52      	ldrb	r2, [r2, r1]
 80012d8:	7898      	ldrb	r0, [r3, #2]
 80012da:	785c      	ldrb	r4, [r3, #1]
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80012e4:	4310      	orrs	r0, r2
 80012e6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80012ea:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80012ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012ee:	5858      	ldr	r0, [r3, r1]
 80012f0:	e7fb      	b.n	80012ea <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

080012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80012f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80012f4:	b143      	cbz	r3, 8001308 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80012f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80012f8:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 80012fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012fc:	185a      	adds	r2, r3, r1
 80012fe:	5c58      	ldrb	r0, [r3, r1]
 8001300:	7852      	ldrb	r2, [r2, #1]
 8001302:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001306:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8001308:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800130a:	5a58      	ldrh	r0, [r3, r1]
}
 800130c:	4770      	bx	lr
	...

08001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4604      	mov	r4, r0
    if (reader != 0)
 8001314:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8001316:	460d      	mov	r5, r1
 8001318:	4616      	mov	r6, r2
    if (reader != 0)
 800131a:	b1d8      	cbz	r0, 8001354 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800131c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800131e:	4293      	cmp	r3, r2
 8001320:	d208      	bcs.n	8001334 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001322:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8001326:	21a7      	movs	r1, #167	; 0xa7
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800132a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001330:	f024 fc0e 	bl	8025b50 <__assert_func>
        reader->seek(offset);
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800133a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800133c:	4632      	mov	r2, r6
 800133e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001340:	6803      	ldr	r3, [r0, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	4798      	blx	r3
 8001346:	b910      	cbnz	r0, 800134e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001348:	230d      	movs	r3, #13
 800134a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 800134e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 8001350:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8001352:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001354:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001356:	4408      	add	r0, r1
 8001358:	e7fb      	b.n	8001352 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800135a:	bf00      	nop
 800135c:	080272b2 	.word	0x080272b2
 8001360:	08027233 	.word	0x08027233
 8001364:	0802729f 	.word	0x0802729f

08001368 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8001368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800136c:	6943      	ldr	r3, [r0, #20]
{
 800136e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001370:	b92b      	cbnz	r3, 800137e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8001374:	21ed      	movs	r1, #237	; 0xed
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8001378:	4822      	ldr	r0, [pc, #136]	; (8001404 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800137a:	f024 fbe9 	bl	8025b50 <__assert_func>
    readData(currentMovieOffset, 8);
 800137e:	2208      	movs	r2, #8
 8001380:	6981      	ldr	r1, [r0, #24]
 8001382:	f7ff ffc5 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001386:	69a1      	ldr	r1, [r4, #24]
 8001388:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800138a:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800138e:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001390:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001394:	f7ff ff98 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001398:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800139a:	69a1      	ldr	r1, [r4, #24]
 800139c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800139e:	440d      	add	r5, r1
 80013a0:	f105 0208 	add.w	r2, r5, #8
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d222      	bcs.n	80013ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 80013a8:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013aa:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 80013ac:	2208      	movs	r2, #8
 80013ae:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013b0:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80013b4:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80013b6:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80013b8:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80013ba:	f7ff ffa9 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80013be:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80013c2:	4620      	mov	r0, r4
 80013c4:	4641      	mov	r1, r8
 80013c6:	f7ff ff94 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80013ca:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80013cc:	f108 0104 	add.w	r1, r8, #4
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff79 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013d6:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 80013d8:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013da:	d1de      	bne.n	800139a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013dc:	f108 0102 	add.w	r1, r8, #2
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ff86 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013e6:	42b0      	cmp	r0, r6
 80013e8:	d1d7      	bne.n	800139a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80013ea:	2001      	movs	r0, #1
 80013ec:	e004      	b.n	80013f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 80013ee:	2301      	movs	r3, #1
    return false;
 80013f0:	2000      	movs	r0, #0
    frameNumber = 1;
 80013f2:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80013f4:	6a23      	ldr	r3, [r4, #32]
 80013f6:	61a3      	str	r3, [r4, #24]
}
 80013f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013fc:	080272f4 	.word	0x080272f4
 8001400:	0802733d 	.word	0x0802733d
 8001404:	08027233 	.word	0x08027233

08001408 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber==0)
 8001408:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800140a:	6803      	ldr	r3, [r0, #0]
 800140c:	bf38      	it	cc
 800140e:	2101      	movcc	r1, #1
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	460d      	mov	r5, r1
 8001416:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8001418:	4798      	blx	r3
 800141a:	42a8      	cmp	r0, r5
 800141c:	d204      	bcs.n	8001428 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	4620      	mov	r0, r4
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	4798      	blx	r3
 8001426:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001428:	1e6b      	subs	r3, r5, #1
 800142a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800142c:	2210      	movs	r2, #16
 800142e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001430:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001434:	f106 0108 	add.w	r1, r6, #8
 8001438:	f7ff ff6a 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800143c:	f106 0110 	add.w	r1, r6, #16
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff ff41 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001446:	6a23      	ldr	r3, [r4, #32]
 8001448:	3b04      	subs	r3, #4
 800144a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800144c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8001450:	bd70      	pop	{r4, r5, r6, pc}
	...

08001454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 8001454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8001458:	2100      	movs	r1, #0
{
 800145a:	4604      	mov	r4, r0
    readData(0, 72);
 800145c:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800145e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8001460:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 8001464:	f7ff ff54 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8001468:	69a7      	ldr	r7, [r4, #24]
 800146a:	2304      	movs	r3, #4
 800146c:	4a64      	ldr	r2, [pc, #400]	; (8001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800146e:	4639      	mov	r1, r7
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff ff19 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001476:	b148      	cbz	r0, 800148c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8001478:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800147a:	4a62      	ldr	r2, [pc, #392]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800147c:	f240 1135 	movw	r1, #309	; 0x135
        lastError = AVI_ERROR_NOT_RIFF;
 8001480:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 8001484:	4b60      	ldr	r3, [pc, #384]	; (8001608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 8001486:	4861      	ldr	r0, [pc, #388]	; (800160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8001488:	f024 fb62 	bl	8025b50 <__assert_func>
    currentMovieOffset += 8;
 800148c:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8001490:	2304      	movs	r3, #4
 8001492:	4a5f      	ldr	r2, [pc, #380]	; (8001610 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8001494:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8001496:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001498:	f7ff ff06 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800149c:	b138      	cbz	r0, 80014ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800149e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80014a0:	4a58      	ldr	r2, [pc, #352]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80014a2:	f240 113d 	movw	r1, #317	; 0x13d
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80014a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 80014aa:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80014ac:	e7eb      	b.n	8001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80014ae:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80014b2:	2304      	movs	r3, #4
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80014b6:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80014b8:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80014ba:	f7ff fef5 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014be:	4606      	mov	r6, r0
 80014c0:	b138      	cbz	r0, 80014d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014c2:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80014c6:	f44f 71a2 	mov.w	r1, #324	; 0x144
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80014d0:	e7d9      	b.n	8001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80014d2:	f107 0110 	add.w	r1, r7, #16
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fef6 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80014dc:	4605      	mov	r5, r0
 80014de:	b920      	cbnz	r0, 80014ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80014e0:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80014e2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80014e6:	4a47      	ldr	r2, [pc, #284]	; (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80014e8:	e7cd      	b.n	8001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80014ea:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80014ee:	2304      	movs	r3, #4
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80014f2:	4620      	mov	r0, r4
 80014f4:	4641      	mov	r1, r8
 80014f6:	f7ff fed7 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d04b      	beq.n	8001596 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80014fe:	2306      	movs	r3, #6
 8001500:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 8001504:	2304      	movs	r3, #4
 8001506:	4a48      	ldr	r2, [pc, #288]	; (8001628 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 8001508:	f107 0118 	add.w	r1, r7, #24
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fecb 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001512:	2800      	cmp	r0, #0
 8001514:	d041      	beq.n	800159a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8001516:	2307      	movs	r3, #7
 8001518:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800151c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800151e:	4f43      	ldr	r7, [pc, #268]	; (800162c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 8001520:	220c      	movs	r2, #12
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff fef3 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800152a:	f105 0608 	add.w	r6, r5, #8
 800152e:	2304      	movs	r3, #4
 8001530:	463a      	mov	r2, r7
 8001532:	4620      	mov	r0, r4
 8001534:	4631      	mov	r1, r6
 8001536:	f7ff feb7 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800153a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800153e:	2800      	cmp	r0, #0
 8001540:	d04a      	beq.n	80015d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8001542:	2b00      	cmp	r3, #0
 8001544:	d14a      	bne.n	80015dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 8001546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001548:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800154a:	42ab      	cmp	r3, r5
 800154c:	d84a      	bhi.n	80015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800154e:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001552:	1d29      	adds	r1, r5, #4
 8001554:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001556:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001558:	9101      	str	r1, [sp, #4]
 800155a:	f7ff feb5 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800155e:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001560:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001562:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff feaf 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800156a:	4406      	add	r6, r0
    readData(listOffset, 4);
 800156c:	2204      	movs	r2, #4
 800156e:	4620      	mov	r0, r4
 8001570:	4631      	mov	r1, r6
 8001572:	f7ff fecd 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001576:	2304      	movs	r3, #4
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 800157a:	4631      	mov	r1, r6
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff fe93 	bl	80012a8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001582:	2800      	cmp	r0, #0
 8001584:	d139      	bne.n	80015fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; //next frame number is 1
 8001586:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8001588:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 800158a:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800158c:	69a3      	ldr	r3, [r4, #24]
 800158e:	6223      	str	r3, [r4, #32]
}
 8001590:	b002      	add	sp, #8
 8001592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8001596:	2601      	movs	r6, #1
 8001598:	e7b4      	b.n	8001504 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800159a:	2e00      	cmp	r6, #0
 800159c:	d0be      	beq.n	800151c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800159e:	f107 0120 	add.w	r1, r7, #32
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff fe90 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80015ac:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
 80015b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b4:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fe86 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80015bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80015c0:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fe80 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80015c8:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80015cc:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fe7a 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015d4:	6120      	str	r0, [r4, #16]
 80015d6:	e7a1      	b.n	800151c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0b8      	beq.n	800154e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80015dc:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 80015e2:	e7d5      	b.n	8001590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fe6f 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015ea:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80015ec:	220c      	movs	r2, #12
        listOffset += listSize;
 80015ee:	4405      	add	r5, r0
        readData(listOffset, 12);
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff fe8c 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80015f8:	e797      	b.n	800152a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015fa:	230b      	movs	r3, #11
 80015fc:	e7ef      	b.n	80015de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 80015fe:	bf00      	nop
 8001600:	08027370 	.word	0x08027370
 8001604:	0802738e 	.word	0x0802738e
 8001608:	08027375 	.word	0x08027375
 800160c:	08027233 	.word	0x08027233
 8001610:	080273bb 	.word	0x080273bb
 8001614:	080273c0 	.word	0x080273c0
 8001618:	080273d8 	.word	0x080273d8
 800161c:	080273dd 	.word	0x080273dd
 8001620:	080273f3 	.word	0x080273f3
 8001624:	080273ff 	.word	0x080273ff
 8001628:	08027404 	.word	0x08027404
 800162c:	08027409 	.word	0x08027409
 8001630:	0802740e 	.word	0x0802740e

08001634 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001634:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8001638:	2200      	movs	r2, #0
 800163a:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 800163c:	f7ff bf0a 	b.w	8001454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08001640 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8001640:	b510      	push	{r4, lr}
    movieData = 0;
 8001642:	2300      	movs	r3, #0
{
 8001644:	4604      	mov	r4, r0
 8001646:	4608      	mov	r0, r1
    movieData = 0;
 8001648:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800164a:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 800164c:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4798      	blx	r3
 8001652:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8001654:	4620      	mov	r0, r4
}
 8001656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800165a:	f7ff befb 	b.w	8001454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08001660 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8001660:	b537      	push	{r0, r1, r2, r4, r5, lr}
    FrameBufferAddress = output;
 8001662:	4c12      	ldr	r4, [pc, #72]	; (80016ac <JPEG_Decode_DMA+0x4c>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001664:	f44f 75c0 	mov.w	r5, #384	; 0x180
    FrameBufferAddress = output;
 8001668:	6023      	str	r3, [r4, #0]
    Output_Is_Paused = 0;
 800166a:	2400      	movs	r4, #0
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <JPEG_Decode_DMA+0x50>)
 800166e:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <JPEG_Decode_DMA+0x54>)
 8001672:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <JPEG_Decode_DMA+0x58>)
 8001676:	601c      	str	r4, [r3, #0]
    JPEG_InputImageIndex = 0;
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <JPEG_Decode_DMA+0x5c>)
 800167a:	601c      	str	r4, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <JPEG_Decode_DMA+0x60>)
 800167e:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <JPEG_Decode_DMA+0x64>)
 8001682:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001684:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <JPEG_Decode_DMA+0x68>)
    MCU_BlockIndex = 0;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <JPEG_Decode_DMA+0x6c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001688:	68d2      	ldr	r2, [r2, #12]
    MCU_BlockIndex = 0;
 800168a:	601c      	str	r4, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800168c:	436a      	muls	r2, r5
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <JPEG_Decode_DMA+0x70>)
 8001690:	701c      	strb	r4, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001692:	609c      	str	r4, [r3, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001694:	731c      	strb	r4, [r3, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001696:	615c      	str	r4, [r3, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f008 ffb4 	bl	800a60c <HAL_JPEG_Decode_DMA>

    return 0;
}
 80016a4:	4620      	mov	r0, r4
 80016a6:	b003      	add	sp, #12
 80016a8:	bd30      	pop	{r4, r5, pc}
 80016aa:	bf00      	nop
 80016ac:	200097b0 	.word	0x200097b0
 80016b0:	200097d8 	.word	0x200097d8
 80016b4:	200097c0 	.word	0x200097c0
 80016b8:	200097c4 	.word	0x200097c4
 80016bc:	200097b8 	.word	0x200097b8
 80016c0:	200097b4 	.word	0x200097b4
 80016c4:	200097bc 	.word	0x200097bc
 80016c8:	200097dc 	.word	0x200097dc
 80016cc:	200097d0 	.word	0x200097d0
 80016d0:	20000018 	.word	0x20000018

080016d4 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80016d4:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016d6:	684b      	ldr	r3, [r1, #4]
{
 80016d8:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d119      	bne.n	8001712 <HAL_JPEG_InfoReadyCallback+0x3e>
  {
    if((pInfo->ImageWidth % 16) != 0)
 80016de:	68cb      	ldr	r3, [r1, #12]
 80016e0:	071a      	lsls	r2, r3, #28
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));

    if((pInfo->ImageHeight % 16) != 0)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_JPEG_InfoReadyCallback+0x88>)
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80016e4:	bf1e      	ittt	ne
 80016e6:	f023 030f 	bicne.w	r3, r3, #15
 80016ea:	3310      	addne	r3, #16
 80016ec:	60cb      	strne	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
 80016ee:	688b      	ldr	r3, [r1, #8]
 80016f0:	0719      	lsls	r1, r3, #28
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <HAL_JPEG_InfoReadyCallback+0x8c>)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80016f4:	bf1e      	ittt	ne
 80016f6:	f023 030f 	bicne.w	r3, r3, #15
 80016fa:	3310      	addne	r3, #16
 80016fc:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016fe:	f001 fb49 	bl	8002d94 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 8001702:	b348      	cbz	r0, 8001758 <HAL_JPEG_InfoReadyCallback+0x84>
    {
      assert(status == HAL_OK);
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_JPEG_InfoReadyCallback+0x90>)
 8001706:	f240 2129 	movw	r1, #553	; 0x229
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_JPEG_InfoReadyCallback+0x94>)
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
    if(status != HAL_OK)
    {
      assert(status == HAL_OK);
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <HAL_JPEG_InfoReadyCallback+0x98>)
 800170e:	f024 fa1f 	bl	8025b50 <__assert_func>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001712:	2b02      	cmp	r3, #2
 8001714:	d117      	bne.n	8001746 <HAL_JPEG_InfoReadyCallback+0x72>
      if((pInfo->ImageWidth % 16) != 0)
 8001716:	68cb      	ldr	r3, [r1, #12]
 8001718:	071a      	lsls	r2, r3, #28
 800171a:	d003      	beq.n	8001724 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800171c:	f023 030f 	bic.w	r3, r3, #15
 8001720:	3310      	adds	r3, #16
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001722:	60c3      	str	r3, [r0, #12]
      if((pInfo->ImageHeight % 8) != 0)
 8001724:	6883      	ldr	r3, [r0, #8]
 8001726:	075a      	lsls	r2, r3, #29
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001728:	bf1e      	ittt	ne
 800172a:	f023 0307 	bicne.w	r3, r3, #7
 800172e:	3308      	addne	r3, #8
 8001730:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_JPEG_InfoReadyCallback+0x88>)
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001736:	f00e f89b 	bl	800f870 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 800173a:	b168      	cbz	r0, 8001758 <HAL_JPEG_InfoReadyCallback+0x84>
      assert(status == HAL_OK);
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_JPEG_InfoReadyCallback+0x90>)
 800173e:	f240 2143 	movw	r1, #579	; 0x243
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_JPEG_InfoReadyCallback+0x94>)
 8001744:	e7e2      	b.n	800170c <HAL_JPEG_InfoReadyCallback+0x38>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f3      	bne.n	8001732 <HAL_JPEG_InfoReadyCallback+0x5e>
      if((pInfo->ImageWidth % 8) != 0)
 800174a:	68cb      	ldr	r3, [r1, #12]
 800174c:	0759      	lsls	r1, r3, #29
 800174e:	d0e9      	beq.n	8001724 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001750:	f023 0307 	bic.w	r3, r3, #7
 8001754:	3308      	adds	r3, #8
 8001756:	e7e4      	b.n	8001722 <HAL_JPEG_InfoReadyCallback+0x4e>
    }
  }
}
 8001758:	bd08      	pop	{r3, pc}
 800175a:	bf00      	nop
 800175c:	200097d4 	.word	0x200097d4
 8001760:	200097f0 	.word	0x200097f0
 8001764:	08027413 	.word	0x08027413
 8001768:	08027424 	.word	0x08027424
 800176c:	08027233 	.word	0x08027233

08001770 <HAL_JPEG_GetDataCallback>:
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_JPEG_GetDataCallback+0x30>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	440a      	add	r2, r1
{
 8001776:	b430      	push	{r4, r5}
  JPEG_InputImageIndex += NbDecodedData;
 8001778:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_JPEG_GetDataCallback+0x34>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d20c      	bcs.n	800179c <HAL_JPEG_GetDataCallback+0x2c>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001782:	4c09      	ldr	r4, [pc, #36]	; (80017a8 <HAL_JPEG_GetDataCallback+0x38>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001784:	1a9a      	subs	r2, r3, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001786:	6825      	ldr	r5, [r4, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001788:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800178c:	4429      	add	r1, r5
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800178e:	bf28      	it	cs
 8001790:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001794:	6021      	str	r1, [r4, #0]
  }
}
 8001796:	bc30      	pop	{r4, r5}
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001798:	f008 bf9f 	b.w	800a6da <HAL_JPEG_ConfigInputBuffer>
}
 800179c:	bc30      	pop	{r4, r5}
 800179e:	4770      	bx	lr
 80017a0:	200097b8 	.word	0x200097b8
 80017a4:	200097bc 	.word	0x200097bc
 80017a8:	200097b4 	.word	0x200097b4

080017ac <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017ae:	4d17      	ldr	r5, [pc, #92]	; (800180c <HAL_JPEG_DataReadyCallback+0x60>)
 80017b0:	2701      	movs	r7, #1
 80017b2:	210c      	movs	r1, #12
 80017b4:	4c16      	ldr	r4, [pc, #88]	; (8001810 <HAL_JPEG_DataReadyCallback+0x64>)
 80017b6:	682b      	ldr	r3, [r5, #0]
{
 80017b8:	4606      	mov	r6, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017ba:	4359      	muls	r1, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

    JPEG_OUT_Write_BufferIndex++;
 80017bc:	443b      	add	r3, r7
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80017be:	42bb      	cmp	r3, r7
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017c0:	eb04 0001 	add.w	r0, r4, r1
 80017c4:	5467      	strb	r7, [r4, r1]
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80017c6:	bf88      	it	hi
 80017c8:	2300      	movhi	r3, #0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80017ca:	6082      	str	r2, [r0, #8]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80017cc:	220c      	movs	r2, #12
      JPEG_OUT_Write_BufferIndex = 0;
 80017ce:	602b      	str	r3, [r5, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	4353      	muls	r3, r2
 80017d4:	5ce3      	ldrb	r3, [r4, r3]
 80017d6:	b133      	cbz	r3, 80017e6 <HAL_JPEG_DataReadyCallback+0x3a>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80017d8:	2102      	movs	r1, #2
 80017da:	4630      	mov	r0, r6
 80017dc:	f008 ff4a 	bl	800a674 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_JPEG_DataReadyCallback+0x68>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80017e6:	682a      	ldr	r2, [r5, #0]
 80017e8:	210c      	movs	r1, #12
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_JPEG_DataReadyCallback+0x6c>)
 80017ec:	4630      	mov	r0, r6
 80017ee:	fb01 4402 	mla	r4, r1, r2, r4
 80017f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	6861      	ldr	r1, [r4, #4]
 80017fa:	435a      	muls	r2, r3
 80017fc:	f008 ff70 	bl	800a6e0 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_JPEG_DataReadyCallback+0x70>)
 8001802:	6818      	ldr	r0, [r3, #0]
}
 8001804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SEM_POST(semDecodingDone);
 8001808:	f00b bc34 	b.w	800d074 <osSemaphoreRelease>
 800180c:	200097c4 	.word	0x200097c4
 8001810:	20000018 	.word	0x20000018
 8001814:	200097d8 	.word	0x200097d8
 8001818:	200097dc 	.word	0x200097dc
 800181c:	200097f4 	.word	0x200097f4

08001820 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  __disable_irq();
  while (1)
 8001822:	e7fe      	b.n	8001822 <HAL_JPEG_ErrorCallback+0x2>

08001824 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
  Jpeg_HWDecodingEnd = 1;
 8001824:	4b01      	ldr	r3, [pc, #4]	; (800182c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	4770      	bx	lr
 800182c:	200097cc 	.word	0x200097cc

08001830 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001830:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001834:	4d38      	ldr	r5, [pc, #224]	; (8001918 <JPEG_OutputHandler+0xe8>)
 8001836:	260c      	movs	r6, #12
 8001838:	4c38      	ldr	r4, [pc, #224]	; (800191c <JPEG_OutputHandler+0xec>)
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	4373      	muls	r3, r6
 800183e:	5ce3      	ldrb	r3, [r4, r3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d149      	bne.n	80018d8 <JPEG_OutputHandler+0xa8>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001844:	4a36      	ldr	r2, [pc, #216]	; (8001920 <JPEG_OutputHandler+0xf0>)
 8001846:	6953      	ldr	r3, [r2, #20]
 8001848:	03db      	lsls	r3, r3, #15
 800184a:	d51e      	bpl.n	800188a <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800184c:	2300      	movs	r3, #0
 800184e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001852:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001856:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800185a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800185e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001862:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001866:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001868:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800186c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800186e:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001872:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001874:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001878:	d2f9      	bcs.n	800186e <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 800187a:	3b20      	subs	r3, #32
 800187c:	f113 0f20 	cmn.w	r3, #32
 8001880:	d1f2      	bne.n	8001868 <JPEG_OutputHandler+0x38>
 8001882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001886:	f3bf 8f6f 	isb	sy
    {
      SCB_CleanInvalidateDCache();
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800188a:	260c      	movs	r6, #12
 800188c:	4f25      	ldr	r7, [pc, #148]	; (8001924 <JPEG_OutputHandler+0xf4>)
 800188e:	6828      	ldr	r0, [r5, #0]
 8001890:	eb0d 0306 	add.w	r3, sp, r6
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	fb06 4000 	mla	r0, r6, r0, r4
 800189a:	4923      	ldr	r1, [pc, #140]	; (8001928 <JPEG_OutputHandler+0xf8>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <JPEG_OutputHandler+0xfc>)
 80018a0:	6809      	ldr	r1, [r1, #0]
 80018a2:	f8d3 8000 	ldr.w	r8, [r3]
 80018a6:	6883      	ldr	r3, [r0, #8]
 80018a8:	6840      	ldr	r0, [r0, #4]
 80018aa:	47c0      	blx	r8

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018ac:	682a      	ldr	r2, [r5, #0]
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018ae:	683b      	ldr	r3, [r7, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018b0:	4356      	muls	r6, r2
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 80018b2:	3201      	adds	r2, #1
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018b4:	4418      	add	r0, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018b6:	2300      	movs	r3, #0
    JPEG_OUT_Read_BufferIndex++;
 80018b8:	2a01      	cmp	r2, #1
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018ba:	eb04 0106 	add.w	r1, r4, r6
 80018be:	55a3      	strb	r3, [r4, r6]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 80018c0:	608b      	str	r3, [r1, #8]
    JPEG_OUT_Read_BufferIndex++;
 80018c2:	bf98      	it	ls
 80018c4:	4613      	movls	r3, r2
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018c6:	6038      	str	r0, [r7, #0]
    JPEG_OUT_Read_BufferIndex++;
 80018c8:	602b      	str	r3, [r5, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
    {
      JPEG_OUT_Read_BufferIndex = 0;
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <JPEG_OutputHandler+0x100>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10f      	bne.n	80018f4 <JPEG_OutputHandler+0xc4>
    {
      return 1;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e018      	b.n	800190a <JPEG_OutputHandler+0xda>
    }
  }
  else if((Output_Is_Paused == 1) && \
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <JPEG_OutputHandler+0x104>)
 80018da:	680a      	ldr	r2, [r1, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80018dc:	2a01      	cmp	r2, #1
 80018de:	d117      	bne.n	8001910 <JPEG_OutputHandler+0xe0>
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <JPEG_OutputHandler+0x108>)
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4372      	muls	r2, r6
  else if((Output_Is_Paused == 1) && \
 80018e6:	5ca2      	ldrb	r2, [r4, r2]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	d111      	bne.n	8001910 <JPEG_OutputHandler+0xe0>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
  {
    Output_Is_Paused = 0;
 80018ec:	600b      	str	r3, [r1, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80018ee:	2102      	movs	r1, #2
 80018f0:	f009 f92c 	bl	800ab4c <HAL_JPEG_Resume>
  else
  {
    return 2;
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <JPEG_OutputHandler+0xf4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <JPEG_OutputHandler+0x100>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d109      	bne.n	8001914 <JPEG_OutputHandler+0xe4>
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <JPEG_OutputHandler+0x10c>)
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	3800      	subs	r0, #0
 8001906:	bf18      	it	ne
 8001908:	2001      	movne	r0, #1
  {
    return 1;
  }

  return 0;
}
 800190a:	b004      	add	sp, #16
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 2;
 8001910:	2002      	movs	r0, #2
 8001912:	e7fa      	b.n	800190a <JPEG_OutputHandler+0xda>
  return 0;
 8001914:	2000      	movs	r0, #0
 8001916:	e7f8      	b.n	800190a <JPEG_OutputHandler+0xda>
 8001918:	200097c0 	.word	0x200097c0
 800191c:	20000018 	.word	0x20000018
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	200097d0 	.word	0x200097d0
 8001928:	200097b0 	.word	0x200097b0
 800192c:	200097f0 	.word	0x200097f0
 8001930:	200097d4 	.word	0x200097d4
 8001934:	200097d8 	.word	0x200097d8
 8001938:	200097c4 	.word	0x200097c4
 800193c:	200097cc 	.word	0x200097cc

08001940 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8001940:	b538      	push	{r3, r4, r5, lr}
    if (length == 0)
 8001942:	b36a      	cbz	r2, 80019a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
    if (outputBuffer) //only decode if buffers are assigned.
 8001944:	b363      	cbz	r3, 80019a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8001946:	4c17      	ldr	r4, [pc, #92]	; (80019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
 8001948:	2502      	movs	r5, #2
 800194a:	6125      	str	r5, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800194c:	68c5      	ldr	r5, [r0, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800194e:	6900      	ldr	r0, [r0, #16]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001950:	f015 0f0f 	tst.w	r5, #15
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001954:	f000 000f 	and.w	r0, r0, #15
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001958:	bf18      	it	ne
 800195a:	f025 050f 	bicne.w	r5, r5, #15
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800195e:	f1c0 0010 	rsb	r0, r0, #16
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001962:	bf18      	it	ne
 8001964:	3510      	addne	r5, #16
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001966:	60a0      	str	r0, [r4, #8]
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001968:	6025      	str	r5, [r4, #0]
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800196a:	f44f 65c8 	mov.w	r5, #1600	; 0x640
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001970:	6065      	str	r5, [r4, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001972:	6825      	ldr	r5, [r4, #0]
 8001974:	092d      	lsrs	r5, r5, #4
 8001976:	60e5      	str	r5, [r4, #12]
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001978:	f7ff fe72 	bl	8001660 <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800197c:	4d0a      	ldr	r5, [pc, #40]	; (80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
 800197e:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff ff55 	bl	8001830 <JPEG_OutputHandler>
 8001986:	6020      	str	r0, [r4, #0]
        if (JpegProcessing_End == 2)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d105      	bne.n	800199a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5a>
          SEM_WAIT(semDecodingDone);
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	f00b fb33 	bl	800d000 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d1ef      	bne.n	8001980 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x40>
}
 80019a0:	bd38      	pop	{r3, r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	200097dc 	.word	0x200097dc
 80019a8:	200121d0 	.word	0x200121d0
 80019ac:	200097c8 	.word	0x200097c8
 80019b0:	200097f4 	.word	0x200097f4

080019b4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80019b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019b8:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80019ba:	6943      	ldr	r3, [r0, #20]
{
 80019bc:	4604      	mov	r4, r0
 80019be:	460f      	mov	r7, r1
 80019c0:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80019c2:	b92b      	cbnz	r3, 80019d0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80019c6:	21b9      	movs	r1, #185	; 0xb9
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80019ca:	482b      	ldr	r0, [pc, #172]	; (8001a78 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 80019cc:	f024 f8c0 	bl	8025b50 <__assert_func>
    readData(currentMovieOffset, 8);
 80019d0:	2208      	movs	r2, #8
 80019d2:	6981      	ldr	r1, [r0, #24]
 80019d4:	f7ff fc9c 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019d8:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019da:	4620      	mov	r0, r4
 80019dc:	f106 0a08 	add.w	sl, r6, #8
 80019e0:	1d31      	adds	r1, r6, #4
 80019e2:	f7ff fc71 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80019e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019e8:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019ec:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d231      	bcs.n	8001a56 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019f2:	4631      	mov	r1, r6
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fc7c 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80019fa:	f243 0330 	movw	r3, #12336	; 0x3030
 80019fe:	4298      	cmp	r0, r3
 8001a00:	d11d      	bne.n	8001a3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001a02:	1cb1      	adds	r1, r6, #2
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fc74 	bl	80012f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001a0a:	f246 3364 	movw	r3, #25444	; 0x6364
 8001a0e:	4298      	cmp	r0, r3
 8001a10:	d115      	bne.n	8001a3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001a12:	b1a5      	cbz	r5, 8001a3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a14:	462a      	mov	r2, r5
 8001a16:	4651      	mov	r1, sl
 8001a18:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8001a1a:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a1e:	f7ff fc77 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a24:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001a26:	462a      	mov	r2, r5
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f8cd 8000 	str.w	r8, [sp]
 8001a2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001a32:	463b      	mov	r3, r7
 8001a34:	f7ff ff84 	bl	8001940 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001a3e:	69a3      	ldr	r3, [r4, #24]
 8001a40:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8001a42:	b18d      	cbz	r5, 8001a68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8001a44:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a46:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001a48:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001a50:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001a52:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001a54:	d10a      	bne.n	8001a6c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8001a56:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8001a58:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8001a5a:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001a5c:	61a3      	str	r3, [r4, #24]
}
 8001a5e:	f080 0001 	eor.w	r0, r0, #1
 8001a62:	b004      	add	sp, #16
 8001a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8001a68:	3308      	adds	r3, #8
 8001a6a:	e7eb      	b.n	8001a44 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e7f6      	b.n	8001a5e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001a70:	080272f4 	.word	0x080272f4
 8001a74:	0802746c 	.word	0x0802746c
 8001a78:	08027233 	.word	0x08027233

08001a7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a7e:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001a80:	6981      	ldr	r1, [r0, #24]
{
 8001a82:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8001a84:	2208      	movs	r2, #8
 8001a86:	f7ff fc43 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a8a:	69a6      	ldr	r6, [r4, #24]
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	1d31      	adds	r1, r6, #4
 8001a90:	f7ff fc1a 	bl	80012c8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a94:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a98:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a9a:	9001      	str	r0, [sp, #4]
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff fc37 	bl	8001310 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001aa2:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001aa4:	b16d      	cbz	r5, 8001ac2 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001aa6:	462b      	mov	r3, r5
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001aa8:	4c07      	ldr	r4, [pc, #28]	; (8001ac8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001aaa:	4d08      	ldr	r5, [pc, #32]	; (8001acc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001aac:	9a01      	ldr	r2, [sp, #4]
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001ab0:	f7ff fdd6 	bl	8001660 <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f7ff febb 	bl	8001830 <JPEG_OutputHandler>
 8001aba:	6020      	str	r0, [r4, #0]
      while(JpegProcessing_End == 0);
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f8      	beq.n	8001ab4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	200097c8 	.word	0x200097c8
 8001acc:	200121d0 	.word	0x200121d0

08001ad0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	2200      	movs	r2, #0
{
 8001ad4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	f00b fa3c 	bl	800cf54 <osSemaphoreNew>
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001ade:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ae0:	b928      	cbnz	r0, 8001aee <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ae4:	2128      	movs	r1, #40	; 0x28
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001aea:	f024 f831 	bl	8025b50 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2104      	movs	r1, #4
 8001af2:	2001      	movs	r0, #1
 8001af4:	f00b faf4 	bl	800d0e0 <osMessageQueueNew>
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001afa:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001afc:	b918      	cbnz	r0, 8001b06 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001b04:	e7f0      	b.n	8001ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001b06:	bd08      	pop	{r3, pc}
 8001b08:	200097fc 	.word	0x200097fc
 8001b0c:	0802750c 	.word	0x0802750c
 8001b10:	08027555 	.word	0x08027555
 8001b14:	08027584 	.word	0x08027584
 8001b18:	200097f8 	.word	0x200097f8
 8001b1c:	080275e6 	.word	0x080275e6

08001b20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001b22:	f04f 31ff 	mov.w	r1, #4294967295
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f00b ba6a 	b.w	800d000 <osSemaphoreAcquire>
 8001b2c:	200097fc 	.word	0x200097fc

08001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001b30:	4b01      	ldr	r3, [pc, #4]	; (8001b38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f00b ba9e 	b.w	800d074 <osSemaphoreRelease>
 8001b38:	200097fc 	.word	0x200097fc

08001b3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	f00b ba5d 	b.w	800d000 <osSemaphoreAcquire>
 8001b46:	bf00      	nop
 8001b48:	200097fc 	.word	0x200097fc

08001b4c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001b4c:	f7ff bff0 	b.w	8001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001b50 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001b50:	2300      	movs	r3, #0
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001b56:	461a      	mov	r2, r3
 8001b58:	6800      	ldr	r0, [r0, #0]
 8001b5a:	f00b bb07 	b.w	800d16c <osMessageQueuePut>
 8001b5e:	bf00      	nop
 8001b60:	200097f8 	.word	0x200097f8
 8001b64:	20000030 	.word	0x20000030

08001b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001b68:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	4c07      	ldr	r4, [pc, #28]	; (8001b8c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001b6e:	a901      	add	r1, sp, #4
 8001b70:	461a      	mov	r2, r3
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	f00b fb3c 	bl	800d1f0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	a901      	add	r1, sp, #4
 8001b80:	6820      	ldr	r0, [r4, #0]
 8001b82:	f00b fb35 	bl	800d1f0 <osMessageQueueGet>
}
 8001b86:	b002      	add	sp, #8
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200097f8 	.word	0x200097f8

08001b90 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001b90:	6803      	ldr	r3, [r0, #0]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	4718      	bx	r3

08001b96 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001b96:	2001      	movs	r0, #1
 8001b98:	4770      	bx	lr

08001b9a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001b9a:	6803      	ldr	r3, [r0, #0]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	4718      	bx	r3

08001ba0 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001ba2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bae:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bbc:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001bc4:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <_ZN8STM32DMA10initializeEv+0x3c>)
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_ZN8STM32DMA10initializeEv+0x40>)
 8001bca:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <_ZN8STM32DMA10initializeEv+0x44>)
 8001bd2:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001bd4:	b002      	add	sp, #8
 8001bd6:	4770      	bx	lr
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	20011ff4 	.word	0x20011ff4
 8001be0:	08001c29 	.word	0x08001c29
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001be8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001bec:	4770      	bx	lr
	...

08001bf0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bf6:	6003      	str	r3, [r0, #0]
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <_ZN8STM32DMAD1Ev+0x1c>)
 8001bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c02:	f3bf 8f6f 	isb	sy
}
 8001c06:	4770      	bx	lr
 8001c08:	08027798 	.word	0x08027798
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001c10:	b510      	push	{r4, lr}
 8001c12:	4604      	mov	r4, r0
}
 8001c14:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001c18:	f7ff ffea 	bl	8001bf0 <_ZN8STM32DMAD1Ev>
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f023 ff68 	bl	8025af2 <_ZdlPvj>
 8001c22:	4620      	mov	r0, r4
 8001c24:	bd10      	pop	{r4, pc}
	...

08001c28 <DMA2D_XferCpltCallback>:
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <DMA2D_XferCpltCallback+0xc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001c2e:	6803      	ldr	r3, [r0, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4718      	bx	r3
 8001c34:	20027ba0 	.word	0x20027ba0

08001c38 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <_ZN8STM32DMAC1Ev+0x30>)
 8001c3e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001c40:	2600      	movs	r6, #0
 8001c42:	4625      	mov	r5, r4
 8001c44:	2260      	movs	r2, #96	; 0x60
 8001c46:	6060      	str	r0, [r4, #4]
 8001c48:	7226      	strb	r6, [r4, #8]
 8001c4a:	7266      	strb	r6, [r4, #9]
 8001c4c:	f845 3b20 	str.w	r3, [r5], #32
 8001c50:	4629      	mov	r1, r5
 8001c52:	f00f fad7 	bl	8011204 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001c56:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001c5a:	60ee      	str	r6, [r5, #12]
 8001c5c:	3524      	adds	r5, #36	; 0x24
 8001c5e:	42ab      	cmp	r3, r5
 8001c60:	d1fb      	bne.n	8001c5a <_ZN8STM32DMAC1Ev+0x22>
}
 8001c62:	4620      	mov	r0, r4
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	bf00      	nop
 8001c68:	08027798 	.word	0x08027798

08001c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c6c:	b508      	push	{r3, lr}
    switch (format)
 8001c6e:	290b      	cmp	r1, #11
 8001c70:	d80b      	bhi.n	8001c8a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001c72:	e8df f001 	tbb	[pc, r1]
 8001c76:	0612      	.short	0x0612
 8001c78:	0a0a0a10 	.word	0x0a0a0a10
 8001c7c:	0808080a 	.word	0x0808080a
 8001c80:	0808      	.short	0x0808
 8001c82:	2001      	movs	r0, #1
}
 8001c84:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001c86:	2005      	movs	r0, #5
        break;
 8001c88:	e7fc      	b.n	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001c8c:	2166      	movs	r1, #102	; 0x66
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001c92:	f023 ff5d 	bl	8025b50 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7f4      	b.n	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001c9a:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001c9c:	e7f2      	b.n	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001c9e:	bf00      	nop
 8001ca0:	08027628 	.word	0x08027628
 8001ca4:	08027643 	.word	0x08027643
 8001ca8:	0802768d 	.word	0x0802768d

08001cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001cac:	b508      	push	{r3, lr}
    switch (format)
 8001cae:	290a      	cmp	r1, #10
 8001cb0:	d809      	bhi.n	8001cc6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001cb2:	e8df f001 	tbb	[pc, r1]
 8001cb6:	0610      	.short	0x0610
 8001cb8:	0808080e 	.word	0x0808080e
 8001cbc:	06060608 	.word	0x06060608
 8001cc0:	06          	.byte	0x06
 8001cc1:	00          	.byte	0x00
 8001cc2:	2001      	movs	r0, #1
}
 8001cc4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001cc8:	2187      	movs	r1, #135	; 0x87
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001cce:	f023 ff3f 	bl	8025b50 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e7f6      	b.n	8001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001cd6:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001cd8:	e7f4      	b.n	8001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001cda:	bf00      	nop
 8001cdc:	08027628 	.word	0x08027628
 8001ce0:	080276ed 	.word	0x080276ed
 8001ce4:	0802768d 	.word	0x0802768d

08001ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cec:	7f4f      	ldrb	r7, [r1, #29]
{
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cf2:	4639      	mov	r1, r7
 8001cf4:	f7ff ffba 	bl	8001c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cf8:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001cfc:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cfe:	4648      	mov	r0, r9
 8001d00:	4641      	mov	r1, r8
 8001d02:	f7ff ffb3 	bl	8001c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d06:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d08:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d0a:	4648      	mov	r0, r9
 8001d0c:	f7ff ffce 	bl	8001cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d10:	8aa1      	ldrh	r1, [r4, #20]
 8001d12:	8b62      	ldrh	r2, [r4, #26]
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d16:	1a52      	subs	r2, r2, r1
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d1a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001d1c:	8b22      	ldrh	r2, [r4, #24]
 8001d1e:	1a52      	subs	r2, r2, r1
 8001d20:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d22:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001d24:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d2a:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d2e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d30:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d32:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001d34:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d36:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001d3a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d3c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001d40:	d026      	beq.n	8001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001d42:	d810      	bhi.n	8001d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001d44:	2920      	cmp	r1, #32
 8001d46:	ea45 0402 	orr.w	r4, r5, r2
 8001d4a:	d062      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001d4c:	2940      	cmp	r1, #64	; 0x40
 8001d4e:	d060      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001d50:	2904      	cmp	r1, #4
 8001d52:	d05e      	beq.n	8001e12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d54:	432a      	orrs	r2, r5
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d58:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d5e:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d60:	d05b      	beq.n	8001e1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001d64:	e040      	b.n	8001de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001d66:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d6a:	d007      	beq.n	8001d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001d6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001d70:	d1f0      	bne.n	8001d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d76:	f042 0209 	orr.w	r2, r2, #9
 8001d7a:	e003      	b.n	8001d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d80:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d84:	61da      	str	r2, [r3, #28]
        return color;
 8001d86:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001d88:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d8a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d8c:	6158      	str	r0, [r3, #20]
 8001d8e:	e02a      	b.n	8001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001d90:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d92:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d94:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d9a:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d9c:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001d9e:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001da0:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001da2:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001da4:	b142      	cbz	r2, 8001db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001da6:	2a01      	cmp	r2, #1
 8001da8:	d021      	beq.n	8001dee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001dac:	f240 1111 	movw	r1, #273	; 0x111
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001db2:	481f      	ldr	r0, [pc, #124]	; (8001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001db4:	f023 fecc 	bl	8025b50 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001db8:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001dba:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dbc:	8861      	ldrh	r1, [r4, #2]
 8001dbe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001dc2:	3901      	subs	r1, #1
 8001dc4:	f022 0210 	bic.w	r2, r2, #16
 8001dc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dcc:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	0692      	lsls	r2, r2, #26
 8001ddc:	d4fc      	bmi.n	8001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001dde:	2210      	movs	r2, #16
 8001de0:	609a      	str	r2, [r3, #8]
            if(blend)
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d0bd      	beq.n	8001d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001de8:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dee:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8001df0:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001df4:	69d9      	ldr	r1, [r3, #28]
 8001df6:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8001dfa:	bf18      	it	ne
 8001dfc:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dfe:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	61da      	str	r2, [r3, #28]
                break;
 8001e10:	e7dd      	b.n	8001dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001e12:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001e16:	61dc      	str	r4, [r3, #28]
 8001e18:	e7b7      	b.n	8001d8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001e1a:	f240 2201 	movw	r2, #513	; 0x201
 8001e1e:	e7e3      	b.n	8001de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001e20:	4002b000 	.word	0x4002b000
 8001e24:	00010201 	.word	0x00010201
 8001e28:	08027738 	.word	0x08027738
 8001e2c:	08027752 	.word	0x08027752
 8001e30:	0802768d 	.word	0x0802768d
 8001e34:	00020201 	.word	0x00020201

08001e38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e3c:	7f89      	ldrb	r1, [r1, #30]
 8001e3e:	f7ff ff35 	bl	8001cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e44:	8aa6      	ldrh	r6, [r4, #20]
 8001e46:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e48:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e4a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e4e:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e50:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001e52:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e54:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e56:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001e5a:	6826      	ldr	r6, [r4, #0]
 8001e5c:	68e1      	ldr	r1, [r4, #12]
 8001e5e:	2e08      	cmp	r6, #8
 8001e60:	d10d      	bne.n	8001e7e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e62:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e64:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001e66:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001e6a:	7f20      	ldrb	r0, [r4, #28]
 8001e6c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001e70:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001e72:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001e74:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e76:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e78:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e7a:	601a      	str	r2, [r3, #0]
    }
}
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001e7e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001e80:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001e82:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8001e84:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001e86:	0a0a      	lsrs	r2, r1, #8
 8001e88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8001e8c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001e90:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8001e94:	4302      	orrs	r2, r0
 8001e96:	430a      	orrs	r2, r1
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001e9c:	e7ed      	b.n	8001e7a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001e9e:	bf00      	nop
 8001ea0:	4002b000 	.word	0x4002b000
 8001ea4:	00010009 	.word	0x00010009
 8001ea8:	00020201 	.word	0x00020201
 8001eac:	00030201 	.word	0x00030201

08001eb0 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	07d2      	lsls	r2, r2, #31
 8001eb6:	d4fc      	bmi.n	8001eb2 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001eb8:	2223      	movs	r2, #35	; 0x23
 8001eba:	609a      	str	r2, [r3, #8]
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	4002b000 	.word	0x4002b000

08001ec4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8001ec4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001ec6:	4c10      	ldr	r4, [pc, #64]	; (8001f08 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8001ec8:	6825      	ldr	r5, [r4, #0]
 8001eca:	07ed      	lsls	r5, r5, #31
 8001ecc:	d4fc      	bmi.n	8001ec8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ece:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ed0:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ed4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ed6:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001eda:	f04f 0502 	mov.w	r5, #2
 8001ede:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ee0:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001ee2:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8001ee4:	d00a      	beq.n	8001efc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ee6:	4909      	ldr	r1, [pc, #36]	; (8001f0c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ee8:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001eea:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001eee:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 8001ef2:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001ef4:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001ef6:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001ef8:	6023      	str	r3, [r4, #0]
    }
}
 8001efa:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001efc:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8001efe:	9b03      	ldr	r3, [sp, #12]
 8001f00:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 8001f04:	e7f8      	b.n	8001ef8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 8001f06:	bf00      	nop
 8001f08:	4002b000 	.word	0x4002b000
 8001f0c:	00010009 	.word	0x00010009
 8001f10:	00020001 	.word	0x00020001
 8001f14:	00030001 	.word	0x00030001

08001f18 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8001f18:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f1a:	4c0f      	ldr	r4, [pc, #60]	; (8001f58 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x40>)
 8001f1c:	6825      	ldr	r5, [r4, #0]
 8001f1e:	07ed      	lsls	r5, r5, #31
 8001f20:	d4fc      	bmi.n	8001f1c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f22:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f24:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8001f26:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f28:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f2e:	f04f 0502 	mov.w	r5, #2
 8001f32:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f34:	6462      	str	r2, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f36:	63e0      	str	r0, [r4, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f38:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8001f3a:	d008      	beq.n	8001f4e <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x36>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	f043 1302 	orr.w	r3, r3, #131074	; 0x20002
 8001f42:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x44>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f46:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f48:	6160      	str	r0, [r4, #20]
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f4a:	6023      	str	r3, [r4, #0]
    }
}
 8001f4c:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << 24));
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x48>)
 8001f50:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f52:	2301      	movs	r3, #1
 8001f54:	e7f9      	b.n	8001f4a <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x32>
 8001f56:	bf00      	nop
 8001f58:	4002b000 	.word	0x4002b000
 8001f5c:	00020001 	.word	0x00020001
 8001f60:	ff020002 	.word	0xff020002

08001f64 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8001f64:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f66:	4c0b      	ldr	r4, [pc, #44]	; (8001f94 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x30>)
 8001f68:	6825      	ldr	r5, [r4, #0]
 8001f6a:	07ed      	lsls	r5, r5, #31
 8001f6c:	d4fc      	bmi.n	8001f68 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f6e:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f70:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f72:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f74:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f76:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f7a:	2502      	movs	r5, #2
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f80:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f82:	6462      	str	r2, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f84:	63e0      	str	r0, [r4, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f86:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << 24));
 8001f88:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f8c:	6265      	str	r5, [r4, #36]	; 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f8e:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f90:	6023      	str	r3, [r4, #0]
}
 8001f92:	bd30      	pop	{r4, r5, pc}
 8001f94:	4002b000 	.word	0x4002b000
 8001f98:	00020001 	.word	0x00020001

08001f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	4770      	bx	lr

08001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001fa0:	2038      	movs	r0, #56	; 0x38
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001fa4:	2338      	movs	r3, #56	; 0x38
 8001fa6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001faa:	3008      	adds	r0, #8
 8001fac:	4770      	bx	lr

08001fae <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001fae:	2338      	movs	r3, #56	; 0x38
 8001fb0:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fb4:	3008      	adds	r0, #8
 8001fb6:	4770      	bx	lr

08001fb8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001fb8:	2001      	movs	r0, #1
 8001fba:	4770      	bx	lr

08001fbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001fbc:	f243 50d0 	movw	r0, #13776	; 0x35d0
 8001fc0:	4770      	bx	lr

08001fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fc2:	f243 53d0 	movw	r3, #13776	; 0x35d0
 8001fc6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fca:	3008      	adds	r0, #8
 8001fcc:	4770      	bx	lr

08001fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fce:	f243 53d0 	movw	r3, #13776	; 0x35d0
 8001fd2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fd6:	3008      	adds	r0, #8
 8001fd8:	4770      	bx	lr

08001fda <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001fda:	2001      	movs	r0, #1
 8001fdc:	4770      	bx	lr

08001fde <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001fde:	2010      	movs	r0, #16
 8001fe0:	4770      	bx	lr

08001fe2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fe2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001fe6:	3008      	adds	r0, #8
 8001fe8:	4770      	bx	lr

08001fea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001fea:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001fee:	3008      	adds	r0, #8
 8001ff0:	4770      	bx	lr

08001ff2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	f003 bdda 	b.w	8005bac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	6003      	str	r3, [r0, #0]
 8002000:	f00d fcbd 	bl	800f97e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002004:	4620      	mov	r0, r4
 8002006:	bd10      	pop	{r4, pc}
 8002008:	08027850 	.word	0x08027850

0800200c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	f7ff fff2 	bl	8001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002014:	2140      	movs	r1, #64	; 0x40
 8002016:	4620      	mov	r0, r4
 8002018:	f023 fd6b 	bl	8025af2 <_ZdlPvj>
 800201c:	4620      	mov	r0, r4
 800201e:	bd10      	pop	{r4, pc}

08002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002022:	b510      	push	{r4, lr}
 8002024:	4604      	mov	r4, r0
 8002026:	6003      	str	r3, [r0, #0]
 8002028:	f00d fca9 	bl	800f97e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800202c:	4620      	mov	r0, r4
 800202e:	bd10      	pop	{r4, pc}
 8002030:	0802781c 	.word	0x0802781c

08002034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	f7ff fff2 	bl	8002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800203c:	f243 51d8 	movw	r1, #13784	; 0x35d8
 8002040:	4620      	mov	r0, r4
 8002042:	f023 fd56 	bl	8025af2 <_ZdlPvj>
 8002046:	4620      	mov	r0, r4
 8002048:	bd10      	pop	{r4, pc}
	...

0800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800204e:	b510      	push	{r4, lr}
 8002050:	4604      	mov	r4, r0
 8002052:	6003      	str	r3, [r0, #0]
 8002054:	f00d fc93 	bl	800f97e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002058:	4620      	mov	r0, r4
 800205a:	bd10      	pop	{r4, pc}
 800205c:	080277e8 	.word	0x080277e8

08002060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	f7ff fff2 	bl	800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002068:	2118      	movs	r1, #24
 800206a:	4620      	mov	r0, r4
 800206c:	f023 fd41 	bl	8025af2 <_ZdlPvj>
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}

08002074 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <_ZN12FrontendHeapD1Ev+0x28>)
 8002076:	b510      	push	{r4, lr}
 8002078:	4604      	mov	r4, r0
 800207a:	6003      	str	r3, [r0, #0]
 800207c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
 8002080:	3004      	adds	r0, #4
 8002082:	f7ff ffb9 	bl	8001ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002086:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800208a:	f7ff ffc9 	bl	8002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800208e:	f104 0014 	add.w	r0, r4, #20
 8002092:	f7ff ffdb 	bl	800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002096:	4620      	mov	r0, r4
 8002098:	bd10      	pop	{r4, pc}
 800209a:	bf00      	nop
 800209c:	08027884 	.word	0x08027884

080020a0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80020a0:	b508      	push	{r3, lr}
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <__tcf_0+0xc>)
 80020a4:	f7ff ffe6 	bl	8002074 <_ZN12FrontendHeapD1Ev>
 80020a8:	bd08      	pop	{r3, pc}
 80020aa:	bf00      	nop
 80020ac:	20009804 	.word	0x20009804

080020b0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
 80020b4:	f7ff ffde 	bl	8002074 <_ZN12FrontendHeapD1Ev>
 80020b8:	f243 71a4 	movw	r1, #14244	; 0x37a4
 80020bc:	4620      	mov	r0, r4
 80020be:	f023 fd18 	bl	8025af2 <_ZdlPvj>
 80020c2:	4620      	mov	r0, r4
 80020c4:	bd10      	pop	{r4, pc}
	...

080020c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80020c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80020cc:	f003 f924 	bl	8005318 <_ZN14BitmapDatabase11getInstanceEv>
 80020d0:	2400      	movs	r4, #0
 80020d2:	4605      	mov	r5, r0
 80020d4:	f003 f924 	bl	8005320 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80020d8:	4623      	mov	r3, r4
 80020da:	4601      	mov	r1, r0
 80020dc:	4622      	mov	r2, r4
 80020de:	4628      	mov	r0, r5
 80020e0:	9400      	str	r4, [sp, #0]
 80020e2:	f017 fb23 	bl	801972c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <touchgfx_init+0xb8>)
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80020ea:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80020ec:	4d26      	ldr	r5, [pc, #152]	; (8002188 <touchgfx_init+0xc0>)
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f005 f96c 	bl	80073cc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80020f4:	4825      	ldr	r0, [pc, #148]	; (800218c <touchgfx_init+0xc4>)
 80020f6:	f017 fa81 	bl	80195fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80020fa:	782b      	ldrb	r3, [r5, #0]
 80020fc:	f3bf 8f5b 	dmb	ish
 8002100:	07db      	lsls	r3, r3, #31
 8002102:	d436      	bmi.n	8002172 <touchgfx_init+0xaa>
 8002104:	4628      	mov	r0, r5
 8002106:	f023 fcf6 	bl	8025af6 <__cxa_guard_acquire>
 800210a:	b390      	cbz	r0, 8002172 <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800210c:	4c20      	ldr	r4, [pc, #128]	; (8002190 <touchgfx_init+0xc8>)
 800210e:	4f21      	ldr	r7, [pc, #132]	; (8002194 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <touchgfx_init+0xd0>)
 8002112:	f104 0014 	add.w	r0, r4, #20
 8002116:	f107 0644 	add.w	r6, r7, #68	; 0x44
 800211a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800211e:	6023      	str	r3, [r4, #0]
 8002120:	6060      	str	r0, [r4, #4]
 8002122:	f8c4 8008 	str.w	r8, [r4, #8]
 8002126:	60e7      	str	r7, [r4, #12]
 8002128:	6126      	str	r6, [r4, #16]
 800212a:	f00d fc29 	bl	800f980 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <touchgfx_init+0xd4>)
 8002130:	4640      	mov	r0, r8
 8002132:	6163      	str	r3, [r4, #20]
 8002134:	f00d fc24 	bl	800f980 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <touchgfx_init+0xd8>)
 800213a:	4638      	mov	r0, r7
 800213c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800213e:	f00d fc1f 	bl	800f980 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002142:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <touchgfx_init+0xdc>)
 8002148:	f203 6044 	addw	r0, r3, #1604	; 0x644
 800214c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
 8002150:	f005 f9b8 	bl	80074c4 <_ZN5ModelC1Ev>
 8002154:	4622      	mov	r2, r4
 8002156:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800215a:	4630      	mov	r0, r6
 800215c:	f005 f9a8 	bl	80074b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002160:	4630      	mov	r0, r6
 8002162:	f003 fd23 	bl	8005bac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002166:	4810      	ldr	r0, [pc, #64]	; (80021a8 <touchgfx_init+0xe0>)
 8002168:	f023 fd10 	bl	8025b8c <atexit>
 800216c:	4628      	mov	r0, r5
 800216e:	f023 fcce 	bl	8025b0e <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002172:	480e      	ldr	r0, [pc, #56]	; (80021ac <touchgfx_init+0xe4>)
}
 8002174:	b002      	add	sp, #8
 8002176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800217a:	f7fe bddb 	b.w	8000d34 <_ZN11TouchGFXHAL10initializeEv>
 800217e:	bf00      	nop
 8002180:	20027c04 	.word	0x20027c04
 8002184:	2000ddc8 	.word	0x2000ddc8
 8002188:	20009800 	.word	0x20009800
 800218c:	20000034 	.word	0x20000034
 8002190:	20009804 	.word	0x20009804
 8002194:	2000ce08 	.word	0x2000ce08
 8002198:	08027884 	.word	0x08027884
 800219c:	080277e8 	.word	0x080277e8
 80021a0:	0802781c 	.word	0x0802781c
 80021a4:	08027850 	.word	0x08027850
 80021a8:	080020a1 	.word	0x080020a1
 80021ac:	2000dd4c 	.word	0x2000dd4c

080021b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80021b0:	4770      	bx	lr
	...

080021b4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80021b4:	4801      	ldr	r0, [pc, #4]	; (80021bc <touchgfx_taskEntry+0x8>)
 80021b6:	f7fe bdd7 	b.w	8000d68 <_ZN11TouchGFXHAL9taskEntryEv>
 80021ba:	bf00      	nop
 80021bc:	2000dd4c 	.word	0x2000dd4c

080021c0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80021c0:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80021c6:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80021c8:	4608      	mov	r0, r1
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	f7ff fd34 	bl	8001c38 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80021d2:	4610      	mov	r0, r2
 80021d4:	f01a fbb6 	bl	801c944 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80021d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80021dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80021e2:	4808      	ldr	r0, [pc, #32]	; (8002204 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80021e4:	e9cd 3200 	strd	r3, r2, [sp]
 80021e8:	4623      	mov	r3, r4
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80021ec:	f7fe fe6c 	bl	8000ec8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80021f0:	b002      	add	sp, #8
 80021f2:	bd10      	pop	{r4, pc}
 80021f4:	2000cfac 	.word	0x2000cfac
 80021f8:	08026f7c 	.word	0x08026f7c
 80021fc:	2000cfa8 	.word	0x2000cfa8
 8002200:	2000ddcc 	.word	0x2000ddcc
 8002204:	2000dd4c 	.word	0x2000dd4c

08002208 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002208:	4801      	ldr	r0, [pc, #4]	; (8002210 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800220a:	f7ff bcf1 	b.w	8001bf0 <_ZN8STM32DMAD1Ev>
 800220e:	bf00      	nop
 8002210:	2000cfac 	.word	0x2000cfac

08002214 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002214:	2000      	movs	r0, #0
 8002216:	4770      	bx	lr

08002218 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002218:	8081      	strh	r1, [r0, #4]
    }
 800221a:	4770      	bx	lr

0800221c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800221c:	80c1      	strh	r1, [r0, #6]
    }
 800221e:	4770      	bx	lr

08002220 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002220:	8101      	strh	r1, [r0, #8]
    }
 8002222:	4770      	bx	lr

08002224 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002224:	8141      	strh	r1, [r0, #10]
    }
 8002226:	4770      	bx	lr

08002228 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002228:	4770      	bx	lr

0800222a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800222a:	4770      	bx	lr

0800222c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800222c:	4770      	bx	lr

0800222e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800222e:	4770      	bx	lr

08002230 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002230:	4770      	bx	lr

08002232 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002232:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002234:	88c4      	ldrh	r4, [r0, #6]
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	1b12      	subs	r2, r2, r4
 800223a:	8884      	ldrh	r4, [r0, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	1b09      	subs	r1, r1, r4
 8002240:	b212      	sxth	r2, r2
    }
 8002242:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002246:	b209      	sxth	r1, r1
 8002248:	4718      	bx	r3

0800224a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800224a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800225a:	6010      	str	r0, [r2, #0]
    }
 800225c:	4770      	bx	lr

0800225e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800225e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002262:	b11a      	cbz	r2, 800226c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002264:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002268:	b102      	cbz	r2, 800226c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800226a:	6018      	str	r0, [r3, #0]
        }
    }
 800226c:	4770      	bx	lr

0800226e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr

08002272 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002272:	888b      	ldrh	r3, [r1, #4]
 8002274:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002276:	2001      	movs	r0, #1
 8002278:	4770      	bx	lr

0800227a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800227a:	4770      	bx	lr

0800227c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800227c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002280:	4770      	bx	lr

08002282 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002282:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002286:	4770      	bx	lr

08002288 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002288:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800228a:	b510      	push	{r4, lr}
        return rect.width;
 800228c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002290:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002294:	8002      	strh	r2, [r0, #0]
 8002296:	8042      	strh	r2, [r0, #2]
 8002298:	8084      	strh	r4, [r0, #4]
 800229a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800229c:	bd10      	pop	{r4, pc}

0800229e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800229e:	2200      	movs	r2, #0
 80022a0:	8002      	strh	r2, [r0, #0]
 80022a2:	8042      	strh	r2, [r0, #2]
 80022a4:	8082      	strh	r2, [r0, #4]
 80022a6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80022a8:	4770      	bx	lr
	...

080022ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80022ae:	2290      	movs	r2, #144	; 0x90
 80022b0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80022be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022c2:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80022cc:	4770      	bx	lr

080022ce <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80022ce:	4770      	bx	lr

080022d0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80022d2:	6953      	ldr	r3, [r2, #20]
 80022d4:	03db      	lsls	r3, r3, #15
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80022d8:	d51e      	bpl.n	8002318 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022e0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80022e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022e8:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022ec:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022f0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80022f4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022f6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022fa:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022fc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002300:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002302:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002306:	d2f9      	bcs.n	80022fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002308:	3b20      	subs	r3, #32
 800230a:	f113 0f20 	cmn.w	r3, #32
 800230e:	d1f2      	bne.n	80022f6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002314:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002318:	bd70      	pop	{r4, r5, r6, pc}
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8002320:	6301      	str	r1, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8002322:	e9c0 210d 	strd	r2, r1, [r0, #52]	; 0x34
    }
 8002326:	4770      	bx	lr

08002328 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002328:	4770      	bx	lr

0800232a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 800232a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800232e:	4611      	mov	r1, r2
 8002330:	6840      	ldr	r0, [r0, #4]
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4718      	bx	r3

08002338 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002338:	b510      	push	{r4, lr}
 800233a:	4604      	mov	r4, r0
 800233c:	2148      	movs	r1, #72	; 0x48
 800233e:	f023 fbd8 	bl	8025af2 <_ZdlPvj>
 8002342:	4620      	mov	r0, r4
 8002344:	bd10      	pop	{r4, pc}
	...

08002348 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4604      	mov	r4, r0
    HAL::initialize();
 800234c:	f00e f8a7 	bl	801049e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002354:	f013 fe92 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 8002358:	4601      	mov	r1, r0
 800235a:	4620      	mov	r0, r4
 800235c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 8002362:	4620      	mov	r0, r4
 8002364:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002368:	2300      	movs	r3, #0
 800236a:	461a      	mov	r2, r3
 800236c:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002372:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002374:	4a05      	ldr	r2, [pc, #20]	; (800238c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	c00bb800 	.word	0xc00bb800
 8002384:	2000de88 	.word	0x2000de88
 8002388:	2000de44 	.word	0x2000de44
 800238c:	c0000000 	.word	0xc0000000
 8002390:	000bb800 	.word	0x000bb800

08002394 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002394:	f00e b834 	b.w	8010400 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002398 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002398:	f00e b98f 	b.w	80106ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800239c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80023a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	f00a fd7a 	bl	800cea0 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80023ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80023ae:	f00a fda7 	bl	800cf00 <osMutexRelease>
        streams[handle].isActive = false;
 80023b2:	2124      	movs	r1, #36	; 0x24
 80023b4:	2300      	movs	r3, #0
 80023b6:	fb01 4505 	mla	r5, r1, r5, r4
 80023ba:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        if (oneIsActive == false)
 80023be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80023c2:	b90b      	cbnz	r3, 80023c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80023c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023c6:	63a3      	str	r3, [r4, #56]	; 0x38
    }
 80023c8:	bd38      	pop	{r3, r4, r5, pc}

080023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80023ca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80023ce:	b112      	cbz	r2, 80023d6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80023d0:	6803      	ldr	r3, [r0, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4718      	bx	r3
    }
 80023d6:	4770      	bx	lr

080023d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80023d8:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80023da:	b131      	cbz	r1, 80023ea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 80023de:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 80023e6:	f023 fbb3 	bl	8025b50 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 80023ea:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80023ee:	bd08      	pop	{r3, pc}
 80023f0:	08027890 	.word	0x08027890
 80023f4:	080278a4 	.word	0x080278a4
 80023f8:	08027a2e 	.word	0x08027a2e

080023fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80023fc:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80023fe:	b131      	cbz	r1, 800240e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002402:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8002406:	4a06      	ldr	r2, [pc, #24]	; (8002420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800240a:	f023 fba1 	bl	8025b50 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800240e:	6840      	ldr	r0, [r0, #4]
 8002410:	4611      	mov	r1, r2
 8002412:	6803      	ldr	r3, [r0, #0]
    }
 8002414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4718      	bx	r3
 800241c:	08027890 	.word	0x08027890
 8002420:	08027a71 	.word	0x08027a71
 8002424:	08027a2e 	.word	0x08027a2e

08002428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002428:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800242a:	b129      	cbz	r1, 8002438 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 800242e:	2179      	movs	r1, #121	; 0x79
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002432:	4804      	ldr	r0, [pc, #16]	; (8002444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002434:	f023 fb8c 	bl	8025b50 <__assert_func>
    }
 8002438:	68c0      	ldr	r0, [r0, #12]
 800243a:	bd08      	pop	{r3, pc}
 800243c:	08027890 	.word	0x08027890
 8002440:	08027c1f 	.word	0x08027c1f
 8002444:	08027a2e 	.word	0x08027a2e

08002448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002448:	b510      	push	{r4, lr}
 800244a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800244c:	b129      	cbz	r1, 800245a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002450:	21a2      	movs	r1, #162	; 0xa2
 8002452:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002454:	4819      	ldr	r0, [pc, #100]	; (80024bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8002456:	f023 fb7b 	bl	8025b50 <__assert_func>
        switch (cmd)
 800245a:	2a05      	cmp	r2, #5
 800245c:	d815      	bhi.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800245e:	e8df f002 	tbb	[pc, r2]
 8002462:	1103      	.short	0x1103
 8002464:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002468:	6840      	ldr	r0, [r0, #4]
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4798      	blx	r3
 8002470:	b158      	cbz	r0, 800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002472:	2301      	movs	r3, #1
 8002474:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002478:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            stream.frameCount = 0;
 800247c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800247e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8002482:	e002      	b.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002484:	2300      	movs	r3, #0
 8002486:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
 800248a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800248c:	6203      	str	r3, [r0, #32]
 800248e:	e7f5      	b.n	800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8002490:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8002492:	2301      	movs	r3, #1
 8002494:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8002498:	e7f0      	b.n	800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800249a:	2300      	movs	r3, #0
 800249c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	6203      	str	r3, [r0, #32]
            break;
 80024a4:	e7f1      	b.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80024a6:	3b00      	subs	r3, #0
 80024a8:	bf18      	it	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
 80024b0:	e7eb      	b.n	800248a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80024b2:	bf00      	nop
 80024b4:	08027890 	.word	0x08027890
 80024b8:	08027dd4 	.word	0x08027dd4
 80024bc:	08027a2e 	.word	0x08027a2e

080024c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80024c0:	b510      	push	{r4, lr}
 80024c2:	460c      	mov	r4, r1
 80024c4:	4611      	mov	r1, r2
 80024c6:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80024c8:	b12c      	cbz	r4, 80024d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 80024cc:	2190      	movs	r1, #144	; 0x90
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 80024d2:	f023 fb3d 	bl	8025b50 <__assert_func>
        stream.frameNumber = 0;
 80024d6:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024d8:	6840      	ldr	r0, [r0, #4]
 80024da:	6803      	ldr	r3, [r0, #0]
    }
 80024dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4718      	bx	r3
 80024e4:	08027890 	.word	0x08027890
 80024e8:	08027fa8 	.word	0x08027fa8
 80024ec:	08027a2e 	.word	0x08027a2e

080024f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80024f0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80024f2:	b129      	cbz	r1, 8002500 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 80024f6:	2182      	movs	r1, #130	; 0x82
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 80024fc:	f023 fb28 	bl	8025b50 <__assert_func>
        stream.tickCount = 0;
 8002500:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002504:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002508:	bd08      	pop	{r3, pc}
 800250a:	bf00      	nop
 800250c:	08027890 	.word	0x08027890
 8002510:	08028183 	.word	0x08028183
 8002514:	08027a2e 	.word	0x08027a2e

08002518 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002518:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002520:	b153      	cbz	r3, 8002538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8002522:	f04f 31ff 	mov.w	r1, #4294967295
 8002526:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002528:	f00a fcba 	bl	800cea0 <osMutexAcquire>
            firstDrawThisFrame = false;
 800252c:	2300      	movs	r3, #0
 800252e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
            uiHasMutex = true;
 8002532:	2301      	movs	r3, #1
 8002534:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    }
 8002538:	bd10      	pop	{r4, pc}
	...

0800253c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800253c:	b510      	push	{r4, lr}
 800253e:	4604      	mov	r4, r0
 8002540:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002542:	b129      	cbz	r1, 8002550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002546:	21d0      	movs	r1, #208	; 0xd0
 8002548:	4a13      	ldr	r2, [pc, #76]	; (8002598 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800254a:	4814      	ldr	r0, [pc, #80]	; (800259c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 800254c:	f023 fb00 	bl	8025b50 <__assert_func>
        if (stream.isPlaying)
 8002550:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002554:	b133      	cbz	r3, 8002564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 800255e:	6963      	ldr	r3, [r4, #20]
 8002560:	440b      	add	r3, r1
 8002562:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002564:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002568:	b90b      	cbnz	r3, 800256e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800256a:	2001      	movs	r0, #1
    }
 800256c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800256e:	68a3      	ldr	r3, [r4, #8]
 8002570:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 8002572:	6803      	ldr	r3, [r0, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002578:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800257a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
 800257e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8002582:	2800      	cmp	r0, #0
 8002584:	d1f1      	bne.n	800256a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8002586:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ee      	bne.n	800256c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800258e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8002592:	e7eb      	b.n	800256c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002594:	08027890 	.word	0x08027890
 8002598:	0802833f 	.word	0x0802833f
 800259c:	08027a2e 	.word	0x08027a2e
 80025a0:	20027ba0 	.word	0x20027ba0

080025a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80025a4:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80025a6:	4c17      	ldr	r4, [pc, #92]	; (8002604 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 80025a8:	f00d ff6c 	bl	8010484 <_ZN8touchgfx3HAL8endFrameEv>
 80025ac:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80025b0:	b913      	cbnz	r3, 80025b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 80025b2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80025b6:	b1ab      	cbz	r3, 80025e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80025b8:	69e1      	ldr	r1, [r4, #28]
 80025ba:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80025be:	4353      	muls	r3, r2
 80025c0:	6922      	ldr	r2, [r4, #16]
 80025c2:	434a      	muls	r2, r1
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d30d      	bcc.n	80025e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 80025c8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80025cc:	b138      	cbz	r0, 80025de <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80025d4:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80025d6:	bf98      	it	ls
 80025d8:	f102 32ff 	addls.w	r2, r2, #4294967295
 80025dc:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
 80025de:	2301      	movs	r3, #1
 80025e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        firstDrawThisFrame = true;
 80025e4:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80025e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
 80025e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
 80025ec:	f00a fd42 	bl	800d074 <osSemaphoreRelease>
        if (uiHasMutex)
 80025f0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80025f4:	b12b      	cbz	r3, 8002602 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 80025f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80025f8:	f00a fc82 	bl	800cf00 <osMutexRelease>
            uiHasMutex = false;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002602:	bd10      	pop	{r4, pc}
 8002604:	2000de88 	.word	0x2000de88

08002608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800260a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800260e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002616:	f3bf 8f6f 	isb	sy
}
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002620:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002624:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 8002626:	b9db      	cbnz	r3, 8002660 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x40>
        streams[handle].isActive = true;
 8002628:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800262a:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 800262c:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 800262e:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
 8002630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002634:	6103      	str	r3, [r0, #16]
 8002636:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002638:	f505 223b 	add.w	r2, r5, #765952	; 0xbb000
                streams[i] = Stream();
 800263c:	6143      	str	r3, [r0, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800263e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                streams[i] = Stream();
 8002642:	6183      	str	r3, [r0, #24]
 8002644:	61c3      	str	r3, [r0, #28]
 8002646:	6203      	str	r3, [r0, #32]
 8002648:	6243      	str	r3, [r0, #36]	; 0x24
 800264a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800264e:	e9d0 460c 	ldrd	r4, r6, [r0, #48]	; 0x30
 8002652:	4434      	add	r4, r6
 8002654:	42a2      	cmp	r2, r4
 8002656:	d90a      	bls.n	800266e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 800265a:	2152      	movs	r1, #82	; 0x52
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800265e:	e003      	b.n	8002668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002662:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002668:	480b      	ldr	r0, [pc, #44]	; (8002698 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 800266a:	f023 fa71 	bl	8025b50 <__assert_func>
        topBufferRGB += sizeOfOneDecodeBuffer;
 800266e:	6382      	str	r2, [r0, #56]	; 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002670:	f44f 7248 	mov.w	r2, #800	; 0x320
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002674:	6085      	str	r5, [r0, #8]
    }
 8002676:	4618      	mov	r0, r3
 8002678:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800267a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        format = bufferFormat;
 800267e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 8002682:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8002684:	630b      	str	r3, [r1, #48]	; 0x30
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	08028697 	.word	0x08028697
 800268c:	080286d2 	.word	0x080286d2
 8002690:	080284e0 	.word	0x080284e0
 8002694:	08028510 	.word	0x08028510
 8002698:	08027a2e 	.word	0x08027a2e

0800269c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 800269c:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800269e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80026a0:	4e12      	ldr	r6, [pc, #72]	; (80026ec <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 80026a2:	4605      	mov	r5, r0
 80026a4:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 80026a8:	6003      	str	r3, [r0, #0]
 80026aa:	6833      	ldr	r3, [r6, #0]
 80026ac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80026b0:	b10a      	cbz	r2, 80026b6 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 80026b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026b4:	b900      	cbnz	r0, 80026b8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 80026b6:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80026b8:	6803      	ldr	r3, [r0, #0]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	4798      	blx	r3
        return auxiliaryLCD;
 80026be:	6833      	ldr	r3, [r6, #0]
 80026c0:	fab0 f480 	clz	r4, r0
 80026c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026c6:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026c8:	b130      	cbz	r0, 80026d8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4798      	blx	r3
 80026d0:	2800      	cmp	r0, #0
 80026d2:	bf08      	it	eq
 80026d4:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80026d8:	b92c      	cbnz	r4, 80026e6 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 80026e0:	4806      	ldr	r0, [pc, #24]	; (80026fc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 80026e2:	f023 fa35 	bl	8025b50 <__assert_func>
    }
 80026e6:	4628      	mov	r0, r5
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
 80026ea:	bf00      	nop
 80026ec:	20027ba0 	.word	0x20027ba0
 80026f0:	08028978 	.word	0x08028978
 80026f4:	08028875 	.word	0x08028875
 80026f8:	080288d3 	.word	0x080288d3
 80026fc:	0802890c 	.word	0x0802890c

08002700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002704:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002706:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002708:	f44f 67c8 	mov.w	r7, #1600	; 0x640
            SEM_WAIT(semDecode);
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002712:	f00a fc75 	bl	800d000 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002716:	f04f 31ff 	mov.w	r1, #4294967295
 800271a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800271c:	f00a fbc0 	bl	800cea0 <osMutexAcquire>
                if (stream.doDecode)
 8002720:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8002724:	b343      	cbz	r3, 8002778 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002726:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002728:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 800272c:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800272e:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
 8002732:	f1b8 0f00 	cmp.w	r8, #0
 8002736:	d023      	beq.n	8002780 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	4641      	mov	r1, r8
 800273c:	4628      	mov	r0, r5
 800273e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	f44f 7248 	mov.w	r2, #800	; 0x320
 800274a:	9700      	str	r7, [sp, #0]
 800274c:	4628      	mov	r0, r5
 800274e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002752:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002756:	68a1      	ldr	r1, [r4, #8]
 8002758:	47c0      	blx	r8
                    stream.frameCount++;
 800275a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800275c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
 8002760:	3301      	adds	r3, #1
 8002762:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002764:	b1f0      	cbz	r0, 80027a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	4628      	mov	r0, r5
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	4798      	blx	r3
 800276e:	3801      	subs	r0, #1
 8002770:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002772:	2300      	movs	r3, #0
 8002774:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002778:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800277a:	f00a fbc1 	bl	800cf00 <osMutexRelease>
        while (1)
 800277e:	e7c5      	b.n	800270c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8002780:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002782:	2a00      	cmp	r2, #0
 8002784:	d0de      	beq.n	8002744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8002786:	4628      	mov	r0, r5
 8002788:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800278c:	4798      	blx	r3
 800278e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002790:	4401      	add	r1, r0
 8002792:	4628      	mov	r0, r5
 8002794:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002796:	6923      	ldr	r3, [r4, #16]
 8002798:	6a62      	ldr	r2, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
 800279a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
 800279e:	4413      	add	r3, r2
 80027a0:	6123      	str	r3, [r4, #16]
 80027a2:	e7cf      	b.n	8002744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                        stream.frameNumber = 1;
 80027a4:	60e6      	str	r6, [r4, #12]
 80027a6:	e7e4      	b.n	8002772 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>

080027a8 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void *argument)
{
    videoController.decoderTaskEntry();
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <videoTaskFunc+0x8>)
{
 80027aa:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80027ac:	f7ff ffa8 	bl	8002700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80027b0:	2000de88 	.word	0x2000de88

080027b4 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80027b4:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027b8:	2500      	movs	r5, #0
 80027ba:	f7fe fd4f 	bl	800125c <_ZN20HardwareMJPEGDecoderC1Ev>
 80027be:	4c13      	ldr	r4, [pc, #76]	; (800280c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80027c2:	462a      	mov	r2, r5
 80027c4:	4629      	mov	r1, r5
 80027c6:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	63a5      	str	r5, [r4, #56]	; 0x38
 80027d0:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027d2:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027d4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027d8:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027dc:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80027e0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 80027e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027e8:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80027ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80027f0:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80027f4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 80027f8:	f00a fbac 	bl	800cf54 <osSemaphoreNew>
 80027fc:	6420      	str	r0, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 80027fe:	4628      	mov	r0, r5
 8002800:	f00a fb0c 	bl	800ce1c <osMutexNew>
 8002804:	6460      	str	r0, [r4, #68]	; 0x44
}
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	2000de44 	.word	0x2000de44
 800280c:	2000de88 	.word	0x2000de88
 8002810:	08028998 	.word	0x08028998

08002814 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	b08d      	sub	sp, #52	; 0x34
 800281a:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800281c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 8002820:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 8002824:	9001      	str	r0, [sp, #4]
 8002826:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002828:	fbb3 f3f2 	udiv	r3, r3, r2
 800282c:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800282e:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002836:	2200      	movs	r2, #0
 8002838:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800283c:	4401      	add	r1, r0
 800283e:	4541      	cmp	r1, r8
 8002840:	d806      	bhi.n	8002850 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
 8002842:	b10a      	cbz	r2, 8002848 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x34>
 8002844:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002846:	6293      	str	r3, [r2, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002848:	9806      	ldr	r0, [sp, #24]
 800284a:	b00d      	add	sp, #52	; 0x34
 800284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002850:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002854:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002856:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 8002858:	f108 0801 	add.w	r8, r8, #1
    for(i= 0; i <  16; i+=2)
 800285c:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002860:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002864:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002868:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fb01 3302 	mla	r3, r1, r2, r3
 8002872:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    pLum = pInBuffer;
 800287a:	4699      	mov	r9, r3
      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	4a59      	ldr	r2, [pc, #356]	; (80029e4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	f200 8099 	bhi.w	80029b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a4>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002886:	f503 65c8 	add.w	r5, r3, #1600	; 0x640
 800288a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800288c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002890:	441d      	add	r5, r3
        for(k= 0; k<2; k++)
 8002892:	f10c 0308 	add.w	r3, ip, #8
 8002896:	9309      	str	r3, [sp, #36]	; 0x24
          for(j=0; j < 8; j+=2)
 8002898:	f10c 33ff 	add.w	r3, ip, #4294967295
 800289c:	9f03      	ldr	r7, [sp, #12]
    for(i= 0; i <  16; i+=2)
 800289e:	2600      	movs	r6, #0
 80028a0:	9304      	str	r3, [sp, #16]
 80028a2:	f5a5 63c8 	sub.w	r3, r5, #1600	; 0x640
 80028a6:	9308      	str	r3, [sp, #32]
 80028a8:	9b08      	ldr	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 80028aa:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80028ac:	484e      	ldr	r0, [pc, #312]	; (80029e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 80028ae:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 80028b0:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 80028b4:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80028b6:	9b04      	ldr	r3, [sp, #16]
 80028b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 80028c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80028c4:	9b04      	ldr	r3, [sp, #16]
 80028c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ca:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80028ce:	4848      	ldr	r0, [pc, #288]	; (80029f0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 80028d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028d4:	4847      	ldr	r0, [pc, #284]	; (80029f4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 80028d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80028da:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028dc:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 80028de:	4414      	add	r4, r2
 80028e0:	4610      	mov	r0, r2
 80028e2:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028e6:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028ea:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 80028ec:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028ee:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 80028f2:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028f6:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028fa:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028fc:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 8002900:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002904:	0892      	lsrs	r2, r2, #2
 8002906:	0152      	lsls	r2, r2, #5
 8002908:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 800290c:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002910:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 8002912:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002916:	980a      	ldr	r0, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002918:	eb04 020e 	add.w	r2, r4, lr
 800291c:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002920:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002924:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002926:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800292a:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800292e:	0892      	lsrs	r2, r2, #2
 8002930:	0152      	lsls	r2, r2, #5
 8002932:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002936:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800293a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 800293e:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 8002940:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002944:	eb04 020e 	add.w	r2, r4, lr
 8002948:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800294c:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002950:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002952:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002956:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800295a:	0892      	lsrs	r2, r2, #2
 800295c:	0152      	lsls	r2, r2, #5
 800295e:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002962:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 8002966:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 800296a:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800296c:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800296e:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002970:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002972:	440a      	add	r2, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002974:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002978:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800297c:	089b      	lsrs	r3, r3, #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800297e:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002986:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 800298a:	19aa      	adds	r2, r5, r6
          for(j=0; j < 8; j+=2)
 800298c:	3604      	adds	r6, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800298e:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
          for(j=0; j < 8; j+=2)
 8002992:	2e10      	cmp	r6, #16
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002994:	8053      	strh	r3, [r2, #2]
          for(j=0; j < 8; j+=2)
 8002996:	d187      	bne.n	80028a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x94>
          pLum += 64;
 8002998:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 800299a:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800299e:	3510      	adds	r5, #16
          pLum += 64;
 80029a0:	3340      	adds	r3, #64	; 0x40
 80029a2:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 80029a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029a6:	4563      	cmp	r3, ip
 80029a8:	f47f af76 	bne.w	8002898 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x84>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80029ac:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 80029ae:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80029b2:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80029b6:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 80029b8:	f10b 0b02 	add.w	fp, fp, #2
 80029bc:	f1bb 0f10 	cmp.w	fp, #16
 80029c0:	d107      	bne.n	80029d2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1be>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80029c2:	9b01      	ldr	r3, [sp, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029ca:	9301      	str	r3, [sp, #4]
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 80029cc:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80029d0:	e732      	b.n	8002838 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
      if(i == 8)
 80029d2:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 80029d6:	bf04      	itt	eq
 80029d8:	9b01      	ldreq	r3, [sp, #4]
 80029da:	f103 0980 	addeq.w	r9, r3, #128	; 0x80
 80029de:	e74d      	b.n	800287c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
 80029e0:	20010b50 	.word	0x20010b50
 80029e4:	000bb7ff 	.word	0x000bb7ff
 80029e8:	2000f6d0 	.word	0x2000f6d0
 80029ec:	2000ead0 	.word	0x2000ead0
 80029f0:	2000f2d0 	.word	0x2000f2d0
 80029f4:	2000eed0 	.word	0x2000eed0
 80029f8:	080289d0 	.word	0x080289d0

080029fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a00:	0a1b      	lsrs	r3, r3, #8
{
 8002a02:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a04:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a06:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002a08:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8002a0c:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a10:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a14:	691b      	ldr	r3, [r3, #16]
{
 8002a16:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a18:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a1a:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8002a1c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002a20:	4413      	add	r3, r2
 8002a22:	4573      	cmp	r3, lr
 8002a24:	d803      	bhi.n	8002a2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002a26:	9805      	ldr	r0, [sp, #20]
 8002a28:	b00d      	add	sp, #52	; 0x34
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a2e:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8002a32:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 8002a34:	f10e 0e01 	add.w	lr, lr, #1
 8002a38:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 8002a3c:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a3e:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a42:	9b03      	ldr	r3, [sp, #12]
 8002a44:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002a48:	9b02      	ldr	r3, [sp, #8]
 8002a4a:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002a54:	9300      	str	r3, [sp, #0]
    currentMCU++;
 8002a56:	2308      	movs	r3, #8
 8002a58:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a5a:	9b07      	ldr	r3, [sp, #28]
 8002a5c:	9a00      	ldr	r2, [sp, #0]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d969      	bls.n	8002b36 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 8002a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a64:	46d0      	mov	r8, sl
 8002a66:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002a70:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 8002a72:	2400      	movs	r4, #0
 8002a74:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 8002a76:	f108 0301 	add.w	r3, r8, #1
 8002a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a7c:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 8002a80:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002a84:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002a86:	9b01      	ldr	r3, [sp, #4]
 8002a88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002a90:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002a94:	9b01      	ldr	r3, [sp, #4]
 8002a96:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002a9c:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002aa2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002aac:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ab4:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ab8:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002abc:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 8002abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ac0:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ac4:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ac8:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aca:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ace:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ad2:	0892      	lsrs	r2, r2, #2
 8002ad4:	0152      	lsls	r2, r2, #5
 8002ad6:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002ada:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 8002ade:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002ae2:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002ae6:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8002aea:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aee:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002af0:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002af2:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 8002af4:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002af6:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002afa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002afe:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b02:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b06:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002b0a:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002b0e:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 8002b12:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002b16:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 8002b18:	d1b0      	bne.n	8002a7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 8002b1a:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8002b1c:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002b1e:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 8002b22:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 8002b26:	42bb      	cmp	r3, r7
 8002b28:	d1a2      	bne.n	8002a70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b2a:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8002b2c:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	441a      	add	r2, r3
 8002b34:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	9304      	str	r3, [sp, #16]
 8002b3c:	d18d      	bne.n	8002a5a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002b3e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002b42:	e76b      	b.n	8002a1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002b44:	20010b50 	.word	0x20010b50
 8002b48:	2000ead0 	.word	0x2000ead0
 8002b4c:	2000f6d0 	.word	0x2000f6d0
 8002b50:	2000f2d0 	.word	0x2000f2d0
 8002b54:	2000eed0 	.word	0x2000eed0
 8002b58:	080289d0 	.word	0x080289d0

08002b5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b60:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b62:	22c0      	movs	r2, #192	; 0xc0
{
 8002b64:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 8002b66:	4654      	mov	r4, sl
{
 8002b68:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b6a:	fbb3 f3f2 	udiv	r3, r3, r2

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b6e:	4a35      	ldr	r2, [pc, #212]	; (8002c44 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b70:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b72:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002b74:	9100      	str	r1, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b76:	6a91      	ldr	r1, [r2, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b78:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b7a:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b7c:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002b7e:	9b04      	ldr	r3, [sp, #16]
 8002b80:	eb03 020a 	add.w	r2, r3, sl
 8002b84:	42a2      	cmp	r2, r4
 8002b86:	d803      	bhi.n	8002b90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	b009      	add	sp, #36	; 0x24
 8002b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b90:	00e1      	lsls	r1, r4, #3
 8002b92:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;
 8002b94:	3401      	adds	r4, #1
    pLum = pInBuffer;
 8002b96:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b98:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b9c:	9a01      	ldr	r2, [sp, #4]
 8002b9e:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002ba2:	9a00      	ldr	r2, [sp, #0]
 8002ba4:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;
 8002ba8:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002baa:	0052      	lsls	r2, r2, #1
    currentMCU++;
 8002bac:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002bae:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002bb2:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002bb6:	9905      	ldr	r1, [sp, #20]
 8002bb8:	4291      	cmp	r1, r2
 8002bba:	d93d      	bls.n	8002c38 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 8002bbc:	9907      	ldr	r1, [sp, #28]
 8002bbe:	f106 3eff 	add.w	lr, r6, #4294967295
 8002bc2:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 8002bc4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002bc8:	9102      	str	r1, [sp, #8]
 8002bca:	f105 0110 	add.w	r1, r5, #16
 8002bce:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002bd0:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002bd2:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002bd6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002bda:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 8002be0:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002be2:	4f1a      	ldr	r7, [pc, #104]	; (8002c4c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 8002be4:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002be8:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002bec:	440f      	add	r7, r1
 8002bee:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bf2:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bf8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bfc:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002bfe:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c04:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c08:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c0c:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 8002c0e:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c10:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c12:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002c16:	eb01 4828 	add.w	r8, r1, r8, asr #16
 8002c1a:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 8002c1e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8002c22:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr =
 8002c26:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 8002c2a:	429d      	cmp	r5, r3
 8002c2c:	d1d0      	bne.n	8002bd0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c2e:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 8002c30:	3608      	adds	r6, #8
          pLum += 8;
 8002c32:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c36:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	9303      	str	r3, [sp, #12]
 8002c3e:	d1ba      	bne.n	8002bb6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002c40:	30c0      	adds	r0, #192	; 0xc0
 8002c42:	e79c      	b.n	8002b7e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002c44:	20010b50 	.word	0x20010b50
 8002c48:	080289d0 	.word	0x080289d0
 8002c4c:	2000f6d0 	.word	0x2000f6d0
 8002c50:	2000ead0 	.word	0x2000ead0
 8002c54:	2000f2d0 	.word	0x2000f2d0
 8002c58:	2000eed0 	.word	0x2000eed0

08002c5c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c60:	b085      	sub	sp, #20
 8002c62:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002c64:	0998      	lsrs	r0, r3, #6
{
 8002c66:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 8002c68:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c6c:	491a      	ldr	r1, [pc, #104]	; (8002cd8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002c6e:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c70:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c74:	6909      	ldr	r1, [r1, #16]
 8002c76:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 8002c78:	9b03      	ldr	r3, [sp, #12]
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d802      	bhi.n	8002c84 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002c7e:	b005      	add	sp, #20
 8002c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c84:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 8002c86:	46a4      	mov	ip, r4
    currentMCU++;
 8002c88:	3201      	adds	r2, #1
 8002c8a:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c8c:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c90:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002c94:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c9e:	9901      	ldr	r1, [sp, #4]
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	d914      	bls.n	8002cce <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 8002ca4:	9902      	ldr	r1, [sp, #8]
 8002ca6:	46e2      	mov	sl, ip
 8002ca8:	4419      	add	r1, r3
 8002caa:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002cae:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002cb2:	08f5      	lsrs	r5, r6, #3
 8002cb4:	08b6      	lsrs	r6, r6, #2
 8002cb6:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002cba:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 8002cbe:	432e      	orrs	r6, r5
 8002cc0:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 8002cc4:	4559      	cmp	r1, fp
 8002cc6:	d1f2      	bne.n	8002cae <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002cc8:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002ccc:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002cce:	3f01      	subs	r7, #1
 8002cd0:	d1e5      	bne.n	8002c9e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002cd2:	3440      	adds	r4, #64	; 0x40
 8002cd4:	e7d0      	b.n	8002c78 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002cd6:	bf00      	nop
 8002cd8:	20010b50 	.word	0x20010b50

08002cdc <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002ce4:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002ce6:	0a18      	lsrs	r0, r3, #8
{
 8002ce8:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002cea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cee:	4928      	ldr	r1, [pc, #160]	; (8002d90 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002cf0:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cf2:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cf6:	6909      	ldr	r1, [r1, #16]
 8002cf8:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002cfa:	9b03      	ldr	r3, [sp, #12]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d802      	bhi.n	8002d06 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002d00:	b005      	add	sp, #20
 8002d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d06:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 8002d08:	46ae      	mov	lr, r5
    currentMCU++;
 8002d0a:	3201      	adds	r2, #1
 8002d0c:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d10:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d14:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002d18:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d22:	9b00      	ldr	r3, [sp, #0]
 8002d24:	428b      	cmp	r3, r1
 8002d26:	d92c      	bls.n	8002d82 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;
 8002d28:	9b02      	ldr	r3, [sp, #8]
 8002d2a:	4674      	mov	r4, lr
 8002d2c:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002d2e:	f106 0310 	add.w	r3, r6, #16
 8002d32:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002d34:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002d38:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d3a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002d3e:	fb13 f308 	smulbb	r3, r3, r8
 8002d42:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d46:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002d4a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002d4e:	fb13 f308 	smulbb	r3, r3, r8
 8002d52:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d56:	109b      	asrs	r3, r3, #2
 8002d58:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d5a:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002d5e:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002d62:	fb1b fb08 	smulbb	fp, fp, r8
 8002d66:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d6a:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 8002d6e:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d70:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr =
 8002d74:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 8002d78:	429e      	cmp	r6, r3
 8002d7a:	d1db      	bne.n	8002d34 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002d7c:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002d80:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002d82:	f1bc 0c01 	subs.w	ip, ip, #1
 8002d86:	d1cc      	bne.n	8002d22 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002d88:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002d8c:	e7b5      	b.n	8002cfa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002d8e:	bf00      	nop
 8002d90:	20010b50 	.word	0x20010b50

08002d94 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002d96:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002d98:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002d9a:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002d9c:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002da2:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002da4:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002da6:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002daa:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002dac:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002dae:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002db0:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002db2:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002db4:	d13c      	bne.n	8002e30 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002db6:	2801      	cmp	r0, #1
 8002db8:	d122      	bne.n	8002e00 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002dba:	4823      	ldr	r0, [pc, #140]	; (8002e48 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
 8002dbc:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002dbe:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002dc2:	bf18      	it	ne
 8002dc4:	f1c1 0110 	rsbne	r1, r1, #16
 8002dc8:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8002dca:	2110      	movs	r1, #16
 8002dcc:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 8002dce:	6219      	str	r1, [r3, #32]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002dd0:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002dd2:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002dd4:	4421      	add	r1, r4
 8002dd6:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002dd8:	0061      	lsls	r1, r4, #1
 8002dda:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002ddc:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002de0:	fb00 4411 	mls	r4, r0, r1, r4
 8002de4:	b104      	cbz	r4, 8002de8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002de6:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002de8:	6a1c      	ldr	r4, [r3, #32]
 8002dea:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002dee:	fb04 5510 	mls	r5, r4, r0, r5
 8002df2:	b105      	cbz	r5, 8002df6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002df4:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002df6:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002df8:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002dfa:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002dfc:	6011      	str	r1, [r2, #0]
}
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002e00:	2802      	cmp	r0, #2
 8002e02:	d10b      	bne.n	8002e1c <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002e04:	4811      	ldr	r0, [pc, #68]	; (8002e4c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 8002e06:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002e08:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002e0c:	bf18      	it	ne
 8002e0e:	f1c1 0110 	rsbne	r1, r1, #16
 8002e12:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8002e14:	2110      	movs	r1, #16
 8002e16:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8002e18:	2108      	movs	r1, #8
 8002e1a:	e7d8      	b.n	8002dce <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e1e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002e20:	f014 0107 	ands.w	r1, r4, #7
 8002e24:	d001      	beq.n	8002e2a <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002e26:	f1c1 0108 	rsb	r1, r1, #8
 8002e2a:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	e7cd      	b.n	8002dcc <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002e30:	b90e      	cbnz	r6, 8002e36 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e32:	4808      	ldr	r0, [pc, #32]	; (8002e54 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002e34:	e7f3      	b.n	8002e1e <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002e36:	2e30      	cmp	r6, #48	; 0x30
 8002e38:	d101      	bne.n	8002e3e <TGFX_JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002e3a:	4807      	ldr	r0, [pc, #28]	; (8002e58 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>)
 8002e3c:	e7ef      	b.n	8002e1e <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 8002e3e:	2001      	movs	r0, #1
 8002e40:	e7dd      	b.n	8002dfe <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
 8002e42:	bf00      	nop
 8002e44:	20010b50 	.word	0x20010b50
 8002e48:	08002815 	.word	0x08002815
 8002e4c:	080029fd 	.word	0x080029fd
 8002e50:	08002b5d 	.word	0x08002b5d
 8002e54:	08002c5d 	.word	0x08002c5d
 8002e58:	08002cdd 	.word	0x08002cdd

08002e5c <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	f8df c250 	ldr.w	ip, [pc, #592]	; 80030b4 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80030b8 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e6a:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 8002e6e:	4f7e      	ldr	r7, [pc, #504]	; (8003068 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e70:	f249 6a45 	movw	sl, #38469	; 0x9645
 8002e74:	4e7d      	ldr	r6, [pc, #500]	; (800306c <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e76:	f641 592f 	movw	r9, #7471	; 0x1d2f
 8002e7a:	4d7d      	ldr	r5, [pc, #500]	; (8003070 <TGFX_JPEG_InitColorTables+0x214>)
 8002e7c:	4c7d      	ldr	r4, [pc, #500]	; (8003074 <TGFX_JPEG_InitColorTables+0x218>)
 8002e7e:	487e      	ldr	r0, [pc, #504]	; (8003078 <TGFX_JPEG_InitColorTables+0x21c>)
 8002e80:	497e      	ldr	r1, [pc, #504]	; (800307c <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e82:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e86:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e8a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e8e:	1412      	asrs	r2, r2, #16
 8002e90:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e94:	fb0a f203 	mul.w	r2, sl, r3
 8002e98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002e9c:	1412      	asrs	r2, r2, #16
 8002e9e:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ea2:	fb09 f203 	mul.w	r2, r9, r3
 8002ea6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002eaa:	1412      	asrs	r2, r2, #16
 8002eac:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eb0:	4a73      	ldr	r2, [pc, #460]	; (8003080 <TGFX_JPEG_InitColorTables+0x224>)
 8002eb2:	435a      	muls	r2, r3
 8002eb4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002eb8:	1412      	asrs	r2, r2, #16
 8002eba:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ebe:	4a71      	ldr	r2, [pc, #452]	; (8003084 <TGFX_JPEG_InitColorTables+0x228>)
 8002ec0:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ec2:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ec4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ecc:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002ed0:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ed4:	f343 024f 	sbfx	r2, r3, #1, #16
 8002ed8:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002edc:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <TGFX_JPEG_InitColorTables+0x22c>)
 8002ede:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee2:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee6:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002eea:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eee:	4a67      	ldr	r2, [pc, #412]	; (800308c <TGFX_JPEG_InitColorTables+0x230>)
 8002ef0:	fb02 e203 	mla	r2, r2, r3, lr
 8002ef4:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002ef8:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002efc:	d1c1      	bne.n	8002e82 <TGFX_JPEG_InitColorTables+0x26>
 8002efe:	4c64      	ldr	r4, [pc, #400]	; (8003090 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8002f00:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 8002f02:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 8002f04:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 8002f06:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8002f08:	2907      	cmp	r1, #7
 8002f0a:	f240 80a6 	bls.w	800305a <TGFX_JPEG_InitColorTables+0x1fe>
 8002f0e:	2a07      	cmp	r2, #7
 8002f10:	bf8c      	ite	hi
 8002f12:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 8002f16:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for(j = 0; j < 16; j++)
 8002f1a:	3101      	adds	r1, #1
 8002f1c:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8002f1e:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 8002f22:	2910      	cmp	r1, #16
 8002f24:	d1f0      	bne.n	8002f08 <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 8002f26:	3201      	adds	r2, #1
 8002f28:	3420      	adds	r4, #32
 8002f2a:	2a10      	cmp	r2, #16
 8002f2c:	d1e9      	bne.n	8002f02 <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8002f2e:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f30:	f8df e188 	ldr.w	lr, [pc, #392]	; 80030bc <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f34:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80030c0 <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f38:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80030c4 <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f3c:	f8df a188 	ldr.w	sl, [pc, #392]	; 80030c8 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f40:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 8002f42:	2500      	movs	r5, #0
 8002f44:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f46:	00e4      	lsls	r4, r4, #3
 8002f48:	fa1f fc83 	uxth.w	ip, r3
 8002f4c:	b2a4      	uxth	r4, r4
 8002f4e:	0142      	lsls	r2, r0, #5
 8002f50:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002f54:	4f4f      	ldr	r7, [pc, #316]	; (8003094 <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 8002f56:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f58:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f5a:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 8002f5c:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f5e:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f60:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f62:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f66:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f6a:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f6e:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f70:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f74:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f76:	4f48      	ldr	r7, [pc, #288]	; (8003098 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f78:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f7c:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f80:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f84:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f88:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f8c:	f822 1009 	strh.w	r1, [r2, r9]
    for(j = 0; j < 16; j++)
 8002f90:	f102 0202 	add.w	r2, r2, #2
 8002f94:	d1dc      	bne.n	8002f50 <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 8002f96:	3001      	adds	r0, #1
 8002f98:	2810      	cmp	r0, #16
 8002f9a:	d1d1      	bne.n	8002f40 <TGFX_JPEG_InitColorTables+0xe4>
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80030cc <TGFX_JPEG_InitColorTables+0x270>
 8002fa2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80030d0 <TGFX_JPEG_InitColorTables+0x274>
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	f8df e128 	ldr.w	lr, [pc, #296]	; 80030d4 <TGFX_JPEG_InitColorTables+0x278>
 8002fac:	f8df c128 	ldr.w	ip, [pc, #296]	; 80030d8 <TGFX_JPEG_InitColorTables+0x27c>
 8002fb0:	b283      	uxth	r3, r0
 8002fb2:	eb09 0701 	add.w	r7, r9, r1
 8002fb6:	eb08 0601 	add.w	r6, r8, r1
 8002fba:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8002fbe:	f103 0208 	add.w	r2, r3, #8
 8002fc2:	eb0c 0401 	add.w	r4, ip, r1
 8002fc6:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002fc8:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8002fcc:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002fd0:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8002fd4:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8002fd8:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002fdc:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
    for(j = 0; j < 8; j++)
 8002fe0:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002fe2:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d1ed      	bne.n	8002fc8 <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8002fec:	3008      	adds	r0, #8
 8002fee:	3110      	adds	r1, #16
 8002ff0:	2840      	cmp	r0, #64	; 0x40
 8002ff2:	d1dd      	bne.n	8002fb0 <TGFX_JPEG_InitColorTables+0x154>
 8002ff4:	4d29      	ldr	r5, [pc, #164]	; (800309c <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	4c29      	ldr	r4, [pc, #164]	; (80030a0 <TGFX_JPEG_InitColorTables+0x244>)
 8002ffa:	482a      	ldr	r0, [pc, #168]	; (80030a4 <TGFX_JPEG_InitColorTables+0x248>)
 8002ffc:	492a      	ldr	r1, [pc, #168]	; (80030a8 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002ffe:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 80030dc <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003002:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80030e0 <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8003006:	4f29      	ldr	r7, [pc, #164]	; (80030ac <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003008:	4e29      	ldr	r6, [pc, #164]	; (80030b0 <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800300a:	fb0e f203 	mul.w	r2, lr, r3
 800300e:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 8003012:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8003016:	1412      	asrs	r2, r2, #16
 8003018:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800301c:	fb0c f203 	mul.w	r2, ip, r3
 8003020:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8003024:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 8003028:	1412      	asrs	r2, r2, #16
 800302a:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800302e:	fb07 f203 	mul.w	r2, r7, r3
 8003032:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8003036:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 800303a:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800303e:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 8003042:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003044:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800304c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003050:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8003054:	d1d9      	bne.n	800300a <TGFX_JPEG_InitColorTables+0x1ae>
}
 8003056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 800305a:	2a07      	cmp	r2, #7
 800305c:	bf8c      	ite	hi
 800305e:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 8003062:	4618      	movls	r0, r3
 8003064:	e759      	b.n	8002f1a <TGFX_JPEG_InitColorTables+0xbe>
 8003066:	bf00      	nop
 8003068:	2000e6d0 	.word	0x2000e6d0
 800306c:	20011710 	.word	0x20011710
 8003070:	2000fad0 	.word	0x2000fad0
 8003074:	2000ded0 	.word	0x2000ded0
 8003078:	2000fed0 	.word	0x2000fed0
 800307c:	2000e2d0 	.word	0x2000e2d0
 8003080:	ffffd4d1 	.word	0xffffd4d1
 8003084:	ffffab30 	.word	0xffffab30
 8003088:	ffff94d1 	.word	0xffff94d1
 800308c:	ffffeb30 	.word	0xffffeb30
 8003090:	20011510 	.word	0x20011510
 8003094:	200106d0 	.word	0x200106d0
 8003098:	200108d0 	.word	0x200108d0
 800309c:	2000f6d0 	.word	0x2000f6d0
 80030a0:	2000ead0 	.word	0x2000ead0
 80030a4:	2000f2d0 	.word	0x2000f2d0
 80030a8:	2000eed0 	.word	0x2000eed0
 80030ac:	ffff4930 	.word	0xffff4930
 80030b0:	ffffa7e8 	.word	0xffffa7e8
 80030b4:	200102d0 	.word	0x200102d0
 80030b8:	20011b10 	.word	0x20011b10
 80030bc:	20010b90 	.word	0x20010b90
 80030c0:	20010d90 	.word	0x20010d90
 80030c4:	20011010 	.word	0x20011010
 80030c8:	20011210 	.word	0x20011210
 80030cc:	20011490 	.word	0x20011490
 80030d0:	20010ad0 	.word	0x20010ad0
 80030d4:	20010f90 	.word	0x20010f90
 80030d8:	20011410 	.word	0x20011410
 80030dc:	000166e8 	.word	0x000166e8
 80030e0:	0001c5a0 	.word	0x0001c5a0

080030e4 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80030e4:	b148      	cbz	r0, 80030fa <null_ptr_check+0x16>
 80030e6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80030e8:	b13b      	cbz	r3, 80030fa <null_ptr_check+0x16>
 80030ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80030ec:	b12b      	cbz	r3, 80030fa <null_ptr_check+0x16>
 80030ee:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80030f0:	fab0 f080 	clz	r0, r0
 80030f4:	0940      	lsrs	r0, r0, #5
 80030f6:	4240      	negs	r0, r0
 80030f8:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80030fa:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80030fe:	4770      	bx	lr

08003100 <set_mem_page>:
{
 8003100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003102:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 8003104:	4608      	mov	r0, r1
 8003106:	f7ff ffed 	bl	80030e4 <null_ptr_check>
{
 800310a:	460c      	mov	r4, r1
	if (rslt == BME680_OK) {
 800310c:	4605      	mov	r5, r0
 800310e:	bb40      	cbnz	r0, 8003162 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8003110:	f012 0f80 	tst.w	r2, #128	; 0x80
		if (mem_page != dev->mem_page) {
 8003114:	78ca      	ldrb	r2, [r1, #3]
			mem_page = BME680_MEM_PAGE0;
 8003116:	bf14      	ite	ne
 8003118:	2300      	movne	r3, #0
 800311a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 800311c:	429a      	cmp	r2, r3
 800311e:	d020      	beq.n	8003162 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8003120:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003122:	f10d 0207 	add.w	r2, sp, #7
 8003126:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8003128:	2301      	movs	r3, #1
 800312a:	21f3      	movs	r1, #243	; 0xf3
 800312c:	7860      	ldrb	r0, [r4, #1]
 800312e:	47b0      	blx	r6
 8003130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8003134:	b998      	cbnz	r0, 800315e <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8003136:	f89d 2007 	ldrb.w	r2, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800313a:	2173      	movs	r1, #115	; 0x73
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800313c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 800313e:	f022 0210 	bic.w	r2, r2, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003142:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003144:	f003 0310 	and.w	r3, r3, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003148:	7860      	ldrb	r0, [r4, #1]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800314a:	4313      	orrs	r3, r2
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800314c:	f10d 0207 	add.w	r2, sp, #7
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003150:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003154:	2301      	movs	r3, #1
 8003156:	47b0      	blx	r6
 8003158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 800315c:	b108      	cbz	r0, 8003162 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 800315e:	f06f 0501 	mvn.w	r5, #1
}
 8003162:	4628      	mov	r0, r5
 8003164:	b002      	add	sp, #8
 8003166:	bd70      	pop	{r4, r5, r6, pc}

08003168 <get_mem_page>:
{
 8003168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800316a:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 800316c:	f7ff ffba 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003170:	b970      	cbnz	r0, 8003190 <get_mem_page+0x28>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003172:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003174:	2301      	movs	r3, #1
 8003176:	f10d 0207 	add.w	r2, sp, #7
 800317a:	21f3      	movs	r1, #243	; 0xf3
 800317c:	7860      	ldrb	r0, [r4, #1]
 800317e:	47a8      	blx	r5
 8003180:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003184:	b930      	cbnz	r0, 8003194 <get_mem_page+0x2c>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003186:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	70e3      	strb	r3, [r4, #3]
}
 8003190:	b003      	add	sp, #12
 8003192:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8003194:	f06f 0001 	mvn.w	r0, #1
	return rslt;
 8003198:	e7fa      	b.n	8003190 <get_mem_page+0x28>

0800319a <boundary_check.constprop.0>:
		if (*value > max) {
 800319a:	7803      	ldrb	r3, [r0, #0]
 800319c:	428b      	cmp	r3, r1
			*value = max;
 800319e:	bf88      	it	hi
 80031a0:	7001      	strbhi	r1, [r0, #0]
}
 80031a2:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80031a6:	bf82      	ittt	hi
 80031a8:	f892 3046 	ldrbhi.w	r3, [r2, #70]	; 0x46
 80031ac:	f043 0302 	orrhi.w	r3, r3, #2
 80031b0:	f882 3046 	strbhi.w	r3, [r2, #70]	; 0x46
}
 80031b4:	4770      	bx	lr

080031b6 <bme680_get_regs>:
{
 80031b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ba:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80031bc:	4618      	mov	r0, r3
{
 80031be:	461d      	mov	r5, r3
 80031c0:	4688      	mov	r8, r1
	rslt = null_ptr_check(dev);
 80031c2:	f7ff ff8f 	bl	80030e4 <null_ptr_check>
{
 80031c6:	4691      	mov	r9, r2
	if (rslt == BME680_OK) {
 80031c8:	4604      	mov	r4, r0
 80031ca:	b9a8      	cbnz	r0, 80031f8 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80031cc:	78ab      	ldrb	r3, [r5, #2]
 80031ce:	b93b      	cbnz	r3, 80031e0 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 80031d0:	4629      	mov	r1, r5
 80031d2:	4630      	mov	r0, r6
 80031d4:	f7ff ff94 	bl	8003100 <set_mem_page>
			if (rslt == BME680_OK)
 80031d8:	4604      	mov	r4, r0
 80031da:	b908      	cbnz	r0, 80031e0 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80031dc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80031e0:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80031e2:	464b      	mov	r3, r9
 80031e4:	4642      	mov	r2, r8
 80031e6:	4631      	mov	r1, r6
 80031e8:	7868      	ldrb	r0, [r5, #1]
 80031ea:	47b8      	blx	r7
			rslt = BME680_E_COM_FAIL;
 80031ec:	2800      	cmp	r0, #0
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80031ee:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
			rslt = BME680_E_COM_FAIL;
 80031f2:	bf18      	it	ne
 80031f4:	f06f 0401 	mvnne.w	r4, #1
}
 80031f8:	4620      	mov	r0, r4
 80031fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080031fe <bme680_set_regs>:
{
 80031fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	461c      	mov	r4, r3
 8003206:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8003208:	2100      	movs	r1, #0
{
 800320a:	4606      	mov	r6, r0
 800320c:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800320e:	a801      	add	r0, sp, #4
 8003210:	2224      	movs	r2, #36	; 0x24
 8003212:	9100      	str	r1, [sp, #0]
 8003214:	f022 fe22 	bl	8025e5c <memset>
	rslt = null_ptr_check(dev);
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ff63 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 800321e:	b9e8      	cbnz	r0, 800325c <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003220:	f108 33ff 	add.w	r3, r8, #4294967295
 8003224:	2b12      	cmp	r3, #18
 8003226:	d833      	bhi.n	8003290 <bme680_set_regs+0x92>
 8003228:	46ea      	mov	sl, sp
 800322a:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 800322c:	fa1f f888 	uxth.w	r8, r8
 8003230:	fa1f f389 	uxth.w	r3, r9
 8003234:	4543      	cmp	r3, r8
 8003236:	d314      	bcc.n	8003262 <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8003238:	b980      	cbnz	r0, 800325c <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 800323a:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800323e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003240:	f89d 1000 	ldrb.w	r1, [sp]
 8003244:	3a01      	subs	r2, #1
 8003246:	7860      	ldrb	r0, [r4, #1]
 8003248:	b293      	uxth	r3, r2
 800324a:	f10d 0201 	add.w	r2, sp, #1
 800324e:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 8003250:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8003252:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 8003256:	bf18      	it	ne
 8003258:	f06f 0001 	mvnne.w	r0, #1
}
 800325c:	b00a      	add	sp, #40	; 0x28
 800325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 8003262:	78a3      	ldrb	r3, [r4, #2]
					rslt = set_mem_page(reg_addr[index], dev);
 8003264:	f816 5009 	ldrb.w	r5, [r6, r9]
				if (dev->intf == BME680_SPI_INTF) {
 8003268:	b93b      	cbnz	r3, 800327a <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 800326a:	4628      	mov	r0, r5
 800326c:	4621      	mov	r1, r4
 800326e:	f7ff ff47 	bl	8003100 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003272:	f816 5009 	ldrb.w	r5, [r6, r9]
 8003276:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 800327a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800327e:	f10a 0a02 	add.w	sl, sl, #2
					tmp_buff[(2 * index)] = reg_addr[index];
 8003282:	f80a 5c02 	strb.w	r5, [sl, #-2]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003286:	f109 0901 	add.w	r9, r9, #1
 800328a:	f80a 3c01 	strb.w	r3, [sl, #-1]
			for (index = 0; index < len; index++) {
 800328e:	e7cf      	b.n	8003230 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 8003290:	f06f 0003 	mvn.w	r0, #3
 8003294:	e7e2      	b.n	800325c <bme680_set_regs+0x5e>

08003296 <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003296:	23e0      	movs	r3, #224	; 0xe0
{
 8003298:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 800329a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 800329e:	23b6      	movs	r3, #182	; 0xb6
{
 80032a0:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80032a2:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 80032a6:	f7ff ff1d 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 80032aa:	4604      	mov	r4, r0
 80032ac:	b970      	cbnz	r0, 80032cc <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 80032ae:	78ab      	ldrb	r3, [r5, #2]
 80032b0:	b17b      	cbz	r3, 80032d2 <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80032b2:	462b      	mov	r3, r5
 80032b4:	2201      	movs	r2, #1
 80032b6:	f10d 0107 	add.w	r1, sp, #7
 80032ba:	f10d 0006 	add.w	r0, sp, #6
 80032be:	f7ff ff9e 	bl	80031fe <bme680_set_regs>
 80032c2:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 80032c4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80032c6:	200a      	movs	r0, #10
 80032c8:	4798      	blx	r3
			if (rslt == BME680_OK) {
 80032ca:	b14c      	cbz	r4, 80032e0 <bme680_soft_reset+0x4a>
}
 80032cc:	4620      	mov	r0, r4
 80032ce:	b003      	add	sp, #12
 80032d0:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7ff ff48 	bl	8003168 <get_mem_page>
		if (rslt == BME680_OK) {
 80032d8:	4604      	mov	r4, r0
 80032da:	2800      	cmp	r0, #0
 80032dc:	d1f6      	bne.n	80032cc <bme680_soft_reset+0x36>
 80032de:	e7e8      	b.n	80032b2 <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80032e0:	78ab      	ldrb	r3, [r5, #2]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f2      	bne.n	80032cc <bme680_soft_reset+0x36>
					rslt = get_mem_page(dev);
 80032e6:	4628      	mov	r0, r5
 80032e8:	f7ff ff3e 	bl	8003168 <get_mem_page>
 80032ec:	4604      	mov	r4, r0
 80032ee:	e7ed      	b.n	80032cc <bme680_soft_reset+0x36>

080032f0 <bme680_init>:
{
 80032f0:	b530      	push	{r4, r5, lr}
 80032f2:	b08d      	sub	sp, #52	; 0x34
 80032f4:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80032f6:	f7ff fef5 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 80032fa:	4604      	mov	r4, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	f040 80af 	bne.w	8003460 <bme680_init+0x170>
		rslt = bme680_soft_reset(dev);
 8003302:	4628      	mov	r0, r5
 8003304:	f7ff ffc7 	bl	8003296 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 8003308:	4604      	mov	r4, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	f040 80a8 	bne.w	8003460 <bme680_init+0x170>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003310:	462b      	mov	r3, r5
 8003312:	2201      	movs	r2, #1
 8003314:	4629      	mov	r1, r5
 8003316:	20d0      	movs	r0, #208	; 0xd0
 8003318:	f7ff ff4d 	bl	80031b6 <bme680_get_regs>
			if (rslt == BME680_OK) {
 800331c:	4604      	mov	r4, r0
 800331e:	2800      	cmp	r0, #0
 8003320:	f040 809e 	bne.w	8003460 <bme680_init+0x170>
				if (dev->chip_id == BME680_CHIP_ID) {
 8003324:	782b      	ldrb	r3, [r5, #0]
 8003326:	2b61      	cmp	r3, #97	; 0x61
 8003328:	f040 809d 	bne.w	8003466 <bme680_init+0x176>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 800332c:	4601      	mov	r1, r0
 800332e:	9001      	str	r0, [sp, #4]
 8003330:	2225      	movs	r2, #37	; 0x25
 8003332:	a802      	add	r0, sp, #8
 8003334:	f022 fd92 	bl	8025e5c <memset>
	rslt = null_ptr_check(dev);
 8003338:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 800333a:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 800333e:	f7ff fed1 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003342:	4604      	mov	r4, r0
 8003344:	2800      	cmp	r0, #0
 8003346:	f040 808b 	bne.w	8003460 <bme680_init+0x170>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 800334a:	462b      	mov	r3, r5
 800334c:	2219      	movs	r2, #25
 800334e:	a901      	add	r1, sp, #4
 8003350:	2089      	movs	r0, #137	; 0x89
 8003352:	f7ff ff30 	bl	80031b6 <bme680_get_regs>
		if (rslt == BME680_OK)
 8003356:	4604      	mov	r4, r0
 8003358:	b938      	cbnz	r0, 800336a <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 800335a:	462b      	mov	r3, r5
 800335c:	2210      	movs	r2, #16
 800335e:	f10d 011d 	add.w	r1, sp, #29
 8003362:	20e1      	movs	r0, #225	; 0xe1
 8003364:	f7ff ff27 	bl	80031b6 <bme680_get_regs>
 8003368:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 800336a:	f8bd 3025 	ldrh.w	r3, [sp, #37]	; 0x25
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800336e:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003372:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8003374:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8003378:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800337a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800337e:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8003380:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8003384:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8003386:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 800338a:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 800338c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003390:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8003394:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 8003398:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 800339a:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 800339e:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80033a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80033a4:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80033a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80033ac:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80033b0:	f8bd 3017 	ldrh.w	r3, [sp, #23]
 80033b4:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80033b6:	f8bd 3019 	ldrh.w	r3, [sp, #25]
 80033ba:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80033bc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80033c0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80033c4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80033c8:	f003 020f 	and.w	r2, r3, #15
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80033cc:	091b      	lsrs	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80033ce:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033d2:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033d4:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80033d8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033dc:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80033de:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80033e2:	732b      	strb	r3, [r5, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80033e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80033e8:	736b      	strb	r3, [r5, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80033ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80033ee:	73ab      	strb	r3, [r5, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80033f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80033f4:	73eb      	strb	r3, [r5, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80033f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80033fa:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80033fc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8003400:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003402:	f8bd 3027 	ldrh.w	r3, [sp, #39]	; 0x27
 8003406:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8003408:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800340c:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 800340e:	bb14      	cbnz	r4, 8003456 <bme680_init+0x166>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8003410:	462b      	mov	r3, r5
 8003412:	2201      	movs	r2, #1
 8003414:	f10d 0103 	add.w	r1, sp, #3
 8003418:	2002      	movs	r0, #2
 800341a:	f7ff fecc 	bl	80031b6 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 800341e:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 8003422:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003424:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003428:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
 800342c:	b998      	cbnz	r0, 8003456 <bme680_init+0x166>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 800342e:	462b      	mov	r3, r5
 8003430:	2201      	movs	r2, #1
 8003432:	f10d 0103 	add.w	r1, sp, #3
 8003436:	f7ff febe 	bl	80031b6 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 800343a:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 800343e:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8003440:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
 8003444:	b938      	cbnz	r0, 8003456 <bme680_init+0x166>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003446:	462b      	mov	r3, r5
 8003448:	2201      	movs	r2, #1
 800344a:	f10d 0103 	add.w	r1, sp, #3
 800344e:	2004      	movs	r0, #4
 8003450:	f7ff feb1 	bl	80031b6 <bme680_get_regs>
 8003454:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003456:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 800345a:	111b      	asrs	r3, r3, #4
 800345c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
 8003460:	4620      	mov	r0, r4
 8003462:	b00d      	add	sp, #52	; 0x34
 8003464:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 8003466:	f06f 0402 	mvn.w	r4, #2
 800346a:	e7f9      	b.n	8003460 <bme680_init+0x170>

0800346c <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800346c:	2374      	movs	r3, #116	; 0x74
{
 800346e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003470:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003472:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 8003476:	f7ff fe35 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 800347a:	bba0      	cbnz	r0, 80034e6 <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 800347c:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 800347e:	4623      	mov	r3, r4
 8003480:	2201      	movs	r2, #1
 8003482:	f10d 0106 	add.w	r1, sp, #6
 8003486:	2074      	movs	r0, #116	; 0x74
 8003488:	f7ff fe95 	bl	80031b6 <bme680_get_regs>
			if (rslt == BME680_OK) {
 800348c:	b9a0      	cbnz	r0, 80034b8 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 800348e:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8003492:	f013 0503 	ands.w	r5, r3, #3
 8003496:	d011      	beq.n	80034bc <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8003498:	f023 0303 	bic.w	r3, r3, #3
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800349c:	2201      	movs	r2, #1
 800349e:	f10d 0106 	add.w	r1, sp, #6
 80034a2:	f10d 0007 	add.w	r0, sp, #7
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80034a6:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80034aa:	4623      	mov	r3, r4
 80034ac:	f7ff fea7 	bl	80031fe <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80034b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80034b2:	200a      	movs	r0, #10
 80034b4:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80034b6:	e7e2      	b.n	800347e <bme680_set_sensor_mode+0x12>
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	d1e0      	bne.n	800347e <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80034bc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80034c0:	b18a      	cbz	r2, 80034e6 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80034c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80034c6:	f002 0203 	and.w	r2, r2, #3
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80034d4:	b938      	cbnz	r0, 80034e6 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80034d6:	4623      	mov	r3, r4
 80034d8:	2201      	movs	r2, #1
 80034da:	f10d 0106 	add.w	r1, sp, #6
 80034de:	f10d 0007 	add.w	r0, sp, #7
 80034e2:	f7ff fe8c 	bl	80031fe <bme680_set_regs>
}
 80034e6:	b003      	add	sp, #12
 80034e8:	bd30      	pop	{r4, r5, pc}

080034ea <bme680_set_sensor_settings>:
{
 80034ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t data = 0;
 80034ec:	2300      	movs	r3, #0
{
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80034f2:	4608      	mov	r0, r1
{
 80034f4:	460c      	mov	r4, r1
	uint8_t data = 0;
 80034f6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003500:	9306      	str	r3, [sp, #24]
 8003502:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 8003506:	f7ff fded 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 800350a:	2800      	cmp	r0, #0
 800350c:	f040 80fc 	bne.w	8003708 <bme680_set_sensor_settings+0x21e>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003510:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003514:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003518:	d105      	bne.n	8003526 <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 800351a:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff ffa4 	bl	800346c <bme680_set_sensor_mode>
 8003524:	e007      	b.n	8003536 <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 8003526:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 8003528:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 800352c:	f000 80ee 	beq.w	800370c <bme680_set_sensor_settings+0x222>
		dev->power_mode = BME680_SLEEP_MODE;
 8003530:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 8003534:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 8003536:	f016 0510 	ands.w	r5, r6, #16
 800353a:	d01e      	beq.n	800357a <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800353c:	4622      	mov	r2, r4
 800353e:	2107      	movs	r1, #7
 8003540:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8003544:	f7ff fe29 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003548:	b928      	cbnz	r0, 8003556 <bme680_set_sensor_settings+0x6c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800354a:	4623      	mov	r3, r4
 800354c:	2201      	movs	r2, #1
 800354e:	4469      	add	r1, sp
 8003550:	2075      	movs	r0, #117	; 0x75
 8003552:	f7ff fe30 	bl	80031b6 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003556:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
			count++;
 800355a:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800355c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f022 021c 	bic.w	r2, r2, #28
 8003566:	f003 031c 	and.w	r3, r3, #28
 800356a:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 800356c:	2275      	movs	r2, #117	; 0x75
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800356e:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003572:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8003576:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 800357a:	06b3      	lsls	r3, r6, #26
 800357c:	d522      	bpl.n	80035c4 <bme680_set_sensor_settings+0xda>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800357e:	4622      	mov	r2, r4
 8003580:	2108      	movs	r1, #8
 8003582:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8003586:	f7ff fe08 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 800358a:	b930      	cbnz	r0, 800359a <bme680_set_sensor_settings+0xb0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800358c:	4623      	mov	r3, r4
 800358e:	2201      	movs	r2, #1
 8003590:	f10d 0107 	add.w	r1, sp, #7
 8003594:	2070      	movs	r0, #112	; 0x70
 8003596:	f7ff fe0e 	bl	80031b6 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 800359a:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 800359e:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80035a0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80035a4:	f023 0308 	bic.w	r3, r3, #8
 80035a8:	f002 0208 	and.w	r2, r2, #8
 80035ac:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80035ae:	f105 0220 	add.w	r2, r5, #32
			count++;
 80035b2:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 80035b4:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80035b6:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 80035ba:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80035bc:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80035c0:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80035c4:	07b1      	lsls	r1, r6, #30
 80035c6:	d033      	beq.n	8003630 <bme680_set_sensor_settings+0x146>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80035c8:	4622      	mov	r2, r4
 80035ca:	2105      	movs	r1, #5
 80035cc:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80035d0:	f7ff fde3 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80035d4:	b930      	cbnz	r0, 80035e4 <bme680_set_sensor_settings+0xfa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80035d6:	4623      	mov	r3, r4
 80035d8:	2201      	movs	r2, #1
 80035da:	f10d 0107 	add.w	r1, sp, #7
 80035de:	2074      	movs	r0, #116	; 0x74
 80035e0:	f7ff fde9 	bl	80031b6 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80035e4:	07f2      	lsls	r2, r6, #31
 80035e6:	d509      	bpl.n	80035fc <bme680_set_sensor_settings+0x112>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80035e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035ec:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80035f8:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80035fc:	07b3      	lsls	r3, r6, #30
 80035fe:	d50b      	bpl.n	8003618 <bme680_set_sensor_settings+0x12e>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003600:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8003604:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f022 021c 	bic.w	r2, r2, #28
 800360e:	f003 031c 	and.w	r3, r3, #28
 8003612:	4313      	orrs	r3, r2
 8003614:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8003618:	f105 0320 	add.w	r3, r5, #32
 800361c:	2274      	movs	r2, #116	; 0x74
			count++;
 800361e:	3501      	adds	r5, #1
			reg_array[count] = reg_addr;
 8003620:	446b      	add	r3, sp
			count++;
 8003622:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr;
 8003624:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8003628:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800362c:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (desired_settings & BME680_OSH_SEL) {
 8003630:	0771      	lsls	r1, r6, #29
 8003632:	d522      	bpl.n	800367a <bme680_set_sensor_settings+0x190>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8003634:	4622      	mov	r2, r4
 8003636:	2105      	movs	r1, #5
 8003638:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800363c:	f7ff fdad 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003640:	b930      	cbnz	r0, 8003650 <bme680_set_sensor_settings+0x166>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003642:	4623      	mov	r3, r4
 8003644:	2201      	movs	r2, #1
 8003646:	f10d 0107 	add.w	r1, sp, #7
 800364a:	2072      	movs	r0, #114	; 0x72
 800364c:	f7ff fdb3 	bl	80031b6 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003650:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003654:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003656:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	f002 0207 	and.w	r2, r2, #7
 8003662:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8003664:	f105 0220 	add.w	r2, r5, #32
			count++;
 8003668:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 800366a:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800366c:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 8003670:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 8003672:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8003676:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 800367a:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800367e:	d03a      	beq.n	80036f6 <bme680_set_sensor_settings+0x20c>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003680:	4622      	mov	r2, r4
 8003682:	2101      	movs	r1, #1
 8003684:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8003688:	f7ff fd87 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK) {
 800368c:	b960      	cbnz	r0, 80036a8 <bme680_set_sensor_settings+0x1be>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 800368e:	210a      	movs	r1, #10
 8003690:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003694:	f7ff fd81 	bl	800319a <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003698:	b930      	cbnz	r0, 80036a8 <bme680_set_sensor_settings+0x1be>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800369a:	4623      	mov	r3, r4
 800369c:	2201      	movs	r2, #1
 800369e:	f10d 0107 	add.w	r1, sp, #7
 80036a2:	2071      	movs	r0, #113	; 0x71
 80036a4:	f7ff fd87 	bl	80031b6 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80036a8:	0672      	lsls	r2, r6, #25
 80036aa:	d50b      	bpl.n	80036c4 <bme680_set_sensor_settings+0x1da>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80036ac:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80036b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	f022 0210 	bic.w	r2, r2, #16
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	4313      	orrs	r3, r2
 80036c0:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80036c4:	0633      	lsls	r3, r6, #24
 80036c6:	d50a      	bpl.n	80036de <bme680_set_sensor_settings+0x1f4>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80036c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036cc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80036d0:	f023 030f 	bic.w	r3, r3, #15
 80036d4:	f002 020f 	and.w	r2, r2, #15
 80036d8:	4313      	orrs	r3, r2
 80036da:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80036de:	f105 0320 	add.w	r3, r5, #32
 80036e2:	2271      	movs	r2, #113	; 0x71
			count++;
 80036e4:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 80036e6:	446b      	add	r3, sp
			count++;
 80036e8:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80036ea:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80036ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036f2:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (rslt == BME680_OK)
 80036f6:	b928      	cbnz	r0, 8003704 <bme680_set_sensor_settings+0x21a>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80036f8:	4623      	mov	r3, r4
 80036fa:	462a      	mov	r2, r5
 80036fc:	a906      	add	r1, sp, #24
 80036fe:	a804      	add	r0, sp, #16
 8003700:	f7ff fd7d 	bl	80031fe <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 8003704:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8003708:	b009      	add	sp, #36	; 0x24
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 800370c:	235a      	movs	r3, #90	; 0x5a
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800370e:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003712:	f88d 3008 	strb.w	r3, [sp, #8]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003716:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800371a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 800371e:	bf28      	it	cs
 8003720:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 8003724:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8003728:	f203 1399 	addw	r3, r3, #409	; 0x199
 800372c:	4353      	muls	r3, r2
 800372e:	2214      	movs	r2, #20
 8003730:	fbb3 f3f2 	udiv	r3, r3, r2
 8003734:	220a      	movs	r2, #10
 8003736:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800373a:	fbb3 f3f2 	udiv	r3, r3, r2
 800373e:	f991 2011 	ldrsb.w	r2, [r1, #17]
 8003742:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8003746:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003748:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800374c:	f991 1014 	ldrsb.w	r1, [r1, #20]
 8003750:	fb13 f301 	smulbb	r3, r3, r1
 8003754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003758:	fb93 f3f1 	sdiv	r3, r3, r1
 800375c:	021b      	lsls	r3, r3, #8
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800375e:	2183      	movs	r1, #131	; 0x83
	var3 = var1 + (var2 / 2);
 8003760:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003764:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003768:	3204      	adds	r2, #4
 800376a:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800376e:	f994 2035 	ldrsb.w	r2, [r4, #53]	; 0x35
 8003772:	434a      	muls	r2, r1
 8003774:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8003778:	fbb3 f3f2 	udiv	r3, r3, r2
 800377c:	2222      	movs	r2, #34	; 0x22
 800377e:	3bfa      	subs	r3, #250	; 0xfa
 8003780:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8003782:	2264      	movs	r2, #100	; 0x64
 8003784:	3332      	adds	r3, #50	; 0x32
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003786:	f88d 2009 	strb.w	r2, [sp, #9]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800378a:	fb93 f3f2 	sdiv	r3, r3, r2
 800378e:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003792:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 8003796:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800379a:	d21a      	bcs.n	80037d2 <bme680_set_sensor_settings+0x2e8>
		while (dur > 0x3F) {
 800379c:	2b3f      	cmp	r3, #63	; 0x3f
 800379e:	b2c2      	uxtb	r2, r0
 80037a0:	f100 0001 	add.w	r0, r0, #1
 80037a4:	d813      	bhi.n	80037ce <bme680_set_sensor_settings+0x2e4>
		durval = (uint8_t) (dur + (factor * 64));
 80037a6:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80037aa:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80037ac:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80037ae:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80037b2:	2202      	movs	r2, #2
 80037b4:	4623      	mov	r3, r4
 80037b6:	a903      	add	r1, sp, #12
 80037b8:	a802      	add	r0, sp, #8
			dev->gas_sett.nb_conv = 0;
 80037ba:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80037be:	f7ff fd1e 	bl	80031fe <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80037c2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80037c6:	2800      	cmp	r0, #0
 80037c8:	f47f aeb5 	bne.w	8003536 <bme680_set_sensor_settings+0x4c>
 80037cc:	e6a7      	b.n	800351e <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80037ce:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80037d0:	e7e4      	b.n	800379c <bme680_set_sensor_settings+0x2b2>
		durval = 0xff; /* Max duration*/
 80037d2:	23ff      	movs	r3, #255	; 0xff
 80037d4:	e7ea      	b.n	80037ac <bme680_set_sensor_settings+0x2c2>
	...

080037d8 <bme680_get_profile_dur>:
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <bme680_get_profile_dur+0x68>)
{
 80037da:	4602      	mov	r2, r0
 80037dc:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	889b      	ldrh	r3, [r3, #4]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037e2:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037e6:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037ea:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80037ee:	9000      	str	r0, [sp, #0]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037f0:	f104 0008 	add.w	r0, r4, #8
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037f4:	3308      	adds	r3, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037f6:	eb0d 0400 	add.w	r4, sp, r0
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80037fa:	446b      	add	r3, sp
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80037fc:	f814 0c08 	ldrb.w	r0, [r4, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003800:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8003804:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003808:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 800380a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800380e:	3308      	adds	r3, #8
 8003810:	446b      	add	r3, sp
 8003812:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003816:	4418      	add	r0, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003818:	f241 23b9 	movw	r3, #4793	; 0x12b9
 800381c:	fb04 3300 	mla	r3, r4, r0, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003824:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8003828:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 800382e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8003832:	b118      	cbz	r0, 800383c <bme680_get_profile_dur+0x64>
		*duration += dev->gas_sett.heatr_dur;
 8003834:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8003838:	440b      	add	r3, r1
 800383a:	8013      	strh	r3, [r2, #0]
}
 800383c:	b002      	add	sp, #8
 800383e:	bd10      	pop	{r4, pc}
 8003840:	08026dc8 	.word	0x08026dc8

08003844 <bme680_get_sensor_data>:
{
 8003844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003848:	4607      	mov	r7, r0
 800384a:	b0a9      	sub	sp, #164	; 0xa4
	rslt = null_ptr_check(dev);
 800384c:	4608      	mov	r0, r1
{
 800384e:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003850:	f7ff fc48 	bl	80030e4 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003854:	4605      	mov	r5, r0
 8003856:	2800      	cmp	r0, #0
 8003858:	f040 819d 	bne.w	8003b96 <bme680_get_sensor_data+0x352>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800385c:	9006      	str	r0, [sp, #24]
	rslt = null_ptr_check(dev);
 800385e:	f04f 080a 	mov.w	r8, #10
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8003862:	f8cd 001b 	str.w	r0, [sp, #27]
 8003866:	e9cd 0004 	strd	r0, r0, [sp, #16]
	rslt = null_ptr_check(dev);
 800386a:	4608      	mov	r0, r1
 800386c:	f7ff fc3a 	bl	80030e4 <null_ptr_check>
 8003870:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8003872:	2d00      	cmp	r5, #0
 8003874:	f040 8196 	bne.w	8003ba4 <bme680_get_sensor_data+0x360>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003878:	4623      	mov	r3, r4
 800387a:	220f      	movs	r2, #15
 800387c:	a904      	add	r1, sp, #16
 800387e:	201d      	movs	r0, #29
 8003880:	f7ff fc99 	bl	80031b6 <bme680_get_regs>
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003884:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003888:	f89d c010 	ldrb.w	ip, [sp, #16]
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800388c:	4605      	mov	r5, r0
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 800388e:	9201      	str	r2, [sp, #4]
 8003890:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003894:	f00c 030f 	and.w	r3, ip, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8003898:	f99d 001e 	ldrsb.w	r0, [sp, #30]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 800389c:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80038a0:	9202      	str	r2, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038a2:	f89d 201d 	ldrb.w	r2, [sp, #29]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80038a6:	707b      	strb	r3, [r7, #1]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038a8:	9203      	str	r2, [sp, #12]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80038aa:	f000 0220 	and.w	r2, r0, #32
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038ae:	f000 0010 	and.w	r0, r0, #16
			data->meas_index = buff[1];
 80038b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80038b6:	ea4c 0202 	orr.w	r2, ip, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038ba:	f89d e012 	ldrb.w	lr, [sp, #18]
			data->meas_index = buff[1];
 80038be:	70bb      	strb	r3, [r7, #2]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038c0:	4302      	orrs	r2, r0
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038c2:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80038c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038ca:	b252      	sxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038cc:	f89d a015 	ldrb.w	sl, [sp, #21]
 80038d0:	f89d b016 	ldrb.w	fp, [sp, #22]
			if (data->status & BME680_NEW_DATA_MSK) {
 80038d4:	2a00      	cmp	r2, #0
				| ((uint32_t) buff[7] / 16));
 80038d6:	f89d 1017 	ldrb.w	r1, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038da:	f89d 601e 	ldrb.w	r6, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038de:	703a      	strb	r2, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 80038e0:	f280 815d 	bge.w	8003b9e <bme680_get_sensor_data+0x35a>
				| ((uint32_t) buff[7] / 16));
 80038e4:	0909      	lsrs	r1, r1, #4
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80038e6:	f994 c01a 	ldrsb.w	ip, [r4, #26]
				| ((uint32_t) buff[4] / 16));
 80038ea:	091b      	lsrs	r3, r3, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038ec:	ea41 1b0b 	orr.w	fp, r1, fp, lsl #4
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038f0:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038f4:	ea4b 3a0a 	orr.w	sl, fp, sl, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80038f8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038fc:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003900:	f9b4 e022 	ldrsh.w	lr, [r4, #34]	; 0x22
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003904:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003908:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
	pressure_comp = 1048576 - pres_adc;
 800390c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003910:	ebcb 0ada 	rsb	sl, fp, sl, lsr #3
 8003914:	ea4f 72ea 	mov.w	r2, sl, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003918:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800391c:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8003920:	fb01 f002 	mul.w	r0, r1, r2
 8003924:	fba1 1201 	umull	r1, r2, r1, r1
 8003928:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800392c:	0b09      	lsrs	r1, r1, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800392e:	ea4f 100c 	mov.w	r0, ip, lsl #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003932:	ea41 5102 	orr.w	r1, r1, r2, lsl #20
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003936:	ea4f 7cec 	mov.w	ip, ip, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800393a:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800393c:	fb01 fc0c 	mul.w	ip, r1, ip
 8003940:	fba1 8100 	umull	r8, r1, r1, r0
 8003944:	fb00 cc02 	mla	ip, r0, r2, ip
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003948:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800394c:	fb82 2a0a 	smull	r2, sl, r2, sl
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003950:	448c      	add	ip, r1
 8003952:	ea4f 3198 	mov.w	r1, r8, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003956:	0ad2      	lsrs	r2, r2, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003958:	ea41 418c 	orr.w	r1, r1, ip, lsl #18
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 800395c:	ea42 524a 	orr.w	r2, r2, sl, lsl #21
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003960:	440a      	add	r2, r1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003962:	eb02 0182 	add.w	r1, r2, r2, lsl #2
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003966:	6322      	str	r2, [r4, #48]	; 0x30
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003968:	1052      	asrs	r2, r2, #1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 800396a:	3180      	adds	r1, #128	; 0x80
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 800396c:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003970:	ea4f 2821 	mov.w	r8, r1, asr #8
				data->temperature = calc_temperature(adc_temp, dev);
 8003974:	f341 210f 	sbfx	r1, r1, #8, #16
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003978:	ea4f 0ca2 	mov.w	ip, r2, asr #2
				data->temperature = calc_temperature(adc_temp, dev);
 800397c:	ee07 1a90 	vmov	s15, r1
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003980:	fb0c fc0c 	mul.w	ip, ip, ip
				data->temperature = calc_temperature(adc_temp, dev);
 8003984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003988:	ea4f 20ec 	mov.w	r0, ip, asr #11
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800398c:	ea4f 3c6c 	mov.w	ip, ip, asr #13
				data->temperature = calc_temperature(adc_temp, dev);
 8003990:	edc7 7a01 	vstr	s15, [r7, #4]
		(int32_t)dev->calib.par_p6) >> 2;
 8003994:	f994 1026 	ldrsb.w	r1, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003998:	4341      	muls	r1, r0
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 800399a:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800399e:	4350      	muls	r0, r2
 80039a0:	0040      	lsls	r0, r0, #1
 80039a2:	eb00 00a1 	add.w	r0, r0, r1, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80039a6:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
 80039aa:	434a      	muls	r2, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039ac:	f994 1020 	ldrsb.w	r1, [r4, #32]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80039b0:	eb0e 00a0 	add.w	r0, lr, r0, asr #2
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80039b4:	f10d 0e20 	add.w	lr, sp, #32
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039b8:	0149      	lsls	r1, r1, #5
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80039ba:	eba3 3320 	sub.w	r3, r3, r0, asr #12
 80039be:	f640 4035 	movw	r0, #3125	; 0xc35
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80039c2:	fb0c fc01 	mul.w	ip, ip, r1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039c6:	8ba1      	ldrh	r1, [r4, #28]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80039c8:	4343      	muls	r3, r0
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80039ca:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039ce:	ea4f 0cec 	mov.w	ip, ip, asr #3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80039d6:	eb0c 0262 	add.w	r2, ip, r2, asr #1
		(int32_t)dev->calib.par_p8) >> 13;
 80039da:	f9b4 c028 	ldrsh.w	ip, [r4, #40]	; 0x28
		pressure_comp = ((pressure_comp << 1) / var1);
 80039de:	bfb8      	it	lt
 80039e0:	005b      	lsllt	r3, r3, #1
	var1 = var1 >> 18;
 80039e2:	ea4f 42a2 	mov.w	r2, r2, asr #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80039ea:	fb01 f202 	mul.w	r2, r1, r2
 80039ee:	ea4f 32e2 	mov.w	r2, r2, asr #15
		pressure_comp = ((pressure_comp / var1) << 1);
 80039f2:	bfaa      	itet	ge
 80039f4:	fb93 f3f2 	sdivge	r3, r3, r2
		pressure_comp = ((pressure_comp << 1) / var1);
 80039f8:	fb93 f3f2 	sdivlt	r3, r3, r2
		pressure_comp = ((pressure_comp / var1) << 1);
 80039fc:	005b      	lslge	r3, r3, #1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80039fe:	10da      	asrs	r2, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003a00:	1219      	asrs	r1, r3, #8
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003a02:	4352      	muls	r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003a04:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003a06:	4342      	muls	r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003a08:	1098      	asrs	r0, r3, #2
 8003a0a:	fb0c f000 	mul.w	r0, ip, r0
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a0e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8003bc0 <bme680_get_sensor_data+0x37c>
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003a12:	1340      	asrs	r0, r0, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a14:	eb00 3222 	add.w	r2, r0, r2, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003a18:	fb01 f001 	mul.w	r0, r1, r1
 8003a1c:	4341      	muls	r1, r0
		(int32_t)dev->calib.par_p10) >> 17;
 8003a1e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8003a22:	4341      	muls	r1, r0
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a24:	eb02 4261 	add.w	r2, r2, r1, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003a28:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a2c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8003a30:	eb03 1322 	add.w	r3, r3, r2, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a34:	2264      	movs	r2, #100	; 0x64
				data->pressure = calc_pressure(adc_pres, dev);
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	edc7 7a02 	vstr	s15, [r7, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a42:	f994 300e 	ldrsb.w	r3, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a46:	f994 100d 	ldrsb.w	r1, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a4a:	fb08 f303 	mul.w	r3, r8, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a4e:	fb08 f101 	mul.w	r1, r8, r1
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a56:	fb08 f303 	mul.w	r3, r8, r3
 8003a5a:	119b      	asrs	r3, r3, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a5c:	fb91 f1f2 	sdiv	r1, r1, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003a60:	fb93 f3f2 	sdiv	r3, r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a64:	440b      	add	r3, r1
	var2 = ((int32_t) dev->calib.par_h2
 8003a66:	8961      	ldrh	r1, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003a68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a6c:	434b      	muls	r3, r1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a6e:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
	var2 = ((int32_t) dev->calib.par_h2
 8003a72:	129b      	asrs	r3, r3, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a74:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003a78:	8920      	ldrh	r0, [r4, #8]
 8003a7a:	eba1 1100 	sub.w	r1, r1, r0, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8003a7e:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8003a82:	fb08 f000 	mul.w	r0, r8, r0
 8003a86:	fb90 f0f2 	sdiv	r0, r0, r2
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a8a:	eba1 0160 	sub.w	r1, r1, r0, asr #1
	var3 = var1 * var2;
 8003a8e:	434b      	muls	r3, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a90:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8003a94:	fb08 f801 	mul.w	r8, r8, r1
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003a98:	1399      	asrs	r1, r3, #14
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a9a:	fb98 f2f2 	sdiv	r2, r8, r2
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8003a9e:	f894 800f 	ldrb.w	r8, [r4, #15]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003aa2:	4349      	muls	r1, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003aa4:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003aa8:	1289      	asrs	r1, r1, #10
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003aaa:	1112      	asrs	r2, r2, #4
	var6 = (var4 * var5) >> 1;
 8003aac:	434a      	muls	r2, r1
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003aae:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8003ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ab6:	129b      	asrs	r3, r3, #10
 8003ab8:	4353      	muls	r3, r2
				data->humidity = calc_humidity(adc_hum, dev);
 8003aba:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <bme680_get_sensor_data+0x378>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003abc:	131b      	asrs	r3, r3, #12
 8003abe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	bfa8      	it	ge
 8003ac6:	4613      	movge	r3, r2
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003ad0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
				data->humidity = calc_humidity(adc_hum, dev);
 8003ad4:	edc7 7a03 	vstr	s15, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003ad8:	f994 8036 	ldrsb.w	r8, [r4, #54]	; 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003adc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ae0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ae4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003aec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003af0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003af4:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003af8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003afc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b00:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
 8003b04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b18:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003b1c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b20:	2205      	movs	r2, #5
 8003b22:	f240 513c 	movw	r1, #1340	; 0x53c
 8003b26:	2300      	movs	r3, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003b28:	f006 0c0f 	and.w	ip, r6, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b2c:	fbc2 1308 	smlal	r1, r3, r2, r8
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003b30:	aa28      	add	r2, sp, #160	; 0xa0
 8003b32:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8003b36:	f85c 2c80 	ldr.w	r2, [ip, #-128]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b3a:	fba1 1002 	umull	r1, r0, r1, r2
 8003b3e:	fb02 0303 	mla	r3, r2, r3, r0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003b42:	09b2      	lsrs	r2, r6, #6
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b44:	9803      	ldr	r0, [sp, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b46:	0c09      	lsrs	r1, r1, #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b48:	f85c 6c40 	ldr.w	r6, [ip, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b50:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b58:	03d2      	lsls	r2, r2, #15
 8003b5a:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 8003b5e:	eb60 0000 	sbc.w	r0, r0, r0
 8003b62:	1852      	adds	r2, r2, r1
 8003b64:	eb40 4323 	adc.w	r3, r0, r3, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b68:	fba6 0101 	umull	r0, r1, r6, r1
 8003b6c:	fb06 1e0e 	mla	lr, r6, lr, r1
 8003b70:	0a40      	lsrs	r0, r0, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003b72:	0856      	lsrs	r6, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b74:	ea40 50ce 	orr.w	r0, r0, lr, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003b78:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 8003b7c:	1059      	asrs	r1, r3, #1
 8003b7e:	1980      	adds	r0, r0, r6
 8003b80:	eb41 216e 	adc.w	r1, r1, lr, asr #9
 8003b84:	f7fc fbac 	bl	80002e0 <__aeabi_ldivmod>
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003b88:	ee07 0a90 	vmov	s15, r0
 8003b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b90:	edc7 7a04 	vstr	s15, [r7, #16]
		if (rslt == BME680_OK) {
 8003b94:	b175      	cbz	r5, 8003bb4 <bme680_get_sensor_data+0x370>
}
 8003b96:	4628      	mov	r0, r5
 8003b98:	b029      	add	sp, #164	; 0xa4
 8003b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003b9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	4798      	blx	r3
	} while (tries);
 8003ba4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ba8:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8003bac:	f47f ae61 	bne.w	8003872 <bme680_get_sensor_data+0x2e>
		rslt = BME680_W_NO_NEW_DATA;
 8003bb0:	2502      	movs	r5, #2
	return rslt;
 8003bb2:	e7f0      	b.n	8003b96 <bme680_get_sensor_data+0x352>
				dev->new_fields = 1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bba:	e7ec      	b.n	8003b96 <bme680_get_sensor_data+0x352>
 8003bbc:	000186a0 	.word	0x000186a0
 8003bc0:	08026dd0 	.word	0x08026dd0

08003bc4 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8003bc4:	4901      	ldr	r1, [pc, #4]	; (8003bcc <vApplicationIdleHook+0x8>)
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f00a befe 	b.w	800e9c8 <vTaskSetApplicationTaskTag>
 8003bcc:	080011bd 	.word	0x080011bd

08003bd0 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  for(;;)
 8003bd0:	e7fe      	b.n	8003bd0 <StartDefaultTask>
	...

08003bd4 <user_i2c_read>:
    {
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bd6:	0047      	lsls	r7, r0, #1
    {
 8003bd8:	b085      	sub	sp, #20
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bda:	260a      	movs	r6, #10
    {
 8003bdc:	4614      	mov	r4, r2
 8003bde:	461d      	mov	r5, r3
 8003be0:	f88d 100f 	strb.w	r1, [sp, #15]
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f10d 020f 	add.w	r2, sp, #15
 8003bea:	4639      	mov	r1, r7
 8003bec:	480a      	ldr	r0, [pc, #40]	; (8003c18 <user_i2c_read+0x44>)
 8003bee:	9600      	str	r6, [sp, #0]
 8003bf0:	f005 fe92 	bl	8009918 <HAL_I2C_Master_Transmit>
 8003bf4:	b968      	cbnz	r0, 8003c12 <user_i2c_read+0x3e>
      if(HAL_I2C_Master_Receive(&hi2c1, (dev_id << 1) | 0x01, reg_data, len, 10) != HAL_OK) return -1;
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	f047 0101 	orr.w	r1, r7, #1
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <user_i2c_read+0x44>)
 8003c00:	9600      	str	r6, [sp, #0]
 8003c02:	f005 ff1f 	bl	8009a44 <HAL_I2C_Master_Receive>
 8003c06:	3800      	subs	r0, #0
 8003c08:	bf18      	it	ne
 8003c0a:	2001      	movne	r0, #1
 8003c0c:	4240      	negs	r0, r0
    }
 8003c0e:	b005      	add	sp, #20
 8003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	e7fa      	b.n	8003c0e <user_i2c_read+0x3a>
 8003c18:	20012128 	.word	0x20012128

08003c1c <user_delay_ms>:
      HAL_Delay(period);
 8003c1c:	f004 b902 	b.w	8007e24 <HAL_Delay>

08003c20 <user_i2c_write>:
    {
 8003c20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
      buf = malloc(len +1);
 8003c24:	f103 0801 	add.w	r8, r3, #1
    {
 8003c28:	461c      	mov	r4, r3
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	460f      	mov	r7, r1
      buf = malloc(len +1);
 8003c2e:	4640      	mov	r0, r8
    {
 8003c30:	9203      	str	r2, [sp, #12]
      buf = malloc(len +1);
 8003c32:	f022 f8f5 	bl	8025e20 <malloc>
      memcpy(buf +1, reg_data, len);
 8003c36:	4622      	mov	r2, r4
      buf = malloc(len +1);
 8003c38:	4605      	mov	r5, r0
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c3a:	f04f 34ff 	mov.w	r4, #4294967295
      memcpy(buf +1, reg_data, len);
 8003c3e:	9903      	ldr	r1, [sp, #12]
      buf[0] = reg_addr;
 8003c40:	f800 7b01 	strb.w	r7, [r0], #1
      memcpy(buf +1, reg_data, len);
 8003c44:	f022 f8fc 	bl	8025e40 <memcpy>
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c48:	462a      	mov	r2, r5
 8003c4a:	0071      	lsls	r1, r6, #1
 8003c4c:	4808      	ldr	r0, [pc, #32]	; (8003c70 <user_i2c_write+0x50>)
 8003c4e:	fa1f f388 	uxth.w	r3, r8
 8003c52:	9400      	str	r4, [sp, #0]
 8003c54:	f005 fe60 	bl	8009918 <HAL_I2C_Master_Transmit>
 8003c58:	4606      	mov	r6, r0
 8003c5a:	b930      	cbnz	r0, 8003c6a <user_i2c_write+0x4a>
      free(buf);
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f022 f8e7 	bl	8025e30 <free>
      return 0;
 8003c62:	4630      	mov	r0, r6
    }
 8003c64:	b004      	add	sp, #16
 8003c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	e7fa      	b.n	8003c64 <user_i2c_write+0x44>
 8003c6e:	bf00      	nop
 8003c70:	20012128 	.word	0x20012128

08003c74 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003c74:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c76:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003c7a:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4817      	ldr	r0, [pc, #92]	; (8003ce0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c82:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003c84:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c86:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003c88:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c8a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c8c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003c90:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003c92:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c94:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c96:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c9a:	f007 fbd3 	bl	800b444 <HAL_QSPI_Command>
 8003c9e:	b9e0      	cbnz	r0, 8003cda <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8003ca0:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003ca2:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003ca8:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003caa:	480d      	ldr	r0, [pc, #52]	; (8003ce0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003cac:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cb6:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb8:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003cba:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003cbe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cc2:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003cc4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cca:	f007 fcb6 	bl	800b63a <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003cce:	3800      	subs	r0, #0
 8003cd0:	bf18      	it	ne
 8003cd2:	2001      	movne	r0, #1
}
 8003cd4:	b015      	add	sp, #84	; 0x54
 8003cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	e7fa      	b.n	8003cd4 <QSPI_WriteEnable.constprop.0+0x60>
 8003cde:	bf00      	nop
 8003ce0:	200122d0 	.word	0x200122d0

08003ce4 <SystemClock_Config>:
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ce8:	2210      	movs	r2, #16
 8003cea:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cec:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cee:	a809      	add	r0, sp, #36	; 0x24
 8003cf0:	f022 f8b4 	bl	8025e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cf4:	2214      	movs	r2, #20
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	a802      	add	r0, sp, #8
 8003cfa:	f022 f8af 	bl	8025e5c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d00:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d02:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <SystemClock_Config+0x98>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d20:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d30:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d38:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003d40:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003d44:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d46:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003d4a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d4c:	f007 fd06 	bl	800b75c <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d50:	f007 fa14 	bl	800b17c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d54:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d56:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d58:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d5a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d62:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d6a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d6c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d6e:	f007 fee9 	bl	800bb44 <HAL_RCC_ClockConfig>
}
 8003d72:	b014      	add	sp, #80	; 0x50
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000

08003d80 <MX_I2C4_Init>:
{
 8003d80:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d82:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d84:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8003d86:	4c0d      	ldr	r4, [pc, #52]	; (8003dbc <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003d8a:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d8c:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003d8e:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d92:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8003d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d98:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d9c:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003da0:	f005 fd4f 	bl	8009842 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003da4:	4629      	mov	r1, r5
 8003da6:	4620      	mov	r0, r4
 8003da8:	f006 f8a3 	bl	8009ef2 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003dac:	4629      	mov	r1, r5
 8003dae:	4620      	mov	r0, r4
}
 8003db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003db4:	f006 b8c3 	b.w	8009f3e <HAL_I2CEx_ConfigDigitalFilter>
 8003db8:	40006000 	.word	0x40006000
 8003dbc:	2001217c 	.word	0x2001217c
 8003dc0:	00c0eaff 	.word	0x00c0eaff

08003dc4 <main>:
{
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	b0bd      	sub	sp, #244	; 0xf4

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dca:	2210      	movs	r2, #16
 8003dcc:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003dce:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dd0:	a82e      	add	r0, sp, #184	; 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003dd2:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003dd4:	f022 f842 	bl	8025e5c <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003dd8:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003dda:	f004 fb05 	bl	80083e8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003dde:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
 8003de2:	4bcb      	ldr	r3, [pc, #812]	; (8004110 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003de4:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003de6:	f8ad 40b8 	strh.w	r4, [sp, #184]	; 0xb8
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003dea:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003dee:	e9cd e32f 	strd	lr, r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003df2:	4bc8      	ldr	r3, [pc, #800]	; (8004114 <main+0x350>)
 8003df4:	9331      	str	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003df6:	f004 fb15 	bl	8008424 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003dfa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003dfe:	f88d 40b9 	strb.w	r4, [sp, #185]	; 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e02:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e04:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003e06:	932f      	str	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e08:	f88d 60c0 	strb.w	r6, [sp, #192]	; 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e0c:	f88d 40c3 	strb.w	r4, [sp, #195]	; 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e10:	f8ad 40c6 	strh.w	r4, [sp, #198]	; 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e14:	f004 fb06 	bl	8008424 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003e18:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e1a:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e1c:	f88d 50c3 	strb.w	r5, [sp, #195]	; 0xc3
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003e20:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003e24:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e26:	f8ad 70c6 	strh.w	r7, [sp, #198]	; 0xc6
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003e2a:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e2e:	f004 faf9 	bl	8008424 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003e32:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e36:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e38:	f88d 60c0 	strb.w	r6, [sp, #192]	; 0xc0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003e3c:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003e3e:	932f      	str	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003e40:	f88d 50b9 	strb.w	r5, [sp, #185]	; 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e44:	f88d 40c3 	strb.w	r4, [sp, #195]	; 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e48:	f8ad 40c6 	strh.w	r4, [sp, #198]	; 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e4c:	f004 faea 	bl	8008424 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003e50:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e52:	a82e      	add	r0, sp, #184	; 0xb8
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003e54:	f88d 60b9 	strb.w	r6, [sp, #185]	; 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003e58:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e5c:	f88d 50c3 	strb.w	r5, [sp, #195]	; 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e60:	f8ad 70c6 	strh.w	r7, [sp, #198]	; 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e64:	f004 fade 	bl	8008424 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f004 facb 	bl	8008404 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e72:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003e76:	4aa8      	ldr	r2, [pc, #672]	; (8004118 <main+0x354>)
 8003e78:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003e7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e80:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003e84:	6953      	ldr	r3, [r2, #20]
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e90:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003e94:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003e98:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003e9c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ea0:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003ea4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ea8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003eac:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eae:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003eb2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eb4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003eb8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003eba:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003ebe:	d2f9      	bcs.n	8003eb4 <main+0xf0>
    } while(sets-- != 0U);
 8003ec0:	3b20      	subs	r3, #32
 8003ec2:	f113 0f20 	cmn.w	r3, #32
 8003ec6:	d1f2      	bne.n	8003eae <main+0xea>
 8003ec8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ecc:	6953      	ldr	r3, [r2, #20]
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	6153      	str	r3, [r2, #20]
 8003ed4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ed8:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003edc:	4e8f      	ldr	r6, [pc, #572]	; (800411c <main+0x358>)
  HAL_Init();
 8003ede:	f003 ff7d 	bl	8007ddc <HAL_Init>
  SystemClock_Config();
 8003ee2:	f7ff feff 	bl	8003ce4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee6:	2214      	movs	r2, #20
 8003ee8:	2100      	movs	r1, #0
 8003eea:	a82e      	add	r0, sp, #184	; 0xb8
 8003eec:	f021 ffb6 	bl	8025e5c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef8:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003efc:	4888      	ldr	r0, [pc, #544]	; (8004120 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003efe:	2501      	movs	r5, #1
 8003f00:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f04:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f06:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f08:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0a:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8003f0e:	f04f 0802 	mov.w	r8, #2
  hdsi.Init.TXEscapeCkdiv = 4;
 8003f12:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f16:	f003 0310 	and.w	r3, r3, #16
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003f1a:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f22:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	6333      	str	r3, [r6, #48]	; 0x30
 8003f2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f34:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f3a:	6333      	str	r3, [r6, #48]	; 0x30
 8003f3c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	9306      	str	r3, [sp, #24]
 8003f44:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f46:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f48:	f043 0308 	orr.w	r3, r3, #8
 8003f4c:	6333      	str	r3, [r6, #48]	; 0x30
 8003f4e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	9307      	str	r3, [sp, #28]
 8003f56:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f58:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6333      	str	r3, [r6, #48]	; 0x30
 8003f60:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	9308      	str	r3, [sp, #32]
 8003f68:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6333      	str	r3, [r6, #48]	; 0x30
 8003f72:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f7c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f7e:	f043 0320 	orr.w	r3, r3, #32
 8003f82:	6333      	str	r3, [r6, #48]	; 0x30
 8003f84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f94:	6333      	str	r3, [r6, #48]	; 0x30
 8003f96:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fa0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa6:	6333      	str	r3, [r6, #48]	; 0x30
 8003fa8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	930c      	str	r3, [sp, #48]	; 0x30
 8003fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6333      	str	r3, [r6, #48]	; 0x30
 8003fba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8003fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003fc4:	f005 face 	bl	8009564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	21c0      	movs	r1, #192	; 0xc0
 8003fcc:	4855      	ldr	r0, [pc, #340]	; (8004124 <main+0x360>)
 8003fce:	f005 fac9 	bl	8009564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	4854      	ldr	r0, [pc, #336]	; (8004128 <main+0x364>)
 8003fd8:	f005 fac4 	bl	8009564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2102      	movs	r1, #2
 8003fe0:	484f      	ldr	r0, [pc, #316]	; (8004120 <main+0x35c>)
 8003fe2:	f005 fabf 	bl	8009564 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003fe6:	a92e      	add	r1, sp, #184	; 0xb8
 8003fe8:	484d      	ldr	r0, [pc, #308]	; (8004120 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fea:	e9cd 752e 	strd	r7, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fee:	e9cd 5530 	strd	r5, r5, [sp, #192]	; 0xc0
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003ff2:	f005 f92b 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8003ff6:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff8:	a92e      	add	r1, sp, #184	; 0xb8
 8003ffa:	484a      	ldr	r0, [pc, #296]	; (8004124 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffc:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004000:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004004:	f005 f922 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8004008:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800400a:	a92e      	add	r1, sp, #184	; 0xb8
 800400c:	4846      	ldr	r0, [pc, #280]	; (8004128 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8004016:	f005 f919 	bl	800924c <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800401a:	a92e      	add	r1, sp, #184	; 0xb8
 800401c:	4840      	ldr	r0, [pc, #256]	; (8004120 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	e9cd 852e 	strd	r8, r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004022:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8004026:	f005 f911 	bl	800924c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800402a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800402c:	4622      	mov	r2, r4
 800402e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004034:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004036:	6333      	str	r3, [r6, #48]	; 0x30
 8004038:	6b33      	ldr	r3, [r6, #48]	; 0x30
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800403a:	2664      	movs	r6, #100	; 0x64
  __HAL_RCC_DMA2_CLK_ENABLE();
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	9303      	str	r3, [sp, #12]
 8004042:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004044:	f004 f97c 	bl	8008340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004048:	2038      	movs	r0, #56	; 0x38
 800404a:	f004 f9ab 	bl	80083a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800404e:	4622      	mov	r2, r4
 8004050:	2105      	movs	r1, #5
 8004052:	2039      	movs	r0, #57	; 0x39
 8004054:	f004 f974 	bl	8008340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004058:	2039      	movs	r0, #57	; 0x39
 800405a:	f004 f9a3 	bl	80083a4 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 800405e:	4639      	mov	r1, r7
 8004060:	4622      	mov	r2, r4
 8004062:	482f      	ldr	r0, [pc, #188]	; (8004120 <main+0x35c>)
 8004064:	f005 fa7e 	bl	8009564 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8004068:	2014      	movs	r0, #20
 800406a:	f003 fedb 	bl	8007e24 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800406e:	4639      	mov	r1, r7
 8004070:	462a      	mov	r2, r5
 8004072:	482b      	ldr	r0, [pc, #172]	; (8004120 <main+0x35c>)
 8004074:	f005 fa76 	bl	8009564 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004078:	200a      	movs	r0, #10
 800407a:	f003 fed3 	bl	8007e24 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	4621      	mov	r1, r4
 8004082:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 8004084:	9410      	str	r4, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8004086:	f021 fee9 	bl	8025e5c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800408a:	2218      	movs	r2, #24
 800408c:	4621      	mov	r1, r4
 800408e:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 8004090:	4f26      	ldr	r7, [pc, #152]	; (800412c <main+0x368>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8004092:	f021 fee3 	bl	8025e5c <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8004096:	2234      	movs	r2, #52	; 0x34
 8004098:	4621      	mov	r1, r4
 800409a:	a82e      	add	r0, sp, #184	; 0xb8
 800409c:	f021 fede 	bl	8025e5c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80040a0:	222c      	movs	r2, #44	; 0x2c
 80040a2:	4621      	mov	r1, r4
 80040a4:	a820      	add	r0, sp, #128	; 0x80
 80040a6:	f021 fed9 	bl	8025e5c <memset>
  hdsi.Instance = DSI;
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <main+0x36c>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80040ac:	a90e      	add	r1, sp, #56	; 0x38
 80040ae:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80040b0:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040b4:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80040b6:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040ba:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80040be:	f004 fd77 	bl	8008bb0 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80040c2:	a917      	add	r1, sp, #92	; 0x5c
 80040c4:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 80040c6:	941f      	str	r4, [sp, #124]	; 0x7c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80040c8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80040cc:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80040d0:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80040d4:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80040d8:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80040dc:	f004 ff94 	bl	8009008 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80040e0:	f04f 0c1c 	mov.w	ip, #28
 80040e4:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 80040e6:	f04f 0e0f 	mov.w	lr, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80040ea:	a911      	add	r1, sp, #68	; 0x44
 80040ec:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 80040ee:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 80040f2:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 80040f4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  PhyTimings.DataLaneLP2HSTime = 25;
 80040f8:	e9cd e313 	strd	lr, r3, [sp, #76]	; 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80040fc:	f004 ff47 	bl	8008f8e <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8004100:	4651      	mov	r1, sl
 8004102:	4638      	mov	r0, r7
 8004104:	f004 ff32 	bl	8008f6c <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8004108:	f242 7110 	movw	r1, #10000	; 0x2710
 800410c:	4638      	mov	r0, r7
 800410e:	e011      	b.n	8004134 <main+0x370>
 8004110:	03000012 	.word	0x03000012
 8004114:	01010001 	.word	0x01010001
 8004118:	e000ed00 	.word	0xe000ed00
 800411c:	40023800 	.word	0x40023800
 8004120:	40022400 	.word	0x40022400
 8004124:	40020800 	.word	0x40020800
 8004128:	40021400 	.word	0x40021400
 800412c:	2001210c 	.word	0x2001210c
 8004130:	40016c00 	.word	0x40016c00
 8004134:	f005 f873 	bl	800921e <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8004138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413c:	4638      	mov	r0, r7
 800413e:	f004 fcd4 	bl	8008aea <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8004142:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8004146:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800414a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800414e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8004152:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8004156:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800415a:	e9cd 932e 	strd	r9, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800415e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8004162:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8004166:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800416a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800416e:	e9cd 1332 	strd	r1, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004176:	a92e      	add	r1, sp, #184	; 0xb8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004178:	e9cd 0334 	strd	r0, r3, [sp, #208]	; 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800417c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004180:	4638      	mov	r0, r7
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8004182:	e9cd 6336 	strd	r6, r3, [sp, #216]	; 0xd8
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8004186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  hltdc.Instance = LTDC;
 800418a:	4ec9      	ldr	r6, [pc, #804]	; (80044b0 <main+0x6ec>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800418c:	e9cd c338 	strd	ip, r3, [sp, #224]	; 0xe0
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004190:	f004 feb8 	bl	8008f04 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8004194:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8004196:	a920      	add	r1, sp, #128	; 0x80
 8004198:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800419a:	952a      	str	r5, [sp, #168]	; 0xa8
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800419c:	e9cd 3922 	strd	r3, r9, [sp, #136]	; 0x88
  CmdCfg.ColorCoding = DSI_RGB565;
 80041a0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80041a4:	e9cd 4a24 	strd	r4, sl, [sp, #144]	; 0x90
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80041a8:	e9cd 8426 	strd	r8, r4, [sp, #152]	; 0x98
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80041ac:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80041b0:	f004 fe36 	bl	8008e20 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80041b4:	4621      	mov	r1, r4
 80041b6:	4638      	mov	r0, r7
 80041b8:	f004 fe21 	bl	8008dfe <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80041bc:	4621      	mov	r1, r4
 80041be:	2234      	movs	r2, #52	; 0x34
 80041c0:	a820      	add	r0, sp, #128	; 0x80
 80041c2:	f021 fe4b 	bl	8025e5c <memset>
  hltdc.Instance = LTDC;
 80041c6:	4abb      	ldr	r2, [pc, #748]	; (80044b4 <main+0x6f0>)
  hltdc.Init.AccumulatedActiveH = 482;
 80041c8:	f04f 0eca 	mov.w	lr, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 80041cc:	23cb      	movs	r3, #203	; 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041ce:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 80041d0:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 80041d2:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 80041d6:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80041da:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 80041de:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80041e2:	e9c6 e209 	strd	lr, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 80041e6:	f240 12e3 	movw	r2, #483	; 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80041ea:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 80041ee:	e9c6 320b 	strd	r3, r2, [r6, #44]	; 0x2c
  hltdc.Init.HorizontalSync = 1;
 80041f2:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 80041f6:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041fa:	f006 fe89 	bl	800af10 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80041fe:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004200:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 8004204:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 8004206:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowX0 = 0;
 800420a:	9420      	str	r4, [sp, #128]	; 0x80
  pLayerCfg.Backcolor.Blue = 0;
 800420c:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  pLayerCfg.ImageHeight = 480;
 8004210:	922b      	str	r2, [sp, #172]	; 0xac
  pLayerCfg.Backcolor.Red = 0;
 8004212:	f88d 40b2 	strb.w	r4, [sp, #178]	; 0xb2
  pLayerCfg.Alpha0 = 0;
 8004216:	e9cd 1425 	strd	r1, r4, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800421a:	2105      	movs	r1, #5
 800421c:	e9cd 0127 	strd	r0, r1, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8004220:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004224:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 8004226:	e9cd 1329 	strd	r1, r3, [sp, #164]	; 0xa4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800422a:	e9cd 2823 	strd	r2, r8, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800422e:	a920      	add	r1, sp, #128	; 0x80
 8004230:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 8004232:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004236:	f006 ff37 	bl	800b0a8 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 800423a:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 800423c:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 800423e:	6993      	ldr	r3, [r2, #24]
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8004246:	f004 ff45 	bl	80090d4 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 800424a:	4629      	mov	r1, r5
 800424c:	4640      	mov	r0, r8
 800424e:	f003 fb53 	bl	80078f8 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8004252:	2328      	movs	r3, #40	; 0x28
 8004254:	2215      	movs	r2, #21
 8004256:	4621      	mov	r1, r4
 8004258:	4638      	mov	r0, r7
 800425a:	9400      	str	r4, [sp, #0]
 800425c:	f004 ff6d 	bl	800913a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004260:	a92e      	add	r1, sp, #184	; 0xb8
 8004262:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8004264:	9438      	str	r4, [sp, #224]	; 0xe0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004266:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8004268:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800426c:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8004270:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8004274:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8004278:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800427c:	f004 fe42 	bl	8008f04 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8004280:	4622      	mov	r2, r4
 8004282:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004286:	4630      	mov	r0, r6
 8004288:	f006 ff3c 	bl	800b104 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 800428c:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800428e:	4e8a      	ldr	r6, [pc, #552]	; (80044b8 <main+0x6f4>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004290:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 8004294:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004296:	a92e      	add	r1, sp, #184	; 0xb8
 8004298:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 800429a:	432b      	orrs	r3, r5
 800429c:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800429e:	4b87      	ldr	r3, [pc, #540]	; (80044bc <main+0x6f8>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80042a0:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80042a2:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80042a6:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80042b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80042b4:	f44f 7740 	mov.w	r7, #768	; 0x300
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042b8:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80042bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c0:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80042c4:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80042c6:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 80042ca:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	; 0xbc
  SdramTiming.WriteRecoveryTime = 2;
 80042ce:	e9cd 3831 	strd	r3, r8, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 3;
 80042d2:	e9cd 8b33 	strd	r8, fp, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80042d6:	f007 ffaf 	bl	800c238 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042de:	a920      	add	r1, sp, #128	; 0x80
 80042e0:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 80042e2:	9411      	str	r4, [sp, #68]	; 0x44
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80042e4:	e9cd 5920 	strd	r5, r9, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = 0;
 80042e8:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042ec:	f007 ffc4 	bl	800c278 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80042f0:	4628      	mov	r0, r5
 80042f2:	f003 fd97 	bl	8007e24 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80042f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fa:	a920      	add	r1, sp, #128	; 0x80
 80042fc:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042fe:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = 0;
 8004302:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004306:	f007 ffb7 	bl	800c278 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 800430a:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800430c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004310:	a920      	add	r1, sp, #128	; 0x80
 8004312:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 8004314:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004318:	e9cd b920 	strd	fp, r9, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800431c:	f007 ffac 	bl	800c278 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8004320:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004328:	a920      	add	r1, sp, #128	; 0x80
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 800432a:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800432c:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 800432e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    Command->AutoRefreshNumber      = 1;
 8004330:	9522      	str	r5, [sp, #136]	; 0x88
    Command->ModeRegisterDefinition = tmpmrd;
 8004332:	9323      	str	r3, [sp, #140]	; 0x8c
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004334:	e9cd a920 	strd	sl, r9, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004338:	f007 ff9e 	bl	800c278 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800433c:	f240 712a 	movw	r1, #1834	; 0x72a
 8004340:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 8004342:	4e5f      	ldr	r6, [pc, #380]	; (80044c0 <main+0x6fc>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8004344:	f007 ffb7 	bl	800c2b6 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8004348:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800434c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004350:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8004352:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8004358:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 800435a:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800435e:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004360:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8004364:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8004368:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800436c:	f007 f816 	bl	800b39c <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004370:	9734      	str	r7, [sp, #208]	; 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004372:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	a92e      	add	r1, sp, #184	; 0xb8
 800437a:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 800437c:	972e      	str	r7, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_NONE;
 800437e:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004380:	9433      	str	r4, [sp, #204]	; 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004382:	943b      	str	r4, [sp, #236]	; 0xec
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004384:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004388:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800438c:	f007 f85a 	bl	800b444 <HAL_QSPI_Command>
 8004390:	2800      	cmp	r0, #0
 8004392:	f040 80ba 	bne.w	800450a <main+0x746>
  s_command.Instruction = RESET_MEMORY_CMD;
 8004396:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	a92e      	add	r1, sp, #184	; 0xb8
 800439e:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80043a0:	942e      	str	r4, [sp, #184]	; 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043a2:	f007 f84f 	bl	800b444 <HAL_QSPI_Command>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f040 80af 	bne.w	800450a <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043ac:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	a92e      	add	r1, sp, #184	; 0xb8
 80043b6:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043b8:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 80043ba:	972e      	str	r7, [sp, #184]	; 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043bc:	f007 f842 	bl	800b444 <HAL_QSPI_Command>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f040 80a2 	bne.w	800450a <main+0x746>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	a92e      	add	r1, sp, #184	; 0xb8
 80043cc:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80043ce:	942e      	str	r4, [sp, #184]	; 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043d0:	f007 f838 	bl	800b444 <HAL_QSPI_Command>
 80043d4:	4604      	mov	r4, r0
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f040 8097 	bne.w	800450a <main+0x746>
  HAL_Delay( 1000 );
 80043dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e0:	f003 fd20 	bl	8007e24 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043e8:	aa20      	add	r2, sp, #128	; 0x80
 80043ea:	a92e      	add	r1, sp, #184	; 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043ec:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80043ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043f2:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80043f4:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80043f8:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80043fa:	2305      	movs	r3, #5
 80043fc:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80043fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004402:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004404:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 8004408:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  s_config.StatusBytesSize = 1;
 800440c:	e9cd 5423 	strd	r5, r4, [sp, #140]	; 0x8c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004410:	f007 f913 	bl	800b63a <HAL_QSPI_AutoPolling>
 8004414:	2800      	cmp	r0, #0
 8004416:	d178      	bne.n	800450a <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004418:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 800441c:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004424:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004426:	2305      	movs	r3, #5
 8004428:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800442a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800442e:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004432:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004436:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800443a:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800443c:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800443e:	f007 f801 	bl	800b444 <HAL_QSPI_Command>
 8004442:	2800      	cmp	r0, #0
 8004444:	d161      	bne.n	800450a <main+0x746>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	a917      	add	r1, sp, #92	; 0x5c
 800444c:	4630      	mov	r0, r6
 800444e:	f007 f895 	bl	800b57c <HAL_QSPI_Receive>
 8004452:	2800      	cmp	r0, #0
 8004454:	d159      	bne.n	800450a <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004456:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 800445a:	9037      	str	r0, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 800445c:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004462:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004464:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004466:	903b      	str	r0, [sp, #236]	; 0xec
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004468:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800446a:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800446c:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004470:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004474:	4630      	mov	r0, r6
 8004476:	f006 ffe5 	bl	800b444 <HAL_QSPI_Command>
 800447a:	2800      	cmp	r0, #0
 800447c:	d145      	bne.n	800450a <main+0x746>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800447e:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8004480:	462c      	mov	r4, r5
 8004482:	9523      	str	r5, [sp, #140]	; 0x8c
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004484:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004488:	9324      	str	r3, [sp, #144]	; 0x90
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800448a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800448e:	aa20      	add	r2, sp, #128	; 0x80
 8004490:	a92e      	add	r1, sp, #184	; 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004492:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004494:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004496:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8004498:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800449c:	932e      	str	r3, [sp, #184]	; 0xb8
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800449e:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80044a2:	9537      	str	r5, [sp, #220]	; 0xdc
  s_config.Mask            = MX25L512_SR_WREN;
 80044a4:	e9cd 8820 	strd	r8, r8, [sp, #128]	; 0x80
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044a8:	f007 f8c7 	bl	800b63a <HAL_QSPI_AutoPolling>
 80044ac:	bb68      	cbnz	r0, 800450a <main+0x746>
 80044ae:	e009      	b.n	80044c4 <main+0x700>
 80044b0:	20012228 	.word	0x20012228
 80044b4:	40016800 	.word	0x40016800
 80044b8:	2001231c 	.word	0x2001231c
 80044bc:	a0000140 	.word	0xa0000140
 80044c0:	200122d0 	.word	0x200122d0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 80044c8:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044d0:	9334      	str	r3, [sp, #208]	; 0xd0
  reg |= MX25L512_SR_QUADEN;
 80044d2:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80044d6:	942e      	str	r4, [sp, #184]	; 0xb8
  reg |= MX25L512_SR_QUADEN;
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80044dc:	9537      	str	r5, [sp, #220]	; 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044de:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80044e2:	e9cd 4038 	strd	r4, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044e6:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ea:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 80044ec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f0:	f006 ffa8 	bl	800b444 <HAL_QSPI_Command>
 80044f4:	b948      	cbnz	r0, 800450a <main+0x746>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	a917      	add	r1, sp, #92	; 0x5c
 80044fc:	4630      	mov	r0, r6
 80044fe:	f006 ffe4 	bl	800b4ca <HAL_QSPI_Transmit>
 8004502:	b910      	cbnz	r0, 800450a <main+0x746>
  HAL_Delay( 40 );
 8004504:	2028      	movs	r0, #40	; 0x28
 8004506:	f003 fc8d 	bl	8007e24 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800450a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	a92e      	add	r1, sp, #184	; 0xb8
 8004514:	48b6      	ldr	r0, [pc, #728]	; (80047f0 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004516:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = ENTER_QUAD_CMD;
 8004518:	2335      	movs	r3, #53	; 0x35
 800451a:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800451c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800451e:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  s_command.DataMode          = QSPI_DATA_NONE;
 8004522:	9337      	str	r3, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004524:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004526:	933b      	str	r3, [sp, #236]	; 0xec
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004528:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800452c:	f006 ff8a 	bl	800b444 <HAL_QSPI_Command>
 8004530:	b9d0      	cbnz	r0, 8004568 <main+0x7a4>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8004532:	2140      	movs	r1, #64	; 0x40
 8004534:	2341      	movs	r3, #65	; 0x41
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004536:	9024      	str	r0, [sp, #144]	; 0x90
  s_config.Interval        = 0x10;
 8004538:	2001      	movs	r0, #1
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800453a:	aa20      	add	r2, sp, #128	; 0x80
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800453c:	e9cd 1320 	strd	r1, r3, [sp, #128]	; 0x80
  s_config.Interval        = 0x10;
 8004540:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004542:	a92e      	add	r1, sp, #184	; 0xb8
  s_config.Interval        = 0x10;
 8004544:	e9cd 3022 	strd	r3, r0, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800454c:	48a8      	ldr	r0, [pc, #672]	; (80047f0 <main+0xa2c>)
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800454e:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004550:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004554:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004556:	2305      	movs	r3, #5
 8004558:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800455a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800455e:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004560:	f241 3388 	movw	r3, #5000	; 0x1388
 8004564:	f007 f869 	bl	800b63a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8004568:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800456a:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 800456e:	9320      	str	r3, [sp, #128]	; 0x80
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004570:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004572:	9426      	str	r4, [sp, #152]	; 0x98
  s_command.DataMode          = QSPI_DATA_NONE;
 8004574:	9329      	str	r3, [sp, #164]	; 0xa4
  s_command.DummyCycles       = 0;
 8004576:	9325      	str	r3, [sp, #148]	; 0x94
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004578:	932d      	str	r3, [sp, #180]	; 0xb4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800457a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800457e:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004582:	f7ff fb77 	bl	8003c74 <QSPI_WriteEnable.constprop.0>
 8004586:	bb18      	cbnz	r0, 80045d0 <main+0x80c>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	a920      	add	r1, sp, #128	; 0x80
 800458e:	4898      	ldr	r0, [pc, #608]	; (80047f0 <main+0xa2c>)
 8004590:	f006 ff58 	bl	800b444 <HAL_QSPI_Command>
 8004594:	b9e0      	cbnz	r0, 80045d0 <main+0x80c>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004596:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8004598:	9033      	str	r0, [sp, #204]	; 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800459a:	903b      	str	r0, [sp, #236]	; 0xec
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800459c:	aa17      	add	r2, sp, #92	; 0x5c
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800459e:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045a0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 80045a4:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045a6:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045a8:	9337      	str	r3, [sp, #220]	; 0xdc
  s_config.Mask            = MX25L512_SR_WIP;
 80045aa:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045ac:	9434      	str	r4, [sp, #208]	; 0xd0
  s_config.Mask            = MX25L512_SR_WIP;
 80045ae:	9318      	str	r3, [sp, #96]	; 0x60
  s_config.StatusBytesSize = 1;
 80045b0:	e9cd 301a 	strd	r3, r0, [sp, #104]	; 0x68
  s_config.Interval        = 0x10;
 80045b4:	2310      	movs	r3, #16
 80045b6:	9319      	str	r3, [sp, #100]	; 0x64
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045bc:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045c0:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045c4:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80045c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045ca:	4889      	ldr	r0, [pc, #548]	; (80047f0 <main+0xa2c>)
 80045cc:	f007 f835 	bl	800b63a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045d0:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045d2:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045d6:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 80045da:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045dc:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045de:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	a92e      	add	r1, sp, #184	; 0xb8
 80045e6:	4882      	ldr	r0, [pc, #520]	; (80047f0 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045e8:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045ea:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 80045ec:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045ee:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80045f2:	e9cd 5338 	strd	r5, r3, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045f6:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045fa:	f006 ff23 	bl	800b444 <HAL_QSPI_Command>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d14f      	bne.n	80046a2 <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	a920      	add	r1, sp, #128	; 0x80
 8004608:	4879      	ldr	r0, [pc, #484]	; (80047f0 <main+0xa2c>)
 800460a:	f006 ffb7 	bl	800b57c <HAL_QSPI_Receive>
 800460e:	2800      	cmp	r0, #0
 8004610:	d147      	bne.n	80046a2 <main+0x8de>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8004612:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8004614:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800461c:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 800461e:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004620:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004622:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004626:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800462a:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800462e:	4870      	ldr	r0, [pc, #448]	; (80047f0 <main+0xa2c>)
 8004630:	f006 ff08 	bl	800b444 <HAL_QSPI_Command>
 8004634:	bba8      	cbnz	r0, 80046a2 <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	f10d 0181 	add.w	r1, sp, #129	; 0x81
 800463e:	486c      	ldr	r0, [pc, #432]	; (80047f0 <main+0xa2c>)
 8004640:	f006 ff9c 	bl	800b57c <HAL_QSPI_Receive>
 8004644:	bb68      	cbnz	r0, 80046a2 <main+0x8de>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004646:	f7ff fb15 	bl	8003c74 <QSPI_WriteEnable.constprop.0>
 800464a:	bb50      	cbnz	r0, 80046a2 <main+0x8de>
  s_command.NbData            = 2;
 800464c:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004650:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8004652:	952e      	str	r5, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004654:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004656:	9033      	str	r0, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004658:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800465c:	e9cd 3038 	strd	r3, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004660:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
 8004664:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004668:	2103      	movs	r1, #3
 800466a:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
 800466e:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004672:	485f      	ldr	r0, [pc, #380]	; (80047f0 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004678:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800467c:	a92e      	add	r1, sp, #184	; 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800467e:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004684:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004688:	f006 fedc 	bl	800b444 <HAL_QSPI_Command>
 800468c:	b948      	cbnz	r0, 80046a2 <main+0x8de>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	a920      	add	r1, sp, #128	; 0x80
 8004694:	4856      	ldr	r0, [pc, #344]	; (80047f0 <main+0xa2c>)
 8004696:	f006 ff18 	bl	800b4ca <HAL_QSPI_Transmit>
 800469a:	b910      	cbnz	r0, 80046a2 <main+0x8de>
  HAL_Delay( 40 );
 800469c:	2028      	movs	r0, #40	; 0x28
 800469e:	f003 fbc1 	bl	8007e24 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80046a2:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046a4:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046a8:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 80046ac:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80046ae:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80046b0:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	a92e      	add	r1, sp, #184	; 0xb8
 80046b8:	484d      	ldr	r0, [pc, #308]	; (80047f0 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046ba:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046bc:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 80046be:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046c0:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046c4:	e9cd 5338 	strd	r5, r3, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046c8:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046cc:	f006 feba 	bl	800b444 <HAL_QSPI_Command>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d14b      	bne.n	800476c <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	a920      	add	r1, sp, #128	; 0x80
 80046da:	4845      	ldr	r0, [pc, #276]	; (80047f0 <main+0xa2c>)
 80046dc:	f006 ff4e 	bl	800b57c <HAL_QSPI_Receive>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d143      	bne.n	800476c <main+0x9a8>
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046e4:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 80046e6:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	a92e      	add	r1, sp, #184	; 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046ee:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046f0:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046f2:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046f4:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046f8:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046fc:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004700:	483b      	ldr	r0, [pc, #236]	; (80047f0 <main+0xa2c>)
 8004702:	f006 fe9f 	bl	800b444 <HAL_QSPI_Command>
 8004706:	bb88      	cbnz	r0, 800476c <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	f10d 0181 	add.w	r1, sp, #129	; 0x81
 8004710:	4837      	ldr	r0, [pc, #220]	; (80047f0 <main+0xa2c>)
 8004712:	f006 ff33 	bl	800b57c <HAL_QSPI_Receive>
 8004716:	bb48      	cbnz	r0, 800476c <main+0x9a8>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004718:	f7ff faac 	bl	8003c74 <QSPI_WriteEnable.constprop.0>
 800471c:	bb30      	cbnz	r0, 800476c <main+0x9a8>
  s_command.NbData            = 2;
 800471e:	2302      	movs	r3, #2
 8004720:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004722:	9634      	str	r6, [sp, #208]	; 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8004724:	952e      	str	r5, [sp, #184]	; 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004726:	9437      	str	r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = 0;
 8004728:	9033      	str	r0, [sp, #204]	; 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800472a:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800472e:	e9cd 3038 	strd	r3, r0, [sp, #224]	; 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004732:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
 8004736:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800473a:	2106      	movs	r1, #6
 800473c:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
 8004740:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004744:	482a      	ldr	r0, [pc, #168]	; (80047f0 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800474e:	a92e      	add	r1, sp, #184	; 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004750:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8004756:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800475a:	f006 fe73 	bl	800b444 <HAL_QSPI_Command>
 800475e:	b928      	cbnz	r0, 800476c <main+0x9a8>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	a920      	add	r1, sp, #128	; 0x80
 8004766:	4822      	ldr	r0, [pc, #136]	; (80047f0 <main+0xa2c>)
 8004768:	f006 feaf 	bl	800b4ca <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800476c:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004770:	2400      	movs	r4, #0
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004772:	aa20      	add	r2, sp, #128	; 0x80
  hdma2d.Instance = DMA2D;
 8004774:	4d1f      	ldr	r5, [pc, #124]	; (80047f4 <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004776:	9334      	str	r3, [sp, #208]	; 0xd0
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004778:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800477a:	a92e      	add	r1, sp, #184	; 0xb8
 800477c:	481c      	ldr	r0, [pc, #112]	; (80047f0 <main+0xa2c>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 800477e:	932e      	str	r3, [sp, #184]	; 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004780:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004784:	943b      	str	r4, [sp, #236]	; 0xec
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004786:	2601      	movs	r6, #1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004788:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800478a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800478e:	4f1a      	ldr	r7, [pc, #104]	; (80047f8 <main+0xa34>)
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004790:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004792:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004796:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800480c <main+0xa48>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800479a:	e9cd 4336 	strd	r4, r3, [sp, #216]	; 0xd8
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800479e:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047a0:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80047a4:	9333      	str	r3, [sp, #204]	; 0xcc
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80047a6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80047aa:	f006 ff96 	bl	800b6da <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <main+0xa38>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80047b0:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80047b2:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80047b6:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80047ba:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 80047be:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80047c2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80047c6:	f004 f85d 	bl	8008884 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80047ca:	2101      	movs	r1, #1
 80047cc:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80047ce:	4d0c      	ldr	r5, [pc, #48]	; (8004800 <main+0xa3c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80047d0:	f004 f91a 	bl	8008a08 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 80047d4:	f7ff fad4 	bl	8003d80 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 80047d8:	f7fb ff7d 	bl	80006d6 <MX_LIBJPEG_Init>
  hcrc.Instance = CRC;
 80047dc:	4809      	ldr	r0, [pc, #36]	; (8004804 <main+0xa40>)
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <main+0xa44>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80047e0:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80047e2:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80047e4:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80047e6:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80047ea:	f003 fe47 	bl	800847c <HAL_CRC_Init>
 80047ee:	e00f      	b.n	8004810 <main+0xa4c>
 80047f0:	200122d0 	.word	0x200122d0
 80047f4:	20011ff4 	.word	0x20011ff4
 80047f8:	40012000 	.word	0x40012000
 80047fc:	4002b000 	.word	0x4002b000
 8004800:	20011f88 	.word	0x20011f88
 8004804:	20011fd0 	.word	0x20011fd0
 8004808:	40023000 	.word	0x40023000
 800480c:	40005400 	.word	0x40005400
  hjpeg.Instance = JPEG;
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <main+0xbe8>)
 8004812:	4867      	ldr	r0, [pc, #412]	; (80049b0 <main+0xbec>)
 8004814:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8004816:	f005 fd47 	bl	800a2a8 <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800481a:	2210      	movs	r2, #16
 800481c:	4621      	mov	r1, r4
 800481e:	a82e      	add	r0, sp, #184	; 0xb8
 8004820:	f021 fb1c 	bl	8025e5c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004828:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800482a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800482c:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800482e:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004830:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004834:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004836:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004838:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800483c:	616e      	str	r6, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800483e:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8004846:	e9c5 430a 	strd	r4, r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800484a:	f003 fafd 	bl	8007e48 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 800484e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004850:	a92e      	add	r1, sp, #184	; 0xb8
 8004852:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004854:	9430      	str	r4, [sp, #192]	; 0xc0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004856:	e9cd 362e 	strd	r3, r6, [sp, #184]	; 0xb8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800485a:	f003 fcaf 	bl	80081bc <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_IT(&hadc1);
 800485e:	4628      	mov	r0, r5
 8004860:	f003 fb98 	bl	8007f94 <HAL_ADC_Start_IT>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004864:	221c      	movs	r2, #28
 8004866:	4621      	mov	r1, r4
 8004868:	a820      	add	r0, sp, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486a:	9419      	str	r4, [sp, #100]	; 0x64
  htim1.Instance = TIM1;
 800486c:	4d51      	ldr	r5, [pc, #324]	; (80049b4 <main+0xbf0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004872:	f021 faf3 	bl	8025e5c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004876:	222c      	movs	r2, #44	; 0x2c
 8004878:	4621      	mov	r1, r4
 800487a:	a82e      	add	r0, sp, #184	; 0xb8
 800487c:	f021 faee 	bl	8025e5c <memset>
  htim1.Init.Prescaler = 100-1;
 8004880:	f8df c178 	ldr.w	ip, [pc, #376]	; 80049fc <main+0xc38>
 8004884:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004886:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004888:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 100-1;
 800488a:	e9c5 c300 	strd	ip, r3, [r5]
  htim1.Init.Period = 16000-1;
 800488e:	f643 637f 	movw	r3, #15999	; 0x3e7f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004892:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004896:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800489a:	f007 ff93 	bl	800c7c4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800489e:	a917      	add	r1, sp, #92	; 0x5c
 80048a0:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048a2:	9419      	str	r4, [sp, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048a4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048a8:	f008 f90c 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 16000/2;
 80048ac:	f04f 0e60 	mov.w	lr, #96	; 0x60
 80048b0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048b4:	4622      	mov	r2, r4
 80048b6:	a920      	add	r1, sp, #128	; 0x80
 80048b8:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048ba:	9426      	str	r4, [sp, #152]	; 0x98
  sConfigOC.Pulse = 16000/2;
 80048bc:	e9cd e320 	strd	lr, r3, [sp, #128]	; 0x80
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048c0:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048c4:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048c8:	f007 ffe4 	bl	800c894 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048d0:	a92e      	add	r1, sp, #184	; 0xb8
 80048d2:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048d4:	9432      	str	r4, [sp, #200]	; 0xc8
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048d6:	9435      	str	r4, [sp, #212]	; 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048d8:	9438      	str	r4, [sp, #224]	; 0xe0
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048da:	e9cd 3433 	strd	r3, r4, [sp, #204]	; 0xcc
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048e2:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048e6:	e9cd 3436 	strd	r3, r4, [sp, #216]	; 0xd8
  sBreakDeadTimeConfig.DeadTime = 0;
 80048ea:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048ee:	f008 f933 	bl	800cb58 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f008 f8e3 	bl	800cac0 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim1);
 80048fa:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 80048fc:	4d2e      	ldr	r5, [pc, #184]	; (80049b8 <main+0xbf4>)
  HAL_TIM_MspPostInit(&htim1);
 80048fe:	f000 fb71 	bl	8004fe4 <HAL_TIM_MspPostInit>
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004902:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <main+0xbf8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004904:	4628      	mov	r0, r5
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004906:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004908:	e9c5 8300 	strd	r8, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800490c:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8004910:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004914:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004918:	f004 ff93 	bl	8009842 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f005 fae7 	bl	8009ef2 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004924:	4621      	mov	r1, r4
 8004926:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 8004928:	4d25      	ldr	r5, [pc, #148]	; (80049c0 <main+0xbfc>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800492a:	f005 fb08 	bl	8009f3e <HAL_I2CEx_ConfigDigitalFilter>
  MX_TouchGFX_Init();
 800492e:	f7fb fed4 	bl	80006da <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8004932:	f7fb fed1 	bl	80006d8 <MX_TouchGFX_PreOSInit>
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8004936:	2376      	movs	r3, #118	; 0x76
    rslt = bme680_init(&gas_sensor);
 8004938:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 800493a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 800493e:	706b      	strb	r3, [r5, #1]
    gas_sensor.read = user_i2c_read;
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <main+0xc00>)
    gas_sensor.intf = BME680_I2C_INTF;
 8004942:	70ae      	strb	r6, [r5, #2]
    gas_sensor.read = user_i2c_read;
 8004944:	64ab      	str	r3, [r5, #72]	; 0x48
    gas_sensor.write = user_i2c_write;
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <main+0xc04>)
 8004948:	64eb      	str	r3, [r5, #76]	; 0x4c
    gas_sensor.delay_ms = user_delay_ms;
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <main+0xc08>)
 800494c:	652b      	str	r3, [r5, #80]	; 0x50
    gas_sensor.amb_temp = 25;
 800494e:	2319      	movs	r3, #25
 8004950:	712b      	strb	r3, [r5, #4]
    rslt = bme680_init(&gas_sensor);
 8004952:	f7fe fccd 	bl	80032f0 <bme680_init>
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <main+0xc0c>)
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 8004958:	4629      	mov	r1, r5
 800495a:	20df      	movs	r0, #223	; 0xdf
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 800495c:	f885 603e 	strb.w	r6, [r5, #62]	; 0x3e
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8004960:	63ab      	str	r3, [r5, #56]	; 0x38
    gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <main+0xc10>)
 8004964:	642b      	str	r3, [r5, #64]	; 0x40
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 8004966:	f7fe fdc0 	bl	80034ea <bme680_set_sensor_settings>
    rslt = bme680_set_sensor_mode(&gas_sensor);
 800496a:	4628      	mov	r0, r5
 800496c:	f7fe fd7e 	bl	800346c <bme680_set_sensor_mode>
    bme680_get_profile_dur(&meas_period, &gas_sensor);
 8004970:	4629      	mov	r1, r5
 8004972:	a82e      	add	r0, sp, #184	; 0xb8
 8004974:	f7fe ff30 	bl	80037d8 <bme680_get_profile_dur>
  osKernelInitialize();
 8004978:	f008 f9c0 	bl	800ccfc <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <main+0xc14>)
 800497e:	4621      	mov	r1, r4
 8004980:	4816      	ldr	r0, [pc, #88]	; (80049dc <main+0xc18>)
 8004982:	f008 f9f5 	bl	800cd70 <osThreadNew>
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <main+0xc1c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <main+0xc20>)
 800498a:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800498c:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800498e:	4816      	ldr	r0, [pc, #88]	; (80049e8 <main+0xc24>)
 8004990:	f008 f9ee 	bl	800cd70 <osThreadNew>
 8004994:	4b15      	ldr	r3, [pc, #84]	; (80049ec <main+0xc28>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8004996:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <main+0xc2c>)
 8004998:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800499a:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800499c:	4815      	ldr	r0, [pc, #84]	; (80049f4 <main+0xc30>)
 800499e:	f008 f9e7 	bl	800cd70 <osThreadNew>
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <main+0xc34>)
 80049a4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80049a6:	f008 f9c3 	bl	800cd30 <osKernelStart>
  while (1)
 80049aa:	e7fe      	b.n	80049aa <main+0xbe6>
 80049ac:	50051000 	.word	0x50051000
 80049b0:	200121d0 	.word	0x200121d0
 80049b4:	20012350 	.word	0x20012350
 80049b8:	20012128 	.word	0x20012128
 80049bc:	00c0eaff 	.word	0x00c0eaff
 80049c0:	20011f30 	.word	0x20011f30
 80049c4:	08003bd5 	.word	0x08003bd5
 80049c8:	08003c21 	.word	0x08003c21
 80049cc:	08003c1d 	.word	0x08003c1d
 80049d0:	02030402 	.word	0x02030402
 80049d4:	00960140 	.word	0x00960140
 80049d8:	08028d18 	.word	0x08028d18
 80049dc:	08003bd1 	.word	0x08003bd1
 80049e0:	20011f28 	.word	0x20011f28
 80049e4:	08028cf4 	.word	0x08028cf4
 80049e8:	080006e9 	.word	0x080006e9
 80049ec:	20011f10 	.word	0x20011f10
 80049f0:	08028d3c 	.word	0x08028d3c
 80049f4:	080027a9 	.word	0x080027a9
 80049f8:	200123b0 	.word	0x200123b0
 80049fc:	40010000 	.word	0x40010000

08004a00 <HAL_ADC_ConvCpltCallback>:
{
 8004a00:	b508      	push	{r3, lr}
   uhADCxConvertedData = HAL_ADC_GetValue(hadc);
 8004a02:	f003 fb47 	bl	8008094 <HAL_ADC_GetValue>
 8004a06:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <HAL_ADC_ConvCpltCallback+0x10>)
 8004a08:	b280      	uxth	r0, r0
 8004a0a:	8018      	strh	r0, [r3, #0]
}
 8004a0c:	bd08      	pop	{r3, pc}
 8004a0e:	bf00      	nop
 8004a10:	200123ac 	.word	0x200123ac

08004a14 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a14:	6802      	ldr	r2, [r0, #0]
 8004a16:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004a1c:	f003 b9f0 	b.w	8007e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40001000 	.word	0x40001000

08004a28 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_MspInit+0x38>)
{
 8004a2e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a30:	210f      	movs	r1, #15
 8004a32:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a40:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004a44:	9200      	str	r2, [sp, #0]
 8004a46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a50:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a5c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a5e:	f003 bc6f 	b.w	8008340 <HAL_NVIC_SetPriority>
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800

08004a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6e:	2214      	movs	r2, #20
 8004a70:	2100      	movs	r1, #0
 8004a72:	a803      	add	r0, sp, #12
 8004a74:	f021 f9f2 	bl	8025e5c <memset>
  if(hadc->Instance==ADC1)
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_ADC_MspInit+0x64>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d123      	bne.n	8004ac8 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a80:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a84:	a903      	add	r1, sp, #12
 8004a86:	4812      	ldr	r0, [pc, #72]	; (8004ad0 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8004a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004a96:	9201      	str	r2, [sp, #4]
 8004a98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aa2:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	9302      	str	r3, [sp, #8]
 8004aac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab4:	f004 fbca 	bl	800924c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004ab8:	2012      	movs	r0, #18
 8004aba:	2200      	movs	r2, #0
 8004abc:	2105      	movs	r1, #5
 8004abe:	f003 fc3f 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004ac2:	2012      	movs	r0, #18
 8004ac4:	f003 fc6e 	bl	80083a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ac8:	b008      	add	sp, #32
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	40012000 	.word	0x40012000
 8004ad0:	40020000 	.word	0x40020000

08004ad4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004ad4:	6802      	ldr	r2, [r0, #0]
{
 8004ad6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_CRC_MspInit+0x28>)
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d10b      	bne.n	8004af6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004ade:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004af6:	b002      	add	sp, #8
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40023000 	.word	0x40023000

08004b00 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_DMA2D_MspInit+0x3c>)
{
 8004b02:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8004b04:	6802      	ldr	r2, [r0, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d115      	bne.n	8004b36 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b0a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b0e:	2105      	movs	r1, #5
 8004b10:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b1a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b26:	f003 fc0b 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b2a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004b2c:	b003      	add	sp, #12
 8004b2e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b32:	f003 bc37 	b.w	80083a4 <HAL_NVIC_EnableIRQ>
}
 8004b36:	b003      	add	sp, #12
 8004b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b3c:	4002b000 	.word	0x4002b000

08004b40 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8004b40:	b510      	push	{r4, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b46:	2214      	movs	r2, #20
 8004b48:	2100      	movs	r1, #0
 8004b4a:	a803      	add	r0, sp, #12
 8004b4c:	f021 f986 	bl	8025e5c <memset>
  if(hdsi->Instance==DSI)
 8004b50:	6822      	ldr	r2, [r4, #0]
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <HAL_DSI_MspInit+0x68>)
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d125      	bne.n	8004ba4 <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8004b58:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004b5c:	a903      	add	r1, sp, #12
 8004b5e:	4813      	ldr	r0, [pc, #76]	; (8004bac <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b62:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
 8004b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b6e:	9201      	str	r2, [sp, #4]
 8004b70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8004b8c:	230d      	movs	r3, #13
 8004b8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004b90:	f004 fb5c 	bl	800924c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8004b94:	2062      	movs	r0, #98	; 0x62
 8004b96:	2200      	movs	r2, #0
 8004b98:	2105      	movs	r1, #5
 8004b9a:	f003 fbd1 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004b9e:	2062      	movs	r0, #98	; 0x62
 8004ba0:	f003 fc00 	bl	80083a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8004ba4:	b008      	add	sp, #32
 8004ba6:	bd10      	pop	{r4, pc}
 8004ba8:	40016c00 	.word	0x40016c00
 8004bac:	40022400 	.word	0x40022400

08004bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb2:	2214      	movs	r2, #20
{
 8004bb4:	b0af      	sub	sp, #188	; 0xbc
 8004bb6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	2100      	movs	r1, #0
 8004bba:	eb0d 0002 	add.w	r0, sp, r2
 8004bbe:	f021 f94d 	bl	8025e5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bc2:	2290      	movs	r2, #144	; 0x90
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	a80a      	add	r0, sp, #40	; 0x28
 8004bc8:	f021 f948 	bl	8025e5c <memset>
  if(hi2c->Instance==I2C1)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <HAL_I2C_MspInit+0x114>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d12c      	bne.n	8004c2e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bd8:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bda:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bdc:	f007 f880 	bl	800bce0 <HAL_RCCEx_PeriphCLKConfig>
 8004be0:	b108      	cbz	r0, 8004be6 <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 8004be2:	f7ff ff21 	bl	8004a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be6:	4c38      	ldr	r4, [pc, #224]	; (8004cc8 <HAL_I2C_MspInit+0x118>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004be8:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bec:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bee:	4837      	ldr	r0, [pc, #220]	; (8004ccc <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c02:	2312      	movs	r3, #18
 8004c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c0e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c10:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c12:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c14:	f004 fb1a 	bl	800924c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c1e:	6423      	str	r3, [r4, #64]	; 0x40
 8004c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004c2a:	b02f      	add	sp, #188	; 0xbc
 8004c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C4)
 8004c2e:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <HAL_I2C_MspInit+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d1fa      	bne.n	8004c2a <HAL_I2C_MspInit+0x7a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c38:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004c3a:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c3c:	f007 f850 	bl	800bce0 <HAL_RCCEx_PeriphCLKConfig>
 8004c40:	b108      	cbz	r0, 8004c46 <HAL_I2C_MspInit+0x96>
      Error_Handler();
 8004c42:	f7ff fef1 	bl	8004a28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c46:	4c20      	ldr	r4, [pc, #128]	; (8004cc8 <HAL_I2C_MspInit+0x118>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c48:	2712      	movs	r7, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2601      	movs	r6, #1
 8004c4c:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c50:	a905      	add	r1, sp, #20
 8004c52:	481e      	ldr	r0, [pc, #120]	; (8004ccc <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	6323      	str	r3, [r4, #48]	; 0x30
 8004c5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	9302      	str	r3, [sp, #8]
 8004c62:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c66:	f043 0308 	orr.w	r3, r3, #8
 8004c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004c7c:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004c82:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c84:	f004 fae2 	bl	800924c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c8c:	a905      	add	r1, sp, #20
 8004c8e:	4811      	ldr	r0, [pc, #68]	; (8004cd4 <HAL_I2C_MspInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c90:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004c94:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c96:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c9c:	f004 fad6 	bl	800924c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2105      	movs	r1, #5
 8004ca6:	205f      	movs	r0, #95	; 0x5f
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cac:	6423      	str	r3, [r4, #64]	; 0x40
 8004cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004cb8:	f003 fb42 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8004cbc:	205f      	movs	r0, #95	; 0x5f
 8004cbe:	f003 fb71 	bl	80083a4 <HAL_NVIC_EnableIRQ>
}
 8004cc2:	e7b2      	b.n	8004c2a <HAL_I2C_MspInit+0x7a>
 8004cc4:	40005400 	.word	0x40005400
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40020400 	.word	0x40020400
 8004cd0:	40006000 	.word	0x40006000
 8004cd4:	40020c00 	.word	0x40020c00

08004cd8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <HAL_I2C_MspDeInit+0x60>)
{
 8004cda:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8004cdc:	6803      	ldr	r3, [r0, #0]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004ce2:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cea:	4814      	ldr	r0, [pc, #80]	; (8004d3c <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004cf4:	f004 fb8e 	bl	8009414 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cfc:	480f      	ldr	r0, [pc, #60]	; (8004d3c <HAL_I2C_MspDeInit+0x64>)
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8004cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004d02:	f004 bb87 	b.w	8009414 <HAL_GPIO_DeInit>
  else if(hi2c->Instance==I2C4)
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <HAL_I2C_MspDeInit+0x68>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d113      	bne.n	8004d34 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d0c:	f502 32ec 	add.w	r2, r2, #120832	; 0x1d800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	480a      	ldr	r0, [pc, #40]	; (8004d3c <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d1c:	f004 fb7a 	bl	8009414 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004d20:	4808      	ldr	r0, [pc, #32]	; (8004d44 <HAL_I2C_MspDeInit+0x6c>)
 8004d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d26:	f004 fb75 	bl	8009414 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004d2a:	205f      	movs	r0, #95	; 0x5f
}
 8004d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004d30:	f003 bb46 	b.w	80083c0 <HAL_NVIC_DisableIRQ>
}
 8004d34:	bd08      	pop	{r3, pc}
 8004d36:	bf00      	nop
 8004d38:	40005400 	.word	0x40005400
 8004d3c:	40020400 	.word	0x40020400
 8004d40:	40006000 	.word	0x40006000
 8004d44:	40020c00 	.word	0x40020c00

08004d48 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8004d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8004d4a:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <HAL_JPEG_MspInit+0xd8>)
{
 8004d4c:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8004d4e:	6802      	ldr	r2, [r0, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d162      	bne.n	8004e1a <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8004d5a:	4c33      	ldr	r4, [pc, #204]	; (8004e28 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d5c:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004d60:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004d64:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8004e34 <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d68:	f042 0202 	orr.w	r2, r2, #2
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6e:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004d7a:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8004d7e:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8004d8c:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d8e:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8004d96:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004da4:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004da6:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004daa:	f003 fbdb 	bl	8008564 <HAL_DMA_Init>
 8004dae:	b108      	cbz	r0, 8004db4 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8004db0:	f7ff fe3a 	bl	8004a28 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004db4:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004db6:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004dc0:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004dc2:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8004dc4:	4c1a      	ldr	r4, [pc, #104]	; (8004e30 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004dca:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd2:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dd4:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004dd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8004ddc:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dde:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8004de2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004df0:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004df2:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004df6:	f003 fbb5 	bl	8008564 <HAL_DMA_Init>
 8004dfa:	b108      	cbz	r0, 8004e00 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8004dfc:	f7ff fe14 	bl	8004a28 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e00:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2105      	movs	r1, #5
 8004e06:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e08:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e0a:	f003 fa99 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e0e:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8004e10:	b003      	add	sp, #12
 8004e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e16:	f003 bac5 	b.w	80083a4 <HAL_NVIC_EnableIRQ>
}
 8004e1a:	b003      	add	sp, #12
 8004e1c:	bd30      	pop	{r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	50051000 	.word	0x50051000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	2001204c 	.word	0x2001204c
 8004e2c:	40026428 	.word	0x40026428
 8004e30:	200120ac 	.word	0x200120ac
 8004e34:	40026410 	.word	0x40026410

08004e38 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	b0a6      	sub	sp, #152	; 0x98
 8004e3c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e3e:	2290      	movs	r2, #144	; 0x90
 8004e40:	2100      	movs	r1, #0
 8004e42:	a802      	add	r0, sp, #8
 8004e44:	f021 f80a 	bl	8025e5c <memset>
  if(hltdc->Instance==LTDC)
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <HAL_LTDC_MspInit+0x64>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d122      	bne.n	8004e96 <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e50:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004e52:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e54:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004e56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e5a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004e62:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e64:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004e66:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e68:	f006 ff3a 	bl	800bce0 <HAL_RCCEx_PeriphCLKConfig>
 8004e6c:	b108      	cbz	r0, 8004e72 <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8004e6e:	f7ff fddb 	bl	8004a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e74:	2058      	movs	r0, #88	; 0x58
 8004e76:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e80:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004e8c:	f003 fa58 	bl	8008340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004e90:	2058      	movs	r0, #88	; 0x58
 8004e92:	f003 fa87 	bl	80083a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004e96:	b026      	add	sp, #152	; 0x98
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40016800 	.word	0x40016800
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	2214      	movs	r2, #20
 8004ea6:	2100      	movs	r1, #0
{
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	b08a      	sub	sp, #40	; 0x28
 8004eae:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	eb0d 0002 	add.w	r0, sp, r2
 8004eb4:	f020 ffd2 	bl	8025e5c <memset>
  if(hqspi->Instance==QUADSPI)
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_QSPI_MspInit+0x100>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d16e      	bne.n	8004f9e <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8004ec0:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ec4:	2403      	movs	r4, #3
 8004ec6:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ec8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eca:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ece:	a905      	add	r1, sp, #20
 8004ed0:	4836      	ldr	r0, [pc, #216]	; (8004fac <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ed2:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8004ed8:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	f022 0202 	bic.w	r2, r2, #2
 8004ee0:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee4:	f042 0202 	orr.w	r2, r2, #2
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eec:	f002 0202 	and.w	r2, r2, #2
 8004ef0:	9200      	str	r2, [sp, #0]
 8004ef2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	f042 0210 	orr.w	r2, r2, #16
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	f002 0210 	and.w	r2, r2, #16
 8004f02:	9201      	str	r2, [sp, #4]
 8004f04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	f042 0202 	orr.w	r2, r2, #2
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	f002 0202 	and.w	r2, r2, #2
 8004f14:	9202      	str	r2, [sp, #8]
 8004f16:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1a:	f042 0204 	orr.w	r2, r2, #4
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f22:	f002 0204 	and.w	r2, r2, #4
 8004f26:	9203      	str	r2, [sp, #12]
 8004f28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2c:	f042 0208 	orr.w	r2, r2, #8
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f40:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f44:	f004 f982 	bl	800924c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f48:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4a:	a905      	add	r1, sp, #20
 8004f4c:	4818      	ldr	r0, [pc, #96]	; (8004fb0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f52:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f54:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f58:	230a      	movs	r3, #10
 8004f5a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5c:	f004 f976 	bl	800924c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004f60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f64:	a905      	add	r1, sp, #20
 8004f66:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f68:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f72:	f004 f96b 	bl	800924c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f76:	a905      	add	r1, sp, #20
 8004f78:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f7a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f80:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f84:	f004 f962 	bl	800924c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f8c:	a905      	add	r1, sp, #20
 8004f8e:	480a      	ldr	r0, [pc, #40]	; (8004fb8 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f90:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f92:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f9a:	f004 f957 	bl	800924c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004f9e:	b00a      	add	sp, #40	; 0x28
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	a0001000 	.word	0xa0001000
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40020400 	.word	0x40020400
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020c00 	.word	0x40020c00

08004fbc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004fbc:	6802      	ldr	r2, [r0, #0]
{
 8004fbe:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <HAL_TIM_PWM_MspInit+0x24>)
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10a      	bne.n	8004fdc <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fc6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fdc:	b002      	add	sp, #8
 8004fde:	4770      	bx	lr
 8004fe0:	40010000 	.word	0x40010000

08004fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fea:	2214      	movs	r2, #20
 8004fec:	2100      	movs	r1, #0
 8004fee:	a801      	add	r0, sp, #4
 8004ff0:	f020 ff34 	bl	8025e5c <memset>
  if(htim->Instance==TIM1)
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_TIM_MspPostInit+0x48>)
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d115      	bne.n	8005028 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005000:	a901      	add	r1, sp, #4
 8005002:	480b      	ldr	r0, [pc, #44]	; (8005030 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005020:	2301      	movs	r3, #1
 8005022:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005024:	f004 f912 	bl	800924c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005028:	b006      	add	sp, #24
 800502a:	bd10      	pop	{r4, pc}
 800502c:	40010000 	.word	0x40010000
 8005030:	40020000 	.word	0x40020000

08005034 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005036:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005038:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800503a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800503c:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <HAL_SDRAM_MspInit+0xb4>)
 800503e:	681e      	ldr	r6, [r3, #0]
 8005040:	2e00      	cmp	r6, #0
 8005042:	d14f      	bne.n	80050e4 <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8005044:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005048:	2503      	movs	r5, #3
 800504a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800504c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800504e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8005050:	4b26      	ldr	r3, [pc, #152]	; (80050ec <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005052:	4827      	ldr	r0, [pc, #156]	; (80050f0 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800506a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005072:	f004 f8eb 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8005076:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800507a:	a901      	add	r1, sp, #4
 800507c:	481d      	ldr	r0, [pc, #116]	; (80050f4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800507e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005084:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005088:	f004 f8e0 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800508c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005090:	a901      	add	r1, sp, #4
 8005092:	4819      	ldr	r0, [pc, #100]	; (80050f8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005094:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800509a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800509e:	f004 f8d5 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80050a2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050a6:	a901      	add	r1, sp, #4
 80050a8:	4814      	ldr	r0, [pc, #80]	; (80050fc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050b4:	f004 f8ca 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80050b8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050bc:	a901      	add	r1, sp, #4
 80050be:	4810      	ldr	r0, [pc, #64]	; (8005100 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050ca:	f004 f8bf 	bl	800924c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80050ce:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050d2:	a901      	add	r1, sp, #4
 80050d4:	480b      	ldr	r0, [pc, #44]	; (8005104 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050e0:	f004 f8b4 	bl	800924c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80050e4:	b007      	add	sp, #28
 80050e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e8:	200123b4 	.word	0x200123b4
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40020c00 	.word	0x40020c00
 80050fc:	40022000 	.word	0x40022000
 8005100:	40021400 	.word	0x40021400
 8005104:	40021c00 	.word	0x40021c00

08005108 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <HAL_InitTick+0x88>)
 800510a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510c:	f042 0210 	orr.w	r2, r2, #16
{
 8005110:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
{
 8005114:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8005118:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800511a:	a901      	add	r1, sp, #4
 800511c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	9302      	str	r3, [sp, #8]
 8005124:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005126:	f006 fdbd 	bl	800bca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800512a:	9b06      	ldr	r3, [sp, #24]
 800512c:	bb4b      	cbnz	r3, 8005182 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800512e:	f006 fda9 	bl	800bc84 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005132:	4e18      	ldr	r6, [pc, #96]	; (8005194 <HAL_InitTick+0x8c>)
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <HAL_InitTick+0x90>)
 8005136:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005138:	f240 33e7 	movw	r3, #999	; 0x3e7
 800513c:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <HAL_InitTick+0x94>)
 8005140:	fbb0 f3f3 	udiv	r3, r0, r3
 8005144:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8005146:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8005148:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800514e:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005150:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8005152:	f007 fb07 	bl	800c764 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8005156:	4604      	mov	r4, r0
 8005158:	b980      	cbnz	r0, 800517c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800515a:	4630      	mov	r0, r6
 800515c:	f007 f9aa 	bl	800c4b4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8005160:	4604      	mov	r4, r0
 8005162:	b958      	cbnz	r0, 800517c <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005164:	2036      	movs	r0, #54	; 0x36
 8005166:	f003 f91d 	bl	80083a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800516a:	2d0f      	cmp	r5, #15
 800516c:	d80d      	bhi.n	800518a <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800516e:	4622      	mov	r2, r4
 8005170:	4629      	mov	r1, r5
 8005172:	2036      	movs	r0, #54	; 0x36
 8005174:	f003 f8e4 	bl	8008340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_InitTick+0x98>)
 800517a:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800517c:	4620      	mov	r0, r4
 800517e:	b008      	add	sp, #32
 8005180:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005182:	f006 fd7f 	bl	800bc84 <HAL_RCC_GetPCLK1Freq>
 8005186:	0040      	lsls	r0, r0, #1
 8005188:	e7d3      	b.n	8005132 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 800518a:	2401      	movs	r4, #1
 800518c:	e7f6      	b.n	800517c <HAL_InitTick+0x74>
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800
 8005194:	200123b8 	.word	0x200123b8
 8005198:	40001000 	.word	0x40001000
 800519c:	000f4240 	.word	0x000f4240
 80051a0:	20000068 	.word	0x20000068

080051a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051a4:	4770      	bx	lr

080051a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051a6:	e7fe      	b.n	80051a6 <HardFault_Handler>

080051a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <MemManage_Handler>

080051aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051aa:	e7fe      	b.n	80051aa <BusFault_Handler>

080051ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <UsageFault_Handler>

080051ae <DebugMon_Handler>:
 80051ae:	4770      	bx	lr

080051b0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <ADC_IRQHandler+0x8>)
 80051b2:	f002 bf74 	b.w	800809e <HAL_ADC_IRQHandler>
 80051b6:	bf00      	nop
 80051b8:	20011f88 	.word	0x20011f88

080051bc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <TIM6_DAC_IRQHandler+0x8>)
 80051be:	f007 b9bb 	b.w	800c538 <HAL_TIM_IRQHandler>
 80051c2:	bf00      	nop
 80051c4:	200123b8 	.word	0x200123b8

080051c8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 80051c8:	4801      	ldr	r0, [pc, #4]	; (80051d0 <DMA2_Stream0_IRQHandler+0x8>)
 80051ca:	f003 ba9b 	b.w	8008704 <HAL_DMA_IRQHandler>
 80051ce:	bf00      	nop
 80051d0:	2001204c 	.word	0x2001204c

080051d4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <DMA2_Stream1_IRQHandler+0x8>)
 80051d6:	f003 ba95 	b.w	8008704 <HAL_DMA_IRQHandler>
 80051da:	bf00      	nop
 80051dc:	200120ac 	.word	0x200120ac

080051e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80051e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 80051e2:	f002 fe19 	bl	8007e18 <HAL_GetTick>
  diff = last - now;
 80051e6:	4a05      	ldr	r2, [pc, #20]	; (80051fc <LTDC_IRQHandler+0x1c>)
 80051e8:	4905      	ldr	r1, [pc, #20]	; (8005200 <LTDC_IRQHandler+0x20>)
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	1a1b      	subs	r3, r3, r0
 80051ee:	600b      	str	r3, [r1, #0]
  last = now;
 80051f0:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80051f2:	4804      	ldr	r0, [pc, #16]	; (8005204 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80051f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 80051f8:	f005 bef9 	b.w	800afee <HAL_LTDC_IRQHandler>
 80051fc:	20012408 	.word	0x20012408
 8005200:	20012404 	.word	0x20012404
 8005204:	20012228 	.word	0x20012228

08005208 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <DMA2D_IRQHandler+0x8>)
 800520a:	f003 bb73 	b.w	80088f4 <HAL_DMA2D_IRQHandler>
 800520e:	bf00      	nop
 8005210:	20011ff4 	.word	0x20011ff4

08005214 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <I2C4_EV_IRQHandler+0x8>)
 8005216:	f004 be65 	b.w	8009ee4 <HAL_I2C_EV_IRQHandler>
 800521a:	bf00      	nop
 800521c:	2001217c 	.word	0x2001217c

08005220 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <DSI_IRQHandler+0x8>)
 8005222:	f003 bd7a 	b.w	8008d1a <HAL_DSI_IRQHandler>
 8005226:	bf00      	nop
 8005228:	2001210c 	.word	0x2001210c

0800522c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <JPEG_IRQHandler+0x8>)
 800522e:	f005 bd8b 	b.w	800ad48 <HAL_JPEG_IRQHandler>
 8005232:	bf00      	nop
 8005234:	200121d0 	.word	0x200121d0

08005238 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005238:	2001      	movs	r0, #1
 800523a:	4770      	bx	lr

0800523c <_kill>:

int _kill(int pid, int sig)
{
 800523c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800523e:	f020 fcb9 	bl	8025bb4 <__errno>
 8005242:	2316      	movs	r3, #22
 8005244:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005246:	f04f 30ff 	mov.w	r0, #4294967295
 800524a:	bd08      	pop	{r3, pc}

0800524c <_exit>:

void _exit (int status)
{
 800524c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800524e:	f020 fcb1 	bl	8025bb4 <__errno>
 8005252:	2316      	movs	r3, #22
 8005254:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005256:	e7fe      	b.n	8005256 <_exit+0xa>

08005258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	460d      	mov	r5, r1
 800525c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800525e:	460e      	mov	r6, r1
 8005260:	1b73      	subs	r3, r6, r5
 8005262:	429c      	cmp	r4, r3
 8005264:	dc01      	bgt.n	800526a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005266:	4620      	mov	r0, r4
 8005268:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800526a:	f3af 8000 	nop.w
 800526e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005272:	e7f5      	b.n	8005260 <_read+0x8>

08005274 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	460d      	mov	r5, r1
 8005278:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527a:	460e      	mov	r6, r1
 800527c:	1b73      	subs	r3, r6, r5
 800527e:	429c      	cmp	r4, r3
 8005280:	dc01      	bgt.n	8005286 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005282:	4620      	mov	r0, r4
 8005284:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005286:	f816 0b01 	ldrb.w	r0, [r6], #1
 800528a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800528e:	e7f5      	b.n	800527c <_write+0x8>

08005290 <_close>:

int _close(int file)
{
	return -1;
}
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	4770      	bx	lr

08005296 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800529a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800529c:	604b      	str	r3, [r1, #4]
}
 800529e:	4770      	bx	lr

080052a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80052a0:	2001      	movs	r0, #1
 80052a2:	4770      	bx	lr

080052a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80052a4:	2000      	movs	r0, #0
 80052a6:	4770      	bx	lr

080052a8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <_sbrk+0x2c>)
 80052aa:	6811      	ldr	r1, [r2, #0]
{
 80052ac:	b508      	push	{r3, lr}
 80052ae:	4603      	mov	r3, r0
	if (heap_end == 0)
 80052b0:	b909      	cbnz	r1, 80052b6 <_sbrk+0xe>
		heap_end = &end;
 80052b2:	4909      	ldr	r1, [pc, #36]	; (80052d8 <_sbrk+0x30>)
 80052b4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80052b6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80052b8:	4669      	mov	r1, sp
 80052ba:	4403      	add	r3, r0
 80052bc:	428b      	cmp	r3, r1
 80052be:	d906      	bls.n	80052ce <_sbrk+0x26>
	{
		errno = ENOMEM;
 80052c0:	f020 fc78 	bl	8025bb4 <__errno>
 80052c4:	230c      	movs	r3, #12
 80052c6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80052cc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80052ce:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80052d0:	e7fc      	b.n	80052cc <_sbrk+0x24>
 80052d2:	bf00      	nop
 80052d4:	2001240c 	.word	0x2001240c
 80052d8:	20027e50 	.word	0x20027e50

080052dc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80052dc:	4770      	bx	lr

080052de <_ZN23ApplicationFontProviderD0Ev>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	2104      	movs	r1, #4
 80052e4:	f020 fc05 	bl	8025af2 <_ZdlPvj>
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd10      	pop	{r4, pc}

080052ec <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80052ec:	b508      	push	{r3, lr}
    switch (typography)
 80052ee:	2903      	cmp	r1, #3
 80052f0:	d80f      	bhi.n	8005312 <_ZN23ApplicationFontProvider7getFontEt+0x26>
 80052f2:	e8df f001 	tbb	[pc, r1]
 80052f6:	020a      	.short	0x020a
 80052f8:	0a06      	.short	0x0a06
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80052fa:	f002 f8b3 	bl	8007464 <_ZN17TypedTextDatabase8getFontsEv>
 80052fe:	6840      	ldr	r0, [r0, #4]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8005300:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005302:	f002 f8af 	bl	8007464 <_ZN17TypedTextDatabase8getFontsEv>
 8005306:	6880      	ldr	r0, [r0, #8]
 8005308:	e7fa      	b.n	8005300 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800530a:	f002 f8ab 	bl	8007464 <_ZN17TypedTextDatabase8getFontsEv>
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	e7f6      	b.n	8005300 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8005312:	2000      	movs	r0, #0
 8005314:	e7f4      	b.n	8005300 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08005318 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8005318:	4800      	ldr	r0, [pc, #0]	; (800531c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800531a:	4770      	bx	lr
 800531c:	08028d74 	.word	0x08028d74

08005320 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8005320:	2008      	movs	r0, #8
 8005322:	4770      	bx	lr

08005324 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005324:	b513      	push	{r0, r1, r4, lr}
 8005326:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8005328:	b151      	cbz	r1, 8005340 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800532a:	6803      	ldr	r3, [r0, #0]
 800532c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800532e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8005330:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005334:	689c      	ldr	r4, [r3, #8]
 8005336:	f10d 0303 	add.w	r3, sp, #3
 800533a:	47a0      	blx	r4
        return glyph;
    }
 800533c:	b002      	add	sp, #8
 800533e:	bd10      	pop	{r4, pc}
            return 0;
 8005340:	4608      	mov	r0, r1
 8005342:	e7fb      	b.n	800533c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08005344 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8005344:	89c0      	ldrh	r0, [r0, #14]
 8005346:	4770      	bx	lr

08005348 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8005348:	8a00      	ldrh	r0, [r0, #16]
 800534a:	4770      	bx	lr

0800534c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800534c:	88c0      	ldrh	r0, [r0, #6]
 800534e:	4770      	bx	lr

08005350 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8005350:	8880      	ldrh	r0, [r0, #4]
 8005352:	4770      	bx	lr

08005354 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8005354:	7a80      	ldrb	r0, [r0, #10]
    }
 8005356:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800535a:	4770      	bx	lr

0800535c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800535c:	7a80      	ldrb	r0, [r0, #10]
    }
 800535e:	09c0      	lsrs	r0, r0, #7
 8005360:	4770      	bx	lr

08005362 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8005362:	4770      	bx	lr

08005364 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8005364:	b510      	push	{r4, lr}
 8005366:	4604      	mov	r4, r0
    }
 8005368:	2108      	movs	r1, #8
 800536a:	f020 fbc2 	bl	8025af2 <_ZdlPvj>
 800536e:	4620      	mov	r0, r4
 8005370:	bd10      	pop	{r4, pc}

08005372 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8005372:	4770      	bx	lr

08005374 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8005374:	4770      	bx	lr

08005376 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8005376:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800537a:	6808      	ldr	r0, [r1, #0]
 800537c:	6849      	ldr	r1, [r1, #4]
 800537e:	c303      	stmia	r3!, {r0, r1}
    }
 8005380:	4770      	bx	lr

08005382 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8005382:	4770      	bx	lr

08005384 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8005384:	4770      	bx	lr

08005386 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8005386:	6041      	str	r1, [r0, #4]
    }
 8005388:	4770      	bx	lr

0800538a <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800538a:	2200      	movs	r2, #0
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800538c:	b510      	push	{r4, lr}
        {
            return Rect(0, 0, rect.width, rect.height);
 800538e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8005392:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8005396:	8002      	strh	r2, [r0, #0]
 8005398:	8042      	strh	r2, [r0, #2]
 800539a:	8084      	strh	r4, [r0, #4]
 800539c:	80c1      	strh	r1, [r0, #6]
        }
 800539e:	bd10      	pop	{r4, pc}

080053a0 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 80053a0:	4770      	bx	lr

080053a2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80053a2:	4770      	bx	lr

080053a4 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80053a6:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80053aa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80053b4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80053b8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	08005681 	.word	0x08005681

080053c4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80053c4:	2301      	movs	r3, #1
 80053c6:	7203      	strb	r3, [r0, #8]
    }
 80053c8:	4770      	bx	lr

080053ca <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 80053ca:	4770      	bx	lr

080053cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 80053cc:	4770      	bx	lr

080053ce <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
 80053ce:	4770      	bx	lr

080053d0 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80053d0:	4770      	bx	lr

080053d2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80053d2:	4770      	bx	lr

080053d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80053d4:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80053d6:	6840      	ldr	r0, [r0, #4]
 80053d8:	6803      	ldr	r3, [r0, #0]
 80053da:	3110      	adds	r1, #16
 80053dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053de:	4718      	bx	r3

080053e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv>:
    }

    virtual void init()
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80053e4:	6840      	ldr	r0, [r0, #4]
 80053e6:	6803      	ldr	r3, [r0, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4798      	blx	r3
 80053ec:	4604      	mov	r4, r0
        while (d)
 80053ee:	b14c      	cbz	r4, 8005404 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0x24>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 80053f0:	88a1      	ldrh	r1, [r4, #4]
 80053f2:	4620      	mov	r0, r4
 80053f4:	89ab      	ldrh	r3, [r5, #12]
 80053f6:	1ac9      	subs	r1, r1, r3
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	b209      	sxth	r1, r1
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4798      	blx	r3
        return nextSibling;
 8005400:	69a4      	ldr	r4, [r4, #24]
        while (d)
 8005402:	e7f4      	b.n	80053ee <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0xe>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 8005404:	6868      	ldr	r0, [r5, #4]
 8005406:	f105 0110 	add.w	r1, r5, #16
 800540a:	6803      	ldr	r3, [r0, #0]
    }
 800540c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8005410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005412:	4718      	bx	r3

08005414 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8005414:	4601      	mov	r1, r0
        screenContainer->remove(solid);
 8005416:	6840      	ldr	r0, [r0, #4]
 8005418:	6803      	ldr	r3, [r0, #0]
 800541a:	3110      	adds	r1, #16
 800541c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541e:	4718      	bx	r3

08005420 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
 8005424:	6840      	ldr	r0, [r0, #4]
 8005426:	6803      	ldr	r3, [r0, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4798      	blx	r3
 800542c:	4604      	mov	r4, r0
        while (d)
 800542e:	b14c      	cbz	r4, 8005444 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x24>
                d->setX(d->getX() - targetValue);
 8005430:	88a1      	ldrh	r1, [r4, #4]
 8005432:	4620      	mov	r0, r4
 8005434:	89ab      	ldrh	r3, [r5, #12]
 8005436:	1ac9      	subs	r1, r1, r3
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	b209      	sxth	r1, r1
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4798      	blx	r3
 8005440:	69a4      	ldr	r4, [r4, #24]
        while (d)
 8005442:	e7f4      	b.n	800542e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>
        screenContainer->add(solid);
 8005444:	6868      	ldr	r0, [r5, #4]
 8005446:	f105 0110 	add.w	r1, r5, #16
 800544a:	6803      	ldr	r3, [r0, #0]
    }
 800544c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8005450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005452:	4718      	bx	r3

08005454 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005454:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8005456:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8005458:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800545a:	68c2      	ldr	r2, [r0, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	1054      	asrs	r4, r2, #1
 8005460:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005464:	07d2      	lsls	r2, r2, #31
 8005466:	bf48      	it	mi
 8005468:	590a      	ldrmi	r2, [r1, r4]
    }
 800546a:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800546e:	bf48      	it	mi
 8005470:	58d3      	ldrmi	r3, [r2, r3]
 8005472:	4718      	bx	r3

08005474 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8005474:	6843      	ldr	r3, [r0, #4]
 8005476:	b12b      	cbz	r3, 8005484 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8005478:	6883      	ldr	r3, [r0, #8]
 800547a:	b92b      	cbnz	r3, 8005488 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800547c:	68c0      	ldr	r0, [r0, #12]
 800547e:	f000 0001 	and.w	r0, r0, #1
 8005482:	4770      	bx	lr
 8005484:	4618      	mov	r0, r3
 8005486:	4770      	bx	lr
 8005488:	2001      	movs	r0, #1
    }
 800548a:	4770      	bx	lr

0800548c <_ZN8touchgfx12NoTransitionD0Ev>:
 800548c:	b510      	push	{r4, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	210c      	movs	r1, #12
 8005492:	f020 fb2e 	bl	8025af2 <_ZdlPvj>
 8005496:	4620      	mov	r0, r4
 8005498:	bd10      	pop	{r4, pc}

0800549a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
 800549e:	2110      	movs	r1, #16
 80054a0:	f020 fb27 	bl	8025af2 <_ZdlPvj>
 80054a4:	4620      	mov	r0, r4
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80054b0:	f020 fb1f 	bl	8025af2 <_ZdlPvj>
 80054b4:	4620      	mov	r0, r4
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED0Ev>:
class CoverTransition : public Transition
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	2138      	movs	r1, #56	; 0x38
 80054be:	f020 fb18 	bl	8025af2 <_ZdlPvj>
 80054c2:	4620      	mov	r0, r4
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 80054c6:	b510      	push	{r4, lr}
 80054c8:	4604      	mov	r4, r0
 80054ca:	2128      	movs	r1, #40	; 0x28
 80054cc:	f020 fb11 	bl	8025af2 <_ZdlPvj>
 80054d0:	4620      	mov	r0, r4
 80054d2:	bd10      	pop	{r4, pc}

080054d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	2138      	movs	r1, #56	; 0x38
 80054da:	f020 fb0a 	bl	8025af2 <_ZdlPvj>
 80054de:	4620      	mov	r0, r4
 80054e0:	bd10      	pop	{r4, pc}

080054e2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80054e2:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80054e4:	f010 fdca 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
    }
 80054e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80054ec:	f011 ba82 	b.w	80169f4 <_ZN8touchgfx11Application10invalidateEv>

080054f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80054f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054f2:	4604      	mov	r4, r0
        animationCounter++;
 80054f4:	7a80      	ldrb	r0, [r0, #10]
 80054f6:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 80054f8:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80054fa:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80054fc:	4298      	cmp	r0, r3
        animationCounter++;
 80054fe:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8005500:	d905      	bls.n	800550e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8005502:	2301      	movs	r3, #1
 8005504:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	72a3      	strb	r3, [r4, #10]
    }
 800550a:	b002      	add	sp, #8
 800550c:	bd70      	pop	{r4, r5, r6, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800550e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005512:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8005514:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005518:	f012 fb8a 	bl	8017c30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 800551c:	f010 0201 	ands.w	r2, r0, #1
 8005520:	b283      	uxth	r3, r0
 8005522:	d130      	bne.n	8005586 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x96>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005524:	81e0      	strh	r0, [r4, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 8005526:	89e5      	ldrh	r5, [r4, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005528:	7aa3      	ldrb	r3, [r4, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 800552a:	1bad      	subs	r5, r5, r6
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800552c:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 800552e:	b2ad      	uxth	r5, r5
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005530:	d106      	bne.n	8005540 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x50>
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa8>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b11b      	cbz	r3, 8005540 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x50>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8005538:	f010 fda0 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 800553c:	f010 fda4 	bl	8016088 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        : x(0), y(0), width(0), height(0)
 8005540:	2300      	movs	r3, #0
 8005542:	f8ad 3000 	strh.w	r3, [sp]
 8005546:	f8ad 3002 	strh.w	r3, [sp, #2]
            rect.width = calculatedValue;
 800554a:	89e3      	ldrh	r3, [r4, #14]
 800554c:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xac>)
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8005558:	f010 fd90 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 800555c:	ab02      	add	r3, sp, #8
 800555e:	e913 0006 	ldmdb	r3, {r1, r2}
 8005562:	f010 ff21 	bl	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
        Drawable* d = screenContainer->getFirstChild();
 8005566:	6860      	ldr	r0, [r4, #4]
 8005568:	6803      	ldr	r3, [r0, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	4798      	blx	r3
 800556e:	4604      	mov	r4, r0
        while (d)
 8005570:	2c00      	cmp	r4, #0
 8005572:	d0ca      	beq.n	800550a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8005574:	88a1      	ldrh	r1, [r4, #4]
 8005576:	4620      	mov	r0, r4
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	4429      	add	r1, r5
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	b209      	sxth	r1, r1
 8005580:	4798      	blx	r3
 8005582:	69a4      	ldr	r4, [r4, #24]
        while (d)
 8005584:	e7f4      	b.n	8005570 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005586:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800558a:	2800      	cmp	r0, #0
 800558c:	bfd8      	it	le
 800558e:	460a      	movle	r2, r1
 8005590:	4413      	add	r3, r2
 8005592:	81e3      	strh	r3, [r4, #14]
 8005594:	e7c7      	b.n	8005526 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x36>
 8005596:	bf00      	nop
 8005598:	20027b9e 	.word	0x20027b9e
 800559c:	20027b96 	.word	0x20027b96

080055a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80055a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055a2:	4604      	mov	r4, r0
        animationCounter++;
 80055a4:	7a80      	ldrb	r0, [r0, #10]
 80055a6:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 80055a8:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80055aa:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80055ac:	4298      	cmp	r0, r3
        animationCounter++;
 80055ae:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 80055b0:	d905      	bls.n	80055be <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80055b2:	2301      	movs	r3, #1
 80055b4:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	72a3      	strb	r3, [r4, #10]
    }
 80055ba:	b002      	add	sp, #8
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c2:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 80055c4:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055c8:	f012 fb32 	bl	8017c30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80055cc:	f010 0201 	ands.w	r2, r0, #1
 80055d0:	b283      	uxth	r3, r0
 80055d2:	d134      	bne.n	800563e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x9e>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80055d4:	81e0      	strh	r0, [r4, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80055d6:	89e5      	ldrh	r5, [r4, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055d8:	7aa3      	ldrb	r3, [r4, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 80055da:	1bad      	subs	r5, r5, r6
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055dc:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80055de:	b2ad      	uxth	r5, r5
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055e0:	d106      	bne.n	80055f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b11b      	cbz	r3, 80055f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80055e8:	f010 fd48 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 80055ec:	f010 fd4c 	bl	8016088 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80055f0:	2300      	movs	r3, #0
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
 80055f4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80055f8:	8812      	ldrh	r2, [r2, #0]
 80055fa:	89e3      	ldrh	r3, [r4, #14]
 80055fc:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 80055fe:	425b      	negs	r3, r3
 8005600:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8005604:	4b14      	ldr	r3, [pc, #80]	; (8005658 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb8>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8005606:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8005610:	f010 fd34 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 8005614:	ab02      	add	r3, sp, #8
 8005616:	e913 0006 	ldmdb	r3, {r1, r2}
 800561a:	f010 fec5 	bl	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
        Drawable* d = screenContainer->getFirstChild();
 800561e:	6860      	ldr	r0, [r4, #4]
 8005620:	6803      	ldr	r3, [r0, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	4798      	blx	r3
 8005626:	4604      	mov	r4, r0
        while (d)
 8005628:	2c00      	cmp	r4, #0
 800562a:	d0c6      	beq.n	80055ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 800562c:	88a1      	ldrh	r1, [r4, #4]
 800562e:	4620      	mov	r0, r4
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	4429      	add	r1, r5
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	b209      	sxth	r1, r1
 8005638:	4798      	blx	r3
 800563a:	69a4      	ldr	r4, [r4, #24]
        while (d)
 800563c:	e7f4      	b.n	8005628 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x88>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800563e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005642:	2800      	cmp	r0, #0
 8005644:	bfd8      	it	le
 8005646:	460a      	movle	r2, r1
 8005648:	4413      	add	r3, r2
 800564a:	81e3      	strh	r3, [r4, #14]
 800564c:	e7c3      	b.n	80055d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
 800564e:	bf00      	nop
 8005650:	20027b9e 	.word	0x20027b9e
 8005654:	20027b94 	.word	0x20027b94
 8005658:	20027b96 	.word	0x20027b96

0800565c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800565c:	b510      	push	{r4, lr}
 800565e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8005660:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8005664:	b158      	cbz	r0, 800567e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8005666:	6803      	ldr	r3, [r0, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	4798      	blx	r3
 800566c:	b138      	cbz	r0, 800567e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800566e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8005672:	6803      	ldr	r3, [r0, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800567e:	bd10      	pop	{r4, pc}

08005680 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8005680:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005684:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8005688:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800568a:	68a8      	ldr	r0, [r5, #8]
 800568c:	6803      	ldr	r3, [r0, #0]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4798      	blx	r3
 8005692:	f243 53cf 	movw	r3, #13775	; 0x35cf
 8005696:	4298      	cmp	r0, r3
 8005698:	d805      	bhi.n	80056a6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800569a:	4b46      	ldr	r3, [pc, #280]	; (80057b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800569c:	21a3      	movs	r1, #163	; 0xa3
 800569e:	4a46      	ldr	r2, [pc, #280]	; (80057b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80056a0:	4846      	ldr	r0, [pc, #280]	; (80057bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80056a2:	f020 fa55 	bl	8025b50 <__assert_func>
 80056a6:	6868      	ldr	r0, [r5, #4]
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	4798      	blx	r3
 80056ae:	280f      	cmp	r0, #15
 80056b0:	d803      	bhi.n	80056ba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 80056b2:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80056b4:	21a4      	movs	r1, #164	; 0xa4
 80056b6:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80056b8:	e7f2      	b.n	80056a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80056ba:	68e8      	ldr	r0, [r5, #12]
 80056bc:	6803      	ldr	r3, [r0, #0]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4798      	blx	r3
 80056c2:	280b      	cmp	r0, #11
 80056c4:	d803      	bhi.n	80056ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 80056c6:	4b3f      	ldr	r3, [pc, #252]	; (80057c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80056c8:	21a5      	movs	r1, #165	; 0xa5
 80056ca:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80056cc:	e7e8      	b.n	80056a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80056ce:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80057cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80056d2:	f010 fcd3 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80056d6:	3004      	adds	r0, #4
 80056d8:	f010 fd36 	bl	8016148 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80056dc:	f8d9 0000 	ldr.w	r0, [r9]
 80056e0:	b110      	cbz	r0, 80056e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80056e2:	6803      	ldr	r3, [r0, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4798      	blx	r3
    if (*currentTrans)
 80056e8:	f8d9 0000 	ldr.w	r0, [r9]
 80056ec:	b110      	cbz	r0, 80056f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80056ee:	6803      	ldr	r3, [r0, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4798      	blx	r3
    if (*currentScreen)
 80056f4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80057d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80056f8:	f8d8 0000 	ldr.w	r0, [r8]
 80056fc:	b110      	cbz	r0, 8005704 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80056fe:	6803      	ldr	r3, [r0, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	4798      	blx	r3
    if (*currentPresenter)
 8005704:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005708:	b110      	cbz	r0, 8005710 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 800570a:	6803      	ldr	r3, [r0, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4798      	blx	r3
    if (*currentScreen)
 8005710:	f8d8 0000 	ldr.w	r0, [r8]
 8005714:	b110      	cbz	r0, 800571c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8005716:	6803      	ldr	r3, [r0, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4798      	blx	r3
    if (*currentPresenter)
 800571c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005720:	b110      	cbz	r0, 8005728 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8005722:	6803      	ldr	r3, [r0, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005728:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800572a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800572c:	f04f 0b00 	mov.w	fp, #0
 8005730:	6803      	ldr	r3, [r0, #0]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	4798      	blx	r3
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8005738:	4604      	mov	r4, r0
 800573a:	f8c0 b004 	str.w	fp, [r0, #4]
 800573e:	6003      	str	r3, [r0, #0]
 8005740:	4659      	mov	r1, fp
 8005742:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005746:	68a8      	ldr	r0, [r5, #8]
 8005748:	6803      	ldr	r3, [r0, #0]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	4798      	blx	r3
 800574e:	4606      	mov	r6, r0
 8005750:	f001 ff8c 	bl	800766c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005754:	6868      	ldr	r0, [r5, #4]
 8005756:	4659      	mov	r1, fp
 8005758:	6803      	ldr	r3, [r0, #0]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	4798      	blx	r3
 800575e:	4605      	mov	r5, r0
 8005760:	4631      	mov	r1, r6
 8005762:	f001 ff5d 	bl	8007620 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8005766:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800576a:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800576e:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8005772:	b1e5      	cbz	r5, 80057ae <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8005774:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8005776:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800577a:	4630      	mov	r0, r6
 800577c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800577e:	f8c5 a008 	str.w	sl, [r5, #8]
 8005782:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8005784:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005786:	4798      	blx	r3
    newPresenter->activate();
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	4628      	mov	r0, r5
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005790:	4621      	mov	r1, r4
 8005792:	4630      	mov	r0, r6
 8005794:	f012 fa46 	bl	8017c24 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	4620      	mov	r0, r4
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	4798      	blx	r3
    newTransition->invalidate();
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	4620      	mov	r0, r4
 80057a4:	695b      	ldr	r3, [r3, #20]
}
 80057a6:	b001      	add	sp, #4
 80057a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	4718      	bx	r3
    model->bind(newPresenter);
 80057ae:	462b      	mov	r3, r5
 80057b0:	e7e1      	b.n	8005776 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 80057b2:	bf00      	nop
 80057b4:	08028e24 	.word	0x08028e24
 80057b8:	08028eb2 	.word	0x08028eb2
 80057bc:	08028fb6 	.word	0x08028fb6
 80057c0:	08028ffd 	.word	0x08028ffd
 80057c4:	080290a0 	.word	0x080290a0
 80057c8:	08029448 	.word	0x08029448
 80057cc:	20027be8 	.word	0x20027be8
 80057d0:	20027be4 	.word	0x20027be4

080057d4 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80057d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	461d      	mov	r5, r3
        setX(x);
 80057da:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80057dc:	4604      	mov	r4, r0
 80057de:	4616      	mov	r6, r2
        setX(x);
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80057e2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 80057e6:	4798      	blx	r3
        setY(y);
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	4631      	mov	r1, r6
 80057ec:	4620      	mov	r0, r4
 80057ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f0:	4798      	blx	r3
        setWidth(width);
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	4629      	mov	r1, r5
 80057f6:	4620      	mov	r0, r4
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	4798      	blx	r3
        setHeight(height);
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	4639      	mov	r1, r7
 8005800:	4620      	mov	r0, r4
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8005804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8005808:	4718      	bx	r3
	...

0800580c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenCoverTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenCoverTransitionWestImpl()
{
 800580c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005810:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	; 0x154
{
 8005814:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005816:	f8db 0008 	ldr.w	r0, [fp, #8]
 800581a:	6803      	ldr	r3, [r0, #0]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	4798      	blx	r3
 8005820:	f243 53cf 	movw	r3, #13775	; 0x35cf
 8005824:	4298      	cmp	r0, r3
 8005826:	d805      	bhi.n	8005834 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x28>
 8005828:	4b55      	ldr	r3, [pc, #340]	; (8005980 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
 800582a:	21a3      	movs	r1, #163	; 0xa3
 800582c:	4a55      	ldr	r2, [pc, #340]	; (8005984 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800582e:	4856      	ldr	r0, [pc, #344]	; (8005988 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x17c>)
 8005830:	f020 f98e 	bl	8025b50 <__assert_func>
 8005834:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005838:	6803      	ldr	r3, [r0, #0]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	4798      	blx	r3
 800583e:	280f      	cmp	r0, #15
 8005840:	d803      	bhi.n	800584a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x3e>
 8005842:	4b52      	ldr	r3, [pc, #328]	; (800598c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x180>)
 8005844:	21a4      	movs	r1, #164	; 0xa4
 8005846:	4a4f      	ldr	r2, [pc, #316]	; (8005984 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
 8005848:	e7f1      	b.n	800582e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800584a:	f8db 000c 	ldr.w	r0, [fp, #12]
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	4798      	blx	r3
 8005854:	2837      	cmp	r0, #55	; 0x37
 8005856:	d803      	bhi.n	8005860 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x54>
 8005858:	4b4d      	ldr	r3, [pc, #308]	; (8005990 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x184>)
 800585a:	21a5      	movs	r1, #165	; 0xa5
 800585c:	4a49      	ldr	r2, [pc, #292]	; (8005984 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
 800585e:	e7e6      	b.n	800582e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    if (*currentTrans)
 8005860:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80059a4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 8005864:	f010 fc0a 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 8005868:	3004      	adds	r0, #4
 800586a:	f010 fc6d 	bl	8016148 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800586e:	f8d9 0000 	ldr.w	r0, [r9]
 8005872:	b110      	cbz	r0, 800587a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x6e>
        (*currentTrans)->tearDown();
 8005874:	6803      	ldr	r3, [r0, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4798      	blx	r3
    if (*currentTrans)
 800587a:	f8d9 0000 	ldr.w	r0, [r9]
 800587e:	b110      	cbz	r0, 8005886 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x7a>
        (*currentTrans)->~Transition();
 8005880:	6803      	ldr	r3, [r0, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4798      	blx	r3
    if (*currentScreen)
 8005886:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80059a8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x19c>
 800588a:	f8d8 0000 	ldr.w	r0, [r8]
 800588e:	b110      	cbz	r0, 8005896 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	4798      	blx	r3
    if (*currentPresenter)
 8005896:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800589a:	b110      	cbz	r0, 80058a2 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x96>
        (*currentPresenter)->deactivate();
 800589c:	6803      	ldr	r3, [r0, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4798      	blx	r3
    if (*currentScreen)
 80058a2:	f8d8 0000 	ldr.w	r0, [r8]
 80058a6:	b110      	cbz	r0, 80058ae <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xa2>
        (*currentScreen)->~Screen();
 80058a8:	6803      	ldr	r3, [r0, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4798      	blx	r3
    if (*currentPresenter)
 80058ae:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80058b2:	b110      	cbz	r0, 80058ba <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xae>
        (*currentPresenter)->~Presenter();
 80058b4:	6803      	ldr	r3, [r0, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80058ba:	f8db 000c 	ldr.w	r0, [fp, #12]
 80058be:	2100      	movs	r1, #0
 80058c0:	2500      	movs	r5, #0
 80058c2:	6803      	ldr	r3, [r0, #0]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	4798      	blx	r3
          solid()
 80058c8:	4b32      	ldr	r3, [pc, #200]	; (8005994 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x188>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80058ca:	4a33      	ldr	r2, [pc, #204]	; (8005998 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x18c>)
 80058cc:	4629      	mov	r1, r5
          solid()
 80058ce:	6003      	str	r3, [r0, #0]
 80058d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80058d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80058d8:	4604      	mov	r4, r0
 80058da:	8103      	strh	r3, [r0, #8]
          solid()
 80058dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058e0:	6045      	str	r5, [r0, #4]
 80058e2:	6343      	str	r3, [r0, #52]	; 0x34
    class FullSolidRect : public Widget
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x190>)
 80058e6:	7285      	strb	r5, [r0, #10]
 80058e8:	6103      	str	r3, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 80058ea:	4b2d      	ldr	r3, [pc, #180]	; (80059a0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x194>)
          solid()
 80058ec:	81c5      	strh	r5, [r0, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 80058ee:	f9b3 3000 	ldrsh.w	r3, [r3]
          solid()
 80058f2:	e9c0 5505 	strd	r5, r5, [r0, #20]
            targetValue = HAL::DISPLAY_WIDTH;
 80058f6:	8183      	strh	r3, [r0, #12]
          solid()
 80058f8:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80058fc:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8005900:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005904:	3010      	adds	r0, #16
 8005906:	9200      	str	r2, [sp, #0]
 8005908:	462a      	mov	r2, r5
 800590a:	f7ff ff63 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800590e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005912:	4629      	mov	r1, r5
 8005914:	6803      	ldr	r3, [r0, #0]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	4798      	blx	r3
 800591a:	4606      	mov	r6, r0
 800591c:	f001 fea6 	bl	800766c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005920:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005924:	4629      	mov	r1, r5
 8005926:	6803      	ldr	r3, [r0, #0]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	4798      	blx	r3
 800592c:	4605      	mov	r5, r0
 800592e:	4631      	mov	r1, r6
 8005930:	f001 fe76 	bl	8007620 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8005934:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005938:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800593c:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8005940:	b1e5      	cbz	r5, 800597c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x170>
 8005942:	1d2b      	adds	r3, r5, #4
 8005944:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005948:	4630      	mov	r0, r6
 800594a:	6833      	ldr	r3, [r6, #0]
 800594c:	f8c5 a008 	str.w	sl, [r5, #8]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005954:	4798      	blx	r3
    newPresenter->activate();
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	4628      	mov	r0, r5
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800595e:	4621      	mov	r1, r4
 8005960:	4630      	mov	r0, r6
 8005962:	f012 f95f 	bl	8017c24 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	4620      	mov	r0, r4
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	4798      	blx	r3
    newTransition->invalidate();
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	4620      	mov	r0, r4
 8005972:	695b      	ldr	r3, [r3, #20]
}
 8005974:	b003      	add	sp, #12
 8005976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	4718      	bx	r3
    model->bind(newPresenter);
 800597c:	462b      	mov	r3, r5
 800597e:	e7e1      	b.n	8005944 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x138>
 8005980:	08028e24 	.word	0x08028e24
 8005984:	08029143 	.word	0x08029143
 8005988:	08028fb6 	.word	0x08028fb6
 800598c:	08028ffd 	.word	0x08028ffd
 8005990:	080290a0 	.word	0x080290a0
 8005994:	08029490 	.word	0x08029490
 8005998:	20027b96 	.word	0x20027b96
 800599c:	0802937c 	.word	0x0802937c
 80059a0:	20027b94 	.word	0x20027b94
 80059a4:	20027be8 	.word	0x20027be8
 80059a8:	20027be4 	.word	0x20027be4

080059ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 80059ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80059b0:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	; 0x154
{
 80059b4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80059b6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80059ba:	6803      	ldr	r3, [r0, #0]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	4798      	blx	r3
 80059c0:	f5b0 7f19 	cmp.w	r0, #612	; 0x264
 80059c4:	d205      	bcs.n	80059d2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 80059c6:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80059c8:	21a3      	movs	r1, #163	; 0xa3
 80059ca:	4a56      	ldr	r2, [pc, #344]	; (8005b24 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80059cc:	4856      	ldr	r0, [pc, #344]	; (8005b28 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 80059ce:	f020 f8bf 	bl	8025b50 <__assert_func>
 80059d2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80059d6:	6803      	ldr	r3, [r0, #0]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4798      	blx	r3
 80059dc:	280f      	cmp	r0, #15
 80059de:	d803      	bhi.n	80059e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 80059e0:	4b52      	ldr	r3, [pc, #328]	; (8005b2c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 80059e2:	21a4      	movs	r1, #164	; 0xa4
 80059e4:	4a4f      	ldr	r2, [pc, #316]	; (8005b24 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 80059e6:	e7f1      	b.n	80059cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80059e8:	f8db 000c 	ldr.w	r0, [fp, #12]
 80059ec:	6803      	ldr	r3, [r0, #0]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4798      	blx	r3
 80059f2:	2837      	cmp	r0, #55	; 0x37
 80059f4:	d803      	bhi.n	80059fe <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 80059f6:	4b4e      	ldr	r3, [pc, #312]	; (8005b30 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 80059f8:	21a5      	movs	r1, #165	; 0xa5
 80059fa:	4a4a      	ldr	r2, [pc, #296]	; (8005b24 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 80059fc:	e7e6      	b.n	80059cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 80059fe:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8005b44 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 8005a02:	f010 fb3b 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 8005a06:	3004      	adds	r0, #4
 8005a08:	f010 fb9e 	bl	8016148 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8005a10:	b110      	cbz	r0, 8005a18 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8005a12:	6803      	ldr	r3, [r0, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4798      	blx	r3
    if (*currentTrans)
 8005a18:	f8d9 0000 	ldr.w	r0, [r9]
 8005a1c:	b110      	cbz	r0, 8005a24 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8005a1e:	6803      	ldr	r3, [r0, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4798      	blx	r3
    if (*currentScreen)
 8005a24:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8005b48 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x19c>
 8005a28:	f8d8 0000 	ldr.w	r0, [r8]
 8005a2c:	b110      	cbz	r0, 8005a34 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8005a2e:	6803      	ldr	r3, [r0, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4798      	blx	r3
    if (*currentPresenter)
 8005a34:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005a38:	b110      	cbz	r0, 8005a40 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8005a3a:	6803      	ldr	r3, [r0, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4798      	blx	r3
    if (*currentScreen)
 8005a40:	f8d8 0000 	ldr.w	r0, [r8]
 8005a44:	b110      	cbz	r0, 8005a4c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8005a46:	6803      	ldr	r3, [r0, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4798      	blx	r3
    if (*currentPresenter)
 8005a4c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005a50:	b110      	cbz	r0, 8005a58 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8005a52:	6803      	ldr	r3, [r0, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005a58:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005a5c:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8005a5e:	2500      	movs	r5, #0
 8005a60:	6803      	ldr	r3, [r0, #0]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	4798      	blx	r3
          solid()
 8005a66:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8005a68:	6045      	str	r5, [r0, #4]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a6a:	4629      	mov	r1, r5
          solid()
 8005a6c:	6003      	str	r3, [r0, #0]
 8005a6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a72:	7285      	strb	r5, [r0, #10]
 8005a74:	4604      	mov	r4, r0
 8005a76:	8103      	strh	r3, [r0, #8]
 8005a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a7c:	81c5      	strh	r5, [r0, #14]
 8005a7e:	6343      	str	r3, [r0, #52]	; 0x34
    class FullSolidRect : public Widget
 8005a80:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8005a82:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	425a      	negs	r2, r3
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a8a:	b21b      	sxth	r3, r3
            targetValue = -HAL::DISPLAY_WIDTH;
 8005a8c:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005a8e:	4a2c      	ldr	r2, [pc, #176]	; (8005b40 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>)
 8005a90:	f9b2 2000 	ldrsh.w	r2, [r2]
          solid()
 8005a94:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8005a98:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8005a9c:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8005aa0:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005aa4:	3010      	adds	r0, #16
 8005aa6:	9200      	str	r2, [sp, #0]
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	f7ff fe93 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005aae:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	6803      	ldr	r3, [r0, #0]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	4798      	blx	r3
 8005aba:	4606      	mov	r6, r0
 8005abc:	f001 fe3e 	bl	800773c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005ac0:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	6803      	ldr	r3, [r0, #0]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	4798      	blx	r3
 8005acc:	4605      	mov	r5, r0
 8005ace:	4631      	mov	r1, r6
 8005ad0:	f001 fe0e 	bl	80076f0 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8005ad4:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005ad8:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8005adc:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8005ae0:	b1e5      	cbz	r5, 8005b1c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>
 8005ae2:	1d2b      	adds	r3, r5, #4
 8005ae4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005ae8:	4630      	mov	r0, r6
 8005aea:	6833      	ldr	r3, [r6, #0]
 8005aec:	f8c5 a008 	str.w	sl, [r5, #8]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005af4:	4798      	blx	r3
    newPresenter->activate();
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	4628      	mov	r0, r5
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005afe:	4621      	mov	r1, r4
 8005b00:	4630      	mov	r0, r6
 8005b02:	f012 f88f 	bl	8017c24 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	4620      	mov	r0, r4
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	4798      	blx	r3
    newTransition->invalidate();
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	4620      	mov	r0, r4
 8005b12:	695b      	ldr	r3, [r3, #20]
}
 8005b14:	b003      	add	sp, #12
 8005b16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	4718      	bx	r3
    model->bind(newPresenter);
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	e7e1      	b.n	8005ae4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x138>
 8005b20:	08028e24 	.word	0x08028e24
 8005b24:	0802925a 	.word	0x0802925a
 8005b28:	08028fb6 	.word	0x08028fb6
 8005b2c:	08028ffd 	.word	0x08028ffd
 8005b30:	080290a0 	.word	0x080290a0
 8005b34:	0802946c 	.word	0x0802946c
 8005b38:	0802937c 	.word	0x0802937c
 8005b3c:	20027b94 	.word	0x20027b94
 8005b40:	20027b96 	.word	0x20027b96
 8005b44:	20027be8 	.word	0x20027be8
 8005b48:	20027be4 	.word	0x20027be4

08005b4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4617      	mov	r7, r2
 8005b52:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8005b54:	f010 fbca 	bl	80162ec <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8005b5a:	2500      	movs	r5, #0
        instance = this;
 8005b5c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005b5e:	4629      	mov	r1, r5
      model(m)
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8005b62:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 8005b66:	4e0f      	ldr	r6, [pc, #60]	; (8005ba4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8005b6e:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 8005b72:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005b76:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8005b78:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8005b80:	4628      	mov	r0, r5
 8005b82:	f001 fc23 	bl	80073cc <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005b86:	6833      	ldr	r3, [r6, #0]
 8005b88:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8005b8c:	b10a      	cbz	r2, 8005b92 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8005b8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005b90:	b900      	cbnz	r0, 8005b94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8005b92:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005b94:	f018 fcbd 	bl	801e512 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8005b98:	4620      	mov	r0, r4
 8005b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b9c:	20027bf4 	.word	0x20027bf4
 8005ba0:	080293fc 	.word	0x080293fc
 8005ba4:	20027ba0 	.word	0x20027ba0
 8005ba8:	080293e4 	.word	0x080293e4

08005bac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8005bae:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8005bb2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005bbc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8005bc0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	08005681 	.word	0x08005681

08005bcc <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>:
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv+0x1c>)
 8005bce:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8005bd2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005bdc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8005be0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	0800580d 	.word	0x0800580d

08005bec <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8005bee:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8005bf2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005bfc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8005c00:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	080059ad 	.word	0x080059ad

08005c0c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8005c0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005c0e:	4770      	bx	lr

08005c10 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8005c10:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005c12:	4770      	bx	lr

08005c14 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8005c14:	4770      	bx	lr

08005c16 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005c16:	888b      	ldrh	r3, [r1, #4]
 8005c18:	69c0      	ldr	r0, [r0, #28]
 8005c1a:	0adb      	lsrs	r3, r3, #11
 8005c1c:	680a      	ldr	r2, [r1, #0]
 8005c1e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8005c22:	4410      	add	r0, r2
 8005c24:	4770      	bx	lr

08005c26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005c26:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8005c28:	b1c2      	cbz	r2, 8005c5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8005c2a:	7b13      	ldrb	r3, [r2, #12]
 8005c2c:	b1b3      	cbz	r3, 8005c5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005c2e:	7b54      	ldrb	r4, [r2, #13]
 8005c30:	7ad2      	ldrb	r2, [r2, #11]
 8005c32:	0224      	lsls	r4, r4, #8
 8005c34:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005c38:	4314      	orrs	r4, r2
 8005c3a:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c3c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005c3e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005c42:	8813      	ldrh	r3, [r2, #0]
 8005c44:	428b      	cmp	r3, r1
 8005c46:	d102      	bne.n	8005c4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8005c48:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8005c4c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8005c4e:	d805      	bhi.n	8005c5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c50:	3801      	subs	r0, #1
 8005c52:	3204      	adds	r2, #4
 8005c54:	b280      	uxth	r0, r0
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d1f3      	bne.n	8005c42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005c5a:	e7f7      	b.n	8005c4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e7f5      	b.n	8005c4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08005c60 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	f01f ff44 	bl	8025af2 <_ZdlPvj>
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	bd10      	pop	{r4, pc}
	...

08005c70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005c70:	b530      	push	{r4, r5, lr}
 8005c72:	b08b      	sub	sp, #44	; 0x2c
 8005c74:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8005c76:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8005c7a:	9508      	str	r5, [sp, #32]
 8005c7c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8005c80:	9507      	str	r5, [sp, #28]
 8005c82:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8005c86:	9506      	str	r5, [sp, #24]
 8005c88:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8005c8c:	9505      	str	r5, [sp, #20]
 8005c8e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8005c92:	9504      	str	r5, [sp, #16]
 8005c94:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8005c98:	9503      	str	r5, [sp, #12]
 8005c9a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8005c9e:	9502      	str	r5, [sp, #8]
 8005ca0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8005ca4:	9501      	str	r5, [sp, #4]
 8005ca6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8005caa:	9500      	str	r5, [sp, #0]
 8005cac:	f011 fb4a 	bl	8017344 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8005cb2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cb8:	61e3      	str	r3, [r4, #28]
 8005cba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cbc:	6223      	str	r3, [r4, #32]
 8005cbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8005cc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005cc4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8005cc6:	b00b      	add	sp, #44	; 0x2c
 8005cc8:	bd30      	pop	{r4, r5, pc}
 8005cca:	bf00      	nop
 8005ccc:	080294b4 	.word	0x080294b4

08005cd0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8005cd0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005cd2:	4770      	bx	lr

08005cd4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8005cd4:	4770      	bx	lr

08005cd6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8005cd6:	4770      	bx	lr

08005cd8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8005cd8:	4770      	bx	lr

08005cda <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8005cda:	4770      	bx	lr

08005cdc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8005cdc:	4770      	bx	lr

08005cde <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005cde:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8005ce2:	4770      	bx	lr

08005ce4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8005ce4:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005ce6:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8005ce8:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005cea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cee:	4362      	muls	r2, r4
 8005cf0:	4361      	muls	r1, r4
    }
 8005cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005cf6:	4718      	bx	r3

08005cf8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8005cf8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005cfc:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8005d06:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8005d0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d12:	db17      	blt.n	8005d44 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8005d14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d18:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005d1c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005d20:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005d24:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005d28:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d30:	db1c      	blt.n	8005d6c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8005d32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005d36:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005d3a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005d3e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005d42:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005d44:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005d48:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d4c:	ee17 2a10 	vmov	r2, s14
 8005d50:	1e51      	subs	r1, r2, #1
 8005d52:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005d56:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d5a:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005d5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d62:	ee10 2a10 	vmov	r2, s0
 8005d66:	440a      	add	r2, r1
 8005d68:	4611      	mov	r1, r2
 8005d6a:	e7db      	b.n	8005d24 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8005d6c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d74:	ee17 2a90 	vmov	r2, s15
 8005d78:	3a01      	subs	r2, #1
 8005d7a:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005d7e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005d82:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005d86:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005d8a:	ee10 ca90 	vmov	ip, s1
 8005d8e:	4494      	add	ip, r2
 8005d90:	4662      	mov	r2, ip
 8005d92:	e7d6      	b.n	8005d42 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08005d94 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8005d94:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d96:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005d98:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d9e:	4362      	muls	r2, r4
    }
 8005da0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005da4:	4718      	bx	r3

08005da6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8005da6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005daa:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8005db4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8005db8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc0:	db08      	blt.n	8005dd4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8005dc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005dc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005dca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005dce:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005dd2:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005dd4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ddc:	ee17 2a90 	vmov	r2, s15
 8005de0:	3a01      	subs	r2, #1
 8005de2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005de6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005dea:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005dee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005df2:	ee10 ca10 	vmov	ip, s0
 8005df6:	4494      	add	ip, r2
 8005df8:	4662      	mov	r2, ip
 8005dfa:	e7ea      	b.n	8005dd2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08005dfc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8005dfc:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005dfe:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8005e00:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005e02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e06:	4362      	muls	r2, r4
 8005e08:	4361      	muls	r1, r4
    }
 8005e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005e0e:	4718      	bx	r3

08005e10 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8005e10:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e14:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8005e1e:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8005e22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2a:	db17      	blt.n	8005e5c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8005e2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e30:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e34:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005e38:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005e3c:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005e40:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e48:	db1c      	blt.n	8005e84 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8005e4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005e4e:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005e52:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005e56:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e5a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005e5c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005e60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e64:	ee17 2a10 	vmov	r2, s14
 8005e68:	1e51      	subs	r1, r2, #1
 8005e6a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e6e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e72:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005e76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e7a:	ee10 2a10 	vmov	r2, s0
 8005e7e:	440a      	add	r2, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	e7db      	b.n	8005e3c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8005e84:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8c:	ee17 2a90 	vmov	r2, s15
 8005e90:	3a01      	subs	r2, #1
 8005e92:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005e96:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005e9a:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005e9e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005ea2:	ee10 ca90 	vmov	ip, s1
 8005ea6:	4494      	add	ip, r2
 8005ea8:	4662      	mov	r2, ip
 8005eaa:	e7d6      	b.n	8005e5a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08005eac <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8005eac:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005eae:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005eb0:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005eb2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005eb6:	4362      	muls	r2, r4
    }
 8005eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005ebc:	4718      	bx	r3

08005ebe <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8005ebe:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005ec2:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8005ecc:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8005ed0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed8:	db08      	blt.n	8005eec <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8005eda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005ede:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ee2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ee6:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005eea:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005eec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ef4:	ee17 2a90 	vmov	r2, s15
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005efe:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005f02:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005f06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f0a:	ee10 ca10 	vmov	ip, s0
 8005f0e:	4494      	add	ip, r2
 8005f10:	4662      	mov	r2, ip
 8005f12:	e7ea      	b.n	8005eea <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08005f14 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8005f14:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8005f18:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	db07      	blt.n	8005f2e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005f22:	fb93 f0f2 	sdiv	r0, r3, r2
 8005f26:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f2a:	1040      	asrs	r0, r0, #1
 8005f2c:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f2e:	f06f 0001 	mvn.w	r0, #1
 8005f32:	fb00 2003 	mla	r0, r0, r3, r2
 8005f36:	3801      	subs	r0, #1
 8005f38:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f3c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f40:	1040      	asrs	r0, r0, #1
 8005f42:	4240      	negs	r0, r0
    }
 8005f44:	4770      	bx	lr

08005f46 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8005f46:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8005f4a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005f4e:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8005f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8005f56:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005f5a:	4770      	bx	lr

08005f5c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8005f5c:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8005f60:	4770      	bx	lr

08005f62 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005f62:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8005f66:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	db07      	blt.n	8005f7c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f6c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005f70:	fb93 f0f2 	sdiv	r0, r3, r2
 8005f74:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f78:	1040      	asrs	r0, r0, #1
 8005f7a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f7c:	f06f 0001 	mvn.w	r0, #1
 8005f80:	fb00 2003 	mla	r0, r0, r3, r2
 8005f84:	3801      	subs	r0, #1
 8005f86:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f8a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f8e:	1040      	asrs	r0, r0, #1
 8005f90:	4240      	negs	r0, r0
    }
 8005f92:	4770      	bx	lr

08005f94 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005f94:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8005f98:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005f9c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8005fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8005fa4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005fa8:	4770      	bx	lr

08005faa <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8005faa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8005fae:	4770      	bx	lr

08005fb0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8005fb0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8005fb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db07      	blt.n	8005fca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005fba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005fbe:	fb93 f0f2 	sdiv	r0, r3, r2
 8005fc2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fc6:	1040      	asrs	r0, r0, #1
 8005fc8:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005fca:	f06f 0001 	mvn.w	r0, #1
 8005fce:	fb00 2003 	mla	r0, r0, r3, r2
 8005fd2:	3801      	subs	r0, #1
 8005fd4:	fb90 f0f2 	sdiv	r0, r0, r2
 8005fd8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fdc:	1040      	asrs	r0, r0, #1
 8005fde:	4240      	negs	r0, r0
    }
 8005fe0:	4770      	bx	lr

08005fe2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8005fe2:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8005fe6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005fea:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8005ff2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005ff6:	4770      	bx	lr

08005ff8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8005ff8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8005ffc:	4770      	bx	lr

08005ffe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8005ffe:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8006002:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8006004:	2b00      	cmp	r3, #0
 8006006:	db07      	blt.n	8006018 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8006008:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800600c:	fb93 f0f2 	sdiv	r0, r3, r2
 8006010:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006014:	1040      	asrs	r0, r0, #1
 8006016:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006018:	f06f 0001 	mvn.w	r0, #1
 800601c:	fb00 2003 	mla	r0, r0, r3, r2
 8006020:	3801      	subs	r0, #1
 8006022:	fb90 f0f2 	sdiv	r0, r0, r2
 8006026:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800602a:	1040      	asrs	r0, r0, #1
 800602c:	4240      	negs	r0, r0
    }
 800602e:	4770      	bx	lr

08006030 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8006030:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8006034:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8006038:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 800603c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8006040:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006044:	4770      	bx	lr

08006046 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8006046:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 800604a:	4770      	bx	lr

0800604c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 800604c:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8006056:	460d      	mov	r5, r1
 8006058:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 800605a:	4798      	blx	r3
        setScaleY(scale, updateData);
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	4632      	mov	r2, r6
 8006060:	4629      	mov	r1, r5
 8006062:	4620      	mov	r0, r4
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8006068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 800606c:	4718      	bx	r3

0800606e <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 800606e:	6803      	ldr	r3, [r0, #0]
 8006070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006074:	4718      	bx	r3

08006076 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8006076:	6803      	ldr	r3, [r0, #0]
 8006078:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800607c:	4718      	bx	r3

0800607e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006084:	4718      	bx	r3

08006086 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006086:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8006088:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800608a:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800608c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 8006090:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 8006092:	db0e      	blt.n	80060b2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8006094:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006098:	fb92 f1f4 	sdiv	r1, r2, r4
 800609c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80060a0:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80060a2:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 80060a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80060aa:	3a01      	subs	r2, #1
 80060ac:	440a      	add	r2, r1
 80060ae:	4249      	negs	r1, r1
 80060b0:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80060b2:	f06f 0101 	mvn.w	r1, #1
 80060b6:	fb01 4102 	mla	r1, r1, r2, r4
 80060ba:	3901      	subs	r1, #1
 80060bc:	fb91 f1f4 	sdiv	r1, r1, r4
 80060c0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80060c4:	1049      	asrs	r1, r1, #1
 80060c6:	4249      	negs	r1, r1
 80060c8:	e7eb      	b.n	80060a2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

080060ca <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 80060ca:	6803      	ldr	r3, [r0, #0]
 80060cc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80060d0:	4718      	bx	r3

080060d2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 80060d2:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 80060d4:	6803      	ldr	r3, [r0, #0]
 80060d6:	4351      	muls	r1, r2
 80060d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80060dc:	4718      	bx	r3

080060de <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 80060de:	6803      	ldr	r3, [r0, #0]
 80060e0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80060e4:	4718      	bx	r3

080060e6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 80060e6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 80060ea:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80060ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80060f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
 80060f4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80060f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	db08      	blt.n	8006114 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8006102:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006106:	ee30 0a27 	vadd.f32	s0, s0, s15
 800610a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800610e:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8006112:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006114:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800611c:	ee17 2a90 	vmov	r2, s15
 8006120:	1e51      	subs	r1, r2, #1
 8006122:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006126:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800612a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800612e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006132:	ee10 2a10 	vmov	r2, s0
 8006136:	440a      	add	r2, r1
 8006138:	4611      	mov	r1, r2
 800613a:	e7ea      	b.n	8006112 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

0800613c <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 800613c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 8006140:	4770      	bx	lr

08006142 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8006142:	6803      	ldr	r3, [r0, #0]
 8006144:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006148:	4718      	bx	r3

0800614a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 800614a:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 800614c:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 800614e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 8006152:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8006154:	4798      	blx	r3
        if (i >= 0)
 8006156:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8006158:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 800615a:	db07      	blt.n	800616c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800615c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006160:	fb90 f0f3 	sdiv	r0, r0, r3
 8006164:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006168:	1040      	asrs	r0, r0, #1
    }
 800616a:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800616c:	f06f 0201 	mvn.w	r2, #1
 8006170:	fb02 3000 	mla	r0, r2, r0, r3
 8006174:	3801      	subs	r0, #1
 8006176:	fb90 f0f3 	sdiv	r0, r0, r3
 800617a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800617e:	1040      	asrs	r0, r0, #1
 8006180:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8006182:	e7f2      	b.n	800616a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08006184 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8006184:	6803      	ldr	r3, [r0, #0]
 8006186:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800618a:	4718      	bx	r3

0800618c <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 800618c:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 800618e:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 8006190:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 8006194:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8006196:	4798      	blx	r3
        return (float)i / (float)scale;
 8006198:	ee07 0a90 	vmov	s15, r0
 800619c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80061a0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80061a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80061a8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80061ac:	bd10      	pop	{r4, pc}

080061ae <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 80061ae:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80061b2:	4770      	bx	lr

080061b4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 80061b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 80061b6:	6803      	ldr	r3, [r0, #0]
 80061b8:	4351      	muls	r1, r2
 80061ba:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80061be:	4718      	bx	r3

080061c0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 80061c0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 80061c4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80061c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80061ca:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
 80061ce:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80061d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	db08      	blt.n	80061ee <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 80061dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80061e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80061e8:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80061ec:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80061ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80061f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f6:	ee17 2a90 	vmov	r2, s15
 80061fa:	1e51      	subs	r1, r2, #1
 80061fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006200:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006204:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006208:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800620c:	ee10 2a10 	vmov	r2, s0
 8006210:	440a      	add	r2, r1
 8006212:	4611      	mov	r1, r2
 8006214:	e7ea      	b.n	80061ec <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08006216 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8006216:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 800621a:	4770      	bx	lr

0800621c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 800621c:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 800621e:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8006220:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 8006224:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8006226:	4798      	blx	r3
        if (i >= 0)
 8006228:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800622a:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 800622c:	db07      	blt.n	800623e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800622e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006232:	fb90 f0f3 	sdiv	r0, r0, r3
 8006236:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800623a:	1040      	asrs	r0, r0, #1
    }
 800623c:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800623e:	f06f 0201 	mvn.w	r2, #1
 8006242:	fb02 3000 	mla	r0, r2, r0, r3
 8006246:	3801      	subs	r0, #1
 8006248:	fb90 f0f3 	sdiv	r0, r0, r3
 800624c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006250:	1040      	asrs	r0, r0, #1
 8006252:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8006254:	e7f2      	b.n	800623c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08006256 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8006256:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8006258:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 800625a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 800625e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8006260:	4798      	blx	r3
        return (float)i / (float)scale;
 8006262:	ee07 0a90 	vmov	s15, r0
 8006266:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800626a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800626e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8006272:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006276:	bd10      	pop	{r4, pc}

08006278 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8006278:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800627c:	4770      	bx	lr

0800627e <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800627e:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8006280:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 8006282:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8006284:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8006288:	b510      	push	{r4, lr}
 800628a:	4604      	mov	r4, r0
        if (i >= 0)
 800628c:	db0e      	blt.n	80062ac <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 800628e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006292:	fb91 f1f2 	sdiv	r1, r1, r2
 8006296:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800629a:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800629c:	b209      	sxth	r1, r1
 800629e:	4620      	mov	r0, r4
 80062a0:	4798      	blx	r3
 80062a2:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80062a6:	fb02 3000 	mla	r0, r2, r0, r3
 80062aa:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80062ac:	f06f 0001 	mvn.w	r0, #1
 80062b0:	fb00 2101 	mla	r1, r0, r1, r2
 80062b4:	3901      	subs	r1, #1
 80062b6:	fb91 f1f2 	sdiv	r1, r1, r2
 80062ba:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80062be:	1049      	asrs	r1, r1, #1
 80062c0:	4249      	negs	r1, r1
 80062c2:	e7eb      	b.n	800629c <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080062c4 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80062c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80062c6:	4770      	bx	lr

080062c8 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80062c8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80062ca:	4770      	bx	lr

080062cc <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80062cc:	6803      	ldr	r3, [r0, #0]
 80062ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80062d2:	4718      	bx	r3

080062d4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80062d4:	6803      	ldr	r3, [r0, #0]
 80062d6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80062da:	4718      	bx	r3

080062dc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80062dc:	6b02      	ldr	r2, [r0, #48]	; 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	4351      	muls	r1, r2
 80062e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80062e6:	4718      	bx	r3

080062e8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062e8:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80062ea:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062ec:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80062f0:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80062f2:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 80062f6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80062fa:	4798      	blx	r3
 80062fc:	462b      	mov	r3, r5
 80062fe:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8006302:	4620      	mov	r0, r4
    }
 8006304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006308:	4718      	bx	r3

0800630a <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 800630a:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 800630e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8006312:	4293      	cmp	r3, r2
 8006314:	db07      	blt.n	8006326 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x1c>
 8006316:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 800631a:	4419      	add	r1, r3
 800631c:	fb91 f0f2 	sdiv	r0, r1, r2
 8006320:	fb02 1110 	mls	r1, r2, r0, r1
 8006324:	b209      	sxth	r1, r1
    }
 8006326:	4608      	mov	r0, r1
 8006328:	4770      	bx	lr

0800632a <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 800632a:	0148      	lsls	r0, r1, #5
 800632c:	4770      	bx	lr

0800632e <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 800632e:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 8006330:	4770      	bx	lr

08006332 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8006332:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006334:	4770      	bx	lr

08006336 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 8006336:	2001      	movs	r0, #1
 8006338:	4770      	bx	lr

0800633a <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 800633a:	4770      	bx	lr

0800633c <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 800633c:	4770      	bx	lr

0800633e <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800633e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8006340:	b118      	cbz	r0, 800634a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8006342:	6803      	ldr	r3, [r0, #0]
 8006344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006348:	4718      	bx	r3
    }
 800634a:	4770      	bx	lr

0800634c <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800634c:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8006350:	b530      	push	{r4, r5, lr}
        return topPadding;
 8006352:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 8006356:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800635a:	4421      	add	r1, r4
 800635c:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006360:	8044      	strh	r4, [r0, #2]
 8006362:	1a52      	subs	r2, r2, r1
 8006364:	2100      	movs	r1, #0
 8006366:	8085      	strh	r5, [r0, #4]
 8006368:	8001      	strh	r1, [r0, #0]
 800636a:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 800636c:	bd30      	pop	{r4, r5, pc}

0800636e <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800636e:	b510      	push	{r4, lr}
 8006370:	8042      	strh	r2, [r0, #2]
 8006372:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8006376:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800637a:	8004      	strh	r4, [r0, #0]
 800637c:	8082      	strh	r2, [r0, #4]
 800637e:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 8006380:	bd10      	pop	{r4, pc}

08006382 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 8006382:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8006384:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8006386:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800638a:	4718      	bx	r3

0800638c <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 800638c:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800638e:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 8006390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006394:	4718      	bx	r3

08006396 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8006396:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 800639a:	4770      	bx	lr

0800639c <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 800639c:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80063a0:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80063a4:	4403      	add	r3, r0
 80063a6:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80063aa:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80063ac:	b200      	sxth	r0, r0
 80063ae:	4770      	bx	lr

080063b0 <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80063b0:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80063b4:	4770      	bx	lr

080063b6 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80063b6:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80063ba:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80063be:	4403      	add	r3, r0
 80063c0:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80063c4:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80063c6:	b200      	sxth	r0, r0
 80063c8:	4770      	bx	lr

080063ca <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 80063ca:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80063cc:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 80063ce:	4611      	mov	r1, r2
 80063d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80063d4:	4718      	bx	r3

080063d6 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 80063d6:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80063da:	b530      	push	{r4, r5, lr}
        return leftPadding;
 80063dc:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80063e0:	186c      	adds	r4, r5, r1
 80063e2:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 80063e6:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80063ea:	1b09      	subs	r1, r1, r4
 80063ec:	2400      	movs	r4, #0
 80063ee:	8005      	strh	r5, [r0, #0]
 80063f0:	8044      	strh	r4, [r0, #2]
 80063f2:	8081      	strh	r1, [r0, #4]
 80063f4:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80063f6:	bd30      	pop	{r4, r5, pc}

080063f8 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80063f8:	8002      	strh	r2, [r0, #0]
 80063fa:	8083      	strh	r3, [r0, #4]
 80063fc:	f9bd 2000 	ldrsh.w	r2, [sp]
 8006400:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8006404:	8042      	strh	r2, [r0, #2]
 8006406:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 8006408:	4770      	bx	lr

0800640a <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 800640a:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800640c:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 800640e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006412:	4718      	bx	r3

08006414 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8006414:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8006416:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 8006418:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800641c:	4718      	bx	r3

0800641e <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800641e:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8006422:	4770      	bx	lr

08006424 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8006424:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8006428:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 800642c:	4403      	add	r3, r0
 800642e:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8006432:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8006434:	b200      	sxth	r0, r0
 8006436:	4770      	bx	lr

08006438 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8006438:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 800643c:	4770      	bx	lr

0800643e <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800643e:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 8006442:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8006446:	4403      	add	r3, r0
 8006448:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 800644c:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800644e:	b200      	sxth	r0, r0
 8006450:	4770      	bx	lr

08006452 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8006452:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8006454:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 8006456:	4611      	mov	r1, r2
 8006458:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800645c:	4718      	bx	r3

0800645e <_ZN8touchgfx21AbstractPainterBitmapD1Ev>:
    }

    /** Destructor */
    virtual ~AbstractPainterBitmap()
    {
    }
 800645e:	4770      	bx	lr

08006460 <_ZN8touchgfx21AbstractPainterBitmap8setTiledEb>:
     *
     * @see setOffset
     */
    virtual void setTiled(bool tiled)
    {
        isTiled = tiled;
 8006460:	7601      	strb	r1, [r0, #24]
    }
 8006462:	4770      	bx	lr

08006464 <_ZN8touchgfx21AbstractPainterBitmap9setOffsetEss>:
     *
     * @see setTiled
     */
    virtual void setOffset(int16_t x, int16_t y)
    {
        xOffset = x;
 8006464:	8281      	strh	r1, [r0, #20]
        yOffset = y;
 8006466:	82c2      	strh	r2, [r0, #22]
    }
 8006468:	4770      	bx	lr

0800646a <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 800646a:	4770      	bx	lr

0800646c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800646c:	4770      	bx	lr

0800646e <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 800646e:	4770      	bx	lr

08006470 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8006470:	4770      	bx	lr

08006472 <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 8006472:	4770      	bx	lr

08006474 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006474:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006476:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006478:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800647a:	68c2      	ldr	r2, [r0, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	1055      	asrs	r5, r2, #1
 8006480:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006484:	07d2      	lsls	r2, r2, #31
 8006486:	bf48      	it	mi
 8006488:	5962      	ldrmi	r2, [r4, r5]
    }
 800648a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800648c:	bf48      	it	mi
 800648e:	58d3      	ldrmi	r3, [r2, r3]
 8006490:	4718      	bx	r3

08006492 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006492:	6843      	ldr	r3, [r0, #4]
 8006494:	b12b      	cbz	r3, 80064a2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8006496:	6883      	ldr	r3, [r0, #8]
 8006498:	b92b      	cbnz	r3, 80064a6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800649a:	68c0      	ldr	r0, [r0, #12]
 800649c:	f000 0001 	and.w	r0, r0, #1
 80064a0:	4770      	bx	lr
 80064a2:	4618      	mov	r0, r3
 80064a4:	4770      	bx	lr
 80064a6:	2001      	movs	r0, #1
    }
 80064a8:	4770      	bx	lr

080064aa <_ZN8touchgfx21AbstractPainterBitmapD0Ev>:
    virtual ~AbstractPainterBitmap()
 80064aa:	b510      	push	{r4, lr}
 80064ac:	4604      	mov	r4, r0
    }
 80064ae:	2120      	movs	r1, #32
 80064b0:	f01f fb1f 	bl	8025af2 <_ZdlPvj>
 80064b4:	4620      	mov	r0, r4
 80064b6:	bd10      	pop	{r4, pc}

080064b8 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	4604      	mov	r4, r0
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	f01f fb18 	bl	8025af2 <_ZdlPvj>
 80064c2:	4620      	mov	r0, r4
 80064c4:	bd10      	pop	{r4, pc}

080064c6 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80064c6:	b510      	push	{r4, lr}
 80064c8:	4604      	mov	r4, r0
 80064ca:	2140      	movs	r1, #64	; 0x40
 80064cc:	f01f fb11 	bl	8025af2 <_ZdlPvj>
 80064d0:	4620      	mov	r0, r4
 80064d2:	bd10      	pop	{r4, pc}

080064d4 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4604      	mov	r4, r0
 80064d8:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80064dc:	f01f fb09 	bl	8025af2 <_ZdlPvj>
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd10      	pop	{r4, pc}

080064e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4604      	mov	r4, r0
 80064e8:	2110      	movs	r1, #16
 80064ea:	f01f fb02 	bl	8025af2 <_ZdlPvj>
 80064ee:	4620      	mov	r0, r4
 80064f0:	bd10      	pop	{r4, pc}

080064f2 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80064f2:	b513      	push	{r0, r1, r4, lr}
 80064f4:	4603      	mov	r3, r0
 80064f6:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80064f8:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80064fc:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80064fe:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006504:	4798      	blx	r3
 8006506:	9901      	ldr	r1, [sp, #4]
 8006508:	4602      	mov	r2, r0
 800650a:	4620      	mov	r0, r4
    }
 800650c:	b002      	add	sp, #8
 800650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006512:	f00c b857 	b.w	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08006516 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8006516:	b513      	push	{r0, r1, r4, lr}
 8006518:	4603      	mov	r3, r0
 800651a:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800651c:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006520:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8006522:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006528:	4798      	blx	r3
 800652a:	9901      	ldr	r1, [sp, #4]
 800652c:	4602      	mov	r2, r0
 800652e:	4620      	mov	r0, r4
    }
 8006530:	b002      	add	sp, #8
 8006532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006536:	f00c b845 	b.w	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800653a <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>:
    virtual void setBitmap(const Bitmap& bmp)
 800653a:	b570      	push	{r4, r5, r6, lr}
        bitmap = bmp;
 800653c:	880b      	ldrh	r3, [r1, #0]
 800653e:	4605      	mov	r5, r0
    virtual void setBitmap(const Bitmap& bmp)
 8006540:	4604      	mov	r4, r0
        bitmap = bmp;
 8006542:	f825 3f04 	strh.w	r3, [r5, #4]!
        bitmapFormat = bitmap.getFormat();
 8006546:	4628      	mov	r0, r5
 8006548:	f013 fa74 	bl	8019a34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800654c:	71a0      	strb	r0, [r4, #6]
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 800654e:	4628      	mov	r0, r5
 8006550:	f013 f900 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8006554:	4606      	mov	r6, r0
 8006556:	4628      	mov	r0, r5
 8006558:	f013 f930 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
        bitmapRect = bitmap.getRect();
 800655c:	2300      	movs	r3, #0
 800655e:	81e0      	strh	r0, [r4, #14]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 8006560:	f104 0008 	add.w	r0, r4, #8
        bitmapRect = bitmap.getRect();
 8006564:	60a3      	str	r3, [r4, #8]
 8006566:	81a6      	strh	r6, [r4, #12]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 8006568:	f00f fc4e 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        bitmapData = bitmap.getData();
 800656c:	4628      	mov	r0, r5
 800656e:	f013 f9dd 	bl	801992c <_ZNK8touchgfx6Bitmap7getDataEv>
 8006572:	6120      	str	r0, [r4, #16]
    }
 8006574:	bd70      	pop	{r4, r5, r6, pc}
	...

08006578 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 800657a:	b510      	push	{r4, lr}
 800657c:	4604      	mov	r4, r0
 800657e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8006580:	f00e f8fe 	bl	8014780 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006584:	4620      	mov	r0, r4
 8006586:	bd10      	pop	{r4, pc}
 8006588:	08029974 	.word	0x08029974

0800658c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <_ZN15Screen1ViewBaseD0Ev+0x20>)
 800658e:	b507      	push	{r0, r1, r2, lr}
 8006590:	6003      	str	r3, [r0, #0]
 8006592:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8006594:	f00e f8f4 	bl	8014780 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006598:	9801      	ldr	r0, [sp, #4]
 800659a:	f243 51d0 	movw	r1, #13776	; 0x35d0
 800659e:	f01f faa8 	bl	8025af2 <_ZdlPvj>
 80065a2:	9801      	ldr	r0, [sp, #4]
 80065a4:	b003      	add	sp, #12
 80065a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80065aa:	bf00      	nop
 80065ac:	08029974 	.word	0x08029974

080065b0 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80065b0:	b508      	push	{r3, lr}
        if (alpha > 0)
 80065b2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80065b6:	b10b      	cbz	r3, 80065bc <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80065b8:	f7fb ff07 	bl	80023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80065bc:	bd08      	pop	{r3, pc}
	...

080065c0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80065c0:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80065c2:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80065c4:	db03      	blt.n	80065ce <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80065c6:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 80065ca:	4294      	cmp	r4, r2
 80065cc:	dc06      	bgt.n	80065dc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80065d0:	f240 6139 	movw	r1, #1593	; 0x639
 80065d4:	4a07      	ldr	r2, [pc, #28]	; (80065f4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80065d6:	4808      	ldr	r0, [pc, #32]	; (80065f8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80065d8:	f01f faba 	bl	8025b50 <__assert_func>
        return yValues[dataIndex(index)];
 80065dc:	6803      	ldr	r3, [r0, #0]
 80065de:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 80065e2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80065e6:	4798      	blx	r3
    }
 80065e8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bf00      	nop
 80065f0:	0802950c 	.word	0x0802950c
 80065f4:	0802952f 	.word	0x0802952f
 80065f8:	0802957e 	.word	0x0802957e

080065fc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80065fc:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 80065fe:	b510      	push	{r4, lr}
 8006600:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8006602:	db03      	blt.n	800660c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8006604:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 8006608:	429a      	cmp	r2, r3
 800660a:	dc06      	bgt.n	800661a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 800660e:	f240 6133 	movw	r1, #1587	; 0x633
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8006614:	4807      	ldr	r0, [pc, #28]	; (8006634 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8006616:	f01f fa9b 	bl	8025b50 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800661a:	6803      	ldr	r3, [r0, #0]
 800661c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006620:	4798      	blx	r3
 8006622:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 8006626:	fb02 3000 	mla	r0, r2, r0, r3
 800662a:	bd10      	pop	{r4, pc}
 800662c:	0802950c 	.word	0x0802950c
 8006630:	080295db 	.word	0x080295db
 8006634:	0802957e 	.word	0x0802957e

08006638 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc1_button)
 8006638:	f200 5044 	addw	r0, r0, #1348	; 0x544
 800663c:	4288      	cmp	r0, r1
{
 800663e:	b508      	push	{r3, lr}
    if (&src == &Sc1_button)
 8006640:	d105      	bne.n	800664e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006642:	f00f fd1b 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc1_button clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 8006646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 800664a:	f7ff bacf 	b.w	8005bec <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 800664e:	bd08      	pop	{r3, pc}

08006650 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8006650:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8006652:	b570      	push	{r4, r5, r6, lr}
 8006654:	4604      	mov	r4, r0
        setX(x);
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8006658:	4615      	mov	r5, r2
        setX(x);
 800665a:	4798      	blx	r3
        setY(y);
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	4620      	mov	r0, r4
 8006660:	4629      	mov	r1, r5
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8006664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8006668:	4718      	bx	r3

0800666a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800666a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800666c:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800666e:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8006670:	f010 ff63 	bl	801753a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8006674:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006676:	462a      	mov	r2, r5
 8006678:	9901      	ldr	r1, [sp, #4]
 800667a:	ea4f 1440 	mov.w	r4, r0, lsl #5
 800667e:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8006682:	db04      	blt.n	800668e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006684:	f010 ff78 	bl	8017578 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8006688:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 800668a:	b003      	add	sp, #12
 800668c:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800668e:	f010 ff73 	bl	8017578 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8006692:	1a20      	subs	r0, r4, r0
 8006694:	e7f9      	b.n	800668a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08006696 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8006696:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006698:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800669c:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800669e:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 80066a2:	1963      	adds	r3, r4, r5
 80066a4:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80066a8:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80066aa:	b22d      	sxth	r5, r5
 80066ac:	442c      	add	r4, r5
 80066ae:	1e69      	subs	r1, r5, #1
 80066b0:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80066b4:	3c01      	subs	r4, #1
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	1af0      	subs	r0, r6, r3
 80066ba:	f7ff ffd6 	bl	800666a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80066be:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80066c2:	bd70      	pop	{r4, r5, r6, pc}

080066c4 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80066ca:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80066ce:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80066d2:	440b      	add	r3, r1
 80066d4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80066d8:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 80066da:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 80066de:	b209      	sxth	r1, r1
 80066e0:	1b52      	subs	r2, r2, r5
 80066e2:	1b40      	subs	r0, r0, r5
 80066e4:	3901      	subs	r1, #1
 80066e6:	f7ff ffc0 	bl	800666a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80066ea:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 80066ee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80066f2:	bd38      	pop	{r3, r4, r5, pc}

080066f4 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
    GraphElementGridBase()
 80066f4:	b510      	push	{r4, lr}
 80066f6:	4604      	mov	r4, r0
        : CanvasWidget()
 80066f8:	f00a ffb6 	bl	8011668 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80066fc:	4a06      	ldr	r2, [pc, #24]	; (8006718 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x24>)
        : color(col)
 80066fe:	2300      	movs	r3, #0
 8006700:	210a      	movs	r1, #10
    }
 8006702:	4620      	mov	r0, r4
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8006704:	6022      	str	r2, [r4, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800670a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 800670e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006710:	e9c4 210c 	strd	r2, r1, [r4, #48]	; 0x30
    }
 8006714:	bd10      	pop	{r4, pc}
 8006716:	bf00      	nop
 8006718:	0802aecc 	.word	0x0802aecc

0800671c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	4604      	mov	r4, r0
        : presenter(0)
 8006722:	2500      	movs	r5, #0
        : bitmapId(id)
 8006724:	f64f 78ff 	movw	r8, #65535	; 0xffff
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006728:	f04f 0b01 	mov.w	fp, #1
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800672c:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
 8006730:	f104 0998 	add.w	r9, r4, #152	; 0x98
 8006734:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
class GraphElementGridY : public GraphElementGridBase
 8006738:	4fe9      	ldr	r7, [pc, #932]	; (8006ae0 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
Screen1ViewBase::Screen1ViewBase() :
 800673a:	ed2d 8b08 	vpush	{d8-d11}
 800673e:	b089      	sub	sp, #36	; 0x24
 8006740:	f011 f8c4 	bl	80178cc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8006744:	4622      	mov	r2, r4
 8006746:	4be7      	ldr	r3, [pc, #924]	; (8006ae4 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 8006748:	a907      	add	r1, sp, #28
 800674a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800674c:	4650      	mov	r0, sl
 800674e:	f842 3b40 	str.w	r3, [r2], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8006752:	4be5      	ldr	r3, [pc, #916]	; (8006ae8 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
 8006754:	9202      	str	r2, [sp, #8]
 8006756:	22ff      	movs	r2, #255	; 0xff
        : Widget(), bitmap(bmp), alpha(255)
 8006758:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
 800675c:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 8006760:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
          visible(true)
 8006764:	6625      	str	r5, [r4, #96]	; 0x60
 8006766:	66a5      	str	r5, [r4, #104]	; 0x68
 8006768:	f8ad 801c 	strh.w	r8, [sp, #28]
        : x(0), y(0), width(0), height(0)
 800676c:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 8006770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006774:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8006778:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800677c:	4bdb      	ldr	r3, [pc, #876]	; (8006aec <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
 800677e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006782:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006784:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8006788:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 800678c:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8006790:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 8006794:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8006798:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
 800679c:	f00d f8eb 	bl	8013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80067a0:	4648      	mov	r0, r9
 80067a2:	f00d f8c1 	bl	8013928 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80067a6:	2164      	movs	r1, #100	; 0x64
 80067a8:	4630      	mov	r0, r6
 80067aa:	f00b fea7 	bl	80124fc <_ZN8touchgfx17AbstractDataGraphC1Es>
 80067ae:	4bd0      	ldr	r3, [pc, #832]	; (8006af0 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80067b0:	2263      	movs	r2, #99	; 0x63
 80067b2:	4629      	mov	r1, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80067b4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 80067b8:	f504 7309 	add.w	r3, r4, #548	; 0x224
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80067bc:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80067be:	e9c4 3586 	strd	r3, r5, [r4, #536]	; 0x218
 80067c2:	e9c4 b584 	strd	fp, r5, [r4, #528]	; 0x210
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80067c6:	f7ff fa8d 	bl	8005ce4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80067ca:	4bca      	ldr	r3, [pc, #808]	; (8006af4 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
        : DynamicDataGraph(capacity, values), current(0)
 80067cc:	f8a4 5220 	strh.w	r5, [r4, #544]	; 0x220
        : GraphScrollData(CAPACITY, y)
 80067d0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80067d4:	f504 736d 	add.w	r3, r4, #948	; 0x3b4
class GraphElementGridX : public GraphElementGridBase
 80067d8:	4618      	mov	r0, r3
 80067da:	ee0a 3a10 	vmov	s20, r3
 80067de:	f7ff ff89 	bl	80066f4 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80067e2:	4bc5      	ldr	r3, [pc, #788]	; (8006af8 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 80067e4:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
 80067e8:	f504 737d 	add.w	r3, r4, #1012	; 0x3f4
class GraphElementGridY : public GraphElementGridBase
 80067ec:	4618      	mov	r0, r3
 80067ee:	ee0a 3a90 	vmov	s21, r3
 80067f2:	f7ff ff7f 	bl	80066f4 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80067f6:	f204 4334 	addw	r3, r4, #1076	; 0x434
 80067fa:	f8c4 73f4 	str.w	r7, [r4, #1012]	; 0x3f4
class GraphElementGridX : public GraphElementGridBase
 80067fe:	4618      	mov	r0, r3
 8006800:	ee08 3a90 	vmov	s17, r3
 8006804:	f7ff ff76 	bl	80066f4 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8006808:	4bbb      	ldr	r3, [pc, #748]	; (8006af8 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 800680a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
 800680e:	f204 4374 	addw	r3, r4, #1140	; 0x474
class GraphElementGridY : public GraphElementGridBase
 8006812:	4618      	mov	r0, r3
 8006814:	ee09 3a10 	vmov	s18, r3
 8006818:	f7ff ff6c 	bl	80066f4 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800681c:	f204 43b4 	addw	r3, r4, #1204	; 0x4b4
 8006820:	f8c4 7474 	str.w	r7, [r4, #1140]	; 0x474
 8006824:	f504 67b0 	add.w	r7, r4, #1408	; 0x580
        : CanvasWidget()
 8006828:	4618      	mov	r0, r3
 800682a:	ee0b 3a10 	vmov	s22, r3
 800682e:	f00a ff1b 	bl	8011668 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : typedTextId(id)
 8006832:	4bb2      	ldr	r3, [pc, #712]	; (8006afc <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
 8006834:	f8a4 84f0 	strh.w	r8, [r4, #1264]	; 0x4f0
 8006838:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800683c:	232e      	movs	r3, #46	; 0x2e
        : color(col)
 800683e:	f8c4 54e0 	str.w	r5, [r4, #1248]	; 0x4e0
 8006842:	f8a4 34f8 	strh.w	r3, [r4, #1272]	; 0x4f8

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 8006846:	4bae      	ldr	r3, [pc, #696]	; (8006b00 <_ZN15Screen1ViewBaseC1Ev+0x3e4>)
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006848:	f8c4 b4e4 	str.w	fp, [r4, #1252]	; 0x4e4
class GraphLabelsY : public GraphLabelsBase
 800684c:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
 8006850:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8006854:	f8c4 54e8 	str.w	r5, [r4, #1256]	; 0x4e8
 8006858:	4618      	mov	r0, r3
 800685a:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
 800685e:	f8a4 54f6 	strh.w	r5, [r4, #1270]	; 0x4f6
 8006862:	ee0b 3a90 	vmov	s23, r3
 8006866:	f8c4 54fc 	str.w	r5, [r4, #1276]	; 0x4fc
 800686a:	f00a fefd 	bl	8011668 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 800686e:	4ba5      	ldr	r3, [pc, #660]	; (8006b04 <_ZN15Screen1ViewBaseC1Ev+0x3e8>)
 8006870:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 8006874:	f04f 0302 	mov.w	r3, #2
 8006878:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 800687c:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8006880:	4618      	mov	r0, r3
 8006882:	9303      	str	r3, [sp, #12]
 8006884:	f7fb ff0a 	bl	800269c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8006888:	4b9f      	ldr	r3, [pc, #636]	; (8006b08 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 800688a:	f8c4 553c 	str.w	r5, [r4, #1340]	; 0x53c
 800688e:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 8006898:	f204 5344 	addw	r3, r4, #1348	; 0x544
 800689c:	4618      	mov	r0, r3
 800689e:	ee08 3a10 	vmov	s16, r3
 80068a2:	f00d f841 	bl	8013928 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80068a6:	4638      	mov	r0, r7
 80068a8:	f009 f92a 	bl	800fb00 <_ZN8touchgfx12LineProgressC1Ev>
 80068ac:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
 80068b0:	f8ad 801c 	strh.w	r8, [sp, #28]
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80068b4:	f104 0804 	add.w	r8, r4, #4
     * Constructor.
     *
     * @param  bmp (Optional) The bitmap to use in the painter.
     */
    PainterRGB565Bitmap(const Bitmap& bmp = Bitmap(BITMAP_INVALID))
        : AbstractPainterRGB565(), AbstractPainterBitmap(bmp)
 80068b8:	4618      	mov	r0, r3
 80068ba:	ee09 3a90 	vmov	s19, r3
 80068be:	f7fb feed 	bl	800269c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 80068c2:	4b92      	ldr	r3, [pc, #584]	; (8006b0c <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
        setBitmap(bmp);
 80068c4:	a907      	add	r1, sp, #28
 80068c6:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 80068ca:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
 80068ce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80068d2:	f884 56c2 	strb.w	r5, [r4, #1730]	; 0x6c2
 80068d6:	f8a4 36c0 	strh.w	r3, [r4, #1728]	; 0x6c0
        : x(0), y(0), width(0), height(0)
 80068da:	f8c4 56c4 	str.w	r5, [r4, #1732]	; 0x6c4
 80068de:	f8c4 56c8 	str.w	r5, [r4, #1736]	; 0x6c8
 80068e2:	f8c4 56cc 	str.w	r5, [r4, #1740]	; 0x6cc
 80068e6:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
 80068ea:	f884 56d4 	strb.w	r5, [r4, #1748]	; 0x6d4
        setBitmap(bmp);
 80068ee:	f7ff fe24 	bl	800653a <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>
 80068f2:	4b87      	ldr	r3, [pc, #540]	; (8006b10 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
        : pobject(pObject), pmemfun(pmemfun_1)
 80068f4:	4a87      	ldr	r2, [pc, #540]	; (8006b14 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80068f6:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
 80068fa:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
 80068fe:	3324      	adds	r3, #36	; 0x24
 8006900:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8006904:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
 8006908:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800690c:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
 8006910:	4a81      	ldr	r2, [pc, #516]	; (8006b18 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
 8006912:	f8c3 45c4 	str.w	r4, [r3, #1476]	; 0x5c4
 8006916:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
 800691a:	f8c3 55cc 	str.w	r5, [r3, #1484]	; 0x5cc
 800691e:	f00d ff25 	bl	801476c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8006922:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006926:	462a      	mov	r2, r5
 8006928:	4629      	mov	r1, r5
 800692a:	9802      	ldr	r0, [sp, #8]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006932:	f7fe ff4f 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8006936:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800693a:	9902      	ldr	r1, [sp, #8]
 800693c:	4640      	mov	r0, r8
 800693e:	66a3      	str	r3, [r4, #104]	; 0x68
 8006940:	f009 fac4 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006944:	462a      	mov	r2, r5
 8006946:	4629      	mov	r1, r5
 8006948:	4650      	mov	r0, sl
 800694a:	f7ff fe81 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_GRADIENT_LIGHT_ID));
 800694e:	a907      	add	r1, sp, #28
 8006950:	4650      	mov	r0, sl
 8006952:	f8ad 501c 	strh.w	r5, [sp, #28]
 8006956:	f00d f80e 	bl	8013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800695a:	4651      	mov	r1, sl
 800695c:	4640      	mov	r0, r8
        setIntervalScaled(abs(interval) * dataScale);
 800695e:	f04f 0a0a 	mov.w	sl, #10
 8006962:	f009 fab3 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc1_button_1.setXY(31, 33);
 8006966:	4648      	mov	r0, r9
 8006968:	2221      	movs	r2, #33	; 0x21
 800696a:	211f      	movs	r1, #31
 800696c:	f7ff fe70 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 8006970:	f04f 0303 	mov.w	r3, #3
 8006974:	f04f 0202 	mov.w	r2, #2
    Sc1_button_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID));
 8006978:	a904      	add	r1, sp, #16
 800697a:	f8ad 3010 	strh.w	r3, [sp, #16]
 800697e:	2307      	movs	r3, #7
 8006980:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006984:	aa06      	add	r2, sp, #24
 8006986:	f8ad 3018 	strh.w	r3, [sp, #24]
 800698a:	4648      	mov	r0, r9
 800698c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006990:	ab07      	add	r3, sp, #28
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	aa05      	add	r2, sp, #20
 8006998:	f00c ff21 	bl	80137de <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 800699c:	221e      	movs	r2, #30
 800699e:	4649      	mov	r1, r9
 80069a0:	4640      	mov	r0, r8
 80069a2:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 80069a6:	f009 fa91 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(161, 135, 639, 345);
 80069aa:	f240 1359 	movw	r3, #345	; 0x159
 80069ae:	4630      	mov	r0, r6
 80069b0:	2287      	movs	r2, #135	; 0x87
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	21a1      	movs	r1, #161	; 0xa1
 80069b6:	f240 237f 	movw	r3, #639	; 0x27f
        color = newColor;
 80069ba:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8006b1c <_ZN15Screen1ViewBaseC1Ev+0x400>
 80069be:	f7fe ff09 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 80069c2:	462a      	mov	r2, r5
 80069c4:	4659      	mov	r1, fp
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff fb40 	bl	800604c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 99);
 80069cc:	4629      	mov	r1, r5
 80069ce:	4630      	mov	r0, r6
 80069d0:	2263      	movs	r2, #99	; 0x63
 80069d2:	f7ff f987 	bl	8005ce4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 80069d6:	221e      	movs	r2, #30
 80069d8:	462b      	mov	r3, r5
 80069da:	4630      	mov	r0, r6
 80069dc:	9200      	str	r2, [sp, #0]
 80069de:	2115      	movs	r1, #21
 80069e0:	225c      	movs	r2, #92	; 0x5c
 80069e2:	f00b fd3d 	bl	8012460 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 80069e6:	462b      	mov	r3, r5
 80069e8:	462a      	mov	r2, r5
 80069ea:	4629      	mov	r1, r5
 80069ec:	4630      	mov	r0, r6
 80069ee:	9500      	str	r5, [sp, #0]
 80069f0:	f00b fc4b 	bl	801228a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 3500);
 80069f4:	4629      	mov	r1, r5
 80069f6:	4630      	mov	r0, r6
 80069f8:	f640 52ac 	movw	r2, #3500	; 0xdac
 80069fc:	f7ff f9fe 	bl	8005dfc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
        setIntervalScaled(abs(interval) * dataScale);
 8006a00:	f8d4 13e4 	ldr.w	r1, [r4, #996]	; 0x3e4
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a04:	465a      	mov	r2, fp
        color = newColor;
 8006a06:	f8c4 93e0 	str.w	r9, [r4, #992]	; 0x3e0
        setIntervalScaled(abs(interval) * dataScale);
 8006a0a:	fb0a f001 	mul.w	r0, sl, r1
        lineWidth = width;
 8006a0e:	f884 b3ec 	strb.w	fp, [r4, #1004]	; 0x3ec
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8006a12:	2800      	cmp	r0, #0
 8006a14:	bfb8      	it	lt
 8006a16:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006a18:	f8c4 03e8 	str.w	r0, [r4, #1000]	; 0x3e8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a1c:	f00b fdd2 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MinorXAxisGrid);
 8006a20:	ee1a 1a10 	vmov	r1, s20
        majorGrid = &major;
 8006a24:	edc4 8afc 	vstr	s17, [r4, #1008]	; 0x3f0
        dataScale = scale;
 8006a28:	e9c4 b0f9 	strd	fp, r0, [r4, #996]	; 0x3e4
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f00b fc37 	bl	80122a0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8006a32:	f8d4 1424 	ldr.w	r1, [r4, #1060]	; 0x424
        color = newColor;
 8006a36:	f8c4 9420 	str.w	r9, [r4, #1056]	; 0x420
        setIntervalScaled(abs(interval) * dataScale);
 8006a3a:	f44f 79fa 	mov.w	r9, #500	; 0x1f4
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a3e:	465a      	mov	r2, fp
        lineWidth = width;
 8006a40:	f884 b42c 	strb.w	fp, [r4, #1068]	; 0x42c
        setIntervalScaled(abs(interval) * dataScale);
 8006a44:	fb09 f001 	mul.w	r0, r9, r1
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	bfb8      	it	lt
 8006a4c:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006a4e:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a52:	f00b fdb7 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8006a56:	ee19 3a10 	vmov	r3, s18
    dynamicGraph1.addGraphElement(dynamicGraph1MinorYAxisGrid);
 8006a5a:	ee1a 1a90 	vmov	r1, s21
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a5e:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
        majorGrid = &major;
 8006a62:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 8006a66:	4630      	mov	r0, r6
        dataScale = scale;
 8006a68:	f8c4 b424 	str.w	fp, [r4, #1060]	; 0x424
 8006a6c:	f00b fc18 	bl	80122a0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8006a70:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
 8006a74:	2032      	movs	r0, #50	; 0x32
        lineWidth = width;
 8006a76:	f04f 0302 	mov.w	r3, #2
        color = newColor;
 8006a7a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006a7e:	4348      	muls	r0, r1
        lineWidth = width;
 8006a80:	f884 346c 	strb.w	r3, [r4, #1132]	; 0x46c
 8006a84:	2800      	cmp	r0, #0
        color = newColor;
 8006a86:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a8a:	465a      	mov	r2, fp
 8006a8c:	bfb8      	it	lt
 8006a8e:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006a90:	f8c4 0468 	str.w	r0, [r4, #1128]	; 0x468
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a94:	f00b fd96 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8006a98:	ee18 1a90 	vmov	r1, s17
 8006a9c:	f8c4 0468 	str.w	r0, [r4, #1128]	; 0x468
 8006aa0:	4630      	mov	r0, r6
        dataScale = scale;
 8006aa2:	f8c4 b464 	str.w	fp, [r4, #1124]	; 0x464
 8006aa6:	f00b fbfb 	bl	80122a0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8006aaa:	f8d4 14a4 	ldr.w	r1, [r4, #1188]	; 0x4a4
 8006aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        lineWidth = width;
 8006ab2:	f04f 0302 	mov.w	r3, #2
        color = newColor;
 8006ab6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006aba:	4348      	muls	r0, r1
        lineWidth = width;
 8006abc:	f884 34ac 	strb.w	r3, [r4, #1196]	; 0x4ac
 8006ac0:	2800      	cmp	r0, #0
        color = newColor;
 8006ac2:	f8c4 24a0 	str.w	r2, [r4, #1184]	; 0x4a0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006ac6:	465a      	mov	r2, fp
 8006ac8:	bfb8      	it	lt
 8006aca:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006acc:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006ad0:	f00b fd78 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8006ad4:	ee19 1a10 	vmov	r1, s18
 8006ad8:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
 8006adc:	e020      	b.n	8006b20 <_ZN15Screen1ViewBaseC1Ev+0x404>
 8006ade:	bf00      	nop
 8006ae0:	080296ec 	.word	0x080296ec
 8006ae4:	08029974 	.word	0x08029974
 8006ae8:	0802b028 	.word	0x0802b028
 8006aec:	0802b108 	.word	0x0802b108
 8006af0:	0802ab88 	.word	0x0802ab88
 8006af4:	080297c0 	.word	0x080297c0
 8006af8:	08029634 	.word	0x08029634
 8006afc:	08028e1c 	.word	0x08028e1c
 8006b00:	0802af88 	.word	0x0802af88
 8006b04:	0802ae50 	.word	0x0802ae50
 8006b08:	0802a94c 	.word	0x0802a94c
 8006b0c:	080297a4 	.word	0x080297a4
 8006b10:	0802a90c 	.word	0x0802a90c
 8006b14:	0802995c 	.word	0x0802995c
 8006b18:	08006639 	.word	0x08006639
 8006b1c:	ff1e1e1e 	.word	0xff1e1e1e
 8006b20:	4630      	mov	r0, r6
        dataScale = scale;
 8006b22:	f8c4 b4a4 	str.w	fp, [r4, #1188]	; 0x4a4
 8006b26:	f00b fbbb 	bl	80122a0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8006b2a:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        color = newColor;
 8006b2e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        return i * scale;
 8006b32:	fb09 f001 	mul.w	r0, r9, r1
class TypedText
 8006b36:	f04f 0905 	mov.w	r9, #5
 8006b3a:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006b3e:	465a      	mov	r2, fp
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f8a4 94f0 	strh.w	r9, [r4, #1264]	; 0x4f0
 8006b46:	bfb8      	it	lt
 8006b48:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006b4a:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006b4e:	f00b fd39 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8006b52:	ee1b 1a10 	vmov	r1, s22
 8006b56:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
 8006b5a:	4630      	mov	r0, r6
        dataScale = scale;
 8006b5c:	f8c4 b4e4 	str.w	fp, [r4, #1252]	; 0x4e4
 8006b60:	f00b fbb0 	bl	80122c4 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8006b64:	4b44      	ldr	r3, [pc, #272]	; (8006c78 <_ZN15Screen1ViewBaseC1Ev+0x55c>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8006b66:	ee1b 1a90 	vmov	r1, s23
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f8c4 353c 	str.w	r3, [r4, #1340]	; 0x53c
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8006b70:	f24f 0327 	movw	r3, #61479	; 0xf027
 8006b74:	f8a4 3540 	strh.w	r3, [r4, #1344]	; 0x540
        canvasPainter = &painter;
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8006b7e:	f04f 0302 	mov.w	r3, #2
 8006b82:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 8006b86:	f00b fb8b 	bl	80122a0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4640      	mov	r0, r8
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006b8e:	f44f 7696 	mov.w	r6, #300	; 0x12c
 8006b92:	f009 f99b 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc1_button.setXY(661, 33);
 8006b96:	ee18 0a10 	vmov	r0, s16
 8006b9a:	2221      	movs	r2, #33	; 0x21
 8006b9c:	f240 2195 	movw	r1, #661	; 0x295
 8006ba0:	f7ff fd56 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 8006ba4:	f04f 0303 	mov.w	r3, #3
    Sc1_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID));
 8006ba8:	aa05      	add	r2, sp, #20
 8006baa:	a904      	add	r1, sp, #16
 8006bac:	f8ad 3010 	strh.w	r3, [sp, #16]
 8006bb0:	f04f 0302 	mov.w	r3, #2
 8006bb4:	ee18 0a10 	vmov	r0, s16
 8006bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bbc:	2306      	movs	r3, #6
 8006bbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006bc2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006bc6:	ab07      	add	r3, sp, #28
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	ab06      	add	r3, sp, #24
 8006bcc:	f00c fe07 	bl	80137de <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8006bd0:	231e      	movs	r3, #30
 8006bd2:	ee18 1a10 	vmov	r1, s16
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f8c4 357c 	str.w	r3, [r4, #1404]	; 0x57c
    Sc1_button.setAction(buttonCallback);
 8006bdc:	f504 5357 	add.w	r3, r4, #13760	; 0x35c0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8006be0:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
 8006be4:	f009 f972 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lineProgress1.setXY(100, 159);
 8006be8:	4638      	mov	r0, r7
 8006bea:	229f      	movs	r2, #159	; 0x9f
 8006bec:	2164      	movs	r1, #100	; 0x64
 8006bee:	f7ff fd2f 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006bf2:	4653      	mov	r3, sl
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	9600      	str	r6, [sp, #0]
 8006bfc:	f008 ff67 	bl	800face <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 3500);
 8006c00:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006c04:	462b      	mov	r3, r5
 8006c06:	4629      	mov	r1, r5
 8006c08:	4638      	mov	r0, r7
 8006c0a:	9500      	str	r5, [sp, #0]
 8006c0c:	f008 ffaa 	bl	800fb64 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
 8006c10:	2304      	movs	r3, #4
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_BACKGROUNDS_IMAGE_PLAIN_NORMAL_MEDIUM_90_ID));
 8006c12:	a907      	add	r1, sp, #28
 8006c14:	4638      	mov	r0, r7
 8006c16:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006c1a:	f009 f8ea 	bl	800fdf2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_NORMAL_MEDIUM_ACTION_90_ID));
 8006c1e:	a907      	add	r1, sp, #28
 8006c20:	ee19 0a90 	vmov	r0, s19
 8006c24:	f8ad 901c 	strh.w	r9, [sp, #28]
 8006c28:	f00a fc20 	bl	801146c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    lineProgress1.setPainter(lineProgress1Painter);
 8006c2c:	ee19 1a90 	vmov	r1, s19
 8006c30:	4638      	mov	r0, r7
 8006c32:	f008 fead 	bl	800f990 <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(5, 300);
 8006c36:	4632      	mov	r2, r6
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f008 fed3 	bl	800f9e6 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(5, 0);
 8006c40:	462a      	mov	r2, r5
 8006c42:	4649      	mov	r1, r9
 8006c44:	4638      	mov	r0, r7
 8006c46:	f008 feb3 	bl	800f9b0 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(10);
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f008 fed1 	bl	800f9f4 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8006c52:	4629      	mov	r1, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	f008 fed8 	bl	800fa0a <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(300);
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f008 feea 	bl	800fa36 <_ZN8touchgfx12LineProgress8setValueEi>
 8006c62:	4640      	mov	r0, r8
 8006c64:	4639      	mov	r1, r7
 8006c66:	f009 f931 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	b009      	add	sp, #36	; 0x24
 8006c6e:	ecbd 8b08 	vpop	{d8-d11}
 8006c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c76:	bf00      	nop
 8006c78:	fff20538 	.word	0xfff20538

08006c7c <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8006c7c:	b530      	push	{r4, r5, lr}
 8006c7e:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8006c80:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8006c82:	4604      	mov	r4, r0
        rect.width = width;
 8006c84:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8006c86:	466d      	mov	r5, sp
 8006c88:	4601      	mov	r1, r0
 8006c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8e:	343c      	adds	r4, #60	; 0x3c
 8006c90:	4628      	mov	r0, r5
 8006c92:	4798      	blx	r3
 8006c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8006c9c:	b005      	add	sp, #20
 8006c9e:	bd30      	pop	{r4, r5, pc}

08006ca0 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8006ca0:	b530      	push	{r4, r5, lr}
 8006ca2:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8006ca4:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8006ca6:	4604      	mov	r4, r0
        rect.height = height;
 8006ca8:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8006caa:	466d      	mov	r5, sp
 8006cac:	4601      	mov	r1, r0
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb2:	343c      	adds	r4, #60	; 0x3c
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	4798      	blx	r3
 8006cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8006cc0:	b005      	add	sp, #20
 8006cc2:	bd30      	pop	{r4, r5, pc}

08006cc4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	8002      	strh	r2, [r0, #0]
 8006cc8:	8042      	strh	r2, [r0, #2]
 8006cca:	8082      	strh	r2, [r0, #4]
 8006ccc:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8006cce:	4770      	bx	lr

08006cd0 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8006cd0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8006cd4:	4770      	bx	lr

08006cd6 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8006cd6:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4604      	mov	r4, r0
        setX(x);
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8006cde:	4615      	mov	r5, r2
        setX(x);
 8006ce0:	4798      	blx	r3
        setBaselineY(baselineY);
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8006cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8006cee:	4718      	bx	r3

08006cf0 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4770      	bx	lr

08006cf4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8006cf4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006cf6:	4770      	bx	lr

08006cf8 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8006cf8:	4770      	bx	lr

08006cfa <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8006cfa:	4770      	bx	lr

08006cfc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006cfc:	4770      	bx	lr

08006cfe <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006cfe:	4770      	bx	lr

08006d00 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006d00:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006d02:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006d04:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006d06:	68c2      	ldr	r2, [r0, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	1055      	asrs	r5, r2, #1
 8006d0c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006d10:	07d2      	lsls	r2, r2, #31
 8006d12:	bf48      	it	mi
 8006d14:	5962      	ldrmi	r2, [r4, r5]
    }
 8006d16:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006d18:	bf48      	it	mi
 8006d1a:	58d3      	ldrmi	r3, [r2, r3]
 8006d1c:	4718      	bx	r3

08006d1e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006d1e:	6843      	ldr	r3, [r0, #4]
 8006d20:	b12b      	cbz	r3, 8006d2e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8006d22:	6883      	ldr	r3, [r0, #8]
 8006d24:	b92b      	cbnz	r3, 8006d32 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006d26:	68c0      	ldr	r0, [r0, #12]
 8006d28:	f000 0001 	and.w	r0, r0, #1
 8006d2c:	4770      	bx	lr
 8006d2e:	4618      	mov	r0, r3
 8006d30:	4770      	bx	lr
 8006d32:	2001      	movs	r0, #1
    }
 8006d34:	4770      	bx	lr

08006d36 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8006d36:	b510      	push	{r4, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	214c      	movs	r1, #76	; 0x4c
 8006d3c:	f01e fed9 	bl	8025af2 <_ZdlPvj>
 8006d40:	4620      	mov	r0, r4
 8006d42:	bd10      	pop	{r4, pc}

08006d44 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d44:	b510      	push	{r4, lr}
 8006d46:	4604      	mov	r4, r0
 8006d48:	2110      	movs	r1, #16
 8006d4a:	f01e fed2 	bl	8025af2 <_ZdlPvj>
 8006d4e:	4620      	mov	r0, r4
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8006d52:	b510      	push	{r4, lr}
 8006d54:	4604      	mov	r4, r0
}
 8006d56:	f44f 7119 	mov.w	r1, #612	; 0x264
 8006d5a:	f01e feca 	bl	8025af2 <_ZdlPvj>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8006d62:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8006d64:	f7fb fb31 	bl	80023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8006d68:	bd08      	pop	{r3, pc}
	...

08006d6c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006d6c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8006d6e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006d70:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8006d72:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006d74:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006d76:	b28d      	uxth	r5, r1
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	b92b      	cbnz	r3, 8006d88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8006d7e:	216c      	movs	r1, #108	; 0x6c
 8006d80:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006d82:	4811      	ldr	r0, [pc, #68]	; (8006dc8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8006d84:	f01e fee4 	bl	8025b50 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8006d88:	4910      	ldr	r1, [pc, #64]	; (8006dcc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8006d8a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006d8c:	8809      	ldrh	r1, [r1, #0]
 8006d8e:	4291      	cmp	r1, r2
 8006d90:	d803      	bhi.n	8006d9a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8006d94:	216d      	movs	r1, #109	; 0x6d
 8006d96:	4a0b      	ldr	r2, [pc, #44]	; (8006dc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8006d98:	e7f3      	b.n	8006d82 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8006d9a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006da6:	6803      	ldr	r3, [r0, #0]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	4798      	blx	r3
 8006dac:	1a28      	subs	r0, r5, r0
 8006dae:	4633      	mov	r3, r6
 8006db0:	b201      	sxth	r1, r0
 8006db2:	4620      	mov	r0, r4
    }
 8006db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006db8:	4718      	bx	r3
 8006dba:	bf00      	nop
 8006dbc:	20027bf8 	.word	0x20027bf8
 8006dc0:	080299a0 	.word	0x080299a0
 8006dc4:	080299e2 	.word	0x080299e2
 8006dc8:	08029a1d 	.word	0x08029a1d
 8006dcc:	20027bfc 	.word	0x20027bfc
 8006dd0:	08029a64 	.word	0x08029a64
 8006dd4:	20027c00 	.word	0x20027c00

08006dd8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc2_button)
 8006dd8:	3098      	adds	r0, #152	; 0x98
 8006dda:	4288      	cmp	r0, r1
{
 8006ddc:	b508      	push	{r3, lr}
    if (&src == &Sc2_button)
 8006dde:	d105      	bne.n	8006dec <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006de0:	f00f f94c 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc2_button clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenCoverTransitionWest();
    }
}
 8006de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenCoverTransitionWest();
 8006de8:	f7fe bef0 	b.w	8005bcc <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>
}
 8006dec:	bd08      	pop	{r3, pc}

08006dee <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8006dee:	2200      	movs	r2, #0
 8006df0:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8006df4:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8006df6:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8006dfa:	4770      	bx	lr

08006dfc <_ZN8touchgfx6WidgetC1Ev>:
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8006e02:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 8006e06:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8006e0a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8006e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e12:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8006e14:	4a01      	ldr	r2, [pc, #4]	; (8006e1c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006e16:	6002      	str	r2, [r0, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	08029aac 	.word	0x08029aac

08006e20 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006e24:	2226      	movs	r2, #38	; 0x26
 8006e26:	2100      	movs	r1, #0
 8006e28:	f01f f818 	bl	8025e5c <memset>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff ffe5 	bl	8006dfc <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 8006e32:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 8006e34:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8006e38:	4620      	mov	r0, r4
 8006e3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e40:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8006e42:	2300      	movs	r3, #0
 8006e44:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 8006e48:	4a05      	ldr	r2, [pc, #20]	; (8006e60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 8006e4a:	8723      	strh	r3, [r4, #56]	; 0x38
 8006e4c:	6022      	str	r2, [r4, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006e54:	64a3      	str	r3, [r4, #72]	; 0x48
              text(0)
 8006e56:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8006e5a:	bd10      	pop	{r4, pc}
 8006e5c:	08028e1c 	.word	0x08028e1c
 8006e60:	08029b14 	.word	0x08029b14

08006e64 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	4604      	mov	r4, r0
 8006e6a:	2500      	movs	r5, #0
        : Widget(), alpha(255), color(0)
 8006e6c:	26ff      	movs	r6, #255	; 0xff
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006e6e:	46a1      	mov	r9, r4
 8006e70:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8006e74:	f104 0b98 	add.w	fp, r4, #152	; 0x98
 8006e78:	f104 0ad4 	add.w	sl, r4, #212	; 0xd4
Screen2ViewBase::Screen2ViewBase() :
 8006e7c:	ed2d 8b04 	vpush	{d8-d9}
 8006e80:	b08d      	sub	sp, #52	; 0x34
 8006e82:	f010 fd23 	bl	80178cc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006e86:	4bb2      	ldr	r3, [pc, #712]	; (8007150 <_ZN15Screen2ViewBaseC1Ev+0x2ec>)
 8006e88:	4629      	mov	r1, r5
 8006e8a:	2226      	movs	r2, #38	; 0x26
 8006e8c:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006e8e:	af0a      	add	r7, sp, #40	; 0x28
 8006e90:	f849 3b40 	str.w	r3, [r9], #64
 8006e94:	4648      	mov	r0, r9
 8006e96:	f01e ffe1 	bl	8025e5c <memset>
 8006e9a:	4648      	mov	r0, r9
 8006e9c:	f7ff ffae 	bl	8006dfc <_ZN8touchgfx6WidgetC1Ev>
 8006ea0:	4bac      	ldr	r3, [pc, #688]	; (8007154 <_ZN15Screen2ViewBaseC1Ev+0x2f0>)
        : Widget(), bitmap(bmp), alpha(255)
 8006ea2:	2226      	movs	r2, #38	; 0x26
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	6423      	str	r3, [r4, #64]	; 0x40
 8006ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eac:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8006eb0:	4640      	mov	r0, r8
        : color(col)
 8006eb2:	66a5      	str	r5, [r4, #104]	; 0x68
 8006eb4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006eb8:	f01e ffd0 	bl	8025e5c <memset>
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	f7ff ff9d 	bl	8006dfc <_ZN8touchgfx6WidgetC1Ev>
 8006ec2:	4ba5      	ldr	r3, [pc, #660]	; (8007158 <_ZN15Screen2ViewBaseC1Ev+0x2f4>)
        Image::setBitmap(bmp);
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8006ec8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006eca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8006ece:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 8006ed2:	1d26      	adds	r6, r4, #4
 8006ed4:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8006ed8:	f00c fd4d 	bl	8013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006edc:	4658      	mov	r0, fp
 8006ede:	f00c fd23 	bl	8013928 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	f7ff ff9c 	bl	8006e20 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ee8:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8006eec:	4618      	mov	r0, r3
 8006eee:	ee08 3a10 	vmov	s16, r3
 8006ef2:	f7ff ff95 	bl	8006e20 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ef6:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8006efa:	4618      	mov	r0, r3
 8006efc:	ee08 3a90 	vmov	s17, r3
 8006f00:	f7ff ff8e 	bl	8006e20 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f04:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8006f08:	4618      	mov	r0, r3
 8006f0a:	ee09 3a10 	vmov	s18, r3
 8006f0e:	f7ff ff87 	bl	8006e20 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006f12:	4b92      	ldr	r3, [pc, #584]	; (800715c <_ZN15Screen2ViewBaseC1Ev+0x2f8>)
    __background.setPosition(0, 0, 800, 480);
 8006f14:	462a      	mov	r2, r5
 8006f16:	4629      	mov	r1, r5
 8006f18:	4648      	mov	r0, r9
 8006f1a:	e9c4 3495 	strd	r3, r4, [r4, #596]	; 0x254
 8006f1e:	4b90      	ldr	r3, [pc, #576]	; (8007160 <_ZN15Screen2ViewBaseC1Ev+0x2fc>)
 8006f20:	e9c4 3597 	strd	r3, r5, [r4, #604]	; 0x25c
 8006f24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f2e:	f7fe fc51 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006f32:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8006f36:	4649      	mov	r1, r9
 8006f38:	4630      	mov	r0, r6
 8006f3a:	66a3      	str	r3, [r4, #104]	; 0x68
 8006f3c:	f008 ffc6 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006f40:	462a      	mov	r2, r5
 8006f42:	4629      	mov	r1, r5
 8006f44:	4640      	mov	r0, r8
 8006f46:	f7ff fb83 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 8006f4a:	f04f 0301 	mov.w	r3, #1
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_WAVES_ID));
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4640      	mov	r0, r8
 8006f52:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006f56:	f00c fd0e 	bl	8013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f008 ffb5 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc2_button.setXY(33, 31);
 8006f62:	4658      	mov	r0, fp
 8006f64:	221f      	movs	r2, #31
 8006f66:	2121      	movs	r1, #33	; 0x21
 8006f68:	f7ff fb72 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 8006f6c:	2307      	movs	r3, #7
 8006f6e:	f04f 0203 	mov.w	r2, #3
 8006f72:	f04f 0102 	mov.w	r1, #2
    Sc2_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID));
 8006f76:	4658      	mov	r0, fp
 8006f78:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8006f7c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8006f80:	aa08      	add	r2, sp, #32
 8006f82:	f8ad 1020 	strh.w	r1, [sp, #32]
 8006f86:	a907      	add	r1, sp, #28
 8006f88:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006f8c:	ab09      	add	r3, sp, #36	; 0x24
 8006f8e:	9700      	str	r7, [sp, #0]
        boundingArea = calculateBoundingArea();
 8006f90:	f10d 0808 	add.w	r8, sp, #8
 8006f94:	f00c fc23 	bl	80137de <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8006f98:	231e      	movs	r3, #30
 8006f9a:	4659      	mov	r1, fp
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    Sc2_button.setAction(buttonCallback);
 8006fa2:	f504 7315 	add.w	r3, r4, #596	; 0x254
        color = newColor;
 8006fa6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8007164 <_ZN15Screen2ViewBaseC1Ev+0x300>
 8006faa:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8006fae:	f008 ff8d 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaTemp.setPosition(33, 132, 727, 73);
 8006fb2:	2349      	movs	r3, #73	; 0x49
 8006fb4:	2284      	movs	r2, #132	; 0x84
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	2121      	movs	r1, #33	; 0x21
 8006fbc:	f240 23d7 	movw	r3, #727	; 0x2d7
 8006fc0:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8007168 <_ZN15Screen2ViewBaseC1Ev+0x304>
 8006fc4:	f7fe fc06 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 8006fc8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8006fcc:	4651      	mov	r1, sl
 8006fce:	4640      	mov	r0, r8
 8006fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 8006fd4:	f8c4 9104 	str.w	r9, [r4, #260]	; 0x104
        linespace = space;
 8006fd8:	f8a4 5108 	strh.w	r5, [r4, #264]	; 0x108
        boundingArea = calculateBoundingArea();
 8006fdc:	4798      	blx	r3
 8006fde:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8006fe2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaTemp.setWildcard(textAreaTempBuffer);
 8006fea:	f504 7301 	add.w	r3, r4, #516	; 0x204
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4650      	mov	r0, sl
    textAreaTempBuffer[0] = 0;
 8006ff2:	f8a4 5204 	strh.w	r5, [r4, #516]	; 0x204
        wc1 = value;
 8006ff6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007000:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 8007004:	f00c fb12 	bl	801362c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007008:	4651      	mov	r1, sl
    textAreaHumi.setPosition(33, 205, 727, 70);
 800700a:	f04f 0a46 	mov.w	sl, #70	; 0x46
 800700e:	4630      	mov	r0, r6
 8007010:	f008 ff5c 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007014:	22cd      	movs	r2, #205	; 0xcd
 8007016:	ee18 0a10 	vmov	r0, s16
 800701a:	f240 23d7 	movw	r3, #727	; 0x2d7
 800701e:	2121      	movs	r1, #33	; 0x21
 8007020:	f8cd a000 	str.w	sl, [sp]
 8007024:	f7fe fbd6 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007028:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800702c:	ee18 1a10 	vmov	r1, s16
 8007030:	4640      	mov	r0, r8
 8007032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 8007036:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
        linespace = space;
 800703a:	f8a4 5154 	strh.w	r5, [r4, #340]	; 0x154
        boundingArea = calculateBoundingArea();
 800703e:	4798      	blx	r3
 8007040:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
 8007044:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007048:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaHumi.setWildcard(textAreaHumiBuffer);
 800704c:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8007050:	f04f 0203 	mov.w	r2, #3
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 8007054:	4639      	mov	r1, r7
 8007056:	ee18 0a10 	vmov	r0, s16
 800705a:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
    textAreaHumiBuffer[0] = 0;
 800705e:	f8a4 5218 	strh.w	r5, [r4, #536]	; 0x218
 8007062:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8007066:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 800706a:	f00c fadf 	bl	801362c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800706e:	ee18 1a10 	vmov	r1, s16
 8007072:	4630      	mov	r0, r6
 8007074:	f008 ff2a 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaPres.setPosition(33, 275, 727, 70);
 8007078:	f240 1213 	movw	r2, #275	; 0x113
 800707c:	ee18 0a90 	vmov	r0, s17
 8007080:	f240 23d7 	movw	r3, #727	; 0x2d7
 8007084:	2121      	movs	r1, #33	; 0x21
 8007086:	f8cd a000 	str.w	sl, [sp]
 800708a:	f7fe fba3 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 800708e:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8007092:	ee18 1a90 	vmov	r1, s17
 8007096:	4640      	mov	r0, r8
 8007098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 800709c:	f8c4 919c 	str.w	r9, [r4, #412]	; 0x19c
        linespace = space;
 80070a0:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
        boundingArea = calculateBoundingArea();
 80070a4:	4798      	blx	r3
 80070a6:	f504 73d4 	add.w	r3, r4, #424	; 0x1a8
 80070aa:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80070ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaPres.setWildcard(textAreaPresBuffer);
 80070b2:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 80070b6:	f04f 0102 	mov.w	r1, #2
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 80070ba:	ee18 0a90 	vmov	r0, s17
    textAreaPresBuffer[0] = 0;
 80070be:	f8a4 522c 	strh.w	r5, [r4, #556]	; 0x22c
 80070c2:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 80070c6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 80070ca:	4639      	mov	r1, r7
 80070cc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80070d0:	f00c faac 	bl	801362c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80070d4:	ee18 1a90 	vmov	r1, s17
 80070d8:	4630      	mov	r0, r6
 80070da:	f008 fef7 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaGas.setPosition(33, 345, 727, 70);
 80070de:	f240 1259 	movw	r2, #345	; 0x159
 80070e2:	ee19 0a10 	vmov	r0, s18
 80070e6:	f240 23d7 	movw	r3, #727	; 0x2d7
 80070ea:	2121      	movs	r1, #33	; 0x21
 80070ec:	f8cd a000 	str.w	sl, [sp]
 80070f0:	f7fe fb70 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80070f4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80070f8:	ee19 1a10 	vmov	r1, s18
 80070fc:	4640      	mov	r0, r8
 80070fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 8007102:	f8c4 91e8 	str.w	r9, [r4, #488]	; 0x1e8
        linespace = space;
 8007106:	f8a4 51ec 	strh.w	r5, [r4, #492]	; 0x1ec
        boundingArea = calculateBoundingArea();
 800710a:	4798      	blx	r3
 800710c:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8007110:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007114:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaGas.setWildcard(textAreaGasBuffer);
 8007118:	f504 7310 	add.w	r3, r4, #576	; 0x240
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 800711c:	4639      	mov	r1, r7
 800711e:	ee19 0a10 	vmov	r0, s18
    textAreaGasBuffer[0] = 0;
 8007122:	f8a4 5240 	strh.w	r5, [r4, #576]	; 0x240
 8007126:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
 800712a:	f04f 0301 	mov.w	r3, #1
 800712e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007132:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 8007136:	f00c fa79 	bl	801362c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800713a:	4630      	mov	r0, r6
 800713c:	ee19 1a10 	vmov	r1, s18
 8007140:	f008 fec4 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007144:	4620      	mov	r0, r4
 8007146:	b00d      	add	sp, #52	; 0x34
 8007148:	ecbd 8b04 	vpop	{d8-d9}
 800714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	08029bbc 	.word	0x08029bbc
 8007154:	0802b028 	.word	0x0802b028
 8007158:	0802b108 	.word	0x0802b108
 800715c:	08029ba4 	.word	0x08029ba4
 8007160:	08006dd9 	.word	0x08006dd9
 8007164:	fff0f0f0 	.word	0xfff0f0f0
 8007168:	08028e1c 	.word	0x08028e1c

0800716c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800716c:	4770      	bx	lr
	...

08007170 <_Z23getFont_verdana_20_4bppv>:
{
 8007170:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007172:	4d17      	ldr	r5, [pc, #92]	; (80071d0 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8007174:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007176:	782c      	ldrb	r4, [r5, #0]
 8007178:	f3bf 8f5b 	dmb	ish
 800717c:	f014 0401 	ands.w	r4, r4, #1
 8007180:	d122      	bne.n	80071c8 <_Z23getFont_verdana_20_4bppv+0x58>
 8007182:	4628      	mov	r0, r5
 8007184:	f01e fcb7 	bl	8025af6 <__cxa_guard_acquire>
 8007188:	b1f0      	cbz	r0, 80071c8 <_Z23getFont_verdana_20_4bppv+0x58>
 800718a:	233f      	movs	r3, #63	; 0x3f
 800718c:	2215      	movs	r2, #21
 800718e:	4911      	ldr	r1, [pc, #68]	; (80071d4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8007194:	4811      	ldr	r0, [pc, #68]	; (80071dc <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007196:	9308      	str	r3, [sp, #32]
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <_Z23getFont_verdana_20_4bppv+0x70>)
 800719a:	940a      	str	r4, [sp, #40]	; 0x28
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	2301      	movs	r3, #1
 80071a0:	9401      	str	r4, [sp, #4]
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80071a8:	2304      	movs	r3, #4
 80071aa:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80071ae:	2314      	movs	r3, #20
 80071b0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	2318      	movs	r3, #24
 80071b8:	f7fe fd5a 	bl	8005c70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80071bc:	4809      	ldr	r0, [pc, #36]	; (80071e4 <_Z23getFont_verdana_20_4bppv+0x74>)
 80071be:	f01e fce5 	bl	8025b8c <atexit>
 80071c2:	4628      	mov	r0, r5
 80071c4:	f01e fca3 	bl	8025b0e <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80071c8:	4804      	ldr	r0, [pc, #16]	; (80071dc <_Z23getFont_verdana_20_4bppv+0x6c>)
 80071ca:	b00f      	add	sp, #60	; 0x3c
 80071cc:	bd30      	pop	{r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	20012410 	.word	0x20012410
 80071d4:	90309704 	.word	0x90309704
 80071d8:	0802b674 	.word	0x0802b674
 80071dc:	20012414 	.word	0x20012414
 80071e0:	0802b74c 	.word	0x0802b74c
 80071e4:	0800716d 	.word	0x0800716d

080071e8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80071e8:	4770      	bx	lr
	...

080071ec <_Z23getFont_verdana_30_4bppv>:
{
 80071ec:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80071ee:	4d17      	ldr	r5, [pc, #92]	; (800724c <_Z23getFont_verdana_30_4bppv+0x60>)
{
 80071f0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 15, 35, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80071f2:	782c      	ldrb	r4, [r5, #0]
 80071f4:	f3bf 8f5b 	dmb	ish
 80071f8:	f014 0401 	ands.w	r4, r4, #1
 80071fc:	d122      	bne.n	8007244 <_Z23getFont_verdana_30_4bppv+0x58>
 80071fe:	4628      	mov	r0, r5
 8007200:	f01e fc79 	bl	8025af6 <__cxa_guard_acquire>
 8007204:	b1f0      	cbz	r0, 8007244 <_Z23getFont_verdana_30_4bppv+0x58>
 8007206:	233f      	movs	r3, #63	; 0x3f
 8007208:	2201      	movs	r2, #1
 800720a:	4911      	ldr	r1, [pc, #68]	; (8007250 <_Z23getFont_verdana_30_4bppv+0x64>)
 800720c:	9309      	str	r3, [sp, #36]	; 0x24
 800720e:	4b11      	ldr	r3, [pc, #68]	; (8007254 <_Z23getFont_verdana_30_4bppv+0x68>)
 8007210:	4811      	ldr	r0, [pc, #68]	; (8007258 <_Z23getFont_verdana_30_4bppv+0x6c>)
 8007212:	9308      	str	r3, [sp, #32]
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <_Z23getFont_verdana_30_4bppv+0x70>)
 8007216:	940a      	str	r4, [sp, #40]	; 0x28
 8007218:	9405      	str	r4, [sp, #20]
 800721a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800721e:	2304      	movs	r3, #4
 8007220:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007224:	231e      	movs	r3, #30
 8007226:	220f      	movs	r2, #15
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2323      	movs	r3, #35	; 0x23
 800722c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007230:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007234:	f7fe fd1c 	bl	8005c70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007238:	4809      	ldr	r0, [pc, #36]	; (8007260 <_Z23getFont_verdana_30_4bppv+0x74>)
 800723a:	f01e fca7 	bl	8025b8c <atexit>
 800723e:	4628      	mov	r0, r5
 8007240:	f01e fc65 	bl	8025b0e <__cxa_guard_release>
    return verdana_30_4bpp;
}
 8007244:	4804      	ldr	r0, [pc, #16]	; (8007258 <_Z23getFont_verdana_30_4bppv+0x6c>)
 8007246:	b00f      	add	sp, #60	; 0x3c
 8007248:	bd30      	pop	{r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	20012440 	.word	0x20012440
 8007250:	9030982c 	.word	0x9030982c
 8007254:	0802b6a4 	.word	0x0802b6a4
 8007258:	20012444 	.word	0x20012444
 800725c:	0802b750 	.word	0x0802b750
 8007260:	080071e9 	.word	0x080071e9

08007264 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_60_4bpp();

touchgfx::GeneratedFont& getFont_verdana_60_4bpp()
{
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8007264:	4770      	bx	lr
	...

08007268 <_Z23getFont_verdana_60_4bppv>:
{
 8007268:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 800726a:	4d17      	ldr	r5, [pc, #92]	; (80072c8 <_Z23getFont_verdana_60_4bppv+0x60>)
{
 800726c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 37, 72, 60, 0, 0, 4, 1, 0, 2, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 800726e:	782c      	ldrb	r4, [r5, #0]
 8007270:	f3bf 8f5b 	dmb	ish
 8007274:	f014 0401 	ands.w	r4, r4, #1
 8007278:	d123      	bne.n	80072c2 <_Z23getFont_verdana_60_4bppv+0x5a>
 800727a:	4628      	mov	r0, r5
 800727c:	f01e fc3b 	bl	8025af6 <__cxa_guard_acquire>
 8007280:	b1f8      	cbz	r0, 80072c2 <_Z23getFont_verdana_60_4bppv+0x5a>
 8007282:	233f      	movs	r3, #63	; 0x3f
 8007284:	2201      	movs	r2, #1
 8007286:	4911      	ldr	r1, [pc, #68]	; (80072cc <_Z23getFont_verdana_60_4bppv+0x64>)
 8007288:	9309      	str	r3, [sp, #36]	; 0x24
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <_Z23getFont_verdana_60_4bppv+0x68>)
 800728c:	4811      	ldr	r0, [pc, #68]	; (80072d4 <_Z23getFont_verdana_60_4bppv+0x6c>)
 800728e:	9308      	str	r3, [sp, #32]
 8007290:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <_Z23getFont_verdana_60_4bppv+0x70>)
 8007292:	940a      	str	r4, [sp, #40]	; 0x28
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	2302      	movs	r3, #2
 8007298:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800729c:	2304      	movs	r3, #4
 800729e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80072a2:	233c      	movs	r3, #60	; 0x3c
 80072a4:	2225      	movs	r2, #37	; 0x25
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2348      	movs	r3, #72	; 0x48
 80072aa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80072ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80072b2:	f7fe fcdd 	bl	8005c70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80072b6:	4809      	ldr	r0, [pc, #36]	; (80072dc <_Z23getFont_verdana_60_4bppv+0x74>)
 80072b8:	f01e fc68 	bl	8025b8c <atexit>
 80072bc:	4628      	mov	r0, r5
 80072be:	f01e fc26 	bl	8025b0e <__cxa_guard_release>
    return verdana_60_4bpp;
}
 80072c2:	4804      	ldr	r0, [pc, #16]	; (80072d4 <_Z23getFont_verdana_60_4bppv+0x6c>)
 80072c4:	b00f      	add	sp, #60	; 0x3c
 80072c6:	bd30      	pop	{r4, r5, pc}
 80072c8:	20012470 	.word	0x20012470
 80072cc:	90309900 	.word	0x90309900
 80072d0:	0802b6ac 	.word	0x0802b6ac
 80072d4:	20012474 	.word	0x20012474
 80072d8:	0802b754 	.word	0x0802b754
 80072dc:	08007265 	.word	0x08007265

080072e0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80072e0:	2000      	movs	r0, #0
 80072e2:	4770      	bx	lr

080072e4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80072e4:	2000      	movs	r0, #0
 80072e6:	4770      	bx	lr

080072e8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80072e8:	b40e      	push	{r1, r2, r3}
 80072ea:	b503      	push	{r0, r1, lr}
 80072ec:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80072ee:	2100      	movs	r1, #0
{
 80072f0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80072f4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80072f6:	f00f fe4d 	bl	8016f94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80072fa:	b002      	add	sp, #8
 80072fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007300:	b003      	add	sp, #12
 8007302:	4770      	bx	lr

08007304 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007304:	b40c      	push	{r2, r3}
 8007306:	b507      	push	{r0, r1, r2, lr}
 8007308:	ab04      	add	r3, sp, #16
 800730a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800730e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8007310:	f00f fe40 	bl	8016f94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8007314:	b003      	add	sp, #12
 8007316:	f85d eb04 	ldr.w	lr, [sp], #4
 800731a:	b002      	add	sp, #8
 800731c:	4770      	bx	lr
	...

08007320 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8007320:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8007322:	b510      	push	{r4, lr}
 8007324:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8007326:	b373      	cbz	r3, 8007386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8007328:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800732a:	b92b      	cbnz	r3, 8007338 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 800732c:	4b18      	ldr	r3, [pc, #96]	; (8007390 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800732e:	21c5      	movs	r1, #197	; 0xc5
 8007330:	4a18      	ldr	r2, [pc, #96]	; (8007394 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8007332:	4819      	ldr	r0, [pc, #100]	; (8007398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8007334:	f01e fc0c 	bl	8025b50 <__assert_func>
            return buffer[pos];
 8007338:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800733a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800733e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007340:	b30b      	cbz	r3, 8007386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8007342:	f011 f9e7 	bl	8018714 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8007346:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8007348:	2b01      	cmp	r3, #1
 800734a:	d803      	bhi.n	8007354 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800734e:	21cb      	movs	r1, #203	; 0xcb
 8007350:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8007352:	e7ee      	b.n	8007332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8007354:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8007356:	f640 103f 	movw	r0, #2367	; 0x93f
 800735a:	1c53      	adds	r3, r2, #1
 800735c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800735e:	2b09      	cmp	r3, #9
 8007360:	4619      	mov	r1, r3
 8007362:	bf88      	it	hi
 8007364:	f1a3 010a 	subhi.w	r1, r3, #10
 8007368:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800736c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800736e:	4281      	cmp	r1, r0
 8007370:	d109      	bne.n	8007386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8007372:	2b0a      	cmp	r3, #10
 8007374:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8007378:	bf28      	it	cs
 800737a:	2300      	movcs	r3, #0
            return buffer[pos];
 800737c:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800737e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007382:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8007384:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8007386:	4620      	mov	r0, r4
}
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800738c:	f011 b8c4 	b.w	8018518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007390:	08029be8 	.word	0x08029be8
 8007394:	08029bf1 	.word	0x08029bf1
 8007398:	08029c9c 	.word	0x08029c9c
 800739c:	08029ce6 	.word	0x08029ce6
 80073a0:	08029cf4 	.word	0x08029cf4

080073a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80073a4:	f011 b881 	b.w	80184aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080073a8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80073a8:	b510      	push	{r4, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	ac02      	add	r4, sp, #8
 80073ae:	e884 0006 	stmia.w	r4, {r1, r2}
 80073b2:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80073b4:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80073b6:	4621      	mov	r1, r4
    va_start(pArg, format);
 80073b8:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	f00e fa5f 	bl	8015884 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80073c6:	b006      	add	sp, #24
 80073c8:	bd10      	pop	{r4, pc}
	...

080073cc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80073cc:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80073ce:	bb18      	cbnz	r0, 8007418 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4913      	ldr	r1, [pc, #76]	; (8007424 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80073d8:	b1b3      	cbz	r3, 8007408 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80073da:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80073dc:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80073de:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80073e0:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80073e2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	441a      	add	r2, r3
 80073e8:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80073f0:	f000 f838 	bl	8007464 <_ZN17TypedTextDatabase8getFontsEv>
 80073f4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80073f6:	f000 f833 	bl	8007460 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80073fc:	601c      	str	r4, [r3, #0]
        fonts = f;
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8007400:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8007402:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8007404:	8018      	strh	r0, [r3, #0]
    }
}
 8007406:	e007      	b.n	8007418 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800740a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800740e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8007412:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8007414:	2c00      	cmp	r4, #0
 8007416:	d1e8      	bne.n	80073ea <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8007418:	bd38      	pop	{r3, r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	200124a0 	.word	0x200124a0
 8007420:	200124a4 	.word	0x200124a4
 8007424:	200124a8 	.word	0x200124a8
 8007428:	200124ac 	.word	0x200124ac
 800742c:	20027bf8 	.word	0x20027bf8
 8007430:	20027c00 	.word	0x20027c00
 8007434:	20027bfc 	.word	0x20027bfc
 8007438:	90309b20 	.word	0x90309b20
 800743c:	90309b08 	.word	0x90309b08
 8007440:	90309bc4 	.word	0x90309bc4

08007444 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8007444:	4b04      	ldr	r3, [pc, #16]	; (8007458 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800744c:	4b03      	ldr	r3, [pc, #12]	; (800745c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800744e:	681b      	ldr	r3, [r3, #0]
}
 8007450:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200124a8 	.word	0x200124a8
 800745c:	200124a4 	.word	0x200124a4

08007460 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8007460:	2006      	movs	r0, #6
 8007462:	4770      	bx	lr

08007464 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8007464:	4800      	ldr	r0, [pc, #0]	; (8007468 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8007466:	4770      	bx	lr
 8007468:	200124b0 	.word	0x200124b0

0800746c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800746c:	b510      	push	{r4, lr}
};
 800746e:	4c05      	ldr	r4, [pc, #20]	; (8007484 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_30_4bpp()),
 8007470:	f7ff febc 	bl	80071ec <_Z23getFont_verdana_30_4bppv>
};
 8007474:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_60_4bpp()),
 8007476:	f7ff fef7 	bl	8007268 <_Z23getFont_verdana_60_4bppv>
};
 800747a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_20_4bpp())
 800747c:	f7ff fe78 	bl	8007170 <_Z23getFont_verdana_20_4bppv>
};
 8007480:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8007482:	bd10      	pop	{r4, pc}
 8007484:	200124b0 	.word	0x200124b0

08007488 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8007488:	4770      	bx	lr

0800748a <_ZN19FrontendApplicationD0Ev>:
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8007492:	f01e fb2e 	bl	8025af2 <_ZdlPvj>
 8007496:	4620      	mov	r0, r4
 8007498:	bd10      	pop	{r4, pc}

0800749a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
    {
        model.tick();
 800749e:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80074a2:	f000 f813 	bl	80074cc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80074a6:	4620      	mov	r0, r4
    }
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80074ac:	f00e beaa 	b.w	8016204 <_ZN8touchgfx11Application15handleTickEventEv>

080074b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80074b0:	b510      	push	{r4, lr}
 80074b2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80074b4:	f7fe fb4a 	bl	8005b4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80074b8:	4b01      	ldr	r3, [pc, #4]	; (80074c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80074ba:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80074bc:	6023      	str	r3, [r4, #0]
}
 80074be:	bd10      	pop	{r4, pc}
 80074c0:	08029dd0 	.word	0x08029dd0

080074c4 <_ZN5ModelC1Ev>:
extern __IO float humidity;
extern __IO float pressure;
extern __IO float gas_resistance;
extern __IO uint16_t meas_period;

Model::Model() : modelListener(0)
 80074c4:	2200      	movs	r2, #0
 80074c6:	6002      	str	r2, [r0, #0]
{

}
 80074c8:	4770      	bx	lr
	...

080074cc <_ZN5Model4tickEv>:

void Model::tick()
{
 80074cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tick1 ++;
 80074d0:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80075cc <_ZN5Model4tickEv+0x100>
{
 80074d4:	4604      	mov	r4, r0
 80074d6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80075d0 <_ZN5Model4tickEv+0x104>
	tick1 ++;
 80074da:	f89a 3000 	ldrb.w	r3, [sl]
 80074de:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80075d4 <_ZN5Model4tickEv+0x108>
 80074e2:	3301      	adds	r3, #1
 80074e4:	4f33      	ldr	r7, [pc, #204]	; (80075b4 <_ZN5Model4tickEv+0xe8>)
 80074e6:	4e34      	ldr	r6, [pc, #208]	; (80075b8 <_ZN5Model4tickEv+0xec>)
 80074e8:	b2db      	uxtb	r3, r3
		if (tick1 >= 90){
 80074ea:	2b59      	cmp	r3, #89	; 0x59
	tick1 ++;
 80074ec:	f88a 3000 	strb.w	r3, [sl]
		if (tick1 >= 90){
 80074f0:	d92f      	bls.n	8007552 <_ZN5Model4tickEv+0x86>
			rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80074f2:	4d32      	ldr	r5, [pc, #200]	; (80075bc <_ZN5Model4tickEv+0xf0>)
 80074f4:	4932      	ldr	r1, [pc, #200]	; (80075c0 <_ZN5Model4tickEv+0xf4>)
 80074f6:	4628      	mov	r0, r5
 80074f8:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80075d8 <_ZN5Model4tickEv+0x10c>
 80074fc:	f7fc f9a2 	bl	8003844 <bme680_get_sensor_data>

			temperature = data.temperature/100;
 8007500:	edd5 6a01 	vldr	s13, [r5, #4]
 8007504:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80075c4 <_ZN5Model4tickEv+0xf8>
			humidity = data.humidity/1000;
 8007508:	ed95 6a03 	vldr	s12, [r5, #12]
			temperature = data.temperature/100;
 800750c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			humidity = data.humidity/1000;
 8007510:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80075c8 <_ZN5Model4tickEv+0xfc>
			rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8007514:	f88b 0000 	strb.w	r0, [fp]
			pressure = data.pressure / 100;

			if(data.status & BME680_GASM_VALID_MSK)
 8007518:	782b      	ldrb	r3, [r5, #0]
 800751a:	069b      	lsls	r3, r3, #26
			temperature = data.temperature/100;
 800751c:	ed89 7a00 	vstr	s14, [r9]
			humidity = data.humidity/1000;
 8007520:	ee86 7a26 	vdiv.f32	s14, s12, s13
			pressure = data.pressure / 100;
 8007524:	edd5 6a02 	vldr	s13, [r5, #8]
			humidity = data.humidity/1000;
 8007528:	ed88 7a00 	vstr	s14, [r8]
			pressure = data.pressure / 100;
 800752c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007530:	ed87 7a00 	vstr	s14, [r7]
			if(data.status & BME680_GASM_VALID_MSK)
 8007534:	d501      	bpl.n	800753a <_ZN5Model4tickEv+0x6e>
				gas_resistance = data.gas_resistance;
 8007536:	692b      	ldr	r3, [r5, #16]
 8007538:	6033      	str	r3, [r6, #0]

			if (gas_sensor.power_mode == BME680_FORCED_MODE)
 800753a:	4821      	ldr	r0, [pc, #132]	; (80075c0 <_ZN5Model4tickEv+0xf4>)
 800753c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8007540:	2b01      	cmp	r3, #1
 8007542:	d103      	bne.n	800754c <_ZN5Model4tickEv+0x80>
			{
				rslt = bme680_set_sensor_mode(&gas_sensor);
 8007544:	f7fb ff92 	bl	800346c <bme680_set_sensor_mode>
 8007548:	f88b 0000 	strb.w	r0, [fp]
			}
			tick1 = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	f88a 3000 	strb.w	r3, [sl]
		}

  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 8007552:	f8df a088 	ldr.w	sl, [pc, #136]	; 80075dc <_ZN5Model4tickEv+0x110>
 8007556:	f640 45e4 	movw	r5, #3300	; 0xce4
 800755a:	6820      	ldr	r0, [r4, #0]
 800755c:	f8ba 1000 	ldrh.w	r1, [sl]
 8007560:	6803      	ldr	r3, [r0, #0]
 8007562:	b289      	uxth	r1, r1
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4369      	muls	r1, r5
 8007568:	0b09      	lsrs	r1, r1, #12
 800756a:	4798      	blx	r3
  modelListener->UpdateBar(uhADCxConvertedData * 3300 / 4096);
 800756c:	f8ba 1000 	ldrh.w	r1, [sl]
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	b289      	uxth	r1, r1
 8007574:	6803      	ldr	r3, [r0, #0]
 8007576:	4369      	muls	r1, r5
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	0b09      	lsrs	r1, r1, #12
 800757c:	4798      	blx	r3

  modelListener->UpdateTemp(temperature);
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	ed99 0a00 	vldr	s0, [r9]
 8007584:	6803      	ldr	r3, [r0, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	4798      	blx	r3
  modelListener->UpdateHumi(humidity);
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	ed98 0a00 	vldr	s0, [r8]
 8007590:	6803      	ldr	r3, [r0, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	4798      	blx	r3
  modelListener->UpdatePres(pressure);
 8007596:	6820      	ldr	r0, [r4, #0]
 8007598:	ed97 0a00 	vldr	s0, [r7]
 800759c:	6803      	ldr	r3, [r0, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	4798      	blx	r3
  modelListener->UpdateGas(gas_resistance);
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	ed96 0a00 	vldr	s0, [r6]
 80075a8:	6803      	ldr	r3, [r0, #0]
 80075aa:	69db      	ldr	r3, [r3, #28]
}
 80075ac:	b001      	add	sp, #4
 80075ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  modelListener->UpdateGas(gas_resistance);
 80075b2:	4718      	bx	r3
 80075b4:	200123a0 	.word	0x200123a0
 80075b8:	20011f2c 	.word	0x20011f2c
 80075bc:	20011f14 	.word	0x20011f14
 80075c0:	20011f30 	.word	0x20011f30
 80075c4:	42c80000 	.word	0x42c80000
 80075c8:	447a0000 	.word	0x447a0000
 80075cc:	200124bc 	.word	0x200124bc
 80075d0:	200123a8 	.word	0x200123a8
 80075d4:	2001239c 	.word	0x2001239c
 80075d8:	200123a4 	.word	0x200123a4
 80075dc:	200123ac 	.word	0x200123ac

080075e0 <_ZN13ModelListener10UpdateTempEf>:
    }
    virtual void UpdateGraph1(uint16_t value){}
    virtual void UpdateBar(uint16_t value){}

    virtual void UpdateTemp(float temperature){}
 80075e0:	4770      	bx	lr

080075e2 <_ZN13ModelListener10UpdateHumiEf>:
    virtual void UpdateHumi(float humidity){}
 80075e2:	4770      	bx	lr

080075e4 <_ZN13ModelListener10UpdatePresEf>:
    virtual void UpdatePres(float pressure){}
 80075e4:	4770      	bx	lr

080075e6 <_ZN13ModelListener9UpdateGasEf>:
    virtual void UpdateGas(float gas_resistance){}
 80075e6:	4770      	bx	lr

080075e8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80075e8:	4770      	bx	lr

080075ea <_ZThn4_N16Screen1PresenterD1Ev>:
 80075ea:	3804      	subs	r0, #4
 80075ec:	4770      	bx	lr

080075ee <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80075ee:	4770      	bx	lr

080075f0 <_ZN16Screen1PresenterD0Ev>:
 80075f0:	b510      	push	{r4, lr}
 80075f2:	4604      	mov	r4, r0
 80075f4:	2110      	movs	r1, #16
 80075f6:	f01e fa7c 	bl	8025af2 <_ZdlPvj>
 80075fa:	4620      	mov	r0, r4
 80075fc:	bd10      	pop	{r4, pc}

080075fe <_ZThn4_N16Screen1PresenterD0Ev>:
 80075fe:	f1a0 0004 	sub.w	r0, r0, #4
 8007602:	e7f5      	b.n	80075f0 <_ZN16Screen1PresenterD0Ev>

08007604 <_ZN16Screen1Presenter12UpdateGraph1Et>:
{

}
void Screen1Presenter::UpdateGraph1(uint16_t value)
{
	view.UpdateGraph1(value);
 8007604:	68c0      	ldr	r0, [r0, #12]
 8007606:	f000 b83b 	b.w	8007680 <_ZN11Screen1View12UpdateGraph1Et>

0800760a <_ZThn4_N16Screen1Presenter12UpdateGraph1Et>:

    void UpdateGraph1(uint16_t value);
 800760a:	f1a0 0004 	sub.w	r0, r0, #4
 800760e:	f7ff bff9 	b.w	8007604 <_ZN16Screen1Presenter12UpdateGraph1Et>

08007612 <_ZN16Screen1Presenter9UpdateBarEt>:
}

void Screen1Presenter::UpdateBar(uint16_t value)
{
	view.UpdateBar(value);
 8007612:	68c0      	ldr	r0, [r0, #12]
 8007614:	f000 b83c 	b.w	8007690 <_ZN11Screen1View9UpdateBarEt>

08007618 <_ZThn4_N16Screen1Presenter9UpdateBarEt>:
    void UpdateBar(uint16_t value);
 8007618:	f1a0 0004 	sub.w	r0, r0, #4
 800761c:	f7ff bff9 	b.w	8007612 <_ZN16Screen1Presenter9UpdateBarEt>

08007620 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8007620:	2200      	movs	r2, #0
    : view(v)
 8007622:	60c1      	str	r1, [r0, #12]
 8007624:	6082      	str	r2, [r0, #8]
 8007626:	4a04      	ldr	r2, [pc, #16]	; (8007638 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8007628:	b510      	push	{r4, lr}
    : view(v)
 800762a:	f102 0408 	add.w	r4, r2, #8
 800762e:	3228      	adds	r2, #40	; 0x28
 8007630:	6004      	str	r4, [r0, #0]
 8007632:	6042      	str	r2, [r0, #4]
}
 8007634:	bd10      	pop	{r4, pc}
 8007636:	bf00      	nop
 8007638:	08029e14 	.word	0x08029e14

0800763c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800763c:	4770      	bx	lr
	...

08007640 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <_ZN11Screen1ViewD1Ev+0x10>)
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
 8007646:	6003      	str	r3, [r0, #0]
 8007648:	f7fe ff96 	bl	8006578 <_ZN15Screen1ViewBaseD1Ev>
 800764c:	4620      	mov	r0, r4
 800764e:	bd10      	pop	{r4, pc}
 8007650:	08029e64 	.word	0x08029e64

08007654 <_ZN11Screen1ViewD0Ev>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	f7ff fff2 	bl	8007640 <_ZN11Screen1ViewD1Ev>
 800765c:	f243 51d0 	movw	r1, #13776	; 0x35d0
 8007660:	4620      	mov	r0, r4
 8007662:	f01e fa46 	bl	8025af2 <_ZdlPvj>
 8007666:	4620      	mov	r0, r4
 8007668:	bd10      	pop	{r4, pc}
	...

0800766c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800766c:	b510      	push	{r4, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	f7ff f854 	bl	800671c <_ZN15Screen1ViewBaseC1Ev>
 8007674:	4b01      	ldr	r3, [pc, #4]	; (800767c <_ZN11Screen1ViewC1Ev+0x10>)
}
 8007676:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8007678:	6023      	str	r3, [r4, #0]
}
 800767a:	bd10      	pop	{r4, pc}
 800767c:	08029e64 	.word	0x08029e64

08007680 <_ZN11Screen1View12UpdateGraph1Et>:
 8007680:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        return addDataPointScaled(int2scaledY(y));
 8007684:	30d4      	adds	r0, #212	; 0xd4
 8007686:	4359      	muls	r1, r3
 8007688:	f00a bff5 	b.w	8012676 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

0800768c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800768c:	f7fe beed 	b.w	800646a <_ZN15Screen1ViewBase11setupScreenEv>

08007690 <_ZN11Screen1View9UpdateBarEt>:
{
	dynamicGraph1.addDataPoint(value);
}
void Screen1View::UpdateBar(uint16_t value)
{
	lineProgress1.setValue(value);
 8007690:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
 8007694:	f008 b9cf 	b.w	800fa36 <_ZN8touchgfx12LineProgress8setValueEi>

08007698 <_ZN13ModelListener12UpdateGraph1Et>:
    virtual void UpdateGraph1(uint16_t value){}
 8007698:	4770      	bx	lr

0800769a <_ZN13ModelListener9UpdateBarEt>:
    virtual void UpdateBar(uint16_t value){}
 800769a:	4770      	bx	lr

0800769c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800769c:	4770      	bx	lr

0800769e <_ZThn4_N16Screen2PresenterD1Ev>:
 800769e:	3804      	subs	r0, #4
 80076a0:	4770      	bx	lr

080076a2 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 80076a2:	4770      	bx	lr

080076a4 <_ZN16Screen2PresenterD0Ev>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4604      	mov	r4, r0
 80076a8:	2110      	movs	r1, #16
 80076aa:	f01e fa22 	bl	8025af2 <_ZdlPvj>
 80076ae:	4620      	mov	r0, r4
 80076b0:	bd10      	pop	{r4, pc}

080076b2 <_ZThn4_N16Screen2PresenterD0Ev>:
 80076b2:	f1a0 0004 	sub.w	r0, r0, #4
 80076b6:	e7f5      	b.n	80076a4 <_ZN16Screen2PresenterD0Ev>

080076b8 <_ZN16Screen2Presenter10UpdateTempEf>:
{

}
void Screen2Presenter::UpdateTemp(float temperature)
{
	view.UpdateTemp(temperature);
 80076b8:	68c0      	ldr	r0, [r0, #12]
 80076ba:	f000 b84b 	b.w	8007754 <_ZN11Screen2View10UpdateTempEf>

080076be <_ZThn4_N16Screen2Presenter10UpdateTempEf>:

    void UpdateTemp(float temperature);
 80076be:	f1a0 0004 	sub.w	r0, r0, #4
 80076c2:	f7ff bff9 	b.w	80076b8 <_ZN16Screen2Presenter10UpdateTempEf>

080076c6 <_ZN16Screen2Presenter10UpdateHumiEf>:
}

void Screen2Presenter::UpdateHumi(float humidity)
{
	view.UpdateHumi(humidity);
 80076c6:	68c0      	ldr	r0, [r0, #12]
 80076c8:	f000 b858 	b.w	800777c <_ZN11Screen2View10UpdateHumiEf>

080076cc <_ZThn4_N16Screen2Presenter10UpdateHumiEf>:
    void UpdateHumi(float humidity);
 80076cc:	f1a0 0004 	sub.w	r0, r0, #4
 80076d0:	f7ff bff9 	b.w	80076c6 <_ZN16Screen2Presenter10UpdateHumiEf>

080076d4 <_ZN16Screen2Presenter10UpdatePresEf>:
}
void Screen2Presenter::UpdatePres(float pressure)
{
	view.UpdatePres(pressure);
 80076d4:	68c0      	ldr	r0, [r0, #12]
 80076d6:	f000 b865 	b.w	80077a4 <_ZN11Screen2View10UpdatePresEf>

080076da <_ZThn4_N16Screen2Presenter10UpdatePresEf>:
    void UpdatePres(float pressure);
 80076da:	f1a0 0004 	sub.w	r0, r0, #4
 80076de:	f7ff bff9 	b.w	80076d4 <_ZN16Screen2Presenter10UpdatePresEf>

080076e2 <_ZN16Screen2Presenter9UpdateGasEf>:
}
void Screen2Presenter::UpdateGas(float gas_resistance)
{
	view.UpdateGas(gas_resistance);
 80076e2:	68c0      	ldr	r0, [r0, #12]
 80076e4:	f000 b872 	b.w	80077cc <_ZN11Screen2View9UpdateGasEf>

080076e8 <_ZThn4_N16Screen2Presenter9UpdateGasEf>:
    void UpdateGas(float gas_resistance);
 80076e8:	f1a0 0004 	sub.w	r0, r0, #4
 80076ec:	f7ff bff9 	b.w	80076e2 <_ZN16Screen2Presenter9UpdateGasEf>

080076f0 <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 80076f0:	2200      	movs	r2, #0
    : view(v)
 80076f2:	60c1      	str	r1, [r0, #12]
 80076f4:	6082      	str	r2, [r0, #8]
 80076f6:	4a04      	ldr	r2, [pc, #16]	; (8007708 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 80076f8:	b510      	push	{r4, lr}
    : view(v)
 80076fa:	f102 0408 	add.w	r4, r2, #8
 80076fe:	3230      	adds	r2, #48	; 0x30
 8007700:	6004      	str	r4, [r0, #0]
 8007702:	6042      	str	r2, [r0, #4]
}
 8007704:	bd10      	pop	{r4, pc}
 8007706:	bf00      	nop
 8007708:	08029e90 	.word	0x08029e90

0800770c <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 800770c:	4770      	bx	lr
	...

08007710 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <_ZN11Screen2ViewD1Ev+0x10>)
 8007712:	b510      	push	{r4, lr}
 8007714:	4604      	mov	r4, r0
 8007716:	6003      	str	r3, [r0, #0]
 8007718:	f7ff faee 	bl	8006cf8 <_ZN15Screen2ViewBaseD1Ev>
 800771c:	4620      	mov	r0, r4
 800771e:	bd10      	pop	{r4, pc}
 8007720:	08029ef4 	.word	0x08029ef4

08007724 <_ZN11Screen2ViewD0Ev>:
 8007724:	b510      	push	{r4, lr}
 8007726:	4604      	mov	r4, r0
 8007728:	f7ff fff2 	bl	8007710 <_ZN11Screen2ViewD1Ev>
 800772c:	f44f 7119 	mov.w	r1, #612	; 0x264
 8007730:	4620      	mov	r0, r4
 8007732:	f01e f9de 	bl	8025af2 <_ZdlPvj>
 8007736:	4620      	mov	r0, r4
 8007738:	bd10      	pop	{r4, pc}
	...

0800773c <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 800773c:	b510      	push	{r4, lr}
 800773e:	4604      	mov	r4, r0
 8007740:	f7ff fb90 	bl	8006e64 <_ZN15Screen2ViewBaseC1Ev>
 8007744:	4b01      	ldr	r3, [pc, #4]	; (800774c <_ZN11Screen2ViewC1Ev+0x10>)
}
 8007746:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8007748:	6023      	str	r3, [r4, #0]
}
 800774a:	bd10      	pop	{r4, pc}
 800774c:	08029ef4 	.word	0x08029ef4

08007750 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8007750:	f7ff bad3 	b.w	8006cfa <_ZN15Screen2ViewBase11setupScreenEv>

08007754 <_ZN11Screen2View10UpdateTempEf>:
void Screen2View::UpdateTemp(float temperature)
{
 8007754:	b513      	push	{r0, r1, r4, lr}
 8007756:	4604      	mov	r4, r0
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8007758:	ab01      	add	r3, sp, #4
 800775a:	4a07      	ldr	r2, [pc, #28]	; (8007778 <_ZN11Screen2View10UpdateTempEf+0x24>)
 800775c:	210a      	movs	r1, #10
 800775e:	f500 7001 	add.w	r0, r0, #516	; 0x204
 8007762:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007766:	f011 ff3f 	bl	80195e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaTempBuffer,TEXTAREATEMP_SIZE,"%.2f",temperature);
	textAreaTemp.invalidate();
 800776a:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
}
 800776e:	b002      	add	sp, #8
 8007770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaTemp.invalidate();
 8007774:	f00f bd39 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8007778:	08029ee0 	.word	0x08029ee0

0800777c <_ZN11Screen2View10UpdateHumiEf>:

void Screen2View::UpdateHumi(float humidity)
{
 800777c:	b513      	push	{r0, r1, r4, lr}
 800777e:	4604      	mov	r4, r0
 8007780:	ab01      	add	r3, sp, #4
 8007782:	4a07      	ldr	r2, [pc, #28]	; (80077a0 <_ZN11Screen2View10UpdateHumiEf+0x24>)
 8007784:	210a      	movs	r1, #10
 8007786:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800778a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800778e:	f011 ff2b 	bl	80195e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaHumiBuffer,TEXTAREAHUMI_SIZE,"%.2f",humidity);
	textAreaHumi.invalidate();
 8007792:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
 8007796:	b002      	add	sp, #8
 8007798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaHumi.invalidate();
 800779c:	f00f bd25 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 80077a0:	08029ee0 	.word	0x08029ee0

080077a4 <_ZN11Screen2View10UpdatePresEf>:
void Screen2View::UpdatePres(float pressure)
{
 80077a4:	b513      	push	{r0, r1, r4, lr}
 80077a6:	4604      	mov	r4, r0
 80077a8:	ab01      	add	r3, sp, #4
 80077aa:	4a07      	ldr	r2, [pc, #28]	; (80077c8 <_ZN11Screen2View10UpdatePresEf+0x24>)
 80077ac:	210a      	movs	r1, #10
 80077ae:	f500 700b 	add.w	r0, r0, #556	; 0x22c
 80077b2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80077b6:	f011 ff17 	bl	80195e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaPresBuffer,TEXTAREAPRES_SIZE,"%.2f",pressure);
	textAreaPres.invalidate();
 80077ba:	f504 70b6 	add.w	r0, r4, #364	; 0x16c
}
 80077be:	b002      	add	sp, #8
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaPres.invalidate();
 80077c4:	f00f bd11 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 80077c8:	08029ee0 	.word	0x08029ee0

080077cc <_ZN11Screen2View9UpdateGasEf>:
void Screen2View::UpdateGas(float gas_resistance)
{
 80077cc:	b513      	push	{r0, r1, r4, lr}
 80077ce:	4604      	mov	r4, r0
 80077d0:	ab01      	add	r3, sp, #4
 80077d2:	4a07      	ldr	r2, [pc, #28]	; (80077f0 <_ZN11Screen2View9UpdateGasEf+0x24>)
 80077d4:	210a      	movs	r1, #10
 80077d6:	f500 7010 	add.w	r0, r0, #576	; 0x240
 80077da:	ed8d 0a01 	vstr	s0, [sp, #4]
 80077de:	f011 ff03 	bl	80195e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaGasBuffer,TEXTAREAGAS_SIZE,"%.f",gas_resistance);
	textAreaGas.invalidate();
 80077e2:	f504 70dc 	add.w	r0, r4, #440	; 0x1b8
}
 80077e6:	b002      	add	sp, #8
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaGas.invalidate();
 80077ec:	f00f bcfd 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 80077f0:	08029ee5 	.word	0x08029ee5

080077f4 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80077f4:	4770      	bx	lr

080077f6 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80077f6:	2000      	movs	r0, #0
 80077f8:	4770      	bx	lr

080077fa <ft6x06_ReadID>:
{
 80077fa:	b510      	push	{r4, lr}
 80077fc:	4604      	mov	r4, r0
  TS_IO_Init();
 80077fe:	f7f9 f836 	bl	800086e <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8007802:	21a8      	movs	r1, #168	; 0xa8
 8007804:	b2e0      	uxtb	r0, r4
 8007806:	f7f9 f84f 	bl	80008a8 <TS_IO_Read>
}
 800780a:	b280      	uxth	r0, r0
 800780c:	bd10      	pop	{r4, pc}
	...

08007810 <ft6x06_TS_DetectTouch>:
{
 8007810:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8007812:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8007814:	2102      	movs	r1, #2
 8007816:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8007818:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800781c:	f7f9 f844 	bl	80008a8 <TS_IO_Read>
 8007820:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8007824:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8007830:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8007838:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800783c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 8007842:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8007846:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8007848:	2200      	movs	r2, #0
 800784a:	709a      	strb	r2, [r3, #2]
}
 800784c:	b002      	add	sp, #8
 800784e:	bd10      	pop	{r4, pc}
 8007850:	200124bf 	.word	0x200124bf

08007854 <ft6x06_TS_GetXY>:
{
 8007854:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8007856:	4c15      	ldr	r4, [pc, #84]	; (80078ac <ft6x06_TS_GetXY+0x58>)
{
 8007858:	4615      	mov	r5, r2
 800785a:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800785c:	78a3      	ldrb	r3, [r4, #2]
 800785e:	7862      	ldrb	r2, [r4, #1]
 8007860:	429a      	cmp	r2, r3
 8007862:	d91f      	bls.n	80078a4 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8007864:	b303      	cbz	r3, 80078a8 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 8007866:	2b01      	cmp	r3, #1
 8007868:	bf14      	ite	ne
 800786a:	2100      	movne	r1, #0
 800786c:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800786e:	2304      	movs	r3, #4
 8007870:	b2c0      	uxtb	r0, r0
 8007872:	eb0d 0203 	add.w	r2, sp, r3
 8007876:	f7f9 f835 	bl	80008e4 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800787a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800787e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007888:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800788a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800788e:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8007890:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800789a:	4313      	orrs	r3, r2
 800789c:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 800789e:	78a3      	ldrb	r3, [r4, #2]
 80078a0:	3301      	adds	r3, #1
 80078a2:	70a3      	strb	r3, [r4, #2]
}
 80078a4:	b002      	add	sp, #8
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 80078a8:	2103      	movs	r1, #3
 80078aa:	e7e0      	b.n	800786e <ft6x06_TS_GetXY+0x1a>
 80078ac:	200124bf 	.word	0x200124bf

080078b0 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80078b0:	2201      	movs	r2, #1
 80078b2:	21a4      	movs	r1, #164	; 0xa4
 80078b4:	b2c0      	uxtb	r0, r0
 80078b6:	f7f8 bfdb 	b.w	8000870 <TS_IO_Write>

080078ba <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80078ba:	2200      	movs	r2, #0
 80078bc:	21a4      	movs	r1, #164	; 0xa4
 80078be:	b2c0      	uxtb	r0, r0
 80078c0:	f7f8 bfd6 	b.w	8000870 <TS_IO_Write>

080078c4 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 80078c4:	f7ff bff9 	b.w	80078ba <ft6x06_TS_DisableIT>

080078c8 <ft6x06_TS_ClearIT>:
 80078c8:	4770      	bx	lr
	...

080078cc <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <ft6x06_Init+0x28>)
{  
 80078ce:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	4290      	cmp	r0, r2
 80078d4:	d00a      	beq.n	80078ec <ft6x06_Init+0x20>
 80078d6:	7859      	ldrb	r1, [r3, #1]
 80078d8:	4288      	cmp	r0, r1
 80078da:	d007      	beq.n	80078ec <ft6x06_Init+0x20>
 80078dc:	b10a      	cbz	r2, 80078e2 <ft6x06_Init+0x16>
 80078de:	b929      	cbnz	r1, 80078ec <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80078e0:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 80078e2:	5498      	strb	r0, [r3, r2]
}
 80078e4:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 80078e8:	f7f8 bfc1 	b.w	800086e <TS_IO_Init>
}
 80078ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	200124bd 	.word	0x200124bd

080078f8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80078fe:	2000      	movs	r0, #0
 8007900:	49c9      	ldr	r1, [pc, #804]	; (8007c28 <OTM8009A_Init+0x330>)
 8007902:	f7f9 fb39 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8007906:	49c9      	ldr	r1, [pc, #804]	; (8007c2c <OTM8009A_Init+0x334>)
 8007908:	2003      	movs	r0, #3
 800790a:	f7f9 fb35 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800790e:	49c8      	ldr	r1, [pc, #800]	; (8007c30 <OTM8009A_Init+0x338>)
 8007910:	2000      	movs	r0, #0
 8007912:	f7f9 fb31 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8007916:	49c7      	ldr	r1, [pc, #796]	; (8007c34 <OTM8009A_Init+0x33c>)
 8007918:	2002      	movs	r0, #2
 800791a:	f7f9 fb2d 	bl	8000f78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800791e:	49c4      	ldr	r1, [pc, #784]	; (8007c30 <OTM8009A_Init+0x338>)
 8007920:	2000      	movs	r0, #0
 8007922:	f7f9 fb29 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8007926:	49c4      	ldr	r1, [pc, #784]	; (8007c38 <OTM8009A_Init+0x340>)
 8007928:	2000      	movs	r0, #0
 800792a:	f7f9 fb25 	bl	8000f78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800792e:	200a      	movs	r0, #10
 8007930:	f7f9 fb20 	bl	8000f74 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8007934:	49c1      	ldr	r1, [pc, #772]	; (8007c3c <OTM8009A_Init+0x344>)
 8007936:	2000      	movs	r0, #0
 8007938:	f7f9 fb1e 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800793c:	49c0      	ldr	r1, [pc, #768]	; (8007c40 <OTM8009A_Init+0x348>)
 800793e:	2000      	movs	r0, #0
 8007940:	f7f9 fb1a 	bl	8000f78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8007944:	200a      	movs	r0, #10
 8007946:	f7f9 fb15 	bl	8000f74 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800794a:	49be      	ldr	r1, [pc, #760]	; (8007c44 <OTM8009A_Init+0x34c>)
 800794c:	2000      	movs	r0, #0
 800794e:	f7f9 fb13 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8007952:	49bd      	ldr	r1, [pc, #756]	; (8007c48 <OTM8009A_Init+0x350>)
 8007954:	2000      	movs	r0, #0
 8007956:	f7f9 fb0f 	bl	8000f78 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800795a:	49bc      	ldr	r1, [pc, #752]	; (8007c4c <OTM8009A_Init+0x354>)
 800795c:	2000      	movs	r0, #0
 800795e:	f7f9 fb0b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8007962:	49bb      	ldr	r1, [pc, #748]	; (8007c50 <OTM8009A_Init+0x358>)
 8007964:	2000      	movs	r0, #0
 8007966:	f7f9 fb07 	bl	8000f78 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800796a:	49ba      	ldr	r1, [pc, #744]	; (8007c54 <OTM8009A_Init+0x35c>)
 800796c:	2000      	movs	r0, #0
 800796e:	f7f9 fb03 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8007972:	49b9      	ldr	r1, [pc, #740]	; (8007c58 <OTM8009A_Init+0x360>)
 8007974:	2000      	movs	r0, #0
 8007976:	f7f9 faff 	bl	8000f78 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800797a:	49ab      	ldr	r1, [pc, #684]	; (8007c28 <OTM8009A_Init+0x330>)
 800797c:	2000      	movs	r0, #0
 800797e:	f7f9 fafb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8007982:	49b6      	ldr	r1, [pc, #728]	; (8007c5c <OTM8009A_Init+0x364>)
 8007984:	2000      	movs	r0, #0
 8007986:	f7f9 faf7 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800798a:	49b5      	ldr	r1, [pc, #724]	; (8007c60 <OTM8009A_Init+0x368>)
 800798c:	2000      	movs	r0, #0
 800798e:	f7f9 faf3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8007992:	49b4      	ldr	r1, [pc, #720]	; (8007c64 <OTM8009A_Init+0x36c>)
 8007994:	2000      	movs	r0, #0
 8007996:	f7f9 faef 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800799a:	49b3      	ldr	r1, [pc, #716]	; (8007c68 <OTM8009A_Init+0x370>)
 800799c:	2000      	movs	r0, #0
 800799e:	f7f9 faeb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80079a2:	49b2      	ldr	r1, [pc, #712]	; (8007c6c <OTM8009A_Init+0x374>)
 80079a4:	2000      	movs	r0, #0
 80079a6:	f7f9 fae7 	bl	8000f78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80079aa:	49b1      	ldr	r1, [pc, #708]	; (8007c70 <OTM8009A_Init+0x378>)
 80079ac:	2000      	movs	r0, #0
 80079ae:	f7f9 fae3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80079b2:	49b0      	ldr	r1, [pc, #704]	; (8007c74 <OTM8009A_Init+0x37c>)
 80079b4:	2000      	movs	r0, #0
 80079b6:	f7f9 fadf 	bl	8000f78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80079ba:	49af      	ldr	r1, [pc, #700]	; (8007c78 <OTM8009A_Init+0x380>)
 80079bc:	2000      	movs	r0, #0
 80079be:	f7f9 fadb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80079c2:	49a3      	ldr	r1, [pc, #652]	; (8007c50 <OTM8009A_Init+0x358>)
 80079c4:	2000      	movs	r0, #0
 80079c6:	f7f9 fad7 	bl	8000f78 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80079ca:	4997      	ldr	r1, [pc, #604]	; (8007c28 <OTM8009A_Init+0x330>)
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7f9 fad3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80079d2:	49aa      	ldr	r1, [pc, #680]	; (8007c7c <OTM8009A_Init+0x384>)
 80079d4:	2002      	movs	r0, #2
 80079d6:	f7f9 facf 	bl	8000f78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80079da:	49a9      	ldr	r1, [pc, #676]	; (8007c80 <OTM8009A_Init+0x388>)
 80079dc:	2000      	movs	r0, #0
 80079de:	f7f9 facb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80079e2:	49a8      	ldr	r1, [pc, #672]	; (8007c84 <OTM8009A_Init+0x38c>)
 80079e4:	2000      	movs	r0, #0
 80079e6:	f7f9 fac7 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80079ea:	49a7      	ldr	r1, [pc, #668]	; (8007c88 <OTM8009A_Init+0x390>)
 80079ec:	2000      	movs	r0, #0
 80079ee:	f7f9 fac3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80079f2:	49a6      	ldr	r1, [pc, #664]	; (8007c8c <OTM8009A_Init+0x394>)
 80079f4:	2000      	movs	r0, #0
 80079f6:	f7f9 fabf 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80079fa:	49a5      	ldr	r1, [pc, #660]	; (8007c90 <OTM8009A_Init+0x398>)
 80079fc:	2000      	movs	r0, #0
 80079fe:	f7f9 fabb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8007a02:	49a4      	ldr	r1, [pc, #656]	; (8007c94 <OTM8009A_Init+0x39c>)
 8007a04:	2000      	movs	r0, #0
 8007a06:	f7f9 fab7 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007a0a:	4995      	ldr	r1, [pc, #596]	; (8007c60 <OTM8009A_Init+0x368>)
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f7f9 fab3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8007a12:	49a1      	ldr	r1, [pc, #644]	; (8007c98 <OTM8009A_Init+0x3a0>)
 8007a14:	2000      	movs	r0, #0
 8007a16:	f7f9 faaf 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8007a1a:	4993      	ldr	r1, [pc, #588]	; (8007c68 <OTM8009A_Init+0x370>)
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f7f9 faab 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8007a22:	499e      	ldr	r1, [pc, #632]	; (8007c9c <OTM8009A_Init+0x3a4>)
 8007a24:	2000      	movs	r0, #0
 8007a26:	f7f9 faa7 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8007a2a:	499d      	ldr	r1, [pc, #628]	; (8007ca0 <OTM8009A_Init+0x3a8>)
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7f9 faa3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8007a32:	499c      	ldr	r1, [pc, #624]	; (8007ca4 <OTM8009A_Init+0x3ac>)
 8007a34:	2002      	movs	r0, #2
 8007a36:	f7f9 fa9f 	bl	8000f78 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007a3a:	497d      	ldr	r1, [pc, #500]	; (8007c30 <OTM8009A_Init+0x338>)
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7f9 fa9b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8007a42:	4999      	ldr	r1, [pc, #612]	; (8007ca8 <OTM8009A_Init+0x3b0>)
 8007a44:	2006      	movs	r0, #6
 8007a46:	f7f9 fa97 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007a4a:	4998      	ldr	r1, [pc, #608]	; (8007cac <OTM8009A_Init+0x3b4>)
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f7f9 fa93 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8007a52:	4997      	ldr	r1, [pc, #604]	; (8007cb0 <OTM8009A_Init+0x3b8>)
 8007a54:	200e      	movs	r0, #14
 8007a56:	f7f9 fa8f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007a5a:	4996      	ldr	r1, [pc, #600]	; (8007cb4 <OTM8009A_Init+0x3bc>)
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f7f9 fa8b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8007a62:	4995      	ldr	r1, [pc, #596]	; (8007cb8 <OTM8009A_Init+0x3c0>)
 8007a64:	200e      	movs	r0, #14
 8007a66:	f7f9 fa87 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007a6a:	4994      	ldr	r1, [pc, #592]	; (8007cbc <OTM8009A_Init+0x3c4>)
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f7f9 fa83 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8007a72:	4993      	ldr	r1, [pc, #588]	; (8007cc0 <OTM8009A_Init+0x3c8>)
 8007a74:	200a      	movs	r0, #10
 8007a76:	f7f9 fa7f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007a7a:	4992      	ldr	r1, [pc, #584]	; (8007cc4 <OTM8009A_Init+0x3cc>)
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f7f9 fa7b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8007a82:	4991      	ldr	r1, [pc, #580]	; (8007cc8 <OTM8009A_Init+0x3d0>)
 8007a84:	2000      	movs	r0, #0
 8007a86:	f7f9 fa77 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007a8a:	4969      	ldr	r1, [pc, #420]	; (8007c30 <OTM8009A_Init+0x338>)
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7f9 fa73 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8007a92:	498e      	ldr	r1, [pc, #568]	; (8007ccc <OTM8009A_Init+0x3d4>)
 8007a94:	200a      	movs	r0, #10
 8007a96:	f7f9 fa6f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007a9a:	498d      	ldr	r1, [pc, #564]	; (8007cd0 <OTM8009A_Init+0x3d8>)
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f7f9 fa6b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8007aa2:	498c      	ldr	r1, [pc, #560]	; (8007cd4 <OTM8009A_Init+0x3dc>)
 8007aa4:	200f      	movs	r0, #15
 8007aa6:	f7f9 fa67 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007aaa:	4980      	ldr	r1, [pc, #512]	; (8007cac <OTM8009A_Init+0x3b4>)
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7f9 fa63 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8007ab2:	4989      	ldr	r1, [pc, #548]	; (8007cd8 <OTM8009A_Init+0x3e0>)
 8007ab4:	200f      	movs	r0, #15
 8007ab6:	f7f9 fa5f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007aba:	497e      	ldr	r1, [pc, #504]	; (8007cb4 <OTM8009A_Init+0x3bc>)
 8007abc:	2000      	movs	r0, #0
 8007abe:	f7f9 fa5b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8007ac2:	4986      	ldr	r1, [pc, #536]	; (8007cdc <OTM8009A_Init+0x3e4>)
 8007ac4:	200a      	movs	r0, #10
 8007ac6:	f7f9 fa57 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007aca:	497c      	ldr	r1, [pc, #496]	; (8007cbc <OTM8009A_Init+0x3c4>)
 8007acc:	2000      	movs	r0, #0
 8007ace:	f7f9 fa53 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8007ad2:	4983      	ldr	r1, [pc, #524]	; (8007ce0 <OTM8009A_Init+0x3e8>)
 8007ad4:	200f      	movs	r0, #15
 8007ad6:	f7f9 fa4f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007ada:	497a      	ldr	r1, [pc, #488]	; (8007cc4 <OTM8009A_Init+0x3cc>)
 8007adc:	2000      	movs	r0, #0
 8007ade:	f7f9 fa4b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8007ae2:	4980      	ldr	r1, [pc, #512]	; (8007ce4 <OTM8009A_Init+0x3ec>)
 8007ae4:	200f      	movs	r0, #15
 8007ae6:	f7f9 fa47 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8007aea:	497f      	ldr	r1, [pc, #508]	; (8007ce8 <OTM8009A_Init+0x3f0>)
 8007aec:	2000      	movs	r0, #0
 8007aee:	f7f9 fa43 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8007af2:	497e      	ldr	r1, [pc, #504]	; (8007cec <OTM8009A_Init+0x3f4>)
 8007af4:	200a      	movs	r0, #10
 8007af6:	f7f9 fa3f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8007afa:	497d      	ldr	r1, [pc, #500]	; (8007cf0 <OTM8009A_Init+0x3f8>)
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7f9 fa3b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8007b02:	497c      	ldr	r1, [pc, #496]	; (8007cf4 <OTM8009A_Init+0x3fc>)
 8007b04:	200a      	movs	r0, #10
 8007b06:	f7f9 fa37 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007b0a:	4949      	ldr	r1, [pc, #292]	; (8007c30 <OTM8009A_Init+0x338>)
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	f7f9 fa33 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8007b12:	4979      	ldr	r1, [pc, #484]	; (8007cf8 <OTM8009A_Init+0x400>)
 8007b14:	200a      	movs	r0, #10
 8007b16:	f7f9 fa2f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007b1a:	496d      	ldr	r1, [pc, #436]	; (8007cd0 <OTM8009A_Init+0x3d8>)
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f7f9 fa2b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8007b22:	4976      	ldr	r1, [pc, #472]	; (8007cfc <OTM8009A_Init+0x404>)
 8007b24:	200f      	movs	r0, #15
 8007b26:	f7f9 fa27 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007b2a:	4960      	ldr	r1, [pc, #384]	; (8007cac <OTM8009A_Init+0x3b4>)
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f7f9 fa23 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8007b32:	4973      	ldr	r1, [pc, #460]	; (8007d00 <OTM8009A_Init+0x408>)
 8007b34:	200f      	movs	r0, #15
 8007b36:	f7f9 fa1f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007b3a:	495e      	ldr	r1, [pc, #376]	; (8007cb4 <OTM8009A_Init+0x3bc>)
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f7f9 fa1b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8007b42:	4970      	ldr	r1, [pc, #448]	; (8007d04 <OTM8009A_Init+0x40c>)
 8007b44:	200a      	movs	r0, #10
 8007b46:	f7f9 fa17 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007b4a:	495c      	ldr	r1, [pc, #368]	; (8007cbc <OTM8009A_Init+0x3c4>)
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f7f9 fa13 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8007b52:	496d      	ldr	r1, [pc, #436]	; (8007d08 <OTM8009A_Init+0x410>)
 8007b54:	200f      	movs	r0, #15
 8007b56:	f7f9 fa0f 	bl	8000f78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007b5a:	495a      	ldr	r1, [pc, #360]	; (8007cc4 <OTM8009A_Init+0x3cc>)
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f7f9 fa0b 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8007b62:	496a      	ldr	r1, [pc, #424]	; (8007d0c <OTM8009A_Init+0x414>)
 8007b64:	200f      	movs	r0, #15
 8007b66:	f7f9 fa07 	bl	8000f78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007b6a:	493d      	ldr	r1, [pc, #244]	; (8007c60 <OTM8009A_Init+0x368>)
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f7f9 fa03 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8007b72:	4967      	ldr	r1, [pc, #412]	; (8007d10 <OTM8009A_Init+0x418>)
 8007b74:	2000      	movs	r0, #0
 8007b76:	f7f9 f9ff 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8007b7a:	4966      	ldr	r1, [pc, #408]	; (8007d14 <OTM8009A_Init+0x41c>)
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f7f9 f9fb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8007b82:	4965      	ldr	r1, [pc, #404]	; (8007d18 <OTM8009A_Init+0x420>)
 8007b84:	2000      	movs	r0, #0
 8007b86:	f7f9 f9f7 	bl	8000f78 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8007b8a:	4964      	ldr	r1, [pc, #400]	; (8007d1c <OTM8009A_Init+0x424>)
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	f7f9 f9f3 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8007b92:	4963      	ldr	r1, [pc, #396]	; (8007d20 <OTM8009A_Init+0x428>)
 8007b94:	2000      	movs	r0, #0
 8007b96:	f7f9 f9ef 	bl	8000f78 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007b9a:	4923      	ldr	r1, [pc, #140]	; (8007c28 <OTM8009A_Init+0x330>)
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7f9 f9eb 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8007ba2:	4960      	ldr	r1, [pc, #384]	; (8007d24 <OTM8009A_Init+0x42c>)
 8007ba4:	2003      	movs	r0, #3
 8007ba6:	f7f9 f9e7 	bl	8000f78 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007baa:	491f      	ldr	r1, [pc, #124]	; (8007c28 <OTM8009A_Init+0x330>)
 8007bac:	2000      	movs	r0, #0
 8007bae:	f7f9 f9e3 	bl	8000f78 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007bb2:	491d      	ldr	r1, [pc, #116]	; (8007c28 <OTM8009A_Init+0x330>)
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7f9 f9df 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8007bba:	495b      	ldr	r1, [pc, #364]	; (8007d28 <OTM8009A_Init+0x430>)
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	f7f9 f9db 	bl	8000f78 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007bc2:	4919      	ldr	r1, [pc, #100]	; (8007c28 <OTM8009A_Init+0x330>)
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f7f9 f9d7 	bl	8000f78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8007bca:	4958      	ldr	r1, [pc, #352]	; (8007d2c <OTM8009A_Init+0x434>)
 8007bcc:	2010      	movs	r0, #16
 8007bce:	f7f9 f9d3 	bl	8000f78 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	4956      	ldr	r1, [pc, #344]	; (8007d30 <OTM8009A_Init+0x438>)
 8007bd6:	f7f9 f9cf 	bl	8000f78 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8007bda:	2078      	movs	r0, #120	; 0x78
 8007bdc:	f7f9 f9ca 	bl	8000f74 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8007be0:	2c00      	cmp	r4, #0
 8007be2:	f000 80c7 	beq.w	8007d74 <OTM8009A_Init+0x47c>
 8007be6:	2c02      	cmp	r4, #2
 8007be8:	d103      	bne.n	8007bf2 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8007bea:	4952      	ldr	r1, [pc, #328]	; (8007d34 <OTM8009A_Init+0x43c>)
 8007bec:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007bee:	f7f9 f9c3 	bl	8000f78 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007bf2:	2d01      	cmp	r5, #1
 8007bf4:	d10b      	bne.n	8007c0e <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8007bf6:	4950      	ldr	r1, [pc, #320]	; (8007d38 <OTM8009A_Init+0x440>)
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f7f9 f9bd 	bl	8000f78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8007bfe:	494f      	ldr	r1, [pc, #316]	; (8007d3c <OTM8009A_Init+0x444>)
 8007c00:	2004      	movs	r0, #4
 8007c02:	f7f9 f9b9 	bl	8000f78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8007c06:	494e      	ldr	r1, [pc, #312]	; (8007d40 <OTM8009A_Init+0x448>)
 8007c08:	2004      	movs	r0, #4
 8007c0a:	f7f9 f9b5 	bl	8000f78 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8007c0e:	494d      	ldr	r1, [pc, #308]	; (8007d44 <OTM8009A_Init+0x44c>)
 8007c10:	2000      	movs	r0, #0
 8007c12:	f7f9 f9b1 	bl	8000f78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8007c16:	494c      	ldr	r1, [pc, #304]	; (8007d48 <OTM8009A_Init+0x450>)
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f7f9 f9ad 	bl	8000f78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8007c1e:	494b      	ldr	r1, [pc, #300]	; (8007d4c <OTM8009A_Init+0x454>)
 8007c20:	2000      	movs	r0, #0
 8007c22:	f7f9 f9a9 	bl	8000f78 <DSI_IO_WriteCmd>
 8007c26:	e093      	b.n	8007d50 <OTM8009A_Init+0x458>
 8007c28:	08029f20 	.word	0x08029f20
 8007c2c:	08029f86 	.word	0x08029f86
 8007c30:	08029f36 	.word	0x08029f36
 8007c34:	0802a00c 	.word	0x0802a00c
 8007c38:	08029f4c 	.word	0x08029f4c
 8007c3c:	08029f62 	.word	0x08029f62
 8007c40:	08029f78 	.word	0x08029f78
 8007c44:	08029f7e 	.word	0x08029f7e
 8007c48:	08029f80 	.word	0x08029f80
 8007c4c:	08029f82 	.word	0x08029f82
 8007c50:	08029f84 	.word	0x08029f84
 8007c54:	08029f22 	.word	0x08029f22
 8007c58:	08029f24 	.word	0x08029f24
 8007c5c:	08029f26 	.word	0x08029f26
 8007c60:	08029f28 	.word	0x08029f28
 8007c64:	08029f2a 	.word	0x08029f2a
 8007c68:	08029f2c 	.word	0x08029f2c
 8007c6c:	08029f2e 	.word	0x08029f2e
 8007c70:	08029f30 	.word	0x08029f30
 8007c74:	08029f32 	.word	0x08029f32
 8007c78:	08029f34 	.word	0x08029f34
 8007c7c:	0802a08a 	.word	0x0802a08a
 8007c80:	08029f38 	.word	0x08029f38
 8007c84:	08029f3a 	.word	0x08029f3a
 8007c88:	08029f3c 	.word	0x08029f3c
 8007c8c:	08029f3e 	.word	0x08029f3e
 8007c90:	08029f40 	.word	0x08029f40
 8007c94:	08029f42 	.word	0x08029f42
 8007c98:	08029f44 	.word	0x08029f44
 8007c9c:	08029f46 	.word	0x08029f46
 8007ca0:	08029f48 	.word	0x08029f48
 8007ca4:	0802a08d 	.word	0x0802a08d
 8007ca8:	0802a090 	.word	0x0802a090
 8007cac:	08029f4a 	.word	0x08029f4a
 8007cb0:	0802a097 	.word	0x0802a097
 8007cb4:	08029f4e 	.word	0x08029f4e
 8007cb8:	0802a0a6 	.word	0x0802a0a6
 8007cbc:	08029f50 	.word	0x08029f50
 8007cc0:	08029f8a 	.word	0x08029f8a
 8007cc4:	08029f52 	.word	0x08029f52
 8007cc8:	08029f70 	.word	0x08029f70
 8007ccc:	08029f95 	.word	0x08029f95
 8007cd0:	08029f54 	.word	0x08029f54
 8007cd4:	08029fa0 	.word	0x08029fa0
 8007cd8:	08029fb0 	.word	0x08029fb0
 8007cdc:	08029fc0 	.word	0x08029fc0
 8007ce0:	08029fcb 	.word	0x08029fcb
 8007ce4:	08029fdb 	.word	0x08029fdb
 8007ce8:	08029f56 	.word	0x08029f56
 8007cec:	08029feb 	.word	0x08029feb
 8007cf0:	08029f58 	.word	0x08029f58
 8007cf4:	08029ff6 	.word	0x08029ff6
 8007cf8:	0802a001 	.word	0x0802a001
 8007cfc:	0802a00f 	.word	0x0802a00f
 8007d00:	0802a01f 	.word	0x0802a01f
 8007d04:	0802a02f 	.word	0x0802a02f
 8007d08:	0802a03a 	.word	0x0802a03a
 8007d0c:	0802a04a 	.word	0x0802a04a
 8007d10:	08029f72 	.word	0x08029f72
 8007d14:	08029f74 	.word	0x08029f74
 8007d18:	08029f76 	.word	0x08029f76
 8007d1c:	08029f7a 	.word	0x08029f7a
 8007d20:	08029f7c 	.word	0x08029f7c
 8007d24:	0802a05a 	.word	0x0802a05a
 8007d28:	0802a068 	.word	0x0802a068
 8007d2c:	0802a079 	.word	0x0802a079
 8007d30:	08029f5a 	.word	0x08029f5a
 8007d34:	08029f5c 	.word	0x08029f5c
 8007d38:	08029f60 	.word	0x08029f60
 8007d3c:	0802a05e 	.word	0x0802a05e
 8007d40:	0802a063 	.word	0x0802a063
 8007d44:	08029f64 	.word	0x08029f64
 8007d48:	08029f66 	.word	0x08029f66
 8007d4c:	08029f68 	.word	0x08029f68

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8007d50:	490a      	ldr	r1, [pc, #40]	; (8007d7c <OTM8009A_Init+0x484>)
 8007d52:	2000      	movs	r0, #0
 8007d54:	f7f9 f910 	bl	8000f78 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8007d58:	4909      	ldr	r1, [pc, #36]	; (8007d80 <OTM8009A_Init+0x488>)
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f7f9 f90c 	bl	8000f78 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007d60:	4908      	ldr	r1, [pc, #32]	; (8007d84 <OTM8009A_Init+0x48c>)
 8007d62:	2000      	movs	r0, #0
 8007d64:	f7f9 f908 	bl	8000f78 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8007d68:	4907      	ldr	r1, [pc, #28]	; (8007d88 <OTM8009A_Init+0x490>)
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f7f9 f904 	bl	8000f78 <DSI_IO_WriteCmd>

  return 0;
}
 8007d70:	2000      	movs	r0, #0
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007d74:	4905      	ldr	r1, [pc, #20]	; (8007d8c <OTM8009A_Init+0x494>)
 8007d76:	4620      	mov	r0, r4
 8007d78:	e739      	b.n	8007bee <OTM8009A_Init+0x2f6>
 8007d7a:	bf00      	nop
 8007d7c:	08029f6a 	.word	0x08029f6a
 8007d80:	08029f6c 	.word	0x08029f6c
 8007d84:	08029f20 	.word	0x08029f20
 8007d88:	08029f6e 	.word	0x08029f6e
 8007d8c:	08029f5e 	.word	0x08029f5e

08007d90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d90:	490f      	ldr	r1, [pc, #60]	; (8007dd0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d92:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d94:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8007da0:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <SystemInit+0x44>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	f042 0201 	orr.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007daa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007db2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007db6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007db8:	4a07      	ldr	r2, [pc, #28]	; (8007dd8 <SystemInit+0x48>)
 8007dba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007dc4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dca:	608b      	str	r3, [r1, #8]
#endif
}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	e000ed00 	.word	0xe000ed00
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	24003010 	.word	0x24003010

08007ddc <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ddc:	4a07      	ldr	r2, [pc, #28]	; (8007dfc <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dde:	2003      	movs	r0, #3
{
 8007de0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007de2:	6813      	ldr	r3, [r2, #0]
 8007de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dea:	f000 fa97 	bl	800831c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007dee:	2000      	movs	r0, #0
 8007df0:	f7fd f98a 	bl	8005108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007df4:	f7fc fe1a 	bl	8004a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007df8:	2000      	movs	r0, #0
 8007dfa:	bd08      	pop	{r3, pc}
 8007dfc:	40023c00 	.word	0x40023c00

08007e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007e00:	4a03      	ldr	r2, [pc, #12]	; (8007e10 <HAL_IncTick+0x10>)
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <HAL_IncTick+0x14>)
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	440b      	add	r3, r1
 8007e0a:	6013      	str	r3, [r2, #0]
}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	200124c4 	.word	0x200124c4
 8007e14:	20000064 	.word	0x20000064

08007e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007e18:	4b01      	ldr	r3, [pc, #4]	; (8007e20 <HAL_GetTick+0x8>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
}
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	200124c4 	.word	0x200124c4

08007e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e28:	f7ff fff6 	bl	8007e18 <HAL_GetTick>
 8007e2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e2e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007e30:	bf1e      	ittt	ne
 8007e32:	4b04      	ldrne	r3, [pc, #16]	; (8007e44 <HAL_Delay+0x20>)
 8007e34:	781b      	ldrbne	r3, [r3, #0]
 8007e36:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e38:	f7ff ffee 	bl	8007e18 <HAL_GetTick>
 8007e3c:	1b43      	subs	r3, r0, r5
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	d3fa      	bcc.n	8007e38 <HAL_Delay+0x14>
  {
  }
}
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20000064 	.word	0x20000064

08007e48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e48:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f000 809b 	beq.w	8007f88 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007e52:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007e54:	b925      	cbnz	r5, 8007e60 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e56:	f7fc fe07 	bl	8004a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e5a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e5c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e62:	06db      	lsls	r3, r3, #27
 8007e64:	f100 808e 	bmi.w	8007f84 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e6e:	f023 0302 	bic.w	r3, r3, #2
 8007e72:	f043 0302 	orr.w	r3, r3, #2
 8007e76:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007e78:	4b44      	ldr	r3, [pc, #272]	; (8007f8c <HAL_ADC_Init+0x144>)
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007e80:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	6861      	ldr	r1, [r4, #4]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007e8a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e8c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e9c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e9e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007ea6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007eac:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007eae:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ebc:	4934      	ldr	r1, [pc, #208]	; (8007f90 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007ebe:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ec0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007ec2:	428a      	cmp	r2, r1
 8007ec4:	d052      	beq.n	8007f6c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ec6:	6899      	ldr	r1, [r3, #8]
 8007ec8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8007ecc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ece:	6899      	ldr	r1, [r3, #8]
 8007ed0:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ed2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ee2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ee4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007ee6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ee8:	f022 0202 	bic.w	r2, r2, #2
 8007eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007ef4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007ef6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d03e      	beq.n	8007f7c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007efe:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f00:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f06:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f08:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007f10:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f18:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8007f1a:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f1e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f24:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8007f3e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f42:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8007f54:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007f56:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8007f64:	2300      	movs	r3, #0
 8007f66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007f7a:	e7b2      	b.n	8007ee2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f82:	e7c9      	b.n	8007f18 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8007f84:	2001      	movs	r0, #1
 8007f86:	e7ed      	b.n	8007f64 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8007f88:	2001      	movs	r0, #1
 8007f8a:	e7ee      	b.n	8007f6a <HAL_ADC_Init+0x122>
 8007f8c:	40012300 	.word	0x40012300
 8007f90:	0f000001 	.word	0x0f000001

08007f94 <HAL_ADC_Start_IT>:
  __IO uint32_t counter = 0;
 8007f94:	2300      	movs	r3, #0
{
 8007f96:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8007f98:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007f9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d06c      	beq.n	800807c <HAL_ADC_Start_IT+0xe8>
 8007fa2:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007fa4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8007fa6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007faa:	6893      	ldr	r3, [r2, #8]
 8007fac:	07d9      	lsls	r1, r3, #31
 8007fae:	d50c      	bpl.n	8007fca <HAL_ADC_Start_IT+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007fb0:	6893      	ldr	r3, [r2, #8]
 8007fb2:	f013 0301 	ands.w	r3, r3, #1
 8007fb6:	d11a      	bne.n	8007fee <HAL_ADC_Start_IT+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fb8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007fba:	f042 0210 	orr.w	r2, r2, #16
 8007fbe:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	6442      	str	r2, [r0, #68]	; 0x44
 8007fc8:	e03e      	b.n	8008048 <HAL_ADC_Start_IT+0xb4>
    __HAL_ADC_ENABLE(hadc);
 8007fca:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007fcc:	492c      	ldr	r1, [pc, #176]	; (8008080 <HAL_ADC_Start_IT+0xec>)
    __HAL_ADC_ENABLE(hadc);
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <HAL_ADC_Start_IT+0xf0>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8007fe0:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0e3      	beq.n	8007fb0 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	e7f8      	b.n	8007fe0 <HAL_ADC_Start_IT+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 8007fee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007ff4:	f023 0301 	bic.w	r3, r3, #1
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffc:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ffe:	6853      	ldr	r3, [r2, #4]
 8008000:	055b      	lsls	r3, r3, #21
 8008002:	d505      	bpl.n	8008010 <HAL_ADC_Start_IT+0x7c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008004:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008006:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800800a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800800e:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008010:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008012:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8008016:	d002      	beq.n	800801e <HAL_ADC_Start_IT+0x8a>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008018:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800801a:	f023 0306 	bic.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800801e:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8008020:	2300      	movs	r3, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008022:	4919      	ldr	r1, [pc, #100]	; (8008088 <HAL_ADC_Start_IT+0xf4>)
    __HAL_UNLOCK(hadc);
 8008024:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008028:	f06f 0322 	mvn.w	r3, #34	; 0x22
 800802c:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800802e:	6853      	ldr	r3, [r2, #4]
 8008030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008034:	f043 0320 	orr.w	r3, r3, #32
 8008038:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800803a:	684b      	ldr	r3, [r1, #4]
 800803c:	06d8      	lsls	r0, r3, #27
 800803e:	d106      	bne.n	800804e <HAL_ADC_Start_IT+0xba>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008040:	6890      	ldr	r0, [r2, #8]
 8008042:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8008046:	d014      	beq.n	8008072 <HAL_ADC_Start_IT+0xde>
  return HAL_OK;
 8008048:	2000      	movs	r0, #0
}
 800804a:	b002      	add	sp, #8
 800804c:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <HAL_ADC_Start_IT+0xf8>)
 8008050:	429a      	cmp	r2, r3
 8008052:	d107      	bne.n	8008064 <HAL_ADC_Start_IT+0xd0>
 8008054:	6893      	ldr	r3, [r2, #8]
 8008056:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800805a:	d103      	bne.n	8008064 <HAL_ADC_Start_IT+0xd0>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800805c:	6893      	ldr	r3, [r2, #8]
 800805e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008062:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008064:	684b      	ldr	r3, [r1, #4]
 8008066:	06db      	lsls	r3, r3, #27
 8008068:	d4ee      	bmi.n	8008048 <HAL_ADC_Start_IT+0xb4>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <HAL_ADC_Start_IT+0xfc>)
 800806c:	429a      	cmp	r2, r3
 800806e:	d1eb      	bne.n	8008048 <HAL_ADC_Start_IT+0xb4>
 8008070:	e7e6      	b.n	8008040 <HAL_ADC_Start_IT+0xac>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008072:	6893      	ldr	r3, [r2, #8]
 8008074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008078:	6093      	str	r3, [r2, #8]
 800807a:	e7e6      	b.n	800804a <HAL_ADC_Start_IT+0xb6>
  __HAL_LOCK(hadc);
 800807c:	2002      	movs	r0, #2
 800807e:	e7e4      	b.n	800804a <HAL_ADC_Start_IT+0xb6>
 8008080:	000f4240 	.word	0x000f4240
 8008084:	20000060 	.word	0x20000060
 8008088:	40012300 	.word	0x40012300
 800808c:	40012000 	.word	0x40012000
 8008090:	40012200 	.word	0x40012200

08008094 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8008094:	6803      	ldr	r3, [r0, #0]
 8008096:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8008098:	4770      	bx	lr

0800809a <HAL_ADC_LevelOutOfWindowCallback>:
 800809a:	4770      	bx	lr

0800809c <HAL_ADC_ErrorCallback>:
 800809c:	4770      	bx	lr

0800809e <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 800809e:	6803      	ldr	r3, [r0, #0]
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80080a2:	681e      	ldr	r6, [r3, #0]
{
 80080a4:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80080a6:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 80080a8:	07b2      	lsls	r2, r6, #30
 80080aa:	d52b      	bpl.n	8008104 <HAL_ADC_IRQHandler+0x66>
 80080ac:	06a8      	lsls	r0, r5, #26
 80080ae:	d529      	bpl.n	8008104 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080b2:	06d1      	lsls	r1, r2, #27
 80080b4:	d403      	bmi.n	80080be <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80080b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080bc:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80080c4:	d117      	bne.n	80080f6 <HAL_ADC_IRQHandler+0x58>
 80080c6:	69a2      	ldr	r2, [r4, #24]
 80080c8:	b9aa      	cbnz	r2, 80080f6 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80080ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80080cc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80080d0:	d002      	beq.n	80080d8 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80080d2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80080d4:	0552      	lsls	r2, r2, #21
 80080d6:	d40e      	bmi.n	80080f6 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	f022 0220 	bic.w	r2, r2, #32
 80080de:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80080e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080e6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ea:	04d8      	lsls	r0, r3, #19
 80080ec:	d403      	bmi.n	80080f6 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080f0:	f043 0301 	orr.w	r3, r3, #1
 80080f4:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80080f6:	4620      	mov	r0, r4
 80080f8:	f7fc fc82 	bl	8004a00 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	f06f 0212 	mvn.w	r2, #18
 8008102:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008104:	0771      	lsls	r1, r6, #29
 8008106:	d533      	bpl.n	8008170 <HAL_ADC_IRQHandler+0xd2>
 8008108:	062a      	lsls	r2, r5, #24
 800810a:	d531      	bpl.n	8008170 <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800810c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800810e:	06db      	lsls	r3, r3, #27
 8008110:	d403      	bmi.n	800811a <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008118:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008122:	d11e      	bne.n	8008162 <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008126:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800812a:	d002      	beq.n	8008132 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800812c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800812e:	0550      	lsls	r0, r2, #21
 8008130:	d417      	bmi.n	8008162 <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008132:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008134:	0551      	lsls	r1, r2, #21
 8008136:	d414      	bmi.n	8008162 <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008138:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800813a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800813e:	d110      	bne.n	8008162 <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008140:	69a2      	ldr	r2, [r4, #24]
 8008142:	b972      	cbnz	r2, 8008162 <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800814a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800814c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800814e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008152:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008156:	05da      	lsls	r2, r3, #23
 8008158:	d403      	bmi.n	8008162 <HAL_ADC_IRQHandler+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800815a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008162:	4620      	mov	r0, r4
 8008164:	f000 f8d8 	bl	8008318 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	f06f 020c 	mvn.w	r2, #12
 800816e:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008170:	07f3      	lsls	r3, r6, #31
 8008172:	d510      	bpl.n	8008196 <HAL_ADC_IRQHandler+0xf8>
 8008174:	0668      	lsls	r0, r5, #25
 8008176:	d50e      	bpl.n	8008196 <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	07d9      	lsls	r1, r3, #31
 800817e:	d50a      	bpl.n	8008196 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008180:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008182:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008188:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800818a:	f7ff ff86 	bl	800809a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f06f 0201 	mvn.w	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008196:	06b2      	lsls	r2, r6, #26
 8008198:	d50e      	bpl.n	80081b8 <HAL_ADC_IRQHandler+0x11a>
 800819a:	016b      	lsls	r3, r5, #5
 800819c:	d50c      	bpl.n	80081b8 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800819e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081a0:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 80081a4:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081a6:	f043 0302 	orr.w	r3, r3, #2
 80081aa:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80081b0:	f7ff ff74 	bl	800809c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	601d      	str	r5, [r3, #0]
}
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080081bc <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80081bc:	2300      	movs	r3, #0
{
 80081be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80081c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80081c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d079      	beq.n	80082be <HAL_ADC_ConfigChannel+0x102>
 80081ca:	2301      	movs	r3, #1
 80081cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80081d0:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081d2:	6803      	ldr	r3, [r0, #0]
 80081d4:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80081d6:	2d09      	cmp	r5, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80081d8:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081da:	eb06 0446 	add.w	r4, r6, r6, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80081de:	d93a      	bls.n	8008256 <HAL_ADC_ConfigChannel+0x9a>
 80081e0:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80081e4:	d037      	beq.n	8008256 <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081e6:	3c1e      	subs	r4, #30
 80081e8:	f04f 0c07 	mov.w	ip, #7
 80081ec:	68df      	ldr	r7, [r3, #12]
 80081ee:	fa0c fc04 	lsl.w	ip, ip, r4
 80081f2:	ea27 070c 	bic.w	r7, r7, ip
 80081f6:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80081f8:	4f42      	ldr	r7, [pc, #264]	; (8008304 <HAL_ADC_ConfigChannel+0x148>)
 80081fa:	42bd      	cmp	r5, r7
 80081fc:	d126      	bne.n	800824c <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80081fe:	68dc      	ldr	r4, [r3, #12]
 8008200:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008204:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8008206:	6849      	ldr	r1, [r1, #4]
 8008208:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800820a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 800820e:	d830      	bhi.n	8008272 <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008210:	3a05      	subs	r2, #5
 8008212:	241f      	movs	r4, #31
 8008214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008216:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008218:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800821c:	ea21 0104 	bic.w	r1, r1, r4
 8008220:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008222:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008224:	430a      	orrs	r2, r1
 8008226:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008228:	4a37      	ldr	r2, [pc, #220]	; (8008308 <HAL_ADC_ConfigChannel+0x14c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d108      	bne.n	8008240 <HAL_ADC_ConfigChannel+0x84>
 800822e:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8008232:	d146      	bne.n	80082c2 <HAL_ADC_ConfigChannel+0x106>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008234:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8008238:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800823c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8008240:	2300      	movs	r3, #0
 8008242:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8008246:	4618      	mov	r0, r3
}
 8008248:	b003      	add	sp, #12
 800824a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800824c:	68df      	ldr	r7, [r3, #12]
 800824e:	fa02 f404 	lsl.w	r4, r2, r4
 8008252:	433c      	orrs	r4, r7
 8008254:	e7d6      	b.n	8008204 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008256:	f04f 0c07 	mov.w	ip, #7
 800825a:	691f      	ldr	r7, [r3, #16]
 800825c:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008260:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008264:	ea27 070c 	bic.w	r7, r7, ip
 8008268:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800826a:	691f      	ldr	r7, [r3, #16]
 800826c:	433c      	orrs	r4, r7
 800826e:	611c      	str	r4, [r3, #16]
 8008270:	e7c9      	b.n	8008206 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8008272:	290c      	cmp	r1, #12
 8008274:	f04f 011f 	mov.w	r1, #31
 8008278:	d80b      	bhi.n	8008292 <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800827a:	3a23      	subs	r2, #35	; 0x23
 800827c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800827e:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008280:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008284:	ea24 0101 	bic.w	r1, r4, r1
 8008288:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800828a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800828c:	430a      	orrs	r2, r1
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
 8008290:	e7ca      	b.n	8008228 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008292:	3a41      	subs	r2, #65	; 0x41
 8008294:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008296:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008298:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800829c:	ea24 0101 	bic.w	r1, r4, r1
 80082a0:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082a4:	430a      	orrs	r2, r1
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80082a8:	e7be      	b.n	8008228 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80082aa:	4b18      	ldr	r3, [pc, #96]	; (800830c <HAL_ADC_ConfigChannel+0x150>)
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80082b2:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80082ba:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80082bc:	e7c0      	b.n	8008240 <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 80082be:	2002      	movs	r0, #2
 80082c0:	e7c2      	b.n	8008248 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082c2:	2d12      	cmp	r5, #18
 80082c4:	d0f1      	beq.n	80082aa <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80082c6:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <HAL_ADC_ConfigChannel+0x148>)
 80082c8:	429d      	cmp	r5, r3
 80082ca:	d001      	beq.n	80082d0 <HAL_ADC_ConfigChannel+0x114>
 80082cc:	2d11      	cmp	r5, #17
 80082ce:	d1b7      	bne.n	8008240 <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 80082d0:	4b0e      	ldr	r3, [pc, #56]	; (800830c <HAL_ADC_ConfigChannel+0x150>)
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80082d8:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80082e0:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <HAL_ADC_ConfigChannel+0x148>)
 80082e4:	429d      	cmp	r5, r3
 80082e6:	d1ab      	bne.n	8008240 <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80082e8:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_ADC_ConfigChannel+0x154>)
 80082ea:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <HAL_ADC_ConfigChannel+0x158>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f2:	220a      	movs	r2, #10
 80082f4:	4353      	muls	r3, r2
        counter--;
 80082f6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0a0      	beq.n	8008240 <HAL_ADC_ConfigChannel+0x84>
        counter--;
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	3b01      	subs	r3, #1
 8008302:	e7f8      	b.n	80082f6 <HAL_ADC_ConfigChannel+0x13a>
 8008304:	10000012 	.word	0x10000012
 8008308:	40012000 	.word	0x40012000
 800830c:	40012300 	.word	0x40012300
 8008310:	20000060 	.word	0x20000060
 8008314:	000f4240 	.word	0x000f4240

08008318 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008318:	4770      	bx	lr
	...

0800831c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800831c:	4907      	ldr	r1, [pc, #28]	; (800833c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800831e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008320:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008322:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800832a:	0412      	lsls	r2, r2, #16
 800832c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800832e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008338:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800833a:	4770      	bx	lr
 800833c:	e000ed00 	.word	0xe000ed00

08008340 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008340:	4b16      	ldr	r3, [pc, #88]	; (800839c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008342:	b530      	push	{r4, r5, lr}
 8008344:	68dc      	ldr	r4, [r3, #12]
 8008346:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800834a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800834e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008350:	2d04      	cmp	r5, #4
 8008352:	bf28      	it	cs
 8008354:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008356:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008358:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800835c:	bf8c      	ite	hi
 800835e:	3c03      	subhi	r4, #3
 8008360:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008362:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8008366:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008368:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800836c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008370:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008374:	fa01 f104 	lsl.w	r1, r1, r4
 8008378:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800837c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008380:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8008382:	db06      	blt.n	8008392 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008384:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008388:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800838c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008390:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008392:	f000 000f 	and.w	r0, r0, #15
 8008396:	4a02      	ldr	r2, [pc, #8]	; (80083a0 <HAL_NVIC_SetPriority+0x60>)
 8008398:	5413      	strb	r3, [r2, r0]
 800839a:	e7f9      	b.n	8008390 <HAL_NVIC_SetPriority+0x50>
 800839c:	e000ed00 	.word	0xe000ed00
 80083a0:	e000ed14 	.word	0xe000ed14

080083a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80083a4:	2800      	cmp	r0, #0
 80083a6:	db08      	blt.n	80083ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083a8:	0942      	lsrs	r2, r0, #5
 80083aa:	2301      	movs	r3, #1
 80083ac:	f000 001f 	and.w	r0, r0, #31
 80083b0:	fa03 f000 	lsl.w	r0, r3, r0
 80083b4:	4b01      	ldr	r3, [pc, #4]	; (80083bc <HAL_NVIC_EnableIRQ+0x18>)
 80083b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80083ba:	4770      	bx	lr
 80083bc:	e000e100 	.word	0xe000e100

080083c0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80083c0:	2800      	cmp	r0, #0
 80083c2:	db0d      	blt.n	80083e0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083c4:	0943      	lsrs	r3, r0, #5
 80083c6:	2201      	movs	r2, #1
 80083c8:	f000 001f 	and.w	r0, r0, #31
 80083cc:	3320      	adds	r3, #32
 80083ce:	fa02 f000 	lsl.w	r0, r2, r0
 80083d2:	4a04      	ldr	r2, [pc, #16]	; (80083e4 <HAL_NVIC_DisableIRQ+0x24>)
 80083d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083dc:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	e000e100 	.word	0xe000e100

080083e8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80083e8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80083ec:	4b04      	ldr	r3, [pc, #16]	; (8008400 <HAL_MPU_Disable+0x18>)
 80083ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	e000ed00 	.word	0xe000ed00

08008404 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <HAL_MPU_Enable+0x1c>)
 8008406:	f040 0001 	orr.w	r0, r0, #1
 800840a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800840e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008410:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008414:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800841a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800841e:	4770      	bx	lr
 8008420:	e000ed00 	.word	0xe000ed00

08008424 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008424:	7843      	ldrb	r3, [r0, #1]
 8008426:	4a14      	ldr	r2, [pc, #80]	; (8008478 <HAL_MPU_ConfigRegion+0x54>)
{
 8008428:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800842a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800842e:	7801      	ldrb	r1, [r0, #0]
 8008430:	b1e9      	cbz	r1, 800846e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8008432:	6843      	ldr	r3, [r0, #4]
 8008434:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008438:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800843a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800843c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800843e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008442:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008444:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008446:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800844a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800844c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008450:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008452:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008456:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800845c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800845e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008462:	7a01      	ldrb	r1, [r0, #8]
 8008464:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008468:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800846c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800846e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8008472:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8008476:	e7f9      	b.n	800846c <HAL_MPU_ConfigRegion+0x48>
 8008478:	e000ed00 	.word	0xe000ed00

0800847c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800847c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800847e:	4604      	mov	r4, r0
 8008480:	b908      	cbnz	r0, 8008486 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8008482:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008484:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008486:	7f43      	ldrb	r3, [r0, #29]
 8008488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800848c:	b913      	cbnz	r3, 8008494 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800848e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8008490:	f7fc fb20 	bl	8004ad4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008494:	2302      	movs	r3, #2
 8008496:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008498:	7923      	ldrb	r3, [r4, #4]
 800849a:	b9e3      	cbnz	r3, 80084d6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	4a13      	ldr	r2, [pc, #76]	; (80084ec <HAL_CRC_Init+0x70>)
 80084a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	f022 0218 	bic.w	r2, r2, #24
 80084a8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80084aa:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80084ac:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80084ae:	b9d2      	cbnz	r2, 80084e6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80084b4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80084b6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	6961      	ldr	r1, [r4, #20]
 80084bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80084c0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80084c2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80084c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084cc:	430a      	orrs	r2, r1
 80084ce:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80084d0:	2301      	movs	r3, #1
 80084d2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80084d4:	e7d6      	b.n	8008484 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80084d6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 f808 	bl	80084f0 <HAL_CRCEx_Polynomial_Set>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d0e2      	beq.n	80084aa <HAL_CRC_Init+0x2e>
 80084e4:	e7cd      	b.n	8008482 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	e7e4      	b.n	80084b4 <HAL_CRC_Init+0x38>
 80084ea:	bf00      	nop
 80084ec:	04c11db7 	.word	0x04c11db7

080084f0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80084f0:	231f      	movs	r3, #31
{
 80084f2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80084f4:	3b01      	subs	r3, #1
 80084f6:	d31c      	bcc.n	8008532 <HAL_CRCEx_Polynomial_Set+0x42>
 80084f8:	fa21 f403 	lsr.w	r4, r1, r3
 80084fc:	07e4      	lsls	r4, r4, #31
 80084fe:	d5f9      	bpl.n	80084f4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8008500:	2a10      	cmp	r2, #16
 8008502:	d012      	beq.n	800852a <HAL_CRCEx_Polynomial_Set+0x3a>
 8008504:	d804      	bhi.n	8008510 <HAL_CRCEx_Polynomial_Set+0x20>
 8008506:	b13a      	cbz	r2, 8008518 <HAL_CRCEx_Polynomial_Set+0x28>
 8008508:	2a08      	cmp	r2, #8
 800850a:	d010      	beq.n	800852e <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 800850c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800850e:	e00b      	b.n	8008528 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8008510:	2a18      	cmp	r2, #24
 8008512:	d1fb      	bne.n	800850c <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8008514:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8008516:	d8f9      	bhi.n	800850c <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008518:	6800      	ldr	r0, [r0, #0]
 800851a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800851c:	6883      	ldr	r3, [r0, #8]
 800851e:	f023 0318 	bic.w	r3, r3, #24
 8008522:	431a      	orrs	r2, r3
 8008524:	6082      	str	r2, [r0, #8]
 8008526:	2000      	movs	r0, #0
}
 8008528:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800852a:	2b07      	cmp	r3, #7
 800852c:	e7f3      	b.n	8008516 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800852e:	2b0f      	cmp	r3, #15
 8008530:	e7f1      	b.n	8008516 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8008532:	2a00      	cmp	r2, #0
 8008534:	d1ea      	bne.n	800850c <HAL_CRCEx_Polynomial_Set+0x1c>
 8008536:	e7ef      	b.n	8008518 <HAL_CRCEx_Polynomial_Set+0x28>

08008538 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008538:	6803      	ldr	r3, [r0, #0]
{
 800853a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800853c:	2018      	movs	r0, #24
 800853e:	b2d9      	uxtb	r1, r3
 8008540:	3910      	subs	r1, #16
 8008542:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8008546:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008548:	4c05      	ldr	r4, [pc, #20]	; (8008560 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800854a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800854c:	5c20      	ldrb	r0, [r4, r0]
 800854e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008550:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8008554:	f020 0003 	bic.w	r0, r0, #3
 8008558:	bf88      	it	hi
 800855a:	3004      	addhi	r0, #4
 800855c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800855e:	bd10      	pop	{r4, pc}
 8008560:	0802a0cd 	.word	0x0802a0cd

08008564 <HAL_DMA_Init>:
{
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008568:	f7ff fc56 	bl	8007e18 <HAL_GetTick>
 800856c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800856e:	2c00      	cmp	r4, #0
 8008570:	d073      	beq.n	800865a <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8008572:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8008574:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8008576:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800857a:	2300      	movs	r3, #0
 800857c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	f023 0301 	bic.w	r3, r3, #1
 8008586:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008588:	6821      	ldr	r1, [r4, #0]
 800858a:	680b      	ldr	r3, [r1, #0]
 800858c:	07d8      	lsls	r0, r3, #31
 800858e:	d42f      	bmi.n	80085f0 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8008590:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008592:	4d33      	ldr	r5, [pc, #204]	; (8008660 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008594:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008596:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008598:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800859c:	4313      	orrs	r3, r2
 800859e:	68e2      	ldr	r2, [r4, #12]
 80085a0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085a2:	6922      	ldr	r2, [r4, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	6962      	ldr	r2, [r4, #20]
 80085a8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085aa:	69e2      	ldr	r2, [r4, #28]
 80085ac:	4303      	orrs	r3, r0
 80085ae:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b0:	6a22      	ldr	r2, [r4, #32]
 80085b2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80085b6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085b8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80085bc:	bf02      	ittt	eq
 80085be:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80085c2:	4335      	orreq	r5, r6
 80085c4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085c6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80085c8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80085ca:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80085cc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085d4:	d133      	bne.n	800863e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80085d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80085d8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80085da:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80085dc:	b37d      	cbz	r5, 800863e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085de:	b990      	cbnz	r0, 8008606 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80085e0:	2a01      	cmp	r2, #1
 80085e2:	d021      	beq.n	8008628 <HAL_DMA_Init+0xc4>
 80085e4:	f032 0202 	bics.w	r2, r2, #2
 80085e8:	d129      	bne.n	800863e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085ea:	01ea      	lsls	r2, r5, #7
 80085ec:	d527      	bpl.n	800863e <HAL_DMA_Init+0xda>
 80085ee:	e01e      	b.n	800862e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085f0:	f7ff fc12 	bl	8007e18 <HAL_GetTick>
 80085f4:	1b40      	subs	r0, r0, r5
 80085f6:	2805      	cmp	r0, #5
 80085f8:	d9c6      	bls.n	8008588 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085fa:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085fc:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085fe:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8008600:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8008604:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008606:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800860a:	d114      	bne.n	8008636 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800860c:	2a03      	cmp	r2, #3
 800860e:	d816      	bhi.n	800863e <HAL_DMA_Init+0xda>
 8008610:	a001      	add	r0, pc, #4	; (adr r0, 8008618 <HAL_DMA_Init+0xb4>)
 8008612:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8008616:	bf00      	nop
 8008618:	0800862f 	.word	0x0800862f
 800861c:	080085eb 	.word	0x080085eb
 8008620:	0800862f 	.word	0x0800862f
 8008624:	08008629 	.word	0x08008629
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008628:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800862c:	d107      	bne.n	800863e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800862e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8008630:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008632:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8008634:	e7e4      	b.n	8008600 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8008636:	2a02      	cmp	r2, #2
 8008638:	d9f9      	bls.n	800862e <HAL_DMA_Init+0xca>
 800863a:	2a03      	cmp	r2, #3
 800863c:	d0d5      	beq.n	80085ea <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800863e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008640:	4620      	mov	r0, r4
 8008642:	f7ff ff79 	bl	8008538 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008646:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008648:	233f      	movs	r3, #63	; 0x3f
 800864a:	4093      	lsls	r3, r2
 800864c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800864e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008650:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008652:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008654:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8008658:	e7d4      	b.n	8008604 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800865a:	2001      	movs	r0, #1
 800865c:	e7d2      	b.n	8008604 <HAL_DMA_Init+0xa0>
 800865e:	bf00      	nop
 8008660:	e010803f 	.word	0xe010803f

08008664 <HAL_DMA_Start_IT>:
{
 8008664:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8008666:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800866a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800866c:	2c01      	cmp	r4, #1
 800866e:	d034      	beq.n	80086da <HAL_DMA_Start_IT+0x76>
 8008670:	2401      	movs	r4, #1
 8008672:	2500      	movs	r5, #0
 8008674:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008678:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800867c:	2c01      	cmp	r4, #1
 800867e:	f04f 0402 	mov.w	r4, #2
 8008682:	d128      	bne.n	80086d6 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008684:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008688:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800868a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8008692:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8008694:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008696:	6883      	ldr	r3, [r0, #8]
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d119      	bne.n	80086d0 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800869c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800869e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086a0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80086a2:	233f      	movs	r3, #63	; 0x3f
 80086a4:	4093      	lsls	r3, r2
 80086a6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	f043 0316 	orr.w	r3, r3, #22
 80086ae:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80086b0:	6963      	ldr	r3, [r4, #20]
 80086b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80086b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80086ba:	b11b      	cbz	r3, 80086c4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	f043 0308 	orr.w	r3, r3, #8
 80086c2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80086c4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086c6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	6023      	str	r3, [r4, #0]
}
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 80086d0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80086d2:	60e2      	str	r2, [r4, #12]
 80086d4:	e7e4      	b.n	80086a0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80086d6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80086da:	2002      	movs	r0, #2
 80086dc:	e7f7      	b.n	80086ce <HAL_DMA_Start_IT+0x6a>

080086de <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086de:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d003      	beq.n	80086ee <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086e6:	2380      	movs	r3, #128	; 0x80
 80086e8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80086ea:	2001      	movs	r0, #1
 80086ec:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80086ee:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80086f0:	2305      	movs	r3, #5
 80086f2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80086f6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80086f8:	6813      	ldr	r3, [r2, #0]
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	6013      	str	r3, [r2, #0]
}
 8008700:	4770      	bx	lr
	...

08008704 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008704:	2300      	movs	r3, #0
{
 8008706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8008708:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800870a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800870c:	4b5b      	ldr	r3, [pc, #364]	; (800887c <HAL_DMA_IRQHandler+0x178>)
{
 800870e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008710:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8008712:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008714:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8008716:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008718:	409a      	lsls	r2, r3
 800871a:	4232      	tst	r2, r6
 800871c:	d00c      	beq.n	8008738 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800871e:	6801      	ldr	r1, [r0, #0]
 8008720:	6808      	ldr	r0, [r1, #0]
 8008722:	0740      	lsls	r0, r0, #29
 8008724:	d508      	bpl.n	8008738 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008726:	6808      	ldr	r0, [r1, #0]
 8008728:	f020 0004 	bic.w	r0, r0, #4
 800872c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800872e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008730:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008738:	2201      	movs	r2, #1
 800873a:	409a      	lsls	r2, r3
 800873c:	4232      	tst	r2, r6
 800873e:	d008      	beq.n	8008752 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008740:	6821      	ldr	r1, [r4, #0]
 8008742:	6949      	ldr	r1, [r1, #20]
 8008744:	0609      	lsls	r1, r1, #24
 8008746:	d504      	bpl.n	8008752 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008748:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800874a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800874c:	f042 0202 	orr.w	r2, r2, #2
 8008750:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008752:	2204      	movs	r2, #4
 8008754:	409a      	lsls	r2, r3
 8008756:	4232      	tst	r2, r6
 8008758:	d008      	beq.n	800876c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800875a:	6821      	ldr	r1, [r4, #0]
 800875c:	6809      	ldr	r1, [r1, #0]
 800875e:	0788      	lsls	r0, r1, #30
 8008760:	d504      	bpl.n	800876c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008762:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008764:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008766:	f042 0204 	orr.w	r2, r2, #4
 800876a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800876c:	2210      	movs	r2, #16
 800876e:	409a      	lsls	r2, r3
 8008770:	4232      	tst	r2, r6
 8008772:	d010      	beq.n	8008796 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	6819      	ldr	r1, [r3, #0]
 8008778:	0709      	lsls	r1, r1, #28
 800877a:	d50c      	bpl.n	8008796 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800877c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	0350      	lsls	r0, r2, #13
 8008782:	d537      	bpl.n	80087f4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	0319      	lsls	r1, r3, #12
 8008788:	d401      	bmi.n	800878e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800878a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800878c:	e000      	b.n	8008790 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800878e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8008790:	b10b      	cbz	r3, 8008796 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8008792:	4620      	mov	r0, r4
 8008794:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008796:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008798:	2220      	movs	r2, #32
 800879a:	408a      	lsls	r2, r1
 800879c:	4232      	tst	r2, r6
 800879e:	d03a      	beq.n	8008816 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	06c6      	lsls	r6, r0, #27
 80087a6:	d536      	bpl.n	8008816 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80087a8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087aa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80087ae:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087b0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087b2:	d127      	bne.n	8008804 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087b4:	f022 0216 	bic.w	r2, r2, #22
 80087b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087ba:	695a      	ldr	r2, [r3, #20]
 80087bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087c0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80087c4:	b90a      	cbnz	r2, 80087ca <HAL_DMA_IRQHandler+0xc6>
 80087c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80087c8:	b11a      	cbz	r2, 80087d2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f022 0208 	bic.w	r2, r2, #8
 80087d0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087d2:	233f      	movs	r3, #63	; 0x3f
 80087d4:	408b      	lsls	r3, r1
 80087d6:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80087d8:	2301      	movs	r3, #1
 80087da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80087de:	2300      	movs	r3, #0
 80087e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80087e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d045      	beq.n	8008876 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80087ea:	4620      	mov	r0, r4
}
 80087ec:	b003      	add	sp, #12
 80087ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80087f2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	05d2      	lsls	r2, r2, #23
 80087f8:	d4c7      	bmi.n	800878a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	f022 0208 	bic.w	r2, r2, #8
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e7c2      	b.n	800878a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008804:	0350      	lsls	r0, r2, #13
 8008806:	d527      	bpl.n	8008858 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	0319      	lsls	r1, r3, #12
 800880c:	d431      	bmi.n	8008872 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800880e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8008810:	b10b      	cbz	r3, 8008816 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8008812:	4620      	mov	r0, r4
 8008814:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008816:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008818:	b36b      	cbz	r3, 8008876 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800881a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800881c:	07da      	lsls	r2, r3, #31
 800881e:	d519      	bpl.n	8008854 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8008820:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8008824:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8008826:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800882a:	2305      	movs	r3, #5
 800882c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008830:	6813      	ldr	r3, [r2, #0]
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	3301      	adds	r3, #1
 800883c:	42bb      	cmp	r3, r7
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	d802      	bhi.n	8008848 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008842:	6813      	ldr	r3, [r2, #0]
 8008844:	07db      	lsls	r3, r3, #31
 8008846:	d4f7      	bmi.n	8008838 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8008848:	2301      	movs	r3, #1
 800884a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800884e:	2300      	movs	r3, #0
 8008850:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8008854:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008856:	e7c6      	b.n	80087e6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800885e:	d108      	bne.n	8008872 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008860:	6819      	ldr	r1, [r3, #0]
 8008862:	f021 0110 	bic.w	r1, r1, #16
 8008866:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008868:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800886a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800886e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8008872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008874:	e7cc      	b.n	8008810 <HAL_DMA_IRQHandler+0x10c>
}
 8008876:	b003      	add	sp, #12
 8008878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887a:	bf00      	nop
 800887c:	20000060 	.word	0x20000060

08008880 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8008880:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8008882:	4770      	bx	lr

08008884 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008884:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008886:	4604      	mov	r4, r0
 8008888:	b380      	cbz	r0, 80088ec <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800888a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800888e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008892:	b91b      	cbnz	r3, 800889c <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008894:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008898:	f7fc f932 	bl	8004b00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800889c:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800889e:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80088a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80088ac:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80088ae:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80088b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80088b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b4:	f022 0207 	bic.w	r2, r2, #7
 80088b8:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80088ba:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80088bc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80088be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80088c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80088c8:	430a      	orrs	r2, r1
 80088ca:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80088cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80088ce:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80088d2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80088d6:	0552      	lsls	r2, r2, #21
 80088d8:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80088dc:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80088de:	430a      	orrs	r2, r1
 80088e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80088e2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80088e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80088e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80088ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80088ec:	2001      	movs	r0, #1
 80088ee:	e7fc      	b.n	80088ea <HAL_DMA2D_Init+0x66>

080088f0 <HAL_DMA2D_LineEventCallback>:
 80088f0:	4770      	bx	lr

080088f2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80088f2:	4770      	bx	lr

080088f4 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80088f4:	6803      	ldr	r3, [r0, #0]
{
 80088f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80088f8:	685e      	ldr	r6, [r3, #4]
{
 80088fa:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80088fc:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80088fe:	07f2      	lsls	r2, r6, #31
 8008900:	d514      	bpl.n	800892c <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008902:	05e9      	lsls	r1, r5, #23
 8008904:	d512      	bpl.n	800892c <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800890c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800890e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008910:	f042 0201 	orr.w	r2, r2, #1
 8008914:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008916:	2201      	movs	r2, #1
 8008918:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800891a:	2304      	movs	r3, #4
 800891c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008920:	2300      	movs	r3, #0
 8008922:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008926:	69c3      	ldr	r3, [r0, #28]
 8008928:	b103      	cbz	r3, 800892c <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800892a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800892c:	06b2      	lsls	r2, r6, #26
 800892e:	d516      	bpl.n	800895e <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008930:	04ab      	lsls	r3, r5, #18
 8008932:	d514      	bpl.n	800895e <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800893c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800893e:	2220      	movs	r2, #32
 8008940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008942:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800894a:	2304      	movs	r3, #4
 800894c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008950:	2300      	movs	r3, #0
 8008952:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008956:	69e3      	ldr	r3, [r4, #28]
 8008958:	b10b      	cbz	r3, 800895e <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800895a:	4620      	mov	r0, r4
 800895c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800895e:	0730      	lsls	r0, r6, #28
 8008960:	d516      	bpl.n	8008990 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008962:	0529      	lsls	r1, r5, #20
 8008964:	d514      	bpl.n	8008990 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800896e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008970:	2208      	movs	r2, #8
 8008972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008974:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008976:	f043 0304 	orr.w	r3, r3, #4
 800897a:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800897c:	2304      	movs	r3, #4
 800897e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008982:	2300      	movs	r3, #0
 8008984:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008988:	69e3      	ldr	r3, [r4, #28]
 800898a:	b10b      	cbz	r3, 8008990 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800898c:	4620      	mov	r0, r4
 800898e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008990:	0772      	lsls	r2, r6, #29
 8008992:	d50b      	bpl.n	80089ac <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008994:	056b      	lsls	r3, r5, #21
 8008996:	d509      	bpl.n	80089ac <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008998:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800899a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80089a4:	2204      	movs	r2, #4
 80089a6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80089a8:	f7ff ffa2 	bl	80088f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80089ac:	07b0      	lsls	r0, r6, #30
 80089ae:	d514      	bpl.n	80089da <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80089b0:	05a9      	lsls	r1, r5, #22
 80089b2:	d512      	bpl.n	80089da <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80089bc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80089be:	2202      	movs	r2, #2
 80089c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80089c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80089c4:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80089c6:	2301      	movs	r3, #1
 80089c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80089cc:	2300      	movs	r3, #0
 80089ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 80089d2:	69a3      	ldr	r3, [r4, #24]
 80089d4:	b10b      	cbz	r3, 80089da <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80089d6:	4620      	mov	r0, r4
 80089d8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80089da:	06f2      	lsls	r2, r6, #27
 80089dc:	d513      	bpl.n	8008a06 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80089de:	04eb      	lsls	r3, r5, #19
 80089e0:	d511      	bpl.n	8008a06 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80089e2:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80089e4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80089ee:	2210      	movs	r2, #16
 80089f0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80089f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80089f4:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 80089fc:	2300      	movs	r3, #0
 80089fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008a02:	f7ff ff76 	bl	80088f2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008a06:	bd70      	pop	{r4, r5, r6, pc}

08008a08 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008a08:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008a0a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	f04f 0302 	mov.w	r3, #2
 8008a14:	d031      	beq.n	8008a7a <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a16:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8008a18:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a1a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a1e:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 8008a22:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a26:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a28:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a2c:	0513      	lsls	r3, r2, #20
 8008a2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a30:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008a34:	4e1b      	ldr	r6, [pc, #108]	; (8008aa4 <HAL_DMA2D_ConfigLayer+0x9c>)
 8008a36:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a38:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a3a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a3e:	2d01      	cmp	r5, #1
 8008a40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a42:	bf96      	itet	ls
 8008a44:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008a48:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a4c:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a4e:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008a50:	b9a9      	cbnz	r1, 8008a7e <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a52:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a54:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a56:	ea04 0406 	and.w	r4, r4, r6
 8008a5a:	ea43 0304 	orr.w	r3, r3, r4
 8008a5e:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008a60:	6a03      	ldr	r3, [r0, #32]
 8008a62:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a64:	d803      	bhi.n	8008a6e <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008a66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008a68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a6c:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008a74:	2300      	movs	r3, #0
 8008a76:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 8008a7a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008a7e:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a80:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008a82:	ea04 0406 	and.w	r4, r4, r6
 8008a86:	ea43 0304 	orr.w	r3, r3, r4
 8008a8a:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008a8c:	f04f 0318 	mov.w	r3, #24
 8008a90:	fb03 0101 	mla	r1, r3, r1, r0
 8008a94:	6a0b      	ldr	r3, [r1, #32]
 8008a96:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a98:	d8e9      	bhi.n	8008a6e <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008a9a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008aa0:	6213      	str	r3, [r2, #32]
 8008aa2:	e7e4      	b.n	8008a6e <HAL_DMA2D_ConfigLayer+0x66>
 8008aa4:	00ccfff0 	.word	0x00ccfff0

08008aa8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4607      	mov	r7, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ab4:	f7ff f9b0 	bl	8007e18 <HAL_GetTick>
 8008ab8:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008abe:	07d2      	lsls	r2, r2, #31
 8008ac0:	d50a      	bpl.n	8008ad8 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008ac2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8008ac6:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8008ac8:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008aca:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008ace:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8008ad2:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008ad8:	f7ff f99e 	bl	8007e18 <HAL_GetTick>
 8008adc:	eba0 0008 	sub.w	r0, r0, r8
 8008ae0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ae4:	d9e9      	bls.n	8008aba <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8008ae6:	2003      	movs	r0, #3
 8008ae8:	e7f4      	b.n	8008ad4 <DSI_ShortWrite+0x2c>

08008aea <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008aea:	7c03      	ldrb	r3, [r0, #16]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d05c      	beq.n	8008baa <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8008af0:	2200      	movs	r2, #0
 8008af2:	6803      	ldr	r3, [r0, #0]
 8008af4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008af8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008afc:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008afe:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008b00:	d507      	bpl.n	8008b12 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008b02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008b06:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8008b0a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8008b0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008b12:	078a      	lsls	r2, r1, #30
 8008b14:	d505      	bpl.n	8008b22 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008b16:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008b1a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8008b1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008b22:	074a      	lsls	r2, r1, #29
 8008b24:	d505      	bpl.n	8008b32 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008b26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008b32:	070a      	lsls	r2, r1, #28
 8008b34:	d505      	bpl.n	8008b42 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008b36:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b3a:	f042 0202 	orr.w	r2, r2, #2
 8008b3e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008b42:	06ca      	lsls	r2, r1, #27
 8008b44:	d505      	bpl.n	8008b52 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008b46:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b4a:	f042 020c 	orr.w	r2, r2, #12
 8008b4e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008b52:	068a      	lsls	r2, r1, #26
 8008b54:	d505      	bpl.n	8008b62 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008b56:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b5a:	f042 0210 	orr.w	r2, r2, #16
 8008b5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008b62:	064a      	lsls	r2, r1, #25
 8008b64:	d505      	bpl.n	8008b72 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008b66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b6a:	f042 0220 	orr.w	r2, r2, #32
 8008b6e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008b72:	060a      	lsls	r2, r1, #24
 8008b74:	d505      	bpl.n	8008b82 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008b76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008b82:	05ca      	lsls	r2, r1, #23
 8008b84:	d505      	bpl.n	8008b92 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008b86:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b8e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008b92:	058a      	lsls	r2, r1, #22
 8008b94:	d505      	bpl.n	8008ba2 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008b96:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008b9a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008b9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008baa:	2002      	movs	r0, #2
}
 8008bac:	4770      	bx	lr
	...

08008bb0 <HAL_DSI_Init>:
{
 8008bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb2:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f000 80a9 	beq.w	8008d0e <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008bbc:	7c43      	ldrb	r3, [r0, #17]
 8008bbe:	b90b      	cbnz	r3, 8008bc4 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008bc0:	f7fb ffbe 	bl	8004b40 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008bd2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008bd6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008bda:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8008be6:	f7ff f917 	bl	8007e18 <HAL_GetTick>
 8008bea:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8008bf2:	04d9      	lsls	r1, r3, #19
 8008bf4:	d57a      	bpl.n	8008cec <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008bf6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8008bfa:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8008bfe:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8008c02:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c06:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008c0a:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008c0e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c10:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008c14:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008c16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8008c1a:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008c22:	2300      	movs	r3, #0
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8008c2a:	f043 0301 	orr.w	r3, r3, #1
 8008c2e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8008c32:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008c3e:	f7ff f8f1 	bl	8007e24 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008c42:	f7ff f8e9 	bl	8007e18 <HAL_GetTick>
 8008c46:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8008c4e:	05d2      	lsls	r2, r2, #23
 8008c50:	d556      	bpl.n	8008d00 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008c52:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008c56:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008c5a:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008c5c:	f042 0206 	orr.w	r2, r2, #6
 8008c60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008c64:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008c68:	f022 0203 	bic.w	r2, r2, #3
 8008c6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008c70:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008c74:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008c76:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008c78:	f042 0201 	orr.w	r2, r2, #1
 8008c7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008c80:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008c84:	f022 0203 	bic.w	r2, r2, #3
 8008c88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008c8c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008c90:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008c92:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008c94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c9e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008ca4:	491b      	ldr	r1, [pc, #108]	; (8008d14 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008ca6:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008ca8:	686a      	ldr	r2, [r5, #4]
 8008caa:	2a01      	cmp	r2, #1
 8008cac:	bf38      	it	cc
 8008cae:	2201      	movcc	r2, #1
 8008cb0:	434a      	muls	r2, r1
 8008cb2:	68a9      	ldr	r1, [r5, #8]
 8008cb4:	f001 0103 	and.w	r1, r1, #3
 8008cb8:	408a      	lsls	r2, r1
 8008cba:	6829      	ldr	r1, [r5, #0]
 8008cbc:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8008cbe:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008cc0:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008cc4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8008cc8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8008ccc:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008cd0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008cda:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008cde:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8008ce2:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008ce4:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8008ce6:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8008ce8:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8008cea:	e007      	b.n	8008cfc <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008cec:	f7ff f894 	bl	8007e18 <HAL_GetTick>
 8008cf0:	1b80      	subs	r0, r0, r6
 8008cf2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008cf6:	f67f af79 	bls.w	8008bec <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008cfa:	2003      	movs	r0, #3
}
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008d00:	f7ff f88a 	bl	8007e18 <HAL_GetTick>
 8008d04:	1b80      	subs	r0, r0, r6
 8008d06:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008d0a:	d99d      	bls.n	8008c48 <HAL_DSI_Init+0x98>
 8008d0c:	e7f5      	b.n	8008cfa <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8008d0e:	2001      	movs	r0, #1
 8008d10:	e7f4      	b.n	8008cfc <HAL_DSI_Init+0x14c>
 8008d12:	bf00      	nop
 8008d14:	003d0900 	.word	0x003d0900

08008d18 <HAL_DSI_ErrorCallback>:
 8008d18:	4770      	bx	lr

08008d1a <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008d1a:	6803      	ldr	r3, [r0, #0]
 8008d1c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8008d20:	07d1      	lsls	r1, r2, #31
{
 8008d22:	b510      	push	{r4, lr}
 8008d24:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008d26:	d508      	bpl.n	8008d3a <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008d28:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008d2c:	07d2      	lsls	r2, r2, #31
 8008d2e:	d504      	bpl.n	8008d3a <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008d30:	2201      	movs	r2, #1
 8008d32:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8008d36:	f7f8 f991 	bl	800105c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8008d40:	0791      	lsls	r1, r2, #30
 8008d42:	d509      	bpl.n	8008d58 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008d44:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008d48:	0792      	lsls	r2, r2, #30
 8008d4a:	d505      	bpl.n	8008d58 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008d4c:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008d4e:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008d50:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008d54:	f7f8 f9b6 	bl	80010c4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8008d58:	69a3      	ldr	r3, [r4, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d04e      	beq.n	8008dfc <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008d5e:	6821      	ldr	r1, [r4, #0]
 8008d60:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008d64:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008d68:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008d6c:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008d6e:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008d72:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008d74:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008d76:	b119      	cbz	r1, 8008d80 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008d78:	6961      	ldr	r1, [r4, #20]
 8008d7a:	f041 0101 	orr.w	r1, r1, #1
 8008d7e:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008d80:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8008d84:	d003      	beq.n	8008d8e <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008d86:	6962      	ldr	r2, [r4, #20]
 8008d88:	f042 0202 	orr.w	r2, r2, #2
 8008d8c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008d8e:	07d8      	lsls	r0, r3, #31
 8008d90:	d503      	bpl.n	8008d9a <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008d92:	6962      	ldr	r2, [r4, #20]
 8008d94:	f042 0204 	orr.w	r2, r2, #4
 8008d98:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008d9a:	0799      	lsls	r1, r3, #30
 8008d9c:	d503      	bpl.n	8008da6 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008d9e:	6962      	ldr	r2, [r4, #20]
 8008da0:	f042 0208 	orr.w	r2, r2, #8
 8008da4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008da6:	f013 0f0c 	tst.w	r3, #12
 8008daa:	d003      	beq.n	8008db4 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008dac:	6962      	ldr	r2, [r4, #20]
 8008dae:	f042 0210 	orr.w	r2, r2, #16
 8008db2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8008db4:	06da      	lsls	r2, r3, #27
 8008db6:	d503      	bpl.n	8008dc0 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008db8:	6962      	ldr	r2, [r4, #20]
 8008dba:	f042 0220 	orr.w	r2, r2, #32
 8008dbe:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008dc0:	0698      	lsls	r0, r3, #26
 8008dc2:	d503      	bpl.n	8008dcc <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8008dc4:	6962      	ldr	r2, [r4, #20]
 8008dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dca:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8008dcc:	0659      	lsls	r1, r3, #25
 8008dce:	d503      	bpl.n	8008dd8 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008dd0:	6962      	ldr	r2, [r4, #20]
 8008dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dd6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008dd8:	061a      	lsls	r2, r3, #24
 8008dda:	d503      	bpl.n	8008de4 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8008ddc:	6962      	ldr	r2, [r4, #20]
 8008dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008de2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008de4:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8008de8:	d003      	beq.n	8008df2 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008dea:	6963      	ldr	r3, [r4, #20]
 8008dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008df0:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8008df2:	6963      	ldr	r3, [r4, #20]
 8008df4:	b113      	cbz	r3, 8008dfc <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff ff8e 	bl	8008d18 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8008dfc:	bd10      	pop	{r4, pc}

08008dfe <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008dfe:	7c03      	ldrb	r3, [r0, #16]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d00b      	beq.n	8008e1c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008e04:	6803      	ldr	r3, [r0, #0]
 8008e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e08:	f022 0203 	bic.w	r2, r2, #3
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e10:	4311      	orrs	r1, r2
 8008e12:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008e14:	2300      	movs	r3, #0
 8008e16:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008e1c:	2002      	movs	r0, #2
}
 8008e1e:	4770      	bx	lr

08008e20 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008e20:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008e22:	7c03      	ldrb	r3, [r0, #16]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d06a      	beq.n	8008efe <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008e28:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008e2a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008e34:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008e38:	f022 0201 	bic.w	r2, r2, #1
 8008e3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008e40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008e44:	f042 0201 	orr.w	r2, r2, #1
 8008e48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	f022 0203 	bic.w	r2, r2, #3
 8008e52:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	4322      	orrs	r2, r4
 8008e58:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008e5a:	695a      	ldr	r2, [r3, #20]
 8008e5c:	f022 0207 	bic.w	r2, r2, #7
 8008e60:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008e62:	695c      	ldr	r4, [r3, #20]
 8008e64:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8008e68:	432a      	orrs	r2, r5
 8008e6a:	694d      	ldr	r5, [r1, #20]
 8008e6c:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008e6e:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008e70:	4322      	orrs	r2, r4
 8008e72:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	f022 020f 	bic.w	r2, r2, #15
 8008e7a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008e7c:	691c      	ldr	r4, [r3, #16]
 8008e7e:	432c      	orrs	r4, r5
 8008e80:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008e82:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8008e86:	f024 040e 	bic.w	r4, r4, #14
 8008e8a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008e8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008e92:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008e94:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008e98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8008e9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008e9e:	0c12      	lsrs	r2, r2, #16
 8008ea0:	0412      	lsls	r2, r2, #16
 8008ea2:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008ea4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008ea6:	4322      	orrs	r2, r4
 8008ea8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8008eaa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008eae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008eb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008eb6:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8008eba:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8008ebe:	432a      	orrs	r2, r5
 8008ec0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8008ec2:	432a      	orrs	r2, r5
 8008ec4:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008ec6:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008ec8:	432a      	orrs	r2, r5
 8008eca:	4322      	orrs	r2, r4
 8008ecc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8008ed0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008ed2:	f022 0201 	bic.w	r2, r2, #1
 8008ed6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008ed8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008eda:	430a      	orrs	r2, r1
 8008edc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008ede:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8008eea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008eee:	f042 0202 	orr.w	r2, r2, #2
 8008ef2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008efa:	4618      	mov	r0, r3
}
 8008efc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008efe:	2002      	movs	r0, #2
 8008f00:	e7fc      	b.n	8008efc <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008f04 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008f04:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f06:	7c03      	ldrb	r3, [r0, #16]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d02a      	beq.n	8008f62 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008f0c:	6802      	ldr	r2, [r0, #0]
 8008f0e:	4b16      	ldr	r3, [pc, #88]	; (8008f68 <HAL_DSI_ConfigCommand+0x64>)
 8008f10:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8008f12:	4023      	ands	r3, r4
 8008f14:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008f16:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8008f18:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008f1c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008f1e:	688d      	ldr	r5, [r1, #8]
 8008f20:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008f22:	68cd      	ldr	r5, [r1, #12]
 8008f24:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8008f26:	690d      	ldr	r5, [r1, #16]
 8008f28:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008f2a:	694d      	ldr	r5, [r1, #20]
 8008f2c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008f2e:	698d      	ldr	r5, [r1, #24]
 8008f30:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008f32:	69cd      	ldr	r5, [r1, #28]
 8008f34:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8008f36:	6a0d      	ldr	r5, [r1, #32]
 8008f38:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008f3a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8008f3c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008f3e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8008f40:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008f42:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008f44:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8008f46:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008f48:	4323      	orrs	r3, r4
 8008f4a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008f4c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8008f4e:	f023 0302 	bic.w	r3, r3, #2
 8008f52:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008f54:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008f5e:	4618      	mov	r0, r3
}
 8008f60:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008f62:	2002      	movs	r0, #2
 8008f64:	e7fc      	b.n	8008f60 <HAL_DSI_ConfigCommand+0x5c>
 8008f66:	bf00      	nop
 8008f68:	fef080ff 	.word	0xfef080ff

08008f6c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f6c:	7c03      	ldrb	r3, [r0, #16]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d00b      	beq.n	8008f8a <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008f72:	6803      	ldr	r3, [r0, #0]
 8008f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f76:	f022 021f 	bic.w	r2, r2, #31
 8008f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	4311      	orrs	r1, r2
 8008f80:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f82:	2300      	movs	r3, #0
 8008f84:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008f86:	4618      	mov	r0, r3
 8008f88:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008f8a:	2002      	movs	r0, #2
}
 8008f8c:	4770      	bx	lr

08008f8e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008f8e:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f90:	7c03      	ldrb	r3, [r0, #16]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d035      	beq.n	8009002 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008f96:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8008f98:	e9d1 2400 	ldrd	r2, r4, [r1]
 8008f9c:	4294      	cmp	r4, r2
 8008f9e:	bf38      	it	cc
 8008fa0:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008fa2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008fa6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8008faa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008fae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008fb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fb6:	4322      	orrs	r2, r4
 8008fb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8008fbc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008fc0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8008fc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008fc8:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8008fcc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8008fd0:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008fd2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008fd6:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8008fd8:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008fda:	432a      	orrs	r2, r5
 8008fdc:	4322      	orrs	r2, r4
 8008fde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8008fe2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008fe6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008fea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8008fee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008ff2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008ff6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008ffe:	4618      	mov	r0, r3
}
 8009000:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009002:	2002      	movs	r0, #2
 8009004:	e7fc      	b.n	8009000 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08009008 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009008:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800900a:	7c03      	ldrb	r3, [r0, #16]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d05c      	beq.n	80090ca <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009010:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009012:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009014:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009016:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009018:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800901c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009024:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009026:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8009028:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800902a:	b292      	uxth	r2, r2
 800902c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800902e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009030:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009034:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009036:	4a26      	ldr	r2, [pc, #152]	; (80090d0 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8009038:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800903a:	4014      	ands	r4, r2
 800903c:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800903e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8009040:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009042:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009044:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8009046:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8009048:	4014      	ands	r4, r2
 800904a:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800904c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800904e:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009050:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009052:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8009054:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009058:	4014      	ands	r4, r2
 800905a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800905e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009062:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009064:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009066:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800906a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800906e:	4014      	ands	r4, r2
 8009070:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009074:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009078:	432c      	orrs	r4, r5
 800907a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800907e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009082:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8009086:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800908a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800908e:	698d      	ldr	r5, [r1, #24]
 8009090:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009092:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009094:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009096:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800909a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800909e:	4014      	ands	r4, r2
 80090a0:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80090a4:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80090a8:	432c      	orrs	r4, r5
 80090aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80090ae:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80090b2:	4022      	ands	r2, r4
 80090b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80090b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80090bc:	430a      	orrs	r2, r1
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090c2:	2300      	movs	r3, #0
 80090c4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80090c6:	4618      	mov	r0, r3
}
 80090c8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80090ca:	2002      	movs	r0, #2
 80090cc:	e7fc      	b.n	80090c8 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80090ce:	bf00      	nop
 80090d0:	ffff0000 	.word	0xffff0000

080090d4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090d4:	7c03      	ldrb	r3, [r0, #16]
{
 80090d6:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d01c      	beq.n	8009116 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80090dc:	6802      	ldr	r2, [r0, #0]
 80090de:	2300      	movs	r3, #0
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	6851      	ldr	r1, [r2, #4]
 80090e4:	f041 0101 	orr.w	r1, r1, #1
 80090e8:	6051      	str	r1, [r2, #4]
 80090ea:	6851      	ldr	r1, [r2, #4]
 80090ec:	f001 0101 	and.w	r1, r1, #1
 80090f0:	9100      	str	r1, [sp, #0]
 80090f2:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80090fa:	f041 0108 	orr.w	r1, r1, #8
 80090fe:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8009102:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009106:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009108:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800910a:	f002 0208 	and.w	r2, r2, #8
 800910e:	9201      	str	r2, [sp, #4]
 8009110:	9a01      	ldr	r2, [sp, #4]
}
 8009112:	b002      	add	sp, #8
 8009114:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009116:	2002      	movs	r0, #2
 8009118:	e7fb      	b.n	8009112 <HAL_DSI_Start+0x3e>

0800911a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800911a:	7c03      	ldrb	r3, [r0, #16]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d00a      	beq.n	8009136 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009120:	6802      	ldr	r2, [r0, #0]
 8009122:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8009126:	f043 0304 	orr.w	r3, r3, #4
 800912a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800912e:	2300      	movs	r3, #0
 8009130:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009132:	4618      	mov	r0, r3
 8009134:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009136:	2002      	movs	r0, #2
}
 8009138:	4770      	bx	lr

0800913a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800913a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800913c:	7c05      	ldrb	r5, [r0, #16]
{
 800913e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009140:	2d01      	cmp	r5, #1
 8009142:	d009      	beq.n	8009158 <HAL_DSI_ShortWrite+0x1e>
 8009144:	2501      	movs	r5, #1
 8009146:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009148:	9d06      	ldr	r5, [sp, #24]
 800914a:	9500      	str	r5, [sp, #0]
 800914c:	f7ff fcac 	bl	8008aa8 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009150:	2300      	movs	r3, #0
 8009152:	7423      	strb	r3, [r4, #16]

  return status;
}
 8009154:	b003      	add	sp, #12
 8009156:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009158:	2002      	movs	r0, #2
 800915a:	e7fb      	b.n	8009154 <HAL_DSI_ShortWrite+0x1a>

0800915c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800915c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009162:	7c03      	ldrb	r3, [r0, #16]
{
 8009164:	4606      	mov	r6, r0
 8009166:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8009168:	2b01      	cmp	r3, #1
{
 800916a:	4615      	mov	r5, r2
 800916c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8009170:	d053      	beq.n	800921a <HAL_DSI_LongWrite+0xbe>
 8009172:	2301      	movs	r3, #1
 8009174:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009176:	f7fe fe4f 	bl	8007e18 <HAL_GetTick>
 800917a:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800917c:	6831      	ldr	r1, [r6, #0]
 800917e:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8009180:	f013 0a01 	ands.w	sl, r3, #1
 8009184:	d01a      	beq.n	80091bc <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009186:	2c03      	cmp	r4, #3
 8009188:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800918a:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800918e:	bf28      	it	cs
 8009190:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8009192:	4282      	cmp	r2, r0
 8009194:	d11e      	bne.n	80091d4 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8009196:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8009198:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800919a:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800919e:	bb1b      	cbnz	r3, 80091e8 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80091a0:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80091a2:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 80091a6:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80091a8:	0222      	lsls	r2, r4, #8
 80091aa:	0224      	lsls	r4, r4, #8
 80091ac:	b292      	uxth	r2, r2
 80091ae:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80091b2:	4315      	orrs	r5, r2
 80091b4:	432c      	orrs	r4, r5
 80091b6:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 80091b8:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 80091ba:	e009      	b.n	80091d0 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80091bc:	f7fe fe2c 	bl	8007e18 <HAL_GetTick>
 80091c0:	eba0 000b 	sub.w	r0, r0, fp
 80091c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80091c8:	d9d8      	bls.n	800917c <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80091ca:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80091cc:	f886 a010 	strb.w	sl, [r6, #16]
}
 80091d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80091d4:	f818 3002 	ldrb.w	r3, [r8, r2]
 80091d8:	3201      	adds	r2, #1
 80091da:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80091de:	fa03 f30c 	lsl.w	r3, r3, ip
 80091e2:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 80091e6:	e7d4      	b.n	8009192 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80091e8:	2b04      	cmp	r3, #4
    fifoword = 0U;
 80091ea:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80091ee:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 80091f0:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80091f2:	bf28      	it	cs
 80091f4:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80091f8:	f812 8000 	ldrb.w	r8, [r2, r0]
 80091fc:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8009200:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009202:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8009206:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009208:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800920c:	d1f4      	bne.n	80091f8 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 800920e:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8009212:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 8009214:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 8009218:	e7c1      	b.n	800919e <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800921a:	2002      	movs	r0, #2
 800921c:	e7d8      	b.n	80091d0 <HAL_DSI_LongWrite+0x74>

0800921e <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800921e:	7c03      	ldrb	r3, [r0, #16]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d010      	beq.n	8009246 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009224:	6803      	ldr	r3, [r0, #0]
 8009226:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800922a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800922e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009232:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8009236:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800923a:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800923e:	2300      	movs	r3, #0
 8009240:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009242:	4618      	mov	r0, r3
 8009244:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009246:	2002      	movs	r0, #2
}
 8009248:	4770      	bx	lr
	...

0800924c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800924c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009250:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009252:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8009410 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009256:	4a6c      	ldr	r2, [pc, #432]	; (8009408 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8009258:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800925a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800925c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800925e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8009262:	43ac      	bics	r4, r5
 8009264:	f040 80b6 	bne.w	80093d4 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009268:	684d      	ldr	r5, [r1, #4]
 800926a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800926e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009270:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009274:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009278:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800927a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800927c:	2f01      	cmp	r7, #1
 800927e:	d834      	bhi.n	80092ea <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8009280:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009282:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8009286:	68cf      	ldr	r7, [r1, #12]
 8009288:	fa07 f708 	lsl.w	r7, r7, r8
 800928c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8009290:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009292:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009294:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009298:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800929c:	409f      	lsls	r7, r3
 800929e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80092a2:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80092a4:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092a6:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80092a8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80092ac:	688f      	ldr	r7, [r1, #8]
 80092ae:	fa07 f708 	lsl.w	r7, r7, r8
 80092b2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80092b6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092b8:	d119      	bne.n	80092ee <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80092ba:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80092be:	f003 0b07 	and.w	fp, r3, #7
 80092c2:	f04f 0e0f 	mov.w	lr, #15
 80092c6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80092ca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80092ce:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80092d2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80092d6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80092da:	690f      	ldr	r7, [r1, #16]
 80092dc:	fa07 f70b 	lsl.w	r7, r7, fp
 80092e0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80092e4:	f8ca 7020 	str.w	r7, [sl, #32]
 80092e8:	e001      	b.n	80092ee <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092ea:	2c03      	cmp	r4, #3
 80092ec:	d1da      	bne.n	80092a4 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80092ee:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80092f0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80092f4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80092f8:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80092fc:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8009300:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009302:	d067      	beq.n	80093d4 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009304:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8009308:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800930c:	f003 0703 	and.w	r7, r3, #3
 8009310:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009314:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8009318:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800931c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800931e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8009322:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8009326:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800932a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800932e:	9401      	str	r4, [sp, #4]
 8009330:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009332:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8009336:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800933a:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800933e:	4c33      	ldr	r4, [pc, #204]	; (800940c <HAL_GPIO_Init+0x1c0>)
 8009340:	42a0      	cmp	r0, r4
 8009342:	d04e      	beq.n	80093e2 <HAL_GPIO_Init+0x196>
 8009344:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009348:	42a0      	cmp	r0, r4
 800934a:	d04c      	beq.n	80093e6 <HAL_GPIO_Init+0x19a>
 800934c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009350:	42a0      	cmp	r0, r4
 8009352:	d04a      	beq.n	80093ea <HAL_GPIO_Init+0x19e>
 8009354:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009358:	42a0      	cmp	r0, r4
 800935a:	d048      	beq.n	80093ee <HAL_GPIO_Init+0x1a2>
 800935c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009360:	42a0      	cmp	r0, r4
 8009362:	d046      	beq.n	80093f2 <HAL_GPIO_Init+0x1a6>
 8009364:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009368:	42a0      	cmp	r0, r4
 800936a:	d044      	beq.n	80093f6 <HAL_GPIO_Init+0x1aa>
 800936c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009370:	42a0      	cmp	r0, r4
 8009372:	d042      	beq.n	80093fa <HAL_GPIO_Init+0x1ae>
 8009374:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009378:	42a0      	cmp	r0, r4
 800937a:	d040      	beq.n	80093fe <HAL_GPIO_Init+0x1b2>
 800937c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009380:	42a0      	cmp	r0, r4
 8009382:	d03e      	beq.n	8009402 <HAL_GPIO_Init+0x1b6>
 8009384:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009388:	42a0      	cmp	r0, r4
 800938a:	bf0c      	ite	eq
 800938c:	2409      	moveq	r4, #9
 800938e:	240a      	movne	r4, #10
 8009390:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009392:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009394:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8009398:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800939a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800939e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80093a0:	bf54      	ite	pl
 80093a2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80093a4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80093a8:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80093aa:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80093ac:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80093ae:	bf54      	ite	pl
 80093b0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80093b2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80093b6:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80093b8:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80093ba:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80093bc:	bf54      	ite	pl
 80093be:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80093c0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80093c4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80093c6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80093c8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80093ca:	bf54      	ite	pl
 80093cc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80093ce:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80093d2:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80093d4:	3301      	adds	r3, #1
 80093d6:	2b10      	cmp	r3, #16
 80093d8:	f47f af3e 	bne.w	8009258 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80093e2:	2400      	movs	r4, #0
 80093e4:	e7d4      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093e6:	2401      	movs	r4, #1
 80093e8:	e7d2      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093ea:	2402      	movs	r4, #2
 80093ec:	e7d0      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093ee:	2403      	movs	r4, #3
 80093f0:	e7ce      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093f2:	2404      	movs	r4, #4
 80093f4:	e7cc      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093f6:	2405      	movs	r4, #5
 80093f8:	e7ca      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093fa:	2406      	movs	r4, #6
 80093fc:	e7c8      	b.n	8009390 <HAL_GPIO_Init+0x144>
 80093fe:	2407      	movs	r4, #7
 8009400:	e7c6      	b.n	8009390 <HAL_GPIO_Init+0x144>
 8009402:	2408      	movs	r4, #8
 8009404:	e7c4      	b.n	8009390 <HAL_GPIO_Init+0x144>
 8009406:	bf00      	nop
 8009408:	40013c00 	.word	0x40013c00
 800940c:	40020000 	.word	0x40020000
 8009410:	40023800 	.word	0x40023800

08009414 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009418:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800941a:	4c4a      	ldr	r4, [pc, #296]	; (8009544 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800941c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800954c <HAL_GPIO_DeInit+0x138>
 8009420:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8009550 <HAL_GPIO_DeInit+0x13c>
 8009424:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009554 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8009428:	2301      	movs	r3, #1
 800942a:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800942e:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8009432:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8009436:	d16e      	bne.n	8009516 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8009438:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800943c:	f002 0c03 	and.w	ip, r2, #3
 8009440:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009442:	4b41      	ldr	r3, [pc, #260]	; (8009548 <HAL_GPIO_DeInit+0x134>)
 8009444:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009448:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800944c:	4298      	cmp	r0, r3
 800944e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009452:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8009456:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800945a:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800945e:	d05f      	beq.n	8009520 <HAL_GPIO_DeInit+0x10c>
 8009460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009464:	4298      	cmp	r0, r3
 8009466:	d05d      	beq.n	8009524 <HAL_GPIO_DeInit+0x110>
 8009468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800946c:	4298      	cmp	r0, r3
 800946e:	d05b      	beq.n	8009528 <HAL_GPIO_DeInit+0x114>
 8009470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009474:	4298      	cmp	r0, r3
 8009476:	d059      	beq.n	800952c <HAL_GPIO_DeInit+0x118>
 8009478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800947c:	4298      	cmp	r0, r3
 800947e:	d057      	beq.n	8009530 <HAL_GPIO_DeInit+0x11c>
 8009480:	4548      	cmp	r0, r9
 8009482:	d057      	beq.n	8009534 <HAL_GPIO_DeInit+0x120>
 8009484:	4550      	cmp	r0, sl
 8009486:	d057      	beq.n	8009538 <HAL_GPIO_DeInit+0x124>
 8009488:	4558      	cmp	r0, fp
 800948a:	d057      	beq.n	800953c <HAL_GPIO_DeInit+0x128>
 800948c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009490:	4298      	cmp	r0, r3
 8009492:	d055      	beq.n	8009540 <HAL_GPIO_DeInit+0x12c>
 8009494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009498:	4298      	cmp	r0, r3
 800949a:	bf0c      	ite	eq
 800949c:	2309      	moveq	r3, #9
 800949e:	230a      	movne	r3, #10
 80094a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80094a4:	4543      	cmp	r3, r8
 80094a6:	d113      	bne.n	80094d0 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	ea23 0307 	bic.w	r3, r3, r7
 80094ae:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	ea23 0307 	bic.w	r3, r3, r7
 80094b6:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80094b8:	68e3      	ldr	r3, [r4, #12]
 80094ba:	ea23 0307 	bic.w	r3, r3, r7
 80094be:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80094c0:	68a3      	ldr	r3, [r4, #8]
 80094c2:	ea23 0307 	bic.w	r3, r3, r7
 80094c6:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80094c8:	68ab      	ldr	r3, [r5, #8]
 80094ca:	ea23 0306 	bic.w	r3, r3, r6
 80094ce:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80094d0:	2603      	movs	r6, #3
 80094d2:	0053      	lsls	r3, r2, #1
 80094d4:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094d6:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80094da:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094de:	270f      	movs	r7, #15
 80094e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80094e4:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094e8:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80094ec:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094ee:	fa22 f506 	lsr.w	r5, r2, r6
 80094f2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80094f6:	6a2e      	ldr	r6, [r5, #32]
 80094f8:	ea26 0707 	bic.w	r7, r6, r7
 80094fc:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80094fe:	68c5      	ldr	r5, [r0, #12]
 8009500:	ea25 0503 	bic.w	r5, r5, r3
 8009504:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009506:	6845      	ldr	r5, [r0, #4]
 8009508:	ea25 050e 	bic.w	r5, r5, lr
 800950c:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800950e:	6885      	ldr	r5, [r0, #8]
 8009510:	ea25 0303 	bic.w	r3, r5, r3
 8009514:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009516:	3201      	adds	r2, #1
 8009518:	2a10      	cmp	r2, #16
 800951a:	d185      	bne.n	8009428 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009520:	2300      	movs	r3, #0
 8009522:	e7bd      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009524:	2301      	movs	r3, #1
 8009526:	e7bb      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009528:	2302      	movs	r3, #2
 800952a:	e7b9      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 800952c:	2303      	movs	r3, #3
 800952e:	e7b7      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009530:	2304      	movs	r3, #4
 8009532:	e7b5      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009534:	2305      	movs	r3, #5
 8009536:	e7b3      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009538:	2306      	movs	r3, #6
 800953a:	e7b1      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 800953c:	2307      	movs	r3, #7
 800953e:	e7af      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009540:	2308      	movs	r3, #8
 8009542:	e7ad      	b.n	80094a0 <HAL_GPIO_DeInit+0x8c>
 8009544:	40013c00 	.word	0x40013c00
 8009548:	40020000 	.word	0x40020000
 800954c:	40021400 	.word	0x40021400
 8009550:	40021800 	.word	0x40021800
 8009554:	40021c00 	.word	0x40021c00

08009558 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009558:	6903      	ldr	r3, [r0, #16]
 800955a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800955c:	bf14      	ite	ne
 800955e:	2001      	movne	r0, #1
 8009560:	2000      	moveq	r0, #0
 8009562:	4770      	bx	lr

08009564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009564:	b10a      	cbz	r2, 800956a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009566:	6181      	str	r1, [r0, #24]
  }
}
 8009568:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800956a:	0409      	lsls	r1, r1, #16
 800956c:	e7fb      	b.n	8009566 <HAL_GPIO_WritePin+0x2>

0800956e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800956e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009570:	ea01 0203 	and.w	r2, r1, r3
 8009574:	ea21 0103 	bic.w	r1, r1, r3
 8009578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800957c:	6181      	str	r1, [r0, #24]
}
 800957e:	4770      	bx	lr

08009580 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009580:	6803      	ldr	r3, [r0, #0]
 8009582:	699a      	ldr	r2, [r3, #24]
 8009584:	0791      	lsls	r1, r2, #30
 8009586:	d501      	bpl.n	800958c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009588:	2200      	movs	r2, #0
 800958a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	07d2      	lsls	r2, r2, #31
 8009590:	d403      	bmi.n	800959a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	f042 0201 	orr.w	r2, r2, #1
 8009598:	619a      	str	r2, [r3, #24]
  }
}
 800959a:	4770      	bx	lr

0800959c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800959c:	b530      	push	{r4, r5, lr}
 800959e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095a0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095a4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095a6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80095a8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80095ae:	4a05      	ldr	r2, [pc, #20]	; (80095c4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095b0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80095b2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80095ba:	ea20 0002 	bic.w	r0, r0, r2
 80095be:	4303      	orrs	r3, r0
 80095c0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095c2:	bd30      	pop	{r4, r5, pc}
 80095c4:	03ff63ff 	.word	0x03ff63ff

080095c8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80095c8:	6803      	ldr	r3, [r0, #0]
{
 80095ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80095ce:	699c      	ldr	r4, [r3, #24]
{
 80095d0:	4605      	mov	r5, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095d6:	f014 0410 	ands.w	r4, r4, #16
 80095da:	d070      	beq.n	80096be <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 80095dc:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095de:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80095e0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	0692      	lsls	r2, r2, #26
 80095ea:	d462      	bmi.n	80096b2 <I2C_IsErrorOccurred+0xea>
 80095ec:	f1b8 0f00 	cmp.w	r8, #0
 80095f0:	d036      	beq.n	8009660 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80095f2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80095f6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80095fc:	05d6      	lsls	r6, r2, #23
 80095fe:	d505      	bpl.n	800960c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009600:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8009604:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8009608:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800960a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800960c:	0551      	lsls	r1, r2, #21
 800960e:	d505      	bpl.n	800961c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009610:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009614:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8009618:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800961a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800961c:	0592      	lsls	r2, r2, #22
 800961e:	d550      	bpl.n	80096c2 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009620:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009624:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009628:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800962a:	4628      	mov	r0, r5
 800962c:	f7ff ffa8 	bl	8009580 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009630:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8009632:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009634:	6853      	ldr	r3, [r2, #4]
 8009636:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800963a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800963e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009642:	f023 0301 	bic.w	r3, r3, #1
 8009646:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8009648:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800964a:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800964c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800964e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009650:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009654:	2300      	movs	r3, #0
 8009656:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800965a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800965e:	e032      	b.n	80096c6 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8009660:	1c7a      	adds	r2, r7, #1
 8009662:	d0c0      	beq.n	80095e6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009664:	f7fe fbd8 	bl	8007e18 <HAL_GetTick>
 8009668:	1b80      	subs	r0, r0, r6
 800966a:	42b8      	cmp	r0, r7
 800966c:	d801      	bhi.n	8009672 <I2C_IsErrorOccurred+0xaa>
 800966e:	2f00      	cmp	r7, #0
 8009670:	d1b8      	bne.n	80095e4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8009676:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800967a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800967c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800967e:	0400      	lsls	r0, r0, #16
 8009680:	d50a      	bpl.n	8009698 <I2C_IsErrorOccurred+0xd0>
 8009682:	0448      	lsls	r0, r1, #17
 8009684:	d408      	bmi.n	8009698 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 8009686:	2a20      	cmp	r2, #32
 8009688:	d006      	beq.n	8009698 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009690:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8009692:	f7fe fbc1 	bl	8007e18 <HAL_GetTick>
 8009696:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	0699      	lsls	r1, r3, #26
 800969e:	d4a1      	bmi.n	80095e4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80096a0:	f7fe fbba 	bl	8007e18 <HAL_GetTick>
 80096a4:	1b80      	subs	r0, r0, r6
 80096a6:	2819      	cmp	r0, #25
 80096a8:	d9f6      	bls.n	8009698 <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80096aa:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80096ac:	f04f 0801 	mov.w	r8, #1
 80096b0:	e798      	b.n	80095e4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80096b2:	f1b8 0f00 	cmp.w	r8, #0
 80096b6:	d19c      	bne.n	80095f2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096b8:	2220      	movs	r2, #32
 80096ba:	61da      	str	r2, [r3, #28]
 80096bc:	e799      	b.n	80095f2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80096be:	4620      	mov	r0, r4
 80096c0:	e79a      	b.n	80095f8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1b1      	bne.n	800962a <I2C_IsErrorOccurred+0x62>
}
 80096c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096ca <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80096ca:	b570      	push	{r4, r5, r6, lr}
 80096cc:	4604      	mov	r4, r0
 80096ce:	460d      	mov	r5, r1
 80096d0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	079b      	lsls	r3, r3, #30
 80096d8:	d501      	bpl.n	80096de <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80096da:	2000      	movs	r0, #0
}
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096de:	4632      	mov	r2, r6
 80096e0:	4629      	mov	r1, r5
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7ff ff70 	bl	80095c8 <I2C_IsErrorOccurred>
 80096e8:	b9a0      	cbnz	r0, 8009714 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80096ea:	1c6a      	adds	r2, r5, #1
 80096ec:	d0f1      	beq.n	80096d2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ee:	f7fe fb93 	bl	8007e18 <HAL_GetTick>
 80096f2:	1b80      	subs	r0, r0, r6
 80096f4:	42a8      	cmp	r0, r5
 80096f6:	d801      	bhi.n	80096fc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	d1ea      	bne.n	80096d2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096fe:	f043 0320 	orr.w	r3, r3, #32
 8009702:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009704:	2320      	movs	r3, #32
 8009706:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800970a:	2300      	movs	r3, #0
 800970c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009710:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009714:	2001      	movs	r0, #1
 8009716:	e7e1      	b.n	80096dc <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08009718 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	4604      	mov	r4, r0
 800971c:	460d      	mov	r5, r1
 800971e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	075b      	lsls	r3, r3, #29
 8009726:	d40e      	bmi.n	8009746 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009728:	4632      	mov	r2, r6
 800972a:	4629      	mov	r1, r5
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff ff4b 	bl	80095c8 <I2C_IsErrorOccurred>
 8009732:	bb28      	cbnz	r0, 8009780 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	0691      	lsls	r1, r2, #26
 800973a:	d523      	bpl.n	8009784 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	0752      	lsls	r2, r2, #29
 8009740:	d503      	bpl.n	800974a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8009742:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009744:	b10a      	cbz	r2, 800974a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8009746:	2000      	movs	r0, #0
}
 8009748:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	f012 0210 	ands.w	r2, r2, #16
 8009750:	d002      	beq.n	8009758 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009752:	2210      	movs	r2, #16
 8009754:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009756:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009758:	2120      	movs	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800975a:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800975c:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009764:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009768:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009772:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8009774:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800977c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009780:	2001      	movs	r0, #1
 8009782:	e7e1      	b.n	8009748 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009784:	f7fe fb48 	bl	8007e18 <HAL_GetTick>
 8009788:	1b80      	subs	r0, r0, r6
 800978a:	42a8      	cmp	r0, r5
 800978c:	d801      	bhi.n	8009792 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
 800978e:	2d00      	cmp	r5, #0
 8009790:	d1c6      	bne.n	8009720 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009792:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009794:	f043 0320 	orr.w	r3, r3, #32
 8009798:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800979a:	2320      	movs	r3, #32
 800979c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80097a0:	2300      	movs	r3, #0
 80097a2:	e7eb      	b.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0x64>

080097a4 <I2C_WaitOnFlagUntilTimeout>:
{
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	9f06      	ldr	r7, [sp, #24]
 80097aa:	4604      	mov	r4, r0
 80097ac:	4688      	mov	r8, r1
 80097ae:	4616      	mov	r6, r2
 80097b0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097b2:	6822      	ldr	r2, [r4, #0]
 80097b4:	6993      	ldr	r3, [r2, #24]
 80097b6:	ea38 0303 	bics.w	r3, r8, r3
 80097ba:	bf0c      	ite	eq
 80097bc:	2301      	moveq	r3, #1
 80097be:	2300      	movne	r3, #0
 80097c0:	42b3      	cmp	r3, r6
 80097c2:	d001      	beq.n	80097c8 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80097c4:	2000      	movs	r0, #0
 80097c6:	e015      	b.n	80097f4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80097c8:	1c6b      	adds	r3, r5, #1
 80097ca:	d0f3      	beq.n	80097b4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097cc:	f7fe fb24 	bl	8007e18 <HAL_GetTick>
 80097d0:	1bc0      	subs	r0, r0, r7
 80097d2:	42a8      	cmp	r0, r5
 80097d4:	d801      	bhi.n	80097da <I2C_WaitOnFlagUntilTimeout+0x36>
 80097d6:	2d00      	cmp	r5, #0
 80097d8:	d1eb      	bne.n	80097b2 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097da:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80097dc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097de:	f043 0320 	orr.w	r3, r3, #32
 80097e2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097e4:	2320      	movs	r3, #32
 80097e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ea:	2300      	movs	r3, #0
 80097ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80097f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4604      	mov	r4, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	069b      	lsls	r3, r3, #26
 8009806:	d501      	bpl.n	800980c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009808:	2000      	movs	r0, #0
}
 800980a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800980c:	4632      	mov	r2, r6
 800980e:	4629      	mov	r1, r5
 8009810:	4620      	mov	r0, r4
 8009812:	f7ff fed9 	bl	80095c8 <I2C_IsErrorOccurred>
 8009816:	b990      	cbnz	r0, 800983e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009818:	f7fe fafe 	bl	8007e18 <HAL_GetTick>
 800981c:	1b80      	subs	r0, r0, r6
 800981e:	42a8      	cmp	r0, r5
 8009820:	d801      	bhi.n	8009826 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009822:	2d00      	cmp	r5, #0
 8009824:	d1ec      	bne.n	8009800 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009828:	f043 0320 	orr.w	r3, r3, #32
 800982c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800982e:	2320      	movs	r3, #32
 8009830:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009834:	2300      	movs	r3, #0
 8009836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800983a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800983e:	2001      	movs	r0, #1
 8009840:	e7e3      	b.n	800980a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08009842 <HAL_I2C_Init>:
{
 8009842:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009844:	4604      	mov	r4, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d04a      	beq.n	80098e0 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800984a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800984e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009852:	b91b      	cbnz	r3, 800985c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009854:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009858:	f7fb f9aa 	bl	8004bb0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800985c:	2324      	movs	r3, #36	; 0x24
 800985e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	f022 0201 	bic.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009872:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800987a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800987c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009880:	2901      	cmp	r1, #1
 8009882:	d124      	bne.n	80098ce <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009888:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800988a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800988c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800988e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009896:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800989e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098a0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80098a4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80098a6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80098ac:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80098ae:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	f042 0201 	orr.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80098be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80098c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80098c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80098cc:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80098ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098d2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80098d4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098d6:	d1d8      	bne.n	800988a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80098d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	e7d4      	b.n	800988a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80098e0:	2001      	movs	r0, #1
 80098e2:	e7f3      	b.n	80098cc <HAL_I2C_Init+0x8a>

080098e4 <HAL_I2C_DeInit>:
{
 80098e4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80098e6:	4604      	mov	r4, r0
 80098e8:	b198      	cbz	r0, 8009912 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80098ea:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80098ec:	2324      	movs	r3, #36	; 0x24
 80098ee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80098fa:	f7fb f9ed 	bl	8004cd8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098fe:	2000      	movs	r0, #0
 8009900:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8009902:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8009906:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800990a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800990c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8009910:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009912:	2001      	movs	r0, #1
 8009914:	e7fc      	b.n	8009910 <HAL_I2C_DeInit+0x2c>
	...

08009918 <HAL_I2C_Master_Transmit>:
{
 8009918:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800991e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009922:	4604      	mov	r4, r0
 8009924:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009926:	2b20      	cmp	r3, #32
{
 8009928:	4691      	mov	r9, r2
 800992a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800992c:	f040 8086 	bne.w	8009a3c <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8009930:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009934:	2b01      	cmp	r3, #1
 8009936:	f000 8081 	beq.w	8009a3c <HAL_I2C_Master_Transmit+0x124>
 800993a:	f04f 0a01 	mov.w	sl, #1
 800993e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009942:	f7fe fa69 	bl	8007e18 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009946:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009948:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800994a:	9000      	str	r0, [sp, #0]
 800994c:	4652      	mov	r2, sl
 800994e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009952:	4620      	mov	r0, r4
 8009954:	f7ff ff26 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009958:	b118      	cbz	r0, 8009962 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 800995a:	2001      	movs	r0, #1
}
 800995c:	b002      	add	sp, #8
 800995e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009962:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8009964:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8009968:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800996a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800996e:	2310      	movs	r3, #16
 8009970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009974:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009976:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800997a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800997c:	b29b      	uxth	r3, r3
 800997e:	2bff      	cmp	r3, #255	; 0xff
 8009980:	4b2f      	ldr	r3, [pc, #188]	; (8009a40 <HAL_I2C_Master_Transmit+0x128>)
 8009982:	d926      	bls.n	80099d2 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009984:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009986:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009988:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800998a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800998e:	4631      	mov	r1, r6
 8009990:	4620      	mov	r0, r4
 8009992:	f7ff fe03 	bl	800959c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009996:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009998:	462a      	mov	r2, r5
 800999a:	4639      	mov	r1, r7
 800999c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800999e:	b29b      	uxth	r3, r3
 80099a0:	b9fb      	cbnz	r3, 80099e2 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099a2:	f7ff ff29 	bl	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d1d7      	bne.n	800995a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	2120      	movs	r1, #32
 80099ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80099b6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80099ba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80099c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80099c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80099d0:	e7c4      	b.n	800995c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80099d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099d4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80099d6:	b292      	uxth	r2, r2
 80099d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	e7d5      	b.n	800998e <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099e2:	f7ff fe72 	bl	80096ca <I2C_WaitOnTXISFlagUntilTimeout>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d1b7      	bne.n	800995a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80099f2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80099f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80099f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80099f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80099fa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80099fc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80099fe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009a00:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009a02:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009a06:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0c3      	beq.n	8009996 <HAL_I2C_Master_Transmit+0x7e>
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	d1c1      	bne.n	8009996 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a12:	463b      	mov	r3, r7
 8009a14:	2180      	movs	r1, #128	; 0x80
 8009a16:	4620      	mov	r0, r4
 8009a18:	9500      	str	r5, [sp, #0]
 8009a1a:	f7ff fec3 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d19b      	bne.n	800995a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2bff      	cmp	r3, #255	; 0xff
 8009a28:	d903      	bls.n	8009a32 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a2a:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a2c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a2e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a30:	e7ab      	b.n	800998a <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009a32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a34:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009a36:	b292      	uxth	r2, r2
 8009a38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a3a:	e7ce      	b.n	80099da <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8009a3c:	2002      	movs	r0, #2
 8009a3e:	e78d      	b.n	800995c <HAL_I2C_Master_Transmit+0x44>
 8009a40:	80002000 	.word	0x80002000

08009a44 <HAL_I2C_Master_Receive>:
{
 8009a44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a52:	2b20      	cmp	r3, #32
{
 8009a54:	4691      	mov	r9, r2
 8009a56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a58:	f040 8087 	bne.w	8009b6a <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8009a5c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	f000 8082 	beq.w	8009b6a <HAL_I2C_Master_Receive+0x126>
 8009a66:	f04f 0a01 	mov.w	sl, #1
 8009a6a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009a6e:	f7fe f9d3 	bl	8007e18 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a72:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009a74:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a76:	9000      	str	r0, [sp, #0]
 8009a78:	4652      	mov	r2, sl
 8009a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7ff fe90 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009a84:	b118      	cbz	r0, 8009a8e <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8009a86:	2001      	movs	r0, #1
}
 8009a88:	b002      	add	sp, #8
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a8e:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8009a90:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8009a94:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a9a:	2310      	movs	r3, #16
 8009a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aa0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009aa2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2bff      	cmp	r3, #255	; 0xff
 8009aac:	4b30      	ldr	r3, [pc, #192]	; (8009b70 <HAL_I2C_Master_Receive+0x12c>)
 8009aae:	d926      	bls.n	8009afe <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ab0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ab2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ab4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009aba:	4631      	mov	r1, r6
 8009abc:	4620      	mov	r0, r4
 8009abe:	f7ff fd6d 	bl	800959c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009ac2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	b9fb      	cbnz	r3, 8009b0e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ace:	f7ff fe93 	bl	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d1d7      	bne.n	8009a86 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	2120      	movs	r1, #32
 8009ada:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009ae2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009ae6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009aea:	f022 0201 	bic.w	r2, r2, #1
 8009aee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009af0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009af4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009af8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009afc:	e7c4      	b.n	8009a88 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009afe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b00:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009b02:	b292      	uxth	r2, r2
 8009b04:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	e7d5      	b.n	8009aba <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b0e:	f7ff fe03 	bl	8009718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d1b7      	bne.n	8009a86 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b1c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009b20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009b22:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009b24:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009b26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009b28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009b2a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009b2c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009b2e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0c2      	beq.n	8009ac2 <HAL_I2C_Master_Receive+0x7e>
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d1c0      	bne.n	8009ac2 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b40:	463b      	mov	r3, r7
 8009b42:	2180      	movs	r1, #128	; 0x80
 8009b44:	4620      	mov	r0, r4
 8009b46:	9500      	str	r5, [sp, #0]
 8009b48:	f7ff fe2c 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d19a      	bne.n	8009a86 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2bff      	cmp	r3, #255	; 0xff
 8009b56:	d903      	bls.n	8009b60 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b58:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b5a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b5c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b5e:	e7aa      	b.n	8009ab6 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b62:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009b64:	b292      	uxth	r2, r2
 8009b66:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b68:	e7cd      	b.n	8009b06 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8009b6a:	2002      	movs	r0, #2
 8009b6c:	e78c      	b.n	8009a88 <HAL_I2C_Master_Receive+0x44>
 8009b6e:	bf00      	nop
 8009b70:	80002400 	.word	0x80002400

08009b74 <HAL_I2C_Mem_Write>:
{
 8009b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009b7e:	4604      	mov	r4, r0
 8009b80:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b82:	2b20      	cmp	r3, #32
{
 8009b84:	4616      	mov	r6, r2
 8009b86:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8009b8a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b8e:	f040 80c6 	bne.w	8009d1e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b94:	b113      	cbz	r3, 8009b9c <HAL_I2C_Mem_Write+0x28>
 8009b96:	f1ba 0f00 	cmp.w	sl, #0
 8009b9a:	d106      	bne.n	8009baa <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8009ba2:	2001      	movs	r0, #1
}
 8009ba4:	b003      	add	sp, #12
 8009ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009baa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	f000 80b5 	beq.w	8009d1e <HAL_I2C_Mem_Write+0x1aa>
 8009bb4:	f04f 0b01 	mov.w	fp, #1
 8009bb8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009bbc:	f7fe f92c 	bl	8007e18 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bc0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009bc2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bc4:	9000      	str	r0, [sp, #0]
 8009bc6:	465a      	mov	r2, fp
 8009bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f7ff fde9 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d1e5      	bne.n	8009ba2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009bd6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bd8:	fa5f f289 	uxtb.w	r2, r9
 8009bdc:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8009bde:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009be4:	2340      	movs	r3, #64	; 0x40
 8009be6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bec:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bee:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009bf0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bf2:	4b4c      	ldr	r3, [pc, #304]	; (8009d24 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009bf4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bfe:	f7ff fccd 	bl	800959c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c02:	462a      	mov	r2, r5
 8009c04:	4641      	mov	r1, r8
 8009c06:	4620      	mov	r0, r4
 8009c08:	f7ff fd5f 	bl	80096ca <I2C_WaitOnTXISFlagUntilTimeout>
 8009c0c:	bb18      	cbnz	r0, 8009c56 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c0e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c12:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c14:	d115      	bne.n	8009c42 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c16:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2180      	movs	r1, #128	; 0x80
 8009c1c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c1e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c20:	4643      	mov	r3, r8
 8009c22:	9500      	str	r5, [sp, #0]
 8009c24:	f7ff fdbe 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009c28:	b9a8      	cbnz	r0, 8009c56 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	2bff      	cmp	r3, #255	; 0xff
 8009c30:	d815      	bhi.n	8009c5e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009c32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c38:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009c3a:	b292      	uxth	r2, r2
 8009c3c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	e012      	b.n	8009c68 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c42:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c44:	4641      	mov	r1, r8
 8009c46:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c48:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	f7ff fd3d 	bl	80096ca <I2C_WaitOnTXISFlagUntilTimeout>
 8009c50:	b908      	cbnz	r0, 8009c56 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	e7df      	b.n	8009c16 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8009c56:	2300      	movs	r3, #0
 8009c58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009c5c:	e7a1      	b.n	8009ba2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c5e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c64:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c68:	4639      	mov	r1, r7
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7ff fc96 	bl	800959c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c70:	462a      	mov	r2, r5
 8009c72:	4641      	mov	r1, r8
 8009c74:	4620      	mov	r0, r4
 8009c76:	f7ff fd28 	bl	80096ca <I2C_WaitOnTXISFlagUntilTimeout>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d191      	bne.n	8009ba2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009c86:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009c88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009c8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009c8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009c8e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009c90:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009c92:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009c94:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009c96:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009c9a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	b1b3      	cbz	r3, 8009cce <HAL_I2C_Mem_Write+0x15a>
 8009ca0:	b9aa      	cbnz	r2, 8009cce <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ca2:	4643      	mov	r3, r8
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	9500      	str	r5, [sp, #0]
 8009caa:	f7ff fd7b 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f47f af77 	bne.w	8009ba2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2bff      	cmp	r3, #255	; 0xff
 8009cba:	d928      	bls.n	8009d0e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cbc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cc2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cc4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff fc67 	bl	800959c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1cc      	bne.n	8009c70 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4641      	mov	r1, r8
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff fd8c 	bl	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f47f af5e 	bne.w	8009ba2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	2120      	movs	r1, #32
 8009cea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009cf2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009cf6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009cfa:	f022 0201 	bic.w	r2, r2, #1
 8009cfe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009d00:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009d04:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009d0c:	e74a      	b.n	8009ba4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009d0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d14:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009d16:	b292      	uxth	r2, r2
 8009d18:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	e7d3      	b.n	8009cc6 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8009d1e:	2002      	movs	r0, #2
 8009d20:	e740      	b.n	8009ba4 <HAL_I2C_Mem_Write+0x30>
 8009d22:	bf00      	nop
 8009d24:	80002000 	.word	0x80002000

08009d28 <HAL_I2C_Mem_Read>:
{
 8009d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009d32:	4604      	mov	r4, r0
 8009d34:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d36:	2b20      	cmp	r3, #32
{
 8009d38:	4616      	mov	r6, r2
 8009d3a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8009d3e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d42:	f040 80c9 	bne.w	8009ed8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8009d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d48:	b113      	cbz	r3, 8009d50 <HAL_I2C_Mem_Read+0x28>
 8009d4a:	f1ba 0f00 	cmp.w	sl, #0
 8009d4e:	d106      	bne.n	8009d5e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d54:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8009d56:	2001      	movs	r0, #1
}
 8009d58:	b003      	add	sp, #12
 8009d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009d5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	f000 80b8 	beq.w	8009ed8 <HAL_I2C_Mem_Read+0x1b0>
 8009d68:	f04f 0b01 	mov.w	fp, #1
 8009d6c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009d70:	f7fe f852 	bl	8007e18 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d74:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009d76:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d78:	9000      	str	r0, [sp, #0]
 8009d7a:	465a      	mov	r2, fp
 8009d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d80:	4620      	mov	r0, r4
 8009d82:	f7ff fd0f 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d1e5      	bne.n	8009d56 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d8a:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d8c:	fa5f f289 	uxtb.w	r2, r9
 8009d90:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8009d92:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009da0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8009da2:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009da4:	4b4d      	ldr	r3, [pc, #308]	; (8009edc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009da6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	4603      	mov	r3, r0
 8009dae:	4620      	mov	r0, r4
 8009db0:	f7ff fbf4 	bl	800959c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009db4:	462a      	mov	r2, r5
 8009db6:	4641      	mov	r1, r8
 8009db8:	4620      	mov	r0, r4
 8009dba:	f7ff fc86 	bl	80096ca <I2C_WaitOnTXISFlagUntilTimeout>
 8009dbe:	bb20      	cbnz	r0, 8009e0a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dc0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dc4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dc6:	d116      	bne.n	8009df6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dc8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2140      	movs	r1, #64	; 0x40
 8009dce:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dd0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009dd2:	4643      	mov	r3, r8
 8009dd4:	9500      	str	r5, [sp, #0]
 8009dd6:	f7ff fce5 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009dda:	b9b0      	cbnz	r0, 8009e0a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	2bff      	cmp	r3, #255	; 0xff
 8009de2:	4b3f      	ldr	r3, [pc, #252]	; (8009ee0 <HAL_I2C_Mem_Read+0x1b8>)
 8009de4:	d815      	bhi.n	8009e12 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009de6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8009dee:	b292      	uxth	r2, r2
 8009df0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	e012      	b.n	8009e1c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009df6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009df8:	4641      	mov	r1, r8
 8009dfa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009dfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dfe:	462a      	mov	r2, r5
 8009e00:	f7ff fc63 	bl	80096ca <I2C_WaitOnTXISFlagUntilTimeout>
 8009e04:	b908      	cbnz	r0, 8009e0a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	e7de      	b.n	8009dc8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009e10:	e7a1      	b.n	8009d56 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e12:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e1a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7ff fbbc 	bl	800959c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009e24:	4643      	mov	r3, r8
 8009e26:	2200      	movs	r2, #0
 8009e28:	2104      	movs	r1, #4
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	9500      	str	r5, [sp, #0]
 8009e2e:	f7ff fcb9 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d18f      	bne.n	8009d56 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009e40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009e42:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009e44:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009e46:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009e4a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009e4c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009e4e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	b1b3      	cbz	r3, 8009e88 <HAL_I2C_Mem_Read+0x160>
 8009e5a:	b9aa      	cbnz	r2, 8009e88 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e5c:	4643      	mov	r3, r8
 8009e5e:	2180      	movs	r1, #128	; 0x80
 8009e60:	4620      	mov	r0, r4
 8009e62:	9500      	str	r5, [sp, #0]
 8009e64:	f7ff fc9e 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	f47f af74 	bne.w	8009d56 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	2bff      	cmp	r3, #255	; 0xff
 8009e74:	d928      	bls.n	8009ec8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e76:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e7c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e7e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e80:	4639      	mov	r1, r7
 8009e82:	4620      	mov	r0, r4
 8009e84:	f7ff fb8a 	bl	800959c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1c9      	bne.n	8009e24 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e90:	462a      	mov	r2, r5
 8009e92:	4641      	mov	r1, r8
 8009e94:	4620      	mov	r0, r4
 8009e96:	f7ff fcaf 	bl	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f47f af5b 	bne.w	8009d56 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	2120      	movs	r1, #32
 8009ea4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009eac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009eb0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009eb4:	f022 0201 	bic.w	r2, r2, #1
 8009eb8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009eba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009ebe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ec2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009ec6:	e747      	b.n	8009d58 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009ec8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ece:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009ed0:	b292      	uxth	r2, r2
 8009ed2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ed4:	b2d2      	uxtb	r2, r2
 8009ed6:	e7d3      	b.n	8009e80 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8009ed8:	2002      	movs	r0, #2
 8009eda:	e73d      	b.n	8009d58 <HAL_I2C_Mem_Read+0x30>
 8009edc:	80002000 	.word	0x80002000
 8009ee0:	80002400 	.word	0x80002400

08009ee4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009ee4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8009ee6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009ee8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009eea:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8009eec:	b103      	cbz	r3, 8009ef0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8009eee:	4718      	bx	r3
}
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ef2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ef4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009ef8:	2b20      	cmp	r3, #32
 8009efa:	b2dc      	uxtb	r4, r3
 8009efc:	d11d      	bne.n	8009f3a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009efe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d019      	beq.n	8009f3a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f06:	2324      	movs	r3, #36	; 0x24
 8009f08:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f0c:	6803      	ldr	r3, [r0, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	f022 0201 	bic.w	r2, r2, #1
 8009f14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4311      	orrs	r1, r2
 8009f22:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f2c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009f2e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009f32:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009f36:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009f38:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009f3a:	2002      	movs	r0, #2
 8009f3c:	e7fc      	b.n	8009f38 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f3e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	b2dc      	uxtb	r4, r3
 8009f48:	d11c      	bne.n	8009f84 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d018      	beq.n	8009f84 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f52:	2324      	movs	r3, #36	; 0x24
 8009f54:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f58:	6803      	ldr	r3, [r0, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	f022 0201 	bic.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f62:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f64:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f68:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f6c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	f042 0201 	orr.w	r2, r2, #1
 8009f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f76:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009f78:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009f7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009f80:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009f82:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009f84:	2002      	movs	r0, #2
 8009f86:	e7fc      	b.n	8009f82 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009f88 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8a:	3801      	subs	r0, #1
 8009f8c:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009f8e:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8009f90:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 8009f94:	462f      	mov	r7, r5
 8009f96:	4425      	add	r5, r4
 8009f98:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009f9c:	d822      	bhi.n	8009fe4 <JPEG_Bits_To_SizeCodes+0x5c>
 8009f9e:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8009fa0:	b954      	cbnz	r4, 8009fb8 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 8009fa2:	3601      	adds	r6, #1
 8009fa4:	2e11      	cmp	r6, #17
 8009fa6:	d1f3      	bne.n	8009f90 <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8009fa8:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009faa:	2601      	movs	r6, #1
  *LastK = p;
 8009fac:	601d      	str	r5, [r3, #0]
  code = 0;
 8009fae:	4623      	mov	r3, r4
  si = Huffsize[0];
 8009fb0:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8009fb2:	5d08      	ldrb	r0, [r1, r4]
 8009fb4:	b9a0      	cbnz	r0, 8009fe0 <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 8009fb8:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 8009fba:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 8009fbe:	e7ef      	b.n	8009fa0 <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 8009fc0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 8009fc4:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 8009fc6:	5d08      	ldrb	r0, [r1, r4]
 8009fc8:	193b      	adds	r3, r7, r4
 8009fca:	42a8      	cmp	r0, r5
 8009fcc:	d0f8      	beq.n	8009fc0 <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 8009fce:	2d1f      	cmp	r5, #31
 8009fd0:	d808      	bhi.n	8009fe4 <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009fd2:	fa06 f005 	lsl.w	r0, r6, r5
 8009fd6:	4298      	cmp	r0, r3
 8009fd8:	d904      	bls.n	8009fe4 <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 8009fda:	005b      	lsls	r3, r3, #1
    si++;
 8009fdc:	3501      	adds	r5, #1
 8009fde:	e7e8      	b.n	8009fb2 <JPEG_Bits_To_SizeCodes+0x2a>
 8009fe0:	1b1f      	subs	r7, r3, r4
 8009fe2:	e7f0      	b.n	8009fc6 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	e7e6      	b.n	8009fb6 <JPEG_Bits_To_SizeCodes+0x2e>

08009fe8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fea:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8009fee:	460d      	mov	r5, r1
 8009ff0:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009ff2:	ab01      	add	r3, sp, #4
 8009ff4:	aa43      	add	r2, sp, #268	; 0x10c
 8009ff6:	a902      	add	r1, sp, #8
 8009ff8:	f7ff ffc6 	bl	8009f88 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009ffc:	b938      	cbnz	r0, 800a00e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8009ffe:	9e01      	ldr	r6, [sp, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	f104 0110 	add.w	r1, r4, #16
 800a006:	3610      	adds	r6, #16
 800a008:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800a00a:	42a1      	cmp	r1, r4
 800a00c:	d102      	bne.n	800a014 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a00e:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800a012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800a014:	f811 6b01 	ldrb.w	r6, [r1], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a018:	2e0b      	cmp	r6, #11
 800a01a:	d80a      	bhi.n	800a032 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a01c:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a020:	f852 cb04 	ldr.w	ip, [r2], #4
 800a024:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a028:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a02c:	3f01      	subs	r7, #1
 800a02e:	55af      	strb	r7, [r5, r6]
      k++;
 800a030:	e7eb      	b.n	800a00a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a032:	2001      	movs	r0, #1
 800a034:	e7eb      	b.n	800a00e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a036 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a036:	4603      	mov	r3, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a03c:	681c      	ldr	r4, [r3, #0]
{
 800a03e:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a040:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 800a044:	429a      	cmp	r2, r3
 800a046:	d125      	bne.n	800a094 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a048:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a04c:	a901      	add	r1, sp, #4
 800a04e:	f7ff ffcb 	bl	8009fe8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a052:	b9e8      	cbnz	r0, 800a090 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a054:	aa01      	add	r2, sp, #4
 800a056:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800a05a:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a05e:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a060:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a062:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a064:	7ad3      	ldrb	r3, [r2, #11]
    while (i > 1UL)
 800a066:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a068:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    while (i > 1UL)
 800a06c:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a06e:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a070:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a074:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a078:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a07a:	7b13      	ldrb	r3, [r2, #12]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a082:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a084:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a088:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a08c:	42b4      	cmp	r4, r6
 800a08e:	d1e9      	bne.n	800a064 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a090:	b011      	add	sp, #68	; 0x44
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a094:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 800a098:	429a      	cmp	r2, r3
 800a09a:	d102      	bne.n	800a0a2 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a09c:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 800a0a0:	e7d4      	b.n	800a04c <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	e7f4      	b.n	800a090 <JPEG_Set_HuffDC_Mem+0x5a>

0800a0a6 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a0aa:	6804      	ldr	r4, [r0, #0]
{
 800a0ac:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 800a0b0:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a0b2:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d115      	bne.n	800a0e6 <JPEG_Set_HuffAC_Mem+0x40>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a0ba:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a0be:	466b      	mov	r3, sp
 800a0c0:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 800a0c4:	a901      	add	r1, sp, #4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f7ff ff5e 	bl	8009f88 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d15d      	bne.n	800a18c <JPEG_Set_HuffAC_Mem+0xe6>
 800a0d0:	9b00      	ldr	r3, [sp, #0]
 800a0d2:	460e      	mov	r6, r1
 800a0d4:	f105 0c10 	add.w	ip, r5, #16
 800a0d8:	4617      	mov	r7, r2
 800a0da:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 800a0dc:	f04f 0e0a 	mov.w	lr, #10
 800a0e0:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a0e2:	ad42      	add	r5, sp, #264	; 0x108
 800a0e4:	e021      	b.n	800a12a <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a0e6:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d110      	bne.n	800a110 <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a0ee:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 800a0f2:	e7e4      	b.n	800a0be <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a0f4:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 800a0f8:	b163      	cbz	r3, 800a114 <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a0fa:	2bf0      	cmp	r3, #240	; 0xf0
 800a0fc:	d04a      	beq.n	800a194 <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 800a0fe:	ea4f 1813 	mov.w	r8, r3, lsr #4
      lsb = (l & 0x0FUL);
 800a102:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a106:	3b01      	subs	r3, #1
 800a108:	fb0e 3308 	mla	r3, lr, r8, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a10c:	2ba1      	cmp	r3, #161	; 0xa1
 800a10e:	d902      	bls.n	800a116 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a110:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 800a112:	e03b      	b.n	800a18c <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 800a114:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a116:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800a11a:	f857 8b04 	ldr.w	r8, [r7], #4
 800a11e:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a122:	f816 2b01 	ldrb.w	r2, [r6], #1
 800a126:	3a01      	subs	r2, #1
 800a128:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 800a12a:	4561      	cmp	r1, ip
 800a12c:	d1e2      	bne.n	800a0f4 <JPEG_Set_HuffAC_Mem+0x4e>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a12e:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800a132:	a942      	add	r1, sp, #264	; 0x108
 800a134:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 800a138:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a13a:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a13c:	6063      	str	r3, [r4, #4]
 800a13e:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a140:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 800a144:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 800a148:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a14a:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800a14e:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a150:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800a154:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a156:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800a15a:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a15c:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
    while (i > 1UL)
 800a160:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a162:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
    while (i > 1UL)
 800a166:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a168:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a16a:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a16e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a172:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a174:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a17e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a184:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a188:	42b4      	cmp	r4, r6
 800a18a:	d1e7      	bne.n	800a15c <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a18c:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 800a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 800a194:	23a1      	movs	r3, #161	; 0xa1
 800a196:	e7be      	b.n	800a116 <JPEG_Set_HuffAC_Mem+0x70>

0800a198 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a198:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a19a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a19e:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1a0:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a1a2:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1a4:	f002 0203 	and.w	r2, r2, #3
 800a1a8:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	bf0c      	ite	eq
 800a1ae:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a1b2:	f022 0208 	bicne.w	r2, r2, #8
 800a1b6:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800a1c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a1c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1ca:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a1d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1d6:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a1d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	f042 0201 	orr.w	r2, r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a1f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a1f2:	f002 020c 	and.w	r2, r2, #12
 800a1f6:	2a08      	cmp	r2, #8
 800a1f8:	d104      	bne.n	800a204 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a1fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1fc:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a200:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a202:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a204:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a206:	f002 020c 	and.w	r2, r2, #12
 800a20a:	2a0c      	cmp	r2, #12
 800a20c:	d1f9      	bne.n	800a202 <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a20e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a210:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a214:	e7f4      	b.n	800a200 <JPEG_Init_Process+0x68>
	...

0800a218 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a21a:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800a21c:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d927      	bls.n	800a272 <JPEG_DMA_StartProcess+0x5a>
 800a222:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a224:	2903      	cmp	r1, #3
 800a226:	d924      	bls.n	800a272 <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a228:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a22a:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a22e:	4d1a      	ldr	r5, [pc, #104]	; (800a298 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a230:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a238:	4e18      	ldr	r6, [pc, #96]	; (800a29c <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a23a:	4f19      	ldr	r7, [pc, #100]	; (800a2a0 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a23c:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a23e:	6802      	ldr	r2, [r0, #0]
 800a240:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a242:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a244:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 800a248:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a24c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a24e:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a250:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a252:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800a254:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a256:	4e13      	ldr	r6, [pc, #76]	; (800a2a4 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a258:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a25a:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a25c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a25e:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a260:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a262:	69a1      	ldr	r1, [r4, #24]
 800a264:	f7fe f9fe 	bl	8008664 <HAL_DMA_Start_IT>
 800a268:	b128      	cbz	r0, 800a276 <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a26a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a26c:	f043 0304 	orr.w	r3, r3, #4
 800a270:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 800a272:	2001      	movs	r0, #1
 800a274:	e00e      	b.n	800a294 <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a276:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a278:	6821      	ldr	r1, [r4, #0]
 800a27a:	089b      	lsrs	r3, r3, #2
 800a27c:	69e2      	ldr	r2, [r4, #28]
 800a27e:	3144      	adds	r1, #68	; 0x44
 800a280:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a282:	f7fe f9ef 	bl	8008664 <HAL_DMA_Start_IT>
 800a286:	2800      	cmp	r0, #0
 800a288:	d1ef      	bne.n	800a26a <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a28e:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800a292:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 800a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a296:	bf00      	nop
 800a298:	0800a805 	.word	0x0800a805
 800a29c:	0800a6e9 	.word	0x0800a6e9
 800a2a0:	0800acb9 	.word	0x0800acb9
 800a2a4:	0800aca9 	.word	0x0800aca9

0800a2a8 <HAL_JPEG_Init>:
{
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	f000 811f 	beq.w	800a4f0 <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a2b2:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800a2b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a2ba:	b91b      	cbnz	r3, 800a2c4 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a2bc:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a2c0:	f7fa fd42 	bl	8004d48 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a2c4:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	498a      	ldr	r1, [pc, #552]	; (800a4f4 <HAL_JPEG_Init+0x24c>)
 800a2ca:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a2ce:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a2d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a2d4:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 800a2d8:	f043 0301 	orr.w	r3, r3, #1
 800a2dc:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a2de:	6813      	ldr	r3, [r2, #0]
 800a2e0:	f023 0301 	bic.w	r3, r3, #1
 800a2e4:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a2e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a2e8:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800a2ec:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a2ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a2f0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a2f4:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a2f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a2f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2fc:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a2fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a304:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a306:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a308:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a30c:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a30e:	4b7a      	ldr	r3, [pc, #488]	; (800a4f8 <HAL_JPEG_Init+0x250>)
 800a310:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a312:	4b7a      	ldr	r3, [pc, #488]	; (800a4fc <HAL_JPEG_Init+0x254>)
 800a314:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800a316:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a318:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a31c:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 800a31e:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a320:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a322:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a324:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a328:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a32a:	4333      	orrs	r3, r6
 800a32c:	7c4e      	ldrb	r6, [r1, #17]
 800a32e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a332:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a336:	42a8      	cmp	r0, r5
 800a338:	d1f0      	bne.n	800a31c <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a33a:	4b71      	ldr	r3, [pc, #452]	; (800a500 <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a33c:	f502 7662 	add.w	r6, r2, #904	; 0x388
 800a340:	4970      	ldr	r1, [pc, #448]	; (800a504 <HAL_JPEG_Init+0x25c>)
 800a342:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a346:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 800a34a:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a34e:	460d      	mov	r5, r1
 800a350:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a352:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 800a356:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800a35a:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a35e:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 800a360:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a362:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a366:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a368:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a36c:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a370:	ea43 030c 	orr.w	r3, r3, ip
 800a374:	f895 c011 	ldrb.w	ip, [r5, #17]
 800a378:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a37c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a380:	42be      	cmp	r6, r7
 800a382:	d1ec      	bne.n	800a35e <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 800a384:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a388:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 800a38c:	0c1b      	lsrs	r3, r3, #16
 800a38e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a390:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 800a394:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 800a398:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a39c:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 800a3a0:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3a2:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a3a6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3a8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a3ac:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a3b0:	4333      	orrs	r3, r6
 800a3b2:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800a3b6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3ba:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 800a3be:	4285      	cmp	r5, r0
 800a3c0:	d1ec      	bne.n	800a39c <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800a3c2:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a3c6:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0xFFFF0000U;
 800a3ca:	484f      	ldr	r0, [pc, #316]	; (800a508 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFU;
 800a3cc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a3ce:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 800a3d2:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 800a3d6:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 800a3da:	4003      	ands	r3, r0
  *address = value;
 800a3dc:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 800a3e6:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800a3ea:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800a3ee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 800a3f2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3f6:	4b45      	ldr	r3, [pc, #276]	; (800a50c <HAL_JPEG_Init+0x264>)
  value = *address & 0x0000FFFFUL;
 800a3f8:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a3fa:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 800a3fe:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 800a402:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800a406:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a408:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 800a40c:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 800a410:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a414:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 800a418:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800a41c:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 800a420:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800a424:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a426:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 800a42a:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 800a42e:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800a432:	4937      	ldr	r1, [pc, #220]	; (800a510 <HAL_JPEG_Init+0x268>)
 800a434:	4003      	ands	r3, r0
  address = (hjpeg->Instance->DHTMEM + 102);
 800a436:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a43a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800a43e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a442:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a446:	4b33      	ldr	r3, [pc, #204]	; (800a514 <HAL_JPEG_Init+0x26c>)
 800a448:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 800a44c:	4b32      	ldr	r3, [pc, #200]	; (800a518 <HAL_JPEG_Init+0x270>)
 800a44e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 800a452:	4b32      	ldr	r3, [pc, #200]	; (800a51c <HAL_JPEG_Init+0x274>)
 800a454:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 800a458:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800a45c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a45e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 800a462:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a466:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 800a46a:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a46c:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a470:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a472:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a476:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a47a:	4333      	orrs	r3, r6
 800a47c:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 800a480:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a484:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a488:	42a8      	cmp	r0, r5
 800a48a:	d1ec      	bne.n	800a466 <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a48c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a490:	491c      	ldr	r1, [pc, #112]	; (800a504 <HAL_JPEG_Init+0x25c>)
 800a492:	4620      	mov	r0, r4
 800a494:	f7ff fe07 	bl	800a0a6 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a498:	b110      	cbz	r0, 800a4a0 <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a49a:	2001      	movs	r0, #1
 800a49c:	6520      	str	r0, [r4, #80]	; 0x50
}
 800a49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 800a4a0:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	491a      	ldr	r1, [pc, #104]	; (800a510 <HAL_JPEG_Init+0x268>)
 800a4a6:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 800a4aa:	f7ff fdfc 	bl	800a0a6 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d1f3      	bne.n	800a49a <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 800a4b2:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	490f      	ldr	r1, [pc, #60]	; (800a4f4 <HAL_JPEG_Init+0x24c>)
 800a4b8:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800a4bc:	f7ff fdbb 	bl	800a036 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d1ea      	bne.n	800a49a <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 800a4c4:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4915      	ldr	r1, [pc, #84]	; (800a520 <HAL_JPEG_Init+0x278>)
 800a4ca:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 800a4ce:	f7ff fdb2 	bl	800a036 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d1e1      	bne.n	800a49a <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a4d6:	6822      	ldr	r2, [r4, #0]
 800a4d8:	6853      	ldr	r3, [r2, #4]
 800a4da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4de:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a4e0:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a4e2:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800a4e4:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a4e6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a4ea:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 800a4ec:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 800a4ee:	e7d6      	b.n	800a49e <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	e7d4      	b.n	800a49e <HAL_JPEG_Init+0x1f6>
 800a4f4:	0802a295 	.word	0x0802a295
 800a4f8:	0802a2b1 	.word	0x0802a2b1
 800a4fc:	0802a239 	.word	0x0802a239
 800a500:	0b0a0908 	.word	0x0b0a0908
 800a504:	0802a187 	.word	0x0802a187
 800a508:	ffff0000 	.word	0xffff0000
 800a50c:	09080706 	.word	0x09080706
 800a510:	0802a0d5 	.word	0x0802a0d5
 800a514:	01000404 	.word	0x01000404
 800a518:	05070403 	.word	0x05070403
 800a51c:	04040201 	.word	0x04040201
 800a520:	0802a279 	.word	0x0802a279

0800a524 <HAL_JPEG_GetInfo>:
{
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a528:	2800      	cmp	r0, #0
 800a52a:	d06a      	beq.n	800a602 <HAL_JPEG_GetInfo+0xde>
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d068      	beq.n	800a602 <HAL_JPEG_GetInfo+0xde>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a530:	6804      	ldr	r4, [r0, #0]
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	f003 0303 	and.w	r3, r3, #3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d13b      	bne.n	800a5b4 <HAL_JPEG_GetInfo+0x90>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a53c:	2310      	movs	r3, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800a53e:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	0c1b      	lsrs	r3, r3, #16
 800a54a:	60cb      	str	r3, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a54c:	680b      	ldr	r3, [r1, #0]
 800a54e:	f023 0320 	bic.w	r3, r3, #32
 800a552:	2b10      	cmp	r3, #16
 800a554:	d13b      	bne.n	800a5ce <HAL_JPEG_GetInfo+0xaa>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a556:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a558:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a55a:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a55e:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a560:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a562:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a564:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a568:	d12f      	bne.n	800a5ca <HAL_JPEG_GetInfo+0xa6>
 800a56a:	4313      	orrs	r3, r2
 800a56c:	071a      	lsls	r2, r3, #28
 800a56e:	d12e      	bne.n	800a5ce <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a570:	2302      	movs	r3, #2
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800a572:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	3450      	adds	r4, #80	; 0x50
 800a578:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800a608 <HAL_JPEG_GetInfo+0xe4>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800a57c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a57e:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800a582:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 800a586:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800a58a:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 800a58e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a590:	fa29 f206 	lsr.w	r2, r9, r6
 800a594:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800a596:	2a01      	cmp	r2, #1
 800a598:	d120      	bne.n	800a5dc <HAL_JPEG_GetInfo+0xb8>
        quality += 100UL;
 800a59a:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 800a59c:	3608      	adds	r6, #8
 800a59e:	3701      	adds	r7, #1
 800a5a0:	2e20      	cmp	r6, #32
 800a5a2:	d1f5      	bne.n	800a590 <HAL_JPEG_GetInfo+0x6c>
        }
      }
    }

    i += 4UL;
 800a5a4:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a5a6:	2d40      	cmp	r5, #64	; 0x40
 800a5a8:	d1ed      	bne.n	800a586 <HAL_JPEG_GetInfo+0x62>
    tableAddress ++;
  }

  return (quality / 64UL);
 800a5aa:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800a5ac:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a5ae:	610b      	str	r3, [r1, #16]
}
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a5b4:	6863      	ldr	r3, [r4, #4]
 800a5b6:	f013 0303 	ands.w	r3, r3, #3
 800a5ba:	d0c0      	beq.n	800a53e <HAL_JPEG_GetInfo+0x1a>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a5bc:	6863      	ldr	r3, [r4, #4]
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d11d      	bne.n	800a602 <HAL_JPEG_GetInfo+0xde>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800a5c6:	2330      	movs	r3, #48	; 0x30
 800a5c8:	e7b9      	b.n	800a53e <HAL_JPEG_GetInfo+0x1a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a5ca:	2d03      	cmp	r5, #3
 800a5cc:	d001      	beq.n	800a5d2 <HAL_JPEG_GetInfo+0xae>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e7cf      	b.n	800a572 <HAL_JPEG_GetInfo+0x4e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	071b      	lsls	r3, r3, #28
 800a5d6:	d1fa      	bne.n	800a5ce <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e7ca      	b.n	800a572 <HAL_JPEG_GetInfo+0x4e>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a5dc:	fb0e fb02 	mul.w	fp, lr, r2
 800a5e0:	f897 a000 	ldrb.w	sl, [r7]
 800a5e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5e6:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800a5ea:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800a5ee:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 800a5f0:	bf8b      	itete	hi
 800a5f2:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800a5f6:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 800a5fa:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800a5fc:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800a600:	e7cc      	b.n	800a59c <HAL_JPEG_GetInfo+0x78>
    return HAL_ERROR;
 800a602:	2001      	movs	r0, #1
 800a604:	e7d4      	b.n	800a5b0 <HAL_JPEG_GetInfo+0x8c>
 800a606:	bf00      	nop
 800a608:	0802a2f1 	.word	0x0802a2f1

0800a60c <HAL_JPEG_Decode_DMA>:
{
 800a60c:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a60e:	4604      	mov	r4, r0
 800a610:	b348      	cbz	r0, 800a666 <HAL_JPEG_Decode_DMA+0x5a>
 800a612:	b341      	cbz	r1, 800a666 <HAL_JPEG_Decode_DMA+0x5a>
 800a614:	b33b      	cbz	r3, 800a666 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800a616:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 800a61a:	2d01      	cmp	r5, #1
 800a61c:	d028      	beq.n	800a670 <HAL_JPEG_Decode_DMA+0x64>
 800a61e:	2501      	movs	r5, #1
 800a620:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a624:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 800a628:	2d01      	cmp	r5, #1
 800a62a:	d11e      	bne.n	800a66a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a62c:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800a62e:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a630:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a634:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800a636:	f025 050f 	bic.w	r5, r5, #15
 800a63a:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a63c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800a63e:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a642:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a646:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 800a648:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800a64a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800a64c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800a64e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 800a650:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 800a652:	f7ff fda1 	bl	800a198 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a656:	f7ff fddf 	bl	800a218 <JPEG_DMA_StartProcess>
 800a65a:	b128      	cbz	r0, 800a668 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a65c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800a65e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a662:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800a666:	2001      	movs	r0, #1
}
 800a668:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 800a66a:	2300      	movs	r3, #0
 800a66c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 800a670:	2002      	movs	r0, #2
 800a672:	e7f9      	b.n	800a668 <HAL_JPEG_Decode_DMA+0x5c>

0800a674 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a674:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a676:	f003 030c 	and.w	r3, r3, #12
 800a67a:	2b0c      	cmp	r3, #12
 800a67c:	d117      	bne.n	800a6ae <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a67e:	f011 0301 	ands.w	r3, r1, #1
 800a682:	d005      	beq.n	800a690 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a684:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a68a:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 800a68c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a690:	0789      	lsls	r1, r1, #30
 800a692:	d505      	bpl.n	800a6a0 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a694:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 800a696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a69a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a69e:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a6a0:	6801      	ldr	r1, [r0, #0]
 800a6a2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a6a4:	ea22 0303 	bic.w	r3, r2, r3
 800a6a8:	630b      	str	r3, [r1, #48]	; 0x30
}
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a6ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a6b0:	f003 030c 	and.w	r3, r3, #12
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d1f8      	bne.n	800a6aa <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a6b8:	f011 0301 	ands.w	r3, r1, #1
 800a6bc:	d004      	beq.n	800a6c8 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a6be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a6c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6c4:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a6c6:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a6c8:	078a      	lsls	r2, r1, #30
 800a6ca:	d5e9      	bpl.n	800a6a0 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a6cc:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a6ce:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a6d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6d6:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a6d8:	e7e2      	b.n	800a6a0 <HAL_JPEG_Pause+0x2c>

0800a6da <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800a6da:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800a6dc:	6282      	str	r2, [r0, #40]	; 0x28
}
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800a6e0:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800a6e2:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800a6e4:	4770      	bx	lr

0800a6e6 <HAL_JPEG_EncodeCpltCallback>:
 800a6e6:	4770      	bx	lr

0800a6e8 <JPEG_DMAErrorCallback>:
{
 800a6e8:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a6ec:	f7fe f8c8 	bl	8008880 <HAL_DMA_GetError>
 800a6f0:	2802      	cmp	r0, #2
 800a6f2:	d016      	beq.n	800a722 <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a6f4:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800a6f6:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	f022 0201 	bic.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a702:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800a706:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a70a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a710:	2301      	movs	r3, #1
 800a712:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a716:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a718:	f043 0304 	orr.w	r3, r3, #4
 800a71c:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 800a71e:	f7f7 f87f 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800a722:	bd10      	pop	{r4, pc}

0800a724 <JPEG_ReadInputData>:
{
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a726:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 800a728:	4604      	mov	r4, r0
 800a72a:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a72c:	bb35      	cbnz	r5, 800a77c <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a72e:	2101      	movs	r1, #1
 800a730:	f7ff ffa0 	bl	800a674 <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a734:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a736:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800a73a:	d11e      	bne.n	800a77a <JPEG_ReadInputData+0x56>
 800a73c:	b1ed      	cbz	r5, 800a77a <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 800a73e:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800a742:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 800a746:	d830      	bhi.n	800a7aa <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a748:	69a5      	ldr	r5, [r4, #24]
 800a74a:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800a74c:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a74e:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a750:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a752:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 800a754:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a756:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a758:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a75c:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a760:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a762:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a766:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a76a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a76e:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 800a770:	6a22      	ldr	r2, [r4, #32]
 800a772:	f102 0204 	add.w	r2, r2, #4
 800a776:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a778:	d1e8      	bne.n	800a74c <JPEG_ReadInputData+0x28>
}
 800a77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a77c:	6a03      	ldr	r3, [r0, #32]
 800a77e:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a780:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a782:	d901      	bls.n	800a788 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a784:	1aed      	subs	r5, r5, r3
 800a786:	e7d5      	b.n	800a734 <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a788:	429d      	cmp	r5, r3
 800a78a:	d10c      	bne.n	800a7a6 <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a78c:	6a01      	ldr	r1, [r0, #32]
 800a78e:	f7f6 ffef 	bl	8001770 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800a792:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a794:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a796:	bf84      	itt	hi
 800a798:	f023 0303 	bichi.w	r3, r3, #3
 800a79c:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800a79e:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800a7a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800a7a2:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800a7a4:	e7c6      	b.n	800a734 <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 800a7a6:	2500      	movs	r5, #0
 800a7a8:	e7c4      	b.n	800a734 <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 800a7aa:	2d03      	cmp	r5, #3
 800a7ac:	d826      	bhi.n	800a7fc <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a7ae:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 800a7b0:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a7b2:	6a21      	ldr	r1, [r4, #32]
 800a7b4:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 800a7b6:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a7b8:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 800a7ba:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a7bc:	fa01 f100 	lsl.w	r1, r1, r0
 800a7c0:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 800a7c4:	6a21      	ldr	r1, [r4, #32]
 800a7c6:	f101 0101 	add.w	r1, r1, #1
 800a7ca:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800a7cc:	d1f1      	bne.n	800a7b2 <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a7d2:	e7d2      	b.n	800a77a <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 800a7d4:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a7d6:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7d8:	69a6      	ldr	r6, [r4, #24]
 800a7da:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7dc:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7de:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a7e0:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7e2:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a7e6:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a7e8:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7ea:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a7ee:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a7f0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7f4:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800a7f6:	6a22      	ldr	r2, [r4, #32]
 800a7f8:	3204      	adds	r2, #4
 800a7fa:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a7fc:	42bb      	cmp	r3, r7
 800a7fe:	d1e9      	bne.n	800a7d4 <JPEG_ReadInputData+0xb0>
 800a800:	e7bb      	b.n	800a77a <JPEG_ReadInputData+0x56>
	...

0800a804 <JPEG_DMAInCpltCallback>:
{
 800a804:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a806:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a80c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800a810:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a812:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a814:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800a818:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800a81c:	0412      	lsls	r2, r2, #16
 800a81e:	0c12      	lsrs	r2, r2, #16
 800a820:	2a0c      	cmp	r2, #12
 800a822:	d12c      	bne.n	800a87e <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a82a:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a82c:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a82e:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <JPEG_DMAInCpltCallback+0x9c>)
 800a834:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 800a838:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a83a:	1a9b      	subs	r3, r3, r2
 800a83c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a83e:	6a21      	ldr	r1, [r4, #32]
 800a840:	f7f6 ff96 	bl	8001770 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800a844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a846:	2b03      	cmp	r3, #3
 800a848:	d91a      	bls.n	800a880 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a84a:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800a84e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a850:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a852:	04db      	lsls	r3, r3, #19
 800a854:	d41d      	bmi.n	800a892 <JPEG_DMAInCpltCallback+0x8e>
 800a856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a858:	b1db      	cbz	r3, 800a892 <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	089b      	lsrs	r3, r3, #2
 800a85e:	69a1      	ldr	r1, [r4, #24]
 800a860:	3240      	adds	r2, #64	; 0x40
 800a862:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a864:	f7fd fefe 	bl	8008664 <HAL_DMA_Start_IT>
 800a868:	b170      	cbz	r0, 800a888 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a86a:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800a86c:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a86e:	f043 0304 	orr.w	r3, r3, #4
 800a872:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a874:	2306      	movs	r3, #6
 800a876:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800a87a:	f7f6 ffd1 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800a87e:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0e5      	beq.n	800a850 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 800a884:	2304      	movs	r3, #4
 800a886:	e7e2      	b.n	800a84e <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a888:	6822      	ldr	r2, [r4, #0]
 800a88a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a88c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a890:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a89a:	6313      	str	r3, [r2, #48]	; 0x30
 800a89c:	e7ef      	b.n	800a87e <JPEG_DMAInCpltCallback+0x7a>
 800a89e:	bf00      	nop
 800a8a0:	0003fffc 	.word	0x0003fffc

0800a8a4 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8a4:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 800a8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a8ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800a8ae:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d32a      	bcc.n	800a90a <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800a8b4:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a8b6:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800a8b8:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8ba:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 800a8be:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8c2:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a8c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a8c6:	69e0      	ldr	r0, [r4, #28]
 800a8c8:	4428      	add	r0, r5
 800a8ca:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800a8ce:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a8d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a8d2:	69e0      	ldr	r0, [r4, #28]
 800a8d4:	4428      	add	r0, r5
 800a8d6:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a8da:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a8de:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a8e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a8e2:	69e0      	ldr	r0, [r4, #28]
 800a8e4:	4428      	add	r0, r5
 800a8e6:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800a8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ea:	f103 0304 	add.w	r3, r3, #4
 800a8ee:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a8f0:	d1e1      	bne.n	800a8b6 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d106      	bne.n	800a908 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a8fc:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7f6 ff54 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a90a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d9fb      	bls.n	800a908 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a910:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800a912:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a914:	1a9b      	subs	r3, r3, r2
 800a916:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800a918:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a91a:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800a91c:	d105      	bne.n	800a92a <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a91e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a922:	429f      	cmp	r7, r3
 800a924:	d119      	bne.n	800a95a <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a926:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a928:	e7e9      	b.n	800a8fe <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800a92a:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800a92c:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800a92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a930:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a932:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a934:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a936:	69e1      	ldr	r1, [r4, #28]
 800a938:	4429      	add	r1, r5
 800a93a:	0a1d      	lsrs	r5, r3, #8
 800a93c:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a93e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a940:	69e1      	ldr	r1, [r4, #28]
 800a942:	4429      	add	r1, r5
 800a944:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a946:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a948:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a94a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a94c:	69e1      	ldr	r1, [r4, #28]
 800a94e:	4429      	add	r1, r5
 800a950:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800a952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a954:	3304      	adds	r3, #4
 800a956:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800a958:	e7de      	b.n	800a918 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a95a:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800a95c:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 800a95e:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a960:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 800a964:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 800a966:	4560      	cmp	r0, ip
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a968:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800a96a:	d114      	bne.n	800a996 <JPEG_StoreOutputData+0xf2>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a96c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a96e:	4620      	mov	r0, r4
 800a970:	f7f6 ff1c 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800a978:	1d2b      	adds	r3, r5, #4
 800a97a:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d8c3      	bhi.n	800a908 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a980:	00da      	lsls	r2, r3, #3
 800a982:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a984:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800a986:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a988:	fa26 f202 	lsr.w	r2, r6, r2
 800a98c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800a98e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a990:	3201      	adds	r2, #1
 800a992:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a994:	e7f2      	b.n	800a97c <JPEG_StoreOutputData+0xd8>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a996:	f000 0203 	and.w	r2, r0, #3
 800a99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800a99c:	3001      	adds	r0, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a99e:	00d2      	lsls	r2, r2, #3
 800a9a0:	fa26 f202 	lsr.w	r2, r6, r2
 800a9a4:	54ca      	strb	r2, [r1, r3]
        hjpeg->JpegOutCount++;
 800a9a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800a9ac:	e7db      	b.n	800a966 <JPEG_StoreOutputData+0xc2>

0800a9ae <JPEG_Process>:
{
 800a9ae:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800a9b2:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9b4:	f003 0303 	and.w	r3, r3, #3
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d114      	bne.n	800a9e6 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a9bc:	6803      	ldr	r3, [r0, #0]
 800a9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c0:	065a      	lsls	r2, r3, #25
 800a9c2:	d510      	bpl.n	800a9e6 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a9c4:	1d01      	adds	r1, r0, #4
 800a9c6:	f7ff fdad 	bl	800a524 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800a9ca:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a9cc:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800a9ce:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a9d0:	f7f6 fe80 	bl	80016d4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9dc:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a9de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9e4:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a9e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a9e8:	04db      	lsls	r3, r3, #19
 800a9ea:	d407      	bmi.n	800a9fc <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9f0:	0795      	lsls	r5, r2, #30
 800a9f2:	d543      	bpl.n	800aa7c <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a9f4:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7ff fe94 	bl	800a724 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a9fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a9fe:	0499      	lsls	r1, r3, #18
 800aa00:	d407      	bmi.n	800aa12 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa06:	0712      	lsls	r2, r2, #28
 800aa08:	d53d      	bpl.n	800aa86 <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aa0a:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff ff49 	bl	800a8a4 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa16:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800aa1a:	2a20      	cmp	r2, #32
 800aa1c:	d13b      	bne.n	800aa96 <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	f022 0201 	bic.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aa26:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800aa28:	f002 020c 	and.w	r2, r2, #12
 800aa2c:	2a08      	cmp	r2, #8
 800aa2e:	d103      	bne.n	800aa38 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa32:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aa38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa3a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800aa3e:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800aa40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa42:	b133      	cbz	r3, 800aa52 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa46:	4620      	mov	r0, r4
 800aa48:	69e1      	ldr	r1, [r4, #28]
 800aa4a:	f7f6 feaf 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800aa52:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aa54:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa56:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa58:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa5a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa5e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa62:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa64:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800aa66:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aa6a:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 800aa6e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa72:	d10d      	bne.n	800aa90 <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa74:	f7f6 fed6 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800aa78:	4628      	mov	r0, r5
}
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	0758      	lsls	r0, r3, #29
 800aa80:	d5bc      	bpl.n	800a9fc <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800aa82:	2101      	movs	r1, #1
 800aa84:	e7b7      	b.n	800a9f6 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa88:	06db      	lsls	r3, r3, #27
 800aa8a:	d5c2      	bpl.n	800aa12 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	e7bd      	b.n	800aa0c <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800aa90:	f7ff fe29 	bl	800a6e6 <HAL_JPEG_EncodeCpltCallback>
 800aa94:	e7f0      	b.n	800aa78 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 800aa96:	2000      	movs	r0, #0
 800aa98:	e7ef      	b.n	800aa7a <JPEG_Process+0xcc>

0800aa9a <JPEG_DMA_PollResidualData>:
{
 800aa9a:	b570      	push	{r4, r5, r6, lr}
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aaa0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800aaa2:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800aaa6:	d123      	bne.n	800aaf0 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaac:	06d0      	lsls	r0, r2, #27
 800aaae:	d51f      	bpl.n	800aaf0 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800aab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800aab2:	69e1      	ldr	r1, [r4, #28]
 800aab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aab6:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800aab8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aaba:	69e2      	ldr	r2, [r4, #28]
 800aabc:	440a      	add	r2, r1
 800aabe:	0a19      	lsrs	r1, r3, #8
 800aac0:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aac2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aac4:	69e2      	ldr	r2, [r4, #28]
 800aac6:	440a      	add	r2, r1
 800aac8:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800aaca:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aacc:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800aace:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aad0:	69e2      	ldr	r2, [r4, #28]
 800aad2:	440a      	add	r2, r1
 800aad4:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800aad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad8:	3304      	adds	r3, #4
 800aada:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800aadc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d105      	bne.n	800aaf0 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aae4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aae6:	4620      	mov	r0, r4
 800aae8:	69e1      	ldr	r1, [r4, #28]
 800aaea:	f7f6 fe5f 	bl	80017ac <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800aaee:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800aaf0:	3e01      	subs	r6, #1
 800aaf2:	d1d5      	bne.n	800aaa0 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800aaf4:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800aaf6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800aaf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aafa:	06c9      	lsls	r1, r1, #27
 800aafc:	d501      	bpl.n	800ab02 <JPEG_DMA_PollResidualData+0x68>
 800aafe:	0492      	lsls	r2, r2, #18
 800ab00:	d420      	bmi.n	800ab44 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	f022 0201 	bic.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800ab0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab0c:	b133      	cbz	r3, 800ab1c <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab10:	4620      	mov	r0, r4
 800ab12:	69e1      	ldr	r1, [r4, #28]
 800ab14:	f7f6 fe4a 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800ab1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab1e:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab20:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab22:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab26:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab2a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab2c:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab36:	f04f 0201 	mov.w	r2, #1
 800ab3a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab3e:	d102      	bne.n	800ab46 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab40:	f7f6 fe70 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
}
 800ab44:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ab46:	f7ff fdce 	bl	800a6e6 <HAL_JPEG_EncodeCpltCallback>
}
 800ab4a:	e7fb      	b.n	800ab44 <JPEG_DMA_PollResidualData+0xaa>

0800ab4c <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ab4c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ab4e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 800ab52:	b570      	push	{r4, r5, r6, lr}
 800ab54:	4604      	mov	r4, r0
 800ab56:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ab58:	d034      	beq.n	800abc4 <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ab5a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ab5c:	f003 030c 	and.w	r3, r3, #12
 800ab60:	2b0c      	cmp	r3, #12
 800ab62:	d13e      	bne.n	800abe2 <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ab64:	f011 0601 	ands.w	r6, r1, #1
 800ab68:	d00a      	beq.n	800ab80 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ab6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ab6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab70:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ab72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab74:	f023 0303 	bic.w	r3, r3, #3
 800ab78:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 800ab7a:	b99b      	cbnz	r3, 800aba4 <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 800ab7c:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ab80:	07a8      	lsls	r0, r5, #30
 800ab82:	d509      	bpl.n	800ab98 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ab84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab8a:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ab8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab8e:	0419      	lsls	r1, r3, #16
 800ab90:	d51a      	bpl.n	800abc8 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7ff ff81 	bl	800aa9a <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ab9c:	431e      	orrs	r6, r3
 800ab9e:	6316      	str	r6, [r2, #48]	; 0x30
  return HAL_OK;
 800aba0:	2000      	movs	r0, #0
 800aba2:	e010      	b.n	800abc6 <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800aba4:	6802      	ldr	r2, [r0, #0]
 800aba6:	089b      	lsrs	r3, r3, #2
 800aba8:	6981      	ldr	r1, [r0, #24]
 800abaa:	3240      	adds	r2, #64	; 0x40
 800abac:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800abae:	f7fd fd59 	bl	8008664 <HAL_DMA_Start_IT>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0e2      	beq.n	800ab7c <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800abb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800abb8:	f043 0304 	orr.w	r3, r3, #4
 800abbc:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800abbe:	2306      	movs	r3, #6
 800abc0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800abc4:	2001      	movs	r0, #1
}
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800abc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abca:	6821      	ldr	r1, [r4, #0]
 800abcc:	089b      	lsrs	r3, r3, #2
 800abce:	69e2      	ldr	r2, [r4, #28]
 800abd0:	3144      	adds	r1, #68	; 0x44
 800abd2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800abd4:	f7fd fd46 	bl	8008664 <HAL_DMA_Start_IT>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d1ec      	bne.n	800abb6 <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 800abdc:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 800abe0:	e7da      	b.n	800ab98 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800abe2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800abe4:	f003 030c 	and.w	r3, r3, #12
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d1d9      	bne.n	800aba0 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800abec:	f011 0301 	ands.w	r3, r1, #1
 800abf0:	d004      	beq.n	800abfc <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800abf2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800abf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abf8:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800abfa:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800abfc:	07aa      	lsls	r2, r5, #30
 800abfe:	d505      	bpl.n	800ac0c <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ac00:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ac02:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ac06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac0a:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800ac0c:	6821      	ldr	r1, [r4, #0]
 800ac0e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ac10:	4313      	orrs	r3, r2
 800ac12:	630b      	str	r3, [r1, #48]	; 0x30
 800ac14:	e7c4      	b.n	800aba0 <HAL_JPEG_Resume+0x54>
	...

0800ac18 <JPEG_DMA_EndProcess>:
{
 800ac18:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800ac1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 800ac1c:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800ac1e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6859      	ldr	r1, [r3, #4]
 800ac24:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <JPEG_DMA_EndProcess+0x8c>)
 800ac26:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ac2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d105      	bne.n	800ac40 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac34:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ac36:	69c1      	ldr	r1, [r0, #28]
 800ac38:	f7f6 fdb8 	bl	80017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800ac44:	f015 0510 	ands.w	r5, r5, #16
 800ac48:	d124      	bne.n	800ac94 <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 800ac4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac4c:	b12b      	cbz	r3, 800ac5a <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ac50:	4620      	mov	r0, r4
 800ac52:	69e1      	ldr	r1, [r4, #28]
 800ac54:	f7f6 fdaa 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ac58:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac5a:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac5c:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac5e:	6813      	ldr	r3, [r2, #0]
 800ac60:	f023 0301 	bic.w	r3, r3, #1
 800ac64:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800ac66:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac68:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac6a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac6e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac72:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac74:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800ac76:	f04f 0200 	mov.w	r2, #0
 800ac7a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ac7e:	f04f 0201 	mov.w	r2, #1
 800ac82:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac86:	d102      	bne.n	800ac8e <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac88:	f7f6 fdcc 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
}
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ac8e:	f7ff fd2a 	bl	800a6e6 <HAL_JPEG_EncodeCpltCallback>
 800ac92:	e7fb      	b.n	800ac8c <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ac94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac96:	049b      	lsls	r3, r3, #18
 800ac98:	d4f8      	bmi.n	800ac8c <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 800ac9a:	4620      	mov	r0, r4
}
 800ac9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800aca0:	f7ff befb 	b.w	800aa9a <JPEG_DMA_PollResidualData>
 800aca4:	0003fffc 	.word	0x0003fffc

0800aca8 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aca8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800acaa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800acac:	041b      	lsls	r3, r3, #16
 800acae:	d501      	bpl.n	800acb4 <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800acb0:	f7ff bfb2 	b.w	800ac18 <JPEG_DMA_EndProcess>
}
 800acb4:	4770      	bx	lr
	...

0800acb8 <JPEG_DMAOutCpltCallback>:
{
 800acb8:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acba:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acc0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800acc4:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800acc6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800acc8:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800accc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800acd0:	0412      	lsls	r2, r2, #16
 800acd2:	0c12      	lsrs	r2, r2, #16
 800acd4:	2a0c      	cmp	r2, #12
 800acd6:	d129      	bne.n	800ad2c <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800acd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acda:	0692      	lsls	r2, r2, #26
 800acdc:	d42c      	bmi.n	800ad38 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800acde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ace0:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ace2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ace6:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ace8:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800acea:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	4b15      	ldr	r3, [pc, #84]	; (800ad44 <JPEG_DMAOutCpltCallback+0x8c>)
 800acf0:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 800acf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800acfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800acfc:	f7f6 fd56 	bl	80017ac <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ad00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ad02:	049b      	lsls	r3, r3, #18
 800ad04:	d418      	bmi.n	800ad38 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ad06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad08:	6821      	ldr	r1, [r4, #0]
 800ad0a:	089b      	lsrs	r3, r3, #2
 800ad0c:	69e2      	ldr	r2, [r4, #28]
 800ad0e:	3144      	adds	r1, #68	; 0x44
 800ad10:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ad12:	f7fd fca7 	bl	8008664 <HAL_DMA_Start_IT>
 800ad16:	b150      	cbz	r0, 800ad2e <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad18:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800ad1a:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad1c:	f043 0304 	orr.w	r3, r3, #4
 800ad20:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ad22:	2306      	movs	r3, #6
 800ad24:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800ad28:	f7f6 fd7a 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800ad2c:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ad2e:	6822      	ldr	r2, [r4, #0]
 800ad30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ad32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad36:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ad3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ad40:	6313      	str	r3, [r2, #48]	; 0x30
 800ad42:	e7f3      	b.n	800ad2c <JPEG_DMAOutCpltCallback+0x74>
 800ad44:	0003fffc 	.word	0x0003fffc

0800ad48 <HAL_JPEG_IRQHandler>:
{
 800ad48:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ad4a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 800ad4e:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ad50:	3b03      	subs	r3, #3
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d854      	bhi.n	800ae00 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ad56:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ad58:	f003 030c 	and.w	r3, r3, #12
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	d103      	bne.n	800ad68 <HAL_JPEG_IRQHandler+0x20>
}
 800ad60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ad64:	f7ff be23 	b.w	800a9ae <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ad68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ad6a:	f003 030c 	and.w	r3, r3, #12
 800ad6e:	2b0c      	cmp	r3, #12
 800ad70:	d146      	bne.n	800ae00 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad72:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d114      	bne.n	800ada6 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ad7c:	6803      	ldr	r3, [r0, #0]
 800ad7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad80:	0659      	lsls	r1, r3, #25
 800ad82:	d510      	bpl.n	800ada6 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ad84:	1d01      	adds	r1, r0, #4
 800ad86:	f7ff fbcd 	bl	800a524 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ad8a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ad8c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ad8e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ad90:	f7f6 fca0 	bl	80016d4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad9c:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ad9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ada4:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adaa:	0692      	lsls	r2, r2, #26
 800adac:	d528      	bpl.n	800ae00 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800adae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800adb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800adb2:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800adb6:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800adb8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800adba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adbe:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	f022 0201 	bic.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800adc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adca:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800adce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800add0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800add2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800add6:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800add8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800addc:	2b02      	cmp	r3, #2
 800adde:	d101      	bne.n	800ade4 <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800ade0:	f7fd fc7d 	bl	80086de <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 800ade4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ade6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800adea:	2b02      	cmp	r3, #2
 800adec:	d103      	bne.n	800adf6 <HAL_JPEG_IRQHandler+0xae>
}
 800adee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800adf2:	f7fd bc74 	b.w	80086de <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800adf6:	4620      	mov	r0, r4
}
 800adf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800adfc:	f7ff bf0c 	b.w	800ac18 <JPEG_DMA_EndProcess>
}
 800ae00:	bd10      	pop	{r4, pc}

0800ae02 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae02:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae04:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae06:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae0a:	3284      	adds	r2, #132	; 0x84
 800ae0c:	1883      	adds	r3, r0, r2
{
 800ae0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae12:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae14:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae18:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ae1a:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae1e:	684c      	ldr	r4, [r1, #4]
 800ae20:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae24:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ae28:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae2c:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae2e:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae30:	68c5      	ldr	r5, [r0, #12]
 800ae32:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800ae36:	443d      	add	r5, r7
 800ae38:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ae3c:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae3e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ae40:	68c5      	ldr	r5, [r0, #12]
 800ae42:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800ae46:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ae48:	689d      	ldr	r5, [r3, #8]
 800ae4a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800ae4e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ae50:	688d      	ldr	r5, [r1, #8]
 800ae52:	68c7      	ldr	r7, [r0, #12]
 800ae54:	3501      	adds	r5, #1
 800ae56:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800ae5a:	443d      	add	r5, r7
 800ae5c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ae60:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ae62:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ae64:	691d      	ldr	r5, [r3, #16]
 800ae66:	f025 0507 	bic.w	r5, r5, #7
 800ae6a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ae6c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ae6e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ae70:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ae74:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ae78:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ae7c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800ae80:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800ae84:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800ae88:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800ae8c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ae8e:	695d      	ldr	r5, [r3, #20]
 800ae90:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800ae94:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ae96:	694d      	ldr	r5, [r1, #20]
 800ae98:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ae9a:	69dd      	ldr	r5, [r3, #28]
 800ae9c:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800aea0:	f025 0507 	bic.w	r5, r5, #7
 800aea4:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800aea6:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800aeaa:	433d      	orrs	r5, r7
 800aeac:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800aeae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800aeb0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800aeb2:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800aeb6:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aeb8:	b31e      	cbz	r6, 800af02 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800aeba:	2e01      	cmp	r6, #1
 800aebc:	d023      	beq.n	800af06 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aebe:	1eb5      	subs	r5, r6, #2
 800aec0:	2d02      	cmp	r5, #2
 800aec2:	d922      	bls.n	800af0a <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800aec4:	2e07      	cmp	r6, #7
 800aec6:	bf0c      	ite	eq
 800aec8:	2502      	moveq	r5, #2
 800aeca:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800aecc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800aece:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800aed2:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800aed6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800aed8:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800aeda:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800aedc:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800aede:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800aee0:	436e      	muls	r6, r5
 800aee2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800aee6:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800aee8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800aeea:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800aeee:	f024 0407 	bic.w	r4, r4, #7
 800aef2:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800aef4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800aef6:	5883      	ldr	r3, [r0, r2]
 800aef8:	f043 0301 	orr.w	r3, r3, #1
 800aefc:	5083      	str	r3, [r0, r2]
}
 800aefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800af02:	2504      	movs	r5, #4
 800af04:	e7e2      	b.n	800aecc <LTDC_SetConfig+0xca>
    tmp = 3U;
 800af06:	2503      	movs	r5, #3
 800af08:	e7e0      	b.n	800aecc <LTDC_SetConfig+0xca>
    tmp = 2U;
 800af0a:	2502      	movs	r5, #2
 800af0c:	e7de      	b.n	800aecc <LTDC_SetConfig+0xca>
	...

0800af10 <HAL_LTDC_Init>:
{
 800af10:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800af12:	4604      	mov	r4, r0
 800af14:	2800      	cmp	r0, #0
 800af16:	d063      	beq.n	800afe0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800af18:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800af1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af20:	b91b      	cbnz	r3, 800af2a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800af22:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800af26:	f7f9 ff87 	bl	8004e38 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800af2a:	2302      	movs	r3, #2
 800af2c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	699a      	ldr	r2, [r3, #24]
 800af34:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800af38:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800af3a:	6999      	ldr	r1, [r3, #24]
 800af3c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800af40:	4302      	orrs	r2, r0
 800af42:	68e0      	ldr	r0, [r4, #12]
 800af44:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800af46:	6920      	ldr	r0, [r4, #16]
 800af48:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800af4a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800af4c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800af4e:	4925      	ldr	r1, [pc, #148]	; (800afe4 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800af50:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	400a      	ands	r2, r1
 800af56:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800af5e:	69a0      	ldr	r0, [r4, #24]
 800af60:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800af62:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800af64:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	400a      	ands	r2, r1
 800af6a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800af72:	6a20      	ldr	r0, [r4, #32]
 800af74:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800af76:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800af78:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	400a      	ands	r2, r1
 800af7e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800af80:	691a      	ldr	r2, [r3, #16]
 800af82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800af86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800af88:	4302      	orrs	r2, r0
 800af8a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800af8c:	695a      	ldr	r2, [r3, #20]
 800af8e:	4011      	ands	r1, r2
 800af90:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800af92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800af94:	695a      	ldr	r2, [r3, #20]
 800af96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800af9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af9c:	430a      	orrs	r2, r1
 800af9e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800afa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800afa2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800afa6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800afaa:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800afae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800afb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800afb2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800afb6:	430a      	orrs	r2, r1
 800afb8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800afbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800afc0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800afc2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800afc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc6:	f042 0206 	orr.w	r2, r2, #6
 800afca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800afcc:	699a      	ldr	r2, [r3, #24]
 800afce:	f042 0201 	orr.w	r2, r2, #1
 800afd2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800afd4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800afd6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800afda:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800afde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800afe0:	2001      	movs	r0, #1
 800afe2:	e7fc      	b.n	800afde <HAL_LTDC_Init+0xce>
 800afe4:	f000f800 	.word	0xf000f800

0800afe8 <HAL_LTDC_ErrorCallback>:
 800afe8:	4770      	bx	lr

0800afea <HAL_LTDC_LineEventCallback>:
 800afea:	4770      	bx	lr

0800afec <HAL_LTDC_ReloadEventCallback>:
 800afec:	4770      	bx	lr

0800afee <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800afee:	6803      	ldr	r3, [r0, #0]
{
 800aff0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800aff2:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800aff4:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800aff6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800aff8:	0772      	lsls	r2, r6, #29
 800affa:	d514      	bpl.n	800b026 <HAL_LTDC_IRQHandler+0x38>
 800affc:	0769      	lsls	r1, r5, #29
 800affe:	d512      	bpl.n	800b026 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b002:	f022 0204 	bic.w	r2, r2, #4
 800b006:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b008:	2204      	movs	r2, #4
 800b00a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b00c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800b010:	f043 0301 	orr.w	r3, r3, #1
 800b014:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800b018:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b01a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b01e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b022:	f7ff ffe1 	bl	800afe8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b026:	07b2      	lsls	r2, r6, #30
 800b028:	d516      	bpl.n	800b058 <HAL_LTDC_IRQHandler+0x6a>
 800b02a:	07ab      	lsls	r3, r5, #30
 800b02c:	d514      	bpl.n	800b058 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b02e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b030:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b034:	f022 0202 	bic.w	r2, r2, #2
 800b038:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b03a:	2202      	movs	r2, #2
 800b03c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b03e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b042:	4313      	orrs	r3, r2
 800b044:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b048:	2304      	movs	r3, #4
 800b04a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b04e:	2300      	movs	r3, #0
 800b050:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b054:	f7ff ffc8 	bl	800afe8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b058:	07f0      	lsls	r0, r6, #31
 800b05a:	d510      	bpl.n	800b07e <HAL_LTDC_IRQHandler+0x90>
 800b05c:	07e9      	lsls	r1, r5, #31
 800b05e:	d50e      	bpl.n	800b07e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b060:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b062:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b06c:	2201      	movs	r2, #1
 800b06e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800b070:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b072:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b076:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b07a:	f7ff ffb6 	bl	800afea <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b07e:	0732      	lsls	r2, r6, #28
 800b080:	d511      	bpl.n	800b0a6 <HAL_LTDC_IRQHandler+0xb8>
 800b082:	072b      	lsls	r3, r5, #28
 800b084:	d50f      	bpl.n	800b0a6 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b086:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b088:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b08a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b08c:	f022 0208 	bic.w	r2, r2, #8
 800b090:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b092:	2208      	movs	r2, #8
 800b094:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b096:	2301      	movs	r3, #1
 800b098:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b09c:	2300      	movs	r3, #0
 800b09e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b0a2:	f7ff ffa3 	bl	800afec <HAL_LTDC_ReloadEventCallback>
}
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}

0800b0a8 <HAL_LTDC_ConfigLayer>:
{
 800b0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b0ac:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	f04f 0002 	mov.w	r0, #2
 800b0bc:	d01f      	beq.n	800b0fe <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0be:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800b0c0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0c4:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b0c6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0ca:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b0ce:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0d2:	3438      	adds	r4, #56	; 0x38
 800b0d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0e0:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4662      	mov	r2, ip
 800b0e6:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0e8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b0ea:	f7ff fe8a 	bl	800ae02 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b0ee:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b0f0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b0f2:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b0f6:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800b0fa:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800b0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b104 <HAL_LTDC_SetPitch>:
{
 800b104:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b106:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	f04f 0302 	mov.w	r3, #2
 800b110:	d02c      	beq.n	800b16c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b112:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b114:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b118:	fb04 0402 	mla	r4, r4, r2, r0
 800b11c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b11e:	b33c      	cbz	r4, 800b170 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b120:	2c01      	cmp	r4, #1
 800b122:	d027      	beq.n	800b174 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b124:	1ea5      	subs	r5, r4, #2
 800b126:	429d      	cmp	r5, r3
 800b128:	d902      	bls.n	800b130 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800b12a:	2c07      	cmp	r4, #7
 800b12c:	bf18      	it	ne
 800b12e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b130:	01d2      	lsls	r2, r2, #7
 800b132:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b134:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b136:	3284      	adds	r2, #132	; 0x84
 800b138:	4422      	add	r2, r4
 800b13a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800b13c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800b140:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 800b144:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b146:	4c0c      	ldr	r4, [pc, #48]	; (800b178 <HAL_LTDC_SetPitch+0x74>)
 800b148:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b14a:	f045 0501 	orr.w	r5, r5, #1
 800b14e:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b150:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800b152:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b156:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b160:	2301      	movs	r3, #1
 800b162:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800b166:	2300      	movs	r3, #0
 800b168:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b170:	2304      	movs	r3, #4
 800b172:	e7dd      	b.n	800b130 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b174:	2303      	movs	r3, #3
 800b176:	e7db      	b.n	800b130 <HAL_LTDC_SetPitch+0x2c>
 800b178:	40016800 	.word	0x40016800

0800b17c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b17c:	4b19      	ldr	r3, [pc, #100]	; (800b1e4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800b17e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b182:	4c19      	ldr	r4, [pc, #100]	; (800b1e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b184:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b188:	641a      	str	r2, [r3, #64]	; 0x40
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b19a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b19c:	f7fc fe3c 	bl	8007e18 <HAL_GetTick>
 800b1a0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	03da      	lsls	r2, r3, #15
 800b1a6:	d50c      	bpl.n	800b1c2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b1a8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1aa:	4d0f      	ldr	r5, [pc, #60]	; (800b1e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b1ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1b0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b1b2:	f7fc fe31 	bl	8007e18 <HAL_GetTick>
 800b1b6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1b8:	686b      	ldr	r3, [r5, #4]
 800b1ba:	039b      	lsls	r3, r3, #14
 800b1bc:	d50a      	bpl.n	800b1d4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e006      	b.n	800b1d0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b1c2:	f7fc fe29 	bl	8007e18 <HAL_GetTick>
 800b1c6:	1b40      	subs	r0, r0, r5
 800b1c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b1cc:	d9e9      	bls.n	800b1a2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800b1ce:	2003      	movs	r0, #3
}
 800b1d0:	b003      	add	sp, #12
 800b1d2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b1d4:	f7fc fe20 	bl	8007e18 <HAL_GetTick>
 800b1d8:	1b00      	subs	r0, r0, r4
 800b1da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b1de:	d9eb      	bls.n	800b1b8 <HAL_PWREx_EnableOverDrive+0x3c>
 800b1e0:	e7f5      	b.n	800b1ce <HAL_PWREx_EnableOverDrive+0x52>
 800b1e2:	bf00      	nop
 800b1e4:	40023800 	.word	0x40023800
 800b1e8:	40007000 	.word	0x40007000

0800b1ec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b1f0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800b1f2:	b136      	cbz	r6, 800b202 <QSPI_Config+0x16>
 800b1f4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800b1f8:	d003      	beq.n	800b202 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b1fa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b1fc:	6804      	ldr	r4, [r0, #0]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b202:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b206:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b20a:	f1b9 0f00 	cmp.w	r9, #0
 800b20e:	d04f      	beq.n	800b2b0 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b210:	694b      	ldr	r3, [r1, #20]
 800b212:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b216:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b218:	f8d1 a000 	ldr.w	sl, [r1]
 800b21c:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800b220:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800b224:	ea49 0902 	orr.w	r9, r9, r2
 800b228:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b22c:	b335      	cbz	r5, 800b27c <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b22e:	688b      	ldr	r3, [r1, #8]
 800b230:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b234:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b236:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b238:	b19f      	cbz	r7, 800b262 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b23a:	ea4a 0307 	orr.w	r3, sl, r7
 800b23e:	4323      	orrs	r3, r4
 800b240:	68cc      	ldr	r4, [r1, #12]
 800b242:	ea43 0308 	orr.w	r3, r3, r8
 800b246:	ea43 030e 	orr.w	r3, r3, lr
 800b24a:	4333      	orrs	r3, r6
 800b24c:	4323      	orrs	r3, r4
 800b24e:	ea43 030c 	orr.w	r3, r3, ip
 800b252:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b254:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b258:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b25a:	d00d      	beq.n	800b278 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b25c:	684b      	ldr	r3, [r1, #4]
 800b25e:	6183      	str	r3, [r0, #24]
 800b260:	e00a      	b.n	800b278 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b262:	ea4a 0304 	orr.w	r3, sl, r4
 800b266:	ea43 0308 	orr.w	r3, r3, r8
 800b26a:	ea43 030e 	orr.w	r3, r3, lr
 800b26e:	4333      	orrs	r3, r6
 800b270:	ea43 030c 	orr.w	r3, r3, ip
 800b274:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b276:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b27c:	b16f      	cbz	r7, 800b29a <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b27e:	ea4a 0307 	orr.w	r3, sl, r7
 800b282:	4323      	orrs	r3, r4
 800b284:	68cc      	ldr	r4, [r1, #12]
 800b286:	ea43 0308 	orr.w	r3, r3, r8
 800b28a:	ea43 030e 	orr.w	r3, r3, lr
 800b28e:	4323      	orrs	r3, r4
 800b290:	ea43 030c 	orr.w	r3, r3, ip
 800b294:	ea43 0309 	orr.w	r3, r3, r9
 800b298:	e7dc      	b.n	800b254 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b29a:	ea4a 0304 	orr.w	r3, sl, r4
 800b29e:	ea43 0308 	orr.w	r3, r3, r8
 800b2a2:	ea43 030e 	orr.w	r3, r3, lr
 800b2a6:	ea43 030c 	orr.w	r3, r3, ip
 800b2aa:	ea43 0309 	orr.w	r3, r3, r9
 800b2ae:	e7e2      	b.n	800b276 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b2b0:	b365      	cbz	r5, 800b30c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2b2:	6804      	ldr	r4, [r0, #0]
 800b2b4:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2b6:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2b8:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2ba:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2be:	694e      	ldr	r6, [r1, #20]
 800b2c0:	ea43 0502 	orr.w	r5, r3, r2
 800b2c4:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800b2c8:	04b6      	lsls	r6, r6, #18
 800b2ca:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2ce:	b1a7      	cbz	r7, 800b2fa <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2d0:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b2d2:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2d6:	ea40 0008 	orr.w	r0, r0, r8
 800b2da:	ea43 0300 	orr.w	r3, r3, r0
 800b2de:	68c8      	ldr	r0, [r1, #12]
 800b2e0:	ea43 030c 	orr.w	r3, r3, ip
 800b2e4:	ea43 0300 	orr.w	r3, r3, r0
 800b2e8:	ea43 0306 	orr.w	r3, r3, r6
 800b2ec:	ea43 0305 	orr.w	r3, r3, r5
 800b2f0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b2f2:	d0c1      	beq.n	800b278 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b2f4:	684b      	ldr	r3, [r1, #4]
 800b2f6:	61a3      	str	r3, [r4, #24]
 800b2f8:	e7be      	b.n	800b278 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2fa:	ea40 0008 	orr.w	r0, r0, r8
 800b2fe:	4303      	orrs	r3, r0
 800b300:	ea43 030c 	orr.w	r3, r3, ip
 800b304:	4333      	orrs	r3, r6
 800b306:	432b      	orrs	r3, r5
 800b308:	6163      	str	r3, [r4, #20]
 800b30a:	e7b5      	b.n	800b278 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b30c:	b17f      	cbz	r7, 800b32e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b30e:	ea46 0307 	orr.w	r3, r6, r7
 800b312:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800b314:	6800      	ldr	r0, [r0, #0]
 800b316:	4313      	orrs	r3, r2
 800b318:	4323      	orrs	r3, r4
 800b31a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800b31c:	4323      	orrs	r3, r4
 800b31e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800b320:	4323      	orrs	r3, r4
 800b322:	68cc      	ldr	r4, [r1, #12]
 800b324:	4323      	orrs	r3, r4
 800b326:	694c      	ldr	r4, [r1, #20]
 800b328:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b32c:	e792      	b.n	800b254 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b32e:	2e00      	cmp	r6, #0
 800b330:	d0a2      	beq.n	800b278 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b332:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b334:	6800      	ldr	r0, [r0, #0]
 800b336:	4333      	orrs	r3, r6
 800b338:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800b33a:	431a      	orrs	r2, r3
 800b33c:	694b      	ldr	r3, [r1, #20]
 800b33e:	4332      	orrs	r2, r6
 800b340:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800b342:	4332      	orrs	r2, r6
 800b344:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800b348:	6142      	str	r2, [r0, #20]
}
 800b34a:	e795      	b.n	800b278 <QSPI_Config+0x8c>

0800b34c <QSPI_WaitFlagStateUntilTimeout>:
{
 800b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b350:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b354:	4604      	mov	r4, r0
 800b356:	460e      	mov	r6, r1
 800b358:	4615      	mov	r5, r2
 800b35a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b35c:	6822      	ldr	r2, [r4, #0]
 800b35e:	6893      	ldr	r3, [r2, #8]
 800b360:	4233      	tst	r3, r6
 800b362:	bf14      	ite	ne
 800b364:	2301      	movne	r3, #1
 800b366:	2300      	moveq	r3, #0
 800b368:	42ab      	cmp	r3, r5
 800b36a:	d101      	bne.n	800b370 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800b36c:	2000      	movs	r0, #0
 800b36e:	e012      	b.n	800b396 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b370:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b374:	d0f3      	beq.n	800b35e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b376:	f7fc fd4f 	bl	8007e18 <HAL_GetTick>
 800b37a:	1bc0      	subs	r0, r0, r7
 800b37c:	4540      	cmp	r0, r8
 800b37e:	d802      	bhi.n	800b386 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800b380:	f1b8 0f00 	cmp.w	r8, #0
 800b384:	d1ea      	bne.n	800b35c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b386:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b388:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b38a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b38e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b390:	f043 0301 	orr.w	r3, r3, #1
 800b394:	6463      	str	r3, [r4, #68]	; 0x44
}
 800b396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b39c <HAL_QSPI_Init>:
{
 800b39c:	b530      	push	{r4, r5, lr}
 800b39e:	4604      	mov	r4, r0
 800b3a0:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800b3a2:	f7fc fd39 	bl	8007e18 <HAL_GetTick>
 800b3a6:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	d047      	beq.n	800b43c <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b3ac:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b3b0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800b3b4:	b94a      	cbnz	r2, 800b3ca <HAL_QSPI_Init+0x2e>
 800b3b6:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800b3b8:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800b3ba:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800b3be:	f7f9 fd71 	bl	8004ea4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800b3c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b3ca:	6820      	ldr	r0, [r4, #0]
 800b3cc:	68a1      	ldr	r1, [r4, #8]
 800b3ce:	6802      	ldr	r2, [r0, #0]
 800b3d0:	3901      	subs	r1, #1
 800b3d2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800b3d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b3da:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b3dc:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b3de:	4620      	mov	r0, r4
 800b3e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b3e2:	9200      	str	r2, [sp, #0]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f7ff ffb1 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800b3ea:	bb10      	cbnz	r0, 800b432 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b3ec:	6822      	ldr	r2, [r4, #0]
 800b3ee:	69e5      	ldr	r5, [r4, #28]
 800b3f0:	68e3      	ldr	r3, [r4, #12]
 800b3f2:	6811      	ldr	r1, [r2, #0]
 800b3f4:	432b      	orrs	r3, r5
 800b3f6:	6a25      	ldr	r5, [r4, #32]
 800b3f8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800b3fc:	432b      	orrs	r3, r5
 800b3fe:	6865      	ldr	r5, [r4, #4]
 800b400:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800b404:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b408:	430b      	orrs	r3, r1
 800b40a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b40c:	6855      	ldr	r5, [r2, #4]
 800b40e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800b412:	430b      	orrs	r3, r1
 800b414:	6921      	ldr	r1, [r4, #16]
 800b416:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b41a:	4909      	ldr	r1, [pc, #36]	; (800b440 <HAL_QSPI_Init+0xa4>)
 800b41c:	4029      	ands	r1, r5
 800b41e:	430b      	orrs	r3, r1
 800b420:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800b422:	6813      	ldr	r3, [r2, #0]
 800b424:	f043 0301 	orr.w	r3, r3, #1
 800b428:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800b42a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b42c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800b42e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b432:	2300      	movs	r3, #0
 800b434:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b438:	b005      	add	sp, #20
 800b43a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b43c:	2001      	movs	r0, #1
 800b43e:	e7fb      	b.n	800b438 <HAL_QSPI_Init+0x9c>
 800b440:	ffe0f8fe 	.word	0xffe0f8fe

0800b444 <HAL_QSPI_Command>:
{
 800b444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b448:	4604      	mov	r4, r0
 800b44a:	b085      	sub	sp, #20
 800b44c:	4617      	mov	r7, r2
 800b44e:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800b450:	f7fc fce2 	bl	8007e18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b454:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b458:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b45a:	2a01      	cmp	r2, #1
 800b45c:	d033      	beq.n	800b4c6 <HAL_QSPI_Command+0x82>
 800b45e:	2201      	movs	r2, #1
 800b460:	2602      	movs	r6, #2
 800b462:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b466:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b46a:	2a01      	cmp	r2, #1
 800b46c:	fa5f f882 	uxtb.w	r8, r2
 800b470:	d127      	bne.n	800b4c2 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b472:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b474:	9003      	str	r0, [sp, #12]
 800b476:	2120      	movs	r1, #32
 800b478:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b47a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b47c:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b47e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b482:	f7ff ff63 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b486:	4605      	mov	r5, r0
 800b488:	b9a0      	cbnz	r0, 800b4b4 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b48a:	4602      	mov	r2, r0
 800b48c:	4649      	mov	r1, r9
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff feac 	bl	800b1ec <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800b494:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	b94a      	cbnz	r2, 800b4b0 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b49c:	4642      	mov	r2, r8
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	9700      	str	r7, [sp, #0]
 800b4a4:	f7ff ff52 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	b918      	cbnz	r0, 800b4b4 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b4b0:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	b005      	add	sp, #20
 800b4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800b4c2:	4635      	mov	r5, r6
 800b4c4:	e7f6      	b.n	800b4b4 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800b4c6:	2502      	movs	r5, #2
 800b4c8:	e7f7      	b.n	800b4ba <HAL_QSPI_Command+0x76>

0800b4ca <HAL_QSPI_Transmit>:
{
 800b4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b4d4:	f7fc fca0 	bl	8007e18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b4d8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b4dc:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b4de:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800b4e0:	2a01      	cmp	r2, #1
 800b4e2:	d049      	beq.n	800b578 <HAL_QSPI_Transmit+0xae>
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b4ea:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b4ee:	2a01      	cmp	r2, #1
 800b4f0:	b2d0      	uxtb	r0, r2
 800b4f2:	d13f      	bne.n	800b574 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800b4f8:	2f00      	cmp	r7, #0
 800b4fa:	d036      	beq.n	800b56a <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b4fc:	2212      	movs	r2, #18
 800b4fe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b502:	692a      	ldr	r2, [r5, #16]
 800b504:	3201      	adds	r2, #1
 800b506:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b508:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800b50a:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b50c:	3201      	adds	r2, #1
 800b50e:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b510:	696a      	ldr	r2, [r5, #20]
 800b512:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b516:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800b518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b51a:	b98a      	cbnz	r2, 800b540 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b51c:	2201      	movs	r2, #1
 800b51e:	2102      	movs	r1, #2
 800b520:	4620      	mov	r0, r4
 800b522:	9600      	str	r6, [sp, #0]
 800b524:	f7ff ff12 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b528:	b910      	cbnz	r0, 800b530 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	2202      	movs	r2, #2
 800b52e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b530:	2301      	movs	r3, #1
 800b532:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b536:	2300      	movs	r3, #0
 800b538:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b53c:	b005      	add	sp, #20
 800b53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b540:	2201      	movs	r2, #1
 800b542:	2104      	movs	r1, #4
 800b544:	4620      	mov	r0, r4
 800b546:	9600      	str	r6, [sp, #0]
 800b548:	9303      	str	r3, [sp, #12]
 800b54a:	f7ff feff 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b54e:	2800      	cmp	r0, #0
 800b550:	d1ee      	bne.n	800b530 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b552:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800b554:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b556:	7812      	ldrb	r2, [r2, #0]
 800b558:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800b55c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b55e:	3201      	adds	r2, #1
 800b560:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800b562:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b564:	3a01      	subs	r2, #1
 800b566:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b568:	e7d6      	b.n	800b518 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b56a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b56c:	f043 0308 	orr.w	r3, r3, #8
 800b570:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800b572:	e7e0      	b.n	800b536 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800b574:	2002      	movs	r0, #2
 800b576:	e7de      	b.n	800b536 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800b578:	2002      	movs	r0, #2
 800b57a:	e7df      	b.n	800b53c <HAL_QSPI_Transmit+0x72>

0800b57c <HAL_QSPI_Receive>:
{
 800b57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b57e:	4604      	mov	r4, r0
 800b580:	b085      	sub	sp, #20
 800b582:	4616      	mov	r6, r2
 800b584:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b586:	f7fc fc47 	bl	8007e18 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b58a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b58c:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b58e:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800b592:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800b596:	2a01      	cmp	r2, #1
 800b598:	d04d      	beq.n	800b636 <HAL_QSPI_Receive+0xba>
 800b59a:	2201      	movs	r2, #1
 800b59c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5a0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b5a4:	2a01      	cmp	r2, #1
 800b5a6:	b2d0      	uxtb	r0, r2
 800b5a8:	d143      	bne.n	800b632 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800b5ae:	2f00      	cmp	r7, #0
 800b5b0:	d03a      	beq.n	800b628 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b5b2:	2222      	movs	r2, #34	; 0x22
 800b5b4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5b8:	692a      	ldr	r2, [r5, #16]
 800b5ba:	3201      	adds	r2, #1
 800b5bc:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5be:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800b5c0:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5c2:	3201      	adds	r2, #1
 800b5c4:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b5c6:	6969      	ldr	r1, [r5, #20]
 800b5c8:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800b5cc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800b5d0:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b5d2:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800b5d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b5d8:	b98a      	cbnz	r2, 800b5fe <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b5da:	2201      	movs	r2, #1
 800b5dc:	2102      	movs	r1, #2
 800b5de:	4620      	mov	r0, r4
 800b5e0:	9600      	str	r6, [sp, #0]
 800b5e2:	f7ff feb3 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800b5e6:	b910      	cbnz	r0, 800b5ee <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b5fa:	b005      	add	sp, #20
 800b5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b5fe:	2201      	movs	r2, #1
 800b600:	2106      	movs	r1, #6
 800b602:	4620      	mov	r0, r4
 800b604:	9600      	str	r6, [sp, #0]
 800b606:	9303      	str	r3, [sp, #12]
 800b608:	f7ff fea0 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d1ee      	bne.n	800b5ee <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b610:	f895 1020 	ldrb.w	r1, [r5, #32]
 800b614:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800b616:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b618:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800b61a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b61c:	3201      	adds	r2, #1
 800b61e:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800b620:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b622:	3a01      	subs	r2, #1
 800b624:	63a2      	str	r2, [r4, #56]	; 0x38
 800b626:	e7d6      	b.n	800b5d6 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b628:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b62a:	f043 0308 	orr.w	r3, r3, #8
 800b62e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800b630:	e7e0      	b.n	800b5f4 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800b632:	2002      	movs	r0, #2
 800b634:	e7de      	b.n	800b5f4 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800b636:	2002      	movs	r0, #2
 800b638:	e7df      	b.n	800b5fa <HAL_QSPI_Receive+0x7e>

0800b63a <HAL_QSPI_AutoPolling>:
{
 800b63a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b63e:	4604      	mov	r4, r0
 800b640:	4615      	mov	r5, r2
 800b642:	461e      	mov	r6, r3
 800b644:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800b646:	f7fc fbe7 	bl	8007e18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b64a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b64e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b650:	2a01      	cmp	r2, #1
 800b652:	d040      	beq.n	800b6d6 <HAL_QSPI_AutoPolling+0x9c>
 800b654:	2201      	movs	r2, #1
 800b656:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b65a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b65e:	2a01      	cmp	r2, #1
 800b660:	b2d7      	uxtb	r7, r2
 800b662:	d136      	bne.n	800b6d2 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b664:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b666:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b668:	9003      	str	r0, [sp, #12]
 800b66a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b66c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b66e:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b670:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b674:	2120      	movs	r1, #32
 800b676:	f7ff fe69 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b67a:	bb20      	cbnz	r0, 800b6c6 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b680:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b682:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b684:	686a      	ldr	r2, [r5, #4]
 800b686:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b688:	68aa      	ldr	r2, [r5, #8]
 800b68a:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b68c:	680a      	ldr	r2, [r1, #0]
 800b68e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b692:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b694:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b696:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b69a:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b69c:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800b69e:	68ea      	ldr	r2, [r5, #12]
 800b6a0:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b6a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b6a8:	f7ff fda0 	bl	800b1ec <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	2108      	movs	r1, #8
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	9600      	str	r6, [sp, #0]
 800b6b6:	f7ff fe49 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b6ba:	b920      	cbnz	r0, 800b6c6 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	2208      	movs	r2, #8
 800b6c0:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b6c2:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b6cc:	b004      	add	sp, #16
 800b6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800b6d2:	2002      	movs	r0, #2
 800b6d4:	e7f7      	b.n	800b6c6 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800b6d6:	2002      	movs	r0, #2
 800b6d8:	e7f8      	b.n	800b6cc <HAL_QSPI_AutoPolling+0x92>

0800b6da <HAL_QSPI_MemoryMapped>:
{
 800b6da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4616      	mov	r6, r2
 800b6e0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b6e2:	f7fc fb99 	bl	8007e18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b6e6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800b6ea:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b6ec:	2a01      	cmp	r2, #1
 800b6ee:	d033      	beq.n	800b758 <HAL_QSPI_MemoryMapped+0x7e>
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b6f6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b6fa:	2a01      	cmp	r2, #1
 800b6fc:	d12a      	bne.n	800b754 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b6fe:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b700:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b702:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b704:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b706:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b70a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b70c:	9100      	str	r1, [sp, #0]
 800b70e:	2120      	movs	r1, #32
 800b710:	f7ff fe1c 	bl	800b34c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b714:	4605      	mov	r5, r0
 800b716:	b9b8      	cbnz	r0, 800b748 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	6872      	ldr	r2, [r6, #4]
 800b71c:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b71e:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b720:	f020 0008 	bic.w	r0, r0, #8
 800b724:	ea40 0002 	orr.w	r0, r0, r2
 800b728:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b72a:	d107      	bne.n	800b73c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b72c:	6832      	ldr	r2, [r6, #0]
 800b72e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b730:	2210      	movs	r2, #16
 800b732:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b73a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b73c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b740:	4639      	mov	r1, r7
 800b742:	4620      	mov	r0, r4
 800b744:	f7ff fd52 	bl	800b1ec <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800b748:	2300      	movs	r3, #0
 800b74a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b74e:	4628      	mov	r0, r5
 800b750:	b003      	add	sp, #12
 800b752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800b754:	2502      	movs	r5, #2
 800b756:	e7f7      	b.n	800b748 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800b758:	2502      	movs	r5, #2
 800b75a:	e7f8      	b.n	800b74e <HAL_QSPI_MemoryMapped+0x74>

0800b75c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b75c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b760:	4604      	mov	r4, r0
 800b762:	b340      	cbz	r0, 800b7b6 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b764:	6803      	ldr	r3, [r0, #0]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d410      	bmi.n	800b78c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	079f      	lsls	r7, r3, #30
 800b76e:	d464      	bmi.n	800b83a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	0719      	lsls	r1, r3, #28
 800b774:	f100 80aa 	bmi.w	800b8cc <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	075a      	lsls	r2, r3, #29
 800b77c:	f100 80cb 	bmi.w	800b916 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b780:	69a2      	ldr	r2, [r4, #24]
 800b782:	2a00      	cmp	r2, #0
 800b784:	f040 8134 	bne.w	800b9f0 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800b788:	2000      	movs	r0, #0
 800b78a:	e02b      	b.n	800b7e4 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b78c:	4b96      	ldr	r3, [pc, #600]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	f002 020c 	and.w	r2, r2, #12
 800b794:	2a04      	cmp	r2, #4
 800b796:	d007      	beq.n	800b7a8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b798:	689a      	ldr	r2, [r3, #8]
 800b79a:	f002 020c 	and.w	r2, r2, #12
 800b79e:	2a08      	cmp	r2, #8
 800b7a0:	d10b      	bne.n	800b7ba <HAL_RCC_OscConfig+0x5e>
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	0256      	lsls	r6, r2, #9
 800b7a6:	d508      	bpl.n	800b7ba <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7a8:	4b8f      	ldr	r3, [pc, #572]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	039d      	lsls	r5, r3, #14
 800b7ae:	d5dc      	bpl.n	800b76a <HAL_RCC_OscConfig+0xe>
 800b7b0:	6863      	ldr	r3, [r4, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1d9      	bne.n	800b76a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800b7b6:	2001      	movs	r0, #1
 800b7b8:	e014      	b.n	800b7e4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7ba:	6862      	ldr	r2, [r4, #4]
 800b7bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b7c0:	d113      	bne.n	800b7ea <HAL_RCC_OscConfig+0x8e>
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b7c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b7ca:	f7fc fb25 	bl	8007e18 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7ce:	4e86      	ldr	r6, [pc, #536]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800b7d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7d2:	6833      	ldr	r3, [r6, #0]
 800b7d4:	0398      	lsls	r0, r3, #14
 800b7d6:	d4c8      	bmi.n	800b76a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7d8:	f7fc fb1e 	bl	8007e18 <HAL_GetTick>
 800b7dc:	1b40      	subs	r0, r0, r5
 800b7de:	2864      	cmp	r0, #100	; 0x64
 800b7e0:	d9f7      	bls.n	800b7d2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800b7e2:	2003      	movs	r0, #3
}
 800b7e4:	b002      	add	sp, #8
 800b7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7ea:	4d7f      	ldr	r5, [pc, #508]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b992      	cbnz	r2, 800b816 <HAL_RCC_OscConfig+0xba>
 800b7f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	682b      	ldr	r3, [r5, #0]
 800b7f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b7fe:	f7fc fb0b 	bl	8007e18 <HAL_GetTick>
 800b802:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	0399      	lsls	r1, r3, #14
 800b808:	d5af      	bpl.n	800b76a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b80a:	f7fc fb05 	bl	8007e18 <HAL_GetTick>
 800b80e:	1b80      	subs	r0, r0, r6
 800b810:	2864      	cmp	r0, #100	; 0x64
 800b812:	d9f7      	bls.n	800b804 <HAL_RCC_OscConfig+0xa8>
 800b814:	e7e5      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b816:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800b81a:	d107      	bne.n	800b82c <HAL_RCC_OscConfig+0xd0>
 800b81c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b828:	602b      	str	r3, [r5, #0]
 800b82a:	e7ce      	b.n	800b7ca <HAL_RCC_OscConfig+0x6e>
 800b82c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	682b      	ldr	r3, [r5, #0]
 800b834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b838:	e7f6      	b.n	800b828 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b83a:	4b6b      	ldr	r3, [pc, #428]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	f012 0f0c 	tst.w	r2, #12
 800b842:	d007      	beq.n	800b854 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b844:	689a      	ldr	r2, [r3, #8]
 800b846:	f002 020c 	and.w	r2, r2, #12
 800b84a:	2a08      	cmp	r2, #8
 800b84c:	d111      	bne.n	800b872 <HAL_RCC_OscConfig+0x116>
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	0252      	lsls	r2, r2, #9
 800b852:	d40e      	bmi.n	800b872 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b854:	4a64      	ldr	r2, [pc, #400]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b856:	6813      	ldr	r3, [r2, #0]
 800b858:	079b      	lsls	r3, r3, #30
 800b85a:	d502      	bpl.n	800b862 <HAL_RCC_OscConfig+0x106>
 800b85c:	68e3      	ldr	r3, [r4, #12]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d1a9      	bne.n	800b7b6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b862:	6813      	ldr	r3, [r2, #0]
 800b864:	6921      	ldr	r1, [r4, #16]
 800b866:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b86a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b86e:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b870:	e77e      	b.n	800b770 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b872:	68e2      	ldr	r2, [r4, #12]
 800b874:	b1c2      	cbz	r2, 800b8a8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800b876:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b878:	4d5b      	ldr	r5, [pc, #364]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800b87a:	f042 0201 	orr.w	r2, r2, #1
 800b87e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b880:	f7fc faca 	bl	8007e18 <HAL_GetTick>
 800b884:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	079f      	lsls	r7, r3, #30
 800b88a:	d507      	bpl.n	800b89c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	6922      	ldr	r2, [r4, #16]
 800b890:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	e769      	b.n	800b770 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b89c:	f7fc fabc 	bl	8007e18 <HAL_GetTick>
 800b8a0:	1b80      	subs	r0, r0, r6
 800b8a2:	2802      	cmp	r0, #2
 800b8a4:	d9ef      	bls.n	800b886 <HAL_RCC_OscConfig+0x12a>
 800b8a6:	e79c      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800b8a8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8aa:	4e4f      	ldr	r6, [pc, #316]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 800b8ac:	f022 0201 	bic.w	r2, r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b8b2:	f7fc fab1 	bl	8007e18 <HAL_GetTick>
 800b8b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8b8:	6833      	ldr	r3, [r6, #0]
 800b8ba:	0798      	lsls	r0, r3, #30
 800b8bc:	f57f af58 	bpl.w	800b770 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8c0:	f7fc faaa 	bl	8007e18 <HAL_GetTick>
 800b8c4:	1b40      	subs	r0, r0, r5
 800b8c6:	2802      	cmp	r0, #2
 800b8c8:	d9f6      	bls.n	800b8b8 <HAL_RCC_OscConfig+0x15c>
 800b8ca:	e78a      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b8cc:	6963      	ldr	r3, [r4, #20]
 800b8ce:	4d46      	ldr	r5, [pc, #280]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b8d0:	b183      	cbz	r3, 800b8f4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800b8d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b8d4:	f043 0301 	orr.w	r3, r3, #1
 800b8d8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b8da:	f7fc fa9d 	bl	8007e18 <HAL_GetTick>
 800b8de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b8e2:	079b      	lsls	r3, r3, #30
 800b8e4:	f53f af48 	bmi.w	800b778 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b8e8:	f7fc fa96 	bl	8007e18 <HAL_GetTick>
 800b8ec:	1b80      	subs	r0, r0, r6
 800b8ee:	2802      	cmp	r0, #2
 800b8f0:	d9f6      	bls.n	800b8e0 <HAL_RCC_OscConfig+0x184>
 800b8f2:	e776      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800b8f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b8f6:	f023 0301 	bic.w	r3, r3, #1
 800b8fa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b8fc:	f7fc fa8c 	bl	8007e18 <HAL_GetTick>
 800b900:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b902:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b904:	079f      	lsls	r7, r3, #30
 800b906:	f57f af37 	bpl.w	800b778 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b90a:	f7fc fa85 	bl	8007e18 <HAL_GetTick>
 800b90e:	1b80      	subs	r0, r0, r6
 800b910:	2802      	cmp	r0, #2
 800b912:	d9f6      	bls.n	800b902 <HAL_RCC_OscConfig+0x1a6>
 800b914:	e765      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b916:	4b34      	ldr	r3, [pc, #208]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b91a:	00d0      	lsls	r0, r2, #3
 800b91c:	d427      	bmi.n	800b96e <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b91e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800b920:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800b922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b926:	641a      	str	r2, [r3, #64]	; 0x40
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b932:	4d2e      	ldr	r5, [pc, #184]	; (800b9ec <HAL_RCC_OscConfig+0x290>)
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	05d9      	lsls	r1, r3, #23
 800b938:	d51b      	bpl.n	800b972 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	4d2a      	ldr	r5, [pc, #168]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d127      	bne.n	800b992 <HAL_RCC_OscConfig+0x236>
 800b942:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b944:	f043 0301 	orr.w	r3, r3, #1
 800b948:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b94a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b94e:	f7fc fa63 	bl	8007e18 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b952:	4e25      	ldr	r6, [pc, #148]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800b954:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b956:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b958:	079b      	lsls	r3, r3, #30
 800b95a:	d53f      	bpl.n	800b9dc <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	f43f af0f 	beq.w	800b780 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b962:	4a21      	ldr	r2, [pc, #132]	; (800b9e8 <HAL_RCC_OscConfig+0x28c>)
 800b964:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b96a:	6413      	str	r3, [r2, #64]	; 0x40
 800b96c:	e708      	b.n	800b780 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800b96e:	2700      	movs	r7, #0
 800b970:	e7df      	b.n	800b932 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800b972:	682b      	ldr	r3, [r5, #0]
 800b974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b978:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b97a:	f7fc fa4d 	bl	8007e18 <HAL_GetTick>
 800b97e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	05da      	lsls	r2, r3, #23
 800b984:	d4d9      	bmi.n	800b93a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b986:	f7fc fa47 	bl	8007e18 <HAL_GetTick>
 800b98a:	1b80      	subs	r0, r0, r6
 800b98c:	2864      	cmp	r0, #100	; 0x64
 800b98e:	d9f7      	bls.n	800b980 <HAL_RCC_OscConfig+0x224>
 800b990:	e727      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b992:	b9ab      	cbnz	r3, 800b9c0 <HAL_RCC_OscConfig+0x264>
 800b994:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b996:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b99a:	f023 0301 	bic.w	r3, r3, #1
 800b99e:	672b      	str	r3, [r5, #112]	; 0x70
 800b9a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b9a2:	f023 0304 	bic.w	r3, r3, #4
 800b9a6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b9a8:	f7fc fa36 	bl	8007e18 <HAL_GetTick>
 800b9ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b9b0:	0798      	lsls	r0, r3, #30
 800b9b2:	d5d3      	bpl.n	800b95c <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9b4:	f7fc fa30 	bl	8007e18 <HAL_GetTick>
 800b9b8:	1b80      	subs	r0, r0, r6
 800b9ba:	4540      	cmp	r0, r8
 800b9bc:	d9f7      	bls.n	800b9ae <HAL_RCC_OscConfig+0x252>
 800b9be:	e710      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9c0:	2b05      	cmp	r3, #5
 800b9c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b9c4:	d103      	bne.n	800b9ce <HAL_RCC_OscConfig+0x272>
 800b9c6:	f043 0304 	orr.w	r3, r3, #4
 800b9ca:	672b      	str	r3, [r5, #112]	; 0x70
 800b9cc:	e7b9      	b.n	800b942 <HAL_RCC_OscConfig+0x1e6>
 800b9ce:	f023 0301 	bic.w	r3, r3, #1
 800b9d2:	672b      	str	r3, [r5, #112]	; 0x70
 800b9d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b9d6:	f023 0304 	bic.w	r3, r3, #4
 800b9da:	e7b5      	b.n	800b948 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9dc:	f7fc fa1c 	bl	8007e18 <HAL_GetTick>
 800b9e0:	1b40      	subs	r0, r0, r5
 800b9e2:	4540      	cmp	r0, r8
 800b9e4:	d9b7      	bls.n	800b956 <HAL_RCC_OscConfig+0x1fa>
 800b9e6:	e6fc      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
 800b9e8:	40023800 	.word	0x40023800
 800b9ec:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b9f0:	4d3c      	ldr	r5, [pc, #240]	; (800bae4 <HAL_RCC_OscConfig+0x388>)
 800b9f2:	68ab      	ldr	r3, [r5, #8]
 800b9f4:	f003 030c 	and.w	r3, r3, #12
 800b9f8:	2b08      	cmp	r3, #8
 800b9fa:	d042      	beq.n	800ba82 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800b9fc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b9fe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800ba00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba04:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba06:	d12f      	bne.n	800ba68 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800ba08:	f7fc fa06 	bl	8007e18 <HAL_GetTick>
 800ba0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	0199      	lsls	r1, r3, #6
 800ba12:	d423      	bmi.n	800ba5c <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba14:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ba1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ba20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ba22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ba28:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800ba2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ba2e:	0852      	lsrs	r2, r2, #1
 800ba30:	3a01      	subs	r2, #1
 800ba32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba36:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ba40:	f7fc f9ea 	bl	8007e18 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba44:	4d27      	ldr	r5, [pc, #156]	; (800bae4 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 800ba46:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	019a      	lsls	r2, r3, #6
 800ba4c:	f53f ae9c 	bmi.w	800b788 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba50:	f7fc f9e2 	bl	8007e18 <HAL_GetTick>
 800ba54:	1b00      	subs	r0, r0, r4
 800ba56:	2802      	cmp	r0, #2
 800ba58:	d9f6      	bls.n	800ba48 <HAL_RCC_OscConfig+0x2ec>
 800ba5a:	e6c2      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba5c:	f7fc f9dc 	bl	8007e18 <HAL_GetTick>
 800ba60:	1b80      	subs	r0, r0, r6
 800ba62:	2802      	cmp	r0, #2
 800ba64:	d9d3      	bls.n	800ba0e <HAL_RCC_OscConfig+0x2b2>
 800ba66:	e6bc      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800ba68:	f7fc f9d6 	bl	8007e18 <HAL_GetTick>
 800ba6c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	019b      	lsls	r3, r3, #6
 800ba72:	f57f ae89 	bpl.w	800b788 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba76:	f7fc f9cf 	bl	8007e18 <HAL_GetTick>
 800ba7a:	1b00      	subs	r0, r0, r4
 800ba7c:	2802      	cmp	r0, #2
 800ba7e:	d9f6      	bls.n	800ba6e <HAL_RCC_OscConfig+0x312>
 800ba80:	e6af      	b.n	800b7e2 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba82:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800ba84:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba86:	f43f ae96 	beq.w	800b7b6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba8e:	69e1      	ldr	r1, [r4, #28]
 800ba90:	428a      	cmp	r2, r1
 800ba92:	f47f ae90 	bne.w	800b7b6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba9a:	6a21      	ldr	r1, [r4, #32]
 800ba9c:	428a      	cmp	r2, r1
 800ba9e:	f47f ae8a 	bne.w	800b7b6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800baa2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800baa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800baa8:	401a      	ands	r2, r3
 800baaa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800baae:	f47f ae82 	bne.w	800b7b6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bab2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bab4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800bab8:	0852      	lsrs	r2, r2, #1
 800baba:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800babc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800bac0:	f47f ae79 	bne.w	800b7b6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bac8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800baca:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800bace:	f47f ae72 	bne.w	800b7b6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bad2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bad6:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bad8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800badc:	f43f ae54 	beq.w	800b788 <HAL_RCC_OscConfig+0x2c>
 800bae0:	e669      	b.n	800b7b6 <HAL_RCC_OscConfig+0x5a>
 800bae2:	bf00      	nop
 800bae4:	40023800 	.word	0x40023800

0800bae8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bae8:	4913      	ldr	r1, [pc, #76]	; (800bb38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800baea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800baec:	688b      	ldr	r3, [r1, #8]
 800baee:	f003 030c 	and.w	r3, r3, #12
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d01b      	beq.n	800bb2e <HAL_RCC_GetSysClockFreq+0x46>
 800baf6:	2b08      	cmp	r3, #8
 800baf8:	d11b      	bne.n	800bb32 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bafa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bafc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bafe:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bb04:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800bb0c:	bf1a      	itte	ne
 800bb0e:	480b      	ldrne	r0, [pc, #44]	; (800bb3c <HAL_RCC_GetSysClockFreq+0x54>)
 800bb10:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb12:	480b      	ldreq	r0, [pc, #44]	; (800bb40 <HAL_RCC_GetSysClockFreq+0x58>)
 800bb14:	fba1 0100 	umull	r0, r1, r1, r0
 800bb18:	f7f4 fc32 	bl	8000380 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bb1c:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <HAL_RCC_GetSysClockFreq+0x50>)
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800bb24:	3301      	adds	r3, #1
 800bb26:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800bb28:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800bb2c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb2e:	4803      	ldr	r0, [pc, #12]	; (800bb3c <HAL_RCC_GetSysClockFreq+0x54>)
 800bb30:	e7fc      	b.n	800bb2c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800bb32:	4803      	ldr	r0, [pc, #12]	; (800bb40 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800bb34:	e7fa      	b.n	800bb2c <HAL_RCC_GetSysClockFreq+0x44>
 800bb36:	bf00      	nop
 800bb38:	40023800 	.word	0x40023800
 800bb3c:	017d7840 	.word	0x017d7840
 800bb40:	00f42400 	.word	0x00f42400

0800bb44 <HAL_RCC_ClockConfig>:
{
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	b910      	cbnz	r0, 800bb54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800bb4e:	2001      	movs	r0, #1
}
 800bb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb54:	4a46      	ldr	r2, [pc, #280]	; (800bc70 <HAL_RCC_ClockConfig+0x12c>)
 800bb56:	6813      	ldr	r3, [r2, #0]
 800bb58:	f003 030f 	and.w	r3, r3, #15
 800bb5c:	428b      	cmp	r3, r1
 800bb5e:	d328      	bcc.n	800bbb2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb60:	6822      	ldr	r2, [r4, #0]
 800bb62:	0797      	lsls	r7, r2, #30
 800bb64:	d430      	bmi.n	800bbc8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb66:	07d0      	lsls	r0, r2, #31
 800bb68:	d444      	bmi.n	800bbf4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb6a:	4a41      	ldr	r2, [pc, #260]	; (800bc70 <HAL_RCC_ClockConfig+0x12c>)
 800bb6c:	6813      	ldr	r3, [r2, #0]
 800bb6e:	f003 030f 	and.w	r3, r3, #15
 800bb72:	42ab      	cmp	r3, r5
 800bb74:	d867      	bhi.n	800bc46 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb76:	6822      	ldr	r2, [r4, #0]
 800bb78:	0751      	lsls	r1, r2, #29
 800bb7a:	d470      	bmi.n	800bc5e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb7c:	0713      	lsls	r3, r2, #28
 800bb7e:	d507      	bpl.n	800bb90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bb80:	4a3c      	ldr	r2, [pc, #240]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
 800bb82:	6921      	ldr	r1, [r4, #16]
 800bb84:	6893      	ldr	r3, [r2, #8]
 800bb86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bb8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bb8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb90:	f7ff ffaa 	bl	800bae8 <HAL_RCC_GetSysClockFreq>
 800bb94:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
 800bb96:	4a38      	ldr	r2, [pc, #224]	; (800bc78 <HAL_RCC_ClockConfig+0x134>)
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bb9e:	5cd3      	ldrb	r3, [r2, r3]
 800bba0:	40d8      	lsrs	r0, r3
 800bba2:	4b36      	ldr	r3, [pc, #216]	; (800bc7c <HAL_RCC_ClockConfig+0x138>)
 800bba4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800bba6:	4b36      	ldr	r3, [pc, #216]	; (800bc80 <HAL_RCC_ClockConfig+0x13c>)
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	f7f9 faad 	bl	8005108 <HAL_InitTick>
  return HAL_OK;
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e7ce      	b.n	800bb50 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbb2:	6813      	ldr	r3, [r2, #0]
 800bbb4:	f023 030f 	bic.w	r3, r3, #15
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbbc:	6813      	ldr	r3, [r2, #0]
 800bbbe:	f003 030f 	and.w	r3, r3, #15
 800bbc2:	428b      	cmp	r3, r1
 800bbc4:	d1c3      	bne.n	800bb4e <HAL_RCC_ClockConfig+0xa>
 800bbc6:	e7cb      	b.n	800bb60 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbc8:	f012 0f04 	tst.w	r2, #4
 800bbcc:	4b29      	ldr	r3, [pc, #164]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
 800bbce:	d003      	beq.n	800bbd8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbd0:	6899      	ldr	r1, [r3, #8]
 800bbd2:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800bbd6:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbd8:	0716      	lsls	r6, r2, #28
 800bbda:	d503      	bpl.n	800bbe4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bbdc:	6899      	ldr	r1, [r3, #8]
 800bbde:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800bbe2:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbe4:	4923      	ldr	r1, [pc, #140]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
 800bbe6:	68a0      	ldr	r0, [r4, #8]
 800bbe8:	688b      	ldr	r3, [r1, #8]
 800bbea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbee:	4303      	orrs	r3, r0
 800bbf0:	608b      	str	r3, [r1, #8]
 800bbf2:	e7b8      	b.n	800bb66 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbf4:	6861      	ldr	r1, [r4, #4]
 800bbf6:	4b1f      	ldr	r3, [pc, #124]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
 800bbf8:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbfa:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbfc:	d11b      	bne.n	800bc36 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbfe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc02:	d0a4      	beq.n	800bb4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc04:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc06:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc0a:	4f1a      	ldr	r7, [pc, #104]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc0c:	f022 0203 	bic.w	r2, r2, #3
 800bc10:	430a      	orrs	r2, r1
 800bc12:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800bc14:	f7fc f900 	bl	8007e18 <HAL_GetTick>
 800bc18:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	6862      	ldr	r2, [r4, #4]
 800bc1e:	f003 030c 	and.w	r3, r3, #12
 800bc22:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bc26:	d0a0      	beq.n	800bb6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc28:	f7fc f8f6 	bl	8007e18 <HAL_GetTick>
 800bc2c:	1b80      	subs	r0, r0, r6
 800bc2e:	4540      	cmp	r0, r8
 800bc30:	d9f3      	bls.n	800bc1a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800bc32:	2003      	movs	r0, #3
 800bc34:	e78c      	b.n	800bb50 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc36:	2902      	cmp	r1, #2
 800bc38:	d102      	bne.n	800bc40 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc3a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800bc3e:	e7e0      	b.n	800bc02 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc40:	f012 0f02 	tst.w	r2, #2
 800bc44:	e7dd      	b.n	800bc02 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc46:	6813      	ldr	r3, [r2, #0]
 800bc48:	f023 030f 	bic.w	r3, r3, #15
 800bc4c:	432b      	orrs	r3, r5
 800bc4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc50:	6813      	ldr	r3, [r2, #0]
 800bc52:	f003 030f 	and.w	r3, r3, #15
 800bc56:	42ab      	cmp	r3, r5
 800bc58:	f47f af79 	bne.w	800bb4e <HAL_RCC_ClockConfig+0xa>
 800bc5c:	e78b      	b.n	800bb76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc5e:	4905      	ldr	r1, [pc, #20]	; (800bc74 <HAL_RCC_ClockConfig+0x130>)
 800bc60:	68e0      	ldr	r0, [r4, #12]
 800bc62:	688b      	ldr	r3, [r1, #8]
 800bc64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800bc68:	4303      	orrs	r3, r0
 800bc6a:	608b      	str	r3, [r1, #8]
 800bc6c:	e786      	b.n	800bb7c <HAL_RCC_ClockConfig+0x38>
 800bc6e:	bf00      	nop
 800bc70:	40023c00 	.word	0x40023c00
 800bc74:	40023800 	.word	0x40023800
 800bc78:	0802a0b5 	.word	0x0802a0b5
 800bc7c:	20000060 	.word	0x20000060
 800bc80:	20000068 	.word	0x20000068

0800bc84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <HAL_RCC_GetPCLK1Freq+0x14>)
 800bc86:	4a05      	ldr	r2, [pc, #20]	; (800bc9c <HAL_RCC_GetPCLK1Freq+0x18>)
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800bc8e:	5cd3      	ldrb	r3, [r2, r3]
 800bc90:	4a03      	ldr	r2, [pc, #12]	; (800bca0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800bc92:	6810      	ldr	r0, [r2, #0]
}
 800bc94:	40d8      	lsrs	r0, r3
 800bc96:	4770      	bx	lr
 800bc98:	40023800 	.word	0x40023800
 800bc9c:	0802a0c5 	.word	0x0802a0c5
 800bca0:	20000060 	.word	0x20000060

0800bca4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bca4:	230f      	movs	r3, #15
 800bca6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bca8:	4b0b      	ldr	r3, [pc, #44]	; (800bcd8 <HAL_RCC_GetClockConfig+0x34>)
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	f002 0203 	and.w	r2, r2, #3
 800bcb0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800bcb8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800bcc0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	08db      	lsrs	r3, r3, #3
 800bcc6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800bcca:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bccc:	4b03      	ldr	r3, [pc, #12]	; (800bcdc <HAL_RCC_GetClockConfig+0x38>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 030f 	and.w	r3, r3, #15
 800bcd4:	600b      	str	r3, [r1, #0]
}
 800bcd6:	4770      	bx	lr
 800bcd8:	40023800 	.word	0x40023800
 800bcdc:	40023c00 	.word	0x40023c00

0800bce0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bce0:	6803      	ldr	r3, [r0, #0]
{
 800bce2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bce6:	f013 0601 	ands.w	r6, r3, #1
{
 800bcea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bcec:	d00b      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bcee:	4ab0      	ldr	r2, [pc, #704]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bcf0:	6891      	ldr	r1, [r2, #8]
 800bcf2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800bcf6:	6091      	str	r1, [r2, #8]
 800bcf8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800bcfa:	6891      	ldr	r1, [r2, #8]
 800bcfc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bcfe:	fab6 f686 	clz	r6, r6
 800bd02:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd04:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bd06:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800bd0a:	d012      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd0c:	49a8      	ldr	r1, [pc, #672]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bd0e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800bd10:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bd14:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd18:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800bd1c:	bf08      	it	eq
 800bd1e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd20:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd24:	bf16      	itet	ne
 800bd26:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800bd2a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd2c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd2e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bd32:	02d9      	lsls	r1, r3, #11
 800bd34:	d510      	bpl.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd36:	489e      	ldr	r0, [pc, #632]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bd38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd3a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd3e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd42:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800bd46:	ea42 0201 	orr.w	r2, r2, r1
 800bd4a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd4e:	f000 81a7 	beq.w	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800bd52:	2900      	cmp	r1, #0
 800bd54:	bf08      	it	eq
 800bd56:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800bd58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800bd5c:	bf18      	it	ne
 800bd5e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bd60:	069a      	lsls	r2, r3, #26
 800bd62:	d531      	bpl.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bd64:	4b92      	ldr	r3, [pc, #584]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bd66:	4f93      	ldr	r7, [pc, #588]	; (800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800bd68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bd6e:	641a      	str	r2, [r3, #64]	; 0x40
 800bd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd80:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd82:	f7fc f849 	bl	8007e18 <HAL_GetTick>
 800bd86:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	05db      	lsls	r3, r3, #23
 800bd8c:	f140 818a 	bpl.w	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bd90:	4f87      	ldr	r7, [pc, #540]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bd92:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bd94:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800bd98:	f040 818f 	bne.w	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bda2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800bda6:	4a82      	ldr	r2, [pc, #520]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bda8:	f040 81ad 	bne.w	800c106 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bdac:	6891      	ldr	r1, [r2, #8]
 800bdae:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800bdb2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800bdb6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800bdba:	4301      	orrs	r1, r0
 800bdbc:	6091      	str	r1, [r2, #8]
 800bdbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdc2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800bdc4:	430b      	orrs	r3, r1
 800bdc6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bdc8:	6823      	ldr	r3, [r4, #0]
 800bdca:	06da      	lsls	r2, r3, #27
 800bdcc:	d50c      	bpl.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bdce:	4a78      	ldr	r2, [pc, #480]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bdd0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800bdd4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800bdd8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800bddc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800bde0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bde2:	4301      	orrs	r1, r0
 800bde4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bde8:	045f      	lsls	r7, r3, #17
 800bdea:	d508      	bpl.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdec:	4970      	ldr	r1, [pc, #448]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bdee:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bdf0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bdf4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800bdf8:	4302      	orrs	r2, r0
 800bdfa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdfe:	0418      	lsls	r0, r3, #16
 800be00:	d508      	bpl.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be02:	496b      	ldr	r1, [pc, #428]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be04:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800be06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be0a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800be0e:	4302      	orrs	r2, r0
 800be10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be14:	03d9      	lsls	r1, r3, #15
 800be16:	d508      	bpl.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be18:	4965      	ldr	r1, [pc, #404]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be1a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800be1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be20:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800be24:	4302      	orrs	r2, r0
 800be26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be2a:	039a      	lsls	r2, r3, #14
 800be2c:	d508      	bpl.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be2e:	4960      	ldr	r1, [pc, #384]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be30:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800be32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be36:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800be3a:	4302      	orrs	r2, r0
 800be3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be40:	065f      	lsls	r7, r3, #25
 800be42:	d508      	bpl.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be44:	495a      	ldr	r1, [pc, #360]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be46:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800be48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be4c:	f022 0203 	bic.w	r2, r2, #3
 800be50:	4302      	orrs	r2, r0
 800be52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be56:	0618      	lsls	r0, r3, #24
 800be58:	d508      	bpl.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800be5a:	4955      	ldr	r1, [pc, #340]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800be5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be62:	f022 020c 	bic.w	r2, r2, #12
 800be66:	4302      	orrs	r2, r0
 800be68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800be6c:	05d9      	lsls	r1, r3, #23
 800be6e:	d508      	bpl.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800be70:	494f      	ldr	r1, [pc, #316]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be72:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800be74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be78:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800be7c:	4302      	orrs	r2, r0
 800be7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800be82:	059a      	lsls	r2, r3, #22
 800be84:	d508      	bpl.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800be86:	494a      	ldr	r1, [pc, #296]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be88:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800be8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800be8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be92:	4302      	orrs	r2, r0
 800be94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800be98:	055f      	lsls	r7, r3, #21
 800be9a:	d508      	bpl.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800be9c:	4944      	ldr	r1, [pc, #272]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800be9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bea0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bea4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bea8:	4302      	orrs	r2, r0
 800beaa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800beae:	0518      	lsls	r0, r3, #20
 800beb0:	d508      	bpl.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800beb2:	493f      	ldr	r1, [pc, #252]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800beb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beb6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800beba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bebe:	4302      	orrs	r2, r0
 800bec0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bec4:	04d9      	lsls	r1, r3, #19
 800bec6:	d508      	bpl.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bec8:	4939      	ldr	r1, [pc, #228]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800beca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800becc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bed0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bed4:	4302      	orrs	r2, r0
 800bed6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800beda:	049a      	lsls	r2, r3, #18
 800bedc:	d508      	bpl.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bede:	4934      	ldr	r1, [pc, #208]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bee0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bee2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bee6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800beea:	4302      	orrs	r2, r0
 800beec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bef0:	025f      	lsls	r7, r3, #9
 800bef2:	d508      	bpl.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bef4:	492e      	ldr	r1, [pc, #184]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bef6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bef8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800befc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bf00:	4302      	orrs	r2, r0
 800bf02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bf06:	0298      	lsls	r0, r3, #10
 800bf08:	d50c      	bpl.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf0a:	4829      	ldr	r0, [pc, #164]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf0c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bf0e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800bf12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf16:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800bf1a:	bf08      	it	eq
 800bf1c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800bf24:	f013 0f08 	tst.w	r3, #8
 800bf28:	bf18      	it	ne
 800bf2a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf2c:	0359      	lsls	r1, r3, #13
 800bf2e:	d508      	bpl.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf30:	491f      	ldr	r1, [pc, #124]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf32:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bf34:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bf3c:	4302      	orrs	r2, r0
 800bf3e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bf42:	021a      	lsls	r2, r3, #8
 800bf44:	d509      	bpl.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bf46:	491a      	ldr	r1, [pc, #104]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf48:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800bf4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf50:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bf54:	4302      	orrs	r2, r0
 800bf56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bf5a:	015f      	lsls	r7, r3, #5
 800bf5c:	d509      	bpl.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bf5e:	4914      	ldr	r1, [pc, #80]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf60:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800bf64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf68:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800bf6c:	4302      	orrs	r2, r0
 800bf6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf72:	0118      	lsls	r0, r3, #4
 800bf74:	d509      	bpl.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf76:	490e      	ldr	r1, [pc, #56]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800bf7c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800bf80:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800bf84:	4302      	orrs	r2, r0
 800bf86:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bf8a:	00d9      	lsls	r1, r3, #3
 800bf8c:	d509      	bpl.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bf8e:	4908      	ldr	r1, [pc, #32]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bf90:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bf94:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800bf98:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bf9c:	4302      	orrs	r2, r0
 800bf9e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bfa2:	2e01      	cmp	r6, #1
 800bfa4:	f000 80b3 	beq.w	800c10e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bfa8:	019a      	lsls	r2, r3, #6
 800bfaa:	f100 80b0 	bmi.w	800c10e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bfae:	e003      	b.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bfb0:	40023800 	.word	0x40023800
 800bfb4:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bfb8:	2d01      	cmp	r5, #1
 800bfba:	d16f      	bne.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bfbc:	4d9d      	ldr	r5, [pc, #628]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800bfbe:	682b      	ldr	r3, [r5, #0]
 800bfc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfc4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfc6:	f7fb ff27 	bl	8007e18 <HAL_GetTick>
 800bfca:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	009f      	lsls	r7, r3, #2
 800bfd0:	f100 8121 	bmi.w	800c216 <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bfd4:	6822      	ldr	r2, [r4, #0]
 800bfd6:	0316      	lsls	r6, r2, #12
 800bfd8:	d501      	bpl.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800bfda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfdc:	b11b      	cbz	r3, 800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800bfde:	02d0      	lsls	r0, r2, #11
 800bfe0:	d51c      	bpl.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bfe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfe4:	b9d3      	cbnz	r3, 800c01c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bfe6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bfea:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bfee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bff2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800bff6:	430b      	orrs	r3, r1
 800bff8:	6961      	ldr	r1, [r4, #20]
 800bffa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800bffe:	69a1      	ldr	r1, [r4, #24]
 800c000:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c004:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c008:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800c00c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c00e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c012:	3901      	subs	r1, #1
 800c014:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c018:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c01c:	0291      	lsls	r1, r2, #10
 800c01e:	d515      	bpl.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c020:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c026:	d111      	bne.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c028:	4982      	ldr	r1, [pc, #520]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c02a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c02e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c032:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800c036:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c03a:	4303      	orrs	r3, r0
 800c03c:	6960      	ldr	r0, [r4, #20]
 800c03e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c042:	6a20      	ldr	r0, [r4, #32]
 800c044:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c04c:	0712      	lsls	r2, r2, #28
 800c04e:	d519      	bpl.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c050:	4a78      	ldr	r2, [pc, #480]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c052:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c056:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c05a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800c05e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c062:	430b      	orrs	r3, r1
 800c064:	6961      	ldr	r1, [r4, #20]
 800c066:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c06a:	69e1      	ldr	r1, [r4, #28]
 800c06c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c074:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800c078:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c07a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c07e:	430b      	orrs	r3, r1
 800c080:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c084:	4c6b      	ldr	r4, [pc, #428]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c08c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c08e:	f7fb fec3 	bl	8007e18 <HAL_GetTick>
 800c092:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	f140 80c4 	bpl.w	800c224 <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c09c:	2000      	movs	r0, #0
 800c09e:	e009      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 800c0a0:	2601      	movs	r6, #1
 800c0a2:	e659      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0a4:	f7fb feb8 	bl	8007e18 <HAL_GetTick>
 800c0a8:	eba0 0008 	sub.w	r0, r0, r8
 800c0ac:	2864      	cmp	r0, #100	; 0x64
 800c0ae:	f67f ae6b 	bls.w	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800c0b2:	2003      	movs	r0, #3
}
 800c0b4:	b003      	add	sp, #12
 800c0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c0ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c0bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	f43f ae6b 	beq.w	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800c0c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800c0ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c0d2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c0d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c0d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c0da:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800c0dc:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c0de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0e0:	07d8      	lsls	r0, r3, #31
 800c0e2:	f57f ae5b 	bpl.w	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800c0e6:	f7fb fe97 	bl	8007e18 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0ea:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800c0ee:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0f2:	0799      	lsls	r1, r3, #30
 800c0f4:	f53f ae52 	bmi.w	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0f8:	f7fb fe8e 	bl	8007e18 <HAL_GetTick>
 800c0fc:	eba0 0008 	sub.w	r0, r0, r8
 800c100:	4548      	cmp	r0, r9
 800c102:	d9f5      	bls.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c104:	e7d5      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c106:	6891      	ldr	r1, [r2, #8]
 800c108:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800c10c:	e656      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800c10e:	4e49      	ldr	r6, [pc, #292]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c110:	6833      	ldr	r3, [r6, #0]
 800c112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c116:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c118:	f7fb fe7e 	bl	8007e18 <HAL_GetTick>
 800c11c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c11e:	6833      	ldr	r3, [r6, #0]
 800c120:	011b      	lsls	r3, r3, #4
 800c122:	d472      	bmi.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c124:	6822      	ldr	r2, [r4, #0]
 800c126:	07d7      	lsls	r7, r2, #31
 800c128:	d512      	bpl.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800c12a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c12c:	b983      	cbnz	r3, 800c150 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c12e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c132:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c13a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800c13e:	430b      	orrs	r3, r1
 800c140:	6861      	ldr	r1, [r4, #4]
 800c142:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c146:	68a1      	ldr	r1, [r4, #8]
 800c148:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c14c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c150:	0316      	lsls	r6, r2, #12
 800c152:	d503      	bpl.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c15a:	d005      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c15c:	02d0      	lsls	r0, r2, #11
 800c15e:	d51e      	bpl.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c166:	d11a      	bne.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c168:	4932      	ldr	r1, [pc, #200]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c16a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c16e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c176:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c17a:	4303      	orrs	r3, r0
 800c17c:	6860      	ldr	r0, [r4, #4]
 800c17e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c182:	68e0      	ldr	r0, [r4, #12]
 800c184:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c18c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800c190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c192:	f020 001f 	bic.w	r0, r0, #31
 800c196:	3b01      	subs	r3, #1
 800c198:	4303      	orrs	r3, r0
 800c19a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c19e:	01d1      	lsls	r1, r2, #7
 800c1a0:	d511      	bpl.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c1a2:	4924      	ldr	r1, [pc, #144]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c1a4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c1a8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c1ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800c1b0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c1b4:	4303      	orrs	r3, r0
 800c1b6:	6860      	ldr	r0, [r4, #4]
 800c1b8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c1bc:	6920      	ldr	r0, [r4, #16]
 800c1be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c1c6:	0192      	lsls	r2, r2, #6
 800c1c8:	d50d      	bpl.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	6862      	ldr	r2, [r4, #4]
 800c1ce:	041b      	lsls	r3, r3, #16
 800c1d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c1d4:	68e2      	ldr	r2, [r4, #12]
 800c1d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c1da:	68a2      	ldr	r2, [r4, #8]
 800c1dc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800c1e0:	4a14      	ldr	r2, [pc, #80]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c1e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800c1e6:	4e13      	ldr	r6, [pc, #76]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800c1e8:	6833      	ldr	r3, [r6, #0]
 800c1ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c1f0:	f7fb fe12 	bl	8007e18 <HAL_GetTick>
 800c1f4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1f6:	6833      	ldr	r3, [r6, #0]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	f53f aedd 	bmi.w	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c1fe:	f7fb fe0b 	bl	8007e18 <HAL_GetTick>
 800c202:	1bc0      	subs	r0, r0, r7
 800c204:	2864      	cmp	r0, #100	; 0x64
 800c206:	d9f6      	bls.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c208:	e753      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c20a:	f7fb fe05 	bl	8007e18 <HAL_GetTick>
 800c20e:	1bc0      	subs	r0, r0, r7
 800c210:	2864      	cmp	r0, #100	; 0x64
 800c212:	d984      	bls.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c214:	e74d      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c216:	f7fb fdff 	bl	8007e18 <HAL_GetTick>
 800c21a:	1b80      	subs	r0, r0, r6
 800c21c:	2864      	cmp	r0, #100	; 0x64
 800c21e:	f67f aed5 	bls.w	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800c222:	e746      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c224:	f7fb fdf8 	bl	8007e18 <HAL_GetTick>
 800c228:	1b40      	subs	r0, r0, r5
 800c22a:	2864      	cmp	r0, #100	; 0x64
 800c22c:	f67f af32 	bls.w	800c094 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800c230:	e73f      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800c232:	bf00      	nop
 800c234:	40023800 	.word	0x40023800

0800c238 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c23c:	4604      	mov	r4, r0
 800c23e:	b1c8      	cbz	r0, 800c274 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c240:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c244:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c248:	b91b      	cbnz	r3, 800c252 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c24a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c24e:	f7f8 fef1 	bl	8005034 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c252:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c254:	1d21      	adds	r1, r4, #4
 800c256:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c258:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c25c:	f000 fcc1 	bl	800cbe2 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c260:	6862      	ldr	r2, [r4, #4]
 800c262:	4629      	mov	r1, r5
 800c264:	6820      	ldr	r0, [r4, #0]
 800c266:	f000 fcf7 	bl	800cc58 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c26a:	2301      	movs	r3, #1

  return HAL_OK;
 800c26c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c26e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800c272:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c274:	2001      	movs	r0, #1
 800c276:	e7fc      	b.n	800c272 <HAL_SDRAM_Init+0x3a>

0800c278 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c278:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c27a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800c27e:	4605      	mov	r5, r0
 800c280:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c282:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c284:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c286:	d010      	beq.n	800c2aa <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c288:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800c28c:	2c01      	cmp	r4, #1
 800c28e:	d110      	bne.n	800c2b2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c290:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c292:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c294:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c298:	f000 fd14 	bl	800ccc4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d104      	bne.n	800c2ac <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c2a2:	2305      	movs	r3, #5
 800c2a4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c2a8:	2000      	movs	r0, #0
}
 800c2aa:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c2ac:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800c2b0:	e7fa      	b.n	800c2a8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c2b2:	2001      	movs	r0, #1
 800c2b4:	e7f9      	b.n	800c2aa <HAL_SDRAM_SendCommand+0x32>

0800c2b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c2b6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c2b8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800c2bc:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	b2d8      	uxtb	r0, r3
 800c2c2:	d00d      	beq.n	800c2e0 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c2c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	b2dd      	uxtb	r5, r3
 800c2cc:	d109      	bne.n	800c2e2 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2ce:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c2d0:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c2d6:	f000 fd07 	bl	800cce8 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c2da:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c2dc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	e7fc      	b.n	800c2e0 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800c2e8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2e8:	6a03      	ldr	r3, [r0, #32]
 800c2ea:	f023 0301 	bic.w	r3, r3, #1
{
 800c2ee:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2f4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2f6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2f8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800c2fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2fe:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800c302:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c306:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c308:	688d      	ldr	r5, [r1, #8]
 800c30a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c30c:	4d0e      	ldr	r5, [pc, #56]	; (800c348 <TIM_OC1_SetConfig+0x60>)
 800c30e:	42a8      	cmp	r0, r5
 800c310:	d002      	beq.n	800c318 <TIM_OC1_SetConfig+0x30>
 800c312:	4e0e      	ldr	r6, [pc, #56]	; (800c34c <TIM_OC1_SetConfig+0x64>)
 800c314:	42b0      	cmp	r0, r6
 800c316:	d111      	bne.n	800c33c <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c318:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c31c:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c31e:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800c320:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800c324:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c328:	d002      	beq.n	800c330 <TIM_OC1_SetConfig+0x48>
 800c32a:	4d08      	ldr	r5, [pc, #32]	; (800c34c <TIM_OC1_SetConfig+0x64>)
 800c32c:	42a8      	cmp	r0, r5
 800c32e:	d105      	bne.n	800c33c <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c330:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c334:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c338:	4335      	orrs	r5, r6
 800c33a:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c33e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c340:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c342:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c344:	6203      	str	r3, [r0, #32]
}
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	40010000 	.word	0x40010000
 800c34c:	40010400 	.word	0x40010400

0800c350 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c350:	6a03      	ldr	r3, [r0, #32]
 800c352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800c356:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c358:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c35a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c35c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c35e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800c364:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c366:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800c36a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c36e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c370:	688d      	ldr	r5, [r1, #8]
 800c372:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c376:	4d11      	ldr	r5, [pc, #68]	; (800c3bc <TIM_OC3_SetConfig+0x6c>)
 800c378:	42a8      	cmp	r0, r5
 800c37a:	d003      	beq.n	800c384 <TIM_OC3_SetConfig+0x34>
 800c37c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c380:	42a8      	cmp	r0, r5
 800c382:	d114      	bne.n	800c3ae <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c384:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800c386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c38a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c38e:	4d0b      	ldr	r5, [pc, #44]	; (800c3bc <TIM_OC3_SetConfig+0x6c>)
 800c390:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800c392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c396:	d003      	beq.n	800c3a0 <TIM_OC3_SetConfig+0x50>
 800c398:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c39c:	42a8      	cmp	r0, r5
 800c39e:	d106      	bne.n	800c3ae <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3a4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c3a8:	4335      	orrs	r5, r6
 800c3aa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3ae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3b0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c3b2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c3b4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3b6:	6203      	str	r3, [r0, #32]
}
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ba:	bf00      	nop
 800c3bc:	40010000 	.word	0x40010000

0800c3c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800c3c6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ca:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3ce:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3da:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3e2:	688d      	ldr	r5, [r1, #8]
 800c3e4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3e8:	4d08      	ldr	r5, [pc, #32]	; (800c40c <TIM_OC4_SetConfig+0x4c>)
 800c3ea:	42a8      	cmp	r0, r5
 800c3ec:	d003      	beq.n	800c3f6 <TIM_OC4_SetConfig+0x36>
 800c3ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c3f2:	42a8      	cmp	r0, r5
 800c3f4:	d104      	bne.n	800c400 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3f6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3fa:	694d      	ldr	r5, [r1, #20]
 800c3fc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c400:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c402:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c404:	684b      	ldr	r3, [r1, #4]
 800c406:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c408:	6202      	str	r2, [r0, #32]
}
 800c40a:	bd30      	pop	{r4, r5, pc}
 800c40c:	40010000 	.word	0x40010000

0800c410 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c410:	6a03      	ldr	r3, [r0, #32]
 800c412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800c416:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c418:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c41a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c41c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c41e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c420:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800c424:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800c42e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c430:	688d      	ldr	r5, [r1, #8]
 800c432:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c436:	4d09      	ldr	r5, [pc, #36]	; (800c45c <TIM_OC5_SetConfig+0x4c>)
 800c438:	42a8      	cmp	r0, r5
 800c43a:	d003      	beq.n	800c444 <TIM_OC5_SetConfig+0x34>
 800c43c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c440:	42a8      	cmp	r0, r5
 800c442:	d104      	bne.n	800c44e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c444:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c448:	694d      	ldr	r5, [r1, #20]
 800c44a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c44e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c450:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c452:	684b      	ldr	r3, [r1, #4]
 800c454:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c456:	6202      	str	r2, [r0, #32]
}
 800c458:	bd30      	pop	{r4, r5, pc}
 800c45a:	bf00      	nop
 800c45c:	40010000 	.word	0x40010000

0800c460 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c460:	6a03      	ldr	r3, [r0, #32]
 800c462:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800c466:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c468:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c46c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c46e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c470:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c474:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c47a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c47e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c482:	688d      	ldr	r5, [r1, #8]
 800c484:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c488:	4d08      	ldr	r5, [pc, #32]	; (800c4ac <TIM_OC6_SetConfig+0x4c>)
 800c48a:	42a8      	cmp	r0, r5
 800c48c:	d003      	beq.n	800c496 <TIM_OC6_SetConfig+0x36>
 800c48e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c492:	42a8      	cmp	r0, r5
 800c494:	d104      	bne.n	800c4a0 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c496:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c49a:	694d      	ldr	r5, [r1, #20]
 800c49c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4a2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c4a4:	684b      	ldr	r3, [r1, #4]
 800c4a6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4a8:	6202      	str	r2, [r0, #32]
}
 800c4aa:	bd30      	pop	{r4, r5, pc}
 800c4ac:	40010000 	.word	0x40010000

0800c4b0 <HAL_TIM_Base_MspInit>:
}
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c4b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d133      	bne.n	800c524 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4c2:	6803      	ldr	r3, [r0, #0]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	f042 0201 	orr.w	r2, r2, #1
 800c4ca:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4cc:	4a16      	ldr	r2, [pc, #88]	; (800c528 <HAL_TIM_Base_Start_IT+0x74>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d01a      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d6:	d017      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c4d8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d013      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c4e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d00f      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c4e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d00b      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c4f0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d007      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c4f8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d003      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x54>
 800c500:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c504:	4293      	cmp	r3, r2
 800c506:	d107      	bne.n	800c518 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c508:	6899      	ldr	r1, [r3, #8]
 800c50a:	4a08      	ldr	r2, [pc, #32]	; (800c52c <HAL_TIM_Base_Start_IT+0x78>)
 800c50c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50e:	2a06      	cmp	r2, #6
 800c510:	d006      	beq.n	800c520 <HAL_TIM_Base_Start_IT+0x6c>
 800c512:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c516:	d003      	beq.n	800c520 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	f042 0201 	orr.w	r2, r2, #1
 800c51e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c520:	2000      	movs	r0, #0
}
 800c522:	4770      	bx	lr
    return HAL_ERROR;
 800c524:	2001      	movs	r0, #1
 800c526:	4770      	bx	lr
 800c528:	40010000 	.word	0x40010000
 800c52c:	00010007 	.word	0x00010007

0800c530 <HAL_TIM_OC_DelayElapsedCallback>:
 800c530:	4770      	bx	lr

0800c532 <HAL_TIM_IC_CaptureCallback>:
 800c532:	4770      	bx	lr

0800c534 <HAL_TIM_PWM_PulseFinishedCallback>:
 800c534:	4770      	bx	lr

0800c536 <HAL_TIM_TriggerCallback>:
 800c536:	4770      	bx	lr

0800c538 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c538:	6803      	ldr	r3, [r0, #0]
 800c53a:	691a      	ldr	r2, [r3, #16]
 800c53c:	0791      	lsls	r1, r2, #30
{
 800c53e:	b510      	push	{r4, lr}
 800c540:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c542:	d50f      	bpl.n	800c564 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	0792      	lsls	r2, r2, #30
 800c548:	d50c      	bpl.n	800c564 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c54a:	f06f 0202 	mvn.w	r2, #2
 800c54e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c550:	2201      	movs	r2, #1
 800c552:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	0799      	lsls	r1, r3, #30
 800c558:	f000 8085 	beq.w	800c666 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c55c:	f7ff ffe9 	bl	800c532 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c560:	2300      	movs	r3, #0
 800c562:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	691a      	ldr	r2, [r3, #16]
 800c568:	0752      	lsls	r2, r2, #29
 800c56a:	d510      	bpl.n	800c58e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c56c:	68da      	ldr	r2, [r3, #12]
 800c56e:	0750      	lsls	r0, r2, #29
 800c570:	d50d      	bpl.n	800c58e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c572:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c576:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c57a:	2202      	movs	r2, #2
 800c57c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c584:	d075      	beq.n	800c672 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c586:	f7ff ffd4 	bl	800c532 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c58a:	2300      	movs	r3, #0
 800c58c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	691a      	ldr	r2, [r3, #16]
 800c592:	0711      	lsls	r1, r2, #28
 800c594:	d50f      	bpl.n	800c5b6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c596:	68da      	ldr	r2, [r3, #12]
 800c598:	0712      	lsls	r2, r2, #28
 800c59a:	d50c      	bpl.n	800c5b6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c59c:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c5a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	079b      	lsls	r3, r3, #30
 800c5ac:	d067      	beq.n	800c67e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c5ae:	f7ff ffc0 	bl	800c532 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	691a      	ldr	r2, [r3, #16]
 800c5ba:	06d0      	lsls	r0, r2, #27
 800c5bc:	d510      	bpl.n	800c5e0 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	06d1      	lsls	r1, r2, #27
 800c5c2:	d50d      	bpl.n	800c5e0 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5c4:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c5c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5cc:	2208      	movs	r2, #8
 800c5ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c5d6:	d058      	beq.n	800c68a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800c5d8:	f7ff ffab 	bl	800c532 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	691a      	ldr	r2, [r3, #16]
 800c5e4:	07d2      	lsls	r2, r2, #31
 800c5e6:	d508      	bpl.n	800c5fa <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5e8:	68da      	ldr	r2, [r3, #12]
 800c5ea:	07d0      	lsls	r0, r2, #31
 800c5ec:	d505      	bpl.n	800c5fa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5ee:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5f6:	f7f8 fa0d 	bl	8004a14 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	691a      	ldr	r2, [r3, #16]
 800c5fe:	0611      	lsls	r1, r2, #24
 800c600:	d508      	bpl.n	800c614 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c602:	68da      	ldr	r2, [r3, #12]
 800c604:	0612      	lsls	r2, r2, #24
 800c606:	d505      	bpl.n	800c614 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c608:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c60c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c60e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c610:	f000 fae5 	bl	800cbde <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	691a      	ldr	r2, [r3, #16]
 800c618:	05d0      	lsls	r0, r2, #23
 800c61a:	d508      	bpl.n	800c62e <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	0611      	lsls	r1, r2, #24
 800c620:	d505      	bpl.n	800c62e <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c622:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c626:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c628:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c62a:	f000 fad9 	bl	800cbe0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	691a      	ldr	r2, [r3, #16]
 800c632:	0652      	lsls	r2, r2, #25
 800c634:	d508      	bpl.n	800c648 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c636:	68da      	ldr	r2, [r3, #12]
 800c638:	0650      	lsls	r0, r2, #25
 800c63a:	d505      	bpl.n	800c648 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c63c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800c640:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c642:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c644:	f7ff ff77 	bl	800c536 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	691a      	ldr	r2, [r3, #16]
 800c64c:	0691      	lsls	r1, r2, #26
 800c64e:	d522      	bpl.n	800c696 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c650:	68da      	ldr	r2, [r3, #12]
 800c652:	0692      	lsls	r2, r2, #26
 800c654:	d51f      	bpl.n	800c696 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c656:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c65a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c65c:	611a      	str	r2, [r3, #16]
}
 800c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c662:	f000 babb 	b.w	800cbdc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c666:	f7ff ff63 	bl	800c530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c66a:	4620      	mov	r0, r4
 800c66c:	f7ff ff62 	bl	800c534 <HAL_TIM_PWM_PulseFinishedCallback>
 800c670:	e776      	b.n	800c560 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c672:	f7ff ff5d 	bl	800c530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff ff5c 	bl	800c534 <HAL_TIM_PWM_PulseFinishedCallback>
 800c67c:	e785      	b.n	800c58a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c67e:	f7ff ff57 	bl	800c530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c682:	4620      	mov	r0, r4
 800c684:	f7ff ff56 	bl	800c534 <HAL_TIM_PWM_PulseFinishedCallback>
 800c688:	e793      	b.n	800c5b2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c68a:	f7ff ff51 	bl	800c530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c68e:	4620      	mov	r0, r4
 800c690:	f7ff ff50 	bl	800c534 <HAL_TIM_PWM_PulseFinishedCallback>
 800c694:	e7a2      	b.n	800c5dc <HAL_TIM_IRQHandler+0xa4>
}
 800c696:	bd10      	pop	{r4, pc}

0800c698 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c698:	4a30      	ldr	r2, [pc, #192]	; (800c75c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800c69a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c69c:	4290      	cmp	r0, r2
 800c69e:	d012      	beq.n	800c6c6 <TIM_Base_SetConfig+0x2e>
 800c6a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c6a4:	d00f      	beq.n	800c6c6 <TIM_Base_SetConfig+0x2e>
 800c6a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c6aa:	4290      	cmp	r0, r2
 800c6ac:	d00b      	beq.n	800c6c6 <TIM_Base_SetConfig+0x2e>
 800c6ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6b2:	4290      	cmp	r0, r2
 800c6b4:	d007      	beq.n	800c6c6 <TIM_Base_SetConfig+0x2e>
 800c6b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6ba:	4290      	cmp	r0, r2
 800c6bc:	d003      	beq.n	800c6c6 <TIM_Base_SetConfig+0x2e>
 800c6be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c6c2:	4290      	cmp	r0, r2
 800c6c4:	d119      	bne.n	800c6fa <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800c6c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c6cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6ce:	4a23      	ldr	r2, [pc, #140]	; (800c75c <TIM_Base_SetConfig+0xc4>)
 800c6d0:	4290      	cmp	r0, r2
 800c6d2:	d029      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c6d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c6d8:	d026      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c6da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c6de:	4290      	cmp	r0, r2
 800c6e0:	d022      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c6e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6e6:	4290      	cmp	r0, r2
 800c6e8:	d01e      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c6ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6ee:	4290      	cmp	r0, r2
 800c6f0:	d01a      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c6f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c6f6:	4290      	cmp	r0, r2
 800c6f8:	d016      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c6fa:	4a19      	ldr	r2, [pc, #100]	; (800c760 <TIM_Base_SetConfig+0xc8>)
 800c6fc:	4290      	cmp	r0, r2
 800c6fe:	d013      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c700:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c704:	4290      	cmp	r0, r2
 800c706:	d00f      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c70c:	4290      	cmp	r0, r2
 800c70e:	d00b      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c710:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c714:	4290      	cmp	r0, r2
 800c716:	d007      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c718:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c71c:	4290      	cmp	r0, r2
 800c71e:	d003      	beq.n	800c728 <TIM_Base_SetConfig+0x90>
 800c720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c724:	4290      	cmp	r0, r2
 800c726:	d103      	bne.n	800c730 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c72c:	68ca      	ldr	r2, [r1, #12]
 800c72e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c730:	694a      	ldr	r2, [r1, #20]
 800c732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c736:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c738:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c73a:	688b      	ldr	r3, [r1, #8]
 800c73c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c73e:	680b      	ldr	r3, [r1, #0]
 800c740:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c742:	4b06      	ldr	r3, [pc, #24]	; (800c75c <TIM_Base_SetConfig+0xc4>)
 800c744:	4298      	cmp	r0, r3
 800c746:	d003      	beq.n	800c750 <TIM_Base_SetConfig+0xb8>
 800c748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c74c:	4298      	cmp	r0, r3
 800c74e:	d101      	bne.n	800c754 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800c750:	690b      	ldr	r3, [r1, #16]
 800c752:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c754:	2301      	movs	r3, #1
 800c756:	6143      	str	r3, [r0, #20]
}
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	40010000 	.word	0x40010000
 800c760:	40014000 	.word	0x40014000

0800c764 <HAL_TIM_Base_Init>:
{
 800c764:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c766:	4604      	mov	r4, r0
 800c768:	b350      	cbz	r0, 800c7c0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c76a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c76e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c772:	b91b      	cbnz	r3, 800c77c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c774:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c778:	f7ff fe9a 	bl	800c4b0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c77c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c77e:	6820      	ldr	r0, [r4, #0]
 800c780:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c786:	f7ff ff87 	bl	800c698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c78a:	2301      	movs	r3, #1
  return HAL_OK;
 800c78c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c78e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c792:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c796:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c79a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c79e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c7a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c7ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c7b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c7b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c7ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c7be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	e7fc      	b.n	800c7be <HAL_TIM_Base_Init+0x5a>

0800c7c4 <HAL_TIM_PWM_Init>:
{
 800c7c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	b350      	cbz	r0, 800c820 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c7ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7d2:	b91b      	cbnz	r3, 800c7dc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c7d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c7d8:	f7f8 fbf0 	bl	8004fbc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c7dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7de:	6820      	ldr	r0, [r4, #0]
 800c7e0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7e6:	f7ff ff57 	bl	800c698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ea:	2301      	movs	r3, #1
  return HAL_OK;
 800c7ec:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c7f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c7fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c7fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c802:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c80a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c80e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c812:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c816:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c81a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c81e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c820:	2001      	movs	r0, #1
 800c822:	e7fc      	b.n	800c81e <HAL_TIM_PWM_Init+0x5a>

0800c824 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c824:	6a03      	ldr	r3, [r0, #32]
 800c826:	f023 0310 	bic.w	r3, r3, #16
{
 800c82a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c82c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c82e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c830:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c832:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c834:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c838:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c83a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800c83e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c842:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c846:	688d      	ldr	r5, [r1, #8]
 800c848:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c84c:	4d10      	ldr	r5, [pc, #64]	; (800c890 <TIM_OC2_SetConfig+0x6c>)
 800c84e:	42a8      	cmp	r0, r5
 800c850:	d003      	beq.n	800c85a <TIM_OC2_SetConfig+0x36>
 800c852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c856:	42a8      	cmp	r0, r5
 800c858:	d114      	bne.n	800c884 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c85a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800c85c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c860:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c864:	4d0a      	ldr	r5, [pc, #40]	; (800c890 <TIM_OC2_SetConfig+0x6c>)
 800c866:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800c868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c86c:	d003      	beq.n	800c876 <TIM_OC2_SetConfig+0x52>
 800c86e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c872:	42a8      	cmp	r0, r5
 800c874:	d106      	bne.n	800c884 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c876:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c87a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c87e:	4335      	orrs	r5, r6
 800c880:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c884:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800c886:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c888:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c88a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c88c:	6203      	str	r3, [r0, #32]
}
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	40010000 	.word	0x40010000

0800c894 <HAL_TIM_PWM_ConfigChannel>:
{
 800c894:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c896:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800c89a:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d079      	beq.n	800c994 <HAL_TIM_PWM_ConfigChannel+0x100>
 800c8a0:	2001      	movs	r0, #1
  switch (Channel)
 800c8a2:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800c8a4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 800c8a8:	d052      	beq.n	800c950 <HAL_TIM_PWM_ConfigChannel+0xbc>
 800c8aa:	d808      	bhi.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c8ac:	2a04      	cmp	r2, #4
 800c8ae:	d02d      	beq.n	800c90c <HAL_TIM_PWM_ConfigChannel+0x78>
 800c8b0:	2a08      	cmp	r2, #8
 800c8b2:	d03c      	beq.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x9a>
 800c8b4:	b1c2      	cbz	r2, 800c8e8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c8bc:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800c8be:	2a10      	cmp	r2, #16
 800c8c0:	d057      	beq.n	800c972 <HAL_TIM_PWM_ConfigChannel+0xde>
 800c8c2:	2a14      	cmp	r2, #20
 800c8c4:	d1f7      	bne.n	800c8b6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8c6:	6828      	ldr	r0, [r5, #0]
 800c8c8:	f7ff fdca 	bl	800c460 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8cc:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8ce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c8e6:	e053      	b.n	800c990 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8e8:	6828      	ldr	r0, [r5, #0]
 800c8ea:	f7ff fcfd 	bl	800c2e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8ee:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8f0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8f2:	699a      	ldr	r2, [r3, #24]
 800c8f4:	f042 0208 	orr.w	r2, r2, #8
 800c8f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8fa:	699a      	ldr	r2, [r3, #24]
 800c8fc:	f022 0204 	bic.w	r2, r2, #4
 800c900:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c902:	699a      	ldr	r2, [r3, #24]
 800c904:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c906:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c908:	2000      	movs	r0, #0
      break;
 800c90a:	e7d4      	b.n	800c8b6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c90c:	6828      	ldr	r0, [r5, #0]
 800c90e:	f7ff ff89 	bl	800c824 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c912:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c914:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c916:	699a      	ldr	r2, [r3, #24]
 800c918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c91c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c91e:	699a      	ldr	r2, [r3, #24]
 800c920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c924:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c926:	699a      	ldr	r2, [r3, #24]
 800c928:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c92c:	e7eb      	b.n	800c906 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c92e:	6828      	ldr	r0, [r5, #0]
 800c930:	f7ff fd0e 	bl	800c350 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c934:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c936:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c938:	69da      	ldr	r2, [r3, #28]
 800c93a:	f042 0208 	orr.w	r2, r2, #8
 800c93e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c940:	69da      	ldr	r2, [r3, #28]
 800c942:	f022 0204 	bic.w	r2, r2, #4
 800c946:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c948:	69da      	ldr	r2, [r3, #28]
 800c94a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c94c:	61da      	str	r2, [r3, #28]
      break;
 800c94e:	e7db      	b.n	800c908 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c950:	6828      	ldr	r0, [r5, #0]
 800c952:	f7ff fd35 	bl	800c3c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c956:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c958:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c95a:	69da      	ldr	r2, [r3, #28]
 800c95c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c962:	69da      	ldr	r2, [r3, #28]
 800c964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c96a:	69da      	ldr	r2, [r3, #28]
 800c96c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c970:	e7ec      	b.n	800c94c <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c972:	6828      	ldr	r0, [r5, #0]
 800c974:	f7ff fd4c 	bl	800c410 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c978:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c97a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c97c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c97e:	f042 0208 	orr.w	r2, r2, #8
 800c982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c986:	f022 0204 	bic.w	r2, r2, #4
 800c98a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c98c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c98e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c990:	655a      	str	r2, [r3, #84]	; 0x54
 800c992:	e7b9      	b.n	800c908 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 800c994:	2002      	movs	r0, #2
 800c996:	e791      	b.n	800c8bc <HAL_TIM_PWM_ConfigChannel+0x28>

0800c998 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c998:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c99c:	6a03      	ldr	r3, [r0, #32]
{
 800c99e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9a0:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9a2:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9a4:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800c9a6:	ea23 0304 	bic.w	r3, r3, r4
 800c9aa:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9ac:	6a03      	ldr	r3, [r0, #32]
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	6202      	str	r2, [r0, #32]
}
 800c9b2:	bd10      	pop	{r4, pc}

0800c9b4 <HAL_TIM_OC_Start>:
{
 800c9b4:	b510      	push	{r4, lr}
 800c9b6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c9b8:	b929      	cbnz	r1, 800c9c6 <HAL_TIM_OC_Start+0x12>
 800c9ba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d02f      	beq.n	800ca22 <HAL_TIM_OC_Start+0x6e>
    return HAL_ERROR;
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	e044      	b.n	800ca50 <HAL_TIM_OC_Start+0x9c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c9c6:	2904      	cmp	r1, #4
 800c9c8:	d107      	bne.n	800c9da <HAL_TIM_OC_Start+0x26>
 800c9ca:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d1f7      	bne.n	800c9c2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800c9d8:	e026      	b.n	800ca28 <HAL_TIM_OC_Start+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c9da:	2908      	cmp	r1, #8
 800c9dc:	d107      	bne.n	800c9ee <HAL_TIM_OC_Start+0x3a>
 800c9de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d1ed      	bne.n	800c9c2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c9ec:	e01c      	b.n	800ca28 <HAL_TIM_OC_Start+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c9ee:	290c      	cmp	r1, #12
 800c9f0:	d10f      	bne.n	800ca12 <HAL_TIM_OC_Start+0x5e>
 800c9f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	bf18      	it	ne
 800c9fa:	2301      	movne	r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e0      	bne.n	800c9c2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca00:	2908      	cmp	r1, #8
 800ca02:	d0f0      	beq.n	800c9e6 <HAL_TIM_OC_Start+0x32>
 800ca04:	290c      	cmp	r1, #12
 800ca06:	f04f 0302 	mov.w	r3, #2
 800ca0a:	d122      	bne.n	800ca52 <HAL_TIM_OC_Start+0x9e>
 800ca0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ca10:	e00a      	b.n	800ca28 <HAL_TIM_OC_Start+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca12:	2910      	cmp	r1, #16
 800ca14:	d102      	bne.n	800ca1c <HAL_TIM_OC_Start+0x68>
 800ca16:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800ca1a:	e7ec      	b.n	800c9f6 <HAL_TIM_OC_Start+0x42>
 800ca1c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800ca20:	e7e9      	b.n	800c9f6 <HAL_TIM_OC_Start+0x42>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca22:	2302      	movs	r3, #2
 800ca24:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca28:	2201      	movs	r2, #1
 800ca2a:	6820      	ldr	r0, [r4, #0]
 800ca2c:	f7ff ffb4 	bl	800c998 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	491f      	ldr	r1, [pc, #124]	; (800cab0 <HAL_TIM_OC_Start+0xfc>)
 800ca34:	428b      	cmp	r3, r1
 800ca36:	d014      	beq.n	800ca62 <HAL_TIM_OC_Start+0xae>
 800ca38:	4a1e      	ldr	r2, [pc, #120]	; (800cab4 <HAL_TIM_OC_Start+0x100>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d011      	beq.n	800ca62 <HAL_TIM_OC_Start+0xae>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca42:	d115      	bne.n	800ca70 <HAL_TIM_OC_Start+0xbc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca44:	6899      	ldr	r1, [r3, #8]
 800ca46:	4a1c      	ldr	r2, [pc, #112]	; (800cab8 <HAL_TIM_OC_Start+0x104>)
 800ca48:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca4a:	2a06      	cmp	r2, #6
 800ca4c:	d12c      	bne.n	800caa8 <HAL_TIM_OC_Start+0xf4>
  return HAL_OK;
 800ca4e:	2000      	movs	r0, #0
}
 800ca50:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca52:	2910      	cmp	r1, #16
 800ca54:	d102      	bne.n	800ca5c <HAL_TIM_OC_Start+0xa8>
 800ca56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca5a:	e7e5      	b.n	800ca28 <HAL_TIM_OC_Start+0x74>
 800ca5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca60:	e7e2      	b.n	800ca28 <HAL_TIM_OC_Start+0x74>
    __HAL_TIM_MOE_ENABLE(htim);
 800ca62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca64:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 800ca66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca6a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca6c:	d0ea      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
 800ca6e:	e7e6      	b.n	800ca3e <HAL_TIM_OC_Start+0x8a>
 800ca70:	4a12      	ldr	r2, [pc, #72]	; (800cabc <HAL_TIM_OC_Start+0x108>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d0e6      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
 800ca76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d0e2      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
 800ca7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d0de      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
 800ca86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d0da      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
 800ca8e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d0d6      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
 800ca96:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d0d2      	beq.n	800ca44 <HAL_TIM_OC_Start+0x90>
    __HAL_TIM_ENABLE(htim);
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	f042 0201 	orr.w	r2, r2, #1
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	e7d2      	b.n	800ca4e <HAL_TIM_OC_Start+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800caac:	d1f7      	bne.n	800ca9e <HAL_TIM_OC_Start+0xea>
 800caae:	e7ce      	b.n	800ca4e <HAL_TIM_OC_Start+0x9a>
 800cab0:	40010000 	.word	0x40010000
 800cab4:	40010400 	.word	0x40010400
 800cab8:	00010007 	.word	0x00010007
 800cabc:	40000400 	.word	0x40000400

0800cac0 <HAL_TIM_PWM_Start>:
 800cac0:	f7ff bf78 	b.w	800c9b4 <HAL_TIM_OC_Start>

0800cac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cac4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cac6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800caca:	2b01      	cmp	r3, #1
 800cacc:	f04f 0302 	mov.w	r3, #2
 800cad0:	d03d      	beq.n	800cb4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cad2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cad6:	4d1f      	ldr	r5, [pc, #124]	; (800cb54 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 800cad8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cada:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800cadc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800cade:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cae0:	d003      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800cae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	d103      	bne.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800caea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800caee:	684d      	ldr	r5, [r1, #4]
 800caf0:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caf2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800caf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caf8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cafa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafc:	4a15      	ldr	r2, [pc, #84]	; (800cb54 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d01a      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb06:	d017      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb08:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d013      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d00f      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d00b      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb20:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d007      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb28:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d003      	beq.n	800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800cb30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d104      	bne.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb38:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb3a:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb3e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb42:	2301      	movs	r3, #1
 800cb44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800cb4e:	4618      	mov	r0, r3

  return HAL_OK;
}
 800cb50:	bd30      	pop	{r4, r5, pc}
 800cb52:	bf00      	nop
 800cb54:	40010000 	.word	0x40010000

0800cb58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb58:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d038      	beq.n	800cbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb62:	68cb      	ldr	r3, [r1, #12]
 800cb64:	688a      	ldr	r2, [r1, #8]
 800cb66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb6a:	4c1b      	ldr	r4, [pc, #108]	; (800cbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb6e:	684a      	ldr	r2, [r1, #4]
 800cb70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb76:	680a      	ldr	r2, [r1, #0]
 800cb78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb7e:	690a      	ldr	r2, [r1, #16]
 800cb80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb86:	694a      	ldr	r2, [r1, #20]
 800cb88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb8c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb8e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800cb90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb94:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb96:	698a      	ldr	r2, [r1, #24]
 800cb98:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800cb9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cba0:	6802      	ldr	r2, [r0, #0]
 800cba2:	42a2      	cmp	r2, r4
 800cba4:	d003      	beq.n	800cbae <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800cba6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cbaa:	42a2      	cmp	r2, r4
 800cbac:	d10c      	bne.n	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cbae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800cbb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cbb4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbb8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbba:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbc0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cbc6:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbc8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800cbd0:	4618      	mov	r0, r3
}
 800cbd2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800cbd4:	2002      	movs	r0, #2
 800cbd6:	e7fc      	b.n	800cbd2 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800cbd8:	40010000 	.word	0x40010000

0800cbdc <HAL_TIMEx_CommutCallback>:
 800cbdc:	4770      	bx	lr

0800cbde <HAL_TIMEx_BreakCallback>:
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_TIMEx_Break2Callback>:
 800cbe0:	4770      	bx	lr

0800cbe2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cbe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cbe6:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cbe8:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800cbec:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800cbf0:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800cbf4:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800cbf8:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800cbfc:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cbfe:	b9a2      	cbnz	r2, 800cc2a <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc00:	ea43 0209 	orr.w	r2, r3, r9
 800cc04:	6801      	ldr	r1, [r0, #0]
 800cc06:	432a      	orrs	r2, r5
 800cc08:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800cc0c:	ea42 0308 	orr.w	r3, r2, r8
 800cc10:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800cc14:	ea43 030e 	orr.w	r3, r3, lr
 800cc18:	ea43 030c 	orr.w	r3, r3, ip
 800cc1c:	433b      	orrs	r3, r7
 800cc1e:	4333      	orrs	r3, r6
 800cc20:	430b      	orrs	r3, r1
 800cc22:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cc24:	2000      	movs	r0, #0
 800cc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc2a:	6802      	ldr	r2, [r0, #0]
 800cc2c:	ea43 0309 	orr.w	r3, r3, r9
 800cc30:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800cc34:	4313      	orrs	r3, r2
 800cc36:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cc38:	ea45 0308 	orr.w	r3, r5, r8
 800cc3c:	6842      	ldr	r2, [r0, #4]
 800cc3e:	ea43 030e 	orr.w	r3, r3, lr
 800cc42:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800cc46:	ea43 030c 	orr.w	r3, r3, ip
 800cc4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800cc4e:	433b      	orrs	r3, r7
 800cc50:	4333      	orrs	r3, r6
 800cc52:	4313      	orrs	r3, r2
 800cc54:	6043      	str	r3, [r0, #4]
 800cc56:	e7e5      	b.n	800cc24 <FMC_SDRAM_Init+0x42>

0800cc58 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc58:	68cb      	ldr	r3, [r1, #12]
 800cc5a:	f103 3cff 	add.w	ip, r3, #4294967295
 800cc5e:	694b      	ldr	r3, [r1, #20]
{
 800cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc62:	3b01      	subs	r3, #1
 800cc64:	680f      	ldr	r7, [r1, #0]
 800cc66:	684c      	ldr	r4, [r1, #4]
 800cc68:	688e      	ldr	r6, [r1, #8]
 800cc6a:	051b      	lsls	r3, r3, #20
 800cc6c:	690d      	ldr	r5, [r1, #16]
 800cc6e:	3c01      	subs	r4, #1
 800cc70:	6989      	ldr	r1, [r1, #24]
 800cc72:	3e01      	subs	r6, #1
 800cc74:	3d01      	subs	r5, #1
 800cc76:	3f01      	subs	r7, #1
 800cc78:	3901      	subs	r1, #1
 800cc7a:	0124      	lsls	r4, r4, #4
 800cc7c:	0236      	lsls	r6, r6, #8
 800cc7e:	042d      	lsls	r5, r5, #16
 800cc80:	0609      	lsls	r1, r1, #24
 800cc82:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cc86:	b95a      	cbnz	r2, 800cca0 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc88:	433b      	orrs	r3, r7
 800cc8a:	6882      	ldr	r2, [r0, #8]
 800cc8c:	4323      	orrs	r3, r4
 800cc8e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800cc92:	4333      	orrs	r3, r6
 800cc94:	432b      	orrs	r3, r5
 800cc96:	430b      	orrs	r3, r1
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cca0:	6882      	ldr	r2, [r0, #8]
 800cca2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800cca6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800ccaa:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ccac:	ea44 0306 	orr.w	r3, r4, r6
 800ccb0:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccb2:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ccb4:	68c2      	ldr	r2, [r0, #12]
 800ccb6:	432b      	orrs	r3, r5
 800ccb8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ccbc:	430b      	orrs	r3, r1
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	60c3      	str	r3, [r0, #12]
 800ccc2:	e7eb      	b.n	800cc9c <FMC_SDRAM_Timing_Init+0x44>

0800ccc4 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ccc4:	6902      	ldr	r2, [r0, #16]
{
 800ccc6:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ccc8:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cccc:	0d92      	lsrs	r2, r2, #22
 800ccce:	4323      	orrs	r3, r4
 800ccd0:	68cc      	ldr	r4, [r1, #12]
 800ccd2:	0592      	lsls	r2, r2, #22
 800ccd4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	688a      	ldr	r2, [r1, #8]
 800ccdc:	3a01      	subs	r2, #1
 800ccde:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cce2:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cce4:	2000      	movs	r0, #0
 800cce6:	bd10      	pop	{r4, pc}

0800cce8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cce8:	6943      	ldr	r3, [r0, #20]
 800ccea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ccee:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800ccf2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ccf6:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	4770      	bx	lr

0800ccfc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccfc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd00:	b113      	cbz	r3, 800cd08 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800cd02:	f06f 0005 	mvn.w	r0, #5
 800cd06:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd08:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cd0c:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800cd0e:	b912      	cbnz	r2, 800cd16 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd10:	f3ef 8211 	mrs	r2, BASEPRI
 800cd14:	b112      	cbz	r2, 800cd1c <osKernelInitialize+0x20>
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	2a02      	cmp	r2, #2
 800cd1a:	d0f2      	beq.n	800cd02 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	b910      	cbnz	r0, 800cd26 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd20:	2201      	movs	r2, #1
 800cd22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd24:	4770      	bx	lr
    } else {
      stat = osError;
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cd2a:	4770      	bx	lr
 800cd2c:	20012788 	.word	0x20012788

0800cd30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd30:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd32:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd36:	b113      	cbz	r3, 800cd3e <osKernelStart+0xe>
    stat = osErrorISR;
 800cd38:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800cd3c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd3e:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cd42:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800cd44:	b912      	cbnz	r2, 800cd4c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd46:	f3ef 8211 	mrs	r2, BASEPRI
 800cd4a:	b112      	cbz	r2, 800cd52 <osKernelStart+0x22>
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	2a02      	cmp	r2, #2
 800cd50:	d0f2      	beq.n	800cd38 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	2a01      	cmp	r2, #1
 800cd56:	d105      	bne.n	800cd64 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800cd58:	2202      	movs	r2, #2
 800cd5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800cd5c:	f001 fe50 	bl	800ea00 <vTaskStartScheduler>
      stat = osOK;
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7eb      	b.n	800cd3c <osKernelStart+0xc>
      stat = osError;
 800cd64:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800cd68:	e7e8      	b.n	800cd3c <osKernelStart+0xc>
 800cd6a:	bf00      	nop
 800cd6c:	20012788 	.word	0x20012788

0800cd70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd72:	4614      	mov	r4, r2
 800cd74:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd76:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd78:	460b      	mov	r3, r1
  hTask = NULL;
 800cd7a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd7c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cd80:	bb22      	cbnz	r2, 800cdcc <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd82:	f3ef 8210 	mrs	r2, PRIMASK
 800cd86:	b912      	cbnz	r2, 800cd8e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd88:	f3ef 8211 	mrs	r2, BASEPRI
 800cd8c:	b11a      	cbz	r2, 800cd96 <osThreadNew+0x26>
 800cd8e:	4a22      	ldr	r2, [pc, #136]	; (800ce18 <osThreadNew+0xa8>)
 800cd90:	6812      	ldr	r2, [r2, #0]
 800cd92:	2a02      	cmp	r2, #2
 800cd94:	d01a      	beq.n	800cdcc <osThreadNew+0x5c>
 800cd96:	b1c8      	cbz	r0, 800cdcc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800cd98:	2c00      	cmp	r4, #0
 800cd9a:	d02f      	beq.n	800cdfc <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800cd9c:	69a5      	ldr	r5, [r4, #24]
 800cd9e:	2d00      	cmp	r5, #0
 800cda0:	bf08      	it	eq
 800cda2:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cda4:	1e6a      	subs	r2, r5, #1
 800cda6:	46ac      	mov	ip, r5
 800cda8:	2a37      	cmp	r2, #55	; 0x37
 800cdaa:	d82b      	bhi.n	800ce04 <osThreadNew+0x94>
 800cdac:	6862      	ldr	r2, [r4, #4]
 800cdae:	07d2      	lsls	r2, r2, #31
 800cdb0:	d428      	bmi.n	800ce04 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800cdb2:	6966      	ldr	r6, [r4, #20]
 800cdb4:	b16e      	cbz	r6, 800cdd2 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdb6:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800cdb8:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdba:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800cdbe:	b157      	cbz	r7, 800cdd6 <osThreadNew+0x66>
 800cdc0:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 800cdc4:	d902      	bls.n	800cdcc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdc6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdc8:	b104      	cbz	r4, 800cdcc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdca:	b9ee      	cbnz	r6, 800ce08 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdcc:	9805      	ldr	r0, [sp, #20]
}
 800cdce:	b007      	add	sp, #28
 800cdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800cdd2:	2280      	movs	r2, #128	; 0x80
 800cdd4:	e7f0      	b.n	800cdb8 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cdd6:	f1be 0f00 	cmp.w	lr, #0
 800cdda:	d1f7      	bne.n	800cdcc <osThreadNew+0x5c>
      if (mem == 0) {
 800cddc:	6924      	ldr	r4, [r4, #16]
 800cdde:	2c00      	cmp	r4, #0
 800cde0:	d1f4      	bne.n	800cdcc <osThreadNew+0x5c>
 800cde2:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cde4:	a905      	add	r1, sp, #20
 800cde6:	b292      	uxth	r2, r2
 800cde8:	e9cd c100 	strd	ip, r1, [sp]
 800cdec:	4621      	mov	r1, r4
 800cdee:	f001 fca1 	bl	800e734 <xTaskCreate>
 800cdf2:	2801      	cmp	r0, #1
          hTask = NULL;
 800cdf4:	bf1c      	itt	ne
 800cdf6:	2300      	movne	r3, #0
 800cdf8:	9305      	strne	r3, [sp, #20]
 800cdfa:	e7e7      	b.n	800cdcc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800cdfc:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800ce00:	2280      	movs	r2, #128	; 0x80
 800ce02:	e7ef      	b.n	800cde4 <osThreadNew+0x74>
        return (NULL);
 800ce04:	2000      	movs	r0, #0
 800ce06:	e7e2      	b.n	800cdce <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce08:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800ce0c:	9500      	str	r5, [sp, #0]
 800ce0e:	f001 fc53 	bl	800e6b8 <xTaskCreateStatic>
 800ce12:	9005      	str	r0, [sp, #20]
 800ce14:	e7da      	b.n	800cdcc <osThreadNew+0x5c>
 800ce16:	bf00      	nop
 800ce18:	20012788 	.word	0x20012788

0800ce1c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce20:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800ce24:	b116      	cbz	r6, 800ce2c <osMutexNew+0x10>
  hMutex = NULL;
 800ce26:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800ce28:	4620      	mov	r0, r4
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce2c:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800ce30:	b912      	cbnz	r2, 800ce38 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce32:	f3ef 8211 	mrs	r2, BASEPRI
 800ce36:	b11a      	cbz	r2, 800ce40 <osMutexNew+0x24>
 800ce38:	4a18      	ldr	r2, [pc, #96]	; (800ce9c <osMutexNew+0x80>)
 800ce3a:	6812      	ldr	r2, [r2, #0]
 800ce3c:	2a02      	cmp	r2, #2
 800ce3e:	d0f2      	beq.n	800ce26 <osMutexNew+0xa>
    if (attr != NULL) {
 800ce40:	b115      	cbz	r5, 800ce48 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800ce42:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800ce44:	0733      	lsls	r3, r6, #28
 800ce46:	d4ee      	bmi.n	800ce26 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ce48:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800ce4c:	b17d      	cbz	r5, 800ce6e <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ce4e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800ce52:	b151      	cbz	r1, 800ce6a <osMutexNew+0x4e>
 800ce54:	2b4f      	cmp	r3, #79	; 0x4f
 800ce56:	d9e6      	bls.n	800ce26 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800ce58:	b1de      	cbz	r6, 800ce92 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ce5a:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ce5c:	f000 ff4e 	bl	800dcfc <xQueueCreateMutexStatic>
 800ce60:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d0df      	beq.n	800ce26 <osMutexNew+0xa>
          name = attr->name;
 800ce66:	682d      	ldr	r5, [r5, #0]
 800ce68:	e00a      	b.n	800ce80 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1db      	bne.n	800ce26 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800ce6e:	b196      	cbz	r6, 800ce96 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ce70:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800ce72:	f000 ff78 	bl	800dd66 <xQueueCreateMutex>
 800ce76:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d0d4      	beq.n	800ce26 <osMutexNew+0xa>
        if (attr != NULL) {
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	d1f2      	bne.n	800ce66 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800ce80:	4629      	mov	r1, r5
 800ce82:	4620      	mov	r0, r4
 800ce84:	f001 fa3a 	bl	800e2fc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ce88:	2e00      	cmp	r6, #0
 800ce8a:	d0cd      	beq.n	800ce28 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ce8c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800ce90:	e7ca      	b.n	800ce28 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ce92:	2001      	movs	r0, #1
 800ce94:	e7e2      	b.n	800ce5c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800ce96:	2001      	movs	r0, #1
 800ce98:	e7eb      	b.n	800ce72 <osMutexNew+0x56>
 800ce9a:	bf00      	nop
 800ce9c:	20012788 	.word	0x20012788

0800cea0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cea0:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cea2:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cea6:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800cea8:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ceac:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceae:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ceb2:	b112      	cbz	r2, 800ceba <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800ceb4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800ceb8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceba:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800cebe:	b912      	cbnz	r2, 800cec6 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cec0:	f3ef 8211 	mrs	r2, BASEPRI
 800cec4:	b11a      	cbz	r2, 800cece <osMutexAcquire+0x2e>
 800cec6:	4a0d      	ldr	r2, [pc, #52]	; (800cefc <osMutexAcquire+0x5c>)
 800cec8:	6812      	ldr	r2, [r2, #0]
 800ceca:	2a02      	cmp	r2, #2
 800cecc:	d0f2      	beq.n	800ceb4 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800cece:	b188      	cbz	r0, 800cef4 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ced0:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800ced2:	b163      	cbz	r3, 800ceee <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ced4:	f001 f999 	bl	800e20a <xQueueTakeMutexRecursive>
 800ced8:	2801      	cmp	r0, #1
 800ceda:	d101      	bne.n	800cee0 <osMutexAcquire+0x40>
  stat = osOK;
 800cedc:	2000      	movs	r0, #0
 800cede:	e7eb      	b.n	800ceb8 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800cee0:	2c00      	cmp	r4, #0
 800cee2:	bf14      	ite	ne
 800cee4:	f06f 0001 	mvnne.w	r0, #1
 800cee8:	f06f 0002 	mvneq.w	r0, #2
 800ceec:	e7e4      	b.n	800ceb8 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ceee:	f001 f8c1 	bl	800e074 <xQueueSemaphoreTake>
 800cef2:	e7f1      	b.n	800ced8 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800cef4:	f06f 0003 	mvn.w	r0, #3
 800cef8:	e7de      	b.n	800ceb8 <osMutexAcquire+0x18>
 800cefa:	bf00      	nop
 800cefc:	20012788 	.word	0x20012788

0800cf00 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cf00:	b508      	push	{r3, lr}
 800cf02:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf04:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800cf08:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf0c:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cf10:	b112      	cbz	r2, 800cf18 <osMutexRelease+0x18>
    stat = osErrorISR;
 800cf12:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800cf16:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf18:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800cf1c:	b912      	cbnz	r2, 800cf24 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf1e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf22:	b11a      	cbz	r2, 800cf2c <osMutexRelease+0x2c>
 800cf24:	4a0a      	ldr	r2, [pc, #40]	; (800cf50 <osMutexRelease+0x50>)
 800cf26:	6812      	ldr	r2, [r2, #0]
 800cf28:	2a02      	cmp	r2, #2
 800cf2a:	d0f2      	beq.n	800cf12 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800cf2c:	b168      	cbz	r0, 800cf4a <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800cf2e:	b13b      	cbz	r3, 800cf40 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cf30:	f000 fef9 	bl	800dd26 <xQueueGiveMutexRecursive>
 800cf34:	2801      	cmp	r0, #1
  stat = osOK;
 800cf36:	bf0c      	ite	eq
 800cf38:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800cf3a:	f06f 0002 	mvnne.w	r0, #2
 800cf3e:	e7ea      	b.n	800cf16 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cf40:	461a      	mov	r2, r3
 800cf42:	4619      	mov	r1, r3
 800cf44:	f000 fe1f 	bl	800db86 <xQueueGenericSend>
 800cf48:	e7f4      	b.n	800cf34 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800cf4a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cf4e:	e7e2      	b.n	800cf16 <osMutexRelease+0x16>
 800cf50:	20012788 	.word	0x20012788

0800cf54 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cf54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf56:	460e      	mov	r6, r1
 800cf58:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf5a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cf5e:	b11b      	cbz	r3, 800cf68 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800cf60:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800cf62:	4620      	mov	r0, r4
 800cf64:	b002      	add	sp, #8
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf68:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cf6c:	b913      	cbnz	r3, 800cf74 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf6e:	f3ef 8311 	mrs	r3, BASEPRI
 800cf72:	b11b      	cbz	r3, 800cf7c <osSemaphoreNew+0x28>
 800cf74:	4b21      	ldr	r3, [pc, #132]	; (800cffc <osSemaphoreNew+0xa8>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d0f1      	beq.n	800cf60 <osSemaphoreNew+0xc>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d0ef      	beq.n	800cf60 <osSemaphoreNew+0xc>
 800cf80:	42b0      	cmp	r0, r6
 800cf82:	d3ed      	bcc.n	800cf60 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800cf84:	b1ed      	cbz	r5, 800cfc2 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf86:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800cf8a:	b1c3      	cbz	r3, 800cfbe <osSemaphoreNew+0x6a>
 800cf8c:	2a4f      	cmp	r2, #79	; 0x4f
 800cf8e:	d9e7      	bls.n	800cf60 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800cf90:	2801      	cmp	r0, #1
 800cf92:	d129      	bne.n	800cfe8 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cf94:	2203      	movs	r2, #3
 800cf96:	9200      	str	r2, [sp, #0]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	f000 fd6e 	bl	800da7c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800cfa0:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d0dc      	beq.n	800cf60 <osSemaphoreNew+0xc>
 800cfa6:	b1ce      	cbz	r6, 800cfdc <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	461a      	mov	r2, r3
 800cfac:	4619      	mov	r1, r3
 800cfae:	f000 fdea 	bl	800db86 <xQueueGenericSend>
 800cfb2:	2801      	cmp	r0, #1
 800cfb4:	d012      	beq.n	800cfdc <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 f9c6 	bl	800e348 <vQueueDelete>
 800cfbc:	e7d0      	b.n	800cf60 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cfbe:	2a00      	cmp	r2, #0
 800cfc0:	d1ce      	bne.n	800cf60 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800cfc2:	2801      	cmp	r0, #1
 800cfc4:	d104      	bne.n	800cfd0 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	2100      	movs	r1, #0
 800cfca:	f000 fd6b 	bl	800daa4 <xQueueGenericCreate>
 800cfce:	e7e7      	b.n	800cfa0 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	f000 fdb6 	bl	800db42 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d0c1      	beq.n	800cf60 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800cfdc:	b95d      	cbnz	r5, 800cff6 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f001 f98b 	bl	800e2fc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800cfe6:	e7bc      	b.n	800cf62 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4631      	mov	r1, r6
 800cfec:	f000 fd83 	bl	800daf6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800cff0:	4604      	mov	r4, r0
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d0b4      	beq.n	800cf60 <osSemaphoreNew+0xc>
          name = attr->name;
 800cff6:	682d      	ldr	r5, [r5, #0]
 800cff8:	e7f1      	b.n	800cfde <osSemaphoreNew+0x8a>
 800cffa:	bf00      	nop
 800cffc:	20012788 	.word	0x20012788

0800d000 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d000:	b513      	push	{r0, r1, r4, lr}
 800d002:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d004:	b918      	cbnz	r0, 800d00e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800d006:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d00a:	b002      	add	sp, #8
 800d00c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d00e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800d012:	b163      	cbz	r3, 800d02e <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800d014:	2c00      	cmp	r4, #0
 800d016:	d1f6      	bne.n	800d006 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d018:	aa01      	add	r2, sp, #4
 800d01a:	4621      	mov	r1, r4
      yield = pdFALSE;
 800d01c:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d01e:	f001 f918 	bl	800e252 <xQueueReceiveFromISR>
 800d022:	2801      	cmp	r0, #1
 800d024:	d113      	bne.n	800d04e <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800d026:	9b01      	ldr	r3, [sp, #4]
 800d028:	b9a3      	cbnz	r3, 800d054 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800d02a:	2000      	movs	r0, #0
 800d02c:	e7ed      	b.n	800d00a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d02e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d032:	b913      	cbnz	r3, 800d03a <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d034:	f3ef 8311 	mrs	r3, BASEPRI
 800d038:	b11b      	cbz	r3, 800d042 <osSemaphoreAcquire+0x42>
 800d03a:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <osSemaphoreAcquire+0x70>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d0e8      	beq.n	800d014 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d042:	4621      	mov	r1, r4
 800d044:	f001 f816 	bl	800e074 <xQueueSemaphoreTake>
 800d048:	2801      	cmp	r0, #1
 800d04a:	d0ee      	beq.n	800d02a <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800d04c:	b96c      	cbnz	r4, 800d06a <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800d04e:	f06f 0002 	mvn.w	r0, #2
 800d052:	e7da      	b.n	800d00a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800d054:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	e7df      	b.n	800d02a <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800d06a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d06e:	e7cc      	b.n	800d00a <osSemaphoreAcquire+0xa>
 800d070:	20012788 	.word	0x20012788

0800d074 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d074:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d076:	b370      	cbz	r0, 800d0d6 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d078:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800d07c:	b14b      	cbz	r3, 800d092 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800d07e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d080:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800d082:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d084:	f000 fef5 	bl	800de72 <xQueueGiveFromISR>
 800d088:	2801      	cmp	r0, #1
 800d08a:	d014      	beq.n	800d0b6 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800d08c:	f06f 0002 	mvn.w	r0, #2
 800d090:	e014      	b.n	800d0bc <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d092:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d096:	b913      	cbnz	r3, 800d09e <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d098:	f3ef 8311 	mrs	r3, BASEPRI
 800d09c:	b11b      	cbz	r3, 800d0a6 <osSemaphoreRelease+0x32>
 800d09e:	4b0f      	ldr	r3, [pc, #60]	; (800d0dc <osSemaphoreRelease+0x68>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d0eb      	beq.n	800d07e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f000 fd6b 	bl	800db86 <xQueueGenericSend>
 800d0b0:	2801      	cmp	r0, #1
 800d0b2:	d002      	beq.n	800d0ba <osSemaphoreRelease+0x46>
 800d0b4:	e7ea      	b.n	800d08c <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	b913      	cbnz	r3, 800d0c0 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800d0ba:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800d0bc:	b002      	add	sp, #8
 800d0be:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800d0c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	e7f1      	b.n	800d0ba <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800d0d6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d0da:	e7ef      	b.n	800d0bc <osSemaphoreRelease+0x48>
 800d0dc:	20012788 	.word	0x20012788

0800d0e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d0e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0e2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d0e8:	b11b      	cbz	r3, 800d0f2 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800d0ea:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	b002      	add	sp, #8
 800d0f0:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0f2:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d0f6:	b913      	cbnz	r3, 800d0fe <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d0fc:	b11b      	cbz	r3, 800d106 <osMessageQueueNew+0x26>
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <osMessageQueueNew+0x88>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b02      	cmp	r3, #2
 800d104:	d0f1      	beq.n	800d0ea <osMessageQueueNew+0xa>
 800d106:	2800      	cmp	r0, #0
 800d108:	d0ef      	beq.n	800d0ea <osMessageQueueNew+0xa>
 800d10a:	2900      	cmp	r1, #0
 800d10c:	d0ed      	beq.n	800d0ea <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800d10e:	b1ec      	cbz	r4, 800d14c <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d110:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800d114:	b193      	cbz	r3, 800d13c <osMessageQueueNew+0x5c>
 800d116:	2a4f      	cmp	r2, #79	; 0x4f
 800d118:	d9e7      	bls.n	800d0ea <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d11a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d11c:	2a00      	cmp	r2, #0
 800d11e:	d0e4      	beq.n	800d0ea <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d120:	fb01 f500 	mul.w	r5, r1, r0
 800d124:	6966      	ldr	r6, [r4, #20]
 800d126:	42ae      	cmp	r6, r5
 800d128:	d3df      	bcc.n	800d0ea <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d12a:	2500      	movs	r5, #0
 800d12c:	9500      	str	r5, [sp, #0]
 800d12e:	f000 fca5 	bl	800da7c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d132:	4605      	mov	r5, r0
 800d134:	2800      	cmp	r0, #0
 800d136:	d0d8      	beq.n	800d0ea <osMessageQueueNew+0xa>
        name = attr->name;
 800d138:	6824      	ldr	r4, [r4, #0]
 800d13a:	e00f      	b.n	800d15c <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d13c:	2a00      	cmp	r2, #0
 800d13e:	d1d4      	bne.n	800d0ea <osMessageQueueNew+0xa>
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1d1      	bne.n	800d0ea <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d146:	6963      	ldr	r3, [r4, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1ce      	bne.n	800d0ea <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d14c:	2200      	movs	r2, #0
 800d14e:	f000 fca9 	bl	800daa4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d152:	4605      	mov	r5, r0
 800d154:	2800      	cmp	r0, #0
 800d156:	d0c8      	beq.n	800d0ea <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800d158:	2c00      	cmp	r4, #0
 800d15a:	d1ed      	bne.n	800d138 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800d15c:	4621      	mov	r1, r4
 800d15e:	4628      	mov	r0, r5
 800d160:	f001 f8cc 	bl	800e2fc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d164:	e7c2      	b.n	800d0ec <osMessageQueueNew+0xc>
 800d166:	bf00      	nop
 800d168:	20012788 	.word	0x20012788

0800d16c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d16c:	b513      	push	{r0, r1, r4, lr}
 800d16e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d170:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d174:	b123      	cbz	r3, 800d180 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d176:	b9d8      	cbnz	r0, 800d1b0 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800d178:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d17c:	b002      	add	sp, #8
 800d17e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d180:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d184:	b913      	cbnz	r3, 800d18c <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d186:	f3ef 8311 	mrs	r3, BASEPRI
 800d18a:	b11b      	cbz	r3, 800d194 <osMessageQueuePut+0x28>
 800d18c:	4b17      	ldr	r3, [pc, #92]	; (800d1ec <osMessageQueuePut+0x80>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b02      	cmp	r3, #2
 800d192:	d0f0      	beq.n	800d176 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d194:	2800      	cmp	r0, #0
 800d196:	d0ef      	beq.n	800d178 <osMessageQueuePut+0xc>
 800d198:	2900      	cmp	r1, #0
 800d19a:	d0ed      	beq.n	800d178 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d19c:	2300      	movs	r3, #0
 800d19e:	4622      	mov	r2, r4
 800d1a0:	f000 fcf1 	bl	800db86 <xQueueGenericSend>
 800d1a4:	2801      	cmp	r0, #1
 800d1a6:	d010      	beq.n	800d1ca <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800d1a8:	b9e4      	cbnz	r4, 800d1e4 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800d1aa:	f06f 0002 	mvn.w	r0, #2
 800d1ae:	e7e5      	b.n	800d17c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1b0:	2900      	cmp	r1, #0
 800d1b2:	d0e1      	beq.n	800d178 <osMessageQueuePut+0xc>
 800d1b4:	2c00      	cmp	r4, #0
 800d1b6:	d1df      	bne.n	800d178 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d1bc:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1be:	f000 fdef 	bl	800dda0 <xQueueGenericSendFromISR>
 800d1c2:	2801      	cmp	r0, #1
 800d1c4:	d1f1      	bne.n	800d1aa <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800d1c6:	9b01      	ldr	r3, [sp, #4]
 800d1c8:	b90b      	cbnz	r3, 800d1ce <osMessageQueuePut+0x62>
  stat = osOK;
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	e7d6      	b.n	800d17c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800d1ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	e7f2      	b.n	800d1ca <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800d1e4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d1e8:	e7c8      	b.n	800d17c <osMessageQueuePut+0x10>
 800d1ea:	bf00      	nop
 800d1ec:	20012788 	.word	0x20012788

0800d1f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d1f0:	b513      	push	{r0, r1, r4, lr}
 800d1f2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1f4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d1f8:	b123      	cbz	r3, 800d204 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1fa:	b9d0      	cbnz	r0, 800d232 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800d1fc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d200:	b002      	add	sp, #8
 800d202:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d204:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d208:	b913      	cbnz	r3, 800d210 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d20a:	f3ef 8311 	mrs	r3, BASEPRI
 800d20e:	b11b      	cbz	r3, 800d218 <osMessageQueueGet+0x28>
 800d210:	4b16      	ldr	r3, [pc, #88]	; (800d26c <osMessageQueueGet+0x7c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d0f0      	beq.n	800d1fa <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0ef      	beq.n	800d1fc <osMessageQueueGet+0xc>
 800d21c:	2900      	cmp	r1, #0
 800d21e:	d0ed      	beq.n	800d1fc <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d220:	4622      	mov	r2, r4
 800d222:	f000 fe82 	bl	800df2a <xQueueReceive>
 800d226:	2801      	cmp	r0, #1
 800d228:	d00f      	beq.n	800d24a <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800d22a:	b9dc      	cbnz	r4, 800d264 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800d22c:	f06f 0002 	mvn.w	r0, #2
 800d230:	e7e6      	b.n	800d200 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d232:	2900      	cmp	r1, #0
 800d234:	d0e2      	beq.n	800d1fc <osMessageQueueGet+0xc>
 800d236:	2c00      	cmp	r4, #0
 800d238:	d1e0      	bne.n	800d1fc <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d23a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d23c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d23e:	f001 f808 	bl	800e252 <xQueueReceiveFromISR>
 800d242:	2801      	cmp	r0, #1
 800d244:	d1f2      	bne.n	800d22c <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800d246:	9b01      	ldr	r3, [sp, #4]
 800d248:	b90b      	cbnz	r3, 800d24e <osMessageQueueGet+0x5e>
  stat = osOK;
 800d24a:	2000      	movs	r0, #0
 800d24c:	e7d8      	b.n	800d200 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800d24e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d256:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	e7f2      	b.n	800d24a <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800d264:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d268:	e7ca      	b.n	800d200 <osMessageQueueGet+0x10>
 800d26a:	bf00      	nop
 800d26c:	20012788 	.word	0x20012788

0800d270 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d270:	4b03      	ldr	r3, [pc, #12]	; (800d280 <vApplicationGetIdleTaskMemory+0x10>)
 800d272:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d274:	4b03      	ldr	r3, [pc, #12]	; (800d284 <vApplicationGetIdleTaskMemory+0x14>)
 800d276:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d278:	2380      	movs	r3, #128	; 0x80
 800d27a:	6013      	str	r3, [r2, #0]
}
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	200126c8 	.word	0x200126c8
 800d284:	200124c8 	.word	0x200124c8

0800d288 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d288:	4b03      	ldr	r3, [pc, #12]	; (800d298 <vApplicationGetTimerTaskMemory+0x10>)
 800d28a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d28c:	4b03      	ldr	r3, [pc, #12]	; (800d29c <vApplicationGetTimerTaskMemory+0x14>)
 800d28e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d290:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d294:	6013      	str	r3, [r2, #0]
}
 800d296:	4770      	bx	lr
 800d298:	20012b8c 	.word	0x20012b8c
 800d29c:	2001278c 	.word	0x2001278c

0800d2a0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <prvInsertBlockIntoFreeList+0x40>)
{
 800d2a2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4283      	cmp	r3, r0
 800d2aa:	d3fb      	bcc.n	800d2a4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ac:	6854      	ldr	r4, [r2, #4]
 800d2ae:	1911      	adds	r1, r2, r4
 800d2b0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2b2:	bf01      	itttt	eq
 800d2b4:	6841      	ldreq	r1, [r0, #4]
 800d2b6:	4610      	moveq	r0, r2
 800d2b8:	1909      	addeq	r1, r1, r4
 800d2ba:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2bc:	6844      	ldr	r4, [r0, #4]
 800d2be:	1901      	adds	r1, r0, r4
 800d2c0:	428b      	cmp	r3, r1
 800d2c2:	d107      	bne.n	800d2d4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2c4:	4907      	ldr	r1, [pc, #28]	; (800d2e4 <prvInsertBlockIntoFreeList+0x44>)
 800d2c6:	6809      	ldr	r1, [r1, #0]
 800d2c8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2ca:	bf1f      	itttt	ne
 800d2cc:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2ce:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2d0:	1909      	addne	r1, r1, r4
 800d2d2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2d4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2d6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2d8:	bf18      	it	ne
 800d2da:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2dc:	bd10      	pop	{r4, pc}
 800d2de:	bf00      	nop
 800d2e0:	200264dc 	.word	0x200264dc
 800d2e4:	20012c4c 	.word	0x20012c4c

0800d2e8 <pvPortMalloc>:
{
 800d2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800d2ec:	4f41      	ldr	r7, [pc, #260]	; (800d3f4 <pvPortMalloc+0x10c>)
{
 800d2ee:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d2f0:	f001 fa4e 	bl	800e790 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d2f4:	4840      	ldr	r0, [pc, #256]	; (800d3f8 <pvPortMalloc+0x110>)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	b9f3      	cbnz	r3, 800d338 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d2fa:	4940      	ldr	r1, [pc, #256]	; (800d3fc <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d2fc:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2fe:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d300:	4d3f      	ldr	r5, [pc, #252]	; (800d400 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d302:	bf1b      	ittet	ne
 800d304:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d306:	4a3f      	ldrne	r2, [pc, #252]	; (800d404 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d308:	4a3f      	ldreq	r2, [pc, #252]	; (800d408 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d30a:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d30e:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d310:	bf18      	it	ne
 800d312:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d314:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d316:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800d318:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d31a:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d31e:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d322:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800d324:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d326:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d32a:	4a38      	ldr	r2, [pc, #224]	; (800d40c <pvPortMalloc+0x124>)
 800d32c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d32e:	4a38      	ldr	r2, [pc, #224]	; (800d410 <pvPortMalloc+0x128>)
 800d330:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d336:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d338:	f8d0 8000 	ldr.w	r8, [r0]
 800d33c:	ea18 0f04 	tst.w	r8, r4
 800d340:	d152      	bne.n	800d3e8 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800d342:	2c00      	cmp	r4, #0
 800d344:	d041      	beq.n	800d3ca <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800d346:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d34a:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d34c:	bf1c      	itt	ne
 800d34e:	f023 0307 	bicne.w	r3, r3, #7
 800d352:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d354:	2b00      	cmp	r3, #0
 800d356:	d047      	beq.n	800d3e8 <pvPortMalloc+0x100>
 800d358:	4c2d      	ldr	r4, [pc, #180]	; (800d410 <pvPortMalloc+0x128>)
 800d35a:	6826      	ldr	r6, [r4, #0]
 800d35c:	429e      	cmp	r6, r3
 800d35e:	d343      	bcc.n	800d3e8 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800d360:	4a27      	ldr	r2, [pc, #156]	; (800d400 <pvPortMalloc+0x118>)
 800d362:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d364:	6869      	ldr	r1, [r5, #4]
 800d366:	4299      	cmp	r1, r3
 800d368:	d201      	bcs.n	800d36e <pvPortMalloc+0x86>
 800d36a:	6828      	ldr	r0, [r5, #0]
 800d36c:	b9b0      	cbnz	r0, 800d39c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800d36e:	6838      	ldr	r0, [r7, #0]
 800d370:	42a8      	cmp	r0, r5
 800d372:	d039      	beq.n	800d3e8 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d374:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d376:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d378:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d37a:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d37c:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d37e:	d914      	bls.n	800d3aa <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d380:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d382:	0742      	lsls	r2, r0, #29
 800d384:	d00d      	beq.n	800d3a2 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	b672      	cpsid	i
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	b662      	cpsie	i
 800d39a:	e7fe      	b.n	800d39a <pvPortMalloc+0xb2>
 800d39c:	462a      	mov	r2, r5
 800d39e:	4605      	mov	r5, r0
 800d3a0:	e7e0      	b.n	800d364 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3a2:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3a4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3a6:	f7ff ff7b 	bl	800d2a0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3aa:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3ac:	4917      	ldr	r1, [pc, #92]	; (800d40c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3ae:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3b0:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3b4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3b6:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3b8:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3bc:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3be:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3c0:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3c4:	bf38      	it	cc
 800d3c6:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800d3c8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800d3ca:	f001 fa87 	bl	800e8dc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3ce:	0763      	lsls	r3, r4, #29
 800d3d0:	d00c      	beq.n	800d3ec <pvPortMalloc+0x104>
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	b672      	cpsid	i
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	b662      	cpsie	i
 800d3e6:	e7fe      	b.n	800d3e6 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800d3e8:	2400      	movs	r4, #0
 800d3ea:	e7ee      	b.n	800d3ca <pvPortMalloc+0xe2>
}
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20012c4c 	.word	0x20012c4c
 800d3f8:	200264d0 	.word	0x200264d0
 800d3fc:	20012c50 	.word	0x20012c50
 800d400:	200264dc 	.word	0x200264dc
 800d404:	200264d0 	.word	0x200264d0
 800d408:	00013880 	.word	0x00013880
 800d40c:	200264d8 	.word	0x200264d8
 800d410:	200264d4 	.word	0x200264d4

0800d414 <vPortFree>:
{
 800d414:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d416:	4604      	mov	r4, r0
 800d418:	2800      	cmp	r0, #0
 800d41a:	d032      	beq.n	800d482 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d41c:	4a19      	ldr	r2, [pc, #100]	; (800d484 <vPortFree+0x70>)
 800d41e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d422:	6812      	ldr	r2, [r2, #0]
 800d424:	4213      	tst	r3, r2
 800d426:	d10a      	bne.n	800d43e <vPortFree+0x2a>
 800d428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42c:	b672      	cpsid	i
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	b662      	cpsie	i
 800d43c:	e7fe      	b.n	800d43c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d43e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d442:	b151      	cbz	r1, 800d45a <vPortFree+0x46>
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	b672      	cpsid	i
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	b662      	cpsie	i
 800d458:	e7fe      	b.n	800d458 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d45a:	ea23 0302 	bic.w	r3, r3, r2
 800d45e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d462:	f001 f995 	bl	800e790 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d466:	4a08      	ldr	r2, [pc, #32]	; (800d488 <vPortFree+0x74>)
 800d468:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d46c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d470:	6811      	ldr	r1, [r2, #0]
 800d472:	440b      	add	r3, r1
 800d474:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d476:	f7ff ff13 	bl	800d2a0 <prvInsertBlockIntoFreeList>
}
 800d47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800d47e:	f001 ba2d 	b.w	800e8dc <xTaskResumeAll>
}
 800d482:	bd10      	pop	{r4, pc}
 800d484:	200264d0 	.word	0x200264d0
 800d488:	200264d4 	.word	0x200264d4

0800d48c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d48c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d490:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d494:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d496:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d498:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d49c:	2300      	movs	r3, #0
 800d49e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4a0:	4770      	bx	lr

0800d4a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4a6:	4770      	bx	lr

0800d4a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4a8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4aa:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d4ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4b0:	689a      	ldr	r2, [r3, #8]
 800d4b2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4b4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d4b6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d4b8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	6003      	str	r3, [r0, #0]
}
 800d4be:	4770      	bx	lr

0800d4c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4c0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4c2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4c4:	1c63      	adds	r3, r4, #1
 800d4c6:	d10a      	bne.n	800d4de <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4c8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4ce:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4d0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4d2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d4d4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d4d6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d4d8:	3301      	adds	r3, #1
 800d4da:	6003      	str	r3, [r0, #0]
}
 800d4dc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4de:	f100 0208 	add.w	r2, r0, #8
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	6852      	ldr	r2, [r2, #4]
 800d4e6:	6815      	ldr	r5, [r2, #0]
 800d4e8:	42a5      	cmp	r5, r4
 800d4ea:	d9fa      	bls.n	800d4e2 <vListInsert+0x22>
 800d4ec:	e7ed      	b.n	800d4ca <vListInsert+0xa>

0800d4ee <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4ee:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4f0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d4f4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4f6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4f8:	6859      	ldr	r1, [r3, #4]
 800d4fa:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4fc:	bf08      	it	eq
 800d4fe:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d500:	2200      	movs	r2, #0
 800d502:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	3a01      	subs	r2, #1
 800d508:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d50a:	6818      	ldr	r0, [r3, #0]
}
 800d50c:	4770      	bx	lr
	...

0800d510 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d510:	4808      	ldr	r0, [pc, #32]	; (800d534 <prvPortStartFirstTask+0x24>)
 800d512:	6800      	ldr	r0, [r0, #0]
 800d514:	6800      	ldr	r0, [r0, #0]
 800d516:	f380 8808 	msr	MSP, r0
 800d51a:	f04f 0000 	mov.w	r0, #0
 800d51e:	f380 8814 	msr	CONTROL, r0
 800d522:	b662      	cpsie	i
 800d524:	b661      	cpsie	f
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	df00      	svc	0
 800d530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d532:	0000      	.short	0x0000
 800d534:	e000ed08 	.word	0xe000ed08

0800d538 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d538:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d548 <vPortEnableVFP+0x10>
 800d53c:	6801      	ldr	r1, [r0, #0]
 800d53e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d542:	6001      	str	r1, [r0, #0]
 800d544:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d546:	0000      	.short	0x0000
 800d548:	e000ed88 	.word	0xe000ed88

0800d54c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d54c:	2300      	movs	r3, #0
{
 800d54e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d550:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d552:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <prvTaskExitError+0x44>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3301      	adds	r3, #1
 800d558:	d00a      	beq.n	800d570 <prvTaskExitError+0x24>
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	b672      	cpsid	i
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	b662      	cpsie	i
 800d56e:	e7fe      	b.n	800d56e <prvTaskExitError+0x22>
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	b672      	cpsid	i
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	b662      	cpsie	i
	while( ulDummy == 0 )
 800d584:	9b01      	ldr	r3, [sp, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d0fc      	beq.n	800d584 <prvTaskExitError+0x38>
}
 800d58a:	b002      	add	sp, #8
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	2000006c 	.word	0x2000006c

0800d594 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d598:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d59c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d5a0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5a2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5a4:	4b03      	ldr	r3, [pc, #12]	; (800d5b4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5a6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5a8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5aa:	f06f 0302 	mvn.w	r3, #2
 800d5ae:	6203      	str	r3, [r0, #32]
}
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	0800d54d 	.word	0x0800d54d
	...

0800d5c0 <SVC_Handler>:
	__asm volatile (
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <pxCurrentTCBConst2>)
 800d5c2:	6819      	ldr	r1, [r3, #0]
 800d5c4:	6808      	ldr	r0, [r1, #0]
 800d5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ca:	f380 8809 	msr	PSP, r0
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f04f 0000 	mov.w	r0, #0
 800d5d6:	f380 8811 	msr	BASEPRI, r0
 800d5da:	4770      	bx	lr
 800d5dc:	f3af 8000 	nop.w

0800d5e0 <pxCurrentTCBConst2>:
 800d5e0:	2002652c 	.word	0x2002652c

0800d5e4 <vPortEnterCritical>:
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	b672      	cpsid	i
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	b662      	cpsie	i
	uxCriticalNesting++;
 800d5f8:	4a0b      	ldr	r2, [pc, #44]	; (800d628 <vPortEnterCritical+0x44>)
 800d5fa:	6813      	ldr	r3, [r2, #0]
 800d5fc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d5fe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d602:	d110      	bne.n	800d626 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d604:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d608:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	b153      	cbz	r3, 800d626 <vPortEnterCritical+0x42>
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	b672      	cpsid	i
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	b662      	cpsie	i
 800d624:	e7fe      	b.n	800d624 <vPortEnterCritical+0x40>
}
 800d626:	4770      	bx	lr
 800d628:	2000006c 	.word	0x2000006c

0800d62c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d62c:	4a09      	ldr	r2, [pc, #36]	; (800d654 <vPortExitCritical+0x28>)
 800d62e:	6813      	ldr	r3, [r2, #0]
 800d630:	b953      	cbnz	r3, 800d648 <vPortExitCritical+0x1c>
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	b672      	cpsid	i
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	b662      	cpsie	i
 800d646:	e7fe      	b.n	800d646 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800d648:	3b01      	subs	r3, #1
 800d64a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d64c:	b90b      	cbnz	r3, 800d652 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d64e:	f383 8811 	msr	BASEPRI, r3
}
 800d652:	4770      	bx	lr
 800d654:	2000006c 	.word	0x2000006c
	...

0800d660 <PendSV_Handler>:
	__asm volatile
 800d660:	f3ef 8009 	mrs	r0, PSP
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	4b15      	ldr	r3, [pc, #84]	; (800d6c0 <pxCurrentTCBConst>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	f01e 0f10 	tst.w	lr, #16
 800d670:	bf08      	it	eq
 800d672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67a:	6010      	str	r0, [r2, #0]
 800d67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d684:	b672      	cpsid	i
 800d686:	f380 8811 	msr	BASEPRI, r0
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	b662      	cpsie	i
 800d694:	f001 fa0c 	bl	800eab0 <vTaskSwitchContext>
 800d698:	f04f 0000 	mov.w	r0, #0
 800d69c:	f380 8811 	msr	BASEPRI, r0
 800d6a0:	bc09      	pop	{r0, r3}
 800d6a2:	6819      	ldr	r1, [r3, #0]
 800d6a4:	6808      	ldr	r0, [r1, #0]
 800d6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6aa:	f01e 0f10 	tst.w	lr, #16
 800d6ae:	bf08      	it	eq
 800d6b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6b4:	f380 8809 	msr	PSP, r0
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop

0800d6c0 <pxCurrentTCBConst>:
 800d6c0:	2002652c 	.word	0x2002652c

0800d6c4 <SysTick_Handler>:
{
 800d6c4:	b508      	push	{r3, lr}
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	b672      	cpsid	i
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800d6da:	f001 f867 	bl	800e7ac <xTaskIncrementTick>
 800d6de:	b128      	cbz	r0, 800d6ec <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f383 8811 	msr	BASEPRI, r3
}
 800d6f2:	bd08      	pop	{r3, pc}

0800d6f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800d6f8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6fe:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d700:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d702:	4b04      	ldr	r3, [pc, #16]	; (800d714 <vPortSetupTimerInterrupt+0x20>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	fbb3 f3f1 	udiv	r3, r3, r1
 800d70a:	3b01      	subs	r3, #1
 800d70c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d70e:	2307      	movs	r3, #7
 800d710:	6113      	str	r3, [r2, #16]
}
 800d712:	4770      	bx	lr
 800d714:	20000060 	.word	0x20000060

0800d718 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d718:	4b2e      	ldr	r3, [pc, #184]	; (800d7d4 <xPortStartScheduler+0xbc>)
{
 800d71a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d71c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d71e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d720:	b2d2      	uxtb	r2, r2
 800d722:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d724:	22ff      	movs	r2, #255	; 0xff
 800d726:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d728:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d72a:	4a2b      	ldr	r2, [pc, #172]	; (800d7d8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d732:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d736:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d73a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d73c:	2307      	movs	r3, #7
 800d73e:	4a27      	ldr	r2, [pc, #156]	; (800d7dc <xPortStartScheduler+0xc4>)
 800d740:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d742:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d746:	1e5c      	subs	r4, r3, #1
 800d748:	0600      	lsls	r0, r0, #24
 800d74a:	d40e      	bmi.n	800d76a <xPortStartScheduler+0x52>
 800d74c:	b111      	cbz	r1, 800d754 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d74e:	2b03      	cmp	r3, #3
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	d013      	beq.n	800d77c <xPortStartScheduler+0x64>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d758:	b672      	cpsid	i
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	b662      	cpsie	i
 800d768:	e7fe      	b.n	800d768 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d76a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d76e:	2101      	movs	r1, #1
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f88d 3003 	strb.w	r3, [sp, #3]
 800d778:	4623      	mov	r3, r4
 800d77a:	e7e2      	b.n	800d742 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d77c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d780:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800d784:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d786:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	4a12      	ldr	r2, [pc, #72]	; (800d7d4 <xPortStartScheduler+0xbc>)
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d790:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800d794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d798:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d79c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800d7a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7a4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800d7a8:	f7ff ffa4 	bl	800d6f4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d7ac:	4b0c      	ldr	r3, [pc, #48]	; (800d7e0 <xPortStartScheduler+0xc8>)
 800d7ae:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d7b0:	f7ff fec2 	bl	800d538 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7b4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800d7b8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7bc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800d7c0:	f7ff fea6 	bl	800d510 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d7c4:	f001 f974 	bl	800eab0 <vTaskSwitchContext>
}
 800d7c8:	4628      	mov	r0, r5
	prvTaskExitError();
 800d7ca:	f7ff febf 	bl	800d54c <prvTaskExitError>
}
 800d7ce:	b003      	add	sp, #12
 800d7d0:	bd30      	pop	{r4, r5, pc}
 800d7d2:	bf00      	nop
 800d7d4:	e000e400 	.word	0xe000e400
 800d7d8:	200264e4 	.word	0x200264e4
 800d7dc:	200264e8 	.word	0x200264e8
 800d7e0:	2000006c 	.word	0x2000006c

0800d7e4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7e4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d7e8:	2b0f      	cmp	r3, #15
 800d7ea:	d910      	bls.n	800d80e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d7ec:	4a13      	ldr	r2, [pc, #76]	; (800d83c <vPortValidateInterruptPriority+0x58>)
 800d7ee:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d7f0:	4a13      	ldr	r2, [pc, #76]	; (800d840 <vPortValidateInterruptPriority+0x5c>)
 800d7f2:	7812      	ldrb	r2, [r2, #0]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d90a      	bls.n	800d80e <vPortValidateInterruptPriority+0x2a>
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	b672      	cpsid	i
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	b662      	cpsie	i
 800d80c:	e7fe      	b.n	800d80c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d80e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d812:	4a0c      	ldr	r2, [pc, #48]	; (800d844 <vPortValidateInterruptPriority+0x60>)
 800d814:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800d818:	6812      	ldr	r2, [r2, #0]
 800d81a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d81e:	4293      	cmp	r3, r2
 800d820:	d90a      	bls.n	800d838 <vPortValidateInterruptPriority+0x54>
 800d822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d826:	b672      	cpsid	i
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	b662      	cpsie	i
 800d836:	e7fe      	b.n	800d836 <vPortValidateInterruptPriority+0x52>
	}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	e000e3f0 	.word	0xe000e3f0
 800d840:	200264e4 	.word	0x200264e4
 800d844:	200264e8 	.word	0x200264e8

0800d848 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d848:	b510      	push	{r4, lr}
 800d84a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d84c:	f7ff feca 	bl	800d5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d850:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d852:	f7ff feeb 	bl	800d62c <vPortExitCritical>

	return xReturn;
}
 800d856:	fab4 f084 	clz	r0, r4
 800d85a:	0940      	lsrs	r0, r0, #5
 800d85c:	bd10      	pop	{r4, pc}

0800d85e <prvCopyDataToQueue>:
{
 800d85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d860:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d862:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d864:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d866:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d868:	b952      	cbnz	r2, 800d880 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d86a:	6807      	ldr	r7, [r0, #0]
 800d86c:	bb47      	cbnz	r7, 800d8c0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d86e:	6880      	ldr	r0, [r0, #8]
 800d870:	f001 fa92 	bl	800ed98 <xTaskPriorityDisinherit>
 800d874:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d876:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d878:	3601      	adds	r6, #1
}
 800d87a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d87c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800d87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d880:	b965      	cbnz	r5, 800d89c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d882:	6840      	ldr	r0, [r0, #4]
 800d884:	f018 fadc 	bl	8025e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d888:	6863      	ldr	r3, [r4, #4]
 800d88a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d88c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d88e:	68a2      	ldr	r2, [r4, #8]
 800d890:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d892:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d894:	d3f0      	bcc.n	800d878 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	6063      	str	r3, [r4, #4]
 800d89a:	e7ed      	b.n	800d878 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d89c:	68c0      	ldr	r0, [r0, #12]
 800d89e:	f018 facf 	bl	8025e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d8a4:	68e3      	ldr	r3, [r4, #12]
 800d8a6:	4251      	negs	r1, r2
 800d8a8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8aa:	6822      	ldr	r2, [r4, #0]
 800d8ac:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8ae:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8b0:	bf3e      	ittt	cc
 800d8b2:	68a3      	ldrcc	r3, [r4, #8]
 800d8b4:	185b      	addcc	r3, r3, r1
 800d8b6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d8b8:	2d02      	cmp	r5, #2
 800d8ba:	d101      	bne.n	800d8c0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8bc:	b116      	cbz	r6, 800d8c4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800d8be:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800d8c0:	2500      	movs	r5, #0
 800d8c2:	e7d9      	b.n	800d878 <prvCopyDataToQueue+0x1a>
 800d8c4:	4635      	mov	r5, r6
 800d8c6:	e7d7      	b.n	800d878 <prvCopyDataToQueue+0x1a>

0800d8c8 <prvCopyDataFromQueue>:
{
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800d8ce:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8d0:	b162      	cbz	r2, 800d8ec <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8d2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8d4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8d6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8d8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8da:	60dc      	str	r4, [r3, #12]
}
 800d8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8e0:	bf24      	itt	cs
 800d8e2:	6819      	ldrcs	r1, [r3, #0]
 800d8e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8e6:	68d9      	ldr	r1, [r3, #12]
 800d8e8:	f018 baaa 	b.w	8025e40 <memcpy>
}
 800d8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <prvUnlockQueue>:
{
 800d8f2:	b570      	push	{r4, r5, r6, lr}
 800d8f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d8f6:	f7ff fe75 	bl	800d5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d8fa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8fe:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d902:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d904:	2d00      	cmp	r5, #0
 800d906:	dc14      	bgt.n	800d932 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d908:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d90a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d90e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d912:	f7ff fe8b 	bl	800d62c <vPortExitCritical>
	taskENTER_CRITICAL();
 800d916:	f7ff fe65 	bl	800d5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d91a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d91e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d920:	2d00      	cmp	r5, #0
 800d922:	dc12      	bgt.n	800d94a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d924:	23ff      	movs	r3, #255	; 0xff
 800d926:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800d92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d92e:	f7ff be7d 	b.w	800d62c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d934:	2b00      	cmp	r3, #0
 800d936:	d0e7      	beq.n	800d908 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d938:	4630      	mov	r0, r6
 800d93a:	f001 f93f 	bl	800ebbc <xTaskRemoveFromEventList>
 800d93e:	b108      	cbz	r0, 800d944 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d940:	f001 f9ce 	bl	800ece0 <vTaskMissedYield>
			--cTxLock;
 800d944:	3d01      	subs	r5, #1
 800d946:	b26d      	sxtb	r5, r5
 800d948:	e7dc      	b.n	800d904 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d94a:	6923      	ldr	r3, [r4, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0e9      	beq.n	800d924 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d950:	4630      	mov	r0, r6
 800d952:	f001 f933 	bl	800ebbc <xTaskRemoveFromEventList>
 800d956:	b108      	cbz	r0, 800d95c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d958:	f001 f9c2 	bl	800ece0 <vTaskMissedYield>
				--cRxLock;
 800d95c:	3d01      	subs	r5, #1
 800d95e:	b26d      	sxtb	r5, r5
 800d960:	e7de      	b.n	800d920 <prvUnlockQueue+0x2e>

0800d962 <xQueueGenericReset>:
{
 800d962:	b538      	push	{r3, r4, r5, lr}
 800d964:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d966:	4604      	mov	r4, r0
 800d968:	b950      	cbnz	r0, 800d980 <xQueueGenericReset+0x1e>
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	b672      	cpsid	i
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	b662      	cpsie	i
 800d97e:	e7fe      	b.n	800d97e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800d980:	f7ff fe30 	bl	800d5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d984:	6822      	ldr	r2, [r4, #0]
 800d986:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d98a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d98c:	434b      	muls	r3, r1
 800d98e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d990:	1a5b      	subs	r3, r3, r1
 800d992:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d994:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d996:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d998:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d99a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d99c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d99e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800d9a6:	b9a5      	cbnz	r5, 800d9d2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9a8:	6923      	ldr	r3, [r4, #16]
 800d9aa:	b173      	cbz	r3, 800d9ca <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ac:	f104 0010 	add.w	r0, r4, #16
 800d9b0:	f001 f904 	bl	800ebbc <xTaskRemoveFromEventList>
 800d9b4:	b148      	cbz	r0, 800d9ca <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800d9b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d9ca:	f7ff fe2f 	bl	800d62c <vPortExitCritical>
}
 800d9ce:	2001      	movs	r0, #1
 800d9d0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d9d2:	f104 0010 	add.w	r0, r4, #16
 800d9d6:	f7ff fd59 	bl	800d48c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d9da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d9de:	f7ff fd55 	bl	800d48c <vListInitialise>
 800d9e2:	e7f2      	b.n	800d9ca <xQueueGenericReset+0x68>

0800d9e4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800d9e4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 800d9e6:	461c      	mov	r4, r3
 800d9e8:	b953      	cbnz	r3, 800da00 <xQueueGenericCreateStatic.part.0+0x1c>
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	b672      	cpsid	i
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	b662      	cpsie	i
 800d9fe:	e7fe      	b.n	800d9fe <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da00:	b15a      	cbz	r2, 800da1a <xQueueGenericCreateStatic.part.0+0x36>
 800da02:	b9b1      	cbnz	r1, 800da32 <xQueueGenericCreateStatic.part.0+0x4e>
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	b672      	cpsid	i
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	b662      	cpsie	i
 800da18:	e7fe      	b.n	800da18 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da1a:	b151      	cbz	r1, 800da32 <xQueueGenericCreateStatic.part.0+0x4e>
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	b672      	cpsid	i
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	b662      	cpsie	i
 800da30:	e7fe      	b.n	800da30 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da32:	2350      	movs	r3, #80	; 0x50
 800da34:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	2b50      	cmp	r3, #80	; 0x50
 800da3a:	d00a      	beq.n	800da52 <xQueueGenericCreateStatic.part.0+0x6e>
 800da3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da40:	b672      	cpsid	i
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	b662      	cpsie	i
 800da50:	e7fe      	b.n	800da50 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800da52:	2900      	cmp	r1, #0
 800da54:	bf08      	it	eq
 800da56:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da58:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da5a:	2301      	movs	r3, #1
 800da5c:	6022      	str	r2, [r4, #0]
 800da5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800da62:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da66:	4619      	mov	r1, r3
 800da68:	4620      	mov	r0, r4
 800da6a:	f7ff ff7a 	bl	800d962 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800da6e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800da72:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800da74:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800da78:	b002      	add	sp, #8
 800da7a:	bd10      	pop	{r4, pc}

0800da7c <xQueueGenericCreateStatic>:
	{
 800da7c:	b410      	push	{r4}
 800da7e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da82:	b950      	cbnz	r0, 800da9a <xQueueGenericCreateStatic+0x1e>
 800da84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da88:	b672      	cpsid	i
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	b662      	cpsie	i
 800da98:	e7fe      	b.n	800da98 <xQueueGenericCreateStatic+0x1c>
 800da9a:	9401      	str	r4, [sp, #4]
	}
 800da9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daa0:	f7ff bfa0 	b.w	800d9e4 <xQueueGenericCreateStatic.part.0>

0800daa4 <xQueueGenericCreate>:
	{
 800daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa6:	460d      	mov	r5, r1
 800daa8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800daaa:	4606      	mov	r6, r0
 800daac:	b950      	cbnz	r0, 800dac4 <xQueueGenericCreate+0x20>
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	b672      	cpsid	i
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	b662      	cpsie	i
 800dac2:	e7fe      	b.n	800dac2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dac4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dac6:	3050      	adds	r0, #80	; 0x50
 800dac8:	f7ff fc0e 	bl	800d2e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800dacc:	4604      	mov	r4, r0
 800dace:	b170      	cbz	r0, 800daee <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dad0:	2300      	movs	r3, #0
 800dad2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dad6:	b165      	cbz	r5, 800daf2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dad8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dadc:	2101      	movs	r1, #1
 800dade:	4620      	mov	r0, r4
 800dae0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800dae2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dae6:	f7ff ff3c 	bl	800d962 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800daea:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800daee:	4620      	mov	r0, r4
 800daf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf2:	4603      	mov	r3, r0
 800daf4:	e7f2      	b.n	800dadc <xQueueGenericCreate+0x38>

0800daf6 <xQueueCreateCountingSemaphoreStatic>:
	{
 800daf6:	b513      	push	{r0, r1, r4, lr}
 800daf8:	4613      	mov	r3, r2
 800dafa:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dafc:	b950      	cbnz	r0, 800db14 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	b672      	cpsid	i
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	b662      	cpsie	i
 800db12:	e7fe      	b.n	800db12 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db14:	4288      	cmp	r0, r1
 800db16:	d20a      	bcs.n	800db2e <xQueueCreateCountingSemaphoreStatic+0x38>
 800db18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1c:	b672      	cpsid	i
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	b662      	cpsie	i
 800db2c:	e7fe      	b.n	800db2c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db2e:	2202      	movs	r2, #2
 800db30:	9200      	str	r2, [sp, #0]
 800db32:	2200      	movs	r2, #0
 800db34:	4611      	mov	r1, r2
 800db36:	f7ff ffa1 	bl	800da7c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800db3a:	b100      	cbz	r0, 800db3e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800db3c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800db3e:	b002      	add	sp, #8
 800db40:	bd10      	pop	{r4, pc}

0800db42 <xQueueCreateCountingSemaphore>:
	{
 800db42:	b510      	push	{r4, lr}
 800db44:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800db46:	b950      	cbnz	r0, 800db5e <xQueueCreateCountingSemaphore+0x1c>
 800db48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4c:	b672      	cpsid	i
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	b662      	cpsie	i
 800db5c:	e7fe      	b.n	800db5c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db5e:	4288      	cmp	r0, r1
 800db60:	d20a      	bcs.n	800db78 <xQueueCreateCountingSemaphore+0x36>
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	b672      	cpsid	i
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	b662      	cpsie	i
 800db76:	e7fe      	b.n	800db76 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db78:	2202      	movs	r2, #2
 800db7a:	2100      	movs	r1, #0
 800db7c:	f7ff ff92 	bl	800daa4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800db80:	b100      	cbz	r0, 800db84 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800db82:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800db84:	bd10      	pop	{r4, pc}

0800db86 <xQueueGenericSend>:
{
 800db86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db8a:	b085      	sub	sp, #20
 800db8c:	4688      	mov	r8, r1
 800db8e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800db90:	4604      	mov	r4, r0
{
 800db92:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800db94:	b950      	cbnz	r0, 800dbac <xQueueGenericSend+0x26>
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	b672      	cpsid	i
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	b662      	cpsie	i
 800dbaa:	e7fe      	b.n	800dbaa <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbac:	b961      	cbnz	r1, 800dbc8 <xQueueGenericSend+0x42>
 800dbae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dbb0:	b153      	cbz	r3, 800dbc8 <xQueueGenericSend+0x42>
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	b672      	cpsid	i
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	b662      	cpsie	i
 800dbc6:	e7fe      	b.n	800dbc6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbc8:	2f02      	cmp	r7, #2
 800dbca:	d10d      	bne.n	800dbe8 <xQueueGenericSend+0x62>
 800dbcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d00a      	beq.n	800dbe8 <xQueueGenericSend+0x62>
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	b672      	cpsid	i
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	b662      	cpsie	i
 800dbe6:	e7fe      	b.n	800dbe6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbe8:	f001 f886 	bl	800ecf8 <xTaskGetSchedulerState>
 800dbec:	4606      	mov	r6, r0
 800dbee:	b960      	cbnz	r0, 800dc0a <xQueueGenericSend+0x84>
 800dbf0:	9b01      	ldr	r3, [sp, #4]
 800dbf2:	b15b      	cbz	r3, 800dc0c <xQueueGenericSend+0x86>
 800dbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf8:	b672      	cpsid	i
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	b662      	cpsie	i
 800dc08:	e7fe      	b.n	800dc08 <xQueueGenericSend+0x82>
 800dc0a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dc0c:	f04f 0900 	mov.w	r9, #0
 800dc10:	e037      	b.n	800dc82 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc12:	9d01      	ldr	r5, [sp, #4]
 800dc14:	b91d      	cbnz	r5, 800dc1e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800dc16:	f7ff fd09 	bl	800d62c <vPortExitCritical>
			return errQUEUE_FULL;
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	e052      	b.n	800dcc4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800dc1e:	b916      	cbnz	r6, 800dc26 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc20:	a802      	add	r0, sp, #8
 800dc22:	f001 f811 	bl	800ec48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dc26:	f7ff fd01 	bl	800d62c <vPortExitCritical>
		vTaskSuspendAll();
 800dc2a:	f000 fdb1 	bl	800e790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc2e:	f7ff fcd9 	bl	800d5e4 <vPortEnterCritical>
 800dc32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc36:	2bff      	cmp	r3, #255	; 0xff
 800dc38:	d101      	bne.n	800dc3e <xQueueGenericSend+0xb8>
 800dc3a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800dc3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc42:	2bff      	cmp	r3, #255	; 0xff
 800dc44:	d101      	bne.n	800dc4a <xQueueGenericSend+0xc4>
 800dc46:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800dc4a:	f7ff fcef 	bl	800d62c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc4e:	a901      	add	r1, sp, #4
 800dc50:	a802      	add	r0, sp, #8
 800dc52:	f001 f805 	bl	800ec60 <xTaskCheckForTimeOut>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d14a      	bne.n	800dcf0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc5a:	f7ff fcc3 	bl	800d5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dc60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d131      	bne.n	800dcca <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dc66:	f7ff fce1 	bl	800d62c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc6a:	9901      	ldr	r1, [sp, #4]
 800dc6c:	f104 0010 	add.w	r0, r4, #16
 800dc70:	f000 ff68 	bl	800eb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc74:	4620      	mov	r0, r4
 800dc76:	f7ff fe3c 	bl	800d8f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc7a:	f000 fe2f 	bl	800e8dc <xTaskResumeAll>
 800dc7e:	b360      	cbz	r0, 800dcda <xQueueGenericSend+0x154>
 800dc80:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dc82:	f7ff fcaf 	bl	800d5e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dc88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d301      	bcc.n	800dc92 <xQueueGenericSend+0x10c>
 800dc8e:	2f02      	cmp	r7, #2
 800dc90:	d1bf      	bne.n	800dc12 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc92:	463a      	mov	r2, r7
 800dc94:	4641      	mov	r1, r8
 800dc96:	4620      	mov	r0, r4
 800dc98:	f7ff fde1 	bl	800d85e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc9e:	b11b      	cbz	r3, 800dca8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dca4:	f000 ff8a 	bl	800ebbc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800dca8:	b148      	cbz	r0, 800dcbe <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800dcaa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dcb6:	f3bf 8f4f 	dsb	sy
 800dcba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dcbe:	f7ff fcb5 	bl	800d62c <vPortExitCritical>
				return pdPASS;
 800dcc2:	2001      	movs	r0, #1
}
 800dcc4:	b005      	add	sp, #20
 800dcc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800dcca:	f7ff fcaf 	bl	800d62c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f7ff fe0f 	bl	800d8f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcd4:	f000 fe02 	bl	800e8dc <xTaskResumeAll>
 800dcd8:	e7d2      	b.n	800dc80 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800dcda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	e7c7      	b.n	800dc80 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f7ff fdfe 	bl	800d8f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcf6:	f000 fdf1 	bl	800e8dc <xTaskResumeAll>
 800dcfa:	e78e      	b.n	800dc1a <xQueueGenericSend+0x94>

0800dcfc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dcfc:	2200      	movs	r2, #0
	{
 800dcfe:	460b      	mov	r3, r1
 800dd00:	b513      	push	{r0, r1, r4, lr}
 800dd02:	4611      	mov	r1, r2
 800dd04:	9000      	str	r0, [sp, #0]
 800dd06:	2001      	movs	r0, #1
 800dd08:	f7ff fe6c 	bl	800d9e4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	b138      	cbz	r0, 800dd20 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd10:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd12:	461a      	mov	r2, r3
 800dd14:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd16:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dd18:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dd1a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd1c:	f7ff ff33 	bl	800db86 <xQueueGenericSend>
	}
 800dd20:	4620      	mov	r0, r4
 800dd22:	b002      	add	sp, #8
 800dd24:	bd10      	pop	{r4, pc}

0800dd26 <xQueueGiveMutexRecursive>:
	{
 800dd26:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dd28:	4604      	mov	r4, r0
 800dd2a:	b950      	cbnz	r0, 800dd42 <xQueueGiveMutexRecursive+0x1c>
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	b672      	cpsid	i
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	b662      	cpsie	i
 800dd40:	e7fe      	b.n	800dd40 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd42:	6885      	ldr	r5, [r0, #8]
 800dd44:	f000 ffd2 	bl	800ecec <xTaskGetCurrentTaskHandle>
 800dd48:	4285      	cmp	r5, r0
 800dd4a:	d10a      	bne.n	800dd62 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dd4c:	68e3      	ldr	r3, [r4, #12]
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dd52:	b923      	cbnz	r3, 800dd5e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dd54:	461a      	mov	r2, r3
 800dd56:	4619      	mov	r1, r3
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7ff ff14 	bl	800db86 <xQueueGenericSend>
			xReturn = pdPASS;
 800dd5e:	2001      	movs	r0, #1
		return xReturn;
 800dd60:	e000      	b.n	800dd64 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800dd62:	2000      	movs	r0, #0
	}
 800dd64:	bd38      	pop	{r3, r4, r5, pc}

0800dd66 <xQueueCreateMutex>:
	{
 800dd66:	b570      	push	{r4, r5, r6, lr}
 800dd68:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dd6a:	2050      	movs	r0, #80	; 0x50
 800dd6c:	f7ff fabc 	bl	800d2e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800dd70:	4604      	mov	r4, r0
 800dd72:	b198      	cbz	r0, 800dd9c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd74:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800dd76:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd78:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd7a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800dd7e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dd82:	f7ff fdee 	bl	800d962 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd86:	462b      	mov	r3, r5
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800dd8e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd92:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dd94:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dd96:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd98:	f7ff fef5 	bl	800db86 <xQueueGenericSend>
	}
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}

0800dda0 <xQueueGenericSendFromISR>:
{
 800dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	4689      	mov	r9, r1
 800dda6:	4690      	mov	r8, r2
 800dda8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800ddaa:	4604      	mov	r4, r0
 800ddac:	b950      	cbnz	r0, 800ddc4 <xQueueGenericSendFromISR+0x24>
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	b672      	cpsid	i
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	b662      	cpsie	i
 800ddc2:	e7fe      	b.n	800ddc2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddc4:	b961      	cbnz	r1, 800dde0 <xQueueGenericSendFromISR+0x40>
 800ddc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddc8:	b153      	cbz	r3, 800dde0 <xQueueGenericSendFromISR+0x40>
 800ddca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddce:	b672      	cpsid	i
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	b662      	cpsie	i
 800ddde:	e7fe      	b.n	800ddde <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dde0:	2f02      	cmp	r7, #2
 800dde2:	d10d      	bne.n	800de00 <xQueueGenericSendFromISR+0x60>
 800dde4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d00a      	beq.n	800de00 <xQueueGenericSendFromISR+0x60>
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	b672      	cpsid	i
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	b662      	cpsie	i
 800ddfe:	e7fe      	b.n	800ddfe <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de00:	f7ff fcf0 	bl	800d7e4 <vPortValidateInterruptPriority>
	__asm volatile
 800de04:	f3ef 8611 	mrs	r6, BASEPRI
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	b672      	cpsid	i
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800de1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de20:	429a      	cmp	r2, r3
 800de22:	d301      	bcc.n	800de28 <xQueueGenericSendFromISR+0x88>
 800de24:	2f02      	cmp	r7, #2
 800de26:	d122      	bne.n	800de6e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800de28:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de2c:	463a      	mov	r2, r7
 800de2e:	4649      	mov	r1, r9
 800de30:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800de32:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de34:	f7ff fd13 	bl	800d85e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800de38:	1c6b      	adds	r3, r5, #1
 800de3a:	d113      	bne.n	800de64 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de3e:	b90b      	cbnz	r3, 800de44 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800de40:	2001      	movs	r0, #1
 800de42:	e00b      	b.n	800de5c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de48:	f000 feb8 	bl	800ebbc <xTaskRemoveFromEventList>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d0f7      	beq.n	800de40 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800de50:	f1b8 0f00 	cmp.w	r8, #0
 800de54:	d0f4      	beq.n	800de40 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de56:	2001      	movs	r0, #1
 800de58:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800de5c:	f386 8811 	msr	BASEPRI, r6
}
 800de60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de64:	3501      	adds	r5, #1
 800de66:	b26d      	sxtb	r5, r5
 800de68:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800de6c:	e7e8      	b.n	800de40 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800de6e:	2000      	movs	r0, #0
 800de70:	e7f4      	b.n	800de5c <xQueueGenericSendFromISR+0xbc>

0800de72 <xQueueGiveFromISR>:
{
 800de72:	b570      	push	{r4, r5, r6, lr}
 800de74:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800de76:	4604      	mov	r4, r0
 800de78:	b950      	cbnz	r0, 800de90 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	b672      	cpsid	i
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	b662      	cpsie	i
 800de8e:	e7fe      	b.n	800de8e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800de90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de92:	b153      	cbz	r3, 800deaa <xQueueGiveFromISR+0x38>
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	b672      	cpsid	i
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	b662      	cpsie	i
 800dea8:	e7fe      	b.n	800dea8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800deaa:	6803      	ldr	r3, [r0, #0]
 800deac:	b963      	cbnz	r3, 800dec8 <xQueueGiveFromISR+0x56>
 800deae:	6883      	ldr	r3, [r0, #8]
 800deb0:	b153      	cbz	r3, 800dec8 <xQueueGiveFromISR+0x56>
 800deb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb6:	b672      	cpsid	i
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	b662      	cpsie	i
 800dec6:	e7fe      	b.n	800dec6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dec8:	f7ff fc8c 	bl	800d7e4 <vPortValidateInterruptPriority>
	__asm volatile
 800decc:	f3ef 8611 	mrs	r6, BASEPRI
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	b672      	cpsid	i
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dee4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dee8:	4293      	cmp	r3, r2
 800deea:	d91c      	bls.n	800df26 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800deec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800def0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800def2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800def4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800def6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800def8:	d110      	bne.n	800df1c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800defa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800defc:	b90b      	cbnz	r3, 800df02 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800defe:	2001      	movs	r0, #1
 800df00:	e009      	b.n	800df16 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df06:	f000 fe59 	bl	800ebbc <xTaskRemoveFromEventList>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d0f7      	beq.n	800defe <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800df0e:	2d00      	cmp	r5, #0
 800df10:	d0f5      	beq.n	800defe <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df12:	2001      	movs	r0, #1
 800df14:	6028      	str	r0, [r5, #0]
	__asm volatile
 800df16:	f386 8811 	msr	BASEPRI, r6
}
 800df1a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df1c:	3301      	adds	r3, #1
 800df1e:	b25b      	sxtb	r3, r3
 800df20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df24:	e7eb      	b.n	800defe <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800df26:	2000      	movs	r0, #0
 800df28:	e7f5      	b.n	800df16 <xQueueGiveFromISR+0xa4>

0800df2a <xQueueReceive>:
{
 800df2a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800df2e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800df30:	4604      	mov	r4, r0
{
 800df32:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800df34:	b950      	cbnz	r0, 800df4c <xQueueReceive+0x22>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3a:	b672      	cpsid	i
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	b662      	cpsie	i
 800df4a:	e7fe      	b.n	800df4a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df4c:	b961      	cbnz	r1, 800df68 <xQueueReceive+0x3e>
 800df4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df50:	b153      	cbz	r3, 800df68 <xQueueReceive+0x3e>
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	b672      	cpsid	i
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	b662      	cpsie	i
 800df66:	e7fe      	b.n	800df66 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df68:	f000 fec6 	bl	800ecf8 <xTaskGetSchedulerState>
 800df6c:	4606      	mov	r6, r0
 800df6e:	b960      	cbnz	r0, 800df8a <xQueueReceive+0x60>
 800df70:	9b01      	ldr	r3, [sp, #4]
 800df72:	b15b      	cbz	r3, 800df8c <xQueueReceive+0x62>
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	b672      	cpsid	i
 800df7a:	f383 8811 	msr	BASEPRI, r3
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f3bf 8f4f 	dsb	sy
 800df86:	b662      	cpsie	i
 800df88:	e7fe      	b.n	800df88 <xQueueReceive+0x5e>
 800df8a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800df8c:	f04f 0800 	mov.w	r8, #0
 800df90:	e03d      	b.n	800e00e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df92:	9d01      	ldr	r5, [sp, #4]
 800df94:	b91d      	cbnz	r5, 800df9e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800df96:	f7ff fb49 	bl	800d62c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800df9a:	2000      	movs	r0, #0
 800df9c:	e056      	b.n	800e04c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800df9e:	b916      	cbnz	r6, 800dfa6 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfa0:	a802      	add	r0, sp, #8
 800dfa2:	f000 fe51 	bl	800ec48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dfa6:	f7ff fb41 	bl	800d62c <vPortExitCritical>
		vTaskSuspendAll();
 800dfaa:	f000 fbf1 	bl	800e790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfae:	f7ff fb19 	bl	800d5e4 <vPortEnterCritical>
 800dfb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dfb6:	2bff      	cmp	r3, #255	; 0xff
 800dfb8:	d101      	bne.n	800dfbe <xQueueReceive+0x94>
 800dfba:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800dfbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dfc2:	2bff      	cmp	r3, #255	; 0xff
 800dfc4:	d101      	bne.n	800dfca <xQueueReceive+0xa0>
 800dfc6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800dfca:	f7ff fb2f 	bl	800d62c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfce:	a901      	add	r1, sp, #4
 800dfd0:	a802      	add	r0, sp, #8
 800dfd2:	f000 fe45 	bl	800ec60 <xTaskCheckForTimeOut>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d141      	bne.n	800e05e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff fc34 	bl	800d848 <prvIsQueueEmpty>
 800dfe0:	b3b8      	cbz	r0, 800e052 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfe2:	9901      	ldr	r1, [sp, #4]
 800dfe4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dfe8:	f000 fdac 	bl	800eb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfec:	4620      	mov	r0, r4
 800dfee:	f7ff fc80 	bl	800d8f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dff2:	f000 fc73 	bl	800e8dc <xTaskResumeAll>
 800dff6:	b948      	cbnz	r0, 800e00c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800dff8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e000:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e00e:	f7ff fae9 	bl	800d5e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e012:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e014:	2d00      	cmp	r5, #0
 800e016:	d0bc      	beq.n	800df92 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e018:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e01a:	4639      	mov	r1, r7
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff fc53 	bl	800d8c8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e022:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e024:	6923      	ldr	r3, [r4, #16]
 800e026:	b173      	cbz	r3, 800e046 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e028:	f104 0010 	add.w	r0, r4, #16
 800e02c:	f000 fdc6 	bl	800ebbc <xTaskRemoveFromEventList>
 800e030:	b148      	cbz	r0, 800e046 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800e032:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e03a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e046:	f7ff faf1 	bl	800d62c <vPortExitCritical>
				return pdPASS;
 800e04a:	2001      	movs	r0, #1
}
 800e04c:	b004      	add	sp, #16
 800e04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800e052:	4620      	mov	r0, r4
 800e054:	f7ff fc4d 	bl	800d8f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e058:	f000 fc40 	bl	800e8dc <xTaskResumeAll>
 800e05c:	e7d6      	b.n	800e00c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800e05e:	4620      	mov	r0, r4
 800e060:	f7ff fc47 	bl	800d8f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e064:	f000 fc3a 	bl	800e8dc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e068:	4620      	mov	r0, r4
 800e06a:	f7ff fbed 	bl	800d848 <prvIsQueueEmpty>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0cc      	beq.n	800e00c <xQueueReceive+0xe2>
 800e072:	e792      	b.n	800df9a <xQueueReceive+0x70>

0800e074 <xQueueSemaphoreTake>:
{
 800e074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e076:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800e078:	4604      	mov	r4, r0
{
 800e07a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e07c:	b950      	cbnz	r0, 800e094 <xQueueSemaphoreTake+0x20>
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	b672      	cpsid	i
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	b662      	cpsie	i
 800e092:	e7fe      	b.n	800e092 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e094:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e096:	b155      	cbz	r5, 800e0ae <xQueueSemaphoreTake+0x3a>
 800e098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09c:	b672      	cpsid	i
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	b662      	cpsie	i
 800e0ac:	e7fe      	b.n	800e0ac <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0ae:	f000 fe23 	bl	800ecf8 <xTaskGetSchedulerState>
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	b960      	cbnz	r0, 800e0d0 <xQueueSemaphoreTake+0x5c>
 800e0b6:	9b01      	ldr	r3, [sp, #4]
 800e0b8:	b16b      	cbz	r3, 800e0d6 <xQueueSemaphoreTake+0x62>
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	b672      	cpsid	i
 800e0c0:	f383 8811 	msr	BASEPRI, r3
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	b662      	cpsie	i
 800e0ce:	e7fe      	b.n	800e0ce <xQueueSemaphoreTake+0x5a>
 800e0d0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e0d2:	2700      	movs	r7, #0
 800e0d4:	e055      	b.n	800e182 <xQueueSemaphoreTake+0x10e>
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	e7fb      	b.n	800e0d2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0da:	9b01      	ldr	r3, [sp, #4]
 800e0dc:	b973      	cbnz	r3, 800e0fc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e0de:	b155      	cbz	r5, 800e0f6 <xQueueSemaphoreTake+0x82>
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	b672      	cpsid	i
 800e0e6:	f383 8811 	msr	BASEPRI, r3
 800e0ea:	f3bf 8f6f 	isb	sy
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	b662      	cpsie	i
 800e0f4:	e7fe      	b.n	800e0f4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800e0f6:	f7ff fa99 	bl	800d62c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e0fa:	e062      	b.n	800e1c2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800e0fc:	b916      	cbnz	r6, 800e104 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0fe:	a802      	add	r0, sp, #8
 800e100:	f000 fda2 	bl	800ec48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e104:	f7ff fa92 	bl	800d62c <vPortExitCritical>
		vTaskSuspendAll();
 800e108:	f000 fb42 	bl	800e790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e10c:	f7ff fa6a 	bl	800d5e4 <vPortEnterCritical>
 800e110:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e114:	2bff      	cmp	r3, #255	; 0xff
 800e116:	d101      	bne.n	800e11c <xQueueSemaphoreTake+0xa8>
 800e118:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e11c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e120:	2bff      	cmp	r3, #255	; 0xff
 800e122:	d101      	bne.n	800e128 <xQueueSemaphoreTake+0xb4>
 800e124:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e128:	f7ff fa80 	bl	800d62c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e12c:	a901      	add	r1, sp, #4
 800e12e:	a802      	add	r0, sp, #8
 800e130:	f000 fd96 	bl	800ec60 <xTaskCheckForTimeOut>
 800e134:	2800      	cmp	r0, #0
 800e136:	d14d      	bne.n	800e1d4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e138:	4620      	mov	r0, r4
 800e13a:	f7ff fb85 	bl	800d848 <prvIsQueueEmpty>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d042      	beq.n	800e1c8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	b93b      	cbnz	r3, 800e156 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800e146:	f7ff fa4d 	bl	800d5e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e14a:	68a0      	ldr	r0, [r4, #8]
 800e14c:	f000 fde4 	bl	800ed18 <xTaskPriorityInherit>
 800e150:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e152:	f7ff fa6b 	bl	800d62c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e156:	9901      	ldr	r1, [sp, #4]
 800e158:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e15c:	f000 fcf2 	bl	800eb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e160:	4620      	mov	r0, r4
 800e162:	f7ff fbc6 	bl	800d8f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e166:	f000 fbb9 	bl	800e8dc <xTaskResumeAll>
 800e16a:	b948      	cbnz	r0, 800e180 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800e16c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e174:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e182:	f7ff fa2f 	bl	800d5e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d0a6      	beq.n	800e0da <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e18c:	3b01      	subs	r3, #1
 800e18e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	b913      	cbnz	r3, 800e19a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e194:	f000 fe9e 	bl	800eed4 <pvTaskIncrementMutexHeldCount>
 800e198:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	b173      	cbz	r3, 800e1bc <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e19e:	f104 0010 	add.w	r0, r4, #16
 800e1a2:	f000 fd0b 	bl	800ebbc <xTaskRemoveFromEventList>
 800e1a6:	b148      	cbz	r0, 800e1bc <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800e1a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800e1bc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800e1be:	f7ff fa35 	bl	800d62c <vPortExitCritical>
}
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	b005      	add	sp, #20
 800e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f7ff fb92 	bl	800d8f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1ce:	f000 fb85 	bl	800e8dc <xTaskResumeAll>
 800e1d2:	e7d5      	b.n	800e180 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7ff fb8c 	bl	800d8f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1da:	f000 fb7f 	bl	800e8dc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7ff fb32 	bl	800d848 <prvIsQueueEmpty>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d0cb      	beq.n	800e180 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800e1e8:	2d00      	cmp	r5, #0
 800e1ea:	d0ea      	beq.n	800e1c2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800e1ec:	f7ff f9fa 	bl	800d5e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e1f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e1f2:	b119      	cbz	r1, 800e1fc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e1f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e1f6:	6819      	ldr	r1, [r3, #0]
 800e1f8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e1fc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800e1fe:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e200:	f000 fe12 	bl	800ee28 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e204:	f7ff fa12 	bl	800d62c <vPortExitCritical>
 800e208:	e7db      	b.n	800e1c2 <xQueueSemaphoreTake+0x14e>

0800e20a <xQueueTakeMutexRecursive>:
	{
 800e20a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800e20c:	4604      	mov	r4, r0
 800e20e:	b950      	cbnz	r0, 800e226 <xQueueTakeMutexRecursive+0x1c>
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	b672      	cpsid	i
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	b662      	cpsie	i
 800e224:	e7fe      	b.n	800e224 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e226:	6885      	ldr	r5, [r0, #8]
 800e228:	9101      	str	r1, [sp, #4]
 800e22a:	f000 fd5f 	bl	800ecec <xTaskGetCurrentTaskHandle>
 800e22e:	4285      	cmp	r5, r0
 800e230:	9901      	ldr	r1, [sp, #4]
 800e232:	d105      	bne.n	800e240 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e234:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e236:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e238:	3301      	adds	r3, #1
 800e23a:	60e3      	str	r3, [r4, #12]
	}
 800e23c:	b003      	add	sp, #12
 800e23e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e240:	4620      	mov	r0, r4
 800e242:	f7ff ff17 	bl	800e074 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e246:	2800      	cmp	r0, #0
 800e248:	d0f8      	beq.n	800e23c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e24a:	68e3      	ldr	r3, [r4, #12]
 800e24c:	3301      	adds	r3, #1
 800e24e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800e250:	e7f4      	b.n	800e23c <xQueueTakeMutexRecursive+0x32>

0800e252 <xQueueReceiveFromISR>:
{
 800e252:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e256:	4689      	mov	r9, r1
 800e258:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e25a:	4605      	mov	r5, r0
 800e25c:	b950      	cbnz	r0, 800e274 <xQueueReceiveFromISR+0x22>
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	b672      	cpsid	i
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	b662      	cpsie	i
 800e272:	e7fe      	b.n	800e272 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e274:	b961      	cbnz	r1, 800e290 <xQueueReceiveFromISR+0x3e>
 800e276:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e278:	b153      	cbz	r3, 800e290 <xQueueReceiveFromISR+0x3e>
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	b672      	cpsid	i
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	b662      	cpsie	i
 800e28e:	e7fe      	b.n	800e28e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e290:	f7ff faa8 	bl	800d7e4 <vPortValidateInterruptPriority>
	__asm volatile
 800e294:	f3ef 8711 	mrs	r7, BASEPRI
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	b672      	cpsid	i
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2ac:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2ae:	b31c      	cbz	r4, 800e2f8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2b0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2b8:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2ba:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2bc:	f7ff fb04 	bl	800d8c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2c0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800e2c2:	1c73      	adds	r3, r6, #1
 800e2c4:	d113      	bne.n	800e2ee <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2c6:	692b      	ldr	r3, [r5, #16]
 800e2c8:	b90b      	cbnz	r3, 800e2ce <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	e00b      	b.n	800e2e6 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2ce:	f105 0010 	add.w	r0, r5, #16
 800e2d2:	f000 fc73 	bl	800ebbc <xTaskRemoveFromEventList>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d0f7      	beq.n	800e2ca <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800e2da:	f1b8 0f00 	cmp.w	r8, #0
 800e2de:	d0f4      	beq.n	800e2ca <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800e2e6:	f387 8811 	msr	BASEPRI, r7
}
 800e2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e2ee:	3601      	adds	r6, #1
 800e2f0:	b276      	sxtb	r6, r6
 800e2f2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800e2f6:	e7e8      	b.n	800e2ca <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	e7f4      	b.n	800e2e6 <xQueueReceiveFromISR+0x94>

0800e2fc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2fc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e2fe:	4a07      	ldr	r2, [pc, #28]	; (800e31c <vQueueAddToRegistry+0x20>)
	{
 800e300:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e302:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800e306:	b92c      	cbnz	r4, 800e314 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e308:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e30c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e310:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e312:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e314:	3301      	adds	r3, #1
 800e316:	2b08      	cmp	r3, #8
 800e318:	d1f3      	bne.n	800e302 <vQueueAddToRegistry+0x6>
 800e31a:	e7fa      	b.n	800e312 <vQueueAddToRegistry+0x16>
 800e31c:	200264ec 	.word	0x200264ec

0800e320 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e320:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e322:	4a08      	ldr	r2, [pc, #32]	; (800e344 <vQueueUnregisterQueue+0x24>)
	{
 800e324:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e326:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e32a:	684c      	ldr	r4, [r1, #4]
 800e32c:	4284      	cmp	r4, r0
 800e32e:	d104      	bne.n	800e33a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e330:	2000      	movs	r0, #0
 800e332:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e336:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e338:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e33a:	3301      	adds	r3, #1
 800e33c:	2b08      	cmp	r3, #8
 800e33e:	d1f2      	bne.n	800e326 <vQueueUnregisterQueue+0x6>
 800e340:	e7fa      	b.n	800e338 <vQueueUnregisterQueue+0x18>
 800e342:	bf00      	nop
 800e344:	200264ec 	.word	0x200264ec

0800e348 <vQueueDelete>:
{
 800e348:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e34a:	4604      	mov	r4, r0
 800e34c:	b950      	cbnz	r0, 800e364 <vQueueDelete+0x1c>
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	b672      	cpsid	i
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	b662      	cpsie	i
 800e362:	e7fe      	b.n	800e362 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800e364:	f7ff ffdc 	bl	800e320 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e368:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e36c:	b923      	cbnz	r3, 800e378 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800e36e:	4620      	mov	r0, r4
}
 800e370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e374:	f7ff b84e 	b.w	800d414 <vPortFree>
}
 800e378:	bd10      	pop	{r4, pc}

0800e37a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e37a:	b570      	push	{r4, r5, r6, lr}
 800e37c:	4604      	mov	r4, r0
 800e37e:	460d      	mov	r5, r1
 800e380:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e382:	f7ff f92f 	bl	800d5e4 <vPortEnterCritical>
 800e386:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e38a:	2bff      	cmp	r3, #255	; 0xff
 800e38c:	d102      	bne.n	800e394 <vQueueWaitForMessageRestricted+0x1a>
 800e38e:	2300      	movs	r3, #0
 800e390:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e394:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e398:	2bff      	cmp	r3, #255	; 0xff
 800e39a:	d102      	bne.n	800e3a2 <vQueueWaitForMessageRestricted+0x28>
 800e39c:	2300      	movs	r3, #0
 800e39e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3a2:	f7ff f943 	bl	800d62c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3a8:	b92b      	cbnz	r3, 800e3b6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3aa:	4632      	mov	r2, r6
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e3b2:	f000 fbe3 	bl	800eb7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3b6:	4620      	mov	r0, r4
	}
 800e3b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e3bc:	f7ff ba99 	b.w	800d8f2 <prvUnlockQueue>

0800e3c0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e3c6:	f7ff f90d 	bl	800d5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e3ca:	4b2f      	ldr	r3, [pc, #188]	; (800e488 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e3cc:	4e2f      	ldr	r6, [pc, #188]	; (800e48c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	4f2f      	ldr	r7, [pc, #188]	; (800e490 <prvAddNewTaskToReadyList+0xd0>)
 800e3d2:	3201      	adds	r2, #1
 800e3d4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e3d6:	6835      	ldr	r5, [r6, #0]
 800e3d8:	2d00      	cmp	r5, #0
 800e3da:	d14a      	bne.n	800e472 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3dc:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d11f      	bne.n	800e424 <prvAddNewTaskToReadyList+0x64>
 800e3e4:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e6:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3e8:	4640      	mov	r0, r8
 800e3ea:	f7ff f84f 	bl	800d48c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ee:	f108 0814 	add.w	r8, r8, #20
 800e3f2:	2d38      	cmp	r5, #56	; 0x38
 800e3f4:	d1f7      	bne.n	800e3e6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3f6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800e4b8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e3fa:	4d26      	ldr	r5, [pc, #152]	; (800e494 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e3fc:	4640      	mov	r0, r8
 800e3fe:	f7ff f845 	bl	800d48c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e402:	4628      	mov	r0, r5
 800e404:	f7ff f842 	bl	800d48c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e408:	4823      	ldr	r0, [pc, #140]	; (800e498 <prvAddNewTaskToReadyList+0xd8>)
 800e40a:	f7ff f83f 	bl	800d48c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e40e:	4823      	ldr	r0, [pc, #140]	; (800e49c <prvAddNewTaskToReadyList+0xdc>)
 800e410:	f7ff f83c 	bl	800d48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e414:	4822      	ldr	r0, [pc, #136]	; (800e4a0 <prvAddNewTaskToReadyList+0xe0>)
 800e416:	f7ff f839 	bl	800d48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e41a:	4b22      	ldr	r3, [pc, #136]	; (800e4a4 <prvAddNewTaskToReadyList+0xe4>)
 800e41c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e420:	4b21      	ldr	r3, [pc, #132]	; (800e4a8 <prvAddNewTaskToReadyList+0xe8>)
 800e422:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e424:	4a21      	ldr	r2, [pc, #132]	; (800e4ac <prvAddNewTaskToReadyList+0xec>)
 800e426:	6813      	ldr	r3, [r2, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e42c:	4a20      	ldr	r2, [pc, #128]	; (800e4b0 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e42e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e430:	6811      	ldr	r1, [r2, #0]
 800e432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e434:	428b      	cmp	r3, r1
 800e436:	d900      	bls.n	800e43a <prvAddNewTaskToReadyList+0x7a>
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	2014      	movs	r0, #20
 800e43c:	1d21      	adds	r1, r4, #4
 800e43e:	fb00 7003 	mla	r0, r0, r3, r7
 800e442:	f7ff f831 	bl	800d4a8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e446:	f7ff f8f1 	bl	800d62c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e44a:	4b1a      	ldr	r3, [pc, #104]	; (800e4b4 <prvAddNewTaskToReadyList+0xf4>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	b173      	cbz	r3, 800e46e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e450:	6833      	ldr	r3, [r6, #0]
 800e452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e456:	429a      	cmp	r2, r3
 800e458:	d209      	bcs.n	800e46e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e45a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e462:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	f3bf 8f6f 	isb	sy
}
 800e46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e472:	4b10      	ldr	r3, [pc, #64]	; (800e4b4 <prvAddNewTaskToReadyList+0xf4>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1d4      	bne.n	800e424 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e47a:	6833      	ldr	r3, [r6, #0]
 800e47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e480:	429a      	cmp	r2, r3
 800e482:	d8cf      	bhi.n	800e424 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e484:	6034      	str	r4, [r6, #0]
 800e486:	e7cd      	b.n	800e424 <prvAddNewTaskToReadyList+0x64>
 800e488:	20026998 	.word	0x20026998
 800e48c:	2002652c 	.word	0x2002652c
 800e490:	20026538 	.word	0x20026538
 800e494:	200269c4 	.word	0x200269c4
 800e498:	200269e0 	.word	0x200269e0
 800e49c:	20026a0c 	.word	0x20026a0c
 800e4a0:	200269f8 	.word	0x200269f8
 800e4a4:	20026530 	.word	0x20026530
 800e4a8:	20026534 	.word	0x20026534
 800e4ac:	200269a8 	.word	0x200269a8
 800e4b0:	200269ac 	.word	0x200269ac
 800e4b4:	200269f4 	.word	0x200269f4
 800e4b8:	200269b0 	.word	0x200269b0

0800e4bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4be:	4b15      	ldr	r3, [pc, #84]	; (800e514 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e4c0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c2:	4e15      	ldr	r6, [pc, #84]	; (800e518 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e4c4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e4c6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c8:	6830      	ldr	r0, [r6, #0]
 800e4ca:	3004      	adds	r0, #4
 800e4cc:	f7ff f80f 	bl	800d4ee <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4d0:	1c63      	adds	r3, r4, #1
 800e4d2:	d107      	bne.n	800e4e4 <prvAddCurrentTaskToDelayedList+0x28>
 800e4d4:	b137      	cbz	r7, 800e4e4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4d6:	6831      	ldr	r1, [r6, #0]
 800e4d8:	4810      	ldr	r0, [pc, #64]	; (800e51c <prvAddCurrentTaskToDelayedList+0x60>)
 800e4da:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4e0:	f7fe bfe2 	b.w	800d4a8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4e4:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4e6:	6833      	ldr	r3, [r6, #0]
 800e4e8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4ea:	d307      	bcc.n	800e4fc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ec:	4b0c      	ldr	r3, [pc, #48]	; (800e520 <prvAddCurrentTaskToDelayedList+0x64>)
 800e4ee:	6818      	ldr	r0, [r3, #0]
 800e4f0:	6831      	ldr	r1, [r6, #0]
}
 800e4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f6:	3104      	adds	r1, #4
 800e4f8:	f7fe bfe2 	b.w	800d4c0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4fc:	4b09      	ldr	r3, [pc, #36]	; (800e524 <prvAddCurrentTaskToDelayedList+0x68>)
 800e4fe:	6818      	ldr	r0, [r3, #0]
 800e500:	6831      	ldr	r1, [r6, #0]
 800e502:	3104      	adds	r1, #4
 800e504:	f7fe ffdc 	bl	800d4c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e508:	4b07      	ldr	r3, [pc, #28]	; (800e528 <prvAddCurrentTaskToDelayedList+0x6c>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	42a2      	cmp	r2, r4
 800e50e:	d900      	bls.n	800e512 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e510:	601c      	str	r4, [r3, #0]
}
 800e512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e514:	20026a20 	.word	0x20026a20
 800e518:	2002652c 	.word	0x2002652c
 800e51c:	200269f8 	.word	0x200269f8
 800e520:	20026534 	.word	0x20026534
 800e524:	20026530 	.word	0x20026530
 800e528:	200269d8 	.word	0x200269d8

0800e52c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e52c:	4a06      	ldr	r2, [pc, #24]	; (800e548 <prvResetNextTaskUnblockTime+0x1c>)
 800e52e:	6813      	ldr	r3, [r2, #0]
 800e530:	6819      	ldr	r1, [r3, #0]
 800e532:	4b06      	ldr	r3, [pc, #24]	; (800e54c <prvResetNextTaskUnblockTime+0x20>)
 800e534:	b919      	cbnz	r1, 800e53e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e536:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e53a:	601a      	str	r2, [r3, #0]
}
 800e53c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e53e:	6812      	ldr	r2, [r2, #0]
 800e540:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e542:	68d2      	ldr	r2, [r2, #12]
 800e544:	6852      	ldr	r2, [r2, #4]
 800e546:	e7f8      	b.n	800e53a <prvResetNextTaskUnblockTime+0xe>
 800e548:	20026530 	.word	0x20026530
 800e54c:	200269d8 	.word	0x200269d8

0800e550 <prvDeleteTCB>:
	{
 800e550:	b510      	push	{r4, lr}
 800e552:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e554:	3058      	adds	r0, #88	; 0x58
 800e556:	f018 f865 	bl	8026624 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e55a:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800e55e:	b93b      	cbnz	r3, 800e570 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800e560:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e562:	f7fe ff57 	bl	800d414 <vPortFree>
				vPortFree( pxTCB );
 800e566:	4620      	mov	r0, r4
	}
 800e568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e56c:	f7fe bf52 	b.w	800d414 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e570:	2b01      	cmp	r3, #1
 800e572:	d0f8      	beq.n	800e566 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e574:	2b02      	cmp	r3, #2
 800e576:	d00a      	beq.n	800e58e <prvDeleteTCB+0x3e>
 800e578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57c:	b672      	cpsid	i
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	b662      	cpsie	i
 800e58c:	e7fe      	b.n	800e58c <prvDeleteTCB+0x3c>
	}
 800e58e:	bd10      	pop	{r4, pc}

0800e590 <prvIdleTask>:
{
 800e590:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e592:	4c14      	ldr	r4, [pc, #80]	; (800e5e4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e594:	4f14      	ldr	r7, [pc, #80]	; (800e5e8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e596:	4d15      	ldr	r5, [pc, #84]	; (800e5ec <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	b983      	cbnz	r3, 800e5be <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e59c:	4b14      	ldr	r3, [pc, #80]	; (800e5f0 <prvIdleTask+0x60>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d909      	bls.n	800e5b8 <prvIdleTask+0x28>
				taskYIELD();
 800e5a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e5b8:	f7f5 fb04 	bl	8003bc4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e5bc:	e7eb      	b.n	800e596 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e5be:	f7ff f811 	bl	800d5e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5c6:	1d30      	adds	r0, r6, #4
 800e5c8:	f7fe ff91 	bl	800d4ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5cc:	682b      	ldr	r3, [r5, #0]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e5d8:	f7ff f828 	bl	800d62c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7ff ffb7 	bl	800e550 <prvDeleteTCB>
 800e5e2:	e7d9      	b.n	800e598 <prvIdleTask+0x8>
 800e5e4:	2002699c 	.word	0x2002699c
 800e5e8:	20026a0c 	.word	0x20026a0c
 800e5ec:	20026998 	.word	0x20026998
 800e5f0:	20026538 	.word	0x20026538

0800e5f4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e5f8:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e5fc:	4606      	mov	r6, r0
 800e5fe:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e600:	21a5      	movs	r1, #165	; 0xa5
 800e602:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e604:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e606:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e60a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e60e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e610:	f017 fc24 	bl	8025e5c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e614:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e616:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e618:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800e61c:	2d00      	cmp	r5, #0
 800e61e:	d042      	beq.n	800e6a6 <prvInitialiseNewTask.constprop.0+0xb2>
 800e620:	1e6b      	subs	r3, r5, #1
 800e622:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e626:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e628:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e62c:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800e630:	b108      	cbz	r0, 800e636 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e632:	42ab      	cmp	r3, r5
 800e634:	d1f8      	bne.n	800e628 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e636:	2300      	movs	r3, #0
 800e638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e63c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e63e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e642:	1d20      	adds	r0, r4, #4
 800e644:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e646:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800e64a:	bf28      	it	cs
 800e64c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e64e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e650:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e652:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e656:	f7fe ff24 	bl	800d4a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e65a:	f104 0018 	add.w	r0, r4, #24
 800e65e:	f7fe ff20 	bl	800d4a2 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e662:	2260      	movs	r2, #96	; 0x60
 800e664:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800e666:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e66a:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e66e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e670:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e672:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e674:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e678:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e67c:	f017 fbee 	bl	8025e5c <memset>
 800e680:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e682:	463a      	mov	r2, r7
 800e684:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e686:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e688:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e68a:	4b09      	ldr	r3, [pc, #36]	; (800e6b0 <prvInitialiseNewTask.constprop.0+0xbc>)
 800e68c:	6623      	str	r3, [r4, #96]	; 0x60
 800e68e:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <prvInitialiseNewTask.constprop.0+0xc0>)
 800e690:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e692:	f7fe ff7f 	bl	800d594 <pxPortInitialiseStack>
 800e696:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e698:	f1b8 0f00 	cmp.w	r8, #0
 800e69c:	d001      	beq.n	800e6a2 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e69e:	f8c8 4000 	str.w	r4, [r8]
}
 800e6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e6a6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800e6aa:	e7c7      	b.n	800e63c <prvInitialiseNewTask.constprop.0+0x48>
 800e6ac:	0802b5f8 	.word	0x0802b5f8
 800e6b0:	0802b618 	.word	0x0802b618
 800e6b4:	0802b5d8 	.word	0x0802b5d8

0800e6b8 <xTaskCreateStatic>:
	{
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e6c0:	b955      	cbnz	r5, 800e6d8 <xTaskCreateStatic+0x20>
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	b672      	cpsid	i
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	b662      	cpsie	i
 800e6d6:	e7fe      	b.n	800e6d6 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800e6d8:	b954      	cbnz	r4, 800e6f0 <xTaskCreateStatic+0x38>
 800e6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6de:	b672      	cpsid	i
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	b662      	cpsie	i
 800e6ee:	e7fe      	b.n	800e6ee <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e6f0:	26c0      	movs	r6, #192	; 0xc0
 800e6f2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e6f4:	9e05      	ldr	r6, [sp, #20]
 800e6f6:	2ec0      	cmp	r6, #192	; 0xc0
 800e6f8:	d00a      	beq.n	800e710 <xTaskCreateStatic+0x58>
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	b672      	cpsid	i
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	b662      	cpsie	i
 800e70e:	e7fe      	b.n	800e70e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e710:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e712:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e714:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e716:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e71a:	ad04      	add	r5, sp, #16
 800e71c:	9402      	str	r4, [sp, #8]
 800e71e:	9501      	str	r5, [sp, #4]
 800e720:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e722:	9500      	str	r5, [sp, #0]
 800e724:	f7ff ff66 	bl	800e5f4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e728:	4620      	mov	r0, r4
 800e72a:	f7ff fe49 	bl	800e3c0 <prvAddNewTaskToReadyList>
	}
 800e72e:	9804      	ldr	r0, [sp, #16]
 800e730:	b006      	add	sp, #24
 800e732:	bd70      	pop	{r4, r5, r6, pc}

0800e734 <xTaskCreate>:
	{
 800e734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e738:	4607      	mov	r7, r0
 800e73a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e73c:	0090      	lsls	r0, r2, #2
	{
 800e73e:	4688      	mov	r8, r1
 800e740:	4616      	mov	r6, r2
 800e742:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e744:	f7fe fdd0 	bl	800d2e8 <pvPortMalloc>
			if( pxStack != NULL )
 800e748:	4605      	mov	r5, r0
 800e74a:	b1e8      	cbz	r0, 800e788 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e74c:	20c0      	movs	r0, #192	; 0xc0
 800e74e:	f7fe fdcb 	bl	800d2e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e752:	4604      	mov	r4, r0
 800e754:	b1a8      	cbz	r0, 800e782 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e756:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e758:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e75a:	4632      	mov	r2, r6
 800e75c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e75e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e764:	9002      	str	r0, [sp, #8]
 800e766:	4638      	mov	r0, r7
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	464b      	mov	r3, r9
 800e770:	f7ff ff40 	bl	800e5f4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e774:	4620      	mov	r0, r4
 800e776:	f7ff fe23 	bl	800e3c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e77a:	2001      	movs	r0, #1
	}
 800e77c:	b005      	add	sp, #20
 800e77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800e782:	4628      	mov	r0, r5
 800e784:	f7fe fe46 	bl	800d414 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e788:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800e78c:	e7f6      	b.n	800e77c <xTaskCreate+0x48>
	...

0800e790 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e790:	4a02      	ldr	r2, [pc, #8]	; (800e79c <vTaskSuspendAll+0xc>)
 800e792:	6813      	ldr	r3, [r2, #0]
 800e794:	3301      	adds	r3, #1
 800e796:	6013      	str	r3, [r2, #0]
}
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	200269a4 	.word	0x200269a4

0800e7a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e7a0:	4b01      	ldr	r3, [pc, #4]	; (800e7a8 <xTaskGetTickCount+0x8>)
 800e7a2:	6818      	ldr	r0, [r3, #0]
}
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	20026a20 	.word	0x20026a20

0800e7ac <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ac:	4b40      	ldr	r3, [pc, #256]	; (800e8b0 <xTaskIncrementTick+0x104>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
{
 800e7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d174      	bne.n	800e8a2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7b8:	4b3e      	ldr	r3, [pc, #248]	; (800e8b4 <xTaskIncrementTick+0x108>)
 800e7ba:	681d      	ldr	r5, [r3, #0]
 800e7bc:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800e7be:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7c0:	b9cd      	cbnz	r5, 800e7f6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800e7c2:	4b3d      	ldr	r3, [pc, #244]	; (800e8b8 <xTaskIncrementTick+0x10c>)
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	6812      	ldr	r2, [r2, #0]
 800e7c8:	b152      	cbz	r2, 800e7e0 <xTaskIncrementTick+0x34>
 800e7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ce:	b672      	cpsid	i
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	b662      	cpsie	i
 800e7de:	e7fe      	b.n	800e7de <xTaskIncrementTick+0x32>
 800e7e0:	4a36      	ldr	r2, [pc, #216]	; (800e8bc <xTaskIncrementTick+0x110>)
 800e7e2:	6819      	ldr	r1, [r3, #0]
 800e7e4:	6810      	ldr	r0, [r2, #0]
 800e7e6:	6018      	str	r0, [r3, #0]
 800e7e8:	6011      	str	r1, [r2, #0]
 800e7ea:	4a35      	ldr	r2, [pc, #212]	; (800e8c0 <xTaskIncrementTick+0x114>)
 800e7ec:	6813      	ldr	r3, [r2, #0]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	f7ff fe9b 	bl	800e52c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7f6:	4e33      	ldr	r6, [pc, #204]	; (800e8c4 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800e7f8:	2400      	movs	r4, #0
 800e7fa:	4f33      	ldr	r7, [pc, #204]	; (800e8c8 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7fc:	6833      	ldr	r3, [r6, #0]
 800e7fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e8d4 <xTaskIncrementTick+0x128>
 800e802:	42ab      	cmp	r3, r5
 800e804:	d911      	bls.n	800e82a <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e806:	f8d8 3000 	ldr.w	r3, [r8]
 800e80a:	2214      	movs	r2, #20
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	4353      	muls	r3, r2
 800e810:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800e812:	2b02      	cmp	r3, #2
 800e814:	bf28      	it	cs
 800e816:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800e818:	4b2c      	ldr	r3, [pc, #176]	; (800e8cc <xTaskIncrementTick+0x120>)
 800e81a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800e81c:	2b00      	cmp	r3, #0
}
 800e81e:	bf0c      	ite	eq
 800e820:	4620      	moveq	r0, r4
 800e822:	2001      	movne	r0, #1
 800e824:	b003      	add	sp, #12
 800e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e82a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e8b8 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800e82e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e8d8 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e832:	f8d9 3000 	ldr.w	r3, [r9]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	b91b      	cbnz	r3, 800e842 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e83a:	f04f 33ff 	mov.w	r3, #4294967295
 800e83e:	6033      	str	r3, [r6, #0]
					break;
 800e840:	e7e1      	b.n	800e806 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e842:	f8d9 3000 	ldr.w	r3, [r9]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e84c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800e850:	4295      	cmp	r5, r2
 800e852:	d201      	bcs.n	800e858 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800e854:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e856:	e7d6      	b.n	800e806 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e858:	f10b 0104 	add.w	r1, fp, #4
 800e85c:	4608      	mov	r0, r1
 800e85e:	9101      	str	r1, [sp, #4]
 800e860:	f7fe fe45 	bl	800d4ee <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e864:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800e868:	9901      	ldr	r1, [sp, #4]
 800e86a:	b122      	cbz	r2, 800e876 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e86c:	f10b 0018 	add.w	r0, fp, #24
 800e870:	f7fe fe3d 	bl	800d4ee <uxListRemove>
 800e874:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800e876:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800e87a:	f8da 2000 	ldr.w	r2, [sl]
 800e87e:	4290      	cmp	r0, r2
 800e880:	d901      	bls.n	800e886 <xTaskIncrementTick+0xda>
 800e882:	f8ca 0000 	str.w	r0, [sl]
 800e886:	2314      	movs	r3, #20
 800e888:	fb03 7000 	mla	r0, r3, r0, r7
 800e88c:	f7fe fe0c 	bl	800d4a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e890:	f8d8 1000 	ldr.w	r1, [r8]
 800e894:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800e898:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800e89a:	429a      	cmp	r2, r3
 800e89c:	bf28      	it	cs
 800e89e:	2401      	movcs	r4, #1
 800e8a0:	e7c7      	b.n	800e832 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800e8a2:	4a0b      	ldr	r2, [pc, #44]	; (800e8d0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e8a4:	2400      	movs	r4, #0
		++uxPendedTicks;
 800e8a6:	6813      	ldr	r3, [r2, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	e7b4      	b.n	800e818 <xTaskIncrementTick+0x6c>
 800e8ae:	bf00      	nop
 800e8b0:	200269a4 	.word	0x200269a4
 800e8b4:	20026a20 	.word	0x20026a20
 800e8b8:	20026530 	.word	0x20026530
 800e8bc:	20026534 	.word	0x20026534
 800e8c0:	200269dc 	.word	0x200269dc
 800e8c4:	200269d8 	.word	0x200269d8
 800e8c8:	20026538 	.word	0x20026538
 800e8cc:	20026a24 	.word	0x20026a24
 800e8d0:	200269a0 	.word	0x200269a0
 800e8d4:	2002652c 	.word	0x2002652c
 800e8d8:	200269ac 	.word	0x200269ac

0800e8dc <xTaskResumeAll>:
{
 800e8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e8de:	4c32      	ldr	r4, [pc, #200]	; (800e9a8 <xTaskResumeAll+0xcc>)
 800e8e0:	6823      	ldr	r3, [r4, #0]
 800e8e2:	b953      	cbnz	r3, 800e8fa <xTaskResumeAll+0x1e>
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	b672      	cpsid	i
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	b662      	cpsie	i
 800e8f8:	e7fe      	b.n	800e8f8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800e8fa:	f7fe fe73 	bl	800d5e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	3b01      	subs	r3, #1
 800e902:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e904:	6824      	ldr	r4, [r4, #0]
 800e906:	b12c      	cbz	r4, 800e914 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800e908:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e90a:	f7fe fe8f 	bl	800d62c <vPortExitCritical>
}
 800e90e:	4620      	mov	r0, r4
 800e910:	b003      	add	sp, #12
 800e912:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e914:	4b25      	ldr	r3, [pc, #148]	; (800e9ac <xTaskResumeAll+0xd0>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d0f5      	beq.n	800e908 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e91c:	4d24      	ldr	r5, [pc, #144]	; (800e9b0 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800e91e:	4e25      	ldr	r6, [pc, #148]	; (800e9b4 <xTaskResumeAll+0xd8>)
 800e920:	4f25      	ldr	r7, [pc, #148]	; (800e9b8 <xTaskResumeAll+0xdc>)
 800e922:	e01e      	b.n	800e962 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e924:	68eb      	ldr	r3, [r5, #12]
 800e926:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e928:	f104 0018 	add.w	r0, r4, #24
 800e92c:	f7fe fddf 	bl	800d4ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e930:	1d21      	adds	r1, r4, #4
 800e932:	4608      	mov	r0, r1
 800e934:	9101      	str	r1, [sp, #4]
 800e936:	f7fe fdda 	bl	800d4ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e93a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e93c:	6832      	ldr	r2, [r6, #0]
 800e93e:	9901      	ldr	r1, [sp, #4]
 800e940:	4293      	cmp	r3, r2
 800e942:	d900      	bls.n	800e946 <xTaskResumeAll+0x6a>
 800e944:	6033      	str	r3, [r6, #0]
 800e946:	2014      	movs	r0, #20
 800e948:	fb00 7003 	mla	r0, r0, r3, r7
 800e94c:	f7fe fdac 	bl	800d4a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e950:	4b1a      	ldr	r3, [pc, #104]	; (800e9bc <xTaskResumeAll+0xe0>)
 800e952:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e958:	429a      	cmp	r2, r3
 800e95a:	d302      	bcc.n	800e962 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800e95c:	4b18      	ldr	r3, [pc, #96]	; (800e9c0 <xTaskResumeAll+0xe4>)
 800e95e:	2201      	movs	r2, #1
 800e960:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e962:	682b      	ldr	r3, [r5, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1dd      	bne.n	800e924 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e968:	b10c      	cbz	r4, 800e96e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800e96a:	f7ff fddf 	bl	800e52c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e96e:	4d15      	ldr	r5, [pc, #84]	; (800e9c4 <xTaskResumeAll+0xe8>)
 800e970:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e972:	b144      	cbz	r4, 800e986 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800e974:	4e12      	ldr	r6, [pc, #72]	; (800e9c0 <xTaskResumeAll+0xe4>)
 800e976:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e978:	f7ff ff18 	bl	800e7ac <xTaskIncrementTick>
 800e97c:	b100      	cbz	r0, 800e980 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800e97e:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e980:	3c01      	subs	r4, #1
 800e982:	d1f9      	bne.n	800e978 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800e984:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e986:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <xTaskResumeAll+0xe4>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0bc      	beq.n	800e908 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800e98e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e996:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e9a2:	2401      	movs	r4, #1
 800e9a4:	e7b1      	b.n	800e90a <xTaskResumeAll+0x2e>
 800e9a6:	bf00      	nop
 800e9a8:	200269a4 	.word	0x200269a4
 800e9ac:	20026998 	.word	0x20026998
 800e9b0:	200269e0 	.word	0x200269e0
 800e9b4:	200269ac 	.word	0x200269ac
 800e9b8:	20026538 	.word	0x20026538
 800e9bc:	2002652c 	.word	0x2002652c
 800e9c0:	20026a24 	.word	0x20026a24
 800e9c4:	200269a0 	.word	0x200269a0

0800e9c8 <vTaskSetApplicationTaskTag>:
	{
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	b908      	cbnz	r0, 800e9d4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e9d0:	4b04      	ldr	r3, [pc, #16]	; (800e9e4 <vTaskSetApplicationTaskTag+0x1c>)
 800e9d2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e9d4:	f7fe fe06 	bl	800d5e4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e9d8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800e9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e9de:	f7fe be25 	b.w	800d62c <vPortExitCritical>
 800e9e2:	bf00      	nop
 800e9e4:	2002652c 	.word	0x2002652c

0800e9e8 <xTaskCallApplicationTaskHook>:
	{
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e9ec:	b90b      	cbnz	r3, 800e9f2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e9ee:	4b03      	ldr	r3, [pc, #12]	; (800e9fc <xTaskCallApplicationTaskHook+0x14>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f4:	b103      	cbz	r3, 800e9f8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e9f6:	4718      	bx	r3
	}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	4770      	bx	lr
 800e9fc:	2002652c 	.word	0x2002652c

0800ea00 <vTaskStartScheduler>:
{
 800ea00:	b510      	push	{r4, lr}
 800ea02:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ea04:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ea06:	aa07      	add	r2, sp, #28
 800ea08:	a906      	add	r1, sp, #24
 800ea0a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ea0c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ea10:	f7fe fc2e 	bl	800d270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ea14:	9b05      	ldr	r3, [sp, #20]
 800ea16:	9a07      	ldr	r2, [sp, #28]
 800ea18:	9302      	str	r3, [sp, #8]
 800ea1a:	9b06      	ldr	r3, [sp, #24]
 800ea1c:	491d      	ldr	r1, [pc, #116]	; (800ea94 <vTaskStartScheduler+0x94>)
 800ea1e:	481e      	ldr	r0, [pc, #120]	; (800ea98 <vTaskStartScheduler+0x98>)
 800ea20:	e9cd 4300 	strd	r4, r3, [sp]
 800ea24:	4623      	mov	r3, r4
 800ea26:	f7ff fe47 	bl	800e6b8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d030      	beq.n	800ea90 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800ea2e:	f000 faaf 	bl	800ef90 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ea32:	2801      	cmp	r0, #1
 800ea34:	d11f      	bne.n	800ea76 <vTaskStartScheduler+0x76>
 800ea36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3a:	b672      	cpsid	i
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea4a:	4a14      	ldr	r2, [pc, #80]	; (800ea9c <vTaskStartScheduler+0x9c>)
 800ea4c:	4914      	ldr	r1, [pc, #80]	; (800eaa0 <vTaskStartScheduler+0xa0>)
 800ea4e:	6813      	ldr	r3, [r2, #0]
 800ea50:	3358      	adds	r3, #88	; 0x58
 800ea52:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea54:	f04f 31ff 	mov.w	r1, #4294967295
 800ea58:	4b12      	ldr	r3, [pc, #72]	; (800eaa4 <vTaskStartScheduler+0xa4>)
 800ea5a:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800ea5c:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800ea5e:	4b12      	ldr	r3, [pc, #72]	; (800eaa8 <vTaskStartScheduler+0xa8>)
 800ea60:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea62:	4b12      	ldr	r3, [pc, #72]	; (800eaac <vTaskStartScheduler+0xac>)
 800ea64:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800ea66:	6810      	ldr	r0, [r2, #0]
 800ea68:	f7ff ffbe 	bl	800e9e8 <xTaskCallApplicationTaskHook>
}
 800ea6c:	b008      	add	sp, #32
 800ea6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800ea72:	f7fe be51 	b.w	800d718 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea76:	3001      	adds	r0, #1
 800ea78:	d10a      	bne.n	800ea90 <vTaskStartScheduler+0x90>
 800ea7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7e:	b672      	cpsid	i
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	b662      	cpsie	i
 800ea8e:	e7fe      	b.n	800ea8e <vTaskStartScheduler+0x8e>
}
 800ea90:	b008      	add	sp, #32
 800ea92:	bd10      	pop	{r4, pc}
 800ea94:	0802a331 	.word	0x0802a331
 800ea98:	0800e591 	.word	0x0800e591
 800ea9c:	2002652c 	.word	0x2002652c
 800eaa0:	200000e8 	.word	0x200000e8
 800eaa4:	200269d8 	.word	0x200269d8
 800eaa8:	200269f4 	.word	0x200269f4
 800eaac:	20026a20 	.word	0x20026a20

0800eab0 <vTaskSwitchContext>:
{
 800eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eab2:	4b1e      	ldr	r3, [pc, #120]	; (800eb2c <vTaskSwitchContext+0x7c>)
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	4b1e      	ldr	r3, [pc, #120]	; (800eb30 <vTaskSwitchContext+0x80>)
 800eab8:	b112      	cbz	r2, 800eac0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800eaba:	2201      	movs	r2, #1
 800eabc:	601a      	str	r2, [r3, #0]
}
 800eabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800eac0:	4c1c      	ldr	r4, [pc, #112]	; (800eb34 <vTaskSwitchContext+0x84>)
 800eac2:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac4:	4e1c      	ldr	r6, [pc, #112]	; (800eb38 <vTaskSwitchContext+0x88>)
 800eac6:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800eac8:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800eaca:	6820      	ldr	r0, [r4, #0]
 800eacc:	f7ff ff8c 	bl	800e9e8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead0:	6832      	ldr	r2, [r6, #0]
 800ead2:	491a      	ldr	r1, [pc, #104]	; (800eb3c <vTaskSwitchContext+0x8c>)
 800ead4:	fb07 f302 	mul.w	r3, r7, r2
 800ead8:	58cd      	ldr	r5, [r1, r3]
 800eada:	18c8      	adds	r0, r1, r3
 800eadc:	b1c5      	cbz	r5, 800eb10 <vTaskSwitchContext+0x60>
 800eade:	6845      	ldr	r5, [r0, #4]
 800eae0:	3308      	adds	r3, #8
 800eae2:	686d      	ldr	r5, [r5, #4]
 800eae4:	440b      	add	r3, r1
 800eae6:	429d      	cmp	r5, r3
 800eae8:	6045      	str	r5, [r0, #4]
 800eaea:	bf04      	itt	eq
 800eaec:	686b      	ldreq	r3, [r5, #4]
 800eaee:	6043      	streq	r3, [r0, #4]
 800eaf0:	2314      	movs	r3, #20
 800eaf2:	fb03 1102 	mla	r1, r3, r2, r1
 800eaf6:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800eaf8:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	f7ff ff71 	bl	800e9e8 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	4a0d      	ldr	r2, [pc, #52]	; (800eb40 <vTaskSwitchContext+0x90>)
 800eb0a:	3358      	adds	r3, #88	; 0x58
 800eb0c:	6013      	str	r3, [r2, #0]
}
 800eb0e:	e7d6      	b.n	800eabe <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb10:	b952      	cbnz	r2, 800eb28 <vTaskSwitchContext+0x78>
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	b672      	cpsid	i
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	b662      	cpsie	i
 800eb26:	e7fe      	b.n	800eb26 <vTaskSwitchContext+0x76>
 800eb28:	3a01      	subs	r2, #1
 800eb2a:	e7d3      	b.n	800ead4 <vTaskSwitchContext+0x24>
 800eb2c:	200269a4 	.word	0x200269a4
 800eb30:	20026a24 	.word	0x20026a24
 800eb34:	2002652c 	.word	0x2002652c
 800eb38:	200269ac 	.word	0x200269ac
 800eb3c:	20026538 	.word	0x20026538
 800eb40:	200000e8 	.word	0x200000e8

0800eb44 <vTaskPlaceOnEventList>:
{
 800eb44:	b510      	push	{r4, lr}
 800eb46:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800eb48:	b950      	cbnz	r0, 800eb60 <vTaskPlaceOnEventList+0x1c>
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	b672      	cpsid	i
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	b662      	cpsie	i
 800eb5e:	e7fe      	b.n	800eb5e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb60:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <vTaskPlaceOnEventList+0x34>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	3118      	adds	r1, #24
 800eb66:	f7fe fcab 	bl	800d4c0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	2101      	movs	r1, #1
}
 800eb6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb72:	f7ff bca3 	b.w	800e4bc <prvAddCurrentTaskToDelayedList>
 800eb76:	bf00      	nop
 800eb78:	2002652c 	.word	0x2002652c

0800eb7c <vTaskPlaceOnEventListRestricted>:
	{
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	460d      	mov	r5, r1
 800eb80:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800eb82:	b950      	cbnz	r0, 800eb9a <vTaskPlaceOnEventListRestricted+0x1e>
 800eb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb88:	b672      	cpsid	i
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	b662      	cpsie	i
 800eb98:	e7fe      	b.n	800eb98 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb9a:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <vTaskPlaceOnEventListRestricted+0x3c>)
 800eb9c:	6819      	ldr	r1, [r3, #0]
 800eb9e:	3118      	adds	r1, #24
 800eba0:	f7fe fc82 	bl	800d4a8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800eba4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eba6:	4621      	mov	r1, r4
 800eba8:	bf0c      	ite	eq
 800ebaa:	4628      	moveq	r0, r5
 800ebac:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ebb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ebb4:	f7ff bc82 	b.w	800e4bc <prvAddCurrentTaskToDelayedList>
 800ebb8:	2002652c 	.word	0x2002652c

0800ebbc <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebbc:	68c3      	ldr	r3, [r0, #12]
{
 800ebbe:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebc0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ebc2:	b954      	cbnz	r4, 800ebda <xTaskRemoveFromEventList+0x1e>
 800ebc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc8:	b672      	cpsid	i
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	b662      	cpsie	i
 800ebd8:	e7fe      	b.n	800ebd8 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ebda:	f104 0118 	add.w	r1, r4, #24
 800ebde:	4608      	mov	r0, r1
 800ebe0:	9101      	str	r1, [sp, #4]
 800ebe2:	f7fe fc84 	bl	800d4ee <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebe6:	4b12      	ldr	r3, [pc, #72]	; (800ec30 <xTaskRemoveFromEventList+0x74>)
 800ebe8:	9901      	ldr	r1, [sp, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	b9e3      	cbnz	r3, 800ec28 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ebee:	1d21      	adds	r1, r4, #4
 800ebf0:	4608      	mov	r0, r1
 800ebf2:	9101      	str	r1, [sp, #4]
 800ebf4:	f7fe fc7b 	bl	800d4ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebf8:	4a0e      	ldr	r2, [pc, #56]	; (800ec34 <xTaskRemoveFromEventList+0x78>)
 800ebfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ebfc:	6810      	ldr	r0, [r2, #0]
 800ebfe:	9901      	ldr	r1, [sp, #4]
 800ec00:	4283      	cmp	r3, r0
 800ec02:	d900      	bls.n	800ec06 <xTaskRemoveFromEventList+0x4a>
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	4a0c      	ldr	r2, [pc, #48]	; (800ec38 <xTaskRemoveFromEventList+0x7c>)
 800ec08:	2014      	movs	r0, #20
 800ec0a:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec0e:	f7fe fc4b 	bl	800d4a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <xTaskRemoveFromEventList+0x80>)
 800ec14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d906      	bls.n	800ec2c <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800ec1e:	2001      	movs	r0, #1
 800ec20:	4b07      	ldr	r3, [pc, #28]	; (800ec40 <xTaskRemoveFromEventList+0x84>)
 800ec22:	6018      	str	r0, [r3, #0]
}
 800ec24:	b002      	add	sp, #8
 800ec26:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec28:	4806      	ldr	r0, [pc, #24]	; (800ec44 <xTaskRemoveFromEventList+0x88>)
 800ec2a:	e7f0      	b.n	800ec0e <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800ec2c:	2000      	movs	r0, #0
	return xReturn;
 800ec2e:	e7f9      	b.n	800ec24 <xTaskRemoveFromEventList+0x68>
 800ec30:	200269a4 	.word	0x200269a4
 800ec34:	200269ac 	.word	0x200269ac
 800ec38:	20026538 	.word	0x20026538
 800ec3c:	2002652c 	.word	0x2002652c
 800ec40:	20026a24 	.word	0x20026a24
 800ec44:	200269e0 	.word	0x200269e0

0800ec48 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec48:	4b03      	ldr	r3, [pc, #12]	; (800ec58 <vTaskInternalSetTimeOutState+0x10>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec4e:	4b03      	ldr	r3, [pc, #12]	; (800ec5c <vTaskInternalSetTimeOutState+0x14>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	6043      	str	r3, [r0, #4]
}
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	200269dc 	.word	0x200269dc
 800ec5c:	20026a20 	.word	0x20026a20

0800ec60 <xTaskCheckForTimeOut>:
{
 800ec60:	b570      	push	{r4, r5, r6, lr}
 800ec62:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ec64:	4605      	mov	r5, r0
 800ec66:	b950      	cbnz	r0, 800ec7e <xTaskCheckForTimeOut+0x1e>
 800ec68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6c:	b672      	cpsid	i
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	b662      	cpsie	i
 800ec7c:	e7fe      	b.n	800ec7c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800ec7e:	b951      	cbnz	r1, 800ec96 <xTaskCheckForTimeOut+0x36>
 800ec80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec84:	b672      	cpsid	i
 800ec86:	f383 8811 	msr	BASEPRI, r3
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	b662      	cpsie	i
 800ec94:	e7fe      	b.n	800ec94 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800ec96:	f7fe fca5 	bl	800d5e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ec9a:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <xTaskCheckForTimeOut+0x78>)
 800ec9c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	d010      	beq.n	800ecc6 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eca4:	480d      	ldr	r0, [pc, #52]	; (800ecdc <xTaskCheckForTimeOut+0x7c>)
 800eca6:	682e      	ldr	r6, [r5, #0]
 800eca8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecaa:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecac:	4286      	cmp	r6, r0
 800ecae:	d001      	beq.n	800ecb4 <xTaskCheckForTimeOut+0x54>
 800ecb0:	428a      	cmp	r2, r1
 800ecb2:	d90f      	bls.n	800ecd4 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecb4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ecb6:	4283      	cmp	r3, r0
 800ecb8:	d90a      	bls.n	800ecd0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800ecba:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ecbc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ecbe:	4413      	add	r3, r2
 800ecc0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ecc2:	f7ff ffc1 	bl	800ec48 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ecc6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ecc8:	f7fe fcb0 	bl	800d62c <vPortExitCritical>
}
 800eccc:	4620      	mov	r0, r4
 800ecce:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ecd4:	2401      	movs	r4, #1
 800ecd6:	e7f7      	b.n	800ecc8 <xTaskCheckForTimeOut+0x68>
 800ecd8:	20026a20 	.word	0x20026a20
 800ecdc:	200269dc 	.word	0x200269dc

0800ece0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ece0:	4b01      	ldr	r3, [pc, #4]	; (800ece8 <vTaskMissedYield+0x8>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	601a      	str	r2, [r3, #0]
}
 800ece6:	4770      	bx	lr
 800ece8:	20026a24 	.word	0x20026a24

0800ecec <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ecec:	4b01      	ldr	r3, [pc, #4]	; (800ecf4 <xTaskGetCurrentTaskHandle+0x8>)
 800ecee:	6818      	ldr	r0, [r3, #0]
	}
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	2002652c 	.word	0x2002652c

0800ecf8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ecf8:	4b05      	ldr	r3, [pc, #20]	; (800ed10 <xTaskGetSchedulerState+0x18>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	b133      	cbz	r3, 800ed0c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecfe:	4b05      	ldr	r3, [pc, #20]	; (800ed14 <xTaskGetSchedulerState+0x1c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	bf0c      	ite	eq
 800ed06:	2002      	moveq	r0, #2
 800ed08:	2000      	movne	r0, #0
 800ed0a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed0c:	2001      	movs	r0, #1
	}
 800ed0e:	4770      	bx	lr
 800ed10:	200269f4 	.word	0x200269f4
 800ed14:	200269a4 	.word	0x200269a4

0800ed18 <xTaskPriorityInherit>:
	{
 800ed18:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	b340      	cbz	r0, 800ed70 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed1e:	4d1b      	ldr	r5, [pc, #108]	; (800ed8c <xTaskPriorityInherit+0x74>)
 800ed20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ed22:	682a      	ldr	r2, [r5, #0]
 800ed24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d228      	bcs.n	800ed7c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed2a:	6982      	ldr	r2, [r0, #24]
 800ed2c:	2a00      	cmp	r2, #0
 800ed2e:	db04      	blt.n	800ed3a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed30:	682a      	ldr	r2, [r5, #0]
 800ed32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ed34:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ed38:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed3a:	2214      	movs	r2, #20
 800ed3c:	4e14      	ldr	r6, [pc, #80]	; (800ed90 <xTaskPriorityInherit+0x78>)
 800ed3e:	fb02 6303 	mla	r3, r2, r3, r6
 800ed42:	6962      	ldr	r2, [r4, #20]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d115      	bne.n	800ed74 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed48:	1d21      	adds	r1, r4, #4
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	9101      	str	r1, [sp, #4]
 800ed4e:	f7fe fbce 	bl	800d4ee <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed52:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed54:	4a0f      	ldr	r2, [pc, #60]	; (800ed94 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed58:	6810      	ldr	r0, [r2, #0]
 800ed5a:	9901      	ldr	r1, [sp, #4]
 800ed5c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed5e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed60:	d900      	bls.n	800ed64 <xTaskPriorityInherit+0x4c>
 800ed62:	6013      	str	r3, [r2, #0]
 800ed64:	2014      	movs	r0, #20
 800ed66:	fb00 6003 	mla	r0, r0, r3, r6
 800ed6a:	f7fe fb9d 	bl	800d4a8 <vListInsertEnd>
				xReturn = pdTRUE;
 800ed6e:	2001      	movs	r0, #1
	}
 800ed70:	b002      	add	sp, #8
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed74:	682b      	ldr	r3, [r5, #0]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed7a:	e7f8      	b.n	800ed6e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ed80:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ed82:	42a0      	cmp	r0, r4
 800ed84:	bf2c      	ite	cs
 800ed86:	2000      	movcs	r0, #0
 800ed88:	2001      	movcc	r0, #1
 800ed8a:	e7f1      	b.n	800ed70 <xTaskPriorityInherit+0x58>
 800ed8c:	2002652c 	.word	0x2002652c
 800ed90:	20026538 	.word	0x20026538
 800ed94:	200269ac 	.word	0x200269ac

0800ed98 <xTaskPriorityDisinherit>:
	{
 800ed98:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800ed9a:	b910      	cbnz	r0, 800eda2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800ed9c:	2000      	movs	r0, #0
	}
 800ed9e:	b002      	add	sp, #8
 800eda0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800eda2:	4b1e      	ldr	r3, [pc, #120]	; (800ee1c <xTaskPriorityDisinherit+0x84>)
 800eda4:	681c      	ldr	r4, [r3, #0]
 800eda6:	4284      	cmp	r4, r0
 800eda8:	d00a      	beq.n	800edc0 <xTaskPriorityDisinherit+0x28>
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	b672      	cpsid	i
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	b662      	cpsie	i
 800edbe:	e7fe      	b.n	800edbe <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800edc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800edc2:	b953      	cbnz	r3, 800edda <xTaskPriorityDisinherit+0x42>
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	b672      	cpsid	i
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	b662      	cpsie	i
 800edd8:	e7fe      	b.n	800edd8 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800eddc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edde:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ede0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ede2:	4291      	cmp	r1, r2
 800ede4:	d0da      	beq.n	800ed9c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1d8      	bne.n	800ed9c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edea:	1d21      	adds	r1, r4, #4
 800edec:	4608      	mov	r0, r1
 800edee:	9101      	str	r1, [sp, #4]
 800edf0:	f7fe fb7d 	bl	800d4ee <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edf4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800edf6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edfc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edfe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee00:	4a07      	ldr	r2, [pc, #28]	; (800ee20 <xTaskPriorityDisinherit+0x88>)
 800ee02:	6810      	ldr	r0, [r2, #0]
 800ee04:	4283      	cmp	r3, r0
 800ee06:	d900      	bls.n	800ee0a <xTaskPriorityDisinherit+0x72>
 800ee08:	6013      	str	r3, [r2, #0]
 800ee0a:	4a06      	ldr	r2, [pc, #24]	; (800ee24 <xTaskPriorityDisinherit+0x8c>)
 800ee0c:	2014      	movs	r0, #20
 800ee0e:	fb00 2003 	mla	r0, r0, r3, r2
 800ee12:	f7fe fb49 	bl	800d4a8 <vListInsertEnd>
					xReturn = pdTRUE;
 800ee16:	2001      	movs	r0, #1
		return xReturn;
 800ee18:	e7c1      	b.n	800ed9e <xTaskPriorityDisinherit+0x6>
 800ee1a:	bf00      	nop
 800ee1c:	2002652c 	.word	0x2002652c
 800ee20:	200269ac 	.word	0x200269ac
 800ee24:	20026538 	.word	0x20026538

0800ee28 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800ee28:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d048      	beq.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee30:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ee32:	b952      	cbnz	r2, 800ee4a <vTaskPriorityDisinheritAfterTimeout+0x22>
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	b672      	cpsid	i
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	b662      	cpsie	i
 800ee48:	e7fe      	b.n	800ee48 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ee4c:	4299      	cmp	r1, r3
 800ee4e:	bf38      	it	cc
 800ee50:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ee54:	428b      	cmp	r3, r1
 800ee56:	d034      	beq.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee58:	2a01      	cmp	r2, #1
 800ee5a:	d132      	bne.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800ee5c:	4a1a      	ldr	r2, [pc, #104]	; (800eec8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ee5e:	6812      	ldr	r2, [r2, #0]
 800ee60:	4282      	cmp	r2, r0
 800ee62:	d10a      	bne.n	800ee7a <vTaskPriorityDisinheritAfterTimeout+0x52>
 800ee64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee68:	b672      	cpsid	i
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	b662      	cpsie	i
 800ee78:	e7fe      	b.n	800ee78 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee7a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee7c:	4d13      	ldr	r5, [pc, #76]	; (800eecc <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee7e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee80:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ee84:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee86:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee8a:	bfa8      	it	ge
 800ee8c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee90:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee92:	bfa8      	it	ge
 800ee94:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d113      	bne.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee9a:	1d01      	adds	r1, r0, #4
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	9101      	str	r1, [sp, #4]
 800eea0:	f7fe fb25 	bl	800d4ee <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800eea4:	4a0a      	ldr	r2, [pc, #40]	; (800eed0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800eea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eea8:	6810      	ldr	r0, [r2, #0]
 800eeaa:	9901      	ldr	r1, [sp, #4]
 800eeac:	4283      	cmp	r3, r0
 800eeae:	d900      	bls.n	800eeb2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800eeb0:	6013      	str	r3, [r2, #0]
 800eeb2:	2014      	movs	r0, #20
 800eeb4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800eeb8:	b003      	add	sp, #12
 800eeba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800eebe:	f7fe baf3 	b.w	800d4a8 <vListInsertEnd>
	}
 800eec2:	b003      	add	sp, #12
 800eec4:	bd30      	pop	{r4, r5, pc}
 800eec6:	bf00      	nop
 800eec8:	2002652c 	.word	0x2002652c
 800eecc:	20026538 	.word	0x20026538
 800eed0:	200269ac 	.word	0x200269ac

0800eed4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800eed4:	4b04      	ldr	r3, [pc, #16]	; (800eee8 <pvTaskIncrementMutexHeldCount+0x14>)
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	b11a      	cbz	r2, 800eee2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800eeda:	6819      	ldr	r1, [r3, #0]
 800eedc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800eede:	3201      	adds	r2, #1
 800eee0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800eee2:	6818      	ldr	r0, [r3, #0]
	}
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	2002652c 	.word	0x2002652c

0800eeec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800eeee:	4c11      	ldr	r4, [pc, #68]	; (800ef34 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800eef0:	f7fe fb78 	bl	800d5e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800eef4:	6825      	ldr	r5, [r4, #0]
 800eef6:	b9bd      	cbnz	r5, 800ef28 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800eef8:	4f0f      	ldr	r7, [pc, #60]	; (800ef38 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800eefa:	4e10      	ldr	r6, [pc, #64]	; (800ef3c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800eefc:	4638      	mov	r0, r7
 800eefe:	f7fe fac5 	bl	800d48c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7fe fac2 	bl	800d48c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef08:	4b0d      	ldr	r3, [pc, #52]	; (800ef40 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef0a:	4a0e      	ldr	r2, [pc, #56]	; (800ef44 <prvCheckForValidListAndQueue+0x58>)
 800ef0c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ef0e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef10:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ef12:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <prvCheckForValidListAndQueue+0x5c>)
 800ef14:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef16:	4b0d      	ldr	r3, [pc, #52]	; (800ef4c <prvCheckForValidListAndQueue+0x60>)
 800ef18:	9500      	str	r5, [sp, #0]
 800ef1a:	f7fe fdaf 	bl	800da7c <xQueueGenericCreateStatic>
 800ef1e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef20:	b110      	cbz	r0, 800ef28 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef22:	490b      	ldr	r1, [pc, #44]	; (800ef50 <prvCheckForValidListAndQueue+0x64>)
 800ef24:	f7ff f9ea 	bl	800e2fc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ef28:	b003      	add	sp, #12
 800ef2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ef2e:	f7fe bb7d 	b.w	800d62c <vPortExitCritical>
 800ef32:	bf00      	nop
 800ef34:	20026b4c 	.word	0x20026b4c
 800ef38:	20026ad0 	.word	0x20026ad0
 800ef3c:	20026ae4 	.word	0x20026ae4
 800ef40:	20026a28 	.word	0x20026a28
 800ef44:	20026a30 	.word	0x20026a30
 800ef48:	20026a2c 	.word	0x20026a2c
 800ef4c:	20026afc 	.word	0x20026afc
 800ef50:	0802a336 	.word	0x0802a336

0800ef54 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800ef54:	4291      	cmp	r1, r2
{
 800ef56:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef58:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef5a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ef5c:	d80a      	bhi.n	800ef74 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef5e:	1ad2      	subs	r2, r2, r3
 800ef60:	6983      	ldr	r3, [r0, #24]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d20d      	bcs.n	800ef82 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef66:	1d01      	adds	r1, r0, #4
 800ef68:	4b07      	ldr	r3, [pc, #28]	; (800ef88 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef6a:	6818      	ldr	r0, [r3, #0]
 800ef6c:	f7fe faa8 	bl	800d4c0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ef70:	2000      	movs	r0, #0
}
 800ef72:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d201      	bcs.n	800ef7c <prvInsertTimerInActiveList+0x28>
 800ef78:	4299      	cmp	r1, r3
 800ef7a:	d202      	bcs.n	800ef82 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef7c:	1d01      	adds	r1, r0, #4
 800ef7e:	4b03      	ldr	r3, [pc, #12]	; (800ef8c <prvInsertTimerInActiveList+0x38>)
 800ef80:	e7f3      	b.n	800ef6a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ef82:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ef84:	e7f5      	b.n	800ef72 <prvInsertTimerInActiveList+0x1e>
 800ef86:	bf00      	nop
 800ef88:	20026a2c 	.word	0x20026a2c
 800ef8c:	20026a28 	.word	0x20026a28

0800ef90 <xTimerCreateTimerTask>:
{
 800ef90:	b510      	push	{r4, lr}
 800ef92:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ef94:	f7ff ffaa 	bl	800eeec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ef98:	4b13      	ldr	r3, [pc, #76]	; (800efe8 <xTimerCreateTimerTask+0x58>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	b1b3      	cbz	r3, 800efcc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef9e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800efa0:	aa07      	add	r2, sp, #28
 800efa2:	a906      	add	r1, sp, #24
 800efa4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800efa6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800efaa:	f7fe f96d 	bl	800d288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800efae:	9b05      	ldr	r3, [sp, #20]
 800efb0:	9a07      	ldr	r2, [sp, #28]
 800efb2:	9302      	str	r3, [sp, #8]
 800efb4:	9b06      	ldr	r3, [sp, #24]
 800efb6:	490d      	ldr	r1, [pc, #52]	; (800efec <xTimerCreateTimerTask+0x5c>)
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	2302      	movs	r3, #2
 800efbc:	480c      	ldr	r0, [pc, #48]	; (800eff0 <xTimerCreateTimerTask+0x60>)
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	4623      	mov	r3, r4
 800efc2:	f7ff fb79 	bl	800e6b8 <xTaskCreateStatic>
 800efc6:	4b0b      	ldr	r3, [pc, #44]	; (800eff4 <xTimerCreateTimerTask+0x64>)
 800efc8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800efca:	b950      	cbnz	r0, 800efe2 <xTimerCreateTimerTask+0x52>
 800efcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd0:	b672      	cpsid	i
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	b662      	cpsie	i
	configASSERT( xReturn );
 800efe0:	e7fe      	b.n	800efe0 <xTimerCreateTimerTask+0x50>
}
 800efe2:	2001      	movs	r0, #1
 800efe4:	b008      	add	sp, #32
 800efe6:	bd10      	pop	{r4, pc}
 800efe8:	20026b4c 	.word	0x20026b4c
 800efec:	0802a33b 	.word	0x0802a33b
 800eff0:	0800f101 	.word	0x0800f101
 800eff4:	20026b50 	.word	0x20026b50

0800eff8 <xTimerGenericCommand>:
{
 800eff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800effa:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800effc:	4604      	mov	r4, r0
{
 800effe:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800f000:	b950      	cbnz	r0, 800f018 <xTimerGenericCommand+0x20>
 800f002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f006:	b672      	cpsid	i
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	b662      	cpsie	i
 800f016:	e7fe      	b.n	800f016 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800f018:	4d0c      	ldr	r5, [pc, #48]	; (800f04c <xTimerGenericCommand+0x54>)
 800f01a:	6828      	ldr	r0, [r5, #0]
 800f01c:	b178      	cbz	r0, 800f03e <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f01e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f020:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f022:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f026:	dc0c      	bgt.n	800f042 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f028:	f7ff fe66 	bl	800ecf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f02c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f02e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f030:	4669      	mov	r1, sp
 800f032:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f034:	bf0c      	ite	eq
 800f036:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f038:	461a      	movne	r2, r3
 800f03a:	f7fe fda4 	bl	800db86 <xQueueGenericSend>
}
 800f03e:	b004      	add	sp, #16
 800f040:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f042:	2300      	movs	r3, #0
 800f044:	4669      	mov	r1, sp
 800f046:	f7fe feab 	bl	800dda0 <xQueueGenericSendFromISR>
 800f04a:	e7f8      	b.n	800f03e <xTimerGenericCommand+0x46>
 800f04c:	20026b4c 	.word	0x20026b4c

0800f050 <prvSampleTimeNow>:
{
 800f050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800f054:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800f0fc <prvSampleTimeNow+0xac>
{
 800f058:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800f05a:	f7ff fba1 	bl	800e7a0 <xTaskGetTickCount>
 800f05e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800f060:	f8d8 3000 	ldr.w	r3, [r8]
 800f064:	4283      	cmp	r3, r0
 800f066:	d942      	bls.n	800f0ee <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f068:	4f22      	ldr	r7, [pc, #136]	; (800f0f4 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f06a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	b95a      	cbnz	r2, 800f08c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800f074:	4a20      	ldr	r2, [pc, #128]	; (800f0f8 <prvSampleTimeNow+0xa8>)
 800f076:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f078:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f07a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800f07c:	6039      	str	r1, [r7, #0]
}
 800f07e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800f080:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800f082:	f8c8 5000 	str.w	r5, [r8]
}
 800f086:	b004      	add	sp, #16
 800f088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f08c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f08e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f090:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f094:	1d21      	adds	r1, r4, #4
 800f096:	4608      	mov	r0, r1
 800f098:	9103      	str	r1, [sp, #12]
 800f09a:	f7fe fa28 	bl	800d4ee <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f09e:	6a23      	ldr	r3, [r4, #32]
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f0a8:	9903      	ldr	r1, [sp, #12]
 800f0aa:	f013 0f04 	tst.w	r3, #4
 800f0ae:	d0de      	beq.n	800f06e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f0b0:	69a3      	ldr	r3, [r4, #24]
 800f0b2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f0b4:	459a      	cmp	sl, r3
 800f0b6:	d205      	bcs.n	800f0c4 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0b8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f0ba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0be:	f7fe f9ff 	bl	800d4c0 <vListInsert>
 800f0c2:	e7d4      	b.n	800f06e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	4652      	mov	r2, sl
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f8cd 9000 	str.w	r9, [sp]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	f7ff ff92 	bl	800eff8 <xTimerGenericCommand>
				configASSERT( xResult );
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d1ca      	bne.n	800f06e <prvSampleTimeNow+0x1e>
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	b672      	cpsid	i
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	b662      	cpsie	i
 800f0ec:	e7fe      	b.n	800f0ec <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	e7c5      	b.n	800f07e <prvSampleTimeNow+0x2e>
 800f0f2:	bf00      	nop
 800f0f4:	20026a28 	.word	0x20026a28
 800f0f8:	20026a2c 	.word	0x20026a2c
 800f0fc:	20026af8 	.word	0x20026af8

0800f100 <prvTimerTask>:
{
 800f100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f104:	4d71      	ldr	r5, [pc, #452]	; (800f2cc <prvTimerTask+0x1cc>)
{
 800f106:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f108:	4e71      	ldr	r6, [pc, #452]	; (800f2d0 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f10a:	682b      	ldr	r3, [r5, #0]
 800f10c:	f8d3 8000 	ldr.w	r8, [r3]
 800f110:	f1b8 0f00 	cmp.w	r8, #0
 800f114:	d037      	beq.n	800f186 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f116:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f118:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f11a:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800f11e:	f7ff fb37 	bl	800e790 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f122:	a804      	add	r0, sp, #16
 800f124:	f7ff ff94 	bl	800f050 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800f128:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f12a:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d16b      	bne.n	800f208 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f130:	2c00      	cmp	r4, #0
 800f132:	d14e      	bne.n	800f1d2 <prvTimerTask+0xd2>
 800f134:	4540      	cmp	r0, r8
 800f136:	d352      	bcc.n	800f1de <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800f138:	f7ff fbd0 	bl	800e8dc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f142:	1d38      	adds	r0, r7, #4
 800f144:	f7fe f9d3 	bl	800d4ee <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f148:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f14c:	0758      	lsls	r0, r3, #29
 800f14e:	d51c      	bpl.n	800f18a <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f150:	69b9      	ldr	r1, [r7, #24]
 800f152:	4643      	mov	r3, r8
 800f154:	464a      	mov	r2, r9
 800f156:	4638      	mov	r0, r7
 800f158:	4441      	add	r1, r8
 800f15a:	f7ff fefb 	bl	800ef54 <prvInsertTimerInActiveList>
 800f15e:	b1c0      	cbz	r0, 800f192 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f160:	4623      	mov	r3, r4
 800f162:	4642      	mov	r2, r8
 800f164:	4621      	mov	r1, r4
 800f166:	4638      	mov	r0, r7
 800f168:	9400      	str	r4, [sp, #0]
 800f16a:	f7ff ff45 	bl	800eff8 <xTimerGenericCommand>
			configASSERT( xResult );
 800f16e:	b980      	cbnz	r0, 800f192 <prvTimerTask+0x92>
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	b672      	cpsid	i
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	b662      	cpsie	i
 800f184:	e7fe      	b.n	800f184 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f186:	2401      	movs	r4, #1
 800f188:	e7c9      	b.n	800f11e <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f18a:	f023 0301 	bic.w	r3, r3, #1
 800f18e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	4638      	mov	r0, r7
 800f196:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f198:	2200      	movs	r2, #0
 800f19a:	a904      	add	r1, sp, #16
 800f19c:	6830      	ldr	r0, [r6, #0]
 800f19e:	f7fe fec4 	bl	800df2a <xQueueReceive>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d0b1      	beq.n	800f10a <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1a6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1a8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	db2f      	blt.n	800f20e <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1ae:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f1b0:	6963      	ldr	r3, [r4, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d132      	bne.n	800f21c <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1b6:	a803      	add	r0, sp, #12
 800f1b8:	f7ff ff4a 	bl	800f050 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f1bc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1be:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800f1c0:	2b09      	cmp	r3, #9
 800f1c2:	d8e9      	bhi.n	800f198 <prvTimerTask+0x98>
 800f1c4:	e8df f003 	tbb	[pc, r3]
 800f1c8:	592e2e2e 	.word	0x592e2e2e
 800f1cc:	2e2e7a60 	.word	0x2e2e7a60
 800f1d0:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f1d2:	4b40      	ldr	r3, [pc, #256]	; (800f2d4 <prvTimerTask+0x1d4>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681c      	ldr	r4, [r3, #0]
 800f1d8:	fab4 f484 	clz	r4, r4
 800f1dc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f1de:	4622      	mov	r2, r4
 800f1e0:	eba8 0109 	sub.w	r1, r8, r9
 800f1e4:	6830      	ldr	r0, [r6, #0]
 800f1e6:	f7ff f8c8 	bl	800e37a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f1ea:	f7ff fb77 	bl	800e8dc <xTaskResumeAll>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d1d2      	bne.n	800f198 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800f1f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	e7c7      	b.n	800f198 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800f208:	f7ff fb68 	bl	800e8dc <xTaskResumeAll>
}
 800f20c:	e7c4      	b.n	800f198 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f20e:	9b05      	ldr	r3, [sp, #20]
 800f210:	9907      	ldr	r1, [sp, #28]
 800f212:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f214:	9b04      	ldr	r3, [sp, #16]
 800f216:	2b00      	cmp	r3, #0
 800f218:	dbbe      	blt.n	800f198 <prvTimerTask+0x98>
 800f21a:	e7c8      	b.n	800f1ae <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f21c:	1d20      	adds	r0, r4, #4
 800f21e:	f7fe f966 	bl	800d4ee <uxListRemove>
 800f222:	e7c8      	b.n	800f1b6 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f224:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f228:	4620      	mov	r0, r4
 800f22a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f22c:	f043 0301 	orr.w	r3, r3, #1
 800f230:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f234:	9b05      	ldr	r3, [sp, #20]
 800f236:	4419      	add	r1, r3
 800f238:	f7ff fe8c 	bl	800ef54 <prvInsertTimerInActiveList>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d0ab      	beq.n	800f198 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f240:	6a23      	ldr	r3, [r4, #32]
 800f242:	4620      	mov	r0, r4
 800f244:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f246:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f24a:	0759      	lsls	r1, r3, #29
 800f24c:	d5a4      	bpl.n	800f198 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f24e:	69a2      	ldr	r2, [r4, #24]
 800f250:	2300      	movs	r3, #0
 800f252:	9905      	ldr	r1, [sp, #20]
 800f254:	4620      	mov	r0, r4
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	440a      	add	r2, r1
 800f25a:	4619      	mov	r1, r3
 800f25c:	f7ff fecc 	bl	800eff8 <xTimerGenericCommand>
							configASSERT( xResult );
 800f260:	2800      	cmp	r0, #0
 800f262:	d199      	bne.n	800f198 <prvTimerTask+0x98>
 800f264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f268:	b672      	cpsid	i
 800f26a:	f383 8811 	msr	BASEPRI, r3
 800f26e:	f3bf 8f6f 	isb	sy
 800f272:	f3bf 8f4f 	dsb	sy
 800f276:	b662      	cpsie	i
 800f278:	e7fe      	b.n	800f278 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f27a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f27e:	f023 0301 	bic.w	r3, r3, #1
 800f282:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f286:	e787      	b.n	800f198 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f288:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f28c:	f043 0301 	orr.w	r3, r3, #1
 800f290:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f294:	9905      	ldr	r1, [sp, #20]
 800f296:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f298:	b951      	cbnz	r1, 800f2b0 <prvTimerTask+0x1b0>
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	b672      	cpsid	i
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	b662      	cpsie	i
 800f2ae:	e7fe      	b.n	800f2ae <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	4401      	add	r1, r0
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f7ff fe4d 	bl	800ef54 <prvInsertTimerInActiveList>
					break;
 800f2ba:	e76d      	b.n	800f198 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f2bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f2c0:	079a      	lsls	r2, r3, #30
 800f2c2:	d4dc      	bmi.n	800f27e <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f7fe f8a5 	bl	800d414 <vPortFree>
 800f2ca:	e765      	b.n	800f198 <prvTimerTask+0x98>
 800f2cc:	20026a28 	.word	0x20026a28
 800f2d0:	20026b4c 	.word	0x20026b4c
 800f2d4:	20026a2c 	.word	0x20026a2c

0800f2d8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2dc:	b093      	sub	sp, #76	; 0x4c
 800f2de:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f2e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800f2e4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 800f2e8:	9111      	str	r1, [sp, #68]	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f2ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ee:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f2f0:	4b73      	ldr	r3, [pc, #460]	; (800f4c0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800f2f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2f4:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f2f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f2f8:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f2fa:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f2fc:	930c      	str	r3, [sp, #48]	; 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f2fe:	0053      	lsls	r3, r2, #1
 800f300:	930d      	str	r3, [sp, #52]	; 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800f302:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800f306:	4413      	add	r3, r2
 800f308:	455b      	cmp	r3, fp
 800f30a:	d803      	bhi.n	800f314 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f30c:	9808      	ldr	r0, [sp, #32]
 800f30e:	b013      	add	sp, #76	; 0x4c
 800f310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f314:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800f318:	9b06      	ldr	r3, [sp, #24]
    currentMCU++;
 800f31a:	f10b 0b01 	add.w	fp, fp, #1
    pLum = pInBuffer;
 800f31e:	4681      	mov	r9, r0
    for(i= 0; i <  16; i+=2)
 800f320:	f04f 0800 	mov.w	r8, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f324:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f328:	9b01      	ldr	r3, [sp, #4]
 800f32a:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f32e:	9b06      	ldr	r3, [sp, #24]
 800f330:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800f33a:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800f33c:	f500 7380 	add.w	r3, r0, #256	; 0x100
 800f340:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f344:	9a00      	ldr	r2, [sp, #0]
 800f346:	4293      	cmp	r3, r2
 800f348:	f240 80ac 	bls.w	800f4a4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>
        pOutAddr = pOutBuffer + refline;
 800f34c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f34e:	f04f 0c00 	mov.w	ip, #0
 800f352:	f8cd 900c 	str.w	r9, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800f356:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f358:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800f35a:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f35c:	4413      	add	r3, r2
 800f35e:	930e      	str	r3, [sp, #56]	; 0x38
 800f360:	9b02      	ldr	r3, [sp, #8]
 800f362:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800f364:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800f366:	2600      	movs	r6, #0
 800f368:	9f03      	ldr	r7, [sp, #12]
 800f36a:	3b01      	subs	r3, #1
 800f36c:	9305      	str	r3, [sp, #20]
 800f36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f370:	4463      	add	r3, ip
 800f372:	930a      	str	r3, [sp, #40]	; 0x28
 800f374:	9b07      	ldr	r3, [sp, #28]
 800f376:	4463      	add	r3, ip
 800f378:	930b      	str	r3, [sp, #44]	; 0x2c
 800f37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          for(j=0; j < 8; j+=2)
 800f37c:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800f37e:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800f382:	4433      	add	r3, r6
 800f384:	930f      	str	r3, [sp, #60]	; 0x3c
 800f386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f388:	4433      	add	r3, r6
 800f38a:	9310      	str	r3, [sp, #64]	; 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f38c:	9b05      	ldr	r3, [sp, #20]
 800f38e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f392:	9305      	str	r3, [sp, #20]
 800f394:	4b4b      	ldr	r3, [pc, #300]	; (800f4c4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800f396:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f39a:	9b05      	ldr	r3, [sp, #20]
 800f39c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f3a0:	4b49      	ldr	r3, [pc, #292]	; (800f4c8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800f3a2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f3a6:	4b49      	ldr	r3, [pc, #292]	; (800f4cc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800f3a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3ac:	4b48      	ldr	r3, [pc, #288]	; (800f4d0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800f3ae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f3b2:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f3b4:	4947      	ldr	r1, [pc, #284]	; (800f4d4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
 800f3b6:	440d      	add	r5, r1
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	eb05 010e 	add.w	r1, r5, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3be:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f3c2:	441c      	add	r4, r3
            *(__IO uint16_t *)pOutAddr = 
 800f3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f3c6:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800f3ca:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3ce:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f3d2:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3d4:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800f3d8:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 800f3dc:	0889      	lsrs	r1, r1, #2
 800f3de:	0149      	lsls	r1, r1, #5
 800f3e0:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f3e4:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f3e8:	5399      	strh	r1, [r3, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 800f3ea:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f3f0:	eb05 010e 	add.w	r1, r5, lr
 800f3f4:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3f8:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f3fc:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f3fe:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f402:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f406:	0889      	lsrs	r1, r1, #2
 800f408:	0149      	lsls	r1, r1, #5
 800f40a:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f40e:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800f412:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f416:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800f418:	f897 e006 	ldrb.w	lr, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800f41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f41e:	eb05 010e 	add.w	r1, r5, lr
 800f422:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f426:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f42a:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f42c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f430:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f434:	0889      	lsrs	r1, r1, #2
 800f436:	0149      	lsls	r1, r1, #5
 800f438:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f43c:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800f440:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800f444:	5399      	strh	r1, [r3, r6]
          for(j=0; j < 8; j+=2)
 800f446:	3604      	adds	r6, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800f448:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800f44a:	2e10      	cmp	r6, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f44c:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f44e:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f450:	4421      	add	r1, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f452:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f456:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f45a:	ea4f 05d5 	mov.w	r5, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f45e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f460:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800f464:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800f468:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 800f46c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
 800f470:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f474:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f476:	d180      	bne.n	800f37a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
 800f478:	9b04      	ldr	r3, [sp, #16]
        for(k= 0; k<2; k++)
 800f47a:	f10c 0c10 	add.w	ip, ip, #16
            pChrom++;
 800f47e:	3304      	adds	r3, #4
        for(k= 0; k<2; k++)
 800f480:	f1bc 0f20 	cmp.w	ip, #32
            pChrom++;
 800f484:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800f486:	9b03      	ldr	r3, [sp, #12]
 800f488:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800f48c:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800f48e:	f47f af69 	bne.w	800f364 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8c>
            pChrom++;
 800f492:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800f494:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f498:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800f49a:	3308      	adds	r3, #8
 800f49c:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4a0:	441a      	add	r2, r3
 800f4a2:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800f4a4:	f108 0802 	add.w	r8, r8, #2
 800f4a8:	f1b8 0f10 	cmp.w	r8, #16
 800f4ac:	d102      	bne.n	800f4b4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800f4ae:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800f4b2:	e726      	b.n	800f302 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
      if(i == 8)
 800f4b4:	f1b8 0f08 	cmp.w	r8, #8
        pLum = pInBuffer + 128;
 800f4b8:	bf08      	it	eq
 800f4ba:	f100 0980 	addeq.w	r9, r0, #128	; 0x80
 800f4be:	e740      	b.n	800f342 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 800f4c0:	20027b54 	.word	0x20027b54
 800f4c4:	20026b54 	.word	0x20026b54
 800f4c8:	20027754 	.word	0x20027754
 800f4cc:	20027354 	.word	0x20027354
 800f4d0:	20026f54 	.word	0x20026f54
 800f4d4:	0802a343 	.word	0x0802a343

0800f4d8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f4dc:	0a1b      	lsrs	r3, r3, #8
{  
 800f4de:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f4e0:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f4e2:	4b4f      	ldr	r3, [pc, #316]	; (800f620 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800f4e4:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f4e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 800f4e8:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f4ec:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f4ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f4f0:	691b      	ldr	r3, [r3, #16]
{  
 800f4f2:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f4f4:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f4f6:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800f4f8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	4573      	cmp	r3, lr
 800f500:	d803      	bhi.n	800f50a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f502:	9805      	ldr	r0, [sp, #20]
 800f504:	b00d      	add	sp, #52	; 0x34
 800f506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f50a:	ea4f 120e 	mov.w	r2, lr, lsl #4
 800f50e:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 800f510:	f10e 0e01 	add.w	lr, lr, #1
 800f514:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 800f518:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f51a:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f51e:	9b03      	ldr	r3, [sp, #12]
 800f520:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f524:	9b02      	ldr	r3, [sp, #8]
 800f526:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f52a:	005b      	lsls	r3, r3, #1
 800f52c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f530:	9300      	str	r3, [sp, #0]
    currentMCU++;
 800f532:	2308      	movs	r3, #8
 800f534:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f536:	9b07      	ldr	r3, [sp, #28]
 800f538:	9a00      	ldr	r2, [sp, #0]
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d969      	bls.n	800f612 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 800f53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f540:	46d0      	mov	r8, sl
 800f542:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800f546:	f107 0308 	add.w	r3, r7, #8
 800f54a:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800f54c:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 800f54e:	2400      	movs	r4, #0
 800f550:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800f552:	f108 0301 	add.w	r3, r8, #1
 800f556:	930b      	str	r3, [sp, #44]	; 0x2c
 800f558:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800f55c:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800f560:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f562:	9b01      	ldr	r3, [sp, #4]
 800f564:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f568:	9301      	str	r3, [sp, #4]
 800f56a:	4b2e      	ldr	r3, [pc, #184]	; (800f624 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800f56c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f570:	9b01      	ldr	r3, [sp, #4]
 800f572:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800f576:	4b2c      	ldr	r3, [pc, #176]	; (800f628 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800f578:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f57c:	4b2b      	ldr	r3, [pc, #172]	; (800f62c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800f57e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f582:	4b2b      	ldr	r3, [pc, #172]	; (800f630 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800f584:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f588:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f58a:	4a2a      	ldr	r2, [pc, #168]	; (800f634 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800f58c:	4613      	mov	r3, r2
 800f58e:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f590:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f594:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f598:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800f59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f59c:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5a0:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f5a4:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5a6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f5aa:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5ae:	0892      	lsrs	r2, r2, #2
 800f5b0:	0152      	lsls	r2, r2, #5
 800f5b2:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800f5b6:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800f5ba:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f5be:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800f5c2:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800f5c6:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5ca:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f5cc:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f5ce:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800f5d0:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5d2:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f5d6:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5da:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f5de:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5e2:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800f5e6:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800f5ea:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 800f5ee:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f5f2:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f5f4:	d1b0      	bne.n	800f558 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 800f5f6:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800f5f8:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800f5fa:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800f5fe:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 800f602:	42bb      	cmp	r3, r7
 800f604:	d1a2      	bne.n	800f54c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f606:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800f608:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f60c:	9b03      	ldr	r3, [sp, #12]
 800f60e:	441a      	add	r2, r3
 800f610:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800f612:	9b04      	ldr	r3, [sp, #16]
 800f614:	3b01      	subs	r3, #1
 800f616:	9304      	str	r3, [sp, #16]
 800f618:	d18d      	bne.n	800f536 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800f61a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800f61e:	e76b      	b.n	800f4f8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800f620:	20027b54 	.word	0x20027b54
 800f624:	20026b54 	.word	0x20026b54
 800f628:	20027754 	.word	0x20027754
 800f62c:	20027354 	.word	0x20027354
 800f630:	20026f54 	.word	0x20026f54
 800f634:	0802a343 	.word	0x0802a343

0800f638 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63c:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f63e:	22c0      	movs	r2, #192	; 0xc0
{  
 800f640:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 800f642:	4654      	mov	r4, sl
{  
 800f644:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f646:	fbb3 f3f2 	udiv	r3, r3, r2
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f64a:	4a35      	ldr	r2, [pc, #212]	; (800f720 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f64c:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f64e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800f650:	9100      	str	r1, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f652:	6a91      	ldr	r1, [r2, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f654:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f656:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f658:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800f65a:	9b04      	ldr	r3, [sp, #16]
 800f65c:	eb03 020a 	add.w	r2, r3, sl
 800f660:	42a2      	cmp	r2, r4
 800f662:	d803      	bhi.n	800f66c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f664:	4618      	mov	r0, r3
 800f666:	b009      	add	sp, #36	; 0x24
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f66c:	00e1      	lsls	r1, r4, #3
 800f66e:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;   
 800f670:	3401      	adds	r4, #1
    pLum = pInBuffer;
 800f672:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f674:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f678:	9a01      	ldr	r2, [sp, #4]
 800f67a:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f67e:	9a00      	ldr	r2, [sp, #0]
 800f680:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;   
 800f684:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f686:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 800f688:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f68a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f68e:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f692:	9905      	ldr	r1, [sp, #20]
 800f694:	4291      	cmp	r1, r2
 800f696:	d93d      	bls.n	800f714 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 800f698:	9907      	ldr	r1, [sp, #28]
 800f69a:	f106 3eff 	add.w	lr, r6, #4294967295
 800f69e:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 800f6a0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800f6a4:	9102      	str	r1, [sp, #8]
 800f6a6:	f105 0110 	add.w	r1, r5, #16
 800f6aa:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800f6ac:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f6ae:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800f6b2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f6b6:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f6ba:	4b1a      	ldr	r3, [pc, #104]	; (800f724 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800f6bc:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f6be:	4f1a      	ldr	r7, [pc, #104]	; (800f728 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 800f6c0:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f6c2:	4b1a      	ldr	r3, [pc, #104]	; (800f72c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f6c4:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800f6c8:	440f      	add	r7, r1
 800f6ca:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f6ce:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f6d2:	4b17      	ldr	r3, [pc, #92]	; (800f730 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f6d4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f6d8:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f6da:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800f6de:	4b15      	ldr	r3, [pc, #84]	; (800f734 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f6e0:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f6e4:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f6e8:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 800f6ea:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f6ec:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f6ee:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800f6f2:	eb01 4828 	add.w	r8, r1, r8, asr #16
 800f6f6:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 800f6fa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800f6fe:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr = 
 800f702:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 800f706:	429d      	cmp	r5, r3
 800f708:	d1d0      	bne.n	800f6ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f70a:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 800f70c:	3608      	adds	r6, #8
          pLum += 8;
 800f70e:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f712:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 800f714:	9b03      	ldr	r3, [sp, #12]
 800f716:	3b01      	subs	r3, #1
 800f718:	9303      	str	r3, [sp, #12]
 800f71a:	d1ba      	bne.n	800f692 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800f71c:	30c0      	adds	r0, #192	; 0xc0
 800f71e:	e79c      	b.n	800f65a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800f720:	20027b54 	.word	0x20027b54
 800f724:	0802a343 	.word	0x0802a343
 800f728:	20027754 	.word	0x20027754
 800f72c:	20026b54 	.word	0x20026b54
 800f730:	20027354 	.word	0x20027354
 800f734:	20026f54 	.word	0x20026f54

0800f738 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	b085      	sub	sp, #20
 800f73e:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800f740:	0998      	lsrs	r0, r3, #6
{
 800f742:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800f744:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f748:	491a      	ldr	r1, [pc, #104]	; (800f7b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f74a:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f74c:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f750:	6909      	ldr	r1, [r1, #16]
 800f752:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	4293      	cmp	r3, r2
 800f758:	d802      	bhi.n	800f760 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800f75a:	b005      	add	sp, #20
 800f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f760:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 800f762:	46a4      	mov	ip, r4
    currentMCU++;
 800f764:	3201      	adds	r2, #1
 800f766:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f768:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f76c:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f770:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f77a:	9901      	ldr	r1, [sp, #4]
 800f77c:	4299      	cmp	r1, r3
 800f77e:	d914      	bls.n	800f7aa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 800f780:	9902      	ldr	r1, [sp, #8]
 800f782:	46e2      	mov	sl, ip
 800f784:	4419      	add	r1, r3
 800f786:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800f78a:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800f78e:	08f5      	lsrs	r5, r6, #3
 800f790:	08b6      	lsrs	r6, r6, #2
 800f792:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800f796:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 800f79a:	432e      	orrs	r6, r5
 800f79c:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 800f7a0:	4559      	cmp	r1, fp
 800f7a2:	d1f2      	bne.n	800f78a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800f7a4:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800f7a8:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800f7aa:	3f01      	subs	r7, #1
 800f7ac:	d1e5      	bne.n	800f77a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800f7ae:	3440      	adds	r4, #64	; 0x40
 800f7b0:	e7d0      	b.n	800f754 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800f7b2:	bf00      	nop
 800f7b4:	20027b54 	.word	0x20027b54

0800f7b8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	b085      	sub	sp, #20
 800f7be:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f7c0:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800f7c2:	0a18      	lsrs	r0, r3, #8
{  
 800f7c4:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800f7c6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f7ca:	4928      	ldr	r1, [pc, #160]	; (800f86c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f7cc:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f7ce:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f7d2:	6909      	ldr	r1, [r1, #16]
 800f7d4:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d802      	bhi.n	800f7e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f7dc:	b005      	add	sp, #20
 800f7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f7e2:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 800f7e4:	46ae      	mov	lr, r5
    currentMCU++;
 800f7e6:	3201      	adds	r2, #1
 800f7e8:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f7ec:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f7f0:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f7f4:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f7f8:	0049      	lsls	r1, r1, #1
 800f7fa:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f7fe:	9b00      	ldr	r3, [sp, #0]
 800f800:	428b      	cmp	r3, r1
 800f802:	d92c      	bls.n	800f85e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;        
 800f804:	9b02      	ldr	r3, [sp, #8]
 800f806:	4674      	mov	r4, lr
 800f808:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800f80a:	f106 0310 	add.w	r3, r6, #16
 800f80e:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800f810:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 800f814:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f816:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800f81a:	fb13 f308 	smulbb	r3, r3, r8
 800f81e:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f822:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f826:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800f82a:	fb13 f308 	smulbb	r3, r3, r8
 800f82e:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f832:	109b      	asrs	r3, r3, #2
 800f834:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f836:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800f83a:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 800f83e:	fb1b fb08 	smulbb	fp, fp, r8
 800f842:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f846:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 800f84a:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f84c:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr = 
 800f850:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 800f854:	429e      	cmp	r6, r3
 800f856:	d1db      	bne.n	800f810 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800f858:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f85c:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800f85e:	f1bc 0c01 	subs.w	ip, ip, #1
 800f862:	d1cc      	bne.n	800f7fe <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800f864:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800f868:	e7b5      	b.n	800f7d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800f86a:	bf00      	nop
 800f86c:	20027b54 	.word	0x20027b54

0800f870 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800f870:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f872:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f874:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f876:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f878:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f87c:	4b28      	ldr	r3, [pc, #160]	; (800f920 <JPEG_GetDecodeColorConvertFunc+0xb0>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f87e:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f880:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f882:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f886:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f888:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f88a:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f88c:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f88e:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f890:	d13c      	bne.n	800f90c <JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800f892:	2801      	cmp	r0, #1
 800f894:	d122      	bne.n	800f8dc <JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800f896:	4823      	ldr	r0, [pc, #140]	; (800f924 <JPEG_GetDecodeColorConvertFunc+0xb4>)
 800f898:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f89a:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f89e:	bf18      	it	ne
 800f8a0:	f1c1 0110 	rsbne	r1, r1, #16
 800f8a4:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800f8a6:	2110      	movs	r1, #16
 800f8a8:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 800f8aa:	6219      	str	r1, [r3, #32]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800f8ac:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800f8ae:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800f8b0:	4421      	add	r1, r4
 800f8b2:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800f8b4:	0061      	lsls	r1, r4, #1
 800f8b6:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800f8b8:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800f8bc:	fb00 4411 	mls	r4, r0, r1, r4
 800f8c0:	b104      	cbz	r4, 800f8c4 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800f8c2:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800f8c4:	6a1c      	ldr	r4, [r3, #32]
 800f8c6:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800f8ca:	fb04 5510 	mls	r5, r4, r0, r5
 800f8ce:	b105      	cbz	r5, 800f8d2 <JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800f8d0:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f8d2:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800f8d4:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f8d6:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800f8d8:	6011      	str	r1, [r2, #0]
}
 800f8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800f8dc:	2802      	cmp	r0, #2
 800f8de:	d10b      	bne.n	800f8f8 <JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800f8e0:	4811      	ldr	r0, [pc, #68]	; (800f928 <JPEG_GetDecodeColorConvertFunc+0xb8>)
 800f8e2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f8e4:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f8e8:	bf18      	it	ne
 800f8ea:	f1c1 0110 	rsbne	r1, r1, #16
 800f8ee:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800f8f0:	2110      	movs	r1, #16
 800f8f2:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800f8f4:	2108      	movs	r1, #8
 800f8f6:	e7d8      	b.n	800f8aa <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800f8f8:	480c      	ldr	r0, [pc, #48]	; (800f92c <JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800f8fa:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800f8fc:	f014 0107 	ands.w	r1, r4, #7
 800f900:	d001      	beq.n	800f906 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800f902:	f1c1 0108 	rsb	r1, r1, #8
 800f906:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800f908:	2108      	movs	r1, #8
 800f90a:	e7cd      	b.n	800f8a8 <JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800f90c:	b90e      	cbnz	r6, 800f912 <JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800f90e:	4808      	ldr	r0, [pc, #32]	; (800f930 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800f910:	e7f3      	b.n	800f8fa <JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800f912:	2e30      	cmp	r6, #48	; 0x30
 800f914:	d101      	bne.n	800f91a <JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800f916:	4807      	ldr	r0, [pc, #28]	; (800f934 <JPEG_GetDecodeColorConvertFunc+0xc4>)
 800f918:	e7ef      	b.n	800f8fa <JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 800f91a:	2001      	movs	r0, #1
 800f91c:	e7dd      	b.n	800f8da <JPEG_GetDecodeColorConvertFunc+0x6a>
 800f91e:	bf00      	nop
 800f920:	20027b54 	.word	0x20027b54
 800f924:	0800f2d9 	.word	0x0800f2d9
 800f928:	0800f4d9 	.word	0x0800f4d9
 800f92c:	0800f639 	.word	0x0800f639
 800f930:	0800f739 	.word	0x0800f739
 800f934:	0800f7b9 	.word	0x0800f7b9

0800f938 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f938:	8880      	ldrh	r0, [r0, #4]
 800f93a:	4770      	bx	lr

0800f93c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	6803      	ldr	r3, [r0, #0]
 800f940:	460c      	mov	r4, r1
 800f942:	2100      	movs	r1, #0
 800f944:	4605      	mov	r5, r0
 800f946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f948:	4798      	blx	r3
 800f94a:	4606      	mov	r6, r0
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	4628      	mov	r0, r5
 800f950:	1ba4      	subs	r4, r4, r6
 800f952:	6a1b      	ldr	r3, [r3, #32]
 800f954:	b2a4      	uxth	r4, r4
 800f956:	4798      	blx	r3
 800f958:	fbb4 f0f0 	udiv	r0, r4, r0
 800f95c:	bd70      	pop	{r4, r5, r6, pc}

0800f95e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f95e:	2300      	movs	r3, #0
 800f960:	8083      	strh	r3, [r0, #4]
 800f962:	4770      	bx	lr

0800f964 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f964:	b510      	push	{r4, lr}
 800f966:	6803      	ldr	r3, [r0, #0]
 800f968:	4604      	mov	r4, r0
 800f96a:	8881      	ldrh	r1, [r0, #4]
 800f96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96e:	4798      	blx	r3
 800f970:	88a3      	ldrh	r3, [r4, #4]
 800f972:	3301      	adds	r3, #1
 800f974:	80a3      	strh	r3, [r4, #4]
 800f976:	bd10      	pop	{r4, pc}

0800f978 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f978:	6803      	ldr	r3, [r0, #0]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f97c:	4718      	bx	r3

0800f97e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f97e:	4770      	bx	lr

0800f980 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f980:	4a02      	ldr	r2, [pc, #8]	; (800f98c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f982:	6002      	str	r2, [r0, #0]
 800f984:	2200      	movs	r2, #0
 800f986:	8082      	strh	r2, [r0, #4]
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	0802a64c 	.word	0x0802a64c

0800f990 <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 800f990:	f8c0 10dc 	str.w	r1, [r0, #220]	; 0xdc
 800f994:	4770      	bx	lr

0800f996 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 800f996:	b530      	push	{r4, r5, lr}
 800f998:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
 800f99c:	2520      	movs	r5, #32
 800f99e:	fb94 f4f5 	sdiv	r4, r4, r5
 800f9a2:	600c      	str	r4, [r1, #0]
 800f9a4:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 800f9a8:	fb93 f3f5 	sdiv	r3, r3, r5
 800f9ac:	6013      	str	r3, [r2, #0]
 800f9ae:	bd30      	pop	{r4, r5, pc}

0800f9b0 <_ZN8touchgfx12LineProgress6setEndEii>:
 800f9b0:	0149      	lsls	r1, r1, #5
 800f9b2:	0152      	lsls	r2, r2, #5
 800f9b4:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800f9b8:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 800f9bc:	4770      	bx	lr

0800f9be <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 800f9be:	b530      	push	{r4, r5, lr}
 800f9c0:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 800f9c4:	2520      	movs	r5, #32
 800f9c6:	fb94 f4f5 	sdiv	r4, r4, r5
 800f9ca:	600c      	str	r4, [r1, #0]
 800f9cc:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800f9d0:	fb93 f3f5 	sdiv	r3, r3, r5
 800f9d4:	6013      	str	r3, [r2, #0]
 800f9d6:	bd30      	pop	{r4, r5, pc}

0800f9d8 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 800f9d8:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800f9dc:	2320      	movs	r3, #32
 800f9de:	fb90 f0f3 	sdiv	r0, r0, r3
 800f9e2:	4770      	bx	lr

0800f9e4 <_ZN8touchgfx12LineProgressD1Ev>:
 800f9e4:	4770      	bx	lr

0800f9e6 <_ZN8touchgfx12LineProgress8setStartEii>:
 800f9e6:	0149      	lsls	r1, r1, #5
 800f9e8:	30b4      	adds	r0, #180	; 0xb4
 800f9ea:	0152      	lsls	r2, r2, #5
 800f9ec:	6701      	str	r1, [r0, #112]	; 0x70
 800f9ee:	6742      	str	r2, [r0, #116]	; 0x74
 800f9f0:	f002 b927 	b.w	8011c42 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0800f9f4 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 800f9f4:	0149      	lsls	r1, r1, #5
 800f9f6:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 800f9fa:	4299      	cmp	r1, r3
 800f9fc:	d004      	beq.n	800fa08 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 800f9fe:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
 800fa02:	30b4      	adds	r0, #180	; 0xb4
 800fa04:	f002 b827 	b.w	8011a56 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800fa08:	4770      	bx	lr

0800fa0a <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 800fa0a:	30b4      	adds	r0, #180	; 0xb4
 800fa0c:	f002 b93e 	b.w	8011c8c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

0800fa10 <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 800fa10:	30b4      	adds	r0, #180	; 0xb4
 800fa12:	f002 b81d 	b.w	8011a50 <_ZNK8touchgfx4Line18getLineEndingStyleEv>

0800fa16 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 800fa16:	b538      	push	{r3, r4, r5, lr}
 800fa18:	4604      	mov	r4, r0
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	f000 f8e2 	bl	800fbe4 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800fa20:	f884 50da 	strb.w	r5, [r4, #218]	; 0xda
 800fa24:	bd38      	pop	{r3, r4, r5, pc}

0800fa26 <_ZN8touchgfx12LineProgressD0Ev>:
 800fa26:	b510      	push	{r4, lr}
 800fa28:	4604      	mov	r4, r0
 800fa2a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fa2e:	f016 f860 	bl	8025af2 <_ZdlPvj>
 800fa32:	4620      	mov	r0, r4
 800fa34:	bd10      	pop	{r4, pc}

0800fa36 <_ZN8touchgfx12LineProgress8setValueEi>:
 800fa36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa38:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	b33b      	cbz	r3, 800fa90 <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 800fa40:	f000 f923 	bl	800fc8a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800fa44:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800fa48:	4620      	mov	r0, r4
 800fa4a:	2720      	movs	r7, #32
 800fa4c:	f000 f93f 	bl	800fcce <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800fa50:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 800fa54:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800fa58:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800fa5c:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 800fa60:	1a5b      	subs	r3, r3, r1
 800fa62:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 800fa66:	1aad      	subs	r5, r5, r2
 800fa68:	015b      	lsls	r3, r3, #5
 800fa6a:	016d      	lsls	r5, r5, #5
 800fa6c:	fb93 f3f6 	sdiv	r3, r3, r6
 800fa70:	fb95 f5f6 	sdiv	r5, r5, r6
 800fa74:	4343      	muls	r3, r0
 800fa76:	4368      	muls	r0, r5
 800fa78:	fb93 f3f7 	sdiv	r3, r3, r7
 800fa7c:	fb90 f0f7 	sdiv	r0, r0, r7
 800fa80:	4419      	add	r1, r3
 800fa82:	4402      	add	r2, r0
 800fa84:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800fa88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa8c:	f002 b8e4 	b.w	8011c58 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 800fa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa92 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800fa92:	b510      	push	{r4, lr}
 800fa94:	6803      	ldr	r3, [r0, #0]
 800fa96:	4604      	mov	r4, r0
 800fa98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800fa9c:	4798      	blx	r3
 800fa9e:	b140      	cbz	r0, 800fab2 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800faa0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800faa4:	b12b      	cbz	r3, 800fab2 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	4620      	mov	r0, r4
 800faaa:	695b      	ldr	r3, [r3, #20]
 800faac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fab0:	4718      	bx	r3
 800fab2:	bd10      	pop	{r4, pc}

0800fab4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fab4:	b570      	push	{r4, r5, r6, lr}
 800fab6:	6803      	ldr	r3, [r0, #0]
 800fab8:	4604      	mov	r4, r0
 800faba:	4615      	mov	r5, r2
 800fabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fabe:	4798      	blx	r3
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	4629      	mov	r1, r5
 800fac4:	4620      	mov	r0, r4
 800fac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800facc:	4718      	bx	r3

0800face <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 800face:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad2:	461d      	mov	r5, r3
 800fad4:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800fad8:	2300      	movs	r3, #0
 800fada:	4604      	mov	r4, r0
 800fadc:	460f      	mov	r7, r1
 800fade:	4690      	mov	r8, r2
 800fae0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800fae4:	4632      	mov	r2, r6
 800fae6:	4629      	mov	r1, r5
 800fae8:	30b4      	adds	r0, #180	; 0xb4
 800faea:	f7ff ffe3 	bl	800fab4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800faee:	9606      	str	r6, [sp, #24]
 800faf0:	462b      	mov	r3, r5
 800faf2:	4642      	mov	r2, r8
 800faf4:	4639      	mov	r1, r7
 800faf6:	4620      	mov	r0, r4
 800faf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fafc:	f000 b95a 	b.w	800fdb4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800fb00 <_ZN8touchgfx12LineProgressC1Ev>:
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	4604      	mov	r4, r0
 800fb04:	f000 f982 	bl	800fe0c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800fb08:	4b0f      	ldr	r3, [pc, #60]	; (800fb48 <_ZN8touchgfx12LineProgressC1Ev+0x48>)
 800fb0a:	2600      	movs	r6, #0
 800fb0c:	4625      	mov	r5, r4
 800fb0e:	f845 3bb4 	str.w	r3, [r5], #180
 800fb12:	4628      	mov	r0, r5
 800fb14:	f001 ff7c 	bl	8011a10 <_ZN8touchgfx4LineC1Ev>
 800fb18:	4629      	mov	r1, r5
 800fb1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb1e:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
 800fb22:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800fb26:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
 800fb2a:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
 800fb2e:	f000 f9cd 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fb32:	4628      	mov	r0, r5
 800fb34:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800fb38:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800fb3c:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800fb40:	f7ff ffb8 	bl	800fab4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fb44:	4620      	mov	r0, r4
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	0802a680 	.word	0x0802a680

0800fb4c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800fb4c:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800fb50:	4770      	bx	lr

0800fb52 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800fb52:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800fb56:	4770      	bx	lr

0800fb58 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800fb58:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800fb5c:	4770      	bx	lr

0800fb5e <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800fb5e:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800fb62:	4770      	bx	lr

0800fb64 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800fb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb66:	461e      	mov	r6, r3
 800fb68:	6803      	ldr	r3, [r0, #0]
 800fb6a:	460f      	mov	r7, r1
 800fb6c:	4604      	mov	r4, r0
 800fb6e:	4615      	mov	r5, r2
 800fb70:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 800fb74:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800fb78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fb7c:	4798      	blx	r3
 800fb7e:	b93e      	cbnz	r6, 800fb90 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800fb80:	1bed      	subs	r5, r5, r7
 800fb82:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 800fb86:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800fb8a:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 800fb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb90:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 800fb94:	e7f7      	b.n	800fb86 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800fb96 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800fb96:	b510      	push	{r4, lr}
 800fb98:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800fb9c:	600c      	str	r4, [r1, #0]
 800fb9e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800fba2:	6011      	str	r1, [r2, #0]
 800fba4:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800fba8:	801a      	strh	r2, [r3, #0]
 800fbaa:	9b02      	ldr	r3, [sp, #8]
 800fbac:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 800fbb0:	801a      	strh	r2, [r3, #0]
 800fbb2:	bd10      	pop	{r4, pc}

0800fbb4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800fbb4:	b510      	push	{r4, lr}
 800fbb6:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800fbba:	600c      	str	r4, [r1, #0]
 800fbbc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800fbc0:	6011      	str	r1, [r2, #0]
 800fbc2:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800fbc6:	801a      	strh	r2, [r3, #0]
 800fbc8:	bd10      	pop	{r4, pc}

0800fbca <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800fbca:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800fbce:	600b      	str	r3, [r1, #0]
 800fbd0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fbd4:	6013      	str	r3, [r2, #0]
 800fbd6:	4770      	bx	lr

0800fbd8 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800fbd8:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 800fbdc:	4770      	bx	lr

0800fbde <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800fbde:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800fbe2:	4770      	bx	lr

0800fbe4 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800fbe4:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800fbe8:	4770      	bx	lr

0800fbea <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800fbea:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800fbee:	4770      	bx	lr

0800fbf0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800fbf0:	4770      	bx	lr

0800fbf2 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800fbf2:	b510      	push	{r4, lr}
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	21b4      	movs	r1, #180	; 0xb4
 800fbf8:	f015 ff7b 	bl	8025af2 <_ZdlPvj>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	bd10      	pop	{r4, pc}

0800fc00 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800fc06:	4604      	mov	r4, r0
 800fc08:	4616      	mov	r6, r2
 800fc0a:	428d      	cmp	r5, r1
 800fc0c:	bfb8      	it	lt
 800fc0e:	460d      	movlt	r5, r1
 800fc10:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800fc14:	428d      	cmp	r5, r1
 800fc16:	bfa8      	it	ge
 800fc18:	460d      	movge	r5, r1
 800fc1a:	b99a      	cbnz	r2, 800fc44 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800fc1c:	6803      	ldr	r3, [r0, #0]
 800fc1e:	4629      	mov	r1, r5
 800fc20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fc24:	4798      	blx	r3
 800fc26:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fc2a:	b368      	cbz	r0, 800fc88 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fc2c:	6803      	ldr	r3, [r0, #0]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	4798      	blx	r3
 800fc32:	b348      	cbz	r0, 800fc88 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fc34:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fc38:	4621      	mov	r1, r4
 800fc3a:	6803      	ldr	r3, [r0, #0]
 800fc3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	4718      	bx	r3
 800fc44:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	dd08      	ble.n	800fc5e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800fc4c:	f006 fa16 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 800fc50:	4621      	mov	r1, r4
 800fc52:	3004      	adds	r0, #4
 800fc54:	f006 fa5f 	bl	8016116 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	4620      	mov	r0, r4
 800fc62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fc66:	4798      	blx	r3
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 800fc6e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800fc72:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 800fc76:	f006 fa01 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	3004      	adds	r0, #4
 800fc7e:	f006 faf3 	bl	8016268 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800fc82:	2301      	movs	r3, #1
 800fc84:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800fc88:	bd70      	pop	{r4, r5, r6, pc}

0800fc8a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800fc8a:	b510      	push	{r4, lr}
 800fc8c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800fc90:	4604      	mov	r4, r0
 800fc92:	4299      	cmp	r1, r3
 800fc94:	bfb8      	it	lt
 800fc96:	4619      	movlt	r1, r3
 800fc98:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fc9c:	4299      	cmp	r1, r3
 800fc9e:	bfa8      	it	ge
 800fca0:	4619      	movge	r1, r3
 800fca2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800fca6:	428b      	cmp	r3, r1
 800fca8:	d010      	beq.n	800fccc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fcaa:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800fcae:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800fcb2:	b158      	cbz	r0, 800fccc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fcb4:	6803      	ldr	r3, [r0, #0]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	4798      	blx	r3
 800fcba:	b138      	cbz	r0, 800fccc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fcbc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	6803      	ldr	r3, [r0, #0]
 800fcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	4718      	bx	r3
 800fccc:	bd10      	pop	{r4, pc}

0800fcce <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800fcce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	460d      	mov	r5, r1
 800fcd4:	b1a9      	cbz	r1, 800fd02 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800fcd6:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 800fcda:	ab01      	add	r3, sp, #4
 800fcdc:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800fce0:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800fce4:	1b89      	subs	r1, r1, r6
 800fce6:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 800fcea:	1a12      	subs	r2, r2, r0
 800fcec:	1a38      	subs	r0, r7, r0
 800fcee:	f007 fc24 	bl	801753a <_ZN8touchgfx6muldivElllRl>
 800fcf2:	4629      	mov	r1, r5
 800fcf4:	ab01      	add	r3, sp, #4
 800fcf6:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 800fcfa:	4430      	add	r0, r6
 800fcfc:	f007 fc1d 	bl	801753a <_ZN8touchgfx6muldivElllRl>
 800fd00:	b285      	uxth	r5, r0
 800fd02:	4628      	mov	r0, r5
 800fd04:	b003      	add	sp, #12
 800fd06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd08 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800fd08:	b570      	push	{r4, r5, r6, lr}
 800fd0a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800fd0e:	4604      	mov	r4, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d035      	beq.n	800fd80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fd14:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800fd18:	2100      	movs	r1, #0
 800fd1a:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800fd1e:	3001      	adds	r0, #1
 800fd20:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 800fd24:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 800fd28:	b280      	uxth	r0, r0
 800fd2a:	1ad2      	subs	r2, r2, r3
 800fd2c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800fd30:	b212      	sxth	r2, r2
 800fd32:	47a8      	blx	r5
 800fd34:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	4401      	add	r1, r0
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fd42:	4798      	blx	r3
 800fd44:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	db19      	blt.n	800fd80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fd4c:	2500      	movs	r5, #0
 800fd4e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800fd52:	f006 f993 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 800fd56:	4621      	mov	r1, r4
 800fd58:	3004      	adds	r0, #4
 800fd5a:	f006 f9dc 	bl	8016116 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fd5e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fd62:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800fd66:	b158      	cbz	r0, 800fd80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fd68:	6803      	ldr	r3, [r0, #0]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	4798      	blx	r3
 800fd6e:	b138      	cbz	r0, 800fd80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fd70:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fd74:	4621      	mov	r1, r4
 800fd76:	6803      	ldr	r3, [r0, #0]
 800fd78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	4718      	bx	r3
 800fd80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd84 <_ZN8touchgfx8DrawableC1Ev>:
 800fd84:	4a0a      	ldr	r2, [pc, #40]	; (800fdb0 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800fd86:	6002      	str	r2, [r0, #0]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	8082      	strh	r2, [r0, #4]
 800fd8c:	80c2      	strh	r2, [r0, #6]
 800fd8e:	8102      	strh	r2, [r0, #8]
 800fd90:	8142      	strh	r2, [r0, #10]
 800fd92:	8182      	strh	r2, [r0, #12]
 800fd94:	81c2      	strh	r2, [r0, #14]
 800fd96:	8202      	strh	r2, [r0, #16]
 800fd98:	8242      	strh	r2, [r0, #18]
 800fd9a:	61c2      	str	r2, [r0, #28]
 800fd9c:	8402      	strh	r2, [r0, #32]
 800fd9e:	8442      	strh	r2, [r0, #34]	; 0x22
 800fda0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800fda4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800fdae:	4770      	bx	lr
 800fdb0:	0802b1d0 	.word	0x0802b1d0

0800fdb4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	4604      	mov	r4, r0
 800fdba:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800fdbe:	4698      	mov	r8, r3
 800fdc0:	460e      	mov	r6, r1
 800fdc2:	4615      	mov	r5, r2
 800fdc4:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 800fdc8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800fdcc:	4619      	mov	r1, r3
 800fdce:	463a      	mov	r2, r7
 800fdd0:	3058      	adds	r0, #88	; 0x58
 800fdd2:	f7ff fe6f 	bl	800fab4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fdd6:	4446      	add	r6, r8
 800fdd8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800fddc:	443d      	add	r5, r7
 800fdde:	42b3      	cmp	r3, r6
 800fde0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fde4:	bfb8      	it	lt
 800fde6:	8126      	strhlt	r6, [r4, #8]
 800fde8:	42ab      	cmp	r3, r5
 800fdea:	bfb8      	it	lt
 800fdec:	8165      	strhlt	r5, [r4, #10]
 800fdee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdf2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	302c      	adds	r0, #44	; 0x2c
 800fdf8:	f003 fdbd 	bl	8013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800fdfc:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 800fe00:	4620      	mov	r0, r4
 800fe02:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800fe06:	f7ff fe55 	bl	800fab4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fe0a:	bd10      	pop	{r4, pc}

0800fe0c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800fe0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe0e:	4604      	mov	r4, r0
 800fe10:	2500      	movs	r5, #0
 800fe12:	f7ff ffb7 	bl	800fd84 <_ZN8touchgfx8DrawableC1Ev>
 800fe16:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800fe18:	4626      	mov	r6, r4
 800fe1a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800fe1e:	2226      	movs	r2, #38	; 0x26
 800fe20:	4629      	mov	r1, r5
 800fe22:	62a5      	str	r5, [r4, #40]	; 0x28
 800fe24:	f846 3b2c 	str.w	r3, [r6], #44
 800fe28:	4630      	mov	r0, r6
 800fe2a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800fe2e:	f016 f815 	bl	8025e5c <memset>
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7ff ffa6 	bl	800fd84 <_ZN8touchgfx8DrawableC1Ev>
 800fe38:	a902      	add	r1, sp, #8
 800fe3a:	4b1c      	ldr	r3, [pc, #112]	; (800feac <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 800fe42:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800fe46:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe48:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800fe4c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800fe50:	f003 fd91 	bl	8013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800fe54:	4638      	mov	r0, r7
 800fe56:	f7ff ff95 	bl	800fd84 <_ZN8touchgfx8DrawableC1Ev>
 800fe5a:	4b15      	ldr	r3, [pc, #84]	; (800feb0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4630      	mov	r0, r6
 800fe60:	65a3      	str	r3, [r4, #88]	; 0x58
 800fe62:	2364      	movs	r3, #100	; 0x64
 800fe64:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800fe68:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800fe6c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 800fe70:	4b10      	ldr	r3, [pc, #64]	; (800feb4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800fe72:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 800fe76:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800fe7a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 800fe7e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800fe82:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 800fe86:	f7f2 f9c7 	bl	8002218 <_ZN8touchgfx8Drawable4setXEs>
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	f7f2 f9c5 	bl	800221c <_ZN8touchgfx8Drawable4setYEs>
 800fe92:	4631      	mov	r1, r6
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 f819 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	4639      	mov	r1, r7
 800fe9e:	f000 f815 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fea2:	4620      	mov	r0, r4
 800fea4:	b003      	add	sp, #12
 800fea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fea8:	0802a778 	.word	0x0802a778
 800feac:	0802b108 	.word	0x0802b108
 800feb0:	0802a84c 	.word	0x0802a84c
 800feb4:	08017c97 	.word	0x08017c97

0800feb8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800feb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800feba:	2000      	movs	r0, #0
 800febc:	b12b      	cbz	r3, 800feca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800febe:	b920      	cbnz	r0, 800feca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fec0:	1a5a      	subs	r2, r3, r1
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	4250      	negs	r0, r2
 800fec6:	4150      	adcs	r0, r2
 800fec8:	e7f8      	b.n	800febc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800feca:	4770      	bx	lr

0800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800fecc:	2300      	movs	r3, #0
 800fece:	6148      	str	r0, [r1, #20]
 800fed0:	618b      	str	r3, [r1, #24]
 800fed2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fed4:	b913      	cbnz	r3, 800fedc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800fed6:	6281      	str	r1, [r0, #40]	; 0x28
 800fed8:	4770      	bx	lr
 800feda:	4613      	mov	r3, r2
 800fedc:	699a      	ldr	r2, [r3, #24]
 800fede:	2a00      	cmp	r2, #0
 800fee0:	d1fb      	bne.n	800feda <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800fee2:	6199      	str	r1, [r3, #24]
 800fee4:	4770      	bx	lr

0800fee6 <_ZN8touchgfx9Container9removeAllEv>:
 800fee6:	2200      	movs	r2, #0
 800fee8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800feea:	b123      	cbz	r3, 800fef6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800feec:	6999      	ldr	r1, [r3, #24]
 800feee:	6281      	str	r1, [r0, #40]	; 0x28
 800fef0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800fef4:	e7f8      	b.n	800fee8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800fef6:	4770      	bx	lr

0800fef8 <_ZN8touchgfx9Container6unlinkEv>:
 800fef8:	2300      	movs	r3, #0
 800fefa:	6283      	str	r3, [r0, #40]	; 0x28
 800fefc:	4770      	bx	lr

0800fefe <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fefe:	2200      	movs	r2, #0
 800ff00:	8002      	strh	r2, [r0, #0]
 800ff02:	8042      	strh	r2, [r0, #2]
 800ff04:	8082      	strh	r2, [r0, #4]
 800ff06:	80c2      	strh	r2, [r0, #6]
 800ff08:	4770      	bx	lr

0800ff0a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ff0a:	b570      	push	{r4, r5, r6, lr}
 800ff0c:	460d      	mov	r5, r1
 800ff0e:	4616      	mov	r6, r2
 800ff10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ff12:	b13c      	cbz	r4, 800ff24 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	4620      	mov	r0, r4
 800ff18:	4632      	mov	r2, r6
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff1e:	4798      	blx	r3
 800ff20:	69a4      	ldr	r4, [r4, #24]
 800ff22:	e7f6      	b.n	800ff12 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ff24:	bd70      	pop	{r4, r5, r6, pc}

0800ff26 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ff26:	b538      	push	{r3, r4, r5, lr}
 800ff28:	460d      	mov	r5, r1
 800ff2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ff2c:	b134      	cbz	r4, 800ff3c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ff2e:	682b      	ldr	r3, [r5, #0]
 800ff30:	4621      	mov	r1, r4
 800ff32:	4628      	mov	r0, r5
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	4798      	blx	r3
 800ff38:	69a4      	ldr	r4, [r4, #24]
 800ff3a:	e7f7      	b.n	800ff2c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ff3c:	bd38      	pop	{r3, r4, r5, pc}

0800ff3e <_ZN8touchgfx9ContainerD1Ev>:
 800ff3e:	4770      	bx	lr

0800ff40 <_ZN8touchgfx9ContainerD0Ev>:
 800ff40:	b510      	push	{r4, lr}
 800ff42:	4604      	mov	r4, r0
 800ff44:	212c      	movs	r1, #44	; 0x2c
 800ff46:	f015 fdd4 	bl	8025af2 <_ZdlPvj>
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	bd10      	pop	{r4, pc}

0800ff4e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ff4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ff50:	b19b      	cbz	r3, 800ff7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ff52:	428b      	cmp	r3, r1
 800ff54:	d109      	bne.n	800ff6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ff56:	699a      	ldr	r2, [r3, #24]
 800ff58:	2100      	movs	r1, #0
 800ff5a:	6159      	str	r1, [r3, #20]
 800ff5c:	6282      	str	r2, [r0, #40]	; 0x28
 800ff5e:	b902      	cbnz	r2, 800ff62 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ff60:	4770      	bx	lr
 800ff62:	6199      	str	r1, [r3, #24]
 800ff64:	4770      	bx	lr
 800ff66:	4613      	mov	r3, r2
 800ff68:	b13a      	cbz	r2, 800ff7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ff6a:	699a      	ldr	r2, [r3, #24]
 800ff6c:	428a      	cmp	r2, r1
 800ff6e:	d1fa      	bne.n	800ff66 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ff70:	698a      	ldr	r2, [r1, #24]
 800ff72:	619a      	str	r2, [r3, #24]
 800ff74:	2300      	movs	r3, #0
 800ff76:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ff7a:	4770      	bx	lr

0800ff7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ff7c:	b410      	push	{r4}
 800ff7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ff80:	4604      	mov	r4, r0
 800ff82:	b92b      	cbnz	r3, 800ff90 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ff84:	6803      	ldr	r3, [r0, #0]
 800ff86:	4611      	mov	r1, r2
 800ff88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff8e:	4718      	bx	r3
 800ff90:	b941      	cbnz	r1, 800ffa4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ff92:	6193      	str	r3, [r2, #24]
 800ff94:	6282      	str	r2, [r0, #40]	; 0x28
 800ff96:	6154      	str	r4, [r2, #20]
 800ff98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff9c:	4770      	bx	lr
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d0f9      	beq.n	800ff98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ffa4:	4299      	cmp	r1, r3
 800ffa6:	6998      	ldr	r0, [r3, #24]
 800ffa8:	d1f9      	bne.n	800ff9e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ffaa:	6190      	str	r0, [r2, #24]
 800ffac:	618a      	str	r2, [r1, #24]
 800ffae:	e7f2      	b.n	800ff96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ffb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	461f      	mov	r7, r3
 800ffb6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ffba:	460d      	mov	r5, r1
 800ffbc:	4616      	mov	r6, r2
 800ffbe:	b103      	cbz	r3, 800ffc2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ffc0:	6038      	str	r0, [r7, #0]
 800ffc2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ffc4:	b314      	cbz	r4, 801000c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ffc6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ffca:	b1eb      	cbz	r3, 8010008 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ffcc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ffd0:	428d      	cmp	r5, r1
 800ffd2:	db19      	blt.n	8010008 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ffd4:	b289      	uxth	r1, r1
 800ffd6:	8923      	ldrh	r3, [r4, #8]
 800ffd8:	440b      	add	r3, r1
 800ffda:	b21b      	sxth	r3, r3
 800ffdc:	429d      	cmp	r5, r3
 800ffde:	da13      	bge.n	8010008 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ffe0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ffe4:	4296      	cmp	r6, r2
 800ffe6:	db0f      	blt.n	8010008 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ffe8:	b292      	uxth	r2, r2
 800ffea:	8963      	ldrh	r3, [r4, #10]
 800ffec:	4413      	add	r3, r2
 800ffee:	b21b      	sxth	r3, r3
 800fff0:	429e      	cmp	r6, r3
 800fff2:	da09      	bge.n	8010008 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fff4:	6823      	ldr	r3, [r4, #0]
 800fff6:	1ab2      	subs	r2, r6, r2
 800fff8:	1a69      	subs	r1, r5, r1
 800fffa:	4620      	mov	r0, r4
 800fffc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8010000:	b212      	sxth	r2, r2
 8010002:	463b      	mov	r3, r7
 8010004:	b209      	sxth	r1, r1
 8010006:	47c0      	blx	r8
 8010008:	69a4      	ldr	r4, [r4, #24]
 801000a:	e7db      	b.n	800ffc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801000c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010010 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010014:	4c6d      	ldr	r4, [pc, #436]	; (80101cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010016:	b0a1      	sub	sp, #132	; 0x84
 8010018:	4606      	mov	r6, r0
 801001a:	6824      	ldr	r4, [r4, #0]
 801001c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801001e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8010022:	2400      	movs	r4, #0
 8010024:	9303      	str	r3, [sp, #12]
 8010026:	802c      	strh	r4, [r5, #0]
 8010028:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801002a:	802c      	strh	r4, [r5, #0]
 801002c:	601c      	str	r4, [r3, #0]
 801002e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010032:	f7ff ffbd 	bl	800ffb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010036:	f1b9 0f03 	cmp.w	r9, #3
 801003a:	f340 80c1 	ble.w	80101c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801003e:	4631      	mov	r1, r6
 8010040:	a80c      	add	r0, sp, #48	; 0x30
 8010042:	f007 f96d 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010046:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801004a:	9306      	str	r3, [sp, #24]
 801004c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010050:	9307      	str	r3, [sp, #28]
 8010052:	9b03      	ldr	r3, [sp, #12]
 8010054:	f8d3 a000 	ldr.w	sl, [r3]
 8010058:	f1ba 0f00 	cmp.w	sl, #0
 801005c:	f000 80b3 	beq.w	80101c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010060:	4651      	mov	r1, sl
 8010062:	a810      	add	r0, sp, #64	; 0x40
 8010064:	f007 f95c 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010068:	2002      	movs	r0, #2
 801006a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801006e:	9b01      	ldr	r3, [sp, #4]
 8010070:	9a06      	ldr	r2, [sp, #24]
 8010072:	fb91 f1f0 	sdiv	r1, r1, r0
 8010076:	189d      	adds	r5, r3, r2
 8010078:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801007c:	9a07      	ldr	r2, [sp, #28]
 801007e:	4419      	add	r1, r3
 8010080:	9b02      	ldr	r3, [sp, #8]
 8010082:	4413      	add	r3, r2
 8010084:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010088:	1a6d      	subs	r5, r5, r1
 801008a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801008e:	fb92 f2f0 	sdiv	r2, r2, r0
 8010092:	440a      	add	r2, r1
 8010094:	1a9b      	subs	r3, r3, r2
 8010096:	435b      	muls	r3, r3
 8010098:	fb05 3505 	mla	r5, r5, r5, r3
 801009c:	4f4c      	ldr	r7, [pc, #304]	; (80101d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801009e:	ac10      	add	r4, sp, #64	; 0x40
 80100a0:	f1b9 0f0c 	cmp.w	r9, #12
 80100a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80100a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80100aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80100ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100b0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80100b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80100b8:	f04f 0303 	mov.w	r3, #3
 80100bc:	bfd8      	it	le
 80100be:	f109 32ff 	addle.w	r2, r9, #4294967295
 80100c2:	f04f 0400 	mov.w	r4, #0
 80100c6:	f8cd 9000 	str.w	r9, [sp]
 80100ca:	bfcc      	ite	gt
 80100cc:	4698      	movgt	r8, r3
 80100ce:	fb92 f8f3 	sdivle	r8, r2, r3
 80100d2:	1c63      	adds	r3, r4, #1
 80100d4:	aa10      	add	r2, sp, #64	; 0x40
 80100d6:	f004 0401 	and.w	r4, r4, #1
 80100da:	f04f 0b00 	mov.w	fp, #0
 80100de:	9308      	str	r3, [sp, #32]
 80100e0:	9b00      	ldr	r3, [sp, #0]
 80100e2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80100e6:	fb93 f3f8 	sdiv	r3, r3, r8
 80100ea:	3404      	adds	r4, #4
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	9304      	str	r3, [sp, #16]
 80100f0:	9a04      	ldr	r2, [sp, #16]
 80100f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80100f6:	fb13 f302 	smulbb	r3, r3, r2
 80100fa:	9a01      	ldr	r2, [sp, #4]
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	1899      	adds	r1, r3, r2
 8010100:	9305      	str	r3, [sp, #20]
 8010102:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010106:	b209      	sxth	r1, r1
 8010108:	4299      	cmp	r1, r3
 801010a:	db4d      	blt.n	80101a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801010c:	8932      	ldrh	r2, [r6, #8]
 801010e:	4413      	add	r3, r2
 8010110:	b21b      	sxth	r3, r3
 8010112:	4299      	cmp	r1, r3
 8010114:	da48      	bge.n	80101a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010116:	9b04      	ldr	r3, [sp, #16]
 8010118:	6827      	ldr	r7, [r4, #0]
 801011a:	fb17 f703 	smulbb	r7, r7, r3
 801011e:	9b02      	ldr	r3, [sp, #8]
 8010120:	b2bf      	uxth	r7, r7
 8010122:	18fa      	adds	r2, r7, r3
 8010124:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010128:	b212      	sxth	r2, r2
 801012a:	429a      	cmp	r2, r3
 801012c:	db3c      	blt.n	80101a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801012e:	8970      	ldrh	r0, [r6, #10]
 8010130:	4403      	add	r3, r0
 8010132:	b21b      	sxth	r3, r3
 8010134:	429a      	cmp	r2, r3
 8010136:	da37      	bge.n	80101a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010138:	2300      	movs	r3, #0
 801013a:	4630      	mov	r0, r6
 801013c:	930b      	str	r3, [sp, #44]	; 0x2c
 801013e:	ab0b      	add	r3, sp, #44	; 0x2c
 8010140:	f7ff ff36 	bl	800ffb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010146:	b37a      	cbz	r2, 80101a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010148:	4552      	cmp	r2, sl
 801014a:	d02d      	beq.n	80101a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801014c:	4611      	mov	r1, r2
 801014e:	a80e      	add	r0, sp, #56	; 0x38
 8010150:	9209      	str	r2, [sp, #36]	; 0x24
 8010152:	f007 f8e5 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010156:	f04f 0e02 	mov.w	lr, #2
 801015a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801015e:	9a06      	ldr	r2, [sp, #24]
 8010160:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8010164:	9b01      	ldr	r3, [sp, #4]
 8010166:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801016a:	4413      	add	r3, r2
 801016c:	9a07      	ldr	r2, [sp, #28]
 801016e:	fb91 f1fe 	sdiv	r1, r1, lr
 8010172:	fb9c fcfe 	sdiv	ip, ip, lr
 8010176:	4401      	add	r1, r0
 8010178:	1a58      	subs	r0, r3, r1
 801017a:	9b02      	ldr	r3, [sp, #8]
 801017c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010180:	4413      	add	r3, r2
 8010182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010184:	448c      	add	ip, r1
 8010186:	eba3 030c 	sub.w	r3, r3, ip
 801018a:	435b      	muls	r3, r3
 801018c:	fb00 3300 	mla	r3, r0, r0, r3
 8010190:	42ab      	cmp	r3, r5
 8010192:	d208      	bcs.n	80101a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010196:	461d      	mov	r5, r3
 8010198:	9803      	ldr	r0, [sp, #12]
 801019a:	6001      	str	r1, [r0, #0]
 801019c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801019e:	9805      	ldr	r0, [sp, #20]
 80101a0:	8008      	strh	r0, [r1, #0]
 80101a2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80101a4:	800f      	strh	r7, [r1, #0]
 80101a6:	4692      	mov	sl, r2
 80101a8:	f10b 0b01 	add.w	fp, fp, #1
 80101ac:	3408      	adds	r4, #8
 80101ae:	f1bb 0f04 	cmp.w	fp, #4
 80101b2:	d19d      	bne.n	80100f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80101b4:	9b00      	ldr	r3, [sp, #0]
 80101b6:	9c08      	ldr	r4, [sp, #32]
 80101b8:	444b      	add	r3, r9
 80101ba:	4544      	cmp	r4, r8
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	d188      	bne.n	80100d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80101c0:	b021      	add	sp, #132	; 0x84
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	f04f 35ff 	mov.w	r5, #4294967295
 80101ca:	e767      	b.n	801009c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80101cc:	20027ba0 	.word	0x20027ba0
 80101d0:	08026e50 	.word	0x08026e50

080101d4 <_ZN8touchgfx4RectaNERKS0_>:
 80101d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101d8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80101dc:	888c      	ldrh	r4, [r1, #4]
 80101de:	f9b0 9000 	ldrsh.w	r9, [r0]
 80101e2:	443c      	add	r4, r7
 80101e4:	b2a4      	uxth	r4, r4
 80101e6:	fa0f f884 	sxth.w	r8, r4
 80101ea:	45c1      	cmp	r9, r8
 80101ec:	da2f      	bge.n	801024e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80101ee:	8882      	ldrh	r2, [r0, #4]
 80101f0:	444a      	add	r2, r9
 80101f2:	b292      	uxth	r2, r2
 80101f4:	fa0f fe82 	sxth.w	lr, r2
 80101f8:	4577      	cmp	r7, lr
 80101fa:	da28      	bge.n	801024e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80101fc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010200:	88cb      	ldrh	r3, [r1, #6]
 8010202:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010206:	442b      	add	r3, r5
 8010208:	b21b      	sxth	r3, r3
 801020a:	429e      	cmp	r6, r3
 801020c:	da1f      	bge.n	801024e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801020e:	88c3      	ldrh	r3, [r0, #6]
 8010210:	4433      	add	r3, r6
 8010212:	b29b      	uxth	r3, r3
 8010214:	fa0f fc83 	sxth.w	ip, r3
 8010218:	4565      	cmp	r5, ip
 801021a:	da18      	bge.n	801024e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801021c:	454f      	cmp	r7, r9
 801021e:	bfb8      	it	lt
 8010220:	464f      	movlt	r7, r9
 8010222:	42b5      	cmp	r5, r6
 8010224:	bfb8      	it	lt
 8010226:	4635      	movlt	r5, r6
 8010228:	45f0      	cmp	r8, lr
 801022a:	bfd8      	it	le
 801022c:	4622      	movle	r2, r4
 801022e:	1bd2      	subs	r2, r2, r7
 8010230:	8082      	strh	r2, [r0, #4]
 8010232:	884a      	ldrh	r2, [r1, #2]
 8010234:	88c9      	ldrh	r1, [r1, #6]
 8010236:	8007      	strh	r7, [r0, #0]
 8010238:	440a      	add	r2, r1
 801023a:	8045      	strh	r5, [r0, #2]
 801023c:	b292      	uxth	r2, r2
 801023e:	b211      	sxth	r1, r2
 8010240:	458c      	cmp	ip, r1
 8010242:	bfa8      	it	ge
 8010244:	4613      	movge	r3, r2
 8010246:	1b5b      	subs	r3, r3, r5
 8010248:	80c3      	strh	r3, [r0, #6]
 801024a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801024e:	2300      	movs	r3, #0
 8010250:	8003      	strh	r3, [r0, #0]
 8010252:	8043      	strh	r3, [r0, #2]
 8010254:	8083      	strh	r3, [r0, #4]
 8010256:	80c3      	strh	r3, [r0, #6]
 8010258:	e7f7      	b.n	801024a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801025a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801025a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	dd06      	ble.n	8010270 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010262:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010266:	2800      	cmp	r0, #0
 8010268:	bfcc      	ite	gt
 801026a:	2000      	movgt	r0, #0
 801026c:	2001      	movle	r0, #1
 801026e:	4770      	bx	lr
 8010270:	2001      	movs	r0, #1
 8010272:	4770      	bx	lr

08010274 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010278:	2300      	movs	r3, #0
 801027a:	4604      	mov	r4, r0
 801027c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801027e:	8003      	strh	r3, [r0, #0]
 8010280:	8043      	strh	r3, [r0, #2]
 8010282:	8083      	strh	r3, [r0, #4]
 8010284:	80c3      	strh	r3, [r0, #6]
 8010286:	2d00      	cmp	r5, #0
 8010288:	d040      	beq.n	801030c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801028a:	1d28      	adds	r0, r5, #4
 801028c:	f7ff ffe5 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010290:	b988      	cbnz	r0, 80102b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010292:	4620      	mov	r0, r4
 8010294:	f7ff ffe1 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010298:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801029c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80102a0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80102a4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80102a8:	b138      	cbz	r0, 80102ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80102aa:	8022      	strh	r2, [r4, #0]
 80102ac:	8063      	strh	r3, [r4, #2]
 80102ae:	f8a4 e004 	strh.w	lr, [r4, #4]
 80102b2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80102b6:	69ad      	ldr	r5, [r5, #24]
 80102b8:	e7e5      	b.n	8010286 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80102ba:	f9b4 0000 	ldrsh.w	r0, [r4]
 80102be:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80102c2:	4290      	cmp	r0, r2
 80102c4:	4607      	mov	r7, r0
 80102c6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80102ca:	460e      	mov	r6, r1
 80102cc:	bfa8      	it	ge
 80102ce:	4617      	movge	r7, r2
 80102d0:	4299      	cmp	r1, r3
 80102d2:	4472      	add	r2, lr
 80102d4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80102d8:	bfa8      	it	ge
 80102da:	461e      	movge	r6, r3
 80102dc:	4440      	add	r0, r8
 80102de:	4471      	add	r1, lr
 80102e0:	4463      	add	r3, ip
 80102e2:	b200      	sxth	r0, r0
 80102e4:	8027      	strh	r7, [r4, #0]
 80102e6:	b212      	sxth	r2, r2
 80102e8:	8066      	strh	r6, [r4, #2]
 80102ea:	b209      	sxth	r1, r1
 80102ec:	b21b      	sxth	r3, r3
 80102ee:	4290      	cmp	r0, r2
 80102f0:	bfac      	ite	ge
 80102f2:	ebc7 0200 	rsbge	r2, r7, r0
 80102f6:	ebc7 0202 	rsblt	r2, r7, r2
 80102fa:	4299      	cmp	r1, r3
 80102fc:	bfac      	ite	ge
 80102fe:	ebc6 0301 	rsbge	r3, r6, r1
 8010302:	ebc6 0303 	rsblt	r3, r6, r3
 8010306:	80a2      	strh	r2, [r4, #4]
 8010308:	80e3      	strh	r3, [r4, #6]
 801030a:	e7d4      	b.n	80102b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801030c:	4620      	mov	r0, r4
 801030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010312 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010312:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010316:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801031a:	b383      	cbz	r3, 801037e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801031c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801031e:	b374      	cbz	r4, 801037e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010320:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010324:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010328:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801032c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010330:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010334:	b303      	cbz	r3, 8010378 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010336:	4668      	mov	r0, sp
 8010338:	1d21      	adds	r1, r4, #4
 801033a:	f8ad 5000 	strh.w	r5, [sp]
 801033e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010342:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010346:	f8ad 8006 	strh.w	r8, [sp, #6]
 801034a:	f7ff ff43 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801034e:	4668      	mov	r0, sp
 8010350:	f7ff ff83 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010354:	b980      	cbnz	r0, 8010378 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010356:	f8bd 3000 	ldrh.w	r3, [sp]
 801035a:	4669      	mov	r1, sp
 801035c:	88a2      	ldrh	r2, [r4, #4]
 801035e:	4620      	mov	r0, r4
 8010360:	1a9b      	subs	r3, r3, r2
 8010362:	88e2      	ldrh	r2, [r4, #6]
 8010364:	f8ad 3000 	strh.w	r3, [sp]
 8010368:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801036c:	1a9b      	subs	r3, r3, r2
 801036e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	4798      	blx	r3
 8010378:	69a4      	ldr	r4, [r4, #24]
 801037a:	2c00      	cmp	r4, #0
 801037c:	d1d8      	bne.n	8010330 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801037e:	b002      	add	sp, #8
 8010380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010384 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010384:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010386:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801038a:	460d      	mov	r5, r1
 801038c:	4616      	mov	r6, r2
 801038e:	b323      	cbz	r3, 80103da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010390:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010392:	b314      	cbz	r4, 80103da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010394:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010398:	b1eb      	cbz	r3, 80103d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801039a:	6828      	ldr	r0, [r5, #0]
 801039c:	466b      	mov	r3, sp
 801039e:	6869      	ldr	r1, [r5, #4]
 80103a0:	c303      	stmia	r3!, {r0, r1}
 80103a2:	4668      	mov	r0, sp
 80103a4:	1d21      	adds	r1, r4, #4
 80103a6:	f7ff ff15 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 80103aa:	4668      	mov	r0, sp
 80103ac:	f7ff ff55 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 80103b0:	b988      	cbnz	r0, 80103d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80103b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80103b6:	4669      	mov	r1, sp
 80103b8:	88a2      	ldrh	r2, [r4, #4]
 80103ba:	4620      	mov	r0, r4
 80103bc:	1a9b      	subs	r3, r3, r2
 80103be:	88e2      	ldrh	r2, [r4, #6]
 80103c0:	f8ad 3000 	strh.w	r3, [sp]
 80103c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80103c8:	1a9b      	subs	r3, r3, r2
 80103ca:	4632      	mov	r2, r6
 80103cc:	f8ad 3002 	strh.w	r3, [sp, #2]
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103d4:	4798      	blx	r3
 80103d6:	69a4      	ldr	r4, [r4, #24]
 80103d8:	e7db      	b.n	8010392 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80103da:	b002      	add	sp, #8
 80103dc:	bd70      	pop	{r4, r5, r6, pc}

080103de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80103de:	6803      	ldr	r3, [r0, #0]
 80103e0:	b513      	push	{r0, r1, r4, lr}
 80103e2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80103e6:	2300      	movs	r3, #0
 80103e8:	e9cd 3300 	strd	r3, r3, [sp]
 80103ec:	466b      	mov	r3, sp
 80103ee:	47a0      	blx	r4
 80103f0:	b002      	add	sp, #8
 80103f2:	bd10      	pop	{r4, pc}

080103f4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80103f4:	2301      	movs	r3, #1
 80103f6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80103fa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80103fe:	4770      	bx	lr

08010400 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010400:	2301      	movs	r3, #1
 8010402:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010406:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801040a:	4770      	bx	lr

0801040c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801040c:	6843      	ldr	r3, [r0, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	725a      	strb	r2, [r3, #9]
 8010412:	6840      	ldr	r0, [r0, #4]
 8010414:	6803      	ldr	r3, [r0, #0]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	4718      	bx	r3

0801041a <_ZN8touchgfx3HAL8flushDMAEv>:
 801041a:	6840      	ldr	r0, [r0, #4]
 801041c:	6803      	ldr	r3, [r0, #0]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	4718      	bx	r3

08010422 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010422:	b530      	push	{r4, r5, lr}
 8010424:	b08b      	sub	sp, #44	; 0x2c
 8010426:	6804      	ldr	r4, [r0, #0]
 8010428:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801042c:	9509      	str	r5, [sp, #36]	; 0x24
 801042e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8010432:	9508      	str	r5, [sp, #32]
 8010434:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8010438:	9507      	str	r5, [sp, #28]
 801043a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801043e:	9506      	str	r5, [sp, #24]
 8010440:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8010444:	9505      	str	r5, [sp, #20]
 8010446:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801044a:	9504      	str	r5, [sp, #16]
 801044c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8010450:	9503      	str	r5, [sp, #12]
 8010452:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010456:	9502      	str	r5, [sp, #8]
 8010458:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801045c:	e9cd 3500 	strd	r3, r5, [sp]
 8010460:	4613      	mov	r3, r2
 8010462:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8010464:	2200      	movs	r2, #0
 8010466:	47a0      	blx	r4
 8010468:	b00b      	add	sp, #44	; 0x2c
 801046a:	bd30      	pop	{r4, r5, pc}

0801046c <_ZN8touchgfx3HAL10beginFrameEv>:
 801046c:	4b04      	ldr	r3, [pc, #16]	; (8010480 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	b123      	cbz	r3, 801047c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010472:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8010476:	f080 0001 	eor.w	r0, r0, #1
 801047a:	4770      	bx	lr
 801047c:	2001      	movs	r0, #1
 801047e:	4770      	bx	lr
 8010480:	20027b9e 	.word	0x20027b9e

08010484 <_ZN8touchgfx3HAL8endFrameEv>:
 8010484:	b510      	push	{r4, lr}
 8010486:	4604      	mov	r4, r0
 8010488:	6840      	ldr	r0, [r0, #4]
 801048a:	6803      	ldr	r3, [r0, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	4798      	blx	r3
 8010490:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8010494:	b113      	cbz	r3, 801049c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010496:	2301      	movs	r3, #1
 8010498:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801049c:	bd10      	pop	{r4, pc}

0801049e <_ZN8touchgfx3HAL10initializeEv>:
 801049e:	b510      	push	{r4, lr}
 80104a0:	4604      	mov	r4, r0
 80104a2:	f7f1 fb15 	bl	8001ad0 <_ZN8touchgfx10OSWrappers10initializeEv>
 80104a6:	f7f0 fbad 	bl	8000c04 <_ZN8touchgfx4GPIO4initEv>
 80104aa:	6860      	ldr	r0, [r4, #4]
 80104ac:	6803      	ldr	r3, [r0, #0]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	4798      	blx	r3
 80104b2:	68e0      	ldr	r0, [r4, #12]
 80104b4:	6803      	ldr	r3, [r0, #0]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	4798      	blx	r3
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	4620      	mov	r0, r4
 80104be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c4:	4718      	bx	r3
	...

080104c8 <_ZN8touchgfx3HAL4tickEv>:
 80104c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	4604      	mov	r4, r0
 80104ce:	4d5b      	ldr	r5, [pc, #364]	; (801063c <_ZN8touchgfx3HAL4tickEv+0x174>)
 80104d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80104d4:	4798      	blx	r3
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f000 8095 	beq.w	8010606 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80104dc:	2001      	movs	r0, #1
 80104de:	2600      	movs	r6, #0
 80104e0:	f7f0 faf6 	bl	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80104e4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80104e8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80104ec:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80104f0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80104f4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80104f8:	b133      	cbz	r3, 8010508 <_ZN8touchgfx3HAL4tickEv+0x40>
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	4620      	mov	r0, r4
 80104fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010502:	4798      	blx	r3
 8010504:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8010508:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801050c:	2601      	movs	r6, #1
 801050e:	6862      	ldr	r2, [r4, #4]
 8010510:	f083 0301 	eor.w	r3, r3, #1
 8010514:	702e      	strb	r6, [r5, #0]
 8010516:	7253      	strb	r3, [r2, #9]
 8010518:	f005 fdb0 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 801051c:	6803      	ldr	r3, [r0, #0]
 801051e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010520:	4798      	blx	r3
 8010522:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010526:	b90b      	cbnz	r3, 801052c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010528:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801052c:	f005 fda6 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 8010530:	6803      	ldr	r3, [r0, #0]
 8010532:	695b      	ldr	r3, [r3, #20]
 8010534:	4798      	blx	r3
 8010536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010538:	6803      	ldr	r3, [r0, #0]
 801053a:	691b      	ldr	r3, [r3, #16]
 801053c:	4798      	blx	r3
 801053e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010542:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8010546:	3b01      	subs	r3, #1
 8010548:	b2db      	uxtb	r3, r3
 801054a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801054e:	b10a      	cbz	r2, 8010554 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010550:	2b00      	cmp	r3, #0
 8010552:	d1eb      	bne.n	801052c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010554:	4a3a      	ldr	r2, [pc, #232]	; (8010640 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010556:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801055a:	7813      	ldrb	r3, [r2, #0]
 801055c:	3301      	adds	r3, #1
 801055e:	b25b      	sxtb	r3, r3
 8010560:	4299      	cmp	r1, r3
 8010562:	7013      	strb	r3, [r2, #0]
 8010564:	dc10      	bgt.n	8010588 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010566:	2300      	movs	r3, #0
 8010568:	68e0      	ldr	r0, [r4, #12]
 801056a:	a902      	add	r1, sp, #8
 801056c:	7013      	strb	r3, [r2, #0]
 801056e:	aa03      	add	r2, sp, #12
 8010570:	6803      	ldr	r3, [r0, #0]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	4798      	blx	r3
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	2800      	cmp	r0, #0
 801057a:	d050      	beq.n	801061e <_ZN8touchgfx3HAL4tickEv+0x156>
 801057c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010580:	4620      	mov	r0, r4
 8010582:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010586:	4798      	blx	r3
 8010588:	2300      	movs	r3, #0
 801058a:	6960      	ldr	r0, [r4, #20]
 801058c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010590:	b158      	cbz	r0, 80105aa <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010592:	6803      	ldr	r3, [r0, #0]
 8010594:	f10d 0107 	add.w	r1, sp, #7
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	4798      	blx	r3
 801059c:	b128      	cbz	r0, 80105aa <_ZN8touchgfx3HAL4tickEv+0xe2>
 801059e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80105a4:	6803      	ldr	r3, [r0, #0]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	4798      	blx	r3
 80105aa:	f104 001c 	add.w	r0, r4, #28
 80105ae:	f014 fdff 	bl	80251b0 <_ZN8touchgfx8Gestures4tickEv>
 80105b2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80105b6:	b30b      	cbz	r3, 80105fc <_ZN8touchgfx3HAL4tickEv+0x134>
 80105b8:	6920      	ldr	r0, [r4, #16]
 80105ba:	6803      	ldr	r3, [r0, #0]
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	4798      	blx	r3
 80105c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80105c2:	4606      	mov	r6, r0
 80105c4:	b903      	cbnz	r3, 80105c8 <_ZN8touchgfx3HAL4tickEv+0x100>
 80105c6:	6720      	str	r0, [r4, #112]	; 0x70
 80105c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80105ca:	4a1e      	ldr	r2, [pc, #120]	; (8010644 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80105cc:	1af3      	subs	r3, r6, r3
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d914      	bls.n	80105fc <_ZN8touchgfx3HAL4tickEv+0x134>
 80105d2:	6920      	ldr	r0, [r4, #16]
 80105d4:	6803      	ldr	r3, [r0, #0]
 80105d6:	699b      	ldr	r3, [r3, #24]
 80105d8:	4798      	blx	r3
 80105da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80105dc:	2264      	movs	r2, #100	; 0x64
 80105de:	1af3      	subs	r3, r6, r3
 80105e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80105e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80105e8:	2800      	cmp	r0, #0
 80105ea:	dc1d      	bgt.n	8010628 <_ZN8touchgfx3HAL4tickEv+0x160>
 80105ec:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80105f0:	6920      	ldr	r0, [r4, #16]
 80105f2:	2100      	movs	r1, #0
 80105f4:	6803      	ldr	r3, [r0, #0]
 80105f6:	69db      	ldr	r3, [r3, #28]
 80105f8:	4798      	blx	r3
 80105fa:	6726      	str	r6, [r4, #112]	; 0x70
 80105fc:	f005 fd3e 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 8010600:	6803      	ldr	r3, [r0, #0]
 8010602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010604:	4798      	blx	r3
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	4620      	mov	r0, r4
 801060a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801060e:	4798      	blx	r3
 8010610:	2001      	movs	r0, #1
 8010612:	f7f0 fa8d 	bl	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010616:	2300      	movs	r3, #0
 8010618:	702b      	strb	r3, [r5, #0]
 801061a:	b004      	add	sp, #16
 801061c:	bd70      	pop	{r4, r5, r6, pc}
 801061e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010622:	4620      	mov	r0, r4
 8010624:	4798      	blx	r3
 8010626:	e7af      	b.n	8010588 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010628:	2863      	cmp	r0, #99	; 0x63
 801062a:	bfcb      	itete	gt
 801062c:	2300      	movgt	r3, #0
 801062e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8010632:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8010636:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801063a:	e7d9      	b.n	80105f0 <_ZN8touchgfx3HAL4tickEv+0x128>
 801063c:	20027ba4 	.word	0x20027ba4
 8010640:	20027ba5 	.word	0x20027ba5
 8010644:	05f5e100 	.word	0x05f5e100

08010648 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010648:	f7f1 ba72 	b.w	8001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801064c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801064c:	6581      	str	r1, [r0, #88]	; 0x58
 801064e:	301c      	adds	r0, #28
 8010650:	f014 bdac 	b.w	80251ac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010654 <_ZN8touchgfx3HAL5touchEll>:
 8010654:	b530      	push	{r4, r5, lr}
 8010656:	b087      	sub	sp, #28
 8010658:	4604      	mov	r4, r0
 801065a:	a804      	add	r0, sp, #16
 801065c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010660:	f005 fb52 	bl	8015d08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010664:	9b04      	ldr	r3, [sp, #16]
 8010666:	a906      	add	r1, sp, #24
 8010668:	a803      	add	r0, sp, #12
 801066a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801066e:	9b05      	ldr	r3, [sp, #20]
 8010670:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010674:	f005 fb9a 	bl	8015dac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010678:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801067c:	f104 001c 	add.w	r0, r4, #28
 8010680:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010684:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010688:	b189      	cbz	r1, 80106ae <_ZN8touchgfx3HAL5touchEll+0x5a>
 801068a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801068e:	9300      	str	r3, [sp, #0]
 8010690:	4613      	mov	r3, r2
 8010692:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010696:	462a      	mov	r2, r5
 8010698:	f014 fd98 	bl	80251cc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801069c:	b128      	cbz	r0, 80106aa <_ZN8touchgfx3HAL5touchEll+0x56>
 801069e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80106a2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80106a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80106a8:	6623      	str	r3, [r4, #96]	; 0x60
 80106aa:	b007      	add	sp, #28
 80106ac:	bd30      	pop	{r4, r5, pc}
 80106ae:	f014 fdcd 	bl	802524c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80106b2:	2301      	movs	r3, #1
 80106b4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80106b8:	e7f1      	b.n	801069e <_ZN8touchgfx3HAL5touchEll+0x4a>

080106ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80106ba:	b510      	push	{r4, lr}
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d046      	beq.n	801074e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80106c0:	ea81 0002 	eor.w	r0, r1, r2
 80106c4:	07c4      	lsls	r4, r0, #31
 80106c6:	d508      	bpl.n	80106da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80106c8:	440b      	add	r3, r1
 80106ca:	3a01      	subs	r2, #1
 80106cc:	428b      	cmp	r3, r1
 80106ce:	d93e      	bls.n	801074e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80106d0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80106d4:	f801 0b01 	strb.w	r0, [r1], #1
 80106d8:	e7f8      	b.n	80106cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80106da:	07d0      	lsls	r0, r2, #31
 80106dc:	bf42      	ittt	mi
 80106de:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80106e2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80106e6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d911      	bls.n	8010712 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80106ee:	ea81 0402 	eor.w	r4, r1, r2
 80106f2:	4610      	mov	r0, r2
 80106f4:	07a4      	lsls	r4, r4, #30
 80106f6:	d022      	beq.n	801073e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80106f8:	f023 0401 	bic.w	r4, r3, #1
 80106fc:	440c      	add	r4, r1
 80106fe:	428c      	cmp	r4, r1
 8010700:	4602      	mov	r2, r0
 8010702:	d904      	bls.n	801070e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010704:	8812      	ldrh	r2, [r2, #0]
 8010706:	3002      	adds	r0, #2
 8010708:	f821 2b02 	strh.w	r2, [r1], #2
 801070c:	e7f7      	b.n	80106fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801070e:	f003 0301 	and.w	r3, r3, #1
 8010712:	f023 0003 	bic.w	r0, r3, #3
 8010716:	4408      	add	r0, r1
 8010718:	4288      	cmp	r0, r1
 801071a:	4614      	mov	r4, r2
 801071c:	d904      	bls.n	8010728 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801071e:	6824      	ldr	r4, [r4, #0]
 8010720:	3204      	adds	r2, #4
 8010722:	f841 4b04 	str.w	r4, [r1], #4
 8010726:	e7f7      	b.n	8010718 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010728:	f003 0303 	and.w	r3, r3, #3
 801072c:	3a01      	subs	r2, #1
 801072e:	440b      	add	r3, r1
 8010730:	428b      	cmp	r3, r1
 8010732:	d90c      	bls.n	801074e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010734:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010738:	f801 0b01 	strb.w	r0, [r1], #1
 801073c:	e7f8      	b.n	8010730 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801073e:	0790      	lsls	r0, r2, #30
 8010740:	d0e7      	beq.n	8010712 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010742:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010746:	3b02      	subs	r3, #2
 8010748:	f821 0b02 	strh.w	r0, [r1], #2
 801074c:	e7e1      	b.n	8010712 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801074e:	2001      	movs	r0, #1
 8010750:	bd10      	pop	{r4, pc}

08010752 <_ZN8touchgfx3HAL7noTouchEv>:
 8010752:	b510      	push	{r4, lr}
 8010754:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8010758:	4604      	mov	r4, r0
 801075a:	b153      	cbz	r3, 8010772 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801075c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010760:	2101      	movs	r1, #1
 8010762:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8010766:	301c      	adds	r0, #28
 8010768:	f014 fd70 	bl	802524c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801076c:	2300      	movs	r3, #0
 801076e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010772:	bd10      	pop	{r4, pc}

08010774 <_ZN8touchgfx3HAL3lcdEv>:
 8010774:	4b04      	ldr	r3, [pc, #16]	; (8010788 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801077c:	b10a      	cbz	r2, 8010782 <_ZN8touchgfx3HAL3lcdEv+0xe>
 801077e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010780:	b900      	cbnz	r0, 8010784 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8010782:	6898      	ldr	r0, [r3, #8]
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	20027ba0 	.word	0x20027ba0

0801078c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801078c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010790:	b085      	sub	sp, #20
 8010792:	4604      	mov	r4, r0
 8010794:	2000      	movs	r0, #0
 8010796:	4699      	mov	r9, r3
 8010798:	ad04      	add	r5, sp, #16
 801079a:	460f      	mov	r7, r1
 801079c:	4690      	mov	r8, r2
 801079e:	f845 0d04 	str.w	r0, [r5, #-4]!
 80107a2:	69a0      	ldr	r0, [r4, #24]
 80107a4:	6806      	ldr	r6, [r0, #0]
 80107a6:	9501      	str	r5, [sp, #4]
 80107a8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80107ac:	9500      	str	r5, [sp, #0]
 80107ae:	6835      	ldr	r5, [r6, #0]
 80107b0:	47a8      	blx	r5
 80107b2:	4d10      	ldr	r5, [pc, #64]	; (80107f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80107b4:	4606      	mov	r6, r0
 80107b6:	f8a5 9000 	strh.w	r9, [r5]
 80107ba:	f7ff ffdb 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 80107be:	6803      	ldr	r3, [r0, #0]
 80107c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c2:	4798      	blx	r3
 80107c4:	b128      	cbz	r0, 80107d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80107c6:	2801      	cmp	r0, #1
 80107c8:	d00b      	beq.n	80107e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80107ca:	4630      	mov	r0, r6
 80107cc:	b005      	add	sp, #20
 80107ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107d2:	882b      	ldrh	r3, [r5, #0]
 80107d4:	fb08 7203 	mla	r2, r8, r3, r7
 80107d8:	9b03      	ldr	r3, [sp, #12]
 80107da:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80107de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80107e0:	e7f3      	b.n	80107ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80107e2:	882a      	ldrh	r2, [r5, #0]
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	fb08 7202 	mla	r2, r8, r2, r7
 80107ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80107ee:	1a9a      	subs	r2, r3, r2
 80107f0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80107f2:	e7ea      	b.n	80107ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80107f4:	20027b9a 	.word	0x20027b9a

080107f8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80107f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107fa:	b08b      	sub	sp, #44	; 0x2c
 80107fc:	4617      	mov	r7, r2
 80107fe:	4604      	mov	r4, r0
 8010800:	460e      	mov	r6, r1
 8010802:	461d      	mov	r5, r3
 8010804:	f7ff ffb6 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010808:	6803      	ldr	r3, [r0, #0]
 801080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080c:	4798      	blx	r3
 801080e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010812:	9007      	str	r0, [sp, #28]
 8010814:	4631      	mov	r1, r6
 8010816:	6822      	ldr	r2, [r4, #0]
 8010818:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801081c:	4b0c      	ldr	r3, [pc, #48]	; (8010850 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801081e:	4620      	mov	r0, r4
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	9306      	str	r3, [sp, #24]
 8010824:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010828:	9305      	str	r3, [sp, #20]
 801082a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801082e:	9304      	str	r3, [sp, #16]
 8010830:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010834:	9303      	str	r3, [sp, #12]
 8010836:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801083a:	9302      	str	r3, [sp, #8]
 801083c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010840:	e9cd 5300 	strd	r5, r3, [sp]
 8010844:	463b      	mov	r3, r7
 8010846:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8010848:	2200      	movs	r2, #0
 801084a:	47a8      	blx	r5
 801084c:	b00b      	add	sp, #44	; 0x2c
 801084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010850:	20027b9a 	.word	0x20027b9a

08010854 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010858:	4698      	mov	r8, r3
 801085a:	6803      	ldr	r3, [r0, #0]
 801085c:	b08b      	sub	sp, #44	; 0x2c
 801085e:	4617      	mov	r7, r2
 8010860:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010862:	460e      	mov	r6, r1
 8010864:	4b13      	ldr	r3, [pc, #76]	; (80108b4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010866:	4604      	mov	r4, r0
 8010868:	f8b3 9000 	ldrh.w	r9, [r3]
 801086c:	f7ff ff82 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010870:	6803      	ldr	r3, [r0, #0]
 8010872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010874:	4798      	blx	r3
 8010876:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801087a:	2200      	movs	r2, #0
 801087c:	4631      	mov	r1, r6
 801087e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010882:	2302      	movs	r3, #2
 8010884:	4620      	mov	r0, r4
 8010886:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801088a:	2301      	movs	r3, #1
 801088c:	9305      	str	r3, [sp, #20]
 801088e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010892:	9304      	str	r3, [sp, #16]
 8010894:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010898:	9303      	str	r3, [sp, #12]
 801089a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801089e:	9302      	str	r3, [sp, #8]
 80108a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80108a4:	e9cd 8300 	strd	r8, r3, [sp]
 80108a8:	463b      	mov	r3, r7
 80108aa:	47a8      	blx	r5
 80108ac:	b00b      	add	sp, #44	; 0x2c
 80108ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108b2:	bf00      	nop
 80108b4:	20027b9a 	.word	0x20027b9a

080108b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80108b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108bc:	4698      	mov	r8, r3
 80108be:	6803      	ldr	r3, [r0, #0]
 80108c0:	b087      	sub	sp, #28
 80108c2:	460e      	mov	r6, r1
 80108c4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80108c6:	4617      	mov	r7, r2
 80108c8:	4b0f      	ldr	r3, [pc, #60]	; (8010908 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80108ca:	4604      	mov	r4, r0
 80108cc:	f8b3 9000 	ldrh.w	r9, [r3]
 80108d0:	f7ff ff50 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 80108d4:	6803      	ldr	r3, [r0, #0]
 80108d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d8:	4798      	blx	r3
 80108da:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80108de:	463a      	mov	r2, r7
 80108e0:	4631      	mov	r1, r6
 80108e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80108e6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80108ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80108ee:	4620      	mov	r0, r4
 80108f0:	9302      	str	r3, [sp, #8]
 80108f2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4643      	mov	r3, r8
 8010900:	47a8      	blx	r5
 8010902:	b007      	add	sp, #28
 8010904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010908:	20027b9a 	.word	0x20027b9a

0801090c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801090c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010910:	4604      	mov	r4, r0
 8010912:	b08f      	sub	sp, #60	; 0x3c
 8010914:	4610      	mov	r0, r2
 8010916:	460d      	mov	r5, r1
 8010918:	4691      	mov	r9, r2
 801091a:	461e      	mov	r6, r3
 801091c:	f008 fe86 	bl	801962c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010920:	2800      	cmp	r0, #0
 8010922:	f000 809d 	beq.w	8010a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010926:	6823      	ldr	r3, [r4, #0]
 8010928:	4620      	mov	r0, r4
 801092a:	f8df b198 	ldr.w	fp, [pc, #408]	; 8010ac4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801092e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010934:	4798      	blx	r3
 8010936:	6823      	ldr	r3, [r4, #0]
 8010938:	4620      	mov	r0, r4
 801093a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8010ac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010940:	4798      	blx	r3
 8010942:	f8bb 3000 	ldrh.w	r3, [fp]
 8010946:	4f5c      	ldr	r7, [pc, #368]	; (8010ab8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010948:	9301      	str	r3, [sp, #4]
 801094a:	f8ba 3000 	ldrh.w	r3, [sl]
 801094e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010952:	4640      	mov	r0, r8
 8010954:	9302      	str	r3, [sp, #8]
 8010956:	883b      	ldrh	r3, [r7, #0]
 8010958:	9303      	str	r3, [sp, #12]
 801095a:	4b58      	ldr	r3, [pc, #352]	; (8010abc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801095c:	881a      	ldrh	r2, [r3, #0]
 801095e:	9305      	str	r3, [sp, #20]
 8010960:	9204      	str	r2, [sp, #16]
 8010962:	f008 fef7 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010966:	8038      	strh	r0, [r7, #0]
 8010968:	4640      	mov	r0, r8
 801096a:	f008 ff27 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801096e:	9b05      	ldr	r3, [sp, #20]
 8010970:	b280      	uxth	r0, r0
 8010972:	8018      	strh	r0, [r3, #0]
 8010974:	4b52      	ldr	r3, [pc, #328]	; (8010ac0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d174      	bne.n	8010a66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801097c:	883b      	ldrh	r3, [r7, #0]
 801097e:	f8aa 0000 	strh.w	r0, [sl]
 8010982:	f8ab 3000 	strh.w	r3, [fp]
 8010986:	4648      	mov	r0, r9
 8010988:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801098c:	f008 fe4e 	bl	801962c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010990:	2200      	movs	r2, #0
 8010992:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8010996:	4611      	mov	r1, r2
 8010998:	4628      	mov	r0, r5
 801099a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801099e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80109a2:	f7f5 fe55 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 80109a6:	2301      	movs	r3, #1
 80109a8:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80109ac:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80109b0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	dd5c      	ble.n	8010a72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80109b8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	dd58      	ble.n	8010a72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80109c0:	462a      	mov	r2, r5
 80109c2:	ab0a      	add	r3, sp, #40	; 0x28
 80109c4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80109c8:	6851      	ldr	r1, [r2, #4]
 80109ca:	c303      	stmia	r3!, {r0, r1}
 80109cc:	4631      	mov	r1, r6
 80109ce:	a80a      	add	r0, sp, #40	; 0x28
 80109d0:	f7ff fc00 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 80109d4:	4b38      	ldr	r3, [pc, #224]	; (8010ab8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80109d6:	2100      	movs	r1, #0
 80109d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80109dc:	4b37      	ldr	r3, [pc, #220]	; (8010abc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80109de:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80109e2:	aa0a      	add	r2, sp, #40	; 0x28
 80109e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109e8:	910c      	str	r1, [sp, #48]	; 0x30
 80109ea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80109ee:	ab08      	add	r3, sp, #32
 80109f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80109f8:	4618      	mov	r0, r3
 80109fa:	a90c      	add	r1, sp, #48	; 0x30
 80109fc:	f7ff fbea 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8010a00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d13c      	bne.n	8010a80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010a06:	2000      	movs	r0, #0
 8010a08:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8010a0c:	2600      	movs	r6, #0
 8010a0e:	696b      	ldr	r3, [r5, #20]
 8010a10:	a908      	add	r1, sp, #32
 8010a12:	682a      	ldr	r2, [r5, #0]
 8010a14:	4628      	mov	r0, r5
 8010a16:	9305      	str	r3, [sp, #20]
 8010a18:	616e      	str	r6, [r5, #20]
 8010a1a:	6892      	ldr	r2, [r2, #8]
 8010a1c:	4790      	blx	r2
 8010a1e:	9b05      	ldr	r3, [sp, #20]
 8010a20:	4652      	mov	r2, sl
 8010a22:	4649      	mov	r1, r9
 8010a24:	616b      	str	r3, [r5, #20]
 8010a26:	4628      	mov	r0, r5
 8010a28:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8010a2c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8010a30:	f7f5 fe0e 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 8010a34:	9a01      	ldr	r2, [sp, #4]
 8010a36:	4b23      	ldr	r3, [pc, #140]	; (8010ac4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010a38:	4620      	mov	r0, r4
 8010a3a:	801a      	strh	r2, [r3, #0]
 8010a3c:	9a02      	ldr	r2, [sp, #8]
 8010a3e:	4b22      	ldr	r3, [pc, #136]	; (8010ac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010a40:	801a      	strh	r2, [r3, #0]
 8010a42:	9a03      	ldr	r2, [sp, #12]
 8010a44:	4b1c      	ldr	r3, [pc, #112]	; (8010ab8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010a46:	801a      	strh	r2, [r3, #0]
 8010a48:	4b1c      	ldr	r3, [pc, #112]	; (8010abc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010a4a:	9a04      	ldr	r2, [sp, #16]
 8010a4c:	801a      	strh	r2, [r3, #0]
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8010a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a56:	4798      	blx	r3
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5e:	4798      	blx	r3
 8010a60:	b00f      	add	sp, #60	; 0x3c
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	883b      	ldrh	r3, [r7, #0]
 8010a68:	f8ab 0000 	strh.w	r0, [fp]
 8010a6c:	f8aa 3000 	strh.w	r3, [sl]
 8010a70:	e789      	b.n	8010986 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010a72:	462a      	mov	r2, r5
 8010a74:	ab0a      	add	r3, sp, #40	; 0x28
 8010a76:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010a7a:	6851      	ldr	r1, [r2, #4]
 8010a7c:	c303      	stmia	r3!, {r0, r1}
 8010a7e:	e7a9      	b.n	80109d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010a80:	a807      	add	r0, sp, #28
 8010a82:	f008 ffd7 	bl	8019a34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010a86:	4606      	mov	r6, r0
 8010a88:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010a8a:	6803      	ldr	r3, [r0, #0]
 8010a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a8e:	4798      	blx	r3
 8010a90:	4286      	cmp	r6, r0
 8010a92:	d1b8      	bne.n	8010a06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8010a94:	f7ff fe6e 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010a98:	6803      	ldr	r3, [r0, #0]
 8010a9a:	4606      	mov	r6, r0
 8010a9c:	a807      	add	r0, sp, #28
 8010a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa0:	9305      	str	r3, [sp, #20]
 8010aa2:	f008 ffc7 	bl	8019a34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010aa6:	9b05      	ldr	r3, [sp, #20]
 8010aa8:	4601      	mov	r1, r0
 8010aaa:	4630      	mov	r0, r6
 8010aac:	4798      	blx	r3
 8010aae:	f080 0001 	eor.w	r0, r0, #1
 8010ab2:	b2c0      	uxtb	r0, r0
 8010ab4:	e7a8      	b.n	8010a08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010ab6:	bf00      	nop
 8010ab8:	20027b94 	.word	0x20027b94
 8010abc:	20027b96 	.word	0x20027b96
 8010ac0:	20027b98 	.word	0x20027b98
 8010ac4:	20027b9a 	.word	0x20027b9a
 8010ac8:	20027b9c 	.word	0x20027b9c

08010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010acc:	4b07      	ldr	r3, [pc, #28]	; (8010aec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010ace:	b510      	push	{r4, lr}
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	b13b      	cbz	r3, 8010ae6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010ad6:	6803      	ldr	r3, [r0, #0]
 8010ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ada:	4798      	blx	r3
 8010adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010ade:	4283      	cmp	r3, r0
 8010ae0:	d101      	bne.n	8010ae6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010ae2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010ae4:	bd10      	pop	{r4, pc}
 8010ae6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010ae8:	e7fc      	b.n	8010ae4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010aea:	bf00      	nop
 8010aec:	20027b9e 	.word	0x20027b9e

08010af0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af4:	461d      	mov	r5, r3
 8010af6:	b08a      	sub	sp, #40	; 0x28
 8010af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010afc:	4690      	mov	r8, r2
 8010afe:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8010b02:	2400      	movs	r4, #0
 8010b04:	4607      	mov	r7, r0
 8010b06:	fb06 8505 	mla	r5, r6, r5, r8
 8010b0a:	9404      	str	r4, [sp, #16]
 8010b0c:	f88d 4020 	strb.w	r4, [sp, #32]
 8010b10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010b14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010b18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010b1c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010b20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010b24:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010b28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010b2c:	f7ff ffce 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b30:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010b3a:	a901      	add	r1, sp, #4
 8010b3c:	9505      	str	r5, [sp, #20]
 8010b3e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010b42:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8010b46:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010b4a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010b4e:	6803      	ldr	r3, [r0, #0]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	4798      	blx	r3
 8010b54:	b00a      	add	sp, #40	; 0x28
 8010b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b5a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010b5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b5e:	b08b      	sub	sp, #44	; 0x2c
 8010b60:	2400      	movs	r4, #0
 8010b62:	4691      	mov	r9, r2
 8010b64:	461d      	mov	r5, r3
 8010b66:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8010b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b6e:	4688      	mov	r8, r1
 8010b70:	4607      	mov	r7, r0
 8010b72:	9404      	str	r4, [sp, #16]
 8010b74:	fb06 9505 	mla	r5, r6, r5, r9
 8010b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b7c:	f7ff ffa6 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010b84:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010b8e:	a901      	add	r1, sp, #4
 8010b90:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010b94:	9505      	str	r5, [sp, #20]
 8010b96:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010b9a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010b9e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010ba2:	f8cd 8010 	str.w	r8, [sp, #16]
 8010ba6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010baa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010bae:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010bb2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010bb6:	6803      	ldr	r3, [r0, #0]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	4798      	blx	r3
 8010bbc:	b00b      	add	sp, #44	; 0x2c
 8010bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010bc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc8:	b08a      	sub	sp, #40	; 0x28
 8010bca:	4698      	mov	r8, r3
 8010bcc:	2300      	movs	r3, #0
 8010bce:	4606      	mov	r6, r0
 8010bd0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010bd4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8010bd8:	2d0b      	cmp	r5, #11
 8010bda:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8010bde:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8010be2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8010be6:	9304      	str	r3, [sp, #16]
 8010be8:	d137      	bne.n	8010c5a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010bea:	2380      	movs	r3, #128	; 0x80
 8010bec:	f88d 0020 	strb.w	r0, [sp, #32]
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	9203      	str	r2, [sp, #12]
 8010bf4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010bf8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010bfc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010c04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c08:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010c0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010c10:	f7ff ff5c 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c14:	2c0b      	cmp	r4, #11
 8010c16:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010c1a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010c1e:	bf94      	ite	ls
 8010c20:	4b19      	ldrls	r3, [pc, #100]	; (8010c88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010c22:	2100      	movhi	r1, #0
 8010c24:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010c28:	bf98      	it	ls
 8010c2a:	5d19      	ldrbls	r1, [r3, r4]
 8010c2c:	fb02 8307 	mla	r3, r2, r7, r8
 8010c30:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010c34:	10c9      	asrs	r1, r1, #3
 8010c36:	fb01 0003 	mla	r0, r1, r3, r0
 8010c3a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010c3e:	a901      	add	r1, sp, #4
 8010c40:	9005      	str	r0, [sp, #20]
 8010c42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010c46:	2300      	movs	r3, #0
 8010c48:	6870      	ldr	r0, [r6, #4]
 8010c4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010c4e:	6803      	ldr	r3, [r0, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	4798      	blx	r3
 8010c54:	b00a      	add	sp, #40	; 0x28
 8010c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c5a:	2d02      	cmp	r5, #2
 8010c5c:	d109      	bne.n	8010c72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010c5e:	28ff      	cmp	r0, #255	; 0xff
 8010c60:	d105      	bne.n	8010c6e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010c62:	f1bc 0f00 	cmp.w	ip, #0
 8010c66:	bf14      	ite	ne
 8010c68:	2340      	movne	r3, #64	; 0x40
 8010c6a:	2320      	moveq	r3, #32
 8010c6c:	e7be      	b.n	8010bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010c6e:	2340      	movs	r3, #64	; 0x40
 8010c70:	e7bc      	b.n	8010bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010c72:	28ff      	cmp	r0, #255	; 0xff
 8010c74:	d105      	bne.n	8010c82 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010c76:	f1bc 0f00 	cmp.w	ip, #0
 8010c7a:	bf14      	ite	ne
 8010c7c:	2304      	movne	r3, #4
 8010c7e:	2301      	moveq	r3, #1
 8010c80:	e7b4      	b.n	8010bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010c82:	2304      	movs	r3, #4
 8010c84:	e7b2      	b.n	8010bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010c86:	bf00      	nop
 8010c88:	0802a8d4 	.word	0x0802a8d4

08010c8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c90:	b08b      	sub	sp, #44	; 0x2c
 8010c92:	461d      	mov	r5, r3
 8010c94:	2400      	movs	r4, #0
 8010c96:	4688      	mov	r8, r1
 8010c98:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8010c9c:	4693      	mov	fp, r2
 8010c9e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8010ca2:	4607      	mov	r7, r0
 8010ca4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8010ca8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8010cac:	9404      	str	r4, [sp, #16]
 8010cae:	bf14      	ite	ne
 8010cb0:	2308      	movne	r3, #8
 8010cb2:	2302      	moveq	r3, #2
 8010cb4:	fb05 b50a 	mla	r5, r5, sl, fp
 8010cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010cbc:	f7ff ff06 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010cc0:	2e0b      	cmp	r6, #11
 8010cc2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010cc6:	a901      	add	r1, sp, #4
 8010cc8:	bf98      	it	ls
 8010cca:	4b13      	ldrls	r3, [pc, #76]	; (8010d18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010ccc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010cd0:	bf98      	it	ls
 8010cd2:	5d9c      	ldrbls	r4, [r3, r6]
 8010cd4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010cd8:	10e4      	asrs	r4, r4, #3
 8010cda:	f8cd 8010 	str.w	r8, [sp, #16]
 8010cde:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010ce2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010ce6:	fb04 0405 	mla	r4, r4, r5, r0
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9405      	str	r4, [sp, #20]
 8010cf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010cf8:	f88d 9020 	strb.w	r9, [sp, #32]
 8010cfc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8010d00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010d04:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8010d08:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	4798      	blx	r3
 8010d12:	b00b      	add	sp, #44	; 0x2c
 8010d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d18:	0802a8d4 	.word	0x0802a8d4

08010d1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d20:	461e      	mov	r6, r3
 8010d22:	4b0a      	ldr	r3, [pc, #40]	; (8010d4c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010d24:	460f      	mov	r7, r1
 8010d26:	4690      	mov	r8, r2
 8010d28:	881d      	ldrh	r5, [r3, #0]
 8010d2a:	f7ff fd23 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010d2e:	6803      	ldr	r3, [r0, #0]
 8010d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d32:	4798      	blx	r3
 8010d34:	280b      	cmp	r0, #11
 8010d36:	bf96      	itet	ls
 8010d38:	4b05      	ldrls	r3, [pc, #20]	; (8010d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010d3a:	2400      	movhi	r4, #0
 8010d3c:	5c1c      	ldrbls	r4, [r3, r0]
 8010d3e:	fb08 7005 	mla	r0, r8, r5, r7
 8010d42:	10e4      	asrs	r4, r4, #3
 8010d44:	fb04 6000 	mla	r0, r4, r0, r6
 8010d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4c:	20027b9a 	.word	0x20027b9a
 8010d50:	0802a8d4 	.word	0x0802a8d4

08010d54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d56:	b08b      	sub	sp, #44	; 0x2c
 8010d58:	461f      	mov	r7, r3
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4616      	mov	r6, r2
 8010d5e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010d62:	2500      	movs	r5, #0
 8010d64:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010d68:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010d6c:	9504      	str	r5, [sp, #16]
 8010d6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010d72:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010d76:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010d7a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010d7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010d82:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010d86:	f88d 3020 	strb.w	r3, [sp, #32]
 8010d8a:	f7ff fe9f 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010d8e:	463a      	mov	r2, r7
 8010d90:	4631      	mov	r1, r6
 8010d92:	4603      	mov	r3, r0
 8010d94:	4620      	mov	r0, r4
 8010d96:	f7ff ffc1 	bl	8010d1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010d9a:	4b0e      	ldr	r3, [pc, #56]	; (8010dd4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010d9c:	9005      	str	r0, [sp, #20]
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010da4:	f7ff fce6 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010da8:	6803      	ldr	r3, [r0, #0]
 8010daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dac:	4798      	blx	r3
 8010dae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010db0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8010db4:	a901      	add	r1, sp, #4
 8010db6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8010dba:	9304      	str	r3, [sp, #16]
 8010dbc:	6860      	ldr	r0, [r4, #4]
 8010dbe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010dc2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010dc6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010dca:	6803      	ldr	r3, [r0, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	4798      	blx	r3
 8010dd0:	b00b      	add	sp, #44	; 0x2c
 8010dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd4:	20027b9a 	.word	0x20027b9a

08010dd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dda:	b08d      	sub	sp, #52	; 0x34
 8010ddc:	2501      	movs	r5, #1
 8010dde:	4604      	mov	r4, r0
 8010de0:	466b      	mov	r3, sp
 8010de2:	9503      	str	r5, [sp, #12]
 8010de4:	e883 0006 	stmia.w	r3, {r1, r2}
 8010de8:	2300      	movs	r3, #0
 8010dea:	f8bd 6000 	ldrh.w	r6, [sp]
 8010dee:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010df2:	9306      	str	r3, [sp, #24]
 8010df4:	6803      	ldr	r3, [r0, #0]
 8010df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df8:	4798      	blx	r3
 8010dfa:	463a      	mov	r2, r7
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	4603      	mov	r3, r0
 8010e00:	4620      	mov	r0, r4
 8010e02:	f7ff ff8b 	bl	8010d1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e08:	9004      	str	r0, [sp, #16]
 8010e0a:	9307      	str	r3, [sp, #28]
 8010e0c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e10:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010e14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010e18:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010e1c:	4b0e      	ldr	r3, [pc, #56]	; (8010e58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010e24:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010e28:	f7ff fca4 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010e2c:	6803      	ldr	r3, [r0, #0]
 8010e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e30:	4798      	blx	r3
 8010e32:	23ff      	movs	r3, #255	; 0xff
 8010e34:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010e38:	a903      	add	r1, sp, #12
 8010e3a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010e3e:	6860      	ldr	r0, [r4, #4]
 8010e40:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010e44:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010e48:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010e4c:	6803      	ldr	r3, [r0, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	4798      	blx	r3
 8010e52:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010e54:	b00d      	add	sp, #52	; 0x34
 8010e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e58:	20027b9a 	.word	0x20027b9a

08010e5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e60:	b08c      	sub	sp, #48	; 0x30
 8010e62:	461e      	mov	r6, r3
 8010e64:	2300      	movs	r3, #0
 8010e66:	4604      	mov	r4, r0
 8010e68:	466d      	mov	r5, sp
 8010e6a:	9306      	str	r3, [sp, #24]
 8010e6c:	6803      	ldr	r3, [r0, #0]
 8010e6e:	e885 0006 	stmia.w	r5, {r1, r2}
 8010e72:	2501      	movs	r5, #1
 8010e74:	f8bd 7000 	ldrh.w	r7, [sp]
 8010e78:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010e7c:	9503      	str	r5, [sp, #12]
 8010e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e80:	4798      	blx	r3
 8010e82:	4642      	mov	r2, r8
 8010e84:	4639      	mov	r1, r7
 8010e86:	4603      	mov	r3, r0
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f7ff ff47 	bl	8010d1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e8e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e92:	9004      	str	r0, [sp, #16]
 8010e94:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010e98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010e9c:	9607      	str	r6, [sp, #28]
 8010e9e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010ea2:	4b10      	ldr	r3, [pc, #64]	; (8010ee4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010eaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010eac:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010eb0:	f7ff fc60 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8010eb4:	6803      	ldr	r3, [r0, #0]
 8010eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eb8:	4798      	blx	r3
 8010eba:	23ff      	movs	r3, #255	; 0xff
 8010ebc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010ec0:	a903      	add	r1, sp, #12
 8010ec2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010ec6:	6860      	ldr	r0, [r4, #4]
 8010ec8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010ecc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010ed0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010ed4:	6803      	ldr	r3, [r0, #0]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	4798      	blx	r3
 8010eda:	4630      	mov	r0, r6
 8010edc:	b00c      	add	sp, #48	; 0x30
 8010ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20027b9a 	.word	0x20027b9a

08010ee8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eea:	b085      	sub	sp, #20
 8010eec:	4605      	mov	r5, r0
 8010eee:	ac02      	add	r4, sp, #8
 8010ef0:	e884 0006 	stmia.w	r4, {r1, r2}
 8010ef4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010ef8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010efc:	f7ff fde6 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f00:	4631      	mov	r1, r6
 8010f02:	4603      	mov	r3, r0
 8010f04:	463a      	mov	r2, r7
 8010f06:	4628      	mov	r0, r5
 8010f08:	f7ff ff08 	bl	8010d1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010f0c:	4a05      	ldr	r2, [pc, #20]	; (8010f24 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010f0e:	682b      	ldr	r3, [r5, #0]
 8010f10:	8812      	ldrh	r2, [r2, #0]
 8010f12:	9200      	str	r2, [sp, #0]
 8010f14:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8010f16:	4603      	mov	r3, r0
 8010f18:	4628      	mov	r0, r5
 8010f1a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010f1e:	47b0      	blx	r6
 8010f20:	b005      	add	sp, #20
 8010f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f24:	20027b9a 	.word	0x20027b9a

08010f28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010f28:	b570      	push	{r4, r5, r6, lr}
 8010f2a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8010f2e:	4604      	mov	r4, r0
 8010f30:	b19b      	cbz	r3, 8010f5a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010f32:	2002      	movs	r0, #2
 8010f34:	f7ef fe2c 	bl	8000b90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010f40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8010f44:	6823      	ldr	r3, [r4, #0]
 8010f46:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8010f4a:	f7ff fdbf 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f4e:	4601      	mov	r1, r0
 8010f50:	4620      	mov	r0, r4
 8010f52:	462b      	mov	r3, r5
 8010f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f58:	4718      	bx	r3
 8010f5a:	bd70      	pop	{r4, r5, r6, pc}

08010f5c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8010f5c:	b570      	push	{r4, r5, r6, lr}
 8010f5e:	4605      	mov	r5, r0
 8010f60:	460c      	mov	r4, r1
 8010f62:	2003      	movs	r0, #3
 8010f64:	b149      	cbz	r1, 8010f7a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8010f66:	f7ef fdb3 	bl	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010f6a:	6928      	ldr	r0, [r5, #16]
 8010f6c:	b168      	cbz	r0, 8010f8a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010f6e:	6803      	ldr	r3, [r0, #0]
 8010f70:	2101      	movs	r1, #1
 8010f72:	695b      	ldr	r3, [r3, #20]
 8010f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f78:	4718      	bx	r3
 8010f7a:	f7ef fdd9 	bl	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010f7e:	6928      	ldr	r0, [r5, #16]
 8010f80:	b118      	cbz	r0, 8010f8a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010f82:	6803      	ldr	r3, [r0, #0]
 8010f84:	4621      	mov	r1, r4
 8010f86:	695b      	ldr	r3, [r3, #20]
 8010f88:	e7f4      	b.n	8010f74 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}

08010f8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010f8c:	b538      	push	{r3, r4, r5, lr}
 8010f8e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8010f92:	4604      	mov	r4, r0
 8010f94:	460d      	mov	r5, r1
 8010f96:	428b      	cmp	r3, r1
 8010f98:	d006      	beq.n	8010fa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010f9a:	6803      	ldr	r3, [r0, #0]
 8010f9c:	b929      	cbnz	r1, 8010faa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010f9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010fa2:	4798      	blx	r3
 8010fa4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8010fa8:	bd38      	pop	{r3, r4, r5, pc}
 8010faa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010fae:	e7f8      	b.n	8010fa2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010fb0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010fb0:	4b0d      	ldr	r3, [pc, #52]	; (8010fe8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010fb2:	b510      	push	{r4, lr}
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	b95b      	cbnz	r3, 8010fd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010fba:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d007      	beq.n	8010fd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010fc2:	6840      	ldr	r0, [r0, #4]
 8010fc4:	f000 f92a 	bl	801121c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010fc8:	b118      	cbz	r0, 8010fd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010fca:	6862      	ldr	r2, [r4, #4]
 8010fcc:	7a53      	ldrb	r3, [r2, #9]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d0fc      	beq.n	8010fcc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010fd2:	f7f0 fda5 	bl	8001b20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	2100      	movs	r1, #0
 8010fda:	f7ff ffd7 	bl	8010f8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7ff fd74 	bl	8010acc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	bf00      	nop
 8010fe8:	20027b9e 	.word	0x20027b9e

08010fec <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8010fec:	b570      	push	{r4, r5, r6, lr}
 8010fee:	4604      	mov	r4, r0
 8010ff0:	6803      	ldr	r3, [r0, #0]
 8010ff2:	b919      	cbnz	r1, 8010ffc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8010ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ffa:	4718      	bx	r3
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8011002:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8011006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011008:	4798      	blx	r3
 801100a:	4605      	mov	r5, r0
 801100c:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8011010:	4620      	mov	r0, r4
 8011012:	2101      	movs	r1, #1
 8011014:	f7ff ffba 	bl	8010f8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011018:	4628      	mov	r0, r5
 801101a:	bd70      	pop	{r4, r5, r6, pc}

0801101c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801101c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011020:	1a13      	subs	r3, r2, r0
 8011022:	4258      	negs	r0, r3
 8011024:	4158      	adcs	r0, r3
 8011026:	4770      	bx	lr

08011028 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011028:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801102c:	1a9b      	subs	r3, r3, r2
 801102e:	2b00      	cmp	r3, #0
 8011030:	bfdc      	itt	le
 8011032:	6882      	ldrle	r2, [r0, #8]
 8011034:	189b      	addle	r3, r3, r2
 8011036:	2b01      	cmp	r3, #1
 8011038:	bfcc      	ite	gt
 801103a:	2000      	movgt	r0, #0
 801103c:	2001      	movle	r0, #1
 801103e:	4770      	bx	lr

08011040 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011040:	6902      	ldr	r2, [r0, #16]
 8011042:	6843      	ldr	r3, [r0, #4]
 8011044:	2024      	movs	r0, #36	; 0x24
 8011046:	fb00 3002 	mla	r0, r0, r2, r3
 801104a:	4770      	bx	lr

0801104c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801104c:	6803      	ldr	r3, [r0, #0]
 801104e:	691b      	ldr	r3, [r3, #16]
 8011050:	4718      	bx	r3

08011052 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011052:	2301      	movs	r3, #1
 8011054:	b570      	push	{r4, r5, r6, lr}
 8011056:	7203      	strb	r3, [r0, #8]
 8011058:	4604      	mov	r4, r0
 801105a:	6840      	ldr	r0, [r0, #4]
 801105c:	6803      	ldr	r3, [r0, #0]
 801105e:	699b      	ldr	r3, [r3, #24]
 8011060:	4798      	blx	r3
 8011062:	6803      	ldr	r3, [r0, #0]
 8011064:	4605      	mov	r5, r0
 8011066:	2b40      	cmp	r3, #64	; 0x40
 8011068:	d00c      	beq.n	8011084 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801106a:	d810      	bhi.n	801108e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801106c:	2b04      	cmp	r3, #4
 801106e:	d01d      	beq.n	80110ac <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011070:	d804      	bhi.n	801107c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011072:	2b01      	cmp	r3, #1
 8011074:	d006      	beq.n	8011084 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011076:	2b02      	cmp	r3, #2
 8011078:	d02c      	beq.n	80110d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801107a:	bd70      	pop	{r4, r5, r6, pc}
 801107c:	2b08      	cmp	r3, #8
 801107e:	d01d      	beq.n	80110bc <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011080:	2b20      	cmp	r3, #32
 8011082:	d1fa      	bne.n	801107a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011084:	6823      	ldr	r3, [r4, #0]
 8011086:	4620      	mov	r0, r4
 8011088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801108a:	4798      	blx	r3
 801108c:	e013      	b.n	80110b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801108e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011092:	d0f7      	beq.n	8011084 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011094:	d804      	bhi.n	80110a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011096:	2b80      	cmp	r3, #128	; 0x80
 8011098:	d0f4      	beq.n	8011084 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801109a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801109e:	e7f0      	b.n	8011082 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80110a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110a4:	d0ee      	beq.n	8011084 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110aa:	e7e5      	b.n	8011078 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80110ac:	6823      	ldr	r3, [r4, #0]
 80110ae:	7f01      	ldrb	r1, [r0, #28]
 80110b0:	4620      	mov	r0, r4
 80110b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b4:	4798      	blx	r3
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ba:	e006      	b.n	80110ca <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80110bc:	6823      	ldr	r3, [r4, #0]
 80110be:	7f01      	ldrb	r1, [r0, #28]
 80110c0:	4620      	mov	r0, r4
 80110c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110c4:	4798      	blx	r3
 80110c6:	6823      	ldr	r3, [r4, #0]
 80110c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ca:	4629      	mov	r1, r5
 80110cc:	4620      	mov	r0, r4
 80110ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110d2:	4718      	bx	r3
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	4620      	mov	r0, r4
 80110d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110da:	4798      	blx	r3
 80110dc:	e7f3      	b.n	80110c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080110de <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80110de:	4770      	bx	lr

080110e0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80110e0:	4770      	bx	lr

080110e2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80110e2:	4770      	bx	lr

080110e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80110e4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80110e8:	b510      	push	{r4, lr}
 80110ea:	1ad2      	subs	r2, r2, r3
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	bfdc      	itt	le
 80110f0:	6884      	ldrle	r4, [r0, #8]
 80110f2:	1912      	addle	r2, r2, r4
 80110f4:	2a01      	cmp	r2, #1
 80110f6:	dd16      	ble.n	8011126 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80110f8:	6842      	ldr	r2, [r0, #4]
 80110fa:	2424      	movs	r4, #36	; 0x24
 80110fc:	fb04 2303 	mla	r3, r4, r3, r2
 8011100:	f101 0220 	add.w	r2, r1, #32
 8011104:	f851 4b04 	ldr.w	r4, [r1], #4
 8011108:	4291      	cmp	r1, r2
 801110a:	f843 4b04 	str.w	r4, [r3], #4
 801110e:	d1f9      	bne.n	8011104 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011110:	780a      	ldrb	r2, [r1, #0]
 8011112:	701a      	strb	r2, [r3, #0]
 8011114:	68c3      	ldr	r3, [r0, #12]
 8011116:	6882      	ldr	r2, [r0, #8]
 8011118:	f3bf 8f5b 	dmb	ish
 801111c:	3301      	adds	r3, #1
 801111e:	429a      	cmp	r2, r3
 8011120:	bfd8      	it	le
 8011122:	1a9b      	suble	r3, r3, r2
 8011124:	60c3      	str	r3, [r0, #12]
 8011126:	bd10      	pop	{r4, pc}

08011128 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011128:	6903      	ldr	r3, [r0, #16]
 801112a:	6882      	ldr	r2, [r0, #8]
 801112c:	f3bf 8f5b 	dmb	ish
 8011130:	3301      	adds	r3, #1
 8011132:	429a      	cmp	r2, r3
 8011134:	bfd8      	it	le
 8011136:	1a9b      	suble	r3, r3, r2
 8011138:	6103      	str	r3, [r0, #16]
 801113a:	4770      	bx	lr

0801113c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	4604      	mov	r4, r0
 8011140:	460e      	mov	r6, r1
 8011142:	6860      	ldr	r0, [r4, #4]
 8011144:	6803      	ldr	r3, [r0, #0]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	4798      	blx	r3
 801114a:	2800      	cmp	r0, #0
 801114c:	d1f9      	bne.n	8011142 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801114e:	4d0d      	ldr	r5, [pc, #52]	; (8011184 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011150:	6828      	ldr	r0, [r5, #0]
 8011152:	6803      	ldr	r3, [r0, #0]
 8011154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011156:	4798      	blx	r3
 8011158:	f7f0 fcf0 	bl	8001b3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801115c:	6828      	ldr	r0, [r5, #0]
 801115e:	2101      	movs	r1, #1
 8011160:	f7ff ff14 	bl	8010f8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011164:	6860      	ldr	r0, [r4, #4]
 8011166:	4631      	mov	r1, r6
 8011168:	6803      	ldr	r3, [r0, #0]
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	4798      	blx	r3
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	4620      	mov	r0, r4
 8011172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011174:	4798      	blx	r3
 8011176:	6828      	ldr	r0, [r5, #0]
 8011178:	6803      	ldr	r3, [r0, #0]
 801117a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801117e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011180:	4718      	bx	r3
 8011182:	bf00      	nop
 8011184:	20027ba0 	.word	0x20027ba0

08011188 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011188:	b508      	push	{r3, lr}
 801118a:	f7f0 fcc9 	bl	8001b20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801118e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011192:	f7f0 bccd 	b.w	8001b30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011196 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011196:	b510      	push	{r4, lr}
 8011198:	4604      	mov	r4, r0
 801119a:	2114      	movs	r1, #20
 801119c:	f014 fca9 	bl	8025af2 <_ZdlPvj>
 80111a0:	4620      	mov	r0, r4
 80111a2:	bd10      	pop	{r4, pc}

080111a4 <_ZN8touchgfx13DMA_Interface5startEv>:
 80111a4:	b510      	push	{r4, lr}
 80111a6:	4604      	mov	r4, r0
 80111a8:	6840      	ldr	r0, [r0, #4]
 80111aa:	6803      	ldr	r3, [r0, #0]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4798      	blx	r3
 80111b0:	b948      	cbnz	r0, 80111c6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80111b2:	7a63      	ldrb	r3, [r4, #9]
 80111b4:	b13b      	cbz	r3, 80111c6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80111b6:	7a23      	ldrb	r3, [r4, #8]
 80111b8:	b92b      	cbnz	r3, 80111c6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80111ba:	6823      	ldr	r3, [r4, #0]
 80111bc:	4620      	mov	r0, r4
 80111be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111c4:	4718      	bx	r3
 80111c6:	bd10      	pop	{r4, pc}

080111c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	4604      	mov	r4, r0
 80111cc:	6840      	ldr	r0, [r0, #4]
 80111ce:	6803      	ldr	r3, [r0, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	4798      	blx	r3
 80111d4:	4605      	mov	r5, r0
 80111d6:	b930      	cbnz	r0, 80111e6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80111d8:	7a23      	ldrb	r3, [r4, #8]
 80111da:	b123      	cbz	r3, 80111e6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80111dc:	6860      	ldr	r0, [r4, #4]
 80111de:	6803      	ldr	r3, [r0, #0]
 80111e0:	695b      	ldr	r3, [r3, #20]
 80111e2:	4798      	blx	r3
 80111e4:	7225      	strb	r5, [r4, #8]
 80111e6:	6860      	ldr	r0, [r4, #4]
 80111e8:	6803      	ldr	r3, [r0, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4798      	blx	r3
 80111ee:	b928      	cbnz	r0, 80111fc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80111f0:	6823      	ldr	r3, [r4, #0]
 80111f2:	4620      	mov	r0, r4
 80111f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111fa:	4718      	bx	r3
 80111fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011200:	f7f0 bca4 	b.w	8001b4c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011204 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011204:	b510      	push	{r4, lr}
 8011206:	6082      	str	r2, [r0, #8]
 8011208:	2200      	movs	r2, #0
 801120a:	4c03      	ldr	r4, [pc, #12]	; (8011218 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801120c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011210:	e9c0 4100 	strd	r4, r1, [r0]
 8011214:	bd10      	pop	{r4, pc}
 8011216:	bf00      	nop
 8011218:	0802a8e8 	.word	0x0802a8e8

0801121c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801121c:	6840      	ldr	r0, [r0, #4]
 801121e:	6803      	ldr	r3, [r0, #0]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	4718      	bx	r3

08011224 <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv>:
 8011224:	b508      	push	{r3, lr}
 8011226:	4b05      	ldr	r3, [pc, #20]	; (801123c <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv+0x18>)
 8011228:	6818      	ldr	r0, [r3, #0]
 801122a:	6803      	ldr	r3, [r0, #0]
 801122c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011230:	4798      	blx	r3
 8011232:	1e43      	subs	r3, r0, #1
 8011234:	4258      	negs	r0, r3
 8011236:	4158      	adcs	r0, r3
 8011238:	bd08      	pop	{r3, pc}
 801123a:	bf00      	nop
 801123c:	20027ba0 	.word	0x20027ba0

08011240 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 8011240:	4770      	bx	lr

08011242 <_ZThn8_N8touchgfx19PainterRGB565BitmapD1Ev>:
 8011242:	3808      	subs	r0, #8
 8011244:	4770      	bx	lr
	...

08011248 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE>:
 8011248:	b538      	push	{r3, r4, r5, lr}
 801124a:	4b10      	ldr	r3, [pc, #64]	; (801128c <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x44>)
 801124c:	4604      	mov	r4, r0
 801124e:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	8085      	strh	r5, [r0, #4]
 8011256:	b96b      	cbnz	r3, 8011274 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x2c>
 8011258:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 801125c:	8462      	strh	r2, [r4, #34]	; 0x22
 801125e:	b963      	cbnz	r3, 801127a <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x32>
 8011260:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
 8011264:	84a0      	strh	r0, [r4, #36]	; 0x24
 8011266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801126a:	89a0      	ldrh	r0, [r4, #12]
 801126c:	1ac0      	subs	r0, r0, r3
 801126e:	bf18      	it	ne
 8011270:	2001      	movne	r0, #1
 8011272:	bd38      	pop	{r3, r4, r5, pc}
 8011274:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
 8011278:	e7f0      	b.n	801125c <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x14>
 801127a:	f104 000c 	add.w	r0, r4, #12
 801127e:	f008 fa69 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011282:	1b40      	subs	r0, r0, r5
 8011284:	8ba5      	ldrh	r5, [r4, #28]
 8011286:	1b40      	subs	r0, r0, r5
 8011288:	b200      	sxth	r0, r0
 801128a:	e7eb      	b.n	8011264 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x1c>
 801128c:	20027b98 	.word	0x20027b98

08011290 <_ZNK8touchgfx19PainterRGB565Bitmap8tearDownEv>:
 8011290:	f7f0 be0e 	b.w	8001eb0 <_ZN8touchgfx5paint8tearDownEv>

08011294 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 8011294:	b510      	push	{r4, lr}
 8011296:	4604      	mov	r4, r0
 8011298:	212c      	movs	r1, #44	; 0x2c
 801129a:	f014 fc2a 	bl	8025af2 <_ZdlPvj>
 801129e:	4620      	mov	r0, r4
 80112a0:	bd10      	pop	{r4, pc}

080112a2 <_ZThn8_N8touchgfx19PainterRGB565BitmapD0Ev>:
 80112a2:	f1a0 0008 	sub.w	r0, r0, #8
 80112a6:	e7f5      	b.n	8011294 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>

080112a8 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh>:
 80112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	4606      	mov	r6, r0
 80112ae:	b085      	sub	sp, #20
 80112b0:	8c77      	ldrh	r7, [r6, #34]	; 0x22
 80112b2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80112b6:	441f      	add	r7, r3
 80112b8:	8cb5      	ldrh	r5, [r6, #36]	; 0x24
 80112ba:	9001      	str	r0, [sp, #4]
 80112bc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80112c0:	b2bf      	uxth	r7, r7
 80112c2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80112c6:	4428      	add	r0, r5
 80112c8:	f896 5020 	ldrb.w	r5, [r6, #32]
 80112cc:	b23b      	sxth	r3, r7
 80112ce:	b200      	sxth	r0, r0
 80112d0:	b1a5      	cbz	r5, 80112fc <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x54>
 80112d2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
 80112d6:	fb93 f5f7 	sdiv	r5, r3, r7
 80112da:	fb07 3315 	mls	r3, r7, r5, r3
 80112de:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 80112e2:	fb90 fcf5 	sdiv	ip, r0, r5
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	fb05 001c 	mls	r0, r5, ip, r0
 80112ec:	bfb8      	it	lt
 80112ee:	19db      	addlt	r3, r3, r7
 80112f0:	2800      	cmp	r0, #0
 80112f2:	b21b      	sxth	r3, r3
 80112f4:	da00      	bge.n	80112f8 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x50>
 80112f6:	4428      	add	r0, r5
 80112f8:	b200      	sxth	r0, r0
 80112fa:	e018      	b.n	801132e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da07      	bge.n	8011310 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x68>
 8011300:	4423      	add	r3, r4
 8011302:	2b00      	cmp	r3, #0
 8011304:	dd61      	ble.n	80113ca <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011306:	443c      	add	r4, r7
 8011308:	1bd7      	subs	r7, r2, r7
 801130a:	462b      	mov	r3, r5
 801130c:	b224      	sxth	r4, r4
 801130e:	b23a      	sxth	r2, r7
 8011310:	f9b6 5014 	ldrsh.w	r5, [r6, #20]
 8011314:	429d      	cmp	r5, r3
 8011316:	dd58      	ble.n	80113ca <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011318:	2800      	cmp	r0, #0
 801131a:	db56      	blt.n	80113ca <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 801131c:	f9b6 7016 	ldrsh.w	r7, [r6, #22]
 8011320:	4287      	cmp	r7, r0
 8011322:	dd52      	ble.n	80113ca <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011324:	191f      	adds	r7, r3, r4
 8011326:	42af      	cmp	r7, r5
 8011328:	dd01      	ble.n	801132e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 801132a:	1aec      	subs	r4, r5, r3
 801132c:	b224      	sxth	r4, r4
 801132e:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8011332:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
 8011336:	69b7      	ldr	r7, [r6, #24]
 8011338:	1aca      	subs	r2, r1, r3
 801133a:	4348      	muls	r0, r1
 801133c:	7bb1      	ldrb	r1, [r6, #14]
 801133e:	eb05 0944 	add.w	r9, r5, r4, lsl #1
 8011342:	b212      	sxth	r2, r2
 8011344:	b1a9      	cbz	r1, 8011372 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xca>
 8011346:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 801134a:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 801134e:	42a2      	cmp	r2, r4
 8011350:	4628      	mov	r0, r5
 8011352:	9b01      	ldr	r3, [sp, #4]
 8011354:	bfa8      	it	ge
 8011356:	4622      	movge	r2, r4
 8011358:	4690      	mov	r8, r2
 801135a:	1aa4      	subs	r4, r4, r2
 801135c:	f7f0 fe02 	bl	8001f64 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8011360:	4639      	mov	r1, r7
 8011362:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 8011366:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 801136a:	b224      	sxth	r4, r4
 801136c:	45a9      	cmp	r9, r5
 801136e:	d8ee      	bhi.n	801134e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xa6>
 8011370:	e02b      	b.n	80113ca <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011372:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 8011376:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8011378:	9100      	str	r1, [sp, #0]
 801137a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801137e:	2f00      	cmp	r7, #0
 8011380:	d062      	beq.n	8011448 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 8011382:	1838      	adds	r0, r7, r0
 8011384:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011388:	4403      	add	r3, r0
 801138a:	9002      	str	r0, [sp, #8]
 801138c:	42a2      	cmp	r2, r4
 801138e:	bfa8      	it	ge
 8011390:	4622      	movge	r2, r4
 8011392:	1aa4      	subs	r4, r4, r2
 8011394:	eb05 0042 	add.w	r0, r5, r2, lsl #1
 8011398:	b224      	sxth	r4, r4
 801139a:	9003      	str	r0, [sp, #12]
 801139c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113a0:	9801      	ldr	r0, [sp, #4]
 80113a2:	4342      	muls	r2, r0
 80113a4:	1c57      	adds	r7, r2, #1
 80113a6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80113aa:	123f      	asrs	r7, r7, #8
 80113ac:	2fff      	cmp	r7, #255	; 0xff
 80113ae:	d10f      	bne.n	80113d0 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x128>
 80113b0:	880a      	ldrh	r2, [r1, #0]
 80113b2:	802a      	strh	r2, [r5, #0]
 80113b4:	3502      	adds	r5, #2
 80113b6:	9a03      	ldr	r2, [sp, #12]
 80113b8:	3102      	adds	r1, #2
 80113ba:	42aa      	cmp	r2, r5
 80113bc:	d8ee      	bhi.n	801139c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xf4>
 80113be:	45a9      	cmp	r9, r5
 80113c0:	9900      	ldr	r1, [sp, #0]
 80113c2:	9b02      	ldr	r3, [sp, #8]
 80113c4:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80113c8:	d8e0      	bhi.n	801138c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xe4>
 80113ca:	b005      	add	sp, #20
 80113cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d0:	fa5f fc87 	uxtb.w	ip, r7
 80113d4:	2f00      	cmp	r7, #0
 80113d6:	d0ed      	beq.n	80113b4 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 80113d8:	f8b5 8000 	ldrh.w	r8, [r5]
 80113dc:	ea6f 0c0c 	mvn.w	ip, ip
 80113e0:	8808      	ldrh	r0, [r1, #0]
 80113e2:	f428 62ff 	bic.w	r2, r8, #2040	; 0x7f8
 80113e6:	fa5f fc8c 	uxtb.w	ip, ip
 80113ea:	f420 6eff 	bic.w	lr, r0, #2040	; 0x7f8
 80113ee:	f408 6bfc 	and.w	fp, r8, #2016	; 0x7e0
 80113f2:	f022 0207 	bic.w	r2, r2, #7
 80113f6:	f008 081f 	and.w	r8, r8, #31
 80113fa:	f02e 0e07 	bic.w	lr, lr, #7
 80113fe:	fb0c fb0b 	mul.w	fp, ip, fp
 8011402:	fb0c f202 	mul.w	r2, ip, r2
 8011406:	fb0c f808 	mul.w	r8, ip, r8
 801140a:	fb07 2e0e 	mla	lr, r7, lr, r2
 801140e:	f400 62fc 	and.w	r2, r0, #2016	; 0x7e0
 8011412:	f000 001f 	and.w	r0, r0, #31
 8011416:	fb07 b202 	mla	r2, r7, r2, fp
 801141a:	fb07 8000 	mla	r0, r7, r0, r8
 801141e:	fb9e fefa 	sdiv	lr, lr, sl
 8011422:	fb92 f2fa 	sdiv	r2, r2, sl
 8011426:	f42e 6eff 	bic.w	lr, lr, #2040	; 0x7f8
 801142a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801142e:	f02e 0e07 	bic.w	lr, lr, #7
 8011432:	ea4e 0e02 	orr.w	lr, lr, r2
 8011436:	fb90 f2fa 	sdiv	r2, r0, sl
 801143a:	f002 021f 	and.w	r2, r2, #31
 801143e:	ea4e 0e02 	orr.w	lr, lr, r2
 8011442:	f8a5 e000 	strh.w	lr, [r5]
 8011446:	e7b5      	b.n	80113b4 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 8011448:	42a2      	cmp	r2, r4
 801144a:	4628      	mov	r0, r5
 801144c:	9b01      	ldr	r3, [sp, #4]
 801144e:	bfa8      	it	ge
 8011450:	4622      	movge	r2, r4
 8011452:	4617      	mov	r7, r2
 8011454:	1aa4      	subs	r4, r4, r2
 8011456:	f7f0 fd5f 	bl	8001f18 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801145a:	9900      	ldr	r1, [sp, #0]
 801145c:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8011460:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8011464:	b224      	sxth	r4, r4
 8011466:	45a9      	cmp	r9, r5
 8011468:	d8ee      	bhi.n	8011448 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 801146a:	e7ae      	b.n	80113ca <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>

0801146c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 801146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801146e:	880b      	ldrh	r3, [r1, #0]
 8011470:	f100 050c 	add.w	r5, r0, #12
 8011474:	4604      	mov	r4, r0
 8011476:	8183      	strh	r3, [r0, #12]
 8011478:	4628      	mov	r0, r5
 801147a:	f008 fadb 	bl	8019a34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801147e:	73a0      	strb	r0, [r4, #14]
 8011480:	4628      	mov	r0, r5
 8011482:	f008 f967 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011486:	4607      	mov	r7, r0
 8011488:	4628      	mov	r0, r5
 801148a:	f008 f997 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801148e:	2300      	movs	r3, #0
 8011490:	82e0      	strh	r0, [r4, #22]
 8011492:	f104 0010 	add.w	r0, r4, #16
 8011496:	6123      	str	r3, [r4, #16]
 8011498:	82a7      	strh	r7, [r4, #20]
 801149a:	f004 fcb5 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801149e:	4628      	mov	r0, r5
 80114a0:	f008 fa44 	bl	801992c <_ZNK8touchgfx6Bitmap7getDataEv>
 80114a4:	61a0      	str	r0, [r4, #24]
 80114a6:	4628      	mov	r0, r5
 80114a8:	f008 fa70 	bl	801998c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80114ac:	62a0      	str	r0, [r4, #40]	; 0x28
 80114ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114b0 <_ZThn8_N8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 80114b0:	f1a0 0008 	sub.w	r0, r0, #8
 80114b4:	f7ff bfda 	b.w	801146c <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>

080114b8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 80114b8:	094a      	lsrs	r2, r1, #5
 80114ba:	4b06      	ldr	r3, [pc, #24]	; (80114d4 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 80114bc:	60c1      	str	r1, [r0, #12]
 80114be:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 80114c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80114c6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80114ca:	4313      	orrs	r3, r2
 80114cc:	4319      	orrs	r1, r3
 80114ce:	8201      	strh	r1, [r0, #16]
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	fffff800 	.word	0xfffff800

080114d8 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 80114d8:	f1a0 0008 	sub.w	r0, r0, #8
 80114dc:	e7ec      	b.n	80114b8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 80114de:	bf00      	nop

080114e0 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80114e0:	b508      	push	{r3, lr}
 80114e2:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80114e4:	6818      	ldr	r0, [r3, #0]
 80114e6:	6803      	ldr	r3, [r0, #0]
 80114e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80114ec:	4798      	blx	r3
 80114ee:	1e43      	subs	r3, r0, #1
 80114f0:	4258      	negs	r0, r3
 80114f2:	4158      	adcs	r0, r3
 80114f4:	bd08      	pop	{r3, pc}
 80114f6:	bf00      	nop
 80114f8:	20027ba0 	.word	0x20027ba0

080114fc <_ZN8touchgfx13PainterRGB565D1Ev>:
 80114fc:	4770      	bx	lr

080114fe <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80114fe:	3808      	subs	r0, #8
 8011500:	4770      	bx	lr

08011502 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8011502:	b430      	push	{r4, r5}
 8011504:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8011508:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801150c:	8a02      	ldrh	r2, [r0, #16]
 801150e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8011512:	4629      	mov	r1, r5
 8011514:	9202      	str	r2, [sp, #8]
 8011516:	68c2      	ldr	r2, [r0, #12]
 8011518:	4620      	mov	r0, r4
 801151a:	bc30      	pop	{r4, r5}
 801151c:	f7f0 bcd2 	b.w	8001ec4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08011520 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8011520:	f7f0 bcc6 	b.w	8001eb0 <_ZN8touchgfx5paint8tearDownEv>

08011524 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8011524:	b510      	push	{r4, lr}
 8011526:	4604      	mov	r4, r0
 8011528:	2114      	movs	r1, #20
 801152a:	f014 fae2 	bl	8025af2 <_ZdlPvj>
 801152e:	4620      	mov	r0, r4
 8011530:	bd10      	pop	{r4, pc}

08011532 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8011532:	f1a0 0008 	sub.w	r0, r0, #8
 8011536:	e7f5      	b.n	8011524 <_ZN8touchgfx13PainterRGB565D0Ev>

08011538 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801153a:	6803      	ldr	r3, [r0, #0]
 801153c:	460d      	mov	r5, r1
 801153e:	4604      	mov	r4, r0
 8011540:	4601      	mov	r1, r0
 8011542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011544:	a802      	add	r0, sp, #8
 8011546:	4798      	blx	r3
 8011548:	6828      	ldr	r0, [r5, #0]
 801154a:	6869      	ldr	r1, [r5, #4]
 801154c:	466b      	mov	r3, sp
 801154e:	c303      	stmia	r3!, {r0, r1}
 8011550:	4668      	mov	r0, sp
 8011552:	4619      	mov	r1, r3
 8011554:	f7fe fe3e 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8011558:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801155a:	b1a8      	cbz	r0, 8011588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801155c:	6803      	ldr	r3, [r0, #0]
 801155e:	1d21      	adds	r1, r4, #4
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	4798      	blx	r3
 8011564:	b180      	cbz	r0, 8011588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8011566:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	dd0c      	ble.n	8011588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801156e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011572:	2d00      	cmp	r5, #0
 8011574:	dd08      	ble.n	8011588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8011576:	4a2d      	ldr	r2, [pc, #180]	; (801162c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8011578:	7812      	ldrb	r2, [r2, #0]
 801157a:	b13a      	cbz	r2, 801158c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801157c:	2a01      	cmp	r2, #1
 801157e:	d02d      	beq.n	80115dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8011580:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011582:	6803      	ldr	r3, [r0, #0]
 8011584:	691b      	ldr	r3, [r3, #16]
 8011586:	4798      	blx	r3
 8011588:	b004      	add	sp, #16
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011590:	441d      	add	r5, r3
 8011592:	b2ad      	uxth	r5, r5
 8011594:	b22e      	sxth	r6, r5
 8011596:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801159a:	42b3      	cmp	r3, r6
 801159c:	daf0      	bge.n	8011580 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801159e:	6823      	ldr	r3, [r4, #0]
 80115a0:	4669      	mov	r1, sp
 80115a2:	4620      	mov	r0, r4
 80115a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115a6:	4798      	blx	r3
 80115a8:	b940      	cbnz	r0, 80115bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 80115aa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d004      	beq.n	80115bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 80115b2:	3301      	adds	r3, #1
 80115b4:	105b      	asrs	r3, r3, #1
 80115b6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80115ba:	e7f0      	b.n	801159e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 80115bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80115c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80115c4:	4413      	add	r3, r2
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	441a      	add	r2, r3
 80115ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80115ce:	b212      	sxth	r2, r2
 80115d0:	4296      	cmp	r6, r2
 80115d2:	dae0      	bge.n	8011596 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80115d4:	1aeb      	subs	r3, r5, r3
 80115d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80115da:	e7dc      	b.n	8011596 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80115dc:	f8bd 5000 	ldrh.w	r5, [sp]
 80115e0:	441d      	add	r5, r3
 80115e2:	b2ad      	uxth	r5, r5
 80115e4:	b22e      	sxth	r6, r5
 80115e6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80115ea:	42b3      	cmp	r3, r6
 80115ec:	dac8      	bge.n	8011580 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	4669      	mov	r1, sp
 80115f2:	4620      	mov	r0, r4
 80115f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115f6:	4798      	blx	r3
 80115f8:	b940      	cbnz	r0, 801160c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80115fa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d004      	beq.n	801160c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8011602:	3301      	adds	r3, #1
 8011604:	105b      	asrs	r3, r3, #1
 8011606:	f8ad 3004 	strh.w	r3, [sp, #4]
 801160a:	e7f0      	b.n	80115ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 801160c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011610:	f8bd 3000 	ldrh.w	r3, [sp]
 8011614:	4413      	add	r3, r2
 8011616:	b29b      	uxth	r3, r3
 8011618:	441a      	add	r2, r3
 801161a:	f8ad 3000 	strh.w	r3, [sp]
 801161e:	b212      	sxth	r2, r2
 8011620:	4296      	cmp	r6, r2
 8011622:	dae0      	bge.n	80115e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011624:	1aeb      	subs	r3, r5, r3
 8011626:	f8ad 3004 	strh.w	r3, [sp, #4]
 801162a:	e7dc      	b.n	80115e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801162c:	20027b98 	.word	0x20027b98

08011630 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8011630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011632:	6803      	ldr	r3, [r0, #0]
 8011634:	4604      	mov	r4, r0
 8011636:	4601      	mov	r1, r0
 8011638:	4668      	mov	r0, sp
 801163a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801163c:	4798      	blx	r3
 801163e:	2100      	movs	r1, #0
 8011640:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011644:	4668      	mov	r0, sp
 8011646:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801164a:	9102      	str	r1, [sp, #8]
 801164c:	a902      	add	r1, sp, #8
 801164e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011652:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011656:	f7fe fdbd 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	4669      	mov	r1, sp
 801165e:	4620      	mov	r0, r4
 8011660:	691b      	ldr	r3, [r3, #16]
 8011662:	4798      	blx	r3
 8011664:	b004      	add	sp, #16
 8011666:	bd10      	pop	{r4, pc}

08011668 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011668:	2101      	movs	r1, #1
 801166a:	2200      	movs	r2, #0
 801166c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011670:	490a      	ldr	r1, [pc, #40]	; (801169c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8011672:	8082      	strh	r2, [r0, #4]
 8011674:	6001      	str	r1, [r0, #0]
 8011676:	21ff      	movs	r1, #255	; 0xff
 8011678:	80c2      	strh	r2, [r0, #6]
 801167a:	8102      	strh	r2, [r0, #8]
 801167c:	8142      	strh	r2, [r0, #10]
 801167e:	8182      	strh	r2, [r0, #12]
 8011680:	81c2      	strh	r2, [r0, #14]
 8011682:	8202      	strh	r2, [r0, #16]
 8011684:	8242      	strh	r2, [r0, #18]
 8011686:	61c2      	str	r2, [r0, #28]
 8011688:	8402      	strh	r2, [r0, #32]
 801168a:	8442      	strh	r2, [r0, #34]	; 0x22
 801168c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011690:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8011694:	6282      	str	r2, [r0, #40]	; 0x28
 8011696:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801169a:	4770      	bx	lr
 801169c:	0802a984 	.word	0x0802a984

080116a0 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80116a0:	f101 0364 	add.w	r3, r1, #100	; 0x64
 80116a4:	4602      	mov	r2, r0
 80116a6:	cb03      	ldmia	r3!, {r0, r1}
 80116a8:	6010      	str	r0, [r2, #0]
 80116aa:	4610      	mov	r0, r2
 80116ac:	6051      	str	r1, [r2, #4]
 80116ae:	4770      	bx	lr

080116b0 <_ZN8touchgfx4LineD1Ev>:
 80116b0:	4770      	bx	lr

080116b2 <_ZN8touchgfx4LineD0Ev>:
 80116b2:	b510      	push	{r4, lr}
 80116b4:	4604      	mov	r4, r0
 80116b6:	2170      	movs	r1, #112	; 0x70
 80116b8:	f014 fa1b 	bl	8025af2 <_ZdlPvj>
 80116bc:	4620      	mov	r0, r4
 80116be:	bd10      	pop	{r4, pc}

080116c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80116c0:	b507      	push	{r0, r1, r2, lr}
 80116c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80116c6:	ab01      	add	r3, sp, #4
 80116c8:	6809      	ldr	r1, [r1, #0]
 80116ca:	6800      	ldr	r0, [r0, #0]
 80116cc:	f005 ff35 	bl	801753a <_ZN8touchgfx6muldivElllRl>
 80116d0:	b003      	add	sp, #12
 80116d2:	f85d fb04 	ldr.w	pc, [sp], #4

080116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80116d6:	6800      	ldr	r0, [r0, #0]
 80116d8:	2800      	cmp	r0, #0
 80116da:	bfb9      	ittee	lt
 80116dc:	2320      	movlt	r3, #32
 80116de:	fb90 f0f3 	sdivlt	r0, r0, r3
 80116e2:	301f      	addge	r0, #31
 80116e4:	1140      	asrge	r0, r0, #5
 80116e6:	4770      	bx	lr

080116e8 <_ZNK8touchgfx4Line17invalidateContentEv>:
 80116e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ec:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80116f0:	b089      	sub	sp, #36	; 0x24
 80116f2:	4604      	mov	r4, r0
 80116f4:	b353      	cbz	r3, 801174c <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 80116f6:	6803      	ldr	r3, [r0, #0]
 80116f8:	4601      	mov	r1, r0
 80116fa:	a802      	add	r0, sp, #8
 80116fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116fe:	4798      	blx	r3
 8011700:	2220      	movs	r2, #32
 8011702:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8011706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801170a:	f8d4 b000 	ldr.w	fp, [r4]
 801170e:	fb9a f0f2 	sdiv	r0, sl, r2
 8011712:	fb91 f5f2 	sdiv	r5, r1, r2
 8011716:	fb93 f6f2 	sdiv	r6, r3, r2
 801171a:	1b40      	subs	r0, r0, r5
 801171c:	0076      	lsls	r6, r6, #1
 801171e:	2800      	cmp	r0, #0
 8011720:	bfb8      	it	lt
 8011722:	4240      	neglt	r0, r0
 8011724:	4286      	cmp	r6, r0
 8011726:	dc0c      	bgt.n	8011742 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8011728:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801172a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801172e:	fb95 f0f2 	sdiv	r0, r5, r2
 8011732:	fb98 f7f2 	sdiv	r7, r8, r2
 8011736:	1bc0      	subs	r0, r0, r7
 8011738:	2800      	cmp	r0, #0
 801173a:	bfb8      	it	lt
 801173c:	4240      	neglt	r0, r0
 801173e:	4286      	cmp	r6, r0
 8011740:	dd07      	ble.n	8011752 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 8011742:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011746:	a902      	add	r1, sp, #8
 8011748:	4620      	mov	r0, r4
 801174a:	4798      	blx	r3
 801174c:	b009      	add	sp, #36	; 0x24
 801174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011752:	eb01 060a 	add.w	r6, r1, sl
 8011756:	2002      	movs	r0, #2
 8011758:	eb08 0705 	add.w	r7, r8, r5
 801175c:	3301      	adds	r3, #1
 801175e:	f10d 0920 	add.w	r9, sp, #32
 8011762:	9101      	str	r1, [sp, #4]
 8011764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011768:	fb96 f6f0 	sdiv	r6, r6, r0
 801176c:	fb97 f7f0 	sdiv	r7, r7, r0
 8011770:	4103      	asrs	r3, r0
 8011772:	b236      	sxth	r6, r6
 8011774:	b23f      	sxth	r7, r7
 8011776:	f849 3d08 	str.w	r3, [r9, #-8]!
 801177a:	4648      	mov	r0, r9
 801177c:	fb96 f6f2 	sdiv	r6, r6, r2
 8011780:	fb97 f7f2 	sdiv	r7, r7, r2
 8011784:	f7ff ffa7 	bl	80116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011788:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801178c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8011790:	fa1f fe87 	uxth.w	lr, r7
 8011794:	9901      	ldr	r1, [sp, #4]
 8011796:	fa1f fc86 	uxth.w	ip, r6
 801179a:	4293      	cmp	r3, r2
 801179c:	b280      	uxth	r0, r0
 801179e:	eba1 0a0a 	sub.w	sl, r1, sl
 80117a2:	da54      	bge.n	801184e <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 80117a4:	ebac 0100 	sub.w	r1, ip, r0
 80117a8:	f1ba 0f00 	cmp.w	sl, #0
 80117ac:	4460      	add	r0, ip
 80117ae:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80117b2:	b289      	uxth	r1, r1
 80117b4:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 80117b8:	b280      	uxth	r0, r0
 80117ba:	b20e      	sxth	r6, r1
 80117bc:	da29      	bge.n	8011812 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 80117be:	eba8 0505 	sub.w	r5, r8, r5
 80117c2:	2d00      	cmp	r5, #0
 80117c4:	da2a      	bge.n	801181c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 80117c6:	fa1f f88a 	uxth.w	r8, sl
 80117ca:	f8ad a010 	strh.w	sl, [sp, #16]
 80117ce:	fa1f f58c 	uxth.w	r5, ip
 80117d2:	f8ad c012 	strh.w	ip, [sp, #18]
 80117d6:	eba0 0008 	sub.w	r0, r0, r8
 80117da:	4443      	add	r3, r8
 80117dc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80117e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80117e4:	1a59      	subs	r1, r3, r1
 80117e6:	ebae 0005 	sub.w	r0, lr, r5
 80117ea:	f8ad 701a 	strh.w	r7, [sp, #26]
 80117ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80117f2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80117f6:	442a      	add	r2, r5
 80117f8:	eba2 0e0e 	sub.w	lr, r2, lr
 80117fc:	f8ad e01e 	strh.w	lr, [sp, #30]
 8011800:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011804:	a904      	add	r1, sp, #16
 8011806:	4620      	mov	r0, r4
 8011808:	4798      	blx	r3
 801180a:	6823      	ldr	r3, [r4, #0]
 801180c:	4649      	mov	r1, r9
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	e79a      	b.n	8011748 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8011812:	d003      	beq.n	801181c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011814:	eba8 0505 	sub.w	r5, r8, r5
 8011818:	2d00      	cmp	r5, #0
 801181a:	dcd4      	bgt.n	80117c6 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 801181c:	fa1f f88a 	uxth.w	r8, sl
 8011820:	f8ad 6010 	strh.w	r6, [sp, #16]
 8011824:	fa1f f58c 	uxth.w	r5, ip
 8011828:	f8ad c012 	strh.w	ip, [sp, #18]
 801182c:	4443      	add	r3, r8
 801182e:	eba0 0008 	sub.w	r0, r0, r8
 8011832:	f8ad a018 	strh.w	sl, [sp, #24]
 8011836:	1a59      	subs	r1, r3, r1
 8011838:	ebae 0305 	sub.w	r3, lr, r5
 801183c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011840:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011844:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011848:	f8ad 001c 	strh.w	r0, [sp, #28]
 801184c:	e7d3      	b.n	80117f6 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801184e:	ebae 0100 	sub.w	r1, lr, r0
 8011852:	f1ba 0f00 	cmp.w	sl, #0
 8011856:	4470      	add	r0, lr
 8011858:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801185c:	b289      	uxth	r1, r1
 801185e:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8011862:	b280      	uxth	r0, r0
 8011864:	b20f      	sxth	r7, r1
 8011866:	da20      	bge.n	80118aa <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8011868:	eba8 0505 	sub.w	r5, r8, r5
 801186c:	2d00      	cmp	r5, #0
 801186e:	da21      	bge.n	80118b4 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8011870:	fa1f f88e 	uxth.w	r8, lr
 8011874:	f8ad e010 	strh.w	lr, [sp, #16]
 8011878:	fa1f f58a 	uxth.w	r5, sl
 801187c:	f8ad a012 	strh.w	sl, [sp, #18]
 8011880:	4443      	add	r3, r8
 8011882:	ebac 0e08 	sub.w	lr, ip, r8
 8011886:	442a      	add	r2, r5
 8011888:	1b40      	subs	r0, r0, r5
 801188a:	eba3 0c0c 	sub.w	ip, r3, ip
 801188e:	f8ad e014 	strh.w	lr, [sp, #20]
 8011892:	1a51      	subs	r1, r2, r1
 8011894:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011898:	f8ad 6018 	strh.w	r6, [sp, #24]
 801189c:	f8ad 701a 	strh.w	r7, [sp, #26]
 80118a0:	f8ad c01c 	strh.w	ip, [sp, #28]
 80118a4:	f8ad 101e 	strh.w	r1, [sp, #30]
 80118a8:	e7aa      	b.n	8011800 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 80118aa:	d003      	beq.n	80118b4 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80118ac:	eba8 0505 	sub.w	r5, r8, r5
 80118b0:	2d00      	cmp	r5, #0
 80118b2:	dcdd      	bgt.n	8011870 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 80118b4:	fa1f f58e 	uxth.w	r5, lr
 80118b8:	f8ad 7012 	strh.w	r7, [sp, #18]
 80118bc:	fa1f f88a 	uxth.w	r8, sl
 80118c0:	f8ad e010 	strh.w	lr, [sp, #16]
 80118c4:	442b      	add	r3, r5
 80118c6:	ebac 0705 	sub.w	r7, ip, r5
 80118ca:	4442      	add	r2, r8
 80118cc:	eba0 0008 	sub.w	r0, r0, r8
 80118d0:	eba3 0c0c 	sub.w	ip, r3, ip
 80118d4:	f8ad 7014 	strh.w	r7, [sp, #20]
 80118d8:	1a51      	subs	r1, r2, r1
 80118da:	f8ad 6018 	strh.w	r6, [sp, #24]
 80118de:	f8ad a01a 	strh.w	sl, [sp, #26]
 80118e2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80118e6:	f8ad c01c 	strh.w	ip, [sp, #28]
 80118ea:	f8ad 001e 	strh.w	r0, [sp, #30]
 80118ee:	e787      	b.n	8011800 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

080118f0 <_ZN8touchgfx7CWRUtil4sineEi>:
 80118f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80118f4:	fb90 f2f3 	sdiv	r2, r0, r3
 80118f8:	fb02 0013 	mls	r0, r2, r3, r0
 80118fc:	2800      	cmp	r0, #0
 80118fe:	bfb8      	it	lt
 8011900:	18c0      	addlt	r0, r0, r3
 8011902:	4b0a      	ldr	r3, [pc, #40]	; (801192c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8011904:	285a      	cmp	r0, #90	; 0x5a
 8011906:	dc02      	bgt.n	801190e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8011908:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801190c:	4770      	bx	lr
 801190e:	28b4      	cmp	r0, #180	; 0xb4
 8011910:	dc02      	bgt.n	8011918 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8011912:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8011916:	e7f7      	b.n	8011908 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8011918:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801191c:	bfd4      	ite	le
 801191e:	38b4      	suble	r0, #180	; 0xb4
 8011920:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8011924:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011928:	4240      	negs	r0, r0
 801192a:	4770      	bx	lr
 801192c:	0802aa50 	.word	0x0802aa50

08011930 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8011930:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8011934:	f04f 0300 	mov.w	r3, #0
 8011938:	bf2c      	ite	cs
 801193a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801193e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8011942:	1899      	adds	r1, r3, r2
 8011944:	4288      	cmp	r0, r1
 8011946:	bf24      	itt	cs
 8011948:	1853      	addcs	r3, r2, r1
 801194a:	1a40      	subcs	r0, r0, r1
 801194c:	0892      	lsrs	r2, r2, #2
 801194e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011952:	d1f6      	bne.n	8011942 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8011954:	4618      	mov	r0, r3
 8011956:	4770      	bx	lr

08011958 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8011958:	b510      	push	{r4, lr}
 801195a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801195e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8011962:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8011966:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801196a:	139b      	asrs	r3, r3, #14
 801196c:	13a4      	asrs	r4, r4, #14
 801196e:	429c      	cmp	r4, r3
 8011970:	bfb8      	it	lt
 8011972:	461c      	movlt	r4, r3
 8011974:	2c01      	cmp	r4, #1
 8011976:	dd07      	ble.n	8011988 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8011978:	fb91 f1f4 	sdiv	r1, r1, r4
 801197c:	fb90 f0f4 	sdiv	r0, r0, r4
 8011980:	f7ff ffea 	bl	8011958 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011984:	4360      	muls	r0, r4
 8011986:	bd10      	pop	{r4, pc}
 8011988:	4340      	muls	r0, r0
 801198a:	fb01 0001 	mla	r0, r1, r1, r0
 801198e:	f7ff ffcf 	bl	8011930 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011992:	e7f8      	b.n	8011986 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08011994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8011994:	2800      	cmp	r0, #0
 8011996:	b508      	push	{r3, lr}
 8011998:	da05      	bge.n	80119a6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801199a:	4240      	negs	r0, r0
 801199c:	f7ff fffa 	bl	8011994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80119a0:	4240      	negs	r0, r0
 80119a2:	b240      	sxtb	r0, r0
 80119a4:	bd08      	pop	{r3, pc}
 80119a6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80119aa:	dc11      	bgt.n	80119d0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80119ac:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80119b0:	dd09      	ble.n	80119c6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80119b2:	4340      	muls	r0, r0
 80119b4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80119b8:	f7ff ffba 	bl	8011930 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80119bc:	f7ff ffea 	bl	8011994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80119c0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80119c4:	e7ed      	b.n	80119a2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80119c6:	3003      	adds	r0, #3
 80119c8:	4b02      	ldr	r3, [pc, #8]	; (80119d4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80119ca:	10c0      	asrs	r0, r0, #3
 80119cc:	5618      	ldrsb	r0, [r3, r0]
 80119ce:	e7e9      	b.n	80119a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80119d0:	2000      	movs	r0, #0
 80119d2:	e7e7      	b.n	80119a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80119d4:	0802a9f4 	.word	0x0802a9f4

080119d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 80119d8:	4281      	cmp	r1, r0
 80119da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119dc:	460c      	mov	r4, r1
 80119de:	4615      	mov	r5, r2
 80119e0:	dd07      	ble.n	80119f2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 80119e2:	4601      	mov	r1, r0
 80119e4:	4620      	mov	r0, r4
 80119e6:	f7ff fff7 	bl	80119d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80119ea:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80119ee:	b003      	add	sp, #12
 80119f0:	bd30      	pop	{r4, r5, pc}
 80119f2:	f7ff ffb1 	bl	8011958 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80119f6:	6028      	str	r0, [r5, #0]
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d0f8      	beq.n	80119ee <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 80119fc:	4602      	mov	r2, r0
 80119fe:	ab01      	add	r3, sp, #4
 8011a00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011a04:	4620      	mov	r0, r4
 8011a06:	f005 fd98 	bl	801753a <_ZN8touchgfx6muldivElllRl>
 8011a0a:	f7ff ffc3 	bl	8011994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011a0e:	e7ee      	b.n	80119ee <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08011a10 <_ZN8touchgfx4LineC1Ev>:
 8011a10:	b510      	push	{r4, lr}
 8011a12:	4604      	mov	r4, r0
 8011a14:	f7ff fe28 	bl	8011668 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011a18:	4b0c      	ldr	r3, [pc, #48]	; (8011a4c <_ZN8touchgfx4LineC1Ev+0x3c>)
 8011a1a:	2220      	movs	r2, #32
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	6023      	str	r3, [r4, #0]
 8011a20:	2300      	movs	r3, #0
 8011a22:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011a24:	2212      	movs	r2, #18
 8011a26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011a2a:	66e2      	str	r2, [r4, #108]	; 0x6c
 8011a2c:	60a3      	str	r3, [r4, #8]
 8011a2e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8011a32:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8011a36:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8011a3a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8011a3e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8011a42:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8011a46:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8011a4a:	bd10      	pop	{r4, pc}
 8011a4c:	0802ab10 	.word	0x0802ab10

08011a50 <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 8011a50:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8011a54:	4770      	bx	lr

08011a56 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8011a56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a5a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8011a5c:	4604      	mov	r4, r0
 8011a5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011a60:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8011a62:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011a64:	1aff      	subs	r7, r7, r3
 8011a66:	eba5 0502 	sub.w	r5, r5, r2
 8011a6a:	d142      	bne.n	8011af2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8011a6c:	b955      	cbnz	r5, 8011a84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8011a6e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8011a72:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8011a76:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8011a7a:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8011a7e:	b002      	add	sp, #8
 8011a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a84:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8011a88:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	2502      	movs	r5, #2
 8011a90:	4642      	mov	r2, r8
 8011a92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011a94:	f005 fd70 	bl	8017578 <_ZN8touchgfx6muldivElll>
 8011a98:	4642      	mov	r2, r8
 8011a9a:	4639      	mov	r1, r7
 8011a9c:	fb90 f6f5 	sdiv	r6, r0, r5
 8011aa0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011aa2:	f005 fd69 	bl	8017578 <_ZN8touchgfx6muldivElll>
 8011aa6:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8011aaa:	fb90 f5f5 	sdiv	r5, r0, r5
 8011aae:	f1b9 0f00 	cmp.w	r9, #0
 8011ab2:	d067      	beq.n	8011b84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8011ab4:	f1b9 0f02 	cmp.w	r9, #2
 8011ab8:	d878      	bhi.n	8011bac <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8011aba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011abc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011abe:	1b93      	subs	r3, r2, r6
 8011ac0:	4432      	add	r2, r6
 8011ac2:	1b5b      	subs	r3, r3, r5
 8011ac4:	1b52      	subs	r2, r2, r5
 8011ac6:	6463      	str	r3, [r4, #68]	; 0x44
 8011ac8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011aca:	6522      	str	r2, [r4, #80]	; 0x50
 8011acc:	18e9      	adds	r1, r5, r3
 8011ace:	1b5b      	subs	r3, r3, r5
 8011ad0:	1b89      	subs	r1, r1, r6
 8011ad2:	1b9b      	subs	r3, r3, r6
 8011ad4:	6561      	str	r1, [r4, #84]	; 0x54
 8011ad6:	1b81      	subs	r1, r0, r6
 8011ad8:	4430      	add	r0, r6
 8011ada:	4429      	add	r1, r5
 8011adc:	4428      	add	r0, r5
 8011ade:	64a1      	str	r1, [r4, #72]	; 0x48
 8011ae0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ae2:	64e0      	str	r0, [r4, #76]	; 0x4c
 8011ae4:	186f      	adds	r7, r5, r1
 8011ae6:	1b49      	subs	r1, r1, r5
 8011ae8:	4437      	add	r7, r6
 8011aea:	4431      	add	r1, r6
 8011aec:	65a7      	str	r7, [r4, #88]	; 0x58
 8011aee:	65e1      	str	r1, [r4, #92]	; 0x5c
 8011af0:	e05b      	b.n	8011baa <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8011af2:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011af6:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8011afa:	2d00      	cmp	r5, #0
 8011afc:	d0c6      	beq.n	8011a8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011afe:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8011b02:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8011b06:	fb93 f2f8 	sdiv	r2, r3, r8
 8011b0a:	fb08 3312 	mls	r3, r8, r2, r3
 8011b0e:	b353      	cbz	r3, 8011b66 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8011b10:	fb98 f2f3 	sdiv	r2, r8, r3
 8011b14:	fb03 8812 	mls	r8, r3, r2, r8
 8011b18:	f1b8 0f00 	cmp.w	r8, #0
 8011b1c:	d1f3      	bne.n	8011b06 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	f24b 5104 	movw	r1, #46340	; 0xb504
 8011b24:	bf1c      	itt	ne
 8011b26:	fb97 f7f3 	sdivne	r7, r7, r3
 8011b2a:	fb95 f5f3 	sdivne	r5, r5, r3
 8011b2e:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8011b32:	4608      	mov	r0, r1
 8011b34:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8011b38:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8011b3c:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8011b40:	428b      	cmp	r3, r1
 8011b42:	dd01      	ble.n	8011b48 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8011b44:	428a      	cmp	r2, r1
 8011b46:	dc10      	bgt.n	8011b6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8011b48:	fb90 f3f3 	sdiv	r3, r0, r3
 8011b4c:	fb90 f2f2 	sdiv	r2, r0, r2
 8011b50:	4293      	cmp	r3, r2
 8011b52:	bfa8      	it	ge
 8011b54:	4613      	movge	r3, r2
 8011b56:	435f      	muls	r7, r3
 8011b58:	435d      	muls	r5, r3
 8011b5a:	4629      	mov	r1, r5
 8011b5c:	4638      	mov	r0, r7
 8011b5e:	f7ff fefb 	bl	8011958 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011b62:	4680      	mov	r8, r0
 8011b64:	e792      	b.n	8011a8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011b66:	4643      	mov	r3, r8
 8011b68:	e7d9      	b.n	8011b1e <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8011b6a:	fb93 f3f1 	sdiv	r3, r3, r1
 8011b6e:	fb92 f2f1 	sdiv	r2, r2, r1
 8011b72:	4293      	cmp	r3, r2
 8011b74:	bfcc      	ite	gt
 8011b76:	3301      	addgt	r3, #1
 8011b78:	1c53      	addle	r3, r2, #1
 8011b7a:	fb97 f7f3 	sdiv	r7, r7, r3
 8011b7e:	fb95 f5f3 	sdiv	r5, r5, r3
 8011b82:	e7ea      	b.n	8011b5a <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8011b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011b86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011b88:	1b93      	subs	r3, r2, r6
 8011b8a:	4432      	add	r2, r6
 8011b8c:	6463      	str	r3, [r4, #68]	; 0x44
 8011b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011b90:	6522      	str	r2, [r4, #80]	; 0x50
 8011b92:	18e9      	adds	r1, r5, r3
 8011b94:	1b5b      	subs	r3, r3, r5
 8011b96:	6561      	str	r1, [r4, #84]	; 0x54
 8011b98:	1b81      	subs	r1, r0, r6
 8011b9a:	4430      	add	r0, r6
 8011b9c:	64a1      	str	r1, [r4, #72]	; 0x48
 8011b9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ba0:	64e0      	str	r0, [r4, #76]	; 0x4c
 8011ba2:	186f      	adds	r7, r5, r1
 8011ba4:	1b49      	subs	r1, r1, r5
 8011ba6:	65a7      	str	r7, [r4, #88]	; 0x58
 8011ba8:	65e1      	str	r1, [r4, #92]	; 0x5c
 8011baa:	6623      	str	r3, [r4, #96]	; 0x60
 8011bac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011bae:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8011bb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011bb4:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8011bb8:	9200      	str	r2, [sp, #0]
 8011bba:	9301      	str	r3, [sp, #4]
 8011bbc:	680f      	ldr	r7, [r1, #0]
 8011bbe:	3104      	adds	r1, #4
 8011bc0:	9800      	ldr	r0, [sp, #0]
 8011bc2:	42ba      	cmp	r2, r7
 8011bc4:	bfa8      	it	ge
 8011bc6:	463a      	movge	r2, r7
 8011bc8:	4287      	cmp	r7, r0
 8011bca:	9801      	ldr	r0, [sp, #4]
 8011bcc:	bfc8      	it	gt
 8011bce:	9700      	strgt	r7, [sp, #0]
 8011bd0:	68cf      	ldr	r7, [r1, #12]
 8011bd2:	42bb      	cmp	r3, r7
 8011bd4:	bfa8      	it	ge
 8011bd6:	463b      	movge	r3, r7
 8011bd8:	4287      	cmp	r7, r0
 8011bda:	bfc8      	it	gt
 8011bdc:	9701      	strgt	r7, [sp, #4]
 8011bde:	458c      	cmp	ip, r1
 8011be0:	d1ec      	bne.n	8011bbc <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8011be2:	2720      	movs	r7, #32
 8011be4:	4668      	mov	r0, sp
 8011be6:	fb92 f8f7 	sdiv	r8, r2, r7
 8011bea:	fb93 f7f7 	sdiv	r7, r3, r7
 8011bee:	f7ff fd72 	bl	80116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011bf2:	4682      	mov	sl, r0
 8011bf4:	a801      	add	r0, sp, #4
 8011bf6:	f7ff fd6e 	bl	80116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011bfa:	ebaa 0208 	sub.w	r2, sl, r8
 8011bfe:	1bc0      	subs	r0, r0, r7
 8011c00:	f1b9 0f01 	cmp.w	r9, #1
 8011c04:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8011c08:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8011c0c:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8011c10:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8011c14:	f47f af33 	bne.w	8011a7e <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8011c18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c1c:	1b83      	subs	r3, r0, r6
 8011c1e:	6463      	str	r3, [r4, #68]	; 0x44
 8011c20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c22:	18ea      	adds	r2, r5, r3
 8011c24:	6562      	str	r2, [r4, #84]	; 0x54
 8011c26:	1b8a      	subs	r2, r1, r6
 8011c28:	4431      	add	r1, r6
 8011c2a:	4406      	add	r6, r0
 8011c2c:	64a2      	str	r2, [r4, #72]	; 0x48
 8011c2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011c30:	64e1      	str	r1, [r4, #76]	; 0x4c
 8011c32:	18af      	adds	r7, r5, r2
 8011c34:	1b52      	subs	r2, r2, r5
 8011c36:	1b5d      	subs	r5, r3, r5
 8011c38:	6526      	str	r6, [r4, #80]	; 0x50
 8011c3a:	65a7      	str	r7, [r4, #88]	; 0x58
 8011c3c:	65e2      	str	r2, [r4, #92]	; 0x5c
 8011c3e:	6625      	str	r5, [r4, #96]	; 0x60
 8011c40:	e71d      	b.n	8011a7e <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08011c42 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8011c42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011c44:	428b      	cmp	r3, r1
 8011c46:	d102      	bne.n	8011c4e <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8011c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d003      	beq.n	8011c56 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8011c4e:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8011c52:	f7ff bf00 	b.w	8011a56 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011c56:	4770      	bx	lr

08011c58 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 8011c58:	b570      	push	{r4, r5, r6, lr}
 8011c5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c5c:	4604      	mov	r4, r0
 8011c5e:	460e      	mov	r6, r1
 8011c60:	4615      	mov	r5, r2
 8011c62:	428b      	cmp	r3, r1
 8011c64:	d102      	bne.n	8011c6c <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 8011c66:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	d00e      	beq.n	8011c8a <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x32>
 8011c6c:	6823      	ldr	r3, [r4, #0]
 8011c6e:	4620      	mov	r0, r4
 8011c70:	699b      	ldr	r3, [r3, #24]
 8011c72:	4798      	blx	r3
 8011c74:	4620      	mov	r0, r4
 8011c76:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
 8011c7a:	f7ff feec 	bl	8011a56 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	4620      	mov	r0, r4
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c88:	4718      	bx	r3
 8011c8a:	bd70      	pop	{r4, r5, r6, pc}

08011c8c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8011c8c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8011c90:	f7ff bee1 	b.w	8011a56 <_ZN8touchgfx4Line17updateCachedShapeEv>

08011c94 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8011c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c98:	b0a0      	sub	sp, #128	; 0x80
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	460a      	mov	r2, r1
 8011c9e:	4601      	mov	r1, r0
 8011ca0:	a804      	add	r0, sp, #16
 8011ca2:	f013 fc21 	bl	80254e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	9301      	str	r3, [sp, #4]
 8011caa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d17c      	bne.n	8011dac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8011cb2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011cb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011cb6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011cb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011cba:	1ac0      	subs	r0, r0, r3
 8011cbc:	eba1 0102 	sub.w	r1, r1, r2
 8011cc0:	d437      	bmi.n	8011d32 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8011cc2:	2900      	cmp	r1, #0
 8011cc4:	aa01      	add	r2, sp, #4
 8011cc6:	db2e      	blt.n	8011d26 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8011cc8:	f7ff fe86 	bl	80119d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011ccc:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8011cd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8011cd2:	a804      	add	r0, sp, #16
 8011cd4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011cd6:	f013 fd81 	bl	80257dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011cda:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011cdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011cde:	a804      	add	r0, sp, #16
 8011ce0:	f013 fdc9 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011ce4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8011ce6:	2db3      	cmp	r5, #179	; 0xb3
 8011ce8:	dc33      	bgt.n	8011d52 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8011cea:	eba6 0805 	sub.w	r8, r6, r5
 8011cee:	4640      	mov	r0, r8
 8011cf0:	f7ff fdfe 	bl	80118f0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011cf4:	a902      	add	r1, sp, #8
 8011cf6:	9002      	str	r0, [sp, #8]
 8011cf8:	a801      	add	r0, sp, #4
 8011cfa:	f7ff fce1 	bl	80116c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d00:	1847      	adds	r7, r0, r1
 8011d02:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8011d06:	f7ff fdf3 	bl	80118f0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011d0a:	a903      	add	r1, sp, #12
 8011d0c:	9003      	str	r0, [sp, #12]
 8011d0e:	a801      	add	r0, sp, #4
 8011d10:	f7ff fcd6 	bl	80116c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011d14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011d16:	4639      	mov	r1, r7
 8011d18:	1a12      	subs	r2, r2, r0
 8011d1a:	a804      	add	r0, sp, #16
 8011d1c:	f013 fdab 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011d22:	441d      	add	r5, r3
 8011d24:	e7df      	b.n	8011ce6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8011d26:	4249      	negs	r1, r1
 8011d28:	f7ff fe56 	bl	80119d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011d2c:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8011d30:	e7ce      	b.n	8011cd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011d32:	2900      	cmp	r1, #0
 8011d34:	f1c0 0000 	rsb	r0, r0, #0
 8011d38:	aa01      	add	r2, sp, #4
 8011d3a:	db04      	blt.n	8011d46 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8011d3c:	f7ff fe4c 	bl	80119d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011d40:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8011d44:	e7c4      	b.n	8011cd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011d46:	4249      	negs	r1, r1
 8011d48:	f7ff fe46 	bl	80119d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011d4c:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8011d50:	e7be      	b.n	8011cd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8011d52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011d54:	a804      	add	r0, sp, #16
 8011d56:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011d58:	f013 fd8d 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d5c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011d5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8011d60:	a804      	add	r0, sp, #16
 8011d62:	f013 fd88 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d66:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8011d68:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8011d6c:	2d00      	cmp	r5, #0
 8011d6e:	dd31      	ble.n	8011dd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8011d70:	eb05 0806 	add.w	r8, r5, r6
 8011d74:	4640      	mov	r0, r8
 8011d76:	f7ff fdbb 	bl	80118f0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011d7a:	a902      	add	r1, sp, #8
 8011d7c:	9002      	str	r0, [sp, #8]
 8011d7e:	a801      	add	r0, sp, #4
 8011d80:	f7ff fc9e 	bl	80116c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011d86:	1847      	adds	r7, r0, r1
 8011d88:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8011d8c:	f7ff fdb0 	bl	80118f0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011d90:	a903      	add	r1, sp, #12
 8011d92:	9003      	str	r0, [sp, #12]
 8011d94:	a801      	add	r0, sp, #4
 8011d96:	f7ff fc93 	bl	80116c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011d9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	1a12      	subs	r2, r2, r0
 8011da0:	a804      	add	r0, sp, #16
 8011da2:	f013 fd68 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011da6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011da8:	1aed      	subs	r5, r5, r3
 8011daa:	e7df      	b.n	8011d6c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8011dac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8011dae:	a804      	add	r0, sp, #16
 8011db0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011db2:	f013 fd13 	bl	80257dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011db6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011db8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011dba:	a804      	add	r0, sp, #16
 8011dbc:	f013 fd5b 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011dc0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011dc2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011dc4:	a804      	add	r0, sp, #16
 8011dc6:	f013 fd56 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011dca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011dcc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8011dce:	a804      	add	r0, sp, #16
 8011dd0:	f013 fd51 	bl	8025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011dd4:	21ff      	movs	r1, #255	; 0xff
 8011dd6:	a804      	add	r0, sp, #16
 8011dd8:	f013 fc42 	bl	8025660 <_ZN8touchgfx6Canvas6renderEh>
 8011ddc:	4b04      	ldr	r3, [pc, #16]	; (8011df0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x15c>)
 8011dde:	4604      	mov	r4, r0
 8011de0:	a80c      	add	r0, sp, #48	; 0x30
 8011de2:	9304      	str	r3, [sp, #16]
 8011de4:	f001 fe44 	bl	8013a70 <_ZN8touchgfx7OutlineD1Ev>
 8011de8:	4620      	mov	r0, r4
 8011dea:	b020      	add	sp, #128	; 0x80
 8011dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df0:	0802b590 	.word	0x0802b590

08011df4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8011df4:	6301      	str	r1, [r0, #48]	; 0x30
 8011df6:	4770      	bx	lr

08011df8 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8011df8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011dfa:	4770      	bx	lr

08011dfc <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8011dfc:	6341      	str	r1, [r0, #52]	; 0x34
 8011dfe:	4770      	bx	lr

08011e00 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8011e00:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011e02:	4770      	bx	lr

08011e04 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8011e04:	4770      	bx	lr

08011e06 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 8011e06:	4608      	mov	r0, r1
 8011e08:	4770      	bx	lr

08011e0a <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4770      	bx	lr

08011e0e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8011e0e:	b530      	push	{r4, r5, lr}
 8011e10:	460d      	mov	r5, r1
 8011e12:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8011e14:	8949      	ldrh	r1, [r1, #10]
 8011e16:	b085      	sub	sp, #20
 8011e18:	4604      	mov	r4, r0
 8011e1a:	1ac9      	subs	r1, r1, r3
 8011e1c:	6803      	ldr	r3, [r0, #0]
 8011e1e:	f10d 0206 	add.w	r2, sp, #6
 8011e22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011e26:	b209      	sxth	r1, r1
 8011e28:	4798      	blx	r3
 8011e2a:	b1a0      	cbz	r0, 8011e56 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e2c:	792b      	ldrb	r3, [r5, #4]
 8011e2e:	b993      	cbnz	r3, 8011e56 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e30:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8011e34:	b178      	cbz	r0, 8011e56 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e36:	6803      	ldr	r3, [r0, #0]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	4798      	blx	r3
 8011e3c:	b158      	cbz	r0, 8011e56 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e3e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011e42:	aa02      	add	r2, sp, #8
 8011e44:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8011e48:	4621      	mov	r1, r4
 8011e4a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011e4e:	9503      	str	r5, [sp, #12]
 8011e50:	6803      	ldr	r3, [r0, #0]
 8011e52:	689b      	ldr	r3, [r3, #8]
 8011e54:	4798      	blx	r3
 8011e56:	b005      	add	sp, #20
 8011e58:	bd30      	pop	{r4, r5, pc}

08011e5a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8011e5a:	428a      	cmp	r2, r1
 8011e5c:	bfbc      	itt	lt
 8011e5e:	460b      	movlt	r3, r1
 8011e60:	4611      	movlt	r1, r2
 8011e62:	b510      	push	{r4, lr}
 8011e64:	bfb8      	it	lt
 8011e66:	461a      	movlt	r2, r3
 8011e68:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	428b      	cmp	r3, r1
 8011e70:	d103      	bne.n	8011e7a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8011e72:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d011      	beq.n	8011e9e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8011e7a:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8011e7e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8011e82:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 8011e86:	f005 f9b0 	bl	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8011e8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011e8e:	f005 f9ac 	bl	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8011e92:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8011e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e9a:	f005 b9a6 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8011e9e:	bd10      	pop	{r4, pc}

08011ea0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8011ea0:	428a      	cmp	r2, r1
 8011ea2:	bfbc      	itt	lt
 8011ea4:	460b      	movlt	r3, r1
 8011ea6:	4611      	movlt	r1, r2
 8011ea8:	b510      	push	{r4, lr}
 8011eaa:	bfb8      	it	lt
 8011eac:	461a      	movlt	r2, r3
 8011eae:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	428b      	cmp	r3, r1
 8011eb6:	d103      	bne.n	8011ec0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8011eb8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d011      	beq.n	8011ee4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8011ec0:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8011ec4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8011ec8:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8011ecc:	f005 f98d 	bl	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8011ed0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011ed4:	f005 f989 	bl	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8011ed8:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8011edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ee0:	f005 b983 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 8011ee4:	bd10      	pop	{r4, pc}

08011ee6 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	3038      	adds	r0, #56	; 0x38
 8011eea:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 8011eee:	f005 b97c 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>

08011ef2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8011ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8011efa:	4605      	mov	r5, r0
 8011efc:	4688      	mov	r8, r1
 8011efe:	4617      	mov	r7, r2
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d03e      	beq.n	8011f82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011f04:	6803      	ldr	r3, [r0, #0]
 8011f06:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8011f0a:	4798      	blx	r3
 8011f0c:	682b      	ldr	r3, [r5, #0]
 8011f0e:	4604      	mov	r4, r0
 8011f10:	4628      	mov	r0, r5
 8011f12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011f16:	4798      	blx	r3
 8011f18:	4284      	cmp	r4, r0
 8011f1a:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 8011f1e:	bfc2      	ittt	gt
 8011f20:	4623      	movgt	r3, r4
 8011f22:	4604      	movgt	r4, r0
 8011f24:	4618      	movgt	r0, r3
 8011f26:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8011f2a:	42b3      	cmp	r3, r6
 8011f2c:	da29      	bge.n	8011f82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011f2e:	42b0      	cmp	r0, r6
 8011f30:	bfa8      	it	ge
 8011f32:	4630      	movge	r0, r6
 8011f34:	2800      	cmp	r0, #0
 8011f36:	db24      	blt.n	8011f82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011f38:	f1b8 0f00 	cmp.w	r8, #0
 8011f3c:	d11e      	bne.n	8011f7c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 8011f3e:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8011f42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011f46:	460c      	mov	r4, r1
 8011f48:	009a      	lsls	r2, r3, #2
 8011f4a:	4298      	cmp	r0, r3
 8011f4c:	dd0b      	ble.n	8011f66 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 8011f4e:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 8011f52:	3301      	adds	r3, #1
 8011f54:	58b6      	ldr	r6, [r6, r2]
 8011f56:	3204      	adds	r2, #4
 8011f58:	42b1      	cmp	r1, r6
 8011f5a:	bfa8      	it	ge
 8011f5c:	4631      	movge	r1, r6
 8011f5e:	42b4      	cmp	r4, r6
 8011f60:	bfb8      	it	lt
 8011f62:	4634      	movlt	r4, r6
 8011f64:	e7f1      	b.n	8011f4a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 8011f66:	1bc9      	subs	r1, r1, r7
 8011f68:	193a      	adds	r2, r7, r4
 8011f6a:	4291      	cmp	r1, r2
 8011f6c:	d009      	beq.n	8011f82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011f6e:	682b      	ldr	r3, [r5, #0]
 8011f70:	4628      	mov	r0, r5
 8011f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7a:	4718      	bx	r3
 8011f7c:	427c      	negs	r4, r7
 8011f7e:	4639      	mov	r1, r7
 8011f80:	e7e2      	b.n	8011f48 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8011f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f86 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8011f86:	b530      	push	{r4, r5, lr}
 8011f88:	790b      	ldrb	r3, [r1, #4]
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	460d      	mov	r5, r1
 8011f90:	2b02      	cmp	r3, #2
 8011f92:	d020      	beq.n	8011fd6 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011f94:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8011f96:	f10d 0206 	add.w	r2, sp, #6
 8011f9a:	88c9      	ldrh	r1, [r1, #6]
 8011f9c:	1ac9      	subs	r1, r1, r3
 8011f9e:	6803      	ldr	r3, [r0, #0]
 8011fa0:	b209      	sxth	r1, r1
 8011fa2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011fa6:	4798      	blx	r3
 8011fa8:	b1a8      	cbz	r0, 8011fd6 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011faa:	792b      	ldrb	r3, [r5, #4]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d812      	bhi.n	8011fd6 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011fb0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8011fb4:	b178      	cbz	r0, 8011fd6 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011fb6:	6803      	ldr	r3, [r0, #0]
 8011fb8:	68db      	ldr	r3, [r3, #12]
 8011fba:	4798      	blx	r3
 8011fbc:	b158      	cbz	r0, 8011fd6 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011fbe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011fc2:	aa02      	add	r2, sp, #8
 8011fc4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8011fc8:	4621      	mov	r1, r4
 8011fca:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011fce:	9503      	str	r5, [sp, #12]
 8011fd0:	6803      	ldr	r3, [r0, #0]
 8011fd2:	689b      	ldr	r3, [r3, #8]
 8011fd4:	4798      	blx	r3
 8011fd6:	b005      	add	sp, #20
 8011fd8:	bd30      	pop	{r4, r5, pc}

08011fda <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8011fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fde:	4604      	mov	r4, r0
 8011fe0:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8011fe4:	4690      	mov	r8, r2
 8011fe6:	461f      	mov	r7, r3
 8011fe8:	9e06      	ldr	r6, [sp, #24]
 8011fea:	b928      	cbnz	r0, 8011ff8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8011fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ff0:	8033      	strh	r3, [r6, #0]
 8011ff2:	803b      	strh	r3, [r7, #0]
 8011ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8011ffc:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8012000:	1883      	adds	r3, r0, r2
 8012002:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8012006:	1ad2      	subs	r2, r2, r3
 8012008:	b212      	sxth	r2, r2
 801200a:	2a01      	cmp	r2, #1
 801200c:	dc07      	bgt.n	801201e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 801200e:	2300      	movs	r3, #0
 8012010:	803b      	strh	r3, [r7, #0]
 8012012:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8012016:	3b01      	subs	r3, #1
 8012018:	8033      	strh	r3, [r6, #0]
 801201a:	2001      	movs	r0, #1
 801201c:	e7ea      	b.n	8011ff4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801201e:	1a08      	subs	r0, r1, r0
 8012020:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8012024:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8012028:	0140      	lsls	r0, r0, #5
 801202a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801202c:	1a5b      	subs	r3, r3, r1
 801202e:	d459      	bmi.n	80120e4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8012030:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012034:	fb93 f1f5 	sdiv	r1, r3, r5
 8012038:	2302      	movs	r3, #2
 801203a:	fb91 f1f3 	sdiv	r1, r1, r3
 801203e:	3a01      	subs	r2, #1
 8012040:	f005 fa9a 	bl	8017578 <_ZN8touchgfx6muldivElll>
 8012044:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8012048:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 801204c:	2900      	cmp	r1, #0
 801204e:	db55      	blt.n	80120fc <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8012050:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8012054:	2502      	movs	r5, #2
 8012056:	fb93 f3fc 	sdiv	r3, r3, ip
 801205a:	fb93 f3f5 	sdiv	r3, r3, r5
 801205e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8012062:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8012066:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 801206a:	1a52      	subs	r2, r2, r1
 801206c:	eba8 0003 	sub.w	r0, r8, r3
 8012070:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8012074:	d44e      	bmi.n	8012114 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8012076:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 801207a:	fb92 f1fc 	sdiv	r1, r2, ip
 801207e:	2202      	movs	r2, #2
 8012080:	fb91 f1f2 	sdiv	r1, r1, r2
 8012084:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8012088:	4413      	add	r3, r2
 801208a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 801208e:	1ad2      	subs	r2, r2, r3
 8012090:	b212      	sxth	r2, r2
 8012092:	3a01      	subs	r2, #1
 8012094:	f005 fa70 	bl	8017578 <_ZN8touchgfx6muldivElll>
 8012098:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801209c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801209e:	2b00      	cmp	r3, #0
 80120a0:	db44      	blt.n	801212c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 80120a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80120a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80120aa:	2202      	movs	r2, #2
 80120ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80120b0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80120b4:	2020      	movs	r0, #32
 80120b6:	429d      	cmp	r5, r3
 80120b8:	bfde      	ittt	le
 80120ba:	461a      	movle	r2, r3
 80120bc:	462b      	movle	r3, r5
 80120be:	4615      	movle	r5, r2
 80120c0:	b21b      	sxth	r3, r3
 80120c2:	2d00      	cmp	r5, #0
 80120c4:	bfaa      	itet	ge
 80120c6:	351f      	addge	r5, #31
 80120c8:	fb95 f5f0 	sdivlt	r5, r5, r0
 80120cc:	116d      	asrge	r5, r5, #5
 80120ce:	fb93 f3f0 	sdiv	r3, r3, r0
 80120d2:	b22d      	sxth	r5, r5
 80120d4:	803b      	strh	r3, [r7, #0]
 80120d6:	2d00      	cmp	r5, #0
 80120d8:	8035      	strh	r5, [r6, #0]
 80120da:	da33      	bge.n	8012144 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 80120dc:	2000      	movs	r0, #0
 80120de:	8030      	strh	r0, [r6, #0]
 80120e0:	8038      	strh	r0, [r7, #0]
 80120e2:	e787      	b.n	8011ff4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80120e4:	f06f 0101 	mvn.w	r1, #1
 80120e8:	fb01 5303 	mla	r3, r1, r3, r5
 80120ec:	1e59      	subs	r1, r3, #1
 80120ee:	2302      	movs	r3, #2
 80120f0:	fb91 f1f5 	sdiv	r1, r1, r5
 80120f4:	fb91 f1f3 	sdiv	r1, r1, r3
 80120f8:	4249      	negs	r1, r1
 80120fa:	e7a0      	b.n	801203e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 80120fc:	f06f 0301 	mvn.w	r3, #1
 8012100:	2502      	movs	r5, #2
 8012102:	fb03 c301 	mla	r3, r3, r1, ip
 8012106:	3b01      	subs	r3, #1
 8012108:	fb93 f3fc 	sdiv	r3, r3, ip
 801210c:	fb93 f3f5 	sdiv	r3, r3, r5
 8012110:	425b      	negs	r3, r3
 8012112:	e7a4      	b.n	801205e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8012114:	f06f 0101 	mvn.w	r1, #1
 8012118:	fb01 c202 	mla	r2, r1, r2, ip
 801211c:	1e51      	subs	r1, r2, #1
 801211e:	2202      	movs	r2, #2
 8012120:	fb91 f1fc 	sdiv	r1, r1, ip
 8012124:	fb91 f1f2 	sdiv	r1, r1, r2
 8012128:	4249      	negs	r1, r1
 801212a:	e7ab      	b.n	8012084 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 801212c:	f06f 0101 	mvn.w	r1, #1
 8012130:	fb01 2303 	mla	r3, r1, r3, r2
 8012134:	3b01      	subs	r3, #1
 8012136:	fb93 f3f2 	sdiv	r3, r3, r2
 801213a:	2202      	movs	r2, #2
 801213c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012140:	425b      	negs	r3, r3
 8012142:	e7b5      	b.n	80120b0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8012144:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012148:	f9b7 2000 	ldrsh.w	r2, [r7]
 801214c:	4293      	cmp	r3, r2
 801214e:	dc05      	bgt.n	801215c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 8012150:	3b01      	subs	r3, #1
 8012152:	2000      	movs	r0, #0
 8012154:	b21b      	sxth	r3, r3
 8012156:	8033      	strh	r3, [r6, #0]
 8012158:	803b      	strh	r3, [r7, #0]
 801215a:	e74b      	b.n	8011ff4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801215c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012160:	803a      	strh	r2, [r7, #0]
 8012162:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012166:	f9b6 2000 	ldrsh.w	r2, [r6]
 801216a:	4293      	cmp	r3, r2
 801216c:	bfdc      	itt	le
 801216e:	f103 33ff 	addle.w	r3, r3, #4294967295
 8012172:	b21a      	sxthle	r2, r3
 8012174:	8032      	strh	r2, [r6, #0]
 8012176:	e750      	b.n	801201a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

08012178 <_ZN8touchgfx9ContainerC1Ev>:
 8012178:	2101      	movs	r1, #1
 801217a:	2200      	movs	r2, #0
 801217c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012180:	4909      	ldr	r1, [pc, #36]	; (80121a8 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8012182:	8082      	strh	r2, [r0, #4]
 8012184:	80c2      	strh	r2, [r0, #6]
 8012186:	8102      	strh	r2, [r0, #8]
 8012188:	8142      	strh	r2, [r0, #10]
 801218a:	8182      	strh	r2, [r0, #12]
 801218c:	81c2      	strh	r2, [r0, #14]
 801218e:	8202      	strh	r2, [r0, #16]
 8012190:	8242      	strh	r2, [r0, #18]
 8012192:	61c2      	str	r2, [r0, #28]
 8012194:	8402      	strh	r2, [r0, #32]
 8012196:	8442      	strh	r2, [r0, #34]	; 0x22
 8012198:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801219c:	6001      	str	r1, [r0, #0]
 801219e:	6282      	str	r2, [r0, #40]	; 0x28
 80121a0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80121a4:	4770      	bx	lr
 80121a6:	bf00      	nop
 80121a8:	0802a84c 	.word	0x0802a84c

080121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 80121ac:	6800      	ldr	r0, [r0, #0]
 80121ae:	2800      	cmp	r0, #0
 80121b0:	bfbd      	ittte	lt
 80121b2:	380f      	sublt	r0, #15
 80121b4:	2320      	movlt	r3, #32
 80121b6:	fb90 f0f3 	sdivlt	r0, r0, r3
 80121ba:	3010      	addge	r0, #16
 80121bc:	bfa8      	it	ge
 80121be:	1140      	asrge	r0, r0, #5
 80121c0:	4770      	bx	lr

080121c2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 80121c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c6:	4605      	mov	r5, r0
 80121c8:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80121cc:	4688      	mov	r8, r1
 80121ce:	4691      	mov	r9, r2
 80121d0:	469a      	mov	sl, r3
 80121d2:	b360      	cbz	r0, 801222e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 80121d4:	2700      	movs	r7, #0
 80121d6:	f04f 3bff 	mov.w	fp, #4294967295
 80121da:	b23e      	sxth	r6, r7
 80121dc:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 80121e0:	42b3      	cmp	r3, r6
 80121e2:	dd23      	ble.n	801222c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 80121e4:	682b      	ldr	r3, [r5, #0]
 80121e6:	4631      	mov	r1, r6
 80121e8:	4628      	mov	r0, r5
 80121ea:	3701      	adds	r7, #1
 80121ec:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80121f0:	4798      	blx	r3
 80121f2:	9001      	str	r0, [sp, #4]
 80121f4:	a801      	add	r0, sp, #4
 80121f6:	f7ff ffd9 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80121fa:	682b      	ldr	r3, [r5, #0]
 80121fc:	eba0 0008 	sub.w	r0, r0, r8
 8012200:	4631      	mov	r1, r6
 8012202:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012206:	b204      	sxth	r4, r0
 8012208:	4628      	mov	r0, r5
 801220a:	4798      	blx	r3
 801220c:	9001      	str	r0, [sp, #4]
 801220e:	a801      	add	r0, sp, #4
 8012210:	f7ff ffcc 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012214:	eba0 0009 	sub.w	r0, r0, r9
 8012218:	fb10 f000 	smulbb	r0, r0, r0
 801221c:	fb04 0404 	mla	r4, r4, r4, r0
 8012220:	455c      	cmp	r4, fp
 8012222:	bf3c      	itt	cc
 8012224:	f8aa 6000 	strhcc.w	r6, [sl]
 8012228:	46a3      	movcc	fp, r4
 801222a:	e7d6      	b.n	80121da <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 801222c:	2001      	movs	r0, #1
 801222e:	b003      	add	sp, #12
 8012230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012234 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8012234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012238:	4604      	mov	r4, r0
 801223a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 801223e:	4688      	mov	r8, r1
 8012240:	4691      	mov	r9, r2
 8012242:	b1f8      	cbz	r0, 8012284 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 8012244:	2500      	movs	r5, #0
 8012246:	f04f 37ff 	mov.w	r7, #4294967295
 801224a:	b22e      	sxth	r6, r5
 801224c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012250:	42b3      	cmp	r3, r6
 8012252:	dd16      	ble.n	8012282 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	4631      	mov	r1, r6
 8012258:	4620      	mov	r0, r4
 801225a:	3501      	adds	r5, #1
 801225c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012260:	4798      	blx	r3
 8012262:	9001      	str	r0, [sp, #4]
 8012264:	a801      	add	r0, sp, #4
 8012266:	f7ff ffa1 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801226a:	b200      	sxth	r0, r0
 801226c:	eba0 0008 	sub.w	r0, r0, r8
 8012270:	2800      	cmp	r0, #0
 8012272:	bfb8      	it	lt
 8012274:	4240      	neglt	r0, r0
 8012276:	42b8      	cmp	r0, r7
 8012278:	bf3c      	itt	cc
 801227a:	f8a9 6000 	strhcc.w	r6, [r9]
 801227e:	4607      	movcc	r7, r0
 8012280:	e7e3      	b.n	801224a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 8012282:	2001      	movs	r0, #1
 8012284:	b003      	add	sp, #12
 8012286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801228a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801228a:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 801228e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012292:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 8012296:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 801229a:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 801229e:	4770      	bx	lr

080122a0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 80122a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122a2:	4604      	mov	r4, r0
 80122a4:	3038      	adds	r0, #56	; 0x38
 80122a6:	460d      	mov	r5, r1
 80122a8:	f7fd fe10 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80122ac:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 80122b0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80122b4:	4628      	mov	r0, r5
 80122b6:	9200      	str	r2, [sp, #0]
 80122b8:	2200      	movs	r2, #0
 80122ba:	4611      	mov	r1, r2
 80122bc:	f7f3 fa8a 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80122c0:	b003      	add	sp, #12
 80122c2:	bd30      	pop	{r4, r5, pc}

080122c4 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 80122c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122c6:	4604      	mov	r4, r0
 80122c8:	3064      	adds	r0, #100	; 0x64
 80122ca:	460d      	mov	r5, r1
 80122cc:	f7fd fdfe 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80122d0:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 80122d4:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 80122d8:	4628      	mov	r0, r5
 80122da:	9200      	str	r2, [sp, #0]
 80122dc:	2200      	movs	r2, #0
 80122de:	4611      	mov	r1, r2
 80122e0:	f7f3 fa78 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80122e4:	b003      	add	sp, #12
 80122e6:	bd30      	pop	{r4, r5, pc}

080122e8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 80122ee:	460d      	mov	r5, r1
 80122f0:	428b      	cmp	r3, r1
 80122f2:	dd08      	ble.n	8012306 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80122f4:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80122f6:	b134      	cbz	r4, 8012306 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80122f8:	6823      	ldr	r3, [r4, #0]
 80122fa:	4620      	mov	r0, r4
 80122fc:	4629      	mov	r1, r5
 80122fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012300:	4798      	blx	r3
 8012302:	69a4      	ldr	r4, [r4, #24]
 8012304:	e7f7      	b.n	80122f6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8012306:	bd38      	pop	{r3, r4, r5, pc}

08012308 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8012308:	b570      	push	{r4, r5, r6, lr}
 801230a:	4606      	mov	r6, r0
 801230c:	460d      	mov	r5, r1
 801230e:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 8012312:	b134      	cbz	r4, 8012322 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8012314:	6823      	ldr	r3, [r4, #0]
 8012316:	4620      	mov	r0, r4
 8012318:	4629      	mov	r1, r5
 801231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801231c:	4798      	blx	r3
 801231e:	69a4      	ldr	r4, [r4, #24]
 8012320:	e7f7      	b.n	8012312 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8012322:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 8012326:	b134      	cbz	r4, 8012336 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8012328:	6823      	ldr	r3, [r4, #0]
 801232a:	4620      	mov	r0, r4
 801232c:	4629      	mov	r1, r5
 801232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012330:	4798      	blx	r3
 8012332:	69a4      	ldr	r4, [r4, #24]
 8012334:	e7f7      	b.n	8012326 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8012336:	bd70      	pop	{r4, r5, r6, pc}

08012338 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4604      	mov	r4, r0
 801233c:	2500      	movs	r5, #0
 801233e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012342:	42ab      	cmp	r3, r5
 8012344:	db05      	blt.n	8012352 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8012346:	b229      	sxth	r1, r5
 8012348:	4620      	mov	r0, r4
 801234a:	f7ff ffdd 	bl	8012308 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801234e:	3501      	adds	r5, #1
 8012350:	e7f5      	b.n	801233e <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8012352:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012356:	f004 ff48 	bl	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 801235a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801235e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012362:	f004 bf42 	b.w	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>

08012366 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8012366:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012368:	4604      	mov	r4, r0
 801236a:	6e05      	ldr	r5, [r0, #96]	; 0x60
 801236c:	b15d      	cbz	r5, 8012386 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 801236e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012372:	4628      	mov	r0, r5
 8012374:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012378:	9200      	str	r2, [sp, #0]
 801237a:	2200      	movs	r2, #0
 801237c:	4611      	mov	r1, r2
 801237e:	f7f3 fa29 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012382:	69ad      	ldr	r5, [r5, #24]
 8012384:	e7f2      	b.n	801236c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8012386:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 801238a:	b15d      	cbz	r5, 80123a4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 801238c:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 8012390:	4628      	mov	r0, r5
 8012392:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 8012396:	9200      	str	r2, [sp, #0]
 8012398:	2200      	movs	r2, #0
 801239a:	4611      	mov	r1, r2
 801239c:	f7f3 fa1a 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80123a0:	69ad      	ldr	r5, [r5, #24]
 80123a2:	e7f2      	b.n	801238a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 80123a4:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 80123a8:	b15d      	cbz	r5, 80123c2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 80123aa:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 80123ae:	4628      	mov	r0, r5
 80123b0:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 80123b4:	9200      	str	r2, [sp, #0]
 80123b6:	2200      	movs	r2, #0
 80123b8:	4611      	mov	r1, r2
 80123ba:	f7f3 fa0b 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80123be:	69ad      	ldr	r5, [r5, #24]
 80123c0:	e7f2      	b.n	80123a8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 80123c2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80123c6:	b15d      	cbz	r5, 80123e0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 80123c8:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80123cc:	4628      	mov	r0, r5
 80123ce:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 80123d2:	9200      	str	r2, [sp, #0]
 80123d4:	2200      	movs	r2, #0
 80123d6:	4611      	mov	r1, r2
 80123d8:	f7f3 f9fc 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80123dc:	69ad      	ldr	r5, [r5, #24]
 80123de:	e7f2      	b.n	80123c6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 80123e0:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 80123e4:	b15d      	cbz	r5, 80123fe <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 80123e6:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 80123ea:	4628      	mov	r0, r5
 80123ec:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 80123f0:	9200      	str	r2, [sp, #0]
 80123f2:	2200      	movs	r2, #0
 80123f4:	4611      	mov	r1, r2
 80123f6:	f7f3 f9ed 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80123fa:	69ad      	ldr	r5, [r5, #24]
 80123fc:	e7f2      	b.n	80123e4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 80123fe:	6823      	ldr	r3, [r4, #0]
 8012400:	4620      	mov	r0, r4
 8012402:	695b      	ldr	r3, [r3, #20]
 8012404:	b003      	add	sp, #12
 8012406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801240a:	4718      	bx	r3

0801240c <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 801240c:	b430      	push	{r4, r5}
 801240e:	b28a      	uxth	r2, r1
 8012410:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 8012414:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8012418:	1b15      	subs	r5, r2, r4
 801241a:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 801241e:	8101      	strh	r1, [r0, #8]
 8012420:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 8012424:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8012428:	442c      	add	r4, r5
 801242a:	1b12      	subs	r2, r2, r4
 801242c:	bc30      	pop	{r4, r5}
 801242e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012432:	f7ff bf98 	b.w	8012366 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012436 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8012436:	b430      	push	{r4, r5}
 8012438:	b28a      	uxth	r2, r1
 801243a:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 801243e:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8012442:	1b15      	subs	r5, r2, r4
 8012444:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8012448:	8141      	strh	r1, [r0, #10]
 801244a:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 801244e:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8012452:	442c      	add	r4, r5
 8012454:	1b12      	subs	r2, r2, r4
 8012456:	bc30      	pop	{r4, r5}
 8012458:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 801245c:	f7ff bf83 	b.w	8012366 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012460 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8012460:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012464:	fa1f fa83 	uxth.w	sl, r3
 8012468:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 801246c:	4615      	mov	r5, r2
 801246e:	4699      	mov	r9, r3
 8012470:	fa1f f887 	uxth.w	r8, r7
 8012474:	8903      	ldrh	r3, [r0, #8]
 8012476:	4452      	add	r2, sl
 8012478:	4604      	mov	r4, r0
 801247a:	8940      	ldrh	r0, [r0, #10]
 801247c:	460e      	mov	r6, r1
 801247e:	1a9b      	subs	r3, r3, r2
 8012480:	eb08 0201 	add.w	r2, r8, r1
 8012484:	1a80      	subs	r0, r0, r2
 8012486:	b21b      	sxth	r3, r3
 8012488:	460a      	mov	r2, r1
 801248a:	4629      	mov	r1, r5
 801248c:	b200      	sxth	r0, r0
 801248e:	9000      	str	r0, [sp, #0]
 8012490:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012494:	f7f3 f99e 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012498:	2200      	movs	r2, #0
 801249a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801249e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80124a2:	4611      	mov	r1, r2
 80124a4:	9600      	str	r6, [sp, #0]
 80124a6:	f7f3 f995 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80124aa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80124ae:	2200      	movs	r2, #0
 80124b0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	462b      	mov	r3, r5
 80124b8:	4611      	mov	r1, r2
 80124ba:	f7f3 f98b 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80124be:	8921      	ldrh	r1, [r4, #8]
 80124c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80124c4:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80124c8:	eba1 010a 	sub.w	r1, r1, sl
 80124cc:	2200      	movs	r2, #0
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	464b      	mov	r3, r9
 80124d2:	b209      	sxth	r1, r1
 80124d4:	f7f3 f97e 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80124d8:	8962      	ldrh	r2, [r4, #10]
 80124da:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80124de:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80124e2:	eba2 0208 	sub.w	r2, r2, r8
 80124e6:	9700      	str	r7, [sp, #0]
 80124e8:	2100      	movs	r1, #0
 80124ea:	b212      	sxth	r2, r2
 80124ec:	f7f3 f972 	bl	80057d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80124f0:	4620      	mov	r0, r4
 80124f2:	b002      	add	sp, #8
 80124f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f8:	f7ff bf35 	b.w	8012366 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080124fc <_ZN8touchgfx17AbstractDataGraphC1Es>:
 80124fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012500:	b085      	sub	sp, #20
 8012502:	4604      	mov	r4, r0
 8012504:	2601      	movs	r6, #1
 8012506:	2500      	movs	r5, #0
 8012508:	9103      	str	r1, [sp, #12]
 801250a:	f7ff fe35 	bl	8012178 <_ZN8touchgfx9ContainerC1Ev>
 801250e:	4b2c      	ldr	r3, [pc, #176]	; (80125c0 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8012510:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8012514:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8012518:	f104 0890 	add.w	r8, r4, #144	; 0x90
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	23ff      	movs	r3, #255	; 0xff
 8012520:	4658      	mov	r0, fp
 8012522:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 8012526:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801252a:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 801252e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012532:	f7ff fe21 	bl	8012178 <_ZN8touchgfx9ContainerC1Ev>
 8012536:	4648      	mov	r0, r9
 8012538:	f7ff fe1e 	bl	8012178 <_ZN8touchgfx9ContainerC1Ev>
 801253c:	4640      	mov	r0, r8
 801253e:	f7ff fe1b 	bl	8012178 <_ZN8touchgfx9ContainerC1Ev>
 8012542:	4650      	mov	r0, sl
 8012544:	f7ff fe18 	bl	8012178 <_ZN8touchgfx9ContainerC1Ev>
 8012548:	4638      	mov	r0, r7
 801254a:	f7ff fe15 	bl	8012178 <_ZN8touchgfx9ContainerC1Ev>
 801254e:	9903      	ldr	r1, [sp, #12]
 8012550:	4620      	mov	r0, r4
 8012552:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8012556:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 801255a:	4659      	mov	r1, fp
 801255c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8012560:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8012564:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8012568:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 801256c:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8012570:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012574:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012578:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801257c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8012580:	f7fd fca4 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012584:	4651      	mov	r1, sl
 8012586:	4620      	mov	r0, r4
 8012588:	f7fd fca0 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801258c:	4649      	mov	r1, r9
 801258e:	4620      	mov	r0, r4
 8012590:	f7fd fc9c 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012594:	4641      	mov	r1, r8
 8012596:	4620      	mov	r0, r4
 8012598:	f7fd fc98 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801259c:	4639      	mov	r1, r7
 801259e:	4620      	mov	r0, r4
 80125a0:	f7fd fc94 	bl	800fecc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80125a4:	4620      	mov	r0, r4
 80125a6:	9500      	str	r5, [sp, #0]
 80125a8:	462b      	mov	r3, r5
 80125aa:	462a      	mov	r2, r5
 80125ac:	4629      	mov	r1, r5
 80125ae:	f7ff ff57 	bl	8012460 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 80125b2:	4620      	mov	r0, r4
 80125b4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80125b8:	b005      	add	sp, #20
 80125ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125be:	bf00      	nop
 80125c0:	0802ad20 	.word	0x0802ad20

080125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 80125c4:	4291      	cmp	r1, r2
 80125c6:	4613      	mov	r3, r2
 80125c8:	d003      	beq.n	80125d2 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 80125ca:	460a      	mov	r2, r1
 80125cc:	4619      	mov	r1, r3
 80125ce:	f004 bfd3 	b.w	8017578 <_ZN8touchgfx6muldivElll>
 80125d2:	4770      	bx	lr

080125d4 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 80125d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d8:	6803      	ldr	r3, [r0, #0]
 80125da:	460d      	mov	r5, r1
 80125dc:	4604      	mov	r4, r0
 80125de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125e2:	4798      	blx	r3
 80125e4:	42a8      	cmp	r0, r5
 80125e6:	4606      	mov	r6, r0
 80125e8:	d024      	beq.n	8012634 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 80125ea:	6823      	ldr	r3, [r4, #0]
 80125ec:	4601      	mov	r1, r0
 80125ee:	462a      	mov	r2, r5
 80125f0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80125f4:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 80125f8:	f7ff ffe4 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80125fc:	4680      	mov	r8, r0
 80125fe:	462a      	mov	r2, r5
 8012600:	4631      	mov	r1, r6
 8012602:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8012606:	f7ff ffdd 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801260a:	4641      	mov	r1, r8
 801260c:	4602      	mov	r2, r0
 801260e:	4620      	mov	r0, r4
 8012610:	47b8      	blx	r7
 8012612:	462a      	mov	r2, r5
 8012614:	4631      	mov	r1, r6
 8012616:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 801261a:	f7ff ffd3 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801261e:	462a      	mov	r2, r5
 8012620:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8012624:	4631      	mov	r1, r6
 8012626:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 801262a:	f7ff ffcb 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801262e:	6325      	str	r5, [r4, #48]	; 0x30
 8012630:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 8012634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012638 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8012638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801263c:	4604      	mov	r4, r0
 801263e:	460f      	mov	r7, r1
 8012640:	b1b2      	cbz	r2, 8012670 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012642:	6803      	ldr	r3, [r0, #0]
 8012644:	2600      	movs	r6, #0
 8012646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801264a:	4798      	blx	r3
 801264c:	4681      	mov	r9, r0
 801264e:	b235      	sxth	r5, r6
 8012650:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012654:	3601      	adds	r6, #1
 8012656:	42ab      	cmp	r3, r5
 8012658:	dd0a      	ble.n	8012670 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 801265a:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 801265e:	463a      	mov	r2, r7
 8012660:	4649      	mov	r1, r9
 8012662:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8012666:	f7ff ffad 	bl	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801266a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 801266e:	e7ee      	b.n	801264e <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8012670:	6367      	str	r7, [r4, #52]	; 0x34
 8012672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012676 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012676:	b570      	push	{r4, r5, r6, lr}
 8012678:	6803      	ldr	r3, [r0, #0]
 801267a:	4604      	mov	r4, r0
 801267c:	460d      	mov	r5, r1
 801267e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8012682:	4798      	blx	r3
 8012684:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8012688:	4629      	mov	r1, r5
 801268a:	4620      	mov	r0, r4
 801268c:	3301      	adds	r3, #1
 801268e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8012692:	6823      	ldr	r3, [r4, #0]
 8012694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012698:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801269c:	4718      	bx	r3

0801269e <_ZN8touchgfx16GraphElementLineD1Ev>:
 801269e:	4770      	bx	lr

080126a0 <_ZN8touchgfx16GraphElementLineD0Ev>:
 80126a0:	b510      	push	{r4, lr}
 80126a2:	4604      	mov	r4, r0
 80126a4:	2130      	movs	r1, #48	; 0x30
 80126a6:	f013 fa24 	bl	8025af2 <_ZdlPvj>
 80126aa:	4620      	mov	r0, r4
 80126ac:	bd10      	pop	{r4, pc}

080126ae <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80126ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b0:	4604      	mov	r4, r0
 80126b2:	4608      	mov	r0, r1
 80126b4:	460d      	mov	r5, r1
 80126b6:	f7fd fdd0 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 80126ba:	b978      	cbnz	r0, 80126dc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80126bc:	4620      	mov	r0, r4
 80126be:	f7fd fdcc 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 80126c2:	f9b5 6000 	ldrsh.w	r6, [r5]
 80126c6:	b150      	cbz	r0, 80126de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80126c8:	8026      	strh	r6, [r4, #0]
 80126ca:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80126ce:	8063      	strh	r3, [r4, #2]
 80126d0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80126d4:	80a3      	strh	r3, [r4, #4]
 80126d6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80126da:	80e3      	strh	r3, [r4, #6]
 80126dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126de:	f9b4 1000 	ldrsh.w	r1, [r4]
 80126e2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80126e6:	42b1      	cmp	r1, r6
 80126e8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80126ec:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80126f0:	460f      	mov	r7, r1
 80126f2:	88ed      	ldrh	r5, [r5, #6]
 80126f4:	bfa8      	it	ge
 80126f6:	4637      	movge	r7, r6
 80126f8:	4293      	cmp	r3, r2
 80126fa:	4618      	mov	r0, r3
 80126fc:	4466      	add	r6, ip
 80126fe:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012702:	bfa8      	it	ge
 8012704:	4610      	movge	r0, r2
 8012706:	442a      	add	r2, r5
 8012708:	88e5      	ldrh	r5, [r4, #6]
 801270a:	4461      	add	r1, ip
 801270c:	b236      	sxth	r6, r6
 801270e:	8027      	strh	r7, [r4, #0]
 8012710:	442b      	add	r3, r5
 8012712:	b209      	sxth	r1, r1
 8012714:	b212      	sxth	r2, r2
 8012716:	8060      	strh	r0, [r4, #2]
 8012718:	b21b      	sxth	r3, r3
 801271a:	428e      	cmp	r6, r1
 801271c:	bfac      	ite	ge
 801271e:	ebc7 0106 	rsbge	r1, r7, r6
 8012722:	ebc7 0101 	rsblt	r1, r7, r1
 8012726:	429a      	cmp	r2, r3
 8012728:	bfac      	ite	ge
 801272a:	ebc0 0202 	rsbge	r2, r0, r2
 801272e:	ebc0 0203 	rsblt	r2, r0, r3
 8012732:	80a1      	strh	r1, [r4, #4]
 8012734:	80e2      	strh	r2, [r4, #6]
 8012736:	e7d1      	b.n	80126dc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08012738 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	6803      	ldr	r3, [r0, #0]
 801273e:	b093      	sub	sp, #76	; 0x4c
 8012740:	6945      	ldr	r5, [r0, #20]
 8012742:	4604      	mov	r4, r0
 8012744:	460f      	mov	r7, r1
 8012746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012748:	2d00      	cmp	r5, #0
 801274a:	f000 81ad 	beq.w	8012aa8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 801274e:	696d      	ldr	r5, [r5, #20]
 8012750:	4798      	blx	r3
 8012752:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012756:	2b00      	cmp	r3, #0
 8012758:	d077      	beq.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801275a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801275e:	fb13 f000 	smulbb	r0, r3, r0
 8012762:	b283      	uxth	r3, r0
 8012764:	1c58      	adds	r0, r3, #1
 8012766:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801276a:	1200      	asrs	r0, r0, #8
 801276c:	d06d      	beq.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801276e:	b2c3      	uxtb	r3, r0
 8012770:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012774:	462a      	mov	r2, r5
 8012776:	4621      	mov	r1, r4
 8012778:	9308      	str	r3, [sp, #32]
 801277a:	4640      	mov	r0, r8
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	ae0e      	add	r6, sp, #56	; 0x38
 8012780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012784:	4798      	blx	r3
 8012786:	e898 0003 	ldmia.w	r8, {r0, r1}
 801278a:	e886 0003 	stmia.w	r6, {r0, r1}
 801278e:	4639      	mov	r1, r7
 8012790:	4630      	mov	r0, r6
 8012792:	f7fd fd1f 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	4629      	mov	r1, r5
 801279a:	4620      	mov	r0, r4
 801279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127a0:	4798      	blx	r3
 80127a2:	6823      	ldr	r3, [r4, #0]
 80127a4:	4607      	mov	r7, r0
 80127a6:	4629      	mov	r1, r5
 80127a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127ac:	4620      	mov	r0, r4
 80127ae:	4798      	blx	r3
 80127b0:	4681      	mov	r9, r0
 80127b2:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80127b6:	4629      	mov	r1, r5
 80127b8:	0103      	lsls	r3, r0, #4
 80127ba:	4620      	mov	r0, r4
 80127bc:	9309      	str	r3, [sp, #36]	; 0x24
 80127be:	6823      	ldr	r3, [r4, #0]
 80127c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80127c4:	4798      	blx	r3
 80127c6:	4629      	mov	r1, r5
 80127c8:	b203      	sxth	r3, r0
 80127ca:	4620      	mov	r0, r4
 80127cc:	9306      	str	r3, [sp, #24]
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80127d4:	4798      	blx	r3
 80127d6:	2f00      	cmp	r7, #0
 80127d8:	b203      	sxth	r3, r0
 80127da:	9307      	str	r3, [sp, #28]
 80127dc:	d138      	bne.n	8012850 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 80127de:	f1b9 0f00 	cmp.w	r9, #0
 80127e2:	d132      	bne.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80127e4:	6823      	ldr	r3, [r4, #0]
 80127e6:	464a      	mov	r2, r9
 80127e8:	4629      	mov	r1, r5
 80127ea:	4620      	mov	r0, r4
 80127ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80127f0:	4798      	blx	r3
 80127f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f4:	1ac0      	subs	r0, r0, r3
 80127f6:	9010      	str	r0, [sp, #64]	; 0x40
 80127f8:	4640      	mov	r0, r8
 80127fa:	f7ff fcd7 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	4607      	mov	r7, r0
 8012802:	4629      	mov	r1, r5
 8012804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012808:	4620      	mov	r0, r4
 801280a:	4798      	blx	r3
 801280c:	1a38      	subs	r0, r7, r0
 801280e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012812:	fa0f f880 	sxth.w	r8, r0
 8012816:	eb13 0f08 	cmn.w	r3, r8
 801281a:	d416      	bmi.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801281c:	6823      	ldr	r3, [r4, #0]
 801281e:	4629      	mov	r1, r5
 8012820:	4620      	mov	r0, r4
 8012822:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012826:	4798      	blx	r3
 8012828:	4580      	cmp	r8, r0
 801282a:	da0e      	bge.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801282c:	9a08      	ldr	r2, [sp, #32]
 801282e:	b23f      	sxth	r7, r7
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	4631      	mov	r1, r6
 8012834:	9202      	str	r2, [sp, #8]
 8012836:	4620      	mov	r0, r4
 8012838:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801283c:	9700      	str	r7, [sp, #0]
 801283e:	9201      	str	r2, [sp, #4]
 8012840:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012848:	47a8      	blx	r5
 801284a:	b013      	add	sp, #76	; 0x4c
 801284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012850:	ddfb      	ble.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012852:	6823      	ldr	r3, [r4, #0]
 8012854:	4629      	mov	r1, r5
 8012856:	4620      	mov	r0, r4
 8012858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801285c:	4798      	blx	r3
 801285e:	6823      	ldr	r3, [r4, #0]
 8012860:	4683      	mov	fp, r0
 8012862:	4629      	mov	r1, r5
 8012864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012868:	4620      	mov	r0, r4
 801286a:	4798      	blx	r3
 801286c:	eba0 030b 	sub.w	r3, r0, fp
 8012870:	4680      	mov	r8, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	bfb8      	it	lt
 8012876:	425b      	neglt	r3, r3
 8012878:	fb93 f3f7 	sdiv	r3, r3, r7
 801287c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012880:	dce3      	bgt.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	465a      	mov	r2, fp
 8012886:	4629      	mov	r1, r5
 8012888:	4620      	mov	r0, r4
 801288a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801288e:	4798      	blx	r3
 8012890:	6823      	ldr	r3, [r4, #0]
 8012892:	4606      	mov	r6, r0
 8012894:	4642      	mov	r2, r8
 8012896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801289a:	4629      	mov	r1, r5
 801289c:	4620      	mov	r0, r4
 801289e:	4798      	blx	r3
 80128a0:	42b0      	cmp	r0, r6
 80128a2:	bfa2      	ittt	ge
 80128a4:	4643      	movge	r3, r8
 80128a6:	46d8      	movge	r8, fp
 80128a8:	469b      	movge	fp, r3
 80128aa:	fb98 f6f7 	sdiv	r6, r8, r7
 80128ae:	fb9b f2f7 	sdiv	r2, fp, r7
 80128b2:	45d8      	cmp	r8, fp
 80128b4:	bfac      	ite	ge
 80128b6:	f04f 33ff 	movge.w	r3, #4294967295
 80128ba:	2301      	movlt	r3, #1
 80128bc:	1af6      	subs	r6, r6, r3
 80128be:	441a      	add	r2, r3
 80128c0:	4296      	cmp	r6, r2
 80128c2:	bfac      	ite	ge
 80128c4:	f04f 3aff 	movge.w	sl, #4294967295
 80128c8:	f04f 0a01 	movlt.w	sl, #1
 80128cc:	f1b9 0f00 	cmp.w	r9, #0
 80128d0:	d13e      	bne.n	8012950 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 80128d2:	fb07 fb0a 	mul.w	fp, r7, sl
 80128d6:	eb0a 0802 	add.w	r8, sl, r2
 80128da:	4377      	muls	r7, r6
 80128dc:	45b0      	cmp	r8, r6
 80128de:	d0b4      	beq.n	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	463a      	mov	r2, r7
 80128e4:	4629      	mov	r1, r5
 80128e6:	4620      	mov	r0, r4
 80128e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80128ec:	4798      	blx	r3
 80128ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f0:	1ac0      	subs	r0, r0, r3
 80128f2:	9010      	str	r0, [sp, #64]	; 0x40
 80128f4:	a810      	add	r0, sp, #64	; 0x40
 80128f6:	f7ff fc59 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128fa:	6823      	ldr	r3, [r4, #0]
 80128fc:	4681      	mov	r9, r0
 80128fe:	4629      	mov	r1, r5
 8012900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012904:	4620      	mov	r0, r4
 8012906:	4798      	blx	r3
 8012908:	eba9 0000 	sub.w	r0, r9, r0
 801290c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012910:	b203      	sxth	r3, r0
 8012912:	42da      	cmn	r2, r3
 8012914:	9304      	str	r3, [sp, #16]
 8012916:	d418      	bmi.n	801294a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8012918:	6822      	ldr	r2, [r4, #0]
 801291a:	4629      	mov	r1, r5
 801291c:	4620      	mov	r0, r4
 801291e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012922:	4790      	blx	r2
 8012924:	9b04      	ldr	r3, [sp, #16]
 8012926:	4283      	cmp	r3, r0
 8012928:	da0f      	bge.n	801294a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 801292a:	9b08      	ldr	r3, [sp, #32]
 801292c:	a90e      	add	r1, sp, #56	; 0x38
 801292e:	6822      	ldr	r2, [r4, #0]
 8012930:	4620      	mov	r0, r4
 8012932:	9302      	str	r3, [sp, #8]
 8012934:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012938:	9301      	str	r3, [sp, #4]
 801293a:	fa0f f389 	sxth.w	r3, r9
 801293e:	9300      	str	r3, [sp, #0]
 8012940:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 8012944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012948:	47c8      	blx	r9
 801294a:	4456      	add	r6, sl
 801294c:	445f      	add	r7, fp
 801294e:	e7c5      	b.n	80128dc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8012950:	fb98 f8f9 	sdiv	r8, r8, r9
 8012954:	eba8 0203 	sub.w	r2, r8, r3
 8012958:	4629      	mov	r1, r5
 801295a:	4620      	mov	r0, r4
 801295c:	9204      	str	r2, [sp, #16]
 801295e:	fb9b f8f9 	sdiv	r8, fp, r9
 8012962:	4498      	add	r8, r3
 8012964:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8012968:	4542      	cmp	r2, r8
 801296a:	bfac      	ite	ge
 801296c:	f04f 33ff 	movge.w	r3, #4294967295
 8012970:	2301      	movlt	r3, #1
 8012972:	fb02 f209 	mul.w	r2, r2, r9
 8012976:	930a      	str	r3, [sp, #40]	; 0x28
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801297e:	4798      	blx	r3
 8012980:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8012984:	4658      	mov	r0, fp
 8012986:	f7ff fc11 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801298a:	fb06 f207 	mul.w	r2, r6, r7
 801298e:	b203      	sxth	r3, r0
 8012990:	4629      	mov	r1, r5
 8012992:	4620      	mov	r0, r4
 8012994:	9305      	str	r3, [sp, #20]
 8012996:	6823      	ldr	r3, [r4, #0]
 8012998:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801299c:	4798      	blx	r3
 801299e:	9010      	str	r0, [sp, #64]	; 0x40
 80129a0:	4658      	mov	r0, fp
 80129a2:	f7ff fc03 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129a6:	fb07 f20a 	mul.w	r2, r7, sl
 80129aa:	b203      	sxth	r3, r0
 80129ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80129ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129b0:	4442      	add	r2, r8
 80129b2:	920c      	str	r2, [sp, #48]	; 0x30
 80129b4:	9a05      	ldr	r2, [sp, #20]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	dc16      	bgt.n	80129e8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 80129ba:	eb06 080a 	add.w	r8, r6, sl
 80129be:	fb07 f808 	mul.w	r8, r7, r8
 80129c2:	9a05      	ldr	r2, [sp, #20]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	db54      	blt.n	8012a72 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 80129c8:	6823      	ldr	r3, [r4, #0]
 80129ca:	4642      	mov	r2, r8
 80129cc:	4629      	mov	r1, r5
 80129ce:	4620      	mov	r0, r4
 80129d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80129d4:	4456      	add	r6, sl
 80129d6:	4798      	blx	r3
 80129d8:	9010      	str	r0, [sp, #64]	; 0x40
 80129da:	4658      	mov	r0, fp
 80129dc:	f7ff fbe6 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80129e2:	b203      	sxth	r3, r0
 80129e4:	4490      	add	r8, r2
 80129e6:	e7ec      	b.n	80129c2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	fb07 f206 	mul.w	r2, r7, r6
 80129ee:	4629      	mov	r1, r5
 80129f0:	4620      	mov	r0, r4
 80129f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80129f6:	4798      	blx	r3
 80129f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fa:	1ac0      	subs	r0, r0, r3
 80129fc:	9010      	str	r0, [sp, #64]	; 0x40
 80129fe:	4658      	mov	r0, fp
 8012a00:	f7ff fbd4 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a04:	6823      	ldr	r3, [r4, #0]
 8012a06:	4680      	mov	r8, r0
 8012a08:	4629      	mov	r1, r5
 8012a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012a0e:	4620      	mov	r0, r4
 8012a10:	4798      	blx	r3
 8012a12:	eba8 0000 	sub.w	r0, r8, r0
 8012a16:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012a1a:	b203      	sxth	r3, r0
 8012a1c:	42da      	cmn	r2, r3
 8012a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8012a20:	d418      	bmi.n	8012a54 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012a22:	6822      	ldr	r2, [r4, #0]
 8012a24:	4629      	mov	r1, r5
 8012a26:	4620      	mov	r0, r4
 8012a28:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012a2c:	4790      	blx	r2
 8012a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a30:	4283      	cmp	r3, r0
 8012a32:	da0f      	bge.n	8012a54 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012a34:	9b08      	ldr	r3, [sp, #32]
 8012a36:	a90e      	add	r1, sp, #56	; 0x38
 8012a38:	6822      	ldr	r2, [r4, #0]
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	9302      	str	r3, [sp, #8]
 8012a3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012a42:	9301      	str	r3, [sp, #4]
 8012a44:	fa0f f388 	sxth.w	r3, r8
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 8012a4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012a52:	47c0      	blx	r8
 8012a54:	6823      	ldr	r3, [r4, #0]
 8012a56:	4456      	add	r6, sl
 8012a58:	4629      	mov	r1, r5
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012a60:	fb06 f207 	mul.w	r2, r6, r7
 8012a64:	4798      	blx	r3
 8012a66:	9010      	str	r0, [sp, #64]	; 0x40
 8012a68:	4658      	mov	r0, fp
 8012a6a:	f7ff fb9f 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a6e:	b203      	sxth	r3, r0
 8012a70:	e7a0      	b.n	80129b4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a74:	930d      	str	r3, [sp, #52]	; 0x34
 8012a76:	9b04      	ldr	r3, [sp, #16]
 8012a78:	4413      	add	r3, r2
 8012a7a:	9304      	str	r3, [sp, #16]
 8012a7c:	9a04      	ldr	r2, [sp, #16]
 8012a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a80:	4293      	cmp	r3, r2
 8012a82:	f43f aee2 	beq.w	801284a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012a86:	9b04      	ldr	r3, [sp, #16]
 8012a88:	4629      	mov	r1, r5
 8012a8a:	6822      	ldr	r2, [r4, #0]
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 8012a92:	fb03 f209 	mul.w	r2, r3, r9
 8012a96:	47c0      	blx	r8
 8012a98:	9010      	str	r0, [sp, #64]	; 0x40
 8012a9a:	4658      	mov	r0, fp
 8012a9c:	f7ff fb86 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012aa0:	b203      	sxth	r3, r0
 8012aa2:	9305      	str	r3, [sp, #20]
 8012aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aa6:	e785      	b.n	80129b4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012aa8:	4798      	blx	r3
 8012aaa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012aae:	deff      	udf	#255	; 0xff

08012ab0 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8012ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ab2:	9906      	ldr	r1, [sp, #24]
 8012ab4:	4606      	mov	r6, r0
 8012ab6:	461c      	mov	r4, r3
 8012ab8:	2020      	movs	r0, #32
 8012aba:	4291      	cmp	r1, r2
 8012abc:	bfbc      	itt	lt
 8012abe:	9206      	strlt	r2, [sp, #24]
 8012ac0:	460a      	movlt	r2, r1
 8012ac2:	9907      	ldr	r1, [sp, #28]
 8012ac4:	428b      	cmp	r3, r1
 8012ac6:	bfc4      	itt	gt
 8012ac8:	460c      	movgt	r4, r1
 8012aca:	9307      	strgt	r3, [sp, #28]
 8012acc:	fb92 f5f0 	sdiv	r5, r2, r0
 8012ad0:	fb94 f4f0 	sdiv	r4, r4, r0
 8012ad4:	a806      	add	r0, sp, #24
 8012ad6:	f7fe fdfe 	bl	80116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012ada:	4607      	mov	r7, r0
 8012adc:	a807      	add	r0, sp, #28
 8012ade:	f7fe fdfa 	bl	80116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012ae2:	1b7a      	subs	r2, r7, r5
 8012ae4:	1b00      	subs	r0, r0, r4
 8012ae6:	8035      	strh	r5, [r6, #0]
 8012ae8:	8074      	strh	r4, [r6, #2]
 8012aea:	80f0      	strh	r0, [r6, #6]
 8012aec:	4630      	mov	r0, r6
 8012aee:	80b2      	strh	r2, [r6, #4]
 8012af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012af2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8012af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012af4:	9c08      	ldr	r4, [sp, #32]
 8012af6:	2602      	movs	r6, #2
 8012af8:	4605      	mov	r5, r0
 8012afa:	3401      	adds	r4, #1
 8012afc:	fb94 f4f6 	sdiv	r4, r4, r6
 8012b00:	18a6      	adds	r6, r4, r2
 8012b02:	191f      	adds	r7, r3, r4
 8012b04:	1b12      	subs	r2, r2, r4
 8012b06:	1b1b      	subs	r3, r3, r4
 8012b08:	e9cd 6700 	strd	r6, r7, [sp]
 8012b0c:	f7ff ffd0 	bl	8012ab0 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8012b10:	4628      	mov	r0, r5
 8012b12:	b003      	add	sp, #12
 8012b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b16 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8012b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b1a:	6943      	ldr	r3, [r0, #20]
 8012b1c:	b087      	sub	sp, #28
 8012b1e:	4606      	mov	r6, r0
 8012b20:	460d      	mov	r5, r1
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d072      	beq.n	8012c0c <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8012b26:	695c      	ldr	r4, [r3, #20]
 8012b28:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	4620      	mov	r0, r4
 8012b30:	017f      	lsls	r7, r7, #5
 8012b32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012b36:	4798      	blx	r3
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	4680      	mov	r8, r0
 8012b3c:	4629      	mov	r1, r5
 8012b3e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012b42:	4620      	mov	r0, r4
 8012b44:	4798      	blx	r3
 8012b46:	9700      	str	r7, [sp, #0]
 8012b48:	4603      	mov	r3, r0
 8012b4a:	4642      	mov	r2, r8
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	a802      	add	r0, sp, #8
 8012b50:	f7ff ffcf 	bl	8012af2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012b54:	2d00      	cmp	r5, #0
 8012b56:	dd1b      	ble.n	8012b90 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8012b58:	f105 38ff 	add.w	r8, r5, #4294967295
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	4620      	mov	r0, r4
 8012b60:	fa0f f888 	sxth.w	r8, r8
 8012b64:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012b68:	4641      	mov	r1, r8
 8012b6a:	4798      	blx	r3
 8012b6c:	6823      	ldr	r3, [r4, #0]
 8012b6e:	4681      	mov	r9, r0
 8012b70:	4641      	mov	r1, r8
 8012b72:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012b76:	4620      	mov	r0, r4
 8012b78:	4798      	blx	r3
 8012b7a:	4631      	mov	r1, r6
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	9700      	str	r7, [sp, #0]
 8012b80:	a804      	add	r0, sp, #16
 8012b82:	464a      	mov	r2, r9
 8012b84:	f7ff ffb5 	bl	8012af2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012b88:	a904      	add	r1, sp, #16
 8012b8a:	a802      	add	r0, sp, #8
 8012b8c:	f7ff fd8f 	bl	80126ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012b90:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012b94:	3b01      	subs	r3, #1
 8012b96:	429d      	cmp	r5, r3
 8012b98:	da19      	bge.n	8012bce <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8012b9a:	3501      	adds	r5, #1
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	b22d      	sxth	r5, r5
 8012ba2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012ba6:	4629      	mov	r1, r5
 8012ba8:	4798      	blx	r3
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	4680      	mov	r8, r0
 8012bae:	4629      	mov	r1, r5
 8012bb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	4798      	blx	r3
 8012bb8:	4631      	mov	r1, r6
 8012bba:	4603      	mov	r3, r0
 8012bbc:	9700      	str	r7, [sp, #0]
 8012bbe:	a804      	add	r0, sp, #16
 8012bc0:	4642      	mov	r2, r8
 8012bc2:	f7ff ff96 	bl	8012af2 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012bc6:	a904      	add	r1, sp, #16
 8012bc8:	a802      	add	r0, sp, #8
 8012bca:	f7ff fd70 	bl	80126ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012bce:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8012bd2:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8012bd6:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8012bda:	18ca      	adds	r2, r1, r3
 8012bdc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012be0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012be4:	a904      	add	r1, sp, #16
 8012be6:	1a9b      	subs	r3, r3, r2
 8012be8:	2200      	movs	r2, #0
 8012bea:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012bee:	a802      	add	r0, sp, #8
 8012bf0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012bf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012bf8:	f7fd faec 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8012bfc:	6833      	ldr	r3, [r6, #0]
 8012bfe:	a902      	add	r1, sp, #8
 8012c00:	4630      	mov	r0, r6
 8012c02:	691b      	ldr	r3, [r3, #16]
 8012c04:	4798      	blx	r3
 8012c06:	b007      	add	sp, #28
 8012c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	deff      	udf	#255	; 0xff

08012c10 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8012c10:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	da05      	bge.n	8012c24 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	880a      	ldrh	r2, [r1, #0]
 8012c1c:	441a      	add	r2, r3
 8012c1e:	425b      	negs	r3, r3
 8012c20:	800a      	strh	r2, [r1, #0]
 8012c22:	808b      	strh	r3, [r1, #4]
 8012c24:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	da05      	bge.n	8012c38 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	884a      	ldrh	r2, [r1, #2]
 8012c30:	441a      	add	r2, r3
 8012c32:	425b      	negs	r3, r3
 8012c34:	804a      	strh	r2, [r1, #2]
 8012c36:	80cb      	strh	r3, [r1, #6]
 8012c38:	4770      	bx	lr

08012c3a <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8012c3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	460d      	mov	r5, r1
 8012c40:	6801      	ldr	r1, [r0, #0]
 8012c42:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8012c46:	9001      	str	r0, [sp, #4]
 8012c48:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8012c4c:	9000      	str	r0, [sp, #0]
 8012c4e:	a802      	add	r0, sp, #8
 8012c50:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 8012c54:	4621      	mov	r1, r4
 8012c56:	47b0      	blx	r6
 8012c58:	a902      	add	r1, sp, #8
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f7ff ffd8 	bl	8012c10 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8012c60:	a802      	add	r0, sp, #8
 8012c62:	4629      	mov	r1, r5
 8012c64:	f7fd fab6 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8012c68:	a802      	add	r0, sp, #8
 8012c6a:	f7fd faf6 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c6e:	b968      	cbnz	r0, 8012c8c <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8012c70:	6823      	ldr	r3, [r4, #0]
 8012c72:	a902      	add	r1, sp, #8
 8012c74:	4620      	mov	r0, r4
 8012c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c78:	4798      	blx	r3
 8012c7a:	f7fd fd7b 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8012c7e:	6803      	ldr	r3, [r0, #0]
 8012c80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012c82:	a902      	add	r1, sp, #8
 8012c84:	6a1d      	ldr	r5, [r3, #32]
 8012c86:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012c8a:	47a8      	blx	r5
 8012c8c:	b004      	add	sp, #16
 8012c8e:	bd70      	pop	{r4, r5, r6, pc}

08012c90 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8012c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c94:	b08b      	sub	sp, #44	; 0x2c
 8012c96:	461e      	mov	r6, r3
 8012c98:	460f      	mov	r7, r1
 8012c9a:	4615      	mov	r5, r2
 8012c9c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8012ca0:	429e      	cmp	r6, r3
 8012ca2:	9304      	str	r3, [sp, #16]
 8012ca4:	d074      	beq.n	8012d90 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8012ca6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012caa:	4631      	mov	r1, r6
 8012cac:	4610      	mov	r0, r2
 8012cae:	4634      	mov	r4, r6
 8012cb0:	015b      	lsls	r3, r3, #5
 8012cb2:	9303      	str	r3, [sp, #12]
 8012cb4:	6813      	ldr	r3, [r2, #0]
 8012cb6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012cba:	4798      	blx	r3
 8012cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8012cbe:	f843 0d10 	str.w	r0, [r3, #-16]!
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff fa72 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012cc8:	682b      	ldr	r3, [r5, #0]
 8012cca:	4631      	mov	r1, r6
 8012ccc:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012cd0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	4798      	blx	r3
 8012cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8012cda:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7ff fa64 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012ce4:	4641      	mov	r1, r8
 8012ce6:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8012cea:	4638      	mov	r0, r7
 8012cec:	464a      	mov	r2, r9
 8012cee:	f012 fd75 	bl	80257dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	9b00      	ldr	r3, [sp, #0]
 8012cfa:	441c      	add	r4, r3
 8012cfc:	682b      	ldr	r3, [r5, #0]
 8012cfe:	b224      	sxth	r4, r4
 8012d00:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012d04:	4621      	mov	r1, r4
 8012d06:	4798      	blx	r3
 8012d08:	9008      	str	r0, [sp, #32]
 8012d0a:	a808      	add	r0, sp, #32
 8012d0c:	f7ff fa4e 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012d10:	4621      	mov	r1, r4
 8012d12:	0143      	lsls	r3, r0, #5
 8012d14:	4628      	mov	r0, r5
 8012d16:	9301      	str	r3, [sp, #4]
 8012d18:	682b      	ldr	r3, [r5, #0]
 8012d1a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012d1e:	4798      	blx	r3
 8012d20:	9009      	str	r0, [sp, #36]	; 0x24
 8012d22:	a809      	add	r0, sp, #36	; 0x24
 8012d24:	f7ff fa42 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012d28:	0143      	lsls	r3, r0, #5
 8012d2a:	9302      	str	r3, [sp, #8]
 8012d2c:	9b01      	ldr	r3, [sp, #4]
 8012d2e:	eba3 0b08 	sub.w	fp, r3, r8
 8012d32:	9b02      	ldr	r3, [sp, #8]
 8012d34:	eba3 0a09 	sub.w	sl, r3, r9
 8012d38:	4658      	mov	r0, fp
 8012d3a:	4651      	mov	r1, sl
 8012d3c:	f7fe fe0c 	bl	8011958 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8012d40:	b320      	cbz	r0, 8012d8c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8012d42:	4602      	mov	r2, r0
 8012d44:	4651      	mov	r1, sl
 8012d46:	9005      	str	r0, [sp, #20]
 8012d48:	9803      	ldr	r0, [sp, #12]
 8012d4a:	f004 fc15 	bl	8017578 <_ZN8touchgfx6muldivElll>
 8012d4e:	2302      	movs	r3, #2
 8012d50:	4659      	mov	r1, fp
 8012d52:	fb90 faf3 	sdiv	sl, r0, r3
 8012d56:	9b05      	ldr	r3, [sp, #20]
 8012d58:	9803      	ldr	r0, [sp, #12]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	f004 fc0c 	bl	8017578 <_ZN8touchgfx6muldivElll>
 8012d60:	2302      	movs	r3, #2
 8012d62:	eba8 010a 	sub.w	r1, r8, sl
 8012d66:	fb90 fbf3 	sdiv	fp, r0, r3
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	eb0b 0209 	add.w	r2, fp, r9
 8012d70:	4638      	mov	r0, r7
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	4798      	blx	r3
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	9a02      	ldr	r2, [sp, #8]
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	9901      	ldr	r1, [sp, #4]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	445a      	add	r2, fp
 8012d82:	eba1 010a 	sub.w	r1, r1, sl
 8012d86:	4798      	blx	r3
 8012d88:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8012d8c:	42a6      	cmp	r6, r4
 8012d8e:	db02      	blt.n	8012d96 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8012d90:	b00b      	add	sp, #44	; 0x2c
 8012d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d96:	9b00      	ldr	r3, [sp, #0]
 8012d98:	9a04      	ldr	r2, [sp, #16]
 8012d9a:	42a2      	cmp	r2, r4
 8012d9c:	bf08      	it	eq
 8012d9e:	f04f 33ff 	moveq.w	r3, #4294967295
 8012da2:	e7a7      	b.n	8012cf4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08012da4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8012da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da8:	6943      	ldr	r3, [r0, #20]
 8012daa:	b0a2      	sub	sp, #136	; 0x88
 8012dac:	4606      	mov	r6, r0
 8012dae:	460f      	mov	r7, r1
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d06c      	beq.n	8012e8e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 8012db4:	695c      	ldr	r4, [r3, #20]
 8012db6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	dc04      	bgt.n	8012dc8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8012dbe:	2401      	movs	r4, #1
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	b022      	add	sp, #136	; 0x88
 8012dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012dcc:	ad22      	add	r5, sp, #136	; 0x88
 8012dce:	011b      	lsls	r3, r3, #4
 8012dd0:	f845 3d70 	str.w	r3, [r5, #-112]!
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	f7fe fc7e 	bl	80116d6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012dda:	8839      	ldrh	r1, [r7, #0]
 8012ddc:	88ba      	ldrh	r2, [r7, #4]
 8012dde:	b280      	uxth	r0, r0
 8012de0:	6823      	ldr	r3, [r4, #0]
 8012de2:	440a      	add	r2, r1
 8012de4:	1a09      	subs	r1, r1, r0
 8012de6:	4402      	add	r2, r0
 8012de8:	f10d 000e 	add.w	r0, sp, #14
 8012dec:	b209      	sxth	r1, r1
 8012dee:	9000      	str	r0, [sp, #0]
 8012df0:	b212      	sxth	r2, r2
 8012df2:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 8012df6:	4620      	mov	r0, r4
 8012df8:	ab03      	add	r3, sp, #12
 8012dfa:	47c0      	blx	r8
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d0de      	beq.n	8012dbe <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8012e00:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8012e04:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8012e08:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8012e0c:	18ca      	adds	r2, r1, r3
 8012e0e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012e12:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012e16:	4639      	mov	r1, r7
 8012e18:	1a9b      	subs	r3, r3, r2
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012e20:	a804      	add	r0, sp, #16
 8012e22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e26:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012e2a:	f7fd f9d3 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8012e2e:	aa04      	add	r2, sp, #16
 8012e30:	4631      	mov	r1, r6
 8012e32:	4628      	mov	r0, r5
 8012e34:	f012 fb58 	bl	80254e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8012e38:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8012e3c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012e40:	2f00      	cmp	r7, #0
 8012e42:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8012e46:	dd03      	ble.n	8012e50 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012e48:	42bb      	cmp	r3, r7
 8012e4a:	da01      	bge.n	8012e50 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012e4c:	42ba      	cmp	r2, r7
 8012e4e:	da11      	bge.n	8012e74 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8012e50:	9200      	str	r2, [sp, #0]
 8012e52:	4622      	mov	r2, r4
 8012e54:	4629      	mov	r1, r5
 8012e56:	4630      	mov	r0, r6
 8012e58:	f7ff ff1a 	bl	8012c90 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012e5c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012e60:	4628      	mov	r0, r5
 8012e62:	f012 fbfd 	bl	8025660 <_ZN8touchgfx6Canvas6renderEh>
 8012e66:	4b0b      	ldr	r3, [pc, #44]	; (8012e94 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8012e68:	4604      	mov	r4, r0
 8012e6a:	a80e      	add	r0, sp, #56	; 0x38
 8012e6c:	9306      	str	r3, [sp, #24]
 8012e6e:	f000 fdff 	bl	8013a70 <_ZN8touchgfx7OutlineD1Ev>
 8012e72:	e7a5      	b.n	8012dc0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8012e74:	1e7a      	subs	r2, r7, #1
 8012e76:	4629      	mov	r1, r5
 8012e78:	4630      	mov	r0, r6
 8012e7a:	b212      	sxth	r2, r2
 8012e7c:	9200      	str	r2, [sp, #0]
 8012e7e:	4622      	mov	r2, r4
 8012e80:	f7ff ff06 	bl	8012c90 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012e84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	463b      	mov	r3, r7
 8012e8c:	e7e1      	b.n	8012e52 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8012e8e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8012e92:	deff      	udf	#255	; 0xff
 8012e94:	0802b590 	.word	0x0802b590

08012e98 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8012e98:	4770      	bx	lr

08012e9a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8012e9a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012e9c:	b118      	cbz	r0, 8012ea6 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8012e9e:	6803      	ldr	r3, [r0, #0]
 8012ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ea4:	4718      	bx	r3
 8012ea6:	4770      	bx	lr

08012ea8 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8012ea8:	680b      	ldr	r3, [r1, #0]
 8012eaa:	4608      	mov	r0, r1
 8012eac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012eb0:	4718      	bx	r3

08012eb2 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8012eb2:	680b      	ldr	r3, [r1, #0]
 8012eb4:	4608      	mov	r0, r1
 8012eb6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8012eba:	4718      	bx	r3

08012ebc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8012ebc:	4a38      	ldr	r2, [pc, #224]	; (8012fa0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8012ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec2:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012ec4:	b087      	sub	sp, #28
 8012ec6:	8812      	ldrh	r2, [r2, #0]
 8012ec8:	4604      	mov	r4, r0
 8012eca:	4689      	mov	r9, r1
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d937      	bls.n	8012f40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012ed0:	4a34      	ldr	r2, [pc, #208]	; (8012fa4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8012ed2:	6812      	ldr	r2, [r2, #0]
 8012ed4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012ed8:	4b33      	ldr	r3, [pc, #204]	; (8012fa8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8012ee0:	f1b8 0f00 	cmp.w	r8, #0
 8012ee4:	d02c      	beq.n	8012f40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012ee6:	6803      	ldr	r3, [r0, #0]
 8012ee8:	6945      	ldr	r5, [r0, #20]
 8012eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eec:	2d00      	cmp	r5, #0
 8012eee:	d052      	beq.n	8012f96 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8012ef0:	696f      	ldr	r7, [r5, #20]
 8012ef2:	4798      	blx	r3
 8012ef4:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 8012ef8:	fb15 f000 	smulbb	r0, r5, r0
 8012efc:	b280      	uxth	r0, r0
 8012efe:	1c45      	adds	r5, r0, #1
 8012f00:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8012f04:	122d      	asrs	r5, r5, #8
 8012f06:	d01b      	beq.n	8012f40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	b2ed      	uxtb	r5, r5
 8012f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f14:	4798      	blx	r3
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	4606      	mov	r6, r0
 8012f1a:	4639      	mov	r1, r7
 8012f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f20:	4620      	mov	r0, r4
 8012f22:	4798      	blx	r3
 8012f24:	4683      	mov	fp, r0
 8012f26:	b970      	cbnz	r0, 8012f46 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012f28:	b96e      	cbnz	r6, 8012f46 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	4642      	mov	r2, r8
 8012f2e:	9600      	str	r6, [sp, #0]
 8012f30:	4649      	mov	r1, r9
 8012f32:	4620      	mov	r0, r4
 8012f34:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8012f38:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8012f3c:	463b      	mov	r3, r7
 8012f3e:	47a8      	blx	r5
 8012f40:	b007      	add	sp, #28
 8012f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f46:	2e00      	cmp	r6, #0
 8012f48:	ddfa      	ble.n	8012f40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f4a:	6823      	ldr	r3, [r4, #0]
 8012f4c:	4639      	mov	r1, r7
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f54:	4798      	blx	r3
 8012f56:	6823      	ldr	r3, [r4, #0]
 8012f58:	4682      	mov	sl, r0
 8012f5a:	4639      	mov	r1, r7
 8012f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012f60:	4620      	mov	r0, r4
 8012f62:	4798      	blx	r3
 8012f64:	4582      	cmp	sl, r0
 8012f66:	bfde      	ittt	le
 8012f68:	4603      	movle	r3, r0
 8012f6a:	4650      	movle	r0, sl
 8012f6c:	469a      	movle	sl, r3
 8012f6e:	ebaa 0300 	sub.w	r3, sl, r0
 8012f72:	fb93 f3f6 	sdiv	r3, r3, r6
 8012f76:	2b64      	cmp	r3, #100	; 0x64
 8012f78:	dce2      	bgt.n	8012f40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	4642      	mov	r2, r8
 8012f7e:	9000      	str	r0, [sp, #0]
 8012f80:	4649      	mov	r1, r9
 8012f82:	4620      	mov	r0, r4
 8012f84:	e9cd b503 	strd	fp, r5, [sp, #12]
 8012f88:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012f8c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012f90:	463b      	mov	r3, r7
 8012f92:	47a8      	blx	r5
 8012f94:	e7d4      	b.n	8012f40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f96:	4798      	blx	r3
 8012f98:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012f9c:	deff      	udf	#255	; 0xff
 8012f9e:	bf00      	nop
 8012fa0:	20027bfc 	.word	0x20027bfc
 8012fa4:	20027bf8 	.word	0x20027bf8
 8012fa8:	20027c00 	.word	0x20027c00

08012fac <_ZN8touchgfx12GraphLabelsYD1Ev>:
 8012fac:	4770      	bx	lr

08012fae <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8012fae:	b538      	push	{r3, r4, r5, lr}
 8012fb0:	680a      	ldr	r2, [r1, #0]
 8012fb2:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8012fb6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8012fba:	4608      	mov	r0, r1
 8012fbc:	4790      	blx	r2
 8012fbe:	4629      	mov	r1, r5
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fc8:	f7ff bafc 	b.w	80125c4 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08012fcc <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	4604      	mov	r4, r0
 8012fd0:	214c      	movs	r1, #76	; 0x4c
 8012fd2:	f012 fd8e 	bl	8025af2 <_ZdlPvj>
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	bd10      	pop	{r4, pc}

08012fda <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8012fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fde:	b08d      	sub	sp, #52	; 0x34
 8012fe0:	4606      	mov	r6, r0
 8012fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8012fe4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8012fe8:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 8012fec:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8012ff0:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8012ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8012ff6:	f1b9 0f00 	cmp.w	r9, #0
 8012ffa:	d117      	bne.n	801302c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8012ffc:	2f00      	cmp	r7, #0
 8012ffe:	dc7c      	bgt.n	80130fa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 8013000:	f1b8 0f00 	cmp.w	r8, #0
 8013004:	da01      	bge.n	801300a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8013006:	2f00      	cmp	r7, #0
 8013008:	d17a      	bne.n	8013100 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 801300a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801300c:	4630      	mov	r0, r6
 801300e:	6832      	ldr	r2, [r6, #0]
 8013010:	9318      	str	r3, [sp, #96]	; 0x60
 8013012:	2300      	movs	r3, #0
 8013014:	9907      	ldr	r1, [sp, #28]
 8013016:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 801301a:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 801301e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013022:	46a4      	mov	ip, r4
 8013024:	b00d      	add	sp, #52	; 0x34
 8013026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302a:	4760      	bx	ip
 801302c:	fb97 f4f9 	sdiv	r4, r7, r9
 8013030:	1e63      	subs	r3, r4, #1
 8013032:	9305      	str	r3, [sp, #20]
 8013034:	f1ba 0f00 	cmp.w	sl, #0
 8013038:	d122      	bne.n	8013080 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 801303a:	fb03 f509 	mul.w	r5, r3, r9
 801303e:	fb98 faf9 	sdiv	sl, r8, r9
 8013042:	f10a 0a02 	add.w	sl, sl, #2
 8013046:	9b05      	ldr	r3, [sp, #20]
 8013048:	459a      	cmp	sl, r3
 801304a:	d059      	beq.n	8013100 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 801304c:	42af      	cmp	r7, r5
 801304e:	dc5a      	bgt.n	8013106 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 8013050:	45a8      	cmp	r8, r5
 8013052:	da01      	bge.n	8013058 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8013054:	42af      	cmp	r7, r5
 8013056:	db0e      	blt.n	8013076 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8013058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801305a:	4630      	mov	r0, r6
 801305c:	9905      	ldr	r1, [sp, #20]
 801305e:	9302      	str	r3, [sp, #8]
 8013060:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8013062:	6832      	ldr	r2, [r6, #0]
 8013064:	434b      	muls	r3, r1
 8013066:	9907      	ldr	r1, [sp, #28]
 8013068:	e9cd 5300 	strd	r5, r3, [sp]
 801306c:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 8013070:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013074:	47d8      	blx	fp
 8013076:	9b05      	ldr	r3, [sp, #20]
 8013078:	444d      	add	r5, r9
 801307a:	3301      	adds	r3, #1
 801307c:	9305      	str	r3, [sp, #20]
 801307e:	e7e2      	b.n	8013046 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8013080:	fb97 f3fa 	sdiv	r3, r7, sl
 8013084:	3b01      	subs	r3, #1
 8013086:	9306      	str	r3, [sp, #24]
 8013088:	9a06      	ldr	r2, [sp, #24]
 801308a:	fb98 f3fa 	sdiv	r3, r8, sl
 801308e:	fb02 fb0a 	mul.w	fp, r2, sl
 8013092:	9a05      	ldr	r2, [sp, #20]
 8013094:	3302      	adds	r3, #2
 8013096:	fb02 f509 	mul.w	r5, r2, r9
 801309a:	930b      	str	r3, [sp, #44]	; 0x2c
 801309c:	45ab      	cmp	fp, r5
 801309e:	dd1d      	ble.n	80130dc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80130a0:	42af      	cmp	r7, r5
 80130a2:	dc08      	bgt.n	80130b6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 80130a4:	45a8      	cmp	r8, r5
 80130a6:	da08      	bge.n	80130ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80130a8:	42af      	cmp	r7, r5
 80130aa:	da06      	bge.n	80130ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80130ac:	9b05      	ldr	r3, [sp, #20]
 80130ae:	444d      	add	r5, r9
 80130b0:	3301      	adds	r3, #1
 80130b2:	9305      	str	r3, [sp, #20]
 80130b4:	e7f2      	b.n	801309c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80130b6:	45a8      	cmp	r8, r5
 80130b8:	dcf8      	bgt.n	80130ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 80130ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130bc:	4630      	mov	r0, r6
 80130be:	9905      	ldr	r1, [sp, #20]
 80130c0:	9302      	str	r3, [sp, #8]
 80130c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80130c4:	6832      	ldr	r2, [r6, #0]
 80130c6:	434b      	muls	r3, r1
 80130c8:	9907      	ldr	r1, [sp, #28]
 80130ca:	e9cd 5300 	strd	r5, r3, [sp]
 80130ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80130d2:	461c      	mov	r4, r3
 80130d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80130d8:	47a0      	blx	r4
 80130da:	e7e7      	b.n	80130ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 80130dc:	45ab      	cmp	fp, r5
 80130de:	db04      	blt.n	80130ea <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 80130e0:	9b05      	ldr	r3, [sp, #20]
 80130e2:	444d      	add	r5, r9
 80130e4:	3301      	adds	r3, #1
 80130e6:	9305      	str	r3, [sp, #20]
 80130e8:	e7f8      	b.n	80130dc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80130ea:	9b06      	ldr	r3, [sp, #24]
 80130ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130ee:	3301      	adds	r3, #1
 80130f0:	4293      	cmp	r3, r2
 80130f2:	9306      	str	r3, [sp, #24]
 80130f4:	d004      	beq.n	8013100 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80130f6:	44d3      	add	fp, sl
 80130f8:	e7d0      	b.n	801309c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80130fa:	f1b8 0f00 	cmp.w	r8, #0
 80130fe:	dd84      	ble.n	801300a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8013100:	b00d      	add	sp, #52	; 0x34
 8013102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013106:	45a8      	cmp	r8, r5
 8013108:	dcb5      	bgt.n	8013076 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 801310a:	e7a5      	b.n	8013058 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

0801310c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 801310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013110:	f1b3 0900 	subs.w	r9, r3, #0
 8013114:	460d      	mov	r5, r1
 8013116:	4690      	mov	r8, r2
 8013118:	9f08      	ldr	r7, [sp, #32]
 801311a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801311e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013120:	da18      	bge.n	8013154 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8013122:	2a01      	cmp	r2, #1
 8013124:	dd16      	ble.n	8013154 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8013126:	232d      	movs	r3, #45	; 0x2d
 8013128:	f1c9 0900 	rsb	r9, r9, #0
 801312c:	2001      	movs	r0, #1
 801312e:	800b      	strh	r3, [r1, #0]
 8013130:	2f00      	cmp	r7, #0
 8013132:	d111      	bne.n	8013158 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8013134:	2302      	movs	r3, #2
 8013136:	eba8 0100 	sub.w	r1, r8, r0
 801313a:	4a26      	ldr	r2, [pc, #152]	; (80131d4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 801313c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013140:	b289      	uxth	r1, r1
 8013142:	fb96 f3f3 	sdiv	r3, r6, r3
 8013146:	444b      	add	r3, r9
 8013148:	fb93 f3f6 	sdiv	r3, r3, r6
 801314c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013150:	f006 b88e 	b.w	8019270 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013154:	2000      	movs	r0, #0
 8013156:	e7eb      	b.n	8013130 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8013158:	dd39      	ble.n	80131ce <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801315a:	eba8 0100 	sub.w	r1, r8, r0
 801315e:	4a1d      	ldr	r2, [pc, #116]	; (80131d4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8013160:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013164:	f108 38ff 	add.w	r8, r8, #4294967295
 8013168:	b289      	uxth	r1, r1
 801316a:	fb99 f4f6 	sdiv	r4, r9, r6
 801316e:	4623      	mov	r3, r4
 8013170:	f006 f87e 	bl	8019270 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013174:	4628      	mov	r0, r5
 8013176:	f005 fd09 	bl	8018b8c <_ZN8touchgfx7Unicode6strlenEPKt>
 801317a:	4580      	cmp	r8, r0
 801317c:	dd27      	ble.n	80131ce <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801317e:	f04f 0e02 	mov.w	lr, #2
 8013182:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 8013186:	fb06 9314 	mls	r3, r6, r4, r9
 801318a:	3001      	adds	r0, #1
 801318c:	2200      	movs	r2, #0
 801318e:	f04f 090a 	mov.w	r9, #10
 8013192:	f107 3aff 	add.w	sl, r7, #4294967295
 8013196:	fb96 fefe 	sdiv	lr, r6, lr
 801319a:	4580      	cmp	r8, r0
 801319c:	4684      	mov	ip, r0
 801319e:	dd13      	ble.n	80131c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 80131a0:	fb09 f303 	mul.w	r3, r9, r3
 80131a4:	4592      	cmp	sl, r2
 80131a6:	f102 0201 	add.w	r2, r2, #1
 80131aa:	f100 0c01 	add.w	ip, r0, #1
 80131ae:	bf08      	it	eq
 80131b0:	4473      	addeq	r3, lr
 80131b2:	4297      	cmp	r7, r2
 80131b4:	fb93 f4f6 	sdiv	r4, r3, r6
 80131b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80131bc:	fb06 3314 	mls	r3, r6, r4, r3
 80131c0:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 80131c4:	4660      	mov	r0, ip
 80131c6:	d1e8      	bne.n	801319a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 80131c8:	2300      	movs	r3, #0
 80131ca:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 80131ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131d2:	bf00      	nop
 80131d4:	0802af7c 	.word	0x0802af7c

080131d8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 80131d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131dc:	b09b      	sub	sp, #108	; 0x6c
 80131de:	4698      	mov	r8, r3
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	4604      	mov	r4, r0
 80131e4:	ae1a      	add	r6, sp, #104	; 0x68
 80131e6:	9104      	str	r1, [sp, #16]
 80131e8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80131ec:	4640      	mov	r0, r8
 80131ee:	9924      	ldr	r1, [sp, #144]	; 0x90
 80131f0:	4617      	mov	r7, r2
 80131f2:	4798      	blx	r3
 80131f4:	f846 0d28 	str.w	r0, [r6, #-40]!
 80131f8:	4630      	mov	r0, r6
 80131fa:	f7fe ffd7 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80131fe:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 8013202:	1ac0      	subs	r0, r0, r3
 8013204:	b200      	sxth	r0, r0
 8013206:	2800      	cmp	r0, #0
 8013208:	f2c0 80ba 	blt.w	8013380 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801320c:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 8013210:	441a      	add	r2, r3
 8013212:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 8013216:	1a9b      	subs	r3, r3, r2
 8013218:	b21b      	sxth	r3, r3
 801321a:	4298      	cmp	r0, r3
 801321c:	f280 80b0 	bge.w	8013380 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013220:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013222:	2214      	movs	r2, #20
 8013224:	4631      	mov	r1, r6
 8013226:	4620      	mov	r0, r4
 8013228:	9302      	str	r3, [sp, #8]
 801322a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 801322e:	9301      	str	r3, [sp, #4]
 8013230:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013238:	f7ff ff68 	bl	801310c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 801323c:	4b55      	ldr	r3, [pc, #340]	; (8013394 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 801323e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013240:	6818      	ldr	r0, [r3, #0]
 8013242:	f7f4 f8ff 	bl	8007444 <_ZNK8touchgfx5Texts7getTextEt>
 8013246:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801324a:	4681      	mov	r9, r0
 801324c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	f040 8098 	bne.w	8013386 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8013256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013258:	4638      	mov	r0, r7
 801325a:	4798      	blx	r3
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	4605      	mov	r5, r0
 8013260:	4632      	mov	r2, r6
 8013262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013264:	4649      	mov	r1, r9
 8013266:	4638      	mov	r0, r7
 8013268:	4798      	blx	r3
 801326a:	fb15 f500 	smulbb	r5, r5, r0
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	4632      	mov	r2, r6
 8013272:	b2ad      	uxth	r5, r5
 8013274:	4649      	mov	r1, r9
 8013276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013278:	4638      	mov	r0, r7
 801327a:	4798      	blx	r3
 801327c:	4405      	add	r5, r0
 801327e:	b22d      	sxth	r5, r5
 8013280:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013284:	2002      	movs	r0, #2
 8013286:	f8d8 2000 	ldr.w	r2, [r8]
 801328a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801328e:	2b01      	cmp	r3, #1
 8013290:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 8013294:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8013298:	bf88      	it	hi
 801329a:	f105 0b01 	addhi.w	fp, r5, #1
 801329e:	9305      	str	r3, [sp, #20]
 80132a0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80132a2:	bf8c      	ite	hi
 80132a4:	fb9b fbf0 	sdivhi	fp, fp, r0
 80132a8:	fb95 fbf0 	sdivls	fp, r5, r0
 80132ac:	4640      	mov	r0, r8
 80132ae:	bf88      	it	hi
 80132b0:	fa0f fb8b 	sxthhi.w	fp, fp
 80132b4:	4790      	blx	r2
 80132b6:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 80132ba:	4650      	mov	r0, sl
 80132bc:	f04f 0800 	mov.w	r8, #0
 80132c0:	f7fe ff74 	bl	80121ac <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80132c4:	9b05      	ldr	r3, [sp, #20]
 80132c6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80132ca:	4418      	add	r0, r3
 80132cc:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 80132d0:	ad07      	add	r5, sp, #28
 80132d2:	f8ad 801c 	strh.w	r8, [sp, #28]
 80132d6:	eba0 0b0b 	sub.w	fp, r0, fp
 80132da:	f8ad 1020 	strh.w	r1, [sp, #32]
 80132de:	f8ad b01e 	strh.w	fp, [sp, #30]
 80132e2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 80132e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80132ea:	e88b 0003 	stmia.w	fp, {r0, r1}
 80132ee:	9904      	ldr	r1, [sp, #16]
 80132f0:	4658      	mov	r0, fp
 80132f2:	f7fc ff6f 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 80132f6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80132fa:	4543      	cmp	r3, r8
 80132fc:	dd40      	ble.n	8013380 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80132fe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8013302:	4543      	cmp	r3, r8
 8013304:	dd3c      	ble.n	8013380 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013306:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801330a:	4620      	mov	r0, r4
 801330c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013310:	1a5b      	subs	r3, r3, r1
 8013312:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8013316:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801331a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801331e:	1a5b      	subs	r3, r3, r1
 8013320:	4629      	mov	r1, r5
 8013322:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013326:	6823      	ldr	r3, [r4, #0]
 8013328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801332a:	4798      	blx	r3
 801332c:	4b1a      	ldr	r3, [pc, #104]	; (8013398 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 801332e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8013336:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801333a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801333c:	785b      	ldrb	r3, [r3, #1]
 801333e:	910d      	str	r1, [sp, #52]	; 0x34
 8013340:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8013344:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013348:	970b      	str	r7, [sp, #44]	; 0x2c
 801334a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801334e:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8013352:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 8013356:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801335a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 801335e:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 8013362:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 8013366:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 801336a:	f7fd fa03 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 801336e:	465b      	mov	r3, fp
 8013370:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8013374:	e9cd a900 	strd	sl, r9, [sp]
 8013378:	e895 0006 	ldmia.w	r5, {r1, r2}
 801337c:	f7f4 f814 	bl	80073a8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013380:	b01b      	add	sp, #108	; 0x6c
 8013382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013386:	4601      	mov	r1, r0
 8013388:	699b      	ldr	r3, [r3, #24]
 801338a:	4632      	mov	r2, r6
 801338c:	4638      	mov	r0, r7
 801338e:	4798      	blx	r3
 8013390:	b205      	sxth	r5, r0
 8013392:	e775      	b.n	8013280 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8013394:	20027c04 	.word	0x20027c04
 8013398:	20027bf8 	.word	0x20027bf8

0801339c <_ZN8touchgfx15GraphScrollData5clearEv>:
 801339c:	b510      	push	{r4, lr}
 801339e:	4604      	mov	r4, r0
 80133a0:	f7fe fda1 	bl	8011ee6 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 80133a4:	2300      	movs	r3, #0
 80133a6:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
 80133aa:	bd10      	pop	{r4, pc}

080133ac <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 80133ac:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 80133b0:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d101      	bne.n	80133bc <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 80133b8:	f7fe bfbe 	b.w	8012338 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80133bc:	4770      	bx	lr

080133be <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 80133be:	b538      	push	{r3, r4, r5, lr}
 80133c0:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	; 0x11c
 80133c4:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 80133c8:	42a5      	cmp	r5, r4
 80133ca:	da04      	bge.n	80133d6 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 80133cc:	6803      	ldr	r3, [r0, #0]
 80133ce:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80133d2:	4798      	blx	r3
 80133d4:	bd38      	pop	{r3, r4, r5, pc}
 80133d6:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80133da:	4408      	add	r0, r1
 80133dc:	1b00      	subs	r0, r0, r4
 80133de:	e7f9      	b.n	80133d4 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

080133e0 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
 80133e6:	4604      	mov	r4, r0
 80133e8:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 80133ec:	1c6b      	adds	r3, r5, #1
 80133ee:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	; 0x11e
 80133f2:	b21b      	sxth	r3, r3
 80133f4:	42ae      	cmp	r6, r5
 80133f6:	fb93 f0f2 	sdiv	r0, r3, r2
 80133fa:	bf08      	it	eq
 80133fc:	f8a4 311e 	strheq.w	r3, [r4, #286]	; 0x11e
 8013400:	4296      	cmp	r6, r2
 8013402:	fb02 3010 	mls	r0, r2, r0, r3
 8013406:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 801340a:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
 801340e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013412:	d108      	bne.n	8013426 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8013414:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013418:	f003 fee7 	bl	80171ea <_ZNK8touchgfx8Drawable10invalidateEv>
 801341c:	4620      	mov	r0, r4
 801341e:	f7fe ff8b 	bl	8012338 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013422:	4628      	mov	r0, r5
 8013424:	bd70      	pop	{r4, r5, r6, pc}
 8013426:	4629      	mov	r1, r5
 8013428:	4620      	mov	r0, r4
 801342a:	f7fe ff5d 	bl	80122e8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801342e:	e7f8      	b.n	8013422 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08013430 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8013430:	4b07      	ldr	r3, [pc, #28]	; (8013450 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8013432:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013434:	881b      	ldrh	r3, [r3, #0]
 8013436:	4293      	cmp	r3, r2
 8013438:	bf81      	itttt	hi
 801343a:	4b06      	ldrhi	r3, [pc, #24]	; (8013454 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801343c:	681b      	ldrhi	r3, [r3, #0]
 801343e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8013442:	7858      	ldrbhi	r0, [r3, #1]
 8013444:	bf8c      	ite	hi
 8013446:	f000 0003 	andhi.w	r0, r0, #3
 801344a:	2000      	movls	r0, #0
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	20027bfc 	.word	0x20027bfc
 8013454:	20027bf8 	.word	0x20027bf8

08013458 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013458:	4b11      	ldr	r3, [pc, #68]	; (80134a0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013460:	4604      	mov	r4, r0
 8013462:	881b      	ldrh	r3, [r3, #0]
 8013464:	428b      	cmp	r3, r1
 8013466:	d918      	bls.n	801349a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013468:	6803      	ldr	r3, [r0, #0]
 801346a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801346c:	4b0d      	ldr	r3, [pc, #52]	; (80134a4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801346e:	6818      	ldr	r0, [r3, #0]
 8013470:	f7f3 ffe8 	bl	8007444 <_ZNK8touchgfx5Texts7getTextEt>
 8013474:	6823      	ldr	r3, [r4, #0]
 8013476:	4606      	mov	r6, r0
 8013478:	4620      	mov	r0, r4
 801347a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801347c:	4798      	blx	r3
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	4607      	mov	r7, r0
 8013482:	4620      	mov	r0, r4
 8013484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013488:	4798      	blx	r3
 801348a:	463a      	mov	r2, r7
 801348c:	4603      	mov	r3, r0
 801348e:	4631      	mov	r1, r6
 8013490:	4620      	mov	r0, r4
 8013492:	46ac      	mov	ip, r5
 8013494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013498:	4760      	bx	ip
 801349a:	2000      	movs	r0, #0
 801349c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a0:	20027bfc 	.word	0x20027bfc
 80134a4:	20027c04 	.word	0x20027c04

080134a8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80134a8:	4b18      	ldr	r3, [pc, #96]	; (801350c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80134aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134ae:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80134b0:	4604      	mov	r4, r0
 80134b2:	881b      	ldrh	r3, [r3, #0]
 80134b4:	428b      	cmp	r3, r1
 80134b6:	d926      	bls.n	8013506 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80134b8:	4b15      	ldr	r3, [pc, #84]	; (8013510 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80134c0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80134c4:	4b13      	ldr	r3, [pc, #76]	; (8013514 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80134c6:	7855      	ldrb	r5, [r2, #1]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80134ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80134d2:	6833      	ldr	r3, [r6, #0]
 80134d4:	69df      	ldr	r7, [r3, #28]
 80134d6:	4b10      	ldr	r3, [pc, #64]	; (8013518 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80134d8:	6818      	ldr	r0, [r3, #0]
 80134da:	f7f3 ffb3 	bl	8007444 <_ZNK8touchgfx5Texts7getTextEt>
 80134de:	6823      	ldr	r3, [r4, #0]
 80134e0:	4680      	mov	r8, r0
 80134e2:	4620      	mov	r0, r4
 80134e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134e6:	4798      	blx	r3
 80134e8:	6823      	ldr	r3, [r4, #0]
 80134ea:	4681      	mov	r9, r0
 80134ec:	4620      	mov	r0, r4
 80134ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134f2:	4798      	blx	r3
 80134f4:	464b      	mov	r3, r9
 80134f6:	9000      	str	r0, [sp, #0]
 80134f8:	4642      	mov	r2, r8
 80134fa:	4629      	mov	r1, r5
 80134fc:	4630      	mov	r0, r6
 80134fe:	47b8      	blx	r7
 8013500:	b003      	add	sp, #12
 8013502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013506:	2000      	movs	r0, #0
 8013508:	e7fa      	b.n	8013500 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801350a:	bf00      	nop
 801350c:	20027bfc 	.word	0x20027bfc
 8013510:	20027bf8 	.word	0x20027bf8
 8013514:	20027c00 	.word	0x20027c00
 8013518:	20027c04 	.word	0x20027c04

0801351c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801351c:	b40e      	push	{r1, r2, r3}
 801351e:	4b30      	ldr	r3, [pc, #192]	; (80135e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013524:	881a      	ldrh	r2, [r3, #0]
 8013526:	b09d      	sub	sp, #116	; 0x74
 8013528:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801352a:	4604      	mov	r4, r0
 801352c:	429a      	cmp	r2, r3
 801352e:	d954      	bls.n	80135da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013530:	aa26      	add	r2, sp, #152	; 0x98
 8013532:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80135e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013536:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80135e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801353a:	9202      	str	r2, [sp, #8]
 801353c:	f8d9 2000 	ldr.w	r2, [r9]
 8013540:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013544:	f8d8 3000 	ldr.w	r3, [r8]
 8013548:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801354c:	682b      	ldr	r3, [r5, #0]
 801354e:	4628      	mov	r0, r5
 8013550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013552:	4798      	blx	r3
 8013554:	4606      	mov	r6, r0
 8013556:	b207      	sxth	r7, r0
 8013558:	a803      	add	r0, sp, #12
 801355a:	f004 fbc9 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 801355e:	682b      	ldr	r3, [r5, #0]
 8013560:	4628      	mov	r0, r5
 8013562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013564:	4798      	blx	r3
 8013566:	682b      	ldr	r3, [r5, #0]
 8013568:	4682      	mov	sl, r0
 801356a:	4628      	mov	r0, r5
 801356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801356e:	4798      	blx	r3
 8013570:	4653      	mov	r3, sl
 8013572:	9000      	str	r0, [sp, #0]
 8013574:	a803      	add	r0, sp, #12
 8013576:	9a02      	ldr	r2, [sp, #8]
 8013578:	9925      	ldr	r1, [sp, #148]	; 0x94
 801357a:	f004 fc0c 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801357e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013580:	f8d9 3000 	ldr.w	r3, [r9]
 8013584:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013588:	8925      	ldrh	r5, [r4, #8]
 801358a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801358e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013592:	eba5 050c 	sub.w	r5, r5, ip
 8013596:	784a      	ldrb	r2, [r1, #1]
 8013598:	f8d8 3000 	ldr.w	r3, [r8]
 801359c:	b22d      	sxth	r5, r5
 801359e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80135a2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80135a6:	9500      	str	r5, [sp, #0]
 80135a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80135ac:	a803      	add	r0, sp, #12
 80135ae:	f002 f939 	bl	8015824 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80135b2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80135b6:	b203      	sxth	r3, r0
 80135b8:	18b9      	adds	r1, r7, r2
 80135ba:	2900      	cmp	r1, #0
 80135bc:	dd0b      	ble.n	80135d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80135be:	3b01      	subs	r3, #1
 80135c0:	fb13 f302 	smulbb	r3, r3, r2
 80135c4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80135c8:	b21f      	sxth	r7, r3
 80135ca:	4638      	mov	r0, r7
 80135cc:	b01d      	add	sp, #116	; 0x74
 80135ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d2:	b003      	add	sp, #12
 80135d4:	4770      	bx	lr
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	dcf7      	bgt.n	80135ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80135da:	2700      	movs	r7, #0
 80135dc:	e7f5      	b.n	80135ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80135de:	bf00      	nop
 80135e0:	20027bfc 	.word	0x20027bfc
 80135e4:	20027bf8 	.word	0x20027bf8
 80135e8:	20027c00 	.word	0x20027c00

080135ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4b0e      	ldr	r3, [pc, #56]	; (8013628 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80135f0:	4604      	mov	r4, r0
 80135f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d214      	bcs.n	8013624 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80135fa:	6803      	ldr	r3, [r0, #0]
 80135fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135fe:	4798      	blx	r3
 8013600:	6823      	ldr	r3, [r4, #0]
 8013602:	4605      	mov	r5, r0
 8013604:	4620      	mov	r0, r4
 8013606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013608:	4798      	blx	r3
 801360a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801360e:	b22d      	sxth	r5, r5
 8013610:	4601      	mov	r1, r0
 8013612:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013616:	bf06      	itte	eq
 8013618:	4602      	moveq	r2, r0
 801361a:	4629      	moveq	r1, r5
 801361c:	462a      	movne	r2, r5
 801361e:	4620      	mov	r0, r4
 8013620:	f7fc fa48 	bl	800fab4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013624:	bd38      	pop	{r3, r4, r5, pc}
 8013626:	bf00      	nop
 8013628:	20027bfc 	.word	0x20027bfc

0801362c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801362c:	b530      	push	{r4, r5, lr}
 801362e:	888b      	ldrh	r3, [r1, #4]
 8013630:	b085      	sub	sp, #20
 8013632:	4604      	mov	r4, r0
 8013634:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013636:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801363a:	b923      	cbnz	r3, 8013646 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801363c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013640:	b90b      	cbnz	r3, 8013646 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013642:	f7ff ffd3 	bl	80135ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	466d      	mov	r5, sp
 801364a:	4621      	mov	r1, r4
 801364c:	343c      	adds	r4, #60	; 0x3c
 801364e:	4628      	mov	r0, r5
 8013650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013654:	4798      	blx	r3
 8013656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801365a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801365e:	b005      	add	sp, #20
 8013660:	bd30      	pop	{r4, r5, pc}

08013662 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013662:	2300      	movs	r3, #0
 8013664:	8083      	strh	r3, [r0, #4]
 8013666:	80c3      	strh	r3, [r0, #6]
 8013668:	8003      	strh	r3, [r0, #0]
 801366a:	8043      	strh	r3, [r0, #2]
 801366c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013670:	2bff      	cmp	r3, #255	; 0xff
 8013672:	bf01      	itttt	eq
 8013674:	890b      	ldrheq	r3, [r1, #8]
 8013676:	8083      	strheq	r3, [r0, #4]
 8013678:	894b      	ldrheq	r3, [r1, #10]
 801367a:	80c3      	strheq	r3, [r0, #6]
 801367c:	4770      	bx	lr
	...

08013680 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013682:	4604      	mov	r4, r0
 8013684:	466b      	mov	r3, sp
 8013686:	6808      	ldr	r0, [r1, #0]
 8013688:	6849      	ldr	r1, [r1, #4]
 801368a:	c303      	stmia	r3!, {r0, r1}
 801368c:	6823      	ldr	r3, [r4, #0]
 801368e:	4669      	mov	r1, sp
 8013690:	4620      	mov	r0, r4
 8013692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013694:	4798      	blx	r3
 8013696:	4b08      	ldr	r3, [pc, #32]	; (80136b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801369e:	b10a      	cbz	r2, 80136a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80136a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80136a2:	b900      	cbnz	r0, 80136a6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80136a4:	6898      	ldr	r0, [r3, #8]
 80136a6:	6803      	ldr	r3, [r0, #0]
 80136a8:	4669      	mov	r1, sp
 80136aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80136ac:	6a1d      	ldr	r5, [r3, #32]
 80136ae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80136b2:	47a8      	blx	r5
 80136b4:	b003      	add	sp, #12
 80136b6:	bd30      	pop	{r4, r5, pc}
 80136b8:	20027ba0 	.word	0x20027ba0

080136bc <_ZN8touchgfx3BoxD1Ev>:
 80136bc:	4770      	bx	lr

080136be <_ZN8touchgfx3BoxD0Ev>:
 80136be:	b510      	push	{r4, lr}
 80136c0:	4604      	mov	r4, r0
 80136c2:	212c      	movs	r1, #44	; 0x2c
 80136c4:	f012 fa15 	bl	8025af2 <_ZdlPvj>
 80136c8:	4620      	mov	r0, r4
 80136ca:	bd10      	pop	{r4, pc}

080136cc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80136cc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80136d0:	b12a      	cbz	r2, 80136de <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80136d2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80136d6:	b112      	cbz	r2, 80136de <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80136d8:	6803      	ldr	r3, [r0, #0]
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	4718      	bx	r3
 80136de:	4770      	bx	lr

080136e0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80136e0:	4b30      	ldr	r3, [pc, #192]	; (80137a4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80136e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136e6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80136e8:	b08d      	sub	sp, #52	; 0x34
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	4604      	mov	r4, r0
 80136ee:	460f      	mov	r7, r1
 80136f0:	4293      	cmp	r3, r2
 80136f2:	d954      	bls.n	801379e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80136f4:	4b2c      	ldr	r3, [pc, #176]	; (80137a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80136f6:	6819      	ldr	r1, [r3, #0]
 80136f8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80136fc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013700:	4a2a      	ldr	r2, [pc, #168]	; (80137ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8013702:	6812      	ldr	r2, [r2, #0]
 8013704:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013708:	2900      	cmp	r1, #0
 801370a:	d048      	beq.n	801379e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801370c:	785a      	ldrb	r2, [r3, #1]
 801370e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013712:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013716:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801371a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801371e:	4b24      	ldr	r3, [pc, #144]	; (80137b0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013720:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801372a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801372e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8013732:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8013734:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8013738:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 801373c:	9107      	str	r1, [sp, #28]
 801373e:	f88d 8020 	strb.w	r8, [sp, #32]
 8013742:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8013746:	9609      	str	r6, [sp, #36]	; 0x24
 8013748:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801374c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013750:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8013754:	b10b      	cbz	r3, 801375a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013756:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013758:	b905      	cbnz	r5, 801375c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801375a:	6895      	ldr	r5, [r2, #8]
 801375c:	ae05      	add	r6, sp, #20
 801375e:	4621      	mov	r1, r4
 8013760:	4630      	mov	r0, r6
 8013762:	f003 fddd 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013766:	4b13      	ldr	r3, [pc, #76]	; (80137b4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013768:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801376a:	6818      	ldr	r0, [r3, #0]
 801376c:	f7f3 fe6a 	bl	8007444 <_ZNK8touchgfx5Texts7getTextEt>
 8013770:	6823      	ldr	r3, [r4, #0]
 8013772:	4680      	mov	r8, r0
 8013774:	4620      	mov	r0, r4
 8013776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013778:	4798      	blx	r3
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	4681      	mov	r9, r0
 801377e:	4620      	mov	r0, r4
 8013780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013784:	4798      	blx	r3
 8013786:	ab07      	add	r3, sp, #28
 8013788:	f8cd 8004 	str.w	r8, [sp, #4]
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	463b      	mov	r3, r7
 8013790:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013794:	4628      	mov	r0, r5
 8013796:	e896 0006 	ldmia.w	r6, {r1, r2}
 801379a:	f7f3 fe05 	bl	80073a8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801379e:	b00d      	add	sp, #52	; 0x34
 80137a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137a4:	20027bfc 	.word	0x20027bfc
 80137a8:	20027bf8 	.word	0x20027bf8
 80137ac:	20027c00 	.word	0x20027c00
 80137b0:	20027ba0 	.word	0x20027ba0
 80137b4:	20027c04 	.word	0x20027c04

080137b8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80137b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80137bc:	4770      	bx	lr

080137be <_ZNK8touchgfx6Button17invalidateContentEv>:
 80137be:	b508      	push	{r3, lr}
 80137c0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80137c4:	b10b      	cbz	r3, 80137ca <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
 80137c6:	f7ee fe00 	bl	80023ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80137ca:	bd08      	pop	{r3, pc}

080137cc <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 80137cc:	4770      	bx	lr

080137ce <_ZN8touchgfx14ButtonWithIconD1Ev>:
 80137ce:	4770      	bx	lr

080137d0 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 80137d0:	b510      	push	{r4, lr}
 80137d2:	4604      	mov	r4, r0
 80137d4:	213c      	movs	r1, #60	; 0x3c
 80137d6:	f012 f98c 	bl	8025af2 <_ZdlPvj>
 80137da:	4620      	mov	r0, r4
 80137dc:	bd10      	pop	{r4, pc}

080137de <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 80137de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e2:	461c      	mov	r4, r3
 80137e4:	4606      	mov	r6, r0
 80137e6:	9f06      	ldr	r7, [sp, #24]
 80137e8:	f012 f8d3 	bl	8025992 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80137ec:	8823      	ldrh	r3, [r4, #0]
 80137ee:	f04f 0802 	mov.w	r8, #2
 80137f2:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 80137f6:	4638      	mov	r0, r7
 80137f8:	86b3      	strh	r3, [r6, #52]	; 0x34
 80137fa:	883b      	ldrh	r3, [r7, #0]
 80137fc:	fb95 f5f8 	sdiv	r5, r5, r8
 8013800:	86f3      	strh	r3, [r6, #54]	; 0x36
 8013802:	b2ad      	uxth	r5, r5
 8013804:	f005 ffa6 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013808:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801380c:	fb90 f0f8 	sdiv	r0, r0, r8
 8013810:	1a2d      	subs	r5, r5, r0
 8013812:	4638      	mov	r0, r7
 8013814:	fb94 f4f8 	sdiv	r4, r4, r8
 8013818:	8735      	strh	r5, [r6, #56]	; 0x38
 801381a:	b2a4      	uxth	r4, r4
 801381c:	f005 ffce 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013820:	fb90 f0f8 	sdiv	r0, r0, r8
 8013824:	1a24      	subs	r4, r4, r0
 8013826:	8774      	strh	r4, [r6, #58]	; 0x3a
 8013828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801382c <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801382c:	b510      	push	{r4, lr}
 801382e:	4604      	mov	r4, r0
 8013830:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013832:	b150      	cbz	r0, 801384a <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013834:	6803      	ldr	r3, [r0, #0]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	4798      	blx	r3
 801383a:	b130      	cbz	r0, 801384a <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801383c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801383e:	4621      	mov	r1, r4
 8013840:	6803      	ldr	r3, [r0, #0]
 8013842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	4718      	bx	r3
 801384a:	bd10      	pop	{r4, pc}

0801384c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801384c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013850:	4604      	mov	r4, r0
 8013852:	b08c      	sub	sp, #48	; 0x30
 8013854:	460d      	mov	r5, r1
 8013856:	f012 f8cf 	bl	80259f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801385a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801385e:	2b00      	cmp	r3, #0
 8013860:	d05d      	beq.n	801391e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 8013862:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013864:	a805      	add	r0, sp, #20
 8013866:	f8ad 3014 	strh.w	r3, [sp, #20]
 801386a:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801386e:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8013872:	f005 ff6f 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013876:	4606      	mov	r6, r0
 8013878:	a805      	add	r0, sp, #20
 801387a:	f005 ff9f 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801387e:	6869      	ldr	r1, [r5, #4]
 8013880:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013884:	ab08      	add	r3, sp, #32
 8013886:	6828      	ldr	r0, [r5, #0]
 8013888:	ad08      	add	r5, sp, #32
 801388a:	f8ad 8018 	strh.w	r8, [sp, #24]
 801388e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013892:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013896:	c303      	stmia	r3!, {r0, r1}
 8013898:	a906      	add	r1, sp, #24
 801389a:	4628      	mov	r0, r5
 801389c:	f7fc fc9a 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 80138a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80138a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d035      	beq.n	8013918 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80138ac:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	dd31      	ble.n	8013918 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80138b4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	dd2d      	ble.n	8013918 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80138bc:	2300      	movs	r3, #0
 80138be:	a90a      	add	r1, sp, #40	; 0x28
 80138c0:	4620      	mov	r0, r4
 80138c2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ca:	4798      	blx	r3
 80138cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80138d0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80138d2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80138d6:	1a9b      	subs	r3, r3, r2
 80138d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80138dc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80138de:	1ac9      	subs	r1, r1, r3
 80138e0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80138e4:	490f      	ldr	r1, [pc, #60]	; (8013924 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 80138e6:	6809      	ldr	r1, [r1, #0]
 80138e8:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 80138ec:	b108      	cbz	r0, 80138f2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 80138ee:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80138f0:	b900      	cbnz	r0, 80138f4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 80138f2:	6888      	ldr	r0, [r1, #8]
 80138f4:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80138f8:	2601      	movs	r6, #1
 80138fa:	440b      	add	r3, r1
 80138fc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8013900:	440a      	add	r2, r1
 8013902:	6801      	ldr	r1, [r0, #0]
 8013904:	9602      	str	r6, [sp, #8]
 8013906:	b21b      	sxth	r3, r3
 8013908:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801390c:	b212      	sxth	r2, r2
 801390e:	e9cd 5400 	strd	r5, r4, [sp]
 8013912:	688c      	ldr	r4, [r1, #8]
 8013914:	a905      	add	r1, sp, #20
 8013916:	47a0      	blx	r4
 8013918:	b00c      	add	sp, #48	; 0x30
 801391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013920:	e7a0      	b.n	8013864 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 8013922:	bf00      	nop
 8013924:	20027ba0 	.word	0x20027ba0

08013928 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8013928:	2101      	movs	r1, #1
 801392a:	2200      	movs	r2, #0
 801392c:	b510      	push	{r4, lr}
 801392e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013932:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8013936:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801393a:	4c0d      	ldr	r4, [pc, #52]	; (8013970 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 801393c:	8082      	strh	r2, [r0, #4]
 801393e:	80c2      	strh	r2, [r0, #6]
 8013940:	8102      	strh	r2, [r0, #8]
 8013942:	8142      	strh	r2, [r0, #10]
 8013944:	8182      	strh	r2, [r0, #12]
 8013946:	81c2      	strh	r2, [r0, #14]
 8013948:	8202      	strh	r2, [r0, #16]
 801394a:	8242      	strh	r2, [r0, #18]
 801394c:	61c2      	str	r2, [r0, #28]
 801394e:	8402      	strh	r2, [r0, #32]
 8013950:	8442      	strh	r2, [r0, #34]	; 0x22
 8013952:	6282      	str	r2, [r0, #40]	; 0x28
 8013954:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8013958:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801395a:	8601      	strh	r1, [r0, #48]	; 0x30
 801395c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8013960:	6004      	str	r4, [r0, #0]
 8013962:	8681      	strh	r1, [r0, #52]	; 0x34
 8013964:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013966:	8702      	strh	r2, [r0, #56]	; 0x38
 8013968:	8742      	strh	r2, [r0, #58]	; 0x3a
 801396a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801396e:	bd10      	pop	{r4, pc}
 8013970:	0802b090 	.word	0x0802b090

08013974 <_ZN8touchgfx5ImageD1Ev>:
 8013974:	4770      	bx	lr

08013976 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013976:	b570      	push	{r4, r5, r6, lr}
 8013978:	880b      	ldrh	r3, [r1, #0]
 801397a:	460d      	mov	r5, r1
 801397c:	4604      	mov	r4, r0
 801397e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013980:	4608      	mov	r0, r1
 8013982:	f005 fee7 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013986:	4606      	mov	r6, r0
 8013988:	4628      	mov	r0, r5
 801398a:	f005 ff17 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801398e:	6823      	ldr	r3, [r4, #0]
 8013990:	4605      	mov	r5, r0
 8013992:	4631      	mov	r1, r6
 8013994:	4620      	mov	r0, r4
 8013996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013998:	4798      	blx	r3
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	4629      	mov	r1, r5
 801399e:	4620      	mov	r0, r4
 80139a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139a6:	4718      	bx	r3

080139a8 <_ZN8touchgfx5ImageD0Ev>:
 80139a8:	b510      	push	{r4, lr}
 80139aa:	4604      	mov	r4, r0
 80139ac:	212c      	movs	r1, #44	; 0x2c
 80139ae:	f012 f8a0 	bl	8025af2 <_ZdlPvj>
 80139b2:	4620      	mov	r0, r4
 80139b4:	bd10      	pop	{r4, pc}

080139b6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80139b6:	b510      	push	{r4, lr}
 80139b8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80139bc:	4604      	mov	r4, r0
 80139be:	2bff      	cmp	r3, #255	; 0xff
 80139c0:	d006      	beq.n	80139d0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80139c2:	2300      	movs	r3, #0
 80139c4:	8003      	strh	r3, [r0, #0]
 80139c6:	8043      	strh	r3, [r0, #2]
 80139c8:	8083      	strh	r3, [r0, #4]
 80139ca:	80c3      	strh	r3, [r0, #6]
 80139cc:	4620      	mov	r0, r4
 80139ce:	bd10      	pop	{r4, pc}
 80139d0:	3126      	adds	r1, #38	; 0x26
 80139d2:	f005 ff27 	bl	8019824 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80139d6:	e7f9      	b.n	80139cc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080139d8 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80139d8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80139dc:	b12a      	cbz	r2, 80139ea <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80139de:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80139e2:	b112      	cbz	r2, 80139ea <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80139e4:	6803      	ldr	r3, [r0, #0]
 80139e6:	695b      	ldr	r3, [r3, #20]
 80139e8:	4718      	bx	r3
 80139ea:	4770      	bx	lr

080139ec <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80139ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f0:	4604      	mov	r4, r0
 80139f2:	b088      	sub	sp, #32
 80139f4:	2500      	movs	r5, #0
 80139f6:	460f      	mov	r7, r1
 80139f8:	f854 3b26 	ldr.w	r3, [r4], #38
 80139fc:	a904      	add	r1, sp, #16
 80139fe:	4606      	mov	r6, r0
 8013a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013a06:	4798      	blx	r3
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f005 fea3 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013a0e:	4680      	mov	r8, r0
 8013a10:	4620      	mov	r0, r4
 8013a12:	f005 fed3 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013a16:	9506      	str	r5, [sp, #24]
 8013a18:	ad06      	add	r5, sp, #24
 8013a1a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013a1e:	4639      	mov	r1, r7
 8013a20:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013a24:	4628      	mov	r0, r5
 8013a26:	f7fc fbd5 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8013a2a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	dd19      	ble.n	8013a66 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013a32:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	dd15      	ble.n	8013a66 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013a3a:	4b0c      	ldr	r3, [pc, #48]	; (8013a6c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013a42:	b10a      	cbz	r2, 8013a48 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013a44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013a46:	b900      	cbnz	r0, 8013a4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013a48:	6898      	ldr	r0, [r3, #8]
 8013a4a:	2701      	movs	r7, #1
 8013a4c:	6801      	ldr	r1, [r0, #0]
 8013a4e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013a52:	9702      	str	r7, [sp, #8]
 8013a54:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013a58:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013a5c:	e9cd 5600 	strd	r5, r6, [sp]
 8013a60:	688d      	ldr	r5, [r1, #8]
 8013a62:	4621      	mov	r1, r4
 8013a64:	47a8      	blx	r5
 8013a66:	b008      	add	sp, #32
 8013a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a6c:	20027ba0 	.word	0x20027ba0

08013a70 <_ZN8touchgfx7OutlineD1Ev>:
 8013a70:	4770      	bx	lr

08013a72 <_ZN8touchgfx7OutlineD0Ev>:
 8013a72:	b510      	push	{r4, lr}
 8013a74:	4604      	mov	r4, r0
 8013a76:	2130      	movs	r1, #48	; 0x30
 8013a78:	f012 f83b 	bl	8025af2 <_ZdlPvj>
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	bd10      	pop	{r4, pc}

08013a80 <_ZN8touchgfx7Outline5resetEv>:
 8013a80:	b510      	push	{r4, lr}
 8013a82:	4604      	mov	r4, r0
 8013a84:	f000 fe86 	bl	8014794 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8013a88:	60e0      	str	r0, [r4, #12]
 8013a8a:	f000 fe89 	bl	80147a0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013a8e:	68e3      	ldr	r3, [r4, #12]
 8013a90:	08c0      	lsrs	r0, r0, #3
 8013a92:	2200      	movs	r2, #0
 8013a94:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8013a98:	6123      	str	r3, [r4, #16]
 8013a9a:	3801      	subs	r0, #1
 8013a9c:	60a2      	str	r2, [r4, #8]
 8013a9e:	6060      	str	r0, [r4, #4]
 8013aa0:	8019      	strh	r1, [r3, #0]
 8013aa2:	8059      	strh	r1, [r3, #2]
 8013aa4:	809a      	strh	r2, [r3, #4]
 8013aa6:	80da      	strh	r2, [r3, #6]
 8013aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aaa:	f023 0301 	bic.w	r3, r3, #1
 8013aae:	f043 0302 	orr.w	r3, r3, #2
 8013ab2:	6263      	str	r3, [r4, #36]	; 0x24
 8013ab4:	bd10      	pop	{r4, pc}
	...

08013ab8 <_ZN8touchgfx7OutlineC1Ev>:
 8013ab8:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8013aba:	b510      	push	{r4, lr}
 8013abc:	6003      	str	r3, [r0, #0]
 8013abe:	2300      	movs	r3, #0
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	6243      	str	r3, [r0, #36]	; 0x24
 8013ac4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8013ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013acc:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013ad0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8013ad4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013ad8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8013adc:	f7ff ffd0 	bl	8013a80 <_ZN8touchgfx7Outline5resetEv>
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	bd10      	pop	{r4, pc}
 8013ae4:	0802b174 	.word	0x0802b174

08013ae8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	b093      	sub	sp, #76	; 0x4c
 8013aee:	1156      	asrs	r6, r2, #5
 8013af0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013af2:	9305      	str	r3, [sp, #20]
 8013af4:	1153      	asrs	r3, r2, #5
 8013af6:	f004 051f 	and.w	r5, r4, #31
 8013afa:	9303      	str	r3, [sp, #12]
 8013afc:	1163      	asrs	r3, r4, #5
 8013afe:	9504      	str	r5, [sp, #16]
 8013b00:	1165      	asrs	r5, r4, #5
 8013b02:	9306      	str	r3, [sp, #24]
 8013b04:	f002 031f 	and.w	r3, r2, #31
 8013b08:	42ae      	cmp	r6, r5
 8013b0a:	f040 80f4 	bne.w	8013cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8013b0e:	9c04      	ldr	r4, [sp, #16]
 8013b10:	9a05      	ldr	r2, [sp, #20]
 8013b12:	42a3      	cmp	r3, r4
 8013b14:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8013b18:	6902      	ldr	r2, [r0, #16]
 8013b1a:	d125      	bne.n	8013b68 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8013b1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013b20:	459e      	cmp	lr, r3
 8013b22:	d103      	bne.n	8013b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8013b24:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013b28:	429e      	cmp	r6, r3
 8013b2a:	d035      	beq.n	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013b2c:	88d1      	ldrh	r1, [r2, #6]
 8013b2e:	8893      	ldrh	r3, [r2, #4]
 8013b30:	430b      	orrs	r3, r1
 8013b32:	d010      	beq.n	8013b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013b34:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	db0c      	blt.n	8013b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013b3c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013b3e:	428b      	cmp	r3, r1
 8013b40:	da09      	bge.n	8013b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013b42:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013b46:	428b      	cmp	r3, r1
 8013b48:	f103 0301 	add.w	r3, r3, #1
 8013b4c:	bf38      	it	cc
 8013b4e:	3208      	addcc	r2, #8
 8013b50:	6083      	str	r3, [r0, #8]
 8013b52:	bf38      	it	cc
 8013b54:	6102      	strcc	r2, [r0, #16]
 8013b56:	6903      	ldr	r3, [r0, #16]
 8013b58:	9a03      	ldr	r2, [sp, #12]
 8013b5a:	f8a3 e000 	strh.w	lr, [r3]
 8013b5e:	805a      	strh	r2, [r3, #2]
 8013b60:	2200      	movs	r2, #0
 8013b62:	809a      	strh	r2, [r3, #4]
 8013b64:	80da      	strh	r2, [r3, #6]
 8013b66:	e017      	b.n	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013b68:	9c05      	ldr	r4, [sp, #20]
 8013b6a:	114e      	asrs	r6, r1, #5
 8013b6c:	f001 0c1f 	and.w	ip, r1, #31
 8013b70:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8013b74:	f004 041f 	and.w	r4, r4, #31
 8013b78:	4576      	cmp	r6, lr
 8013b7a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8013b7e:	9402      	str	r4, [sp, #8]
 8013b80:	9c04      	ldr	r4, [sp, #16]
 8013b82:	eba4 0403 	sub.w	r4, r4, r3
 8013b86:	d10a      	bne.n	8013b9e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8013b88:	9b02      	ldr	r3, [sp, #8]
 8013b8a:	44a0      	add	r8, r4
 8013b8c:	449c      	add	ip, r3
 8013b8e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013b92:	fb04 a40c 	mla	r4, r4, ip, sl
 8013b96:	80d4      	strh	r4, [r2, #6]
 8013b98:	b013      	add	sp, #76	; 0x4c
 8013b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9e:	9d05      	ldr	r5, [sp, #20]
 8013ba0:	1a69      	subs	r1, r5, r1
 8013ba2:	bf51      	iteee	pl
 8013ba4:	f1cc 0520 	rsbpl	r5, ip, #32
 8013ba8:	fb04 f40c 	mulmi.w	r4, r4, ip
 8013bac:	4249      	negmi	r1, r1
 8013bae:	2500      	movmi	r5, #0
 8013bb0:	bf5d      	ittte	pl
 8013bb2:	436c      	mulpl	r4, r5
 8013bb4:	2520      	movpl	r5, #32
 8013bb6:	f04f 0901 	movpl.w	r9, #1
 8013bba:	f04f 39ff 	movmi.w	r9, #4294967295
 8013bbe:	9501      	str	r5, [sp, #4]
 8013bc0:	9f01      	ldr	r7, [sp, #4]
 8013bc2:	444e      	add	r6, r9
 8013bc4:	fb94 f5f1 	sdiv	r5, r4, r1
 8013bc8:	fb01 4415 	mls	r4, r1, r5, r4
 8013bcc:	44bc      	add	ip, r7
 8013bce:	2c00      	cmp	r4, #0
 8013bd0:	bfbc      	itt	lt
 8013bd2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8013bd6:	1864      	addlt	r4, r4, r1
 8013bd8:	44a8      	add	r8, r5
 8013bda:	fb05 ac0c 	mla	ip, r5, ip, sl
 8013bde:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013be2:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013be6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013bea:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8013bee:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8013bf2:	ea58 0202 	orrs.w	r2, r8, r2
 8013bf6:	d011      	beq.n	8013c1c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013bf8:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8013bfc:	f1b8 0f00 	cmp.w	r8, #0
 8013c00:	db0c      	blt.n	8013c1c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013c02:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013c04:	4590      	cmp	r8, r2
 8013c06:	da09      	bge.n	8013c1c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8013c08:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8013c0c:	4590      	cmp	r8, r2
 8013c0e:	bf3c      	itt	cc
 8013c10:	f10c 0208 	addcc.w	r2, ip, #8
 8013c14:	6102      	strcc	r2, [r0, #16]
 8013c16:	f108 0201 	add.w	r2, r8, #1
 8013c1a:	6082      	str	r2, [r0, #8]
 8013c1c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013c20:	2700      	movs	r7, #0
 8013c22:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013c26:	45b6      	cmp	lr, r6
 8013c28:	f8ac 6000 	strh.w	r6, [ip]
 8013c2c:	442b      	add	r3, r5
 8013c2e:	f8ac 2002 	strh.w	r2, [ip, #2]
 8013c32:	f8ac 7004 	strh.w	r7, [ip, #4]
 8013c36:	f8ac 7006 	strh.w	r7, [ip, #6]
 8013c3a:	d04b      	beq.n	8013cd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8013c3c:	9f04      	ldr	r7, [sp, #16]
 8013c3e:	1a64      	subs	r4, r4, r1
 8013c40:	f04f 0a00 	mov.w	sl, #0
 8013c44:	1aff      	subs	r7, r7, r3
 8013c46:	443d      	add	r5, r7
 8013c48:	016d      	lsls	r5, r5, #5
 8013c4a:	fb95 f8f1 	sdiv	r8, r5, r1
 8013c4e:	fb01 5518 	mls	r5, r1, r8, r5
 8013c52:	2d00      	cmp	r5, #0
 8013c54:	bfbc      	itt	lt
 8013c56:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013c5a:	186d      	addlt	r5, r5, r1
 8013c5c:	f108 0701 	add.w	r7, r8, #1
 8013c60:	9703      	str	r7, [sp, #12]
 8013c62:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013c66:	1964      	adds	r4, r4, r5
 8013c68:	444e      	add	r6, r9
 8013c6a:	bf54      	ite	pl
 8013c6c:	9f03      	ldrpl	r7, [sp, #12]
 8013c6e:	4647      	movmi	r7, r8
 8013c70:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013c74:	bf58      	it	pl
 8013c76:	1a64      	subpl	r4, r4, r1
 8013c78:	443b      	add	r3, r7
 8013c7a:	44bb      	add	fp, r7
 8013c7c:	f8ac b004 	strh.w	fp, [ip, #4]
 8013c80:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013c84:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013c88:	f8ac b006 	strh.w	fp, [ip, #6]
 8013c8c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013c90:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013c94:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013c98:	ea5b 0707 	orrs.w	r7, fp, r7
 8013c9c:	d011      	beq.n	8013cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013c9e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8013ca2:	f1bb 0f00 	cmp.w	fp, #0
 8013ca6:	db0c      	blt.n	8013cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013ca8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8013caa:	45bb      	cmp	fp, r7
 8013cac:	da09      	bge.n	8013cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013cae:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013cb2:	45bb      	cmp	fp, r7
 8013cb4:	bf3c      	itt	cc
 8013cb6:	f10c 0708 	addcc.w	r7, ip, #8
 8013cba:	6107      	strcc	r7, [r0, #16]
 8013cbc:	f10b 0701 	add.w	r7, fp, #1
 8013cc0:	6087      	str	r7, [r0, #8]
 8013cc2:	6907      	ldr	r7, [r0, #16]
 8013cc4:	45b6      	cmp	lr, r6
 8013cc6:	803e      	strh	r6, [r7, #0]
 8013cc8:	807a      	strh	r2, [r7, #2]
 8013cca:	f8a7 a004 	strh.w	sl, [r7, #4]
 8013cce:	f8a7 a006 	strh.w	sl, [r7, #6]
 8013cd2:	d1c6      	bne.n	8013c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8013cd4:	9a04      	ldr	r2, [sp, #16]
 8013cd6:	1ad3      	subs	r3, r2, r3
 8013cd8:	6902      	ldr	r2, [r0, #16]
 8013cda:	8891      	ldrh	r1, [r2, #4]
 8013cdc:	88d6      	ldrh	r6, [r2, #6]
 8013cde:	4419      	add	r1, r3
 8013ce0:	8091      	strh	r1, [r2, #4]
 8013ce2:	9902      	ldr	r1, [sp, #8]
 8013ce4:	f101 0c20 	add.w	ip, r1, #32
 8013ce8:	9901      	ldr	r1, [sp, #4]
 8013cea:	ebac 0c01 	sub.w	ip, ip, r1
 8013cee:	fb03 630c 	mla	r3, r3, ip, r6
 8013cf2:	80d3      	strh	r3, [r2, #6]
 8013cf4:	e750      	b.n	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013cf6:	9d05      	ldr	r5, [sp, #20]
 8013cf8:	1aa2      	subs	r2, r4, r2
 8013cfa:	eba5 0501 	sub.w	r5, r5, r1
 8013cfe:	9202      	str	r2, [sp, #8]
 8013d00:	9508      	str	r5, [sp, #32]
 8013d02:	f140 8128 	bpl.w	8013f56 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8013d06:	9a03      	ldr	r2, [sp, #12]
 8013d08:	2a00      	cmp	r2, #0
 8013d0a:	f6ff af45 	blt.w	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013d0e:	9a02      	ldr	r2, [sp, #8]
 8013d10:	f04f 34ff 	mov.w	r4, #4294967295
 8013d14:	4252      	negs	r2, r2
 8013d16:	940b      	str	r4, [sp, #44]	; 0x2c
 8013d18:	2400      	movs	r4, #0
 8013d1a:	9202      	str	r2, [sp, #8]
 8013d1c:	9a06      	ldr	r2, [sp, #24]
 8013d1e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8013d22:	9206      	str	r2, [sp, #24]
 8013d24:	462a      	mov	r2, r5
 8013d26:	435a      	muls	r2, r3
 8013d28:	9401      	str	r4, [sp, #4]
 8013d2a:	9c02      	ldr	r4, [sp, #8]
 8013d2c:	9d02      	ldr	r5, [sp, #8]
 8013d2e:	fb92 f4f4 	sdiv	r4, r2, r4
 8013d32:	fb05 2214 	mls	r2, r5, r4, r2
 8013d36:	2a00      	cmp	r2, #0
 8013d38:	9207      	str	r2, [sp, #28]
 8013d3a:	bfbc      	itt	lt
 8013d3c:	1952      	addlt	r2, r2, r5
 8013d3e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8013d42:	6905      	ldr	r5, [r0, #16]
 8013d44:	bfb8      	it	lt
 8013d46:	9207      	strlt	r2, [sp, #28]
 8013d48:	eb04 0901 	add.w	r9, r4, r1
 8013d4c:	9a01      	ldr	r2, [sp, #4]
 8013d4e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8013d52:	429a      	cmp	r2, r3
 8013d54:	f040 8111 	bne.w	8013f7a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8013d58:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013d5c:	429e      	cmp	r6, r3
 8013d5e:	d104      	bne.n	8013d6a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8013d60:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013d64:	9a03      	ldr	r2, [sp, #12]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d01b      	beq.n	8013da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8013d6a:	88ea      	ldrh	r2, [r5, #6]
 8013d6c:	88ab      	ldrh	r3, [r5, #4]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	d010      	beq.n	8013d94 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013d72:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013d76:	2a00      	cmp	r2, #0
 8013d78:	db0c      	blt.n	8013d94 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	da09      	bge.n	8013d94 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013d80:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	f102 0201 	add.w	r2, r2, #1
 8013d8a:	bf38      	it	cc
 8013d8c:	3508      	addcc	r5, #8
 8013d8e:	6082      	str	r2, [r0, #8]
 8013d90:	bf38      	it	cc
 8013d92:	6105      	strcc	r5, [r0, #16]
 8013d94:	6903      	ldr	r3, [r0, #16]
 8013d96:	9a03      	ldr	r2, [sp, #12]
 8013d98:	801e      	strh	r6, [r3, #0]
 8013d9a:	805a      	strh	r2, [r3, #2]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	809a      	strh	r2, [r3, #4]
 8013da0:	80da      	strh	r2, [r3, #6]
 8013da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013da4:	9a03      	ldr	r2, [sp, #12]
 8013da6:	6901      	ldr	r1, [r0, #16]
 8013da8:	441a      	add	r2, r3
 8013daa:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013dae:	42b3      	cmp	r3, r6
 8013db0:	d103      	bne.n	8013dba <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8013db2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d01a      	beq.n	8013df0 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8013dba:	88cc      	ldrh	r4, [r1, #6]
 8013dbc:	888b      	ldrh	r3, [r1, #4]
 8013dbe:	4323      	orrs	r3, r4
 8013dc0:	d010      	beq.n	8013de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013dc2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013dc6:	2c00      	cmp	r4, #0
 8013dc8:	db0c      	blt.n	8013de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013dca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013dcc:	429c      	cmp	r4, r3
 8013dce:	da09      	bge.n	8013de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8013dd0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013dd4:	429c      	cmp	r4, r3
 8013dd6:	f104 0401 	add.w	r4, r4, #1
 8013dda:	bf38      	it	cc
 8013ddc:	3108      	addcc	r1, #8
 8013dde:	6084      	str	r4, [r0, #8]
 8013de0:	bf38      	it	cc
 8013de2:	6101      	strcc	r1, [r0, #16]
 8013de4:	6903      	ldr	r3, [r0, #16]
 8013de6:	2100      	movs	r1, #0
 8013de8:	801e      	strh	r6, [r3, #0]
 8013dea:	805a      	strh	r2, [r3, #2]
 8013dec:	8099      	strh	r1, [r3, #4]
 8013dee:	80d9      	strh	r1, [r3, #6]
 8013df0:	9b06      	ldr	r3, [sp, #24]
 8013df2:	4293      	cmp	r3, r2
 8013df4:	f000 8082 	beq.w	8013efc <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8013df8:	9b08      	ldr	r3, [sp, #32]
 8013dfa:	9902      	ldr	r1, [sp, #8]
 8013dfc:	015b      	lsls	r3, r3, #5
 8013dfe:	9c02      	ldr	r4, [sp, #8]
 8013e00:	fb93 f1f1 	sdiv	r1, r3, r1
 8013e04:	fb04 3311 	mls	r3, r4, r1, r3
 8013e08:	9103      	str	r1, [sp, #12]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	9308      	str	r3, [sp, #32]
 8013e0e:	da04      	bge.n	8013e1a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8013e10:	1e4b      	subs	r3, r1, #1
 8013e12:	9303      	str	r3, [sp, #12]
 8013e14:	9b08      	ldr	r3, [sp, #32]
 8013e16:	4423      	add	r3, r4
 8013e18:	9308      	str	r3, [sp, #32]
 8013e1a:	9b07      	ldr	r3, [sp, #28]
 8013e1c:	464f      	mov	r7, r9
 8013e1e:	9902      	ldr	r1, [sp, #8]
 8013e20:	2600      	movs	r6, #0
 8013e22:	1a5b      	subs	r3, r3, r1
 8013e24:	9307      	str	r3, [sp, #28]
 8013e26:	9b01      	ldr	r3, [sp, #4]
 8013e28:	f1c3 0320 	rsb	r3, r3, #32
 8013e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8013e2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013e30:	9b01      	ldr	r3, [sp, #4]
 8013e32:	1a5b      	subs	r3, r3, r1
 8013e34:	930a      	str	r3, [sp, #40]	; 0x28
 8013e36:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8013e3a:	185b      	adds	r3, r3, r1
 8013e3c:	bf58      	it	pl
 8013e3e:	9902      	ldrpl	r1, [sp, #8]
 8013e40:	9307      	str	r3, [sp, #28]
 8013e42:	bf57      	itett	pl
 8013e44:	1a5b      	subpl	r3, r3, r1
 8013e46:	9903      	ldrmi	r1, [sp, #12]
 8013e48:	9307      	strpl	r3, [sp, #28]
 8013e4a:	9b03      	ldrpl	r3, [sp, #12]
 8013e4c:	bf58      	it	pl
 8013e4e:	1c59      	addpl	r1, r3, #1
 8013e50:	2a00      	cmp	r2, #0
 8013e52:	4489      	add	r9, r1
 8013e54:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8013e58:	db2e      	blt.n	8013eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013e5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	dd2b      	ble.n	8013eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013e60:	9c01      	ldr	r4, [sp, #4]
 8013e62:	6905      	ldr	r5, [r0, #16]
 8013e64:	46a0      	mov	r8, r4
 8013e66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013e68:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8013e6c:	45a0      	cmp	r8, r4
 8013e6e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8013e72:	f040 814c 	bne.w	801410e <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8013e76:	f9b5 1000 	ldrsh.w	r1, [r5]
 8013e7a:	4551      	cmp	r1, sl
 8013e7c:	d103      	bne.n	8013e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8013e7e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013e82:	4291      	cmp	r1, r2
 8013e84:	d018      	beq.n	8013eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013e86:	ea5c 010e 	orrs.w	r1, ip, lr
 8013e8a:	d00f      	beq.n	8013eac <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013e8c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013e90:	2900      	cmp	r1, #0
 8013e92:	db0b      	blt.n	8013eac <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013e94:	428b      	cmp	r3, r1
 8013e96:	dd09      	ble.n	8013eac <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013e98:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8013e9c:	4299      	cmp	r1, r3
 8013e9e:	f101 0101 	add.w	r1, r1, #1
 8013ea2:	bf38      	it	cc
 8013ea4:	3508      	addcc	r5, #8
 8013ea6:	6081      	str	r1, [r0, #8]
 8013ea8:	bf38      	it	cc
 8013eaa:	6105      	strcc	r5, [r0, #16]
 8013eac:	6903      	ldr	r3, [r0, #16]
 8013eae:	f8a3 a000 	strh.w	sl, [r3]
 8013eb2:	805a      	strh	r2, [r3, #2]
 8013eb4:	809e      	strh	r6, [r3, #4]
 8013eb6:	80de      	strh	r6, [r3, #6]
 8013eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eba:	6901      	ldr	r1, [r0, #16]
 8013ebc:	441a      	add	r2, r3
 8013ebe:	88cc      	ldrh	r4, [r1, #6]
 8013ec0:	888b      	ldrh	r3, [r1, #4]
 8013ec2:	4323      	orrs	r3, r4
 8013ec4:	d010      	beq.n	8013ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013ec6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013eca:	2c00      	cmp	r4, #0
 8013ecc:	db0c      	blt.n	8013ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013ece:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013ed0:	429c      	cmp	r4, r3
 8013ed2:	da09      	bge.n	8013ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8013ed4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013ed8:	429c      	cmp	r4, r3
 8013eda:	f104 0401 	add.w	r4, r4, #1
 8013ede:	bf38      	it	cc
 8013ee0:	3108      	addcc	r1, #8
 8013ee2:	6084      	str	r4, [r0, #8]
 8013ee4:	bf38      	it	cc
 8013ee6:	6101      	strcc	r1, [r0, #16]
 8013ee8:	6903      	ldr	r3, [r0, #16]
 8013eea:	464f      	mov	r7, r9
 8013eec:	f8a3 a000 	strh.w	sl, [r3]
 8013ef0:	805a      	strh	r2, [r3, #2]
 8013ef2:	809e      	strh	r6, [r3, #4]
 8013ef4:	80de      	strh	r6, [r3, #6]
 8013ef6:	9b06      	ldr	r3, [sp, #24]
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d19c      	bne.n	8013e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8013efc:	9b01      	ldr	r3, [sp, #4]
 8013efe:	6907      	ldr	r7, [r0, #16]
 8013f00:	f1c3 0620 	rsb	r6, r3, #32
 8013f04:	9b05      	ldr	r3, [sp, #20]
 8013f06:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8013f0a:	9b04      	ldr	r3, [sp, #16]
 8013f0c:	429e      	cmp	r6, r3
 8013f0e:	f040 81c7 	bne.w	80142a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8013f12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f16:	459e      	cmp	lr, r3
 8013f18:	d104      	bne.n	8013f24 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8013f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	f43f ae3a 	beq.w	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013f24:	88f9      	ldrh	r1, [r7, #6]
 8013f26:	88bb      	ldrh	r3, [r7, #4]
 8013f28:	430b      	orrs	r3, r1
 8013f2a:	d010      	beq.n	8013f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013f2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	db0c      	blt.n	8013f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013f34:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013f36:	428b      	cmp	r3, r1
 8013f38:	da09      	bge.n	8013f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013f3a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013f3e:	428b      	cmp	r3, r1
 8013f40:	f103 0301 	add.w	r3, r3, #1
 8013f44:	bf38      	it	cc
 8013f46:	3708      	addcc	r7, #8
 8013f48:	6083      	str	r3, [r0, #8]
 8013f4a:	bf38      	it	cc
 8013f4c:	6107      	strcc	r7, [r0, #16]
 8013f4e:	6903      	ldr	r3, [r0, #16]
 8013f50:	f8a3 e000 	strh.w	lr, [r3]
 8013f54:	e603      	b.n	8013b5e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8013f56:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013f58:	9c03      	ldr	r4, [sp, #12]
 8013f5a:	42a2      	cmp	r2, r4
 8013f5c:	f6ff ae1c 	blt.w	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013f60:	9c06      	ldr	r4, [sp, #24]
 8013f62:	42a2      	cmp	r2, r4
 8013f64:	9c08      	ldr	r4, [sp, #32]
 8013f66:	bfbc      	itt	lt
 8013f68:	3201      	addlt	r2, #1
 8013f6a:	9206      	strlt	r2, [sp, #24]
 8013f6c:	f1c3 0220 	rsb	r2, r3, #32
 8013f70:	4362      	muls	r2, r4
 8013f72:	2401      	movs	r4, #1
 8013f74:	940b      	str	r4, [sp, #44]	; 0x2c
 8013f76:	2420      	movs	r4, #32
 8013f78:	e6d6      	b.n	8013d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8013f7a:	ea4f 1861 	mov.w	r8, r1, asr #5
 8013f7e:	f009 021f 	and.w	r2, r9, #31
 8013f82:	f001 011f 	and.w	r1, r1, #31
 8013f86:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8013f8a:	920c      	str	r2, [sp, #48]	; 0x30
 8013f8c:	45b0      	cmp	r8, r6
 8013f8e:	9a01      	ldr	r2, [sp, #4]
 8013f90:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8013f94:	eba2 0203 	sub.w	r2, r2, r3
 8013f98:	d108      	bne.n	8013fac <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8013f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f9c:	4496      	add	lr, r2
 8013f9e:	4419      	add	r1, r3
 8013fa0:	f8a5 e004 	strh.w	lr, [r5, #4]
 8013fa4:	fb02 a101 	mla	r1, r2, r1, sl
 8013fa8:	80e9      	strh	r1, [r5, #6]
 8013faa:	e6fa      	b.n	8013da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8013fac:	2c00      	cmp	r4, #0
 8013fae:	f2c0 80a7 	blt.w	8014100 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8013fb2:	2701      	movs	r7, #1
 8013fb4:	f1c1 0c20 	rsb	ip, r1, #32
 8013fb8:	970a      	str	r7, [sp, #40]	; 0x28
 8013fba:	2720      	movs	r7, #32
 8013fbc:	fb02 f20c 	mul.w	r2, r2, ip
 8013fc0:	9709      	str	r7, [sp, #36]	; 0x24
 8013fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013fc4:	fb92 fcf4 	sdiv	ip, r2, r4
 8013fc8:	fb04 221c 	mls	r2, r4, ip, r2
 8013fcc:	4439      	add	r1, r7
 8013fce:	2a00      	cmp	r2, #0
 8013fd0:	bfbc      	itt	lt
 8013fd2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8013fd6:	1912      	addlt	r2, r2, r4
 8013fd8:	fb0c a101 	mla	r1, ip, r1, sl
 8013fdc:	44e6      	add	lr, ip
 8013fde:	80e9      	strh	r1, [r5, #6]
 8013fe0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013fe2:	f8a5 e004 	strh.w	lr, [r5, #4]
 8013fe6:	eb08 0501 	add.w	r5, r8, r1
 8013fea:	6901      	ldr	r1, [r0, #16]
 8013fec:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8013ff0:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8013ff4:	ea58 070e 	orrs.w	r7, r8, lr
 8013ff8:	d010      	beq.n	801401c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8013ffa:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8013ffe:	f1be 0f00 	cmp.w	lr, #0
 8014002:	db0b      	blt.n	801401c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014004:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014006:	45be      	cmp	lr, r7
 8014008:	da08      	bge.n	801401c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801400a:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801400e:	45be      	cmp	lr, r7
 8014010:	bf3c      	itt	cc
 8014012:	3108      	addcc	r1, #8
 8014014:	6101      	strcc	r1, [r0, #16]
 8014016:	f10e 0101 	add.w	r1, lr, #1
 801401a:	6081      	str	r1, [r0, #8]
 801401c:	6901      	ldr	r1, [r0, #16]
 801401e:	f04f 0e00 	mov.w	lr, #0
 8014022:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8014026:	42ae      	cmp	r6, r5
 8014028:	800d      	strh	r5, [r1, #0]
 801402a:	4463      	add	r3, ip
 801402c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8014030:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014034:	f8a1 e006 	strh.w	lr, [r1, #6]
 8014038:	d053      	beq.n	80140e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801403a:	9901      	ldr	r1, [sp, #4]
 801403c:	1b12      	subs	r2, r2, r4
 801403e:	1ac9      	subs	r1, r1, r3
 8014040:	4461      	add	r1, ip
 8014042:	0149      	lsls	r1, r1, #5
 8014044:	fb91 fef4 	sdiv	lr, r1, r4
 8014048:	fb04 111e 	mls	r1, r4, lr, r1
 801404c:	2900      	cmp	r1, #0
 801404e:	bfbc      	itt	lt
 8014050:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014054:	1909      	addlt	r1, r1, r4
 8014056:	f10e 0701 	add.w	r7, lr, #1
 801405a:	970d      	str	r7, [sp, #52]	; 0x34
 801405c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014060:	1852      	adds	r2, r2, r1
 8014062:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014064:	bf54      	ite	pl
 8014066:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801406a:	46f4      	movmi	ip, lr
 801406c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014070:	bf58      	it	pl
 8014072:	1b12      	subpl	r2, r2, r4
 8014074:	4463      	add	r3, ip
 8014076:	443d      	add	r5, r7
 8014078:	44e3      	add	fp, ip
 801407a:	f8aa b004 	strh.w	fp, [sl, #4]
 801407e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8014082:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014086:	f8aa b006 	strh.w	fp, [sl, #6]
 801408a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801408e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014092:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014096:	ea5b 070a 	orrs.w	r7, fp, sl
 801409a:	d014      	beq.n	80140c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801409c:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80140a0:	f1ba 0f00 	cmp.w	sl, #0
 80140a4:	db0f      	blt.n	80140c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80140a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80140a8:	45ba      	cmp	sl, r7
 80140aa:	da0c      	bge.n	80140c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80140ac:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80140b0:	45ba      	cmp	sl, r7
 80140b2:	f10a 0a01 	add.w	sl, sl, #1
 80140b6:	bf38      	it	cc
 80140b8:	f10c 0c08 	addcc.w	ip, ip, #8
 80140bc:	f8c0 a008 	str.w	sl, [r0, #8]
 80140c0:	bf38      	it	cc
 80140c2:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80140c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140ca:	f04f 0700 	mov.w	r7, #0
 80140ce:	42ae      	cmp	r6, r5
 80140d0:	f8ac 5000 	strh.w	r5, [ip]
 80140d4:	f8ac 8002 	strh.w	r8, [ip, #2]
 80140d8:	f8ac 7004 	strh.w	r7, [ip, #4]
 80140dc:	f8ac 7006 	strh.w	r7, [ip, #6]
 80140e0:	d1bc      	bne.n	801405c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80140e2:	6904      	ldr	r4, [r0, #16]
 80140e4:	9a01      	ldr	r2, [sp, #4]
 80140e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	88a2      	ldrh	r2, [r4, #4]
 80140ec:	3120      	adds	r1, #32
 80140ee:	441a      	add	r2, r3
 80140f0:	80a2      	strh	r2, [r4, #4]
 80140f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140f4:	1a89      	subs	r1, r1, r2
 80140f6:	88e2      	ldrh	r2, [r4, #6]
 80140f8:	fb03 2301 	mla	r3, r3, r1, r2
 80140fc:	80e3      	strh	r3, [r4, #6]
 80140fe:	e650      	b.n	8013da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014100:	f04f 37ff 	mov.w	r7, #4294967295
 8014104:	434a      	muls	r2, r1
 8014106:	4264      	negs	r4, r4
 8014108:	970a      	str	r7, [sp, #40]	; 0x28
 801410a:	2700      	movs	r7, #0
 801410c:	e758      	b.n	8013fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801410e:	ea4f 1867 	mov.w	r8, r7, asr #5
 8014112:	f009 031f 	and.w	r3, r9, #31
 8014116:	f007 071f 	and.w	r7, r7, #31
 801411a:	fa1f fc8c 	uxth.w	ip, ip
 801411e:	45d0      	cmp	r8, sl
 8014120:	930f      	str	r3, [sp, #60]	; 0x3c
 8014122:	fa1f fe8e 	uxth.w	lr, lr
 8014126:	d10a      	bne.n	801413e <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801412a:	449c      	add	ip, r3
 801412c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801412e:	441f      	add	r7, r3
 8014130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014132:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014136:	fb03 e707 	mla	r7, r3, r7, lr
 801413a:	80ef      	strh	r7, [r5, #6]
 801413c:	e6bc      	b.n	8013eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801413e:	2900      	cmp	r1, #0
 8014140:	f2c0 80a6 	blt.w	8014290 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014144:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014146:	f1c7 0320 	rsb	r3, r7, #32
 801414a:	4363      	muls	r3, r4
 801414c:	2401      	movs	r4, #1
 801414e:	940d      	str	r4, [sp, #52]	; 0x34
 8014150:	2420      	movs	r4, #32
 8014152:	940c      	str	r4, [sp, #48]	; 0x30
 8014154:	fb93 f4f1 	sdiv	r4, r3, r1
 8014158:	fb01 3b14 	mls	fp, r1, r4, r3
 801415c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801415e:	f1bb 0f00 	cmp.w	fp, #0
 8014162:	441f      	add	r7, r3
 8014164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014166:	bfbc      	itt	lt
 8014168:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801416c:	448b      	addlt	fp, r1
 801416e:	fb04 e707 	mla	r7, r4, r7, lr
 8014172:	44a4      	add	ip, r4
 8014174:	80ef      	strh	r7, [r5, #6]
 8014176:	f8a5 c004 	strh.w	ip, [r5, #4]
 801417a:	eb08 0503 	add.w	r5, r8, r3
 801417e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014182:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014186:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801418a:	ea5e 0307 	orrs.w	r3, lr, r7
 801418e:	d011      	beq.n	80141b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014190:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014194:	f1be 0f00 	cmp.w	lr, #0
 8014198:	db0c      	blt.n	80141b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801419a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801419c:	45be      	cmp	lr, r7
 801419e:	da09      	bge.n	80141b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80141a0:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80141a4:	45be      	cmp	lr, r7
 80141a6:	bf3c      	itt	cc
 80141a8:	f10c 0708 	addcc.w	r7, ip, #8
 80141ac:	6107      	strcc	r7, [r0, #16]
 80141ae:	f10e 0701 	add.w	r7, lr, #1
 80141b2:	6087      	str	r7, [r0, #8]
 80141b4:	6907      	ldr	r7, [r0, #16]
 80141b6:	b213      	sxth	r3, r2
 80141b8:	4555      	cmp	r5, sl
 80141ba:	9310      	str	r3, [sp, #64]	; 0x40
 80141bc:	807b      	strh	r3, [r7, #2]
 80141be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141c0:	803d      	strh	r5, [r7, #0]
 80141c2:	80be      	strh	r6, [r7, #4]
 80141c4:	eb04 0c03 	add.w	ip, r4, r3
 80141c8:	80fe      	strh	r6, [r7, #6]
 80141ca:	d050      	beq.n	801426e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80141cc:	9b01      	ldr	r3, [sp, #4]
 80141ce:	eba3 070c 	sub.w	r7, r3, ip
 80141d2:	ebab 0301 	sub.w	r3, fp, r1
 80141d6:	443c      	add	r4, r7
 80141d8:	9309      	str	r3, [sp, #36]	; 0x24
 80141da:	0164      	lsls	r4, r4, #5
 80141dc:	fb94 f8f1 	sdiv	r8, r4, r1
 80141e0:	fb01 4418 	mls	r4, r1, r8, r4
 80141e4:	2c00      	cmp	r4, #0
 80141e6:	bfbc      	itt	lt
 80141e8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80141ec:	1864      	addlt	r4, r4, r1
 80141ee:	f108 0701 	add.w	r7, r8, #1
 80141f2:	9711      	str	r7, [sp, #68]	; 0x44
 80141f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80141fa:	191b      	adds	r3, r3, r4
 80141fc:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014200:	bf54      	ite	pl
 8014202:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8014204:	4647      	movmi	r7, r8
 8014206:	9309      	str	r3, [sp, #36]	; 0x24
 8014208:	bf58      	it	pl
 801420a:	1a5b      	subpl	r3, r3, r1
 801420c:	44bb      	add	fp, r7
 801420e:	44bc      	add	ip, r7
 8014210:	bf58      	it	pl
 8014212:	9309      	strpl	r3, [sp, #36]	; 0x24
 8014214:	f8ae b004 	strh.w	fp, [lr, #4]
 8014218:	f8be b006 	ldrh.w	fp, [lr, #6]
 801421c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014220:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014222:	f8ae b006 	strh.w	fp, [lr, #6]
 8014226:	443d      	add	r5, r7
 8014228:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801422c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014230:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014234:	ea5b 0307 	orrs.w	r3, fp, r7
 8014238:	d011      	beq.n	801425e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801423a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801423e:	f1bb 0f00 	cmp.w	fp, #0
 8014242:	db0c      	blt.n	801425e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014244:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014246:	45bb      	cmp	fp, r7
 8014248:	da09      	bge.n	801425e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801424a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801424e:	45bb      	cmp	fp, r7
 8014250:	bf3c      	itt	cc
 8014252:	f10e 0708 	addcc.w	r7, lr, #8
 8014256:	6107      	strcc	r7, [r0, #16]
 8014258:	f10b 0701 	add.w	r7, fp, #1
 801425c:	6087      	str	r7, [r0, #8]
 801425e:	6907      	ldr	r7, [r0, #16]
 8014260:	4555      	cmp	r5, sl
 8014262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014264:	803d      	strh	r5, [r7, #0]
 8014266:	807b      	strh	r3, [r7, #2]
 8014268:	80be      	strh	r6, [r7, #4]
 801426a:	80fe      	strh	r6, [r7, #6]
 801426c:	d1c2      	bne.n	80141f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801426e:	9b01      	ldr	r3, [sp, #4]
 8014270:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014272:	eba3 0c0c 	sub.w	ip, r3, ip
 8014276:	6903      	ldr	r3, [r0, #16]
 8014278:	3720      	adds	r7, #32
 801427a:	8899      	ldrh	r1, [r3, #4]
 801427c:	4461      	add	r1, ip
 801427e:	8099      	strh	r1, [r3, #4]
 8014280:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014282:	1a7f      	subs	r7, r7, r1
 8014284:	88d9      	ldrh	r1, [r3, #6]
 8014286:	fb0c 1c07 	mla	ip, ip, r7, r1
 801428a:	f8a3 c006 	strh.w	ip, [r3, #6]
 801428e:	e613      	b.n	8013eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014290:	f04f 34ff 	mov.w	r4, #4294967295
 8014294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014296:	4249      	negs	r1, r1
 8014298:	940d      	str	r4, [sp, #52]	; 0x34
 801429a:	2400      	movs	r4, #0
 801429c:	437b      	muls	r3, r7
 801429e:	e758      	b.n	8014152 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80142a0:	9905      	ldr	r1, [sp, #20]
 80142a2:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80142a6:	f009 0c1f 	and.w	ip, r9, #31
 80142aa:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80142ae:	f001 011f 	and.w	r1, r1, #31
 80142b2:	45f3      	cmp	fp, lr
 80142b4:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80142b8:	9102      	str	r1, [sp, #8]
 80142ba:	9904      	ldr	r1, [sp, #16]
 80142bc:	eba1 0406 	sub.w	r4, r1, r6
 80142c0:	d108      	bne.n	80142d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80142c2:	9b02      	ldr	r3, [sp, #8]
 80142c4:	44a0      	add	r8, r4
 80142c6:	449c      	add	ip, r3
 80142c8:	f8a7 8004 	strh.w	r8, [r7, #4]
 80142cc:	fb04 a40c 	mla	r4, r4, ip, sl
 80142d0:	80fc      	strh	r4, [r7, #6]
 80142d2:	e461      	b.n	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80142d4:	9905      	ldr	r1, [sp, #20]
 80142d6:	ebb1 0109 	subs.w	r1, r1, r9
 80142da:	bf51      	iteee	pl
 80142dc:	f1cc 0520 	rsbpl	r5, ip, #32
 80142e0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80142e4:	4249      	negmi	r1, r1
 80142e6:	2500      	movmi	r5, #0
 80142e8:	bf5d      	ittte	pl
 80142ea:	436c      	mulpl	r4, r5
 80142ec:	2520      	movpl	r5, #32
 80142ee:	f04f 0901 	movpl.w	r9, #1
 80142f2:	f04f 39ff 	movmi.w	r9, #4294967295
 80142f6:	9501      	str	r5, [sp, #4]
 80142f8:	9b01      	ldr	r3, [sp, #4]
 80142fa:	fb94 f5f1 	sdiv	r5, r4, r1
 80142fe:	fb01 4415 	mls	r4, r1, r5, r4
 8014302:	449c      	add	ip, r3
 8014304:	eb0b 0309 	add.w	r3, fp, r9
 8014308:	2c00      	cmp	r4, #0
 801430a:	bfbc      	itt	lt
 801430c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014310:	1864      	addlt	r4, r4, r1
 8014312:	44a8      	add	r8, r5
 8014314:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014318:	f8a7 8004 	strh.w	r8, [r7, #4]
 801431c:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014320:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014324:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014328:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801432c:	ea58 0707 	orrs.w	r7, r8, r7
 8014330:	d011      	beq.n	8014356 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014332:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014336:	f1b8 0f00 	cmp.w	r8, #0
 801433a:	db0c      	blt.n	8014356 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801433c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801433e:	45b8      	cmp	r8, r7
 8014340:	da09      	bge.n	8014356 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014342:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8014346:	45b8      	cmp	r8, r7
 8014348:	bf3c      	itt	cc
 801434a:	f10c 0708 	addcc.w	r7, ip, #8
 801434e:	6107      	strcc	r7, [r0, #16]
 8014350:	f108 0701 	add.w	r7, r8, #1
 8014354:	6087      	str	r7, [r0, #8]
 8014356:	6907      	ldr	r7, [r0, #16]
 8014358:	f04f 0c00 	mov.w	ip, #0
 801435c:	b212      	sxth	r2, r2
 801435e:	459e      	cmp	lr, r3
 8014360:	803b      	strh	r3, [r7, #0]
 8014362:	442e      	add	r6, r5
 8014364:	807a      	strh	r2, [r7, #2]
 8014366:	f8a7 c004 	strh.w	ip, [r7, #4]
 801436a:	f8a7 c006 	strh.w	ip, [r7, #6]
 801436e:	d04b      	beq.n	8014408 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8014370:	9f04      	ldr	r7, [sp, #16]
 8014372:	1a64      	subs	r4, r4, r1
 8014374:	f04f 0a00 	mov.w	sl, #0
 8014378:	1bbf      	subs	r7, r7, r6
 801437a:	443d      	add	r5, r7
 801437c:	016d      	lsls	r5, r5, #5
 801437e:	fb95 f8f1 	sdiv	r8, r5, r1
 8014382:	fb01 5518 	mls	r5, r1, r8, r5
 8014386:	4565      	cmp	r5, ip
 8014388:	bfbc      	itt	lt
 801438a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801438e:	186d      	addlt	r5, r5, r1
 8014390:	f108 0701 	add.w	r7, r8, #1
 8014394:	9703      	str	r7, [sp, #12]
 8014396:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801439a:	1964      	adds	r4, r4, r5
 801439c:	444b      	add	r3, r9
 801439e:	bf54      	ite	pl
 80143a0:	9f03      	ldrpl	r7, [sp, #12]
 80143a2:	4647      	movmi	r7, r8
 80143a4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80143a8:	bf58      	it	pl
 80143aa:	1a64      	subpl	r4, r4, r1
 80143ac:	443e      	add	r6, r7
 80143ae:	44bb      	add	fp, r7
 80143b0:	f8ac b004 	strh.w	fp, [ip, #4]
 80143b4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80143b8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80143bc:	f8ac b006 	strh.w	fp, [ip, #6]
 80143c0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80143c4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80143c8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80143cc:	ea5b 0707 	orrs.w	r7, fp, r7
 80143d0:	d011      	beq.n	80143f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80143d2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80143d6:	f1bb 0f00 	cmp.w	fp, #0
 80143da:	db0c      	blt.n	80143f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80143dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80143de:	45bb      	cmp	fp, r7
 80143e0:	da09      	bge.n	80143f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80143e2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80143e6:	45bb      	cmp	fp, r7
 80143e8:	bf3c      	itt	cc
 80143ea:	f10c 0708 	addcc.w	r7, ip, #8
 80143ee:	6107      	strcc	r7, [r0, #16]
 80143f0:	f10b 0701 	add.w	r7, fp, #1
 80143f4:	6087      	str	r7, [r0, #8]
 80143f6:	6907      	ldr	r7, [r0, #16]
 80143f8:	459e      	cmp	lr, r3
 80143fa:	803b      	strh	r3, [r7, #0]
 80143fc:	807a      	strh	r2, [r7, #2]
 80143fe:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014402:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014406:	d1c6      	bne.n	8014396 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014408:	9b04      	ldr	r3, [sp, #16]
 801440a:	1b9e      	subs	r6, r3, r6
 801440c:	6903      	ldr	r3, [r0, #16]
 801440e:	889a      	ldrh	r2, [r3, #4]
 8014410:	4432      	add	r2, r6
 8014412:	809a      	strh	r2, [r3, #4]
 8014414:	9a02      	ldr	r2, [sp, #8]
 8014416:	f102 0c20 	add.w	ip, r2, #32
 801441a:	9a01      	ldr	r2, [sp, #4]
 801441c:	ebac 0c02 	sub.w	ip, ip, r2
 8014420:	88da      	ldrh	r2, [r3, #6]
 8014422:	fb06 260c 	mla	r6, r6, ip, r2
 8014426:	80de      	strh	r6, [r3, #6]
 8014428:	f7ff bbb6 	b.w	8013b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801442c <_ZN8touchgfx7Outline6lineToEii>:
 801442c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801442e:	079b      	lsls	r3, r3, #30
 8014430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014432:	460e      	mov	r6, r1
 8014434:	4615      	mov	r5, r2
 8014436:	d511      	bpl.n	801445c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014438:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801443c:	ea86 0701 	eor.w	r7, r6, r1
 8014440:	ea85 0302 	eor.w	r3, r5, r2
 8014444:	433b      	orrs	r3, r7
 8014446:	d009      	beq.n	801445c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014448:	4633      	mov	r3, r6
 801444a:	9500      	str	r5, [sp, #0]
 801444c:	f7ff fb4c 	bl	8013ae8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8014450:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014452:	f043 0301 	orr.w	r3, r3, #1
 8014456:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801445a:	6243      	str	r3, [r0, #36]	; 0x24
 801445c:	b003      	add	sp, #12
 801445e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014460 <_ZN8touchgfx7Outline6moveToEii>:
 8014460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014462:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014464:	4615      	mov	r5, r2
 8014466:	4604      	mov	r4, r0
 8014468:	460e      	mov	r6, r1
 801446a:	079a      	lsls	r2, r3, #30
 801446c:	d401      	bmi.n	8014472 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801446e:	f7ff fb07 	bl	8013a80 <_ZN8touchgfx7Outline5resetEv>
 8014472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014474:	07db      	lsls	r3, r3, #31
 8014476:	d504      	bpl.n	8014482 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014478:	4620      	mov	r0, r4
 801447a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801447e:	f7ff ffd5 	bl	801442c <_ZN8touchgfx7Outline6lineToEii>
 8014482:	6923      	ldr	r3, [r4, #16]
 8014484:	1170      	asrs	r0, r6, #5
 8014486:	1169      	asrs	r1, r5, #5
 8014488:	f9b3 2000 	ldrsh.w	r2, [r3]
 801448c:	4290      	cmp	r0, r2
 801448e:	d103      	bne.n	8014498 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014490:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014494:	4291      	cmp	r1, r2
 8014496:	d01a      	beq.n	80144ce <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014498:	88df      	ldrh	r7, [r3, #6]
 801449a:	889a      	ldrh	r2, [r3, #4]
 801449c:	433a      	orrs	r2, r7
 801449e:	d010      	beq.n	80144c2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80144a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80144a4:	2a00      	cmp	r2, #0
 80144a6:	db0c      	blt.n	80144c2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80144a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80144aa:	42ba      	cmp	r2, r7
 80144ac:	da09      	bge.n	80144c2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80144ae:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80144b2:	42ba      	cmp	r2, r7
 80144b4:	f102 0201 	add.w	r2, r2, #1
 80144b8:	bf38      	it	cc
 80144ba:	3308      	addcc	r3, #8
 80144bc:	60a2      	str	r2, [r4, #8]
 80144be:	bf38      	it	cc
 80144c0:	6123      	strcc	r3, [r4, #16]
 80144c2:	6923      	ldr	r3, [r4, #16]
 80144c4:	2200      	movs	r2, #0
 80144c6:	8018      	strh	r0, [r3, #0]
 80144c8:	8059      	strh	r1, [r3, #2]
 80144ca:	809a      	strh	r2, [r3, #4]
 80144cc:	80da      	strh	r2, [r3, #6]
 80144ce:	6166      	str	r6, [r4, #20]
 80144d0:	6225      	str	r5, [r4, #32]
 80144d2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80144d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80144d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144dc:	b0d0      	sub	sp, #320	; 0x140
 80144de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80144e2:	466c      	mov	r4, sp
 80144e4:	4627      	mov	r7, r4
 80144e6:	1a0d      	subs	r5, r1, r0
 80144e8:	f100 0308 	add.w	r3, r0, #8
 80144ec:	2d48      	cmp	r5, #72	; 0x48
 80144ee:	f340 80d5 	ble.w	801469c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80144f2:	112d      	asrs	r5, r5, #4
 80144f4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80144f8:	f9b0 9000 	ldrsh.w	r9, [r0]
 80144fc:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8014500:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014504:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014508:	6816      	ldr	r6, [r2, #0]
 801450a:	6006      	str	r6, [r0, #0]
 801450c:	6856      	ldr	r6, [r2, #4]
 801450e:	6046      	str	r6, [r0, #4]
 8014510:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014514:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014518:	f8a2 e004 	strh.w	lr, [r2, #4]
 801451c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014520:	f1a1 0208 	sub.w	r2, r1, #8
 8014524:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014528:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801452c:	4565      	cmp	r5, ip
 801452e:	db06      	blt.n	801453e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8014530:	d119      	bne.n	8014566 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014532:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8014536:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801453a:	42ae      	cmp	r6, r5
 801453c:	dd13      	ble.n	8014566 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801453e:	460e      	mov	r6, r1
 8014540:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8014544:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014548:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801454c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014550:	601d      	str	r5, [r3, #0]
 8014552:	6875      	ldr	r5, [r6, #4]
 8014554:	605d      	str	r5, [r3, #4]
 8014556:	f821 9c08 	strh.w	r9, [r1, #-8]
 801455a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801455e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014562:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014566:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801456a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801456e:	42ae      	cmp	r6, r5
 8014570:	db06      	blt.n	8014580 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014572:	d116      	bne.n	80145a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014574:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014578:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801457c:	45ac      	cmp	ip, r5
 801457e:	da10      	bge.n	80145a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014580:	681d      	ldr	r5, [r3, #0]
 8014582:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014586:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801458a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801458e:	6005      	str	r5, [r0, #0]
 8014590:	685d      	ldr	r5, [r3, #4]
 8014592:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014596:	6045      	str	r5, [r0, #4]
 8014598:	8146      	strh	r6, [r0, #10]
 801459a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801459e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80145a2:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80145a6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80145aa:	4565      	cmp	r5, ip
 80145ac:	db06      	blt.n	80145bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80145ae:	d119      	bne.n	80145e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80145b0:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80145b4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80145b8:	42ae      	cmp	r6, r5
 80145ba:	da13      	bge.n	80145e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80145bc:	460e      	mov	r6, r1
 80145be:	f9b0 9000 	ldrsh.w	r9, [r0]
 80145c2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80145c6:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80145ca:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80145ce:	6005      	str	r5, [r0, #0]
 80145d0:	6875      	ldr	r5, [r6, #4]
 80145d2:	6045      	str	r5, [r0, #4]
 80145d4:	f821 9c08 	strh.w	r9, [r1, #-8]
 80145d8:	f821 cc06 	strh.w	ip, [r1, #-6]
 80145dc:	f821 8c04 	strh.w	r8, [r1, #-4]
 80145e0:	f821 ec02 	strh.w	lr, [r1, #-2]
 80145e4:	3308      	adds	r3, #8
 80145e6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80145ea:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80145ee:	45e6      	cmp	lr, ip
 80145f0:	dbf8      	blt.n	80145e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80145f2:	d105      	bne.n	8014600 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80145f4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80145f8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80145fc:	42ae      	cmp	r6, r5
 80145fe:	dbf1      	blt.n	80145e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014600:	4615      	mov	r5, r2
 8014602:	3a08      	subs	r2, #8
 8014604:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014608:	45b4      	cmp	ip, r6
 801460a:	dbf9      	blt.n	8014600 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801460c:	d105      	bne.n	801461a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801460e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014612:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014616:	45b0      	cmp	r8, r6
 8014618:	dbf2      	blt.n	8014600 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801461a:	4293      	cmp	r3, r2
 801461c:	f1a5 0608 	sub.w	r6, r5, #8
 8014620:	d816      	bhi.n	8014650 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014622:	f8d6 c000 	ldr.w	ip, [r6]
 8014626:	f9b3 a000 	ldrsh.w	sl, [r3]
 801462a:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801462e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014632:	f8c3 c000 	str.w	ip, [r3]
 8014636:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801463a:	f8c3 c004 	str.w	ip, [r3, #4]
 801463e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014642:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014646:	f825 9c04 	strh.w	r9, [r5, #-4]
 801464a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801464e:	e7c9      	b.n	80145e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014650:	f8d6 e000 	ldr.w	lr, [r6]
 8014654:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014658:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801465c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014660:	f8c0 e000 	str.w	lr, [r0]
 8014664:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014668:	1a16      	subs	r6, r2, r0
 801466a:	f8c0 e004 	str.w	lr, [r0, #4]
 801466e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014672:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014676:	f825 9c04 	strh.w	r9, [r5, #-4]
 801467a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801467e:	1acd      	subs	r5, r1, r3
 8014680:	10ed      	asrs	r5, r5, #3
 8014682:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014686:	bfb5      	itete	lt
 8014688:	e9c4 0200 	strdlt	r0, r2, [r4]
 801468c:	e9c4 3100 	strdge	r3, r1, [r4]
 8014690:	460a      	movlt	r2, r1
 8014692:	4603      	movge	r3, r0
 8014694:	3408      	adds	r4, #8
 8014696:	4618      	mov	r0, r3
 8014698:	4611      	mov	r1, r2
 801469a:	e724      	b.n	80144e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801469c:	4299      	cmp	r1, r3
 801469e:	d927      	bls.n	80146f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80146a0:	f1a3 0210 	sub.w	r2, r3, #16
 80146a4:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80146a8:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80146ac:	45ac      	cmp	ip, r5
 80146ae:	db06      	blt.n	80146be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80146b0:	d11c      	bne.n	80146ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80146b2:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80146b6:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80146ba:	42ae      	cmp	r6, r5
 80146bc:	da16      	bge.n	80146ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80146be:	4615      	mov	r5, r2
 80146c0:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80146c4:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80146c8:	3a08      	subs	r2, #8
 80146ca:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80146ce:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80146d2:	6196      	str	r6, [r2, #24]
 80146d4:	42a8      	cmp	r0, r5
 80146d6:	686e      	ldr	r6, [r5, #4]
 80146d8:	f8a2 9010 	strh.w	r9, [r2, #16]
 80146dc:	61d6      	str	r6, [r2, #28]
 80146de:	f8a2 c012 	strh.w	ip, [r2, #18]
 80146e2:	f8a2 8014 	strh.w	r8, [r2, #20]
 80146e6:	f8a2 e016 	strh.w	lr, [r2, #22]
 80146ea:	d1db      	bne.n	80146a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80146ec:	3308      	adds	r3, #8
 80146ee:	e7d5      	b.n	801469c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80146f0:	42bc      	cmp	r4, r7
 80146f2:	d903      	bls.n	80146fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80146f4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80146f8:	3c08      	subs	r4, #8
 80146fa:	e6f4      	b.n	80144e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80146fc:	b050      	add	sp, #320	; 0x140
 80146fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014702 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8014702:	b510      	push	{r4, lr}
 8014704:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014706:	4604      	mov	r4, r0
 8014708:	07da      	lsls	r2, r3, #31
 801470a:	d507      	bpl.n	801471c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801470c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014710:	f7ff fe8c 	bl	801442c <_ZN8touchgfx7Outline6lineToEii>
 8014714:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014716:	f023 0301 	bic.w	r3, r3, #1
 801471a:	6243      	str	r3, [r0, #36]	; 0x24
 801471c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801471e:	079b      	lsls	r3, r3, #30
 8014720:	d521      	bpl.n	8014766 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014722:	6923      	ldr	r3, [r4, #16]
 8014724:	88d9      	ldrh	r1, [r3, #6]
 8014726:	889a      	ldrh	r2, [r3, #4]
 8014728:	430a      	orrs	r2, r1
 801472a:	d010      	beq.n	801474e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801472c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014730:	2a00      	cmp	r2, #0
 8014732:	db0c      	blt.n	801474e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014734:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014736:	428a      	cmp	r2, r1
 8014738:	da09      	bge.n	801474e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801473a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801473e:	4291      	cmp	r1, r2
 8014740:	f102 0201 	add.w	r2, r2, #1
 8014744:	bf88      	it	hi
 8014746:	3308      	addhi	r3, #8
 8014748:	60a2      	str	r2, [r4, #8]
 801474a:	bf88      	it	hi
 801474c:	6123      	strhi	r3, [r4, #16]
 801474e:	68a1      	ldr	r1, [r4, #8]
 8014750:	b129      	cbz	r1, 801475e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014752:	6863      	ldr	r3, [r4, #4]
 8014754:	4299      	cmp	r1, r3
 8014756:	d802      	bhi.n	801475e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014758:	68e0      	ldr	r0, [r4, #12]
 801475a:	f7ff febd 	bl	80144d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801475e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014760:	f023 0302 	bic.w	r3, r3, #2
 8014764:	6263      	str	r3, [r4, #36]	; 0x24
 8014766:	68e0      	ldr	r0, [r4, #12]
 8014768:	bd10      	pop	{r4, pc}
	...

0801476c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801476c:	4b02      	ldr	r3, [pc, #8]	; (8014778 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801476e:	6018      	str	r0, [r3, #0]
 8014770:	4b02      	ldr	r3, [pc, #8]	; (801477c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014772:	6019      	str	r1, [r3, #0]
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop
 8014778:	20027ba8 	.word	0x20027ba8
 801477c:	20027bac 	.word	0x20027bac

08014780 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8014780:	2300      	movs	r3, #0
 8014782:	4a02      	ldr	r2, [pc, #8]	; (801478c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8014784:	6013      	str	r3, [r2, #0]
 8014786:	4a02      	ldr	r2, [pc, #8]	; (8014790 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8014788:	6013      	str	r3, [r2, #0]
 801478a:	4770      	bx	lr
 801478c:	20027ba8 	.word	0x20027ba8
 8014790:	20027bac 	.word	0x20027bac

08014794 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014794:	4b01      	ldr	r3, [pc, #4]	; (801479c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014796:	6818      	ldr	r0, [r3, #0]
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop
 801479c:	20027ba8 	.word	0x20027ba8

080147a0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80147a0:	4b01      	ldr	r3, [pc, #4]	; (80147a8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80147a2:	6818      	ldr	r0, [r3, #0]
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop
 80147a8:	20027bac 	.word	0x20027bac

080147ac <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80147ac:	b510      	push	{r4, lr}
 80147ae:	6803      	ldr	r3, [r0, #0]
 80147b0:	460c      	mov	r4, r1
 80147b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b4:	4798      	blx	r3
 80147b6:	1b03      	subs	r3, r0, r4
 80147b8:	4258      	negs	r0, r3
 80147ba:	4158      	adcs	r0, r3
 80147bc:	bd10      	pop	{r4, pc}
	...

080147c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80147c0:	4b01      	ldr	r3, [pc, #4]	; (80147c8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80147c2:	6019      	str	r1, [r3, #0]
 80147c4:	4770      	bx	lr
 80147c6:	bf00      	nop
 80147c8:	20027bb0 	.word	0x20027bb0

080147cc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80147cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d0:	4696      	mov	lr, r2
 80147d2:	b097      	sub	sp, #92	; 0x5c
 80147d4:	4605      	mov	r5, r0
 80147d6:	4614      	mov	r4, r2
 80147d8:	460e      	mov	r6, r1
 80147da:	461f      	mov	r7, r3
 80147dc:	f10d 0c1c 	add.w	ip, sp, #28
 80147e0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80147e4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80147e8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80147ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147f4:	f8de 3000 	ldr.w	r3, [lr]
 80147f8:	f104 0e14 	add.w	lr, r4, #20
 80147fc:	f8cc 3000 	str.w	r3, [ip]
 8014800:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014804:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014808:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801480c:	f8de 3000 	ldr.w	r3, [lr]
 8014810:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014814:	f8cc 3000 	str.w	r3, [ip]
 8014818:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801481c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014824:	f8de 3000 	ldr.w	r3, [lr]
 8014828:	4631      	mov	r1, r6
 801482a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801482c:	4628      	mov	r0, r5
 801482e:	f8cc 3000 	str.w	r3, [ip]
 8014832:	682b      	ldr	r3, [r5, #0]
 8014834:	9201      	str	r2, [sp, #4]
 8014836:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014838:	f8cd 8008 	str.w	r8, [sp, #8]
 801483c:	9200      	str	r2, [sp, #0]
 801483e:	aa07      	add	r2, sp, #28
 8014840:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014844:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8014848:	463b      	mov	r3, r7
 801484a:	47d8      	blx	fp
 801484c:	46a6      	mov	lr, r4
 801484e:	f10d 0c1c 	add.w	ip, sp, #28
 8014852:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801485a:	f8de 3000 	ldr.w	r3, [lr]
 801485e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014862:	343c      	adds	r4, #60	; 0x3c
 8014864:	f8cc 3000 	str.w	r3, [ip]
 8014868:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801486c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014874:	f8de 3000 	ldr.w	r3, [lr]
 8014878:	f8cc 3000 	str.w	r3, [ip]
 801487c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014886:	6823      	ldr	r3, [r4, #0]
 8014888:	4631      	mov	r1, r6
 801488a:	4628      	mov	r0, r5
 801488c:	f8cc 3000 	str.w	r3, [ip]
 8014890:	682b      	ldr	r3, [r5, #0]
 8014892:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014896:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014898:	f8cd 8008 	str.w	r8, [sp, #8]
 801489c:	9201      	str	r2, [sp, #4]
 801489e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80148a0:	9200      	str	r2, [sp, #0]
 80148a2:	aa07      	add	r2, sp, #28
 80148a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80148a6:	463b      	mov	r3, r7
 80148a8:	47a0      	blx	r4
 80148aa:	b017      	add	sp, #92	; 0x5c
 80148ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080148b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	b08d      	sub	sp, #52	; 0x34
 80148b6:	4688      	mov	r8, r1
 80148b8:	f8d3 c000 	ldr.w	ip, [r3]
 80148bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80148be:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80148c2:	680f      	ldr	r7, [r1, #0]
 80148c4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80148c8:	eba7 070c 	sub.w	r7, r7, ip
 80148cc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80148d0:	edd3 6a07 	vldr	s13, [r3, #28]
 80148d4:	42bc      	cmp	r4, r7
 80148d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80148d8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80148dc:	bfa8      	it	ge
 80148de:	463c      	movge	r4, r7
 80148e0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80148e4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80148e8:	ee07 4a90 	vmov	s15, r4
 80148ec:	eb09 0e0c 	add.w	lr, r9, ip
 80148f0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80148f4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80148f8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80148fc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014900:	4571      	cmp	r1, lr
 8014902:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014906:	ee65 4a24 	vmul.f32	s9, s10, s9
 801490a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801490e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014912:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014916:	ee32 1a05 	vadd.f32	s2, s4, s10
 801491a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801491e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014922:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014926:	ee22 2a07 	vmul.f32	s4, s4, s14
 801492a:	f340 808c 	ble.w	8014a46 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801492e:	eba1 060e 	sub.w	r6, r1, lr
 8014932:	fb96 f5f4 	sdiv	r5, r6, r4
 8014936:	ee07 5a10 	vmov	s14, r5
 801493a:	2d00      	cmp	r5, #0
 801493c:	fb04 6615 	mls	r6, r4, r5, r6
 8014940:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014944:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014948:	eee7 0a24 	vfma.f32	s1, s14, s9
 801494c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014950:	dd12      	ble.n	8014978 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014952:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014956:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801495a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801495e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014966:	bf14      	ite	ne
 8014968:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801496c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014970:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014974:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014978:	fb05 f204 	mul.w	r2, r5, r4
 801497c:	1abf      	subs	r7, r7, r2
 801497e:	4494      	add	ip, r2
 8014980:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014984:	4411      	add	r1, r2
 8014986:	eb09 020c 	add.w	r2, r9, ip
 801498a:	b209      	sxth	r1, r1
 801498c:	443a      	add	r2, r7
 801498e:	428a      	cmp	r2, r1
 8014990:	bfc4      	itt	gt
 8014992:	eba1 0209 	subgt.w	r2, r1, r9
 8014996:	eba2 070c 	subgt.w	r7, r2, ip
 801499a:	2f00      	cmp	r7, #0
 801499c:	dd50      	ble.n	8014a40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801499e:	fb97 f1f4 	sdiv	r1, r7, r4
 80149a2:	fb04 7211 	mls	r2, r4, r1, r7
 80149a6:	b90a      	cbnz	r2, 80149ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80149a8:	3901      	subs	r1, #1
 80149aa:	4622      	mov	r2, r4
 80149ac:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80149b0:	6840      	ldr	r0, [r0, #4]
 80149b2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80149b6:	44b6      	add	lr, r6
 80149b8:	f8d0 a000 	ldr.w	sl, [r0]
 80149bc:	2900      	cmp	r1, #0
 80149be:	bfcc      	ite	gt
 80149c0:	46a1      	movgt	r9, r4
 80149c2:	4691      	movle	r9, r2
 80149c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80149c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80149c8:	fb04 e505 	mla	r5, r4, r5, lr
 80149cc:	eef0 6a42 	vmov.f32	s13, s4
 80149d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80149d4:	9008      	str	r0, [sp, #32]
 80149d6:	eeb0 7a61 	vmov.f32	s14, s3
 80149da:	9818      	ldr	r0, [sp, #96]	; 0x60
 80149dc:	695b      	ldr	r3, [r3, #20]
 80149de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80149e2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80149e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80149ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149ec:	445b      	add	r3, fp
 80149ee:	9307      	str	r3, [sp, #28]
 80149f0:	ee16 3a90 	vmov	r3, s13
 80149f4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80149f8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80149fc:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014a00:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014a04:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014a08:	ee17 7a90 	vmov	r7, s15
 8014a0c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014a10:	fb97 f7f4 	sdiv	r7, r7, r4
 8014a14:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014a18:	ee17 ca90 	vmov	ip, s15
 8014a1c:	fb9c fcf4 	sdiv	ip, ip, r4
 8014a20:	fb0c 3306 	mla	r3, ip, r6, r3
 8014a24:	9302      	str	r3, [sp, #8]
 8014a26:	ee17 3a10 	vmov	r3, s14
 8014a2a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014a2e:	fb07 3706 	mla	r7, r7, r6, r3
 8014a32:	eba9 0306 	sub.w	r3, r9, r6
 8014a36:	e9cd 4700 	strd	r4, r7, [sp]
 8014a3a:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014a3e:	47a0      	blx	r4
 8014a40:	b00d      	add	sp, #52	; 0x34
 8014a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a46:	2500      	movs	r5, #0
 8014a48:	462e      	mov	r6, r5
 8014a4a:	e799      	b.n	8014980 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a50:	b0db      	sub	sp, #364	; 0x16c
 8014a52:	461d      	mov	r5, r3
 8014a54:	4614      	mov	r4, r2
 8014a56:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014a5a:	910f      	str	r1, [sp, #60]	; 0x3c
 8014a5c:	4629      	mov	r1, r5
 8014a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8014a60:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014a64:	9009      	str	r0, [sp, #36]	; 0x24
 8014a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a68:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014a6c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014a70:	9310      	str	r3, [sp, #64]	; 0x40
 8014a72:	6803      	ldr	r3, [r0, #0]
 8014a74:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014a76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014a7a:	47b8      	blx	r7
 8014a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a7e:	6058      	str	r0, [r3, #4]
 8014a80:	2800      	cmp	r0, #0
 8014a82:	f000 83a1 	beq.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a86:	682b      	ldr	r3, [r5, #0]
 8014a88:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014a8c:	ed94 7a02 	vldr	s14, [r4, #8]
 8014a90:	9314      	str	r3, [sp, #80]	; 0x50
 8014a92:	686b      	ldr	r3, [r5, #4]
 8014a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a98:	9315      	str	r3, [sp, #84]	; 0x54
 8014a9a:	4bc1      	ldr	r3, [pc, #772]	; (8014da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014a9c:	7819      	ldrb	r1, [r3, #0]
 8014a9e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014aa2:	2900      	cmp	r1, #0
 8014aa4:	bf16      	itet	ne
 8014aa6:	4619      	movne	r1, r3
 8014aa8:	4611      	moveq	r1, r2
 8014aaa:	4613      	movne	r3, r2
 8014aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab0:	9116      	str	r1, [sp, #88]	; 0x58
 8014ab2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014ab6:	f240 8387 	bls.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014aba:	ed94 7a07 	vldr	s14, [r4, #28]
 8014abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac6:	f240 837f 	bls.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014aca:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad6:	f240 8377 	bls.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ada:	6822      	ldr	r2, [r4, #0]
 8014adc:	4bb1      	ldr	r3, [pc, #708]	; (8014da4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	f2c0 8372 	blt.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ae4:	49b0      	ldr	r1, [pc, #704]	; (8014da8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014ae6:	6963      	ldr	r3, [r4, #20]
 8014ae8:	428a      	cmp	r2, r1
 8014aea:	f300 836d 	bgt.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014aee:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014af2:	48ae      	ldr	r0, [pc, #696]	; (8014dac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014af4:	33ff      	adds	r3, #255	; 0xff
 8014af6:	4283      	cmp	r3, r0
 8014af8:	f200 8366 	bhi.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014afe:	4dac      	ldr	r5, [pc, #688]	; (8014db0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014b00:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014b04:	33ff      	adds	r3, #255	; 0xff
 8014b06:	42ab      	cmp	r3, r5
 8014b08:	f200 835e 	bhi.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b0c:	6862      	ldr	r2, [r4, #4]
 8014b0e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014b12:	33ff      	adds	r3, #255	; 0xff
 8014b14:	4283      	cmp	r3, r0
 8014b16:	f200 8357 	bhi.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b1a:	69a1      	ldr	r1, [r4, #24]
 8014b1c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014b20:	33ff      	adds	r3, #255	; 0xff
 8014b22:	4283      	cmp	r3, r0
 8014b24:	f200 8350 	bhi.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014b2a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014b2e:	30ff      	adds	r0, #255	; 0xff
 8014b30:	42a8      	cmp	r0, r5
 8014b32:	f200 8349 	bhi.w	80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b36:	428a      	cmp	r2, r1
 8014b38:	f280 8110 	bge.w	8014d5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	f300 8119 	bgt.w	8014d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014b42:	4299      	cmp	r1, r3
 8014b44:	f280 811d 	bge.w	8014d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014b48:	2502      	movs	r5, #2
 8014b4a:	2701      	movs	r7, #1
 8014b4c:	46a9      	mov	r9, r5
 8014b4e:	46b8      	mov	r8, r7
 8014b50:	f04f 0a00 	mov.w	sl, #0
 8014b54:	4621      	mov	r1, r4
 8014b56:	a849      	add	r0, sp, #292	; 0x124
 8014b58:	f003 fdfc 	bl	8018754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014b5c:	4622      	mov	r2, r4
 8014b5e:	4653      	mov	r3, sl
 8014b60:	a949      	add	r1, sp, #292	; 0x124
 8014b62:	f8cd 9000 	str.w	r9, [sp]
 8014b66:	a819      	add	r0, sp, #100	; 0x64
 8014b68:	f003 ff24 	bl	80189b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014b6c:	4622      	mov	r2, r4
 8014b6e:	4653      	mov	r3, sl
 8014b70:	a949      	add	r1, sp, #292	; 0x124
 8014b72:	f8cd 8000 	str.w	r8, [sp]
 8014b76:	a829      	add	r0, sp, #164	; 0xa4
 8014b78:	f003 ff1c 	bl	80189b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014b7c:	4643      	mov	r3, r8
 8014b7e:	4622      	mov	r2, r4
 8014b80:	a949      	add	r1, sp, #292	; 0x124
 8014b82:	f8cd 9000 	str.w	r9, [sp]
 8014b86:	a839      	add	r0, sp, #228	; 0xe4
 8014b88:	f003 ff14 	bl	80189b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014b8c:	42af      	cmp	r7, r5
 8014b8e:	af12      	add	r7, sp, #72	; 0x48
 8014b90:	bfb7      	itett	lt
 8014b92:	2300      	movlt	r3, #0
 8014b94:	2301      	movge	r3, #1
 8014b96:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014b98:	ac19      	addlt	r4, sp, #100	; 0x64
 8014b9a:	bfb1      	iteee	lt
 8014b9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014b9e:	ad19      	addge	r5, sp, #100	; 0x64
 8014ba0:	930e      	strge	r3, [sp, #56]	; 0x38
 8014ba2:	ac29      	addge	r4, sp, #164	; 0xa4
 8014ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ba6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014baa:	e887 0003 	stmia.w	r7, {r0, r1}
 8014bae:	b928      	cbnz	r0, 8014bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014bb0:	4b80      	ldr	r3, [pc, #512]	; (8014db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014bb2:	6818      	ldr	r0, [r3, #0]
 8014bb4:	6803      	ldr	r3, [r0, #0]
 8014bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bb8:	4798      	blx	r3
 8014bba:	6038      	str	r0, [r7, #0]
 8014bbc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014bbe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014bc6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8014bca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014bcc:	6963      	ldr	r3, [r4, #20]
 8014bce:	440b      	add	r3, r1
 8014bd0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014bd4:	4408      	add	r0, r1
 8014bd6:	b200      	sxth	r0, r0
 8014bd8:	4283      	cmp	r3, r0
 8014bda:	900d      	str	r0, [sp, #52]	; 0x34
 8014bdc:	f280 80dd 	bge.w	8014d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014be0:	428b      	cmp	r3, r1
 8014be2:	da08      	bge.n	8014bf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014be4:	2a00      	cmp	r2, #0
 8014be6:	dd06      	ble.n	8014bf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014be8:	1acb      	subs	r3, r1, r3
 8014bea:	429a      	cmp	r2, r3
 8014bec:	f2c0 80e4 	blt.w	8014db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	f300 80e2 	bgt.w	8014dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014bf6:	6967      	ldr	r7, [r4, #20]
 8014bf8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bfe:	443b      	add	r3, r7
 8014c00:	461f      	mov	r7, r3
 8014c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c04:	1bdf      	subs	r7, r3, r7
 8014c06:	4297      	cmp	r7, r2
 8014c08:	bfa8      	it	ge
 8014c0a:	4617      	movge	r7, r2
 8014c0c:	2f00      	cmp	r7, #0
 8014c0e:	f340 8166 	ble.w	8014ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014c12:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014c14:	6829      	ldr	r1, [r5, #0]
 8014c16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c1a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014c1e:	4411      	add	r1, r2
 8014c20:	6820      	ldr	r0, [r4, #0]
 8014c22:	4299      	cmp	r1, r3
 8014c24:	dd1a      	ble.n	8014c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014c26:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014c2a:	4402      	add	r2, r0
 8014c2c:	440b      	add	r3, r1
 8014c2e:	b21b      	sxth	r3, r3
 8014c30:	429a      	cmp	r2, r3
 8014c32:	dc13      	bgt.n	8014c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c36:	a912      	add	r1, sp, #72	; 0x48
 8014c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	9206      	str	r2, [sp, #24]
 8014c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c42:	9500      	str	r5, [sp, #0]
 8014c44:	9205      	str	r2, [sp, #20]
 8014c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c48:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014c4c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014c4e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014c52:	aa49      	add	r2, sp, #292	; 0x124
 8014c54:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014c58:	4623      	mov	r3, r4
 8014c5a:	47c8      	blx	r9
 8014c5c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014c60:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014c64:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c6c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014c70:	68a1      	ldr	r1, [r4, #8]
 8014c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014c76:	ed94 6a08 	vldr	s12, [r4, #32]
 8014c7a:	edd4 6a07 	vldr	s13, [r4, #28]
 8014c7e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014c82:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014c86:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014c8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014c8e:	edc4 6a07 	vstr	s13, [r4, #28]
 8014c92:	441a      	add	r2, r3
 8014c94:	6963      	ldr	r3, [r4, #20]
 8014c96:	3301      	adds	r3, #1
 8014c98:	6022      	str	r2, [r4, #0]
 8014c9a:	6163      	str	r3, [r4, #20]
 8014c9c:	69a3      	ldr	r3, [r4, #24]
 8014c9e:	3b01      	subs	r3, #1
 8014ca0:	61a3      	str	r3, [r4, #24]
 8014ca2:	6923      	ldr	r3, [r4, #16]
 8014ca4:	440b      	add	r3, r1
 8014ca6:	68e1      	ldr	r1, [r4, #12]
 8014ca8:	428b      	cmp	r3, r1
 8014caa:	6123      	str	r3, [r4, #16]
 8014cac:	db15      	blt.n	8014cda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014cae:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014cb2:	3201      	adds	r2, #1
 8014cb4:	1a5b      	subs	r3, r3, r1
 8014cb6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014cba:	6022      	str	r2, [r4, #0]
 8014cbc:	6123      	str	r3, [r4, #16]
 8014cbe:	edc4 6a07 	vstr	s13, [r4, #28]
 8014cc2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014cc6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014cca:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014cce:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cd6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014cda:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014cde:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014ce2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014cea:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014cee:	68a9      	ldr	r1, [r5, #8]
 8014cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014cf4:	ed95 6a08 	vldr	s12, [r5, #32]
 8014cf8:	edd5 6a07 	vldr	s13, [r5, #28]
 8014cfc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014d00:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014d04:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014d0c:	edc5 6a07 	vstr	s13, [r5, #28]
 8014d10:	441a      	add	r2, r3
 8014d12:	696b      	ldr	r3, [r5, #20]
 8014d14:	3301      	adds	r3, #1
 8014d16:	602a      	str	r2, [r5, #0]
 8014d18:	616b      	str	r3, [r5, #20]
 8014d1a:	69ab      	ldr	r3, [r5, #24]
 8014d1c:	3b01      	subs	r3, #1
 8014d1e:	61ab      	str	r3, [r5, #24]
 8014d20:	692b      	ldr	r3, [r5, #16]
 8014d22:	440b      	add	r3, r1
 8014d24:	68e9      	ldr	r1, [r5, #12]
 8014d26:	428b      	cmp	r3, r1
 8014d28:	612b      	str	r3, [r5, #16]
 8014d2a:	db15      	blt.n	8014d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014d2c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014d30:	3201      	adds	r2, #1
 8014d32:	1a5b      	subs	r3, r3, r1
 8014d34:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014d38:	602a      	str	r2, [r5, #0]
 8014d3a:	612b      	str	r3, [r5, #16]
 8014d3c:	edc5 6a07 	vstr	s13, [r5, #28]
 8014d40:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014d44:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014d48:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014d4c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d54:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014d58:	3f01      	subs	r7, #1
 8014d5a:	e757      	b.n	8014c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014d5c:	4299      	cmp	r1, r3
 8014d5e:	dc13      	bgt.n	8014d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014d60:	429a      	cmp	r2, r3
 8014d62:	da14      	bge.n	8014d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014d64:	2502      	movs	r5, #2
 8014d66:	2703      	movs	r7, #3
 8014d68:	f04f 0800 	mov.w	r8, #0
 8014d6c:	46a9      	mov	r9, r5
 8014d6e:	f04f 0a01 	mov.w	sl, #1
 8014d72:	e6ef      	b.n	8014b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014d74:	2501      	movs	r5, #1
 8014d76:	2700      	movs	r7, #0
 8014d78:	46a9      	mov	r9, r5
 8014d7a:	46b8      	mov	r8, r7
 8014d7c:	f04f 0a02 	mov.w	sl, #2
 8014d80:	e6e8      	b.n	8014b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014d82:	2501      	movs	r5, #1
 8014d84:	2702      	movs	r7, #2
 8014d86:	e6e1      	b.n	8014b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014d88:	2500      	movs	r5, #0
 8014d8a:	2701      	movs	r7, #1
 8014d8c:	e7f4      	b.n	8014d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014d8e:	2702      	movs	r7, #2
 8014d90:	2503      	movs	r5, #3
 8014d92:	f04f 0900 	mov.w	r9, #0
 8014d96:	46b8      	mov	r8, r7
 8014d98:	e7e9      	b.n	8014d6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	e728      	b.n	8014bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014d9e:	bf00      	nop
 8014da0:	20027b98 	.word	0x20027b98
 8014da4:	fffd8f01 	.word	0xfffd8f01
 8014da8:	00027100 	.word	0x00027100
 8014dac:	0004e1ff 	.word	0x0004e1ff
 8014db0:	0004e1fe 	.word	0x0004e1fe
 8014db4:	20027ba0 	.word	0x20027ba0
 8014db8:	4613      	mov	r3, r2
 8014dba:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014dbc:	469e      	mov	lr, r3
 8014dbe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8014dc0:	469c      	mov	ip, r3
 8014dc2:	9111      	str	r1, [sp, #68]	; 0x44
 8014dc4:	f04f 0900 	mov.w	r9, #0
 8014dc8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014dcc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014dd0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014dd4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014dd8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014ddc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014de0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014de4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014de8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014dec:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014df0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8014df4:	f1bc 0f00 	cmp.w	ip, #0
 8014df8:	d147      	bne.n	8014e8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014dfa:	eb03 0c07 	add.w	ip, r3, r7
 8014dfe:	1ad7      	subs	r7, r2, r3
 8014e00:	f1b9 0f00 	cmp.w	r9, #0
 8014e04:	d009      	beq.n	8014e1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014e06:	9029      	str	r0, [sp, #164]	; 0xa4
 8014e08:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014e0c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014e10:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014e14:	912d      	str	r1, [sp, #180]	; 0xb4
 8014e16:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014e1a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014e1c:	f04f 0800 	mov.w	r8, #0
 8014e20:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014e24:	9111      	str	r1, [sp, #68]	; 0x44
 8014e26:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014e2a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014e2e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014e32:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014e36:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014e3a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014e3e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014e42:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014e46:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014e4a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014e4e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014e52:	f1be 0f00 	cmp.w	lr, #0
 8014e56:	d031      	beq.n	8014ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014e58:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014e5a:	4450      	add	r0, sl
 8014e5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014e60:	4431      	add	r1, r6
 8014e62:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014e66:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014e6a:	4549      	cmp	r1, r9
 8014e6c:	db08      	blt.n	8014e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014e6e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014e72:	3001      	adds	r0, #1
 8014e74:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014e78:	eba1 0109 	sub.w	r1, r1, r9
 8014e7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014e80:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014e84:	f04f 0801 	mov.w	r8, #1
 8014e88:	e7e3      	b.n	8014e52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014e8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014e8c:	4450      	add	r0, sl
 8014e8e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014e92:	4431      	add	r1, r6
 8014e94:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014e98:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014e9c:	4541      	cmp	r1, r8
 8014e9e:	db08      	blt.n	8014eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8014ea0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014ea4:	3001      	adds	r0, #1
 8014ea6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014eaa:	eba1 0108 	sub.w	r1, r1, r8
 8014eae:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014eb2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014eb6:	f04f 0901 	mov.w	r9, #1
 8014eba:	e79b      	b.n	8014df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014ebc:	449c      	add	ip, r3
 8014ebe:	1aff      	subs	r7, r7, r3
 8014ec0:	f1b8 0f00 	cmp.w	r8, #0
 8014ec4:	d009      	beq.n	8014eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014ec6:	9019      	str	r0, [sp, #100]	; 0x64
 8014ec8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014ecc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014ed0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014ed4:	911d      	str	r1, [sp, #116]	; 0x74
 8014ed6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014eda:	1ad2      	subs	r2, r2, r3
 8014edc:	e68b      	b.n	8014bf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ee0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f000 80d1 	beq.w	801508a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014ee8:	ad19      	add	r5, sp, #100	; 0x64
 8014eea:	ac39      	add	r4, sp, #228	; 0xe4
 8014eec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014eee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014ef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ef8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014efa:	6963      	ldr	r3, [r4, #20]
 8014efc:	440b      	add	r3, r1
 8014efe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014f02:	4408      	add	r0, r1
 8014f04:	b200      	sxth	r0, r0
 8014f06:	4283      	cmp	r3, r0
 8014f08:	900d      	str	r0, [sp, #52]	; 0x34
 8014f0a:	f280 80c1 	bge.w	8015090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014f0e:	428b      	cmp	r3, r1
 8014f10:	da08      	bge.n	8014f24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014f12:	2a00      	cmp	r2, #0
 8014f14:	dd06      	ble.n	8014f24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014f16:	1acb      	subs	r3, r1, r3
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	f2c0 80bb 	blt.w	8015094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f300 80b9 	bgt.w	8015096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014f24:	6967      	ldr	r7, [r4, #20]
 8014f26:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f2c:	443b      	add	r3, r7
 8014f2e:	461f      	mov	r7, r3
 8014f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f32:	1bdf      	subs	r7, r3, r7
 8014f34:	4297      	cmp	r7, r2
 8014f36:	bfa8      	it	ge
 8014f38:	4617      	movge	r7, r2
 8014f3a:	2f00      	cmp	r7, #0
 8014f3c:	f340 813c 	ble.w	80151b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014f40:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014f42:	6829      	ldr	r1, [r5, #0]
 8014f44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f48:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014f4c:	4411      	add	r1, r2
 8014f4e:	6820      	ldr	r0, [r4, #0]
 8014f50:	4299      	cmp	r1, r3
 8014f52:	dd1a      	ble.n	8014f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014f54:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014f58:	4402      	add	r2, r0
 8014f5a:	440b      	add	r3, r1
 8014f5c:	b21b      	sxth	r3, r3
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	dc13      	bgt.n	8014f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f64:	a912      	add	r1, sp, #72	; 0x48
 8014f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	9206      	str	r2, [sp, #24]
 8014f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f70:	9500      	str	r5, [sp, #0]
 8014f72:	9205      	str	r2, [sp, #20]
 8014f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f76:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014f7a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014f7c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014f80:	aa49      	add	r2, sp, #292	; 0x124
 8014f82:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014f86:	4623      	mov	r3, r4
 8014f88:	47c8      	blx	r9
 8014f8a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014f8e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014f92:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f9a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014f9e:	68a1      	ldr	r1, [r4, #8]
 8014fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014fa4:	ed94 6a08 	vldr	s12, [r4, #32]
 8014fa8:	edd4 6a07 	vldr	s13, [r4, #28]
 8014fac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014fb0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014fb4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014fb8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014fbc:	edc4 6a07 	vstr	s13, [r4, #28]
 8014fc0:	441a      	add	r2, r3
 8014fc2:	6963      	ldr	r3, [r4, #20]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	6022      	str	r2, [r4, #0]
 8014fc8:	6163      	str	r3, [r4, #20]
 8014fca:	69a3      	ldr	r3, [r4, #24]
 8014fcc:	3b01      	subs	r3, #1
 8014fce:	61a3      	str	r3, [r4, #24]
 8014fd0:	6923      	ldr	r3, [r4, #16]
 8014fd2:	440b      	add	r3, r1
 8014fd4:	68e1      	ldr	r1, [r4, #12]
 8014fd6:	428b      	cmp	r3, r1
 8014fd8:	6123      	str	r3, [r4, #16]
 8014fda:	db15      	blt.n	8015008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014fdc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014fe0:	3201      	adds	r2, #1
 8014fe2:	1a5b      	subs	r3, r3, r1
 8014fe4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014fe8:	6022      	str	r2, [r4, #0]
 8014fea:	6123      	str	r3, [r4, #16]
 8014fec:	edc4 6a07 	vstr	s13, [r4, #28]
 8014ff0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014ff4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014ff8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014ffc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015004:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015008:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801500c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015010:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015018:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801501c:	68a9      	ldr	r1, [r5, #8]
 801501e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015022:	ed95 6a08 	vldr	s12, [r5, #32]
 8015026:	edd5 6a07 	vldr	s13, [r5, #28]
 801502a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801502e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015032:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015036:	e9d5 2300 	ldrd	r2, r3, [r5]
 801503a:	edc5 6a07 	vstr	s13, [r5, #28]
 801503e:	441a      	add	r2, r3
 8015040:	696b      	ldr	r3, [r5, #20]
 8015042:	3301      	adds	r3, #1
 8015044:	602a      	str	r2, [r5, #0]
 8015046:	616b      	str	r3, [r5, #20]
 8015048:	69ab      	ldr	r3, [r5, #24]
 801504a:	3b01      	subs	r3, #1
 801504c:	61ab      	str	r3, [r5, #24]
 801504e:	692b      	ldr	r3, [r5, #16]
 8015050:	440b      	add	r3, r1
 8015052:	68e9      	ldr	r1, [r5, #12]
 8015054:	428b      	cmp	r3, r1
 8015056:	612b      	str	r3, [r5, #16]
 8015058:	db15      	blt.n	8015086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801505a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801505e:	3201      	adds	r2, #1
 8015060:	1a5b      	subs	r3, r3, r1
 8015062:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015066:	602a      	str	r2, [r5, #0]
 8015068:	612b      	str	r3, [r5, #16]
 801506a:	edc5 6a07 	vstr	s13, [r5, #28]
 801506e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015072:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015076:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801507a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801507e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015082:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015086:	3f01      	subs	r7, #1
 8015088:	e757      	b.n	8014f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801508a:	ad39      	add	r5, sp, #228	; 0xe4
 801508c:	ac19      	add	r4, sp, #100	; 0x64
 801508e:	e72d      	b.n	8014eec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015090:	4613      	mov	r3, r2
 8015092:	e744      	b.n	8014f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015094:	4613      	mov	r3, r2
 8015096:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015098:	469e      	mov	lr, r3
 801509a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801509e:	461f      	mov	r7, r3
 80150a0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80150a4:	f04f 0900 	mov.w	r9, #0
 80150a8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80150ac:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80150b0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80150b4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80150b8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80150bc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80150be:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80150c2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80150c6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80150ca:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80150ce:	960e      	str	r6, [sp, #56]	; 0x38
 80150d0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80150d4:	2f00      	cmp	r7, #0
 80150d6:	d146      	bne.n	8015166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80150d8:	449c      	add	ip, r3
 80150da:	1ad7      	subs	r7, r2, r3
 80150dc:	f1b9 0f00 	cmp.w	r9, #0
 80150e0:	d009      	beq.n	80150f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80150e2:	9039      	str	r0, [sp, #228]	; 0xe4
 80150e4:	913d      	str	r1, [sp, #244]	; 0xf4
 80150e6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80150ea:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80150ee:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80150f2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80150f6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80150f8:	f04f 0800 	mov.w	r8, #0
 80150fc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015100:	910e      	str	r1, [sp, #56]	; 0x38
 8015102:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015106:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801510a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801510e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015112:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015116:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801511a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801511e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015122:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015126:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801512a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801512e:	f1be 0f00 	cmp.w	lr, #0
 8015132:	d030      	beq.n	8015196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015134:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015136:	4450      	add	r0, sl
 8015138:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801513c:	4431      	add	r1, r6
 801513e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015142:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015146:	4549      	cmp	r1, r9
 8015148:	db08      	blt.n	801515c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801514a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801514e:	3001      	adds	r0, #1
 8015150:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015154:	eba1 0109 	sub.w	r1, r1, r9
 8015158:	ee37 7a06 	vadd.f32	s14, s14, s12
 801515c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015160:	f04f 0801 	mov.w	r8, #1
 8015164:	e7e3      	b.n	801512e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015166:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015168:	4450      	add	r0, sl
 801516a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801516e:	4431      	add	r1, r6
 8015170:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015174:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015178:	4541      	cmp	r1, r8
 801517a:	db08      	blt.n	801518e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801517c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015180:	3001      	adds	r0, #1
 8015182:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015186:	eba1 0108 	sub.w	r1, r1, r8
 801518a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801518e:	3f01      	subs	r7, #1
 8015190:	f04f 0901 	mov.w	r9, #1
 8015194:	e79e      	b.n	80150d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015196:	449c      	add	ip, r3
 8015198:	1aff      	subs	r7, r7, r3
 801519a:	f1b8 0f00 	cmp.w	r8, #0
 801519e:	d009      	beq.n	80151b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80151a0:	9019      	str	r0, [sp, #100]	; 0x64
 80151a2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80151a6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80151aa:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80151ae:	911d      	str	r1, [sp, #116]	; 0x74
 80151b0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80151b4:	1ad2      	subs	r2, r2, r3
 80151b6:	e6b5      	b.n	8014f24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80151b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	b923      	cbnz	r3, 80151c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80151be:	4b04      	ldr	r3, [pc, #16]	; (80151d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80151c0:	6818      	ldr	r0, [r3, #0]
 80151c2:	6803      	ldr	r3, [r0, #0]
 80151c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c6:	4798      	blx	r3
 80151c8:	b05b      	add	sp, #364	; 0x16c
 80151ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ce:	bf00      	nop
 80151d0:	20027ba0 	.word	0x20027ba0

080151d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80151d4:	b570      	push	{r4, r5, r6, lr}
 80151d6:	4604      	mov	r4, r0
 80151d8:	2500      	movs	r5, #0
 80151da:	9805      	ldr	r0, [sp, #20]
 80151dc:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80151e0:	6061      	str	r1, [r4, #4]
 80151e2:	8263      	strh	r3, [r4, #18]
 80151e4:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80151e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80151ec:	8025      	strh	r5, [r4, #0]
 80151ee:	7221      	strb	r1, [r4, #8]
 80151f0:	7266      	strb	r6, [r4, #9]
 80151f2:	60e0      	str	r0, [r4, #12]
 80151f4:	8222      	strh	r2, [r4, #16]
 80151f6:	82a3      	strh	r3, [r4, #20]
 80151f8:	82e5      	strh	r5, [r4, #22]
 80151fa:	8325      	strh	r5, [r4, #24]
 80151fc:	8365      	strh	r5, [r4, #26]
 80151fe:	83a5      	strh	r5, [r4, #28]
 8015200:	83e5      	strh	r5, [r4, #30]
 8015202:	8425      	strh	r5, [r4, #32]
 8015204:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8015208:	b32e      	cbz	r6, 8015256 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801520a:	6803      	ldr	r3, [r0, #0]
 801520c:	695b      	ldr	r3, [r3, #20]
 801520e:	4798      	blx	r3
 8015210:	4606      	mov	r6, r0
 8015212:	b300      	cbz	r0, 8015256 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015214:	68e0      	ldr	r0, [r4, #12]
 8015216:	4631      	mov	r1, r6
 8015218:	6803      	ldr	r3, [r0, #0]
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	4798      	blx	r3
 801521e:	4605      	mov	r5, r0
 8015220:	b1c8      	cbz	r0, 8015256 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015222:	7b43      	ldrb	r3, [r0, #13]
 8015224:	7a82      	ldrb	r2, [r0, #10]
 8015226:	005b      	lsls	r3, r3, #1
 8015228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801522c:	4313      	orrs	r3, r2
 801522e:	8423      	strh	r3, [r4, #32]
 8015230:	7a63      	ldrb	r3, [r4, #9]
 8015232:	2b06      	cmp	r3, #6
 8015234:	d10f      	bne.n	8015256 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015236:	68e0      	ldr	r0, [r4, #12]
 8015238:	462a      	mov	r2, r5
 801523a:	4631      	mov	r1, r6
 801523c:	6803      	ldr	r3, [r0, #0]
 801523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015240:	4798      	blx	r3
 8015242:	7b6b      	ldrb	r3, [r5, #13]
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801524a:	7aab      	ldrb	r3, [r5, #10]
 801524c:	4313      	orrs	r3, r2
 801524e:	4418      	add	r0, r3
 8015250:	8c23      	ldrh	r3, [r4, #32]
 8015252:	4418      	add	r0, r3
 8015254:	8420      	strh	r0, [r4, #32]
 8015256:	4620      	mov	r0, r4
 8015258:	bd70      	pop	{r4, r5, r6, pc}

0801525a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801525a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801525e:	2400      	movs	r4, #0
 8015260:	b085      	sub	sp, #20
 8015262:	4681      	mov	r9, r0
 8015264:	4688      	mov	r8, r1
 8015266:	4692      	mov	sl, r2
 8015268:	469b      	mov	fp, r3
 801526a:	4627      	mov	r7, r4
 801526c:	4625      	mov	r5, r4
 801526e:	4626      	mov	r6, r4
 8015270:	4554      	cmp	r4, sl
 8015272:	da2a      	bge.n	80152ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015274:	2300      	movs	r3, #0
 8015276:	9303      	str	r3, [sp, #12]
 8015278:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801527c:	429d      	cmp	r5, r3
 801527e:	d004      	beq.n	801528a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015280:	f242 030b 	movw	r3, #8203	; 0x200b
 8015284:	429d      	cmp	r5, r3
 8015286:	bf18      	it	ne
 8015288:	462f      	movne	r7, r5
 801528a:	ab03      	add	r3, sp, #12
 801528c:	4642      	mov	r2, r8
 801528e:	4659      	mov	r1, fp
 8015290:	4648      	mov	r0, r9
 8015292:	f003 f875 	bl	8018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015296:	4605      	mov	r5, r0
 8015298:	b1b8      	cbz	r0, 80152ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801529a:	280a      	cmp	r0, #10
 801529c:	d015      	beq.n	80152ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801529e:	9a03      	ldr	r2, [sp, #12]
 80152a0:	b18a      	cbz	r2, 80152c6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80152a2:	7b50      	ldrb	r0, [r2, #13]
 80152a4:	4639      	mov	r1, r7
 80152a6:	7a93      	ldrb	r3, [r2, #10]
 80152a8:	0040      	lsls	r0, r0, #1
 80152aa:	8895      	ldrh	r5, [r2, #4]
 80152ac:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80152b0:	4303      	orrs	r3, r0
 80152b2:	4640      	mov	r0, r8
 80152b4:	9301      	str	r3, [sp, #4]
 80152b6:	f8d8 3000 	ldr.w	r3, [r8]
 80152ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152bc:	4798      	blx	r3
 80152be:	9b01      	ldr	r3, [sp, #4]
 80152c0:	4418      	add	r0, r3
 80152c2:	4406      	add	r6, r0
 80152c4:	b2b6      	uxth	r6, r6
 80152c6:	3401      	adds	r4, #1
 80152c8:	e7d2      	b.n	8015270 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80152ca:	4630      	mov	r0, r6
 80152cc:	b005      	add	sp, #20
 80152ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152d2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80152d2:	2a02      	cmp	r2, #2
 80152d4:	b530      	push	{r4, r5, lr}
 80152d6:	d011      	beq.n	80152fc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80152d8:	2a03      	cmp	r2, #3
 80152da:	d01c      	beq.n	8015316 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80152dc:	2a01      	cmp	r2, #1
 80152de:	d10c      	bne.n	80152fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80152e0:	888b      	ldrh	r3, [r1, #4]
 80152e2:	8801      	ldrh	r1, [r0, #0]
 80152e4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80152e8:	1a5b      	subs	r3, r3, r1
 80152ea:	8844      	ldrh	r4, [r0, #2]
 80152ec:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80152f0:	1a9b      	subs	r3, r3, r2
 80152f2:	8004      	strh	r4, [r0, #0]
 80152f4:	8081      	strh	r1, [r0, #4]
 80152f6:	8043      	strh	r3, [r0, #2]
 80152f8:	80c2      	strh	r2, [r0, #6]
 80152fa:	bd30      	pop	{r4, r5, pc}
 80152fc:	88cb      	ldrh	r3, [r1, #6]
 80152fe:	8842      	ldrh	r2, [r0, #2]
 8015300:	1a9b      	subs	r3, r3, r2
 8015302:	88c2      	ldrh	r2, [r0, #6]
 8015304:	1a9b      	subs	r3, r3, r2
 8015306:	888a      	ldrh	r2, [r1, #4]
 8015308:	8801      	ldrh	r1, [r0, #0]
 801530a:	8043      	strh	r3, [r0, #2]
 801530c:	1a52      	subs	r2, r2, r1
 801530e:	8881      	ldrh	r1, [r0, #4]
 8015310:	1a52      	subs	r2, r2, r1
 8015312:	8002      	strh	r2, [r0, #0]
 8015314:	e7f1      	b.n	80152fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015316:	88cb      	ldrh	r3, [r1, #6]
 8015318:	8841      	ldrh	r1, [r0, #2]
 801531a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801531e:	1a5b      	subs	r3, r3, r1
 8015320:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015324:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015328:	1a9b      	subs	r3, r3, r2
 801532a:	8045      	strh	r5, [r0, #2]
 801532c:	8082      	strh	r2, [r0, #4]
 801532e:	8003      	strh	r3, [r0, #0]
 8015330:	80c4      	strh	r4, [r0, #6]
 8015332:	e7e2      	b.n	80152fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015334 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015338:	b09f      	sub	sp, #124	; 0x7c
 801533a:	9116      	str	r1, [sp, #88]	; 0x58
 801533c:	9317      	str	r3, [sp, #92]	; 0x5c
 801533e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015340:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015342:	8809      	ldrh	r1, [r1, #0]
 8015344:	889b      	ldrh	r3, [r3, #4]
 8015346:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801534a:	440b      	add	r3, r1
 801534c:	9212      	str	r2, [sp, #72]	; 0x48
 801534e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8015352:	b21b      	sxth	r3, r3
 8015354:	9011      	str	r0, [sp, #68]	; 0x44
 8015356:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801535a:	9310      	str	r3, [sp, #64]	; 0x40
 801535c:	f8d8 3000 	ldr.w	r3, [r8]
 8015360:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8015364:	7b19      	ldrb	r1, [r3, #12]
 8015366:	7adb      	ldrb	r3, [r3, #11]
 8015368:	9114      	str	r1, [sp, #80]	; 0x50
 801536a:	9315      	str	r3, [sp, #84]	; 0x54
 801536c:	2a00      	cmp	r2, #0
 801536e:	d06a      	beq.n	8015446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015370:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015374:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015376:	2b06      	cmp	r3, #6
 8015378:	bf14      	ite	ne
 801537a:	2301      	movne	r3, #1
 801537c:	2302      	moveq	r3, #2
 801537e:	4413      	add	r3, r2
 8015380:	f04f 0900 	mov.w	r9, #0
 8015384:	930f      	str	r3, [sp, #60]	; 0x3c
 8015386:	464c      	mov	r4, r9
 8015388:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801538c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015390:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015394:	4293      	cmp	r3, r2
 8015396:	f280 808f 	bge.w	80154b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801539a:	2300      	movs	r3, #0
 801539c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80153a0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80153a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80153a8:	429c      	cmp	r4, r3
 80153aa:	d006      	beq.n	80153ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80153ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ae:	f242 020b 	movw	r2, #8203	; 0x200b
 80153b2:	4294      	cmp	r4, r2
 80153b4:	bf18      	it	ne
 80153b6:	4623      	movne	r3, r4
 80153b8:	930d      	str	r3, [sp, #52]	; 0x34
 80153ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153bc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80153be:	f8d8 2000 	ldr.w	r2, [r8]
 80153c2:	428b      	cmp	r3, r1
 80153c4:	db41      	blt.n	801544a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80153c6:	6813      	ldr	r3, [r2, #0]
 80153c8:	4610      	mov	r0, r2
 80153ca:	695b      	ldr	r3, [r3, #20]
 80153cc:	4798      	blx	r3
 80153ce:	4604      	mov	r4, r0
 80153d0:	f8d8 0000 	ldr.w	r0, [r8]
 80153d4:	aa1d      	add	r2, sp, #116	; 0x74
 80153d6:	4621      	mov	r1, r4
 80153d8:	6803      	ldr	r3, [r0, #0]
 80153da:	689d      	ldr	r5, [r3, #8]
 80153dc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80153e0:	47a8      	blx	r5
 80153e2:	901c      	str	r0, [sp, #112]	; 0x70
 80153e4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80153e8:	429c      	cmp	r4, r3
 80153ea:	f000 80ec 	beq.w	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80153ee:	f242 030b 	movw	r3, #8203	; 0x200b
 80153f2:	429c      	cmp	r4, r3
 80153f4:	f000 80e7 	beq.w	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80153f8:	2c00      	cmp	r4, #0
 80153fa:	f000 80f9 	beq.w	80155f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80153fe:	2c0a      	cmp	r4, #10
 8015400:	d060      	beq.n	80154c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8015402:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015404:	b36a      	cbz	r2, 8015462 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8015406:	8894      	ldrh	r4, [r2, #4]
 8015408:	f1bb 0f00 	cmp.w	fp, #0
 801540c:	d03b      	beq.n	8015486 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801540e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8015412:	f1bb 0f01 	cmp.w	fp, #1
 8015416:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801541a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801541e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8015422:	ea49 0903 	orr.w	r9, r9, r3
 8015426:	d134      	bne.n	8015492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8015428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801542a:	eba6 0609 	sub.w	r6, r6, r9
 801542e:	2b00      	cmp	r3, #0
 8015430:	d14f      	bne.n	80154d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015432:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015434:	eb09 0306 	add.w	r3, r9, r6
 8015438:	4413      	add	r3, r2
 801543a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801543c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015440:	4293      	cmp	r3, r2
 8015442:	da51      	bge.n	80154e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015444:	e038      	b.n	80154b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015446:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015448:	e79a      	b.n	8015380 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801544a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801544e:	4659      	mov	r1, fp
 8015450:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015452:	9301      	str	r3, [sp, #4]
 8015454:	ab1d      	add	r3, sp, #116	; 0x74
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	ab1c      	add	r3, sp, #112	; 0x70
 801545a:	f002 ffda 	bl	8018412 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801545e:	4604      	mov	r4, r0
 8015460:	e7c0      	b.n	80153e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015462:	f8d8 0000 	ldr.w	r0, [r8]
 8015466:	6803      	ldr	r3, [r0, #0]
 8015468:	691b      	ldr	r3, [r3, #16]
 801546a:	4798      	blx	r3
 801546c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015470:	4298      	cmp	r0, r3
 8015472:	f000 80a8 	beq.w	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015476:	f242 030b 	movw	r3, #8203	; 0x200b
 801547a:	4298      	cmp	r0, r3
 801547c:	f000 80a3 	beq.w	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015480:	f1bb 0f00 	cmp.w	fp, #0
 8015484:	d100      	bne.n	8015488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015486:	444e      	add	r6, r9
 8015488:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801548a:	2a00      	cmp	r2, #0
 801548c:	d1bf      	bne.n	801540e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801548e:	4691      	mov	r9, r2
 8015490:	e099      	b.n	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015494:	2b00      	cmp	r3, #0
 8015496:	f000 80ad 	beq.w	80155f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801549a:	f1bb 0f00 	cmp.w	fp, #0
 801549e:	d118      	bne.n	80154d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80154a0:	f8d8 0000 	ldr.w	r0, [r8]
 80154a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80154a6:	6803      	ldr	r3, [r0, #0]
 80154a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154aa:	4798      	blx	r3
 80154ac:	4406      	add	r6, r0
 80154ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80154b2:	1af3      	subs	r3, r6, r3
 80154b4:	4293      	cmp	r3, r2
 80154b6:	dd17      	ble.n	80154e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80154b8:	2c00      	cmp	r4, #0
 80154ba:	f000 8099 	beq.w	80155f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80154be:	2c0a      	cmp	r4, #10
 80154c0:	f040 8087 	bne.w	80155d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 80154c4:	240a      	movs	r4, #10
 80154c6:	fab4 f084 	clz	r0, r4
 80154ca:	0940      	lsrs	r0, r0, #5
 80154cc:	b01f      	add	sp, #124	; 0x7c
 80154ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d2:	f8d8 0000 	ldr.w	r0, [r8]
 80154d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80154d8:	6803      	ldr	r3, [r0, #0]
 80154da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154dc:	4798      	blx	r3
 80154de:	f1bb 0f01 	cmp.w	fp, #1
 80154e2:	eba6 0600 	sub.w	r6, r6, r0
 80154e6:	d0a4      	beq.n	8015432 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80154e8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80154ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80154ec:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80154f0:	f9b3 7000 	ldrsh.w	r7, [r3]
 80154f4:	7b43      	ldrb	r3, [r0, #13]
 80154f6:	4431      	add	r1, r6
 80154f8:	015b      	lsls	r3, r3, #5
 80154fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80154fe:	7983      	ldrb	r3, [r0, #6]
 8015500:	4313      	orrs	r3, r2
 8015502:	440b      	add	r3, r1
 8015504:	42bb      	cmp	r3, r7
 8015506:	db5e      	blt.n	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801550a:	4299      	cmp	r1, r3
 801550c:	da5b      	bge.n	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801550e:	f8d8 0000 	ldr.w	r0, [r8]
 8015512:	42b7      	cmp	r7, r6
 8015514:	6803      	ldr	r3, [r0, #0]
 8015516:	bfcc      	ite	gt
 8015518:	1bbf      	subgt	r7, r7, r6
 801551a:	2700      	movle	r7, #0
 801551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801551e:	bfc8      	it	gt
 8015520:	b2bf      	uxthgt	r7, r7
 8015522:	4798      	blx	r3
 8015524:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015526:	7b5a      	ldrb	r2, [r3, #13]
 8015528:	00d1      	lsls	r1, r2, #3
 801552a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801552e:	7a19      	ldrb	r1, [r3, #8]
 8015530:	4329      	orrs	r1, r5
 8015532:	0655      	lsls	r5, r2, #25
 8015534:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8015536:	bf48      	it	mi
 8015538:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801553c:	4405      	add	r5, r0
 801553e:	bf48      	it	mi
 8015540:	b209      	sxthmi	r1, r1
 8015542:	1a6d      	subs	r5, r5, r1
 8015544:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015546:	b2ad      	uxth	r5, r5
 8015548:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801554c:	fa0f fa85 	sxth.w	sl, r5
 8015550:	4551      	cmp	r1, sl
 8015552:	dd3c      	ble.n	80155ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8015554:	0112      	lsls	r2, r2, #4
 8015556:	79d8      	ldrb	r0, [r3, #7]
 8015558:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801555c:	4302      	orrs	r2, r0
 801555e:	4492      	add	sl, r2
 8015560:	4551      	cmp	r1, sl
 8015562:	dc30      	bgt.n	80155c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015564:	1b4d      	subs	r5, r1, r5
 8015566:	468a      	mov	sl, r1
 8015568:	b22d      	sxth	r5, r5
 801556a:	9319      	str	r3, [sp, #100]	; 0x64
 801556c:	b2ad      	uxth	r5, r5
 801556e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015570:	f8d8 0000 	ldr.w	r0, [r8]
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	6801      	ldr	r1, [r0, #0]
 8015578:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801557a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801557c:	9313      	str	r3, [sp, #76]	; 0x4c
 801557e:	9218      	str	r2, [sp, #96]	; 0x60
 8015580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015582:	4788      	blx	r1
 8015584:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015588:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801558a:	910b      	str	r1, [sp, #44]	; 0x2c
 801558c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8015590:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015592:	910a      	str	r1, [sp, #40]	; 0x28
 8015594:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8015598:	9109      	str	r1, [sp, #36]	; 0x24
 801559a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801559e:	9305      	str	r3, [sp, #20]
 80155a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80155a2:	9206      	str	r2, [sp, #24]
 80155a4:	9304      	str	r3, [sp, #16]
 80155a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155a8:	f8cd a004 	str.w	sl, [sp, #4]
 80155ac:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80155b0:	4437      	add	r7, r6
 80155b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80155b4:	b23f      	sxth	r7, r7
 80155b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80155ba:	9700      	str	r7, [sp, #0]
 80155bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80155be:	681a      	ldr	r2, [r3, #0]
 80155c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	47a8      	blx	r5
 80155c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155c8:	3301      	adds	r3, #1
 80155ca:	930e      	str	r3, [sp, #56]	; 0x38
 80155cc:	e6e0      	b.n	8015390 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80155ce:	2500      	movs	r5, #0
 80155d0:	e7cb      	b.n	801556a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80155d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80155d4:	3501      	adds	r5, #1
 80155d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155d8:	429d      	cmp	r5, r3
 80155da:	f6bf af74 	bge.w	80154c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80155de:	4659      	mov	r1, fp
 80155e0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80155e2:	f7f1 fe9d 	bl	8007320 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80155e6:	4604      	mov	r4, r0
 80155e8:	b110      	cbz	r0, 80155f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80155ea:	280a      	cmp	r0, #10
 80155ec:	d1f2      	bne.n	80155d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 80155ee:	e769      	b.n	80154c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80155f0:	2400      	movs	r4, #0
 80155f2:	e768      	b.n	80154c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80155f4:	f1bb 0f00 	cmp.w	fp, #0
 80155f8:	f43f af59 	beq.w	80154ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80155fc:	e774      	b.n	80154e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080155fe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80155fe:	b530      	push	{r4, r5, lr}
 8015600:	8ac4      	ldrh	r4, [r0, #22]
 8015602:	8b45      	ldrh	r5, [r0, #26]
 8015604:	8343      	strh	r3, [r0, #26]
 8015606:	442c      	add	r4, r5
 8015608:	1ae4      	subs	r4, r4, r3
 801560a:	8b83      	ldrh	r3, [r0, #28]
 801560c:	82c4      	strh	r4, [r0, #22]
 801560e:	8b04      	ldrh	r4, [r0, #24]
 8015610:	4422      	add	r2, r4
 8015612:	440c      	add	r4, r1
 8015614:	1a59      	subs	r1, r3, r1
 8015616:	83c2      	strh	r2, [r0, #30]
 8015618:	8304      	strh	r4, [r0, #24]
 801561a:	8381      	strh	r1, [r0, #28]
 801561c:	bd30      	pop	{r4, r5, pc}

0801561e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801561e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015622:	4604      	mov	r4, r0
 8015624:	8a47      	ldrh	r7, [r0, #18]
 8015626:	68c0      	ldr	r0, [r0, #12]
 8015628:	b085      	sub	sp, #20
 801562a:	6803      	ldr	r3, [r0, #0]
 801562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801562e:	4798      	blx	r3
 8015630:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015634:	7a63      	ldrb	r3, [r4, #9]
 8015636:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801563a:	3b01      	subs	r3, #1
 801563c:	42b7      	cmp	r7, r6
 801563e:	bfac      	ite	ge
 8015640:	f04f 0900 	movge.w	r9, #0
 8015644:	f04f 0901 	movlt.w	r9, #1
 8015648:	2b05      	cmp	r3, #5
 801564a:	d804      	bhi.n	8015656 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801564c:	e8df f003 	tbb	[pc, r3]
 8015650:	470f0854 	.word	0x470f0854
 8015654:	4c4c      	.short	0x4c4c
 8015656:	2500      	movs	r5, #0
 8015658:	46a9      	mov	r9, r5
 801565a:	462e      	mov	r6, r5
 801565c:	462f      	mov	r7, r5
 801565e:	e00e      	b.n	801567e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015660:	42b7      	cmp	r7, r6
 8015662:	f04f 0500 	mov.w	r5, #0
 8015666:	bfb4      	ite	lt
 8015668:	2600      	movlt	r6, #0
 801566a:	2601      	movge	r6, #1
 801566c:	e7f6      	b.n	801565c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801566e:	42b7      	cmp	r7, r6
 8015670:	464d      	mov	r5, r9
 8015672:	f04f 0900 	mov.w	r9, #0
 8015676:	bfb4      	ite	lt
 8015678:	2600      	movlt	r6, #0
 801567a:	2601      	movge	r6, #1
 801567c:	464f      	mov	r7, r9
 801567e:	f04f 0800 	mov.w	r8, #0
 8015682:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015686:	f8a4 8018 	strh.w	r8, [r4, #24]
 801568a:	f8cd 8004 	str.w	r8, [sp, #4]
 801568e:	2300      	movs	r3, #0
 8015690:	9303      	str	r3, [sp, #12]
 8015692:	8823      	ldrh	r3, [r4, #0]
 8015694:	2b20      	cmp	r3, #32
 8015696:	d033      	beq.n	8015700 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015698:	f242 010b 	movw	r1, #8203	; 0x200b
 801569c:	1a5a      	subs	r2, r3, r1
 801569e:	f1d2 0a00 	rsbs	sl, r2, #0
 80156a2:	eb4a 0a02 	adc.w	sl, sl, r2
 80156a6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80156aa:	4293      	cmp	r3, r2
 80156ac:	d008      	beq.n	80156c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80156ae:	428b      	cmp	r3, r1
 80156b0:	9a01      	ldr	r2, [sp, #4]
 80156b2:	bf0e      	itee	eq
 80156b4:	f04f 0a01 	moveq.w	sl, #1
 80156b8:	461a      	movne	r2, r3
 80156ba:	f04f 0a00 	movne.w	sl, #0
 80156be:	9201      	str	r2, [sp, #4]
 80156c0:	ab03      	add	r3, sp, #12
 80156c2:	68e2      	ldr	r2, [r4, #12]
 80156c4:	7a21      	ldrb	r1, [r4, #8]
 80156c6:	6860      	ldr	r0, [r4, #4]
 80156c8:	f002 fe5a 	bl	8018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80156cc:	8020      	strh	r0, [r4, #0]
 80156ce:	b9d8      	cbnz	r0, 8015708 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80156d0:	8ba2      	ldrh	r2, [r4, #28]
 80156d2:	2300      	movs	r3, #0
 80156d4:	4611      	mov	r1, r2
 80156d6:	4620      	mov	r0, r4
 80156d8:	f7ff ff91 	bl	80155fe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80156dc:	e06e      	b.n	80157bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80156de:	2500      	movs	r5, #0
 80156e0:	2701      	movs	r7, #1
 80156e2:	46a9      	mov	r9, r5
 80156e4:	462e      	mov	r6, r5
 80156e6:	e7ca      	b.n	801567e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80156e8:	42b7      	cmp	r7, r6
 80156ea:	f04f 0500 	mov.w	r5, #0
 80156ee:	bfb4      	ite	lt
 80156f0:	2700      	movlt	r7, #0
 80156f2:	2701      	movge	r7, #1
 80156f4:	462e      	mov	r6, r5
 80156f6:	e7c2      	b.n	801567e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80156f8:	2500      	movs	r5, #0
 80156fa:	2601      	movs	r6, #1
 80156fc:	46a9      	mov	r9, r5
 80156fe:	e7ad      	b.n	801565c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015700:	9301      	str	r3, [sp, #4]
 8015702:	f04f 0a01 	mov.w	sl, #1
 8015706:	e7db      	b.n	80156c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015708:	8b63      	ldrh	r3, [r4, #26]
 801570a:	280a      	cmp	r0, #10
 801570c:	f103 0301 	add.w	r3, r3, #1
 8015710:	8363      	strh	r3, [r4, #26]
 8015712:	d0dd      	beq.n	80156d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015714:	9a03      	ldr	r2, [sp, #12]
 8015716:	bb62      	cbnz	r2, 8015772 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015718:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801571c:	4298      	cmp	r0, r3
 801571e:	d003      	beq.n	8015728 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015720:	f242 030b 	movw	r3, #8203	; 0x200b
 8015724:	4298      	cmp	r0, r3
 8015726:	d1b2      	bne.n	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015728:	8823      	ldrh	r3, [r4, #0]
 801572a:	8ba1      	ldrh	r1, [r4, #28]
 801572c:	2b20      	cmp	r3, #32
 801572e:	d003      	beq.n	8015738 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015730:	f242 000b 	movw	r0, #8203	; 0x200b
 8015734:	4283      	cmp	r3, r0
 8015736:	d131      	bne.n	801579c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015738:	f1ba 0f00 	cmp.w	sl, #0
 801573c:	bf0a      	itet	eq
 801573e:	4688      	moveq	r8, r1
 8015740:	4650      	movne	r0, sl
 8015742:	2001      	moveq	r0, #1
 8015744:	440a      	add	r2, r1
 8015746:	8b23      	ldrh	r3, [r4, #24]
 8015748:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801574c:	b292      	uxth	r2, r2
 801574e:	83a2      	strh	r2, [r4, #28]
 8015750:	4413      	add	r3, r2
 8015752:	f1b9 0f00 	cmp.w	r9, #0
 8015756:	d102      	bne.n	801575e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015758:	2d00      	cmp	r5, #0
 801575a:	d042      	beq.n	80157e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801575c:	b300      	cbz	r0, 80157a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801575e:	8c21      	ldrh	r1, [r4, #32]
 8015760:	4419      	add	r1, r3
 8015762:	458c      	cmp	ip, r1
 8015764:	da37      	bge.n	80157d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015766:	8ae1      	ldrh	r1, [r4, #22]
 8015768:	2900      	cmp	r1, #0
 801576a:	d034      	beq.n	80157d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801576c:	4563      	cmp	r3, ip
 801576e:	dd8e      	ble.n	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015770:	e01d      	b.n	80157ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015772:	8893      	ldrh	r3, [r2, #4]
 8015774:	9901      	ldr	r1, [sp, #4]
 8015776:	8023      	strh	r3, [r4, #0]
 8015778:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801577c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015780:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8015784:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015788:	ea4b 0b00 	orr.w	fp, fp, r0
 801578c:	68e0      	ldr	r0, [r4, #12]
 801578e:	6803      	ldr	r3, [r0, #0]
 8015790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015792:	4798      	blx	r3
 8015794:	eb0b 0200 	add.w	r2, fp, r0
 8015798:	b292      	uxth	r2, r2
 801579a:	e7c5      	b.n	8015728 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801579c:	2000      	movs	r0, #0
 801579e:	e7d1      	b.n	8015744 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80157a0:	4563      	cmp	r3, ip
 80157a2:	f77f af74 	ble.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80157a6:	8ae3      	ldrh	r3, [r4, #22]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f43f af70 	beq.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80157ae:	2301      	movs	r3, #1
 80157b0:	8c22      	ldrh	r2, [r4, #32]
 80157b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80157b6:	8be3      	ldrh	r3, [r4, #30]
 80157b8:	4413      	add	r3, r2
 80157ba:	83e3      	strh	r3, [r4, #30]
 80157bc:	68e0      	ldr	r0, [r4, #12]
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157c2:	4798      	blx	r3
 80157c4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80157c8:	4418      	add	r0, r3
 80157ca:	8a63      	ldrh	r3, [r4, #18]
 80157cc:	1a18      	subs	r0, r3, r0
 80157ce:	8260      	strh	r0, [r4, #18]
 80157d0:	b005      	add	sp, #20
 80157d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d6:	2300      	movs	r3, #0
 80157d8:	4611      	mov	r1, r2
 80157da:	4620      	mov	r0, r4
 80157dc:	f7ff ff0f 	bl	80155fe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80157e0:	e755      	b.n	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80157e2:	4563      	cmp	r3, ip
 80157e4:	dd14      	ble.n	8015810 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80157e6:	b117      	cbz	r7, 80157ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80157e8:	2301      	movs	r3, #1
 80157ea:	460a      	mov	r2, r1
 80157ec:	e772      	b.n	80156d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80157ee:	2e00      	cmp	r6, #0
 80157f0:	f43f af4d 	beq.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	f47f af4a 	bne.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80157fa:	f1ba 0f00 	cmp.w	sl, #0
 80157fe:	d002      	beq.n	8015806 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8015800:	2301      	movs	r3, #1
 8015802:	4642      	mov	r2, r8
 8015804:	e767      	b.n	80156d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015806:	8ae3      	ldrh	r3, [r4, #22]
 8015808:	2b00      	cmp	r3, #0
 801580a:	f43f af40 	beq.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801580e:	e7d5      	b.n	80157bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015810:	2800      	cmp	r0, #0
 8015812:	f47f af3c 	bne.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015816:	f1ba 0f00 	cmp.w	sl, #0
 801581a:	f43f af38 	beq.w	801568e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801581e:	2301      	movs	r3, #1
 8015820:	4642      	mov	r2, r8
 8015822:	e7da      	b.n	80157da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015824 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015826:	4605      	mov	r5, r0
 8015828:	b08f      	sub	sp, #60	; 0x3c
 801582a:	4617      	mov	r7, r2
 801582c:	461c      	mov	r4, r3
 801582e:	460e      	mov	r6, r1
 8015830:	b1d1      	cbz	r1, 8015868 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	4620      	mov	r0, r4
 8015836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015838:	4798      	blx	r3
 801583a:	4240      	negs	r0, r0
 801583c:	9603      	str	r6, [sp, #12]
 801583e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015842:	b200      	sxth	r0, r0
 8015844:	9700      	str	r7, [sp, #0]
 8015846:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801584a:	4629      	mov	r1, r5
 801584c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015850:	2401      	movs	r4, #1
 8015852:	a805      	add	r0, sp, #20
 8015854:	f7ff fcbe 	bl	80151d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015858:	a805      	add	r0, sp, #20
 801585a:	f7ff fee0 	bl	801561e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801585e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015862:	b163      	cbz	r3, 801587e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015864:	3401      	adds	r4, #1
 8015866:	e7f7      	b.n	8015858 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015868:	2401      	movs	r4, #1
 801586a:	f002 fe55 	bl	8018518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801586e:	280a      	cmp	r0, #10
 8015870:	4628      	mov	r0, r5
 8015872:	bf08      	it	eq
 8015874:	3401      	addeq	r4, #1
 8015876:	f002 fe4f 	bl	8018518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801587a:	2800      	cmp	r0, #0
 801587c:	d1f7      	bne.n	801586e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801587e:	b2a0      	uxth	r0, r4
 8015880:	b00f      	add	sp, #60	; 0x3c
 8015882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015884 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015888:	b0e3      	sub	sp, #396	; 0x18c
 801588a:	461c      	mov	r4, r3
 801588c:	4683      	mov	fp, r0
 801588e:	4688      	mov	r8, r1
 8015890:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8015892:	2b00      	cmp	r3, #0
 8015894:	f000 810f 	beq.w	8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015898:	6823      	ldr	r3, [r4, #0]
 801589a:	2b00      	cmp	r3, #0
 801589c:	f000 810b 	beq.w	8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80158a0:	7ba3      	ldrb	r3, [r4, #14]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f000 8107 	beq.w	8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80158a8:	ad0a      	add	r5, sp, #40	; 0x28
 80158aa:	6810      	ldr	r0, [r2, #0]
 80158ac:	6851      	ldr	r1, [r2, #4]
 80158ae:	462b      	mov	r3, r5
 80158b0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80158b4:	c303      	stmia	r3!, {r0, r1}
 80158b6:	2100      	movs	r1, #0
 80158b8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80158bc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80158c0:	4628      	mov	r0, r5
 80158c2:	910c      	str	r1, [sp, #48]	; 0x30
 80158c4:	a90c      	add	r1, sp, #48	; 0x30
 80158c6:	79a2      	ldrb	r2, [r4, #6]
 80158c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80158cc:	f7ff fd01 	bl	80152d2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80158d0:	a90c      	add	r1, sp, #48	; 0x30
 80158d2:	79a2      	ldrb	r2, [r4, #6]
 80158d4:	4608      	mov	r0, r1
 80158d6:	f7ff fcfc 	bl	80152d2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80158da:	a817      	add	r0, sp, #92	; 0x5c
 80158dc:	f002 fa08 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 80158e0:	6820      	ldr	r0, [r4, #0]
 80158e2:	6803      	ldr	r3, [r0, #0]
 80158e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158e6:	4798      	blx	r3
 80158e8:	4606      	mov	r6, r0
 80158ea:	6820      	ldr	r0, [r4, #0]
 80158ec:	6803      	ldr	r3, [r0, #0]
 80158ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158f0:	4798      	blx	r3
 80158f2:	4633      	mov	r3, r6
 80158f4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80158f6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80158f8:	9000      	str	r0, [sp, #0]
 80158fa:	a817      	add	r0, sp, #92	; 0x5c
 80158fc:	f002 fa4b 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015900:	6820      	ldr	r0, [r4, #0]
 8015902:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015906:	6803      	ldr	r3, [r0, #0]
 8015908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801590a:	4798      	blx	r3
 801590c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015910:	6823      	ldr	r3, [r4, #0]
 8015912:	4607      	mov	r7, r0
 8015914:	4406      	add	r6, r0
 8015916:	a830      	add	r0, sp, #192	; 0xc0
 8015918:	f893 9009 	ldrb.w	r9, [r3, #9]
 801591c:	f002 f9e8 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 8015920:	7c23      	ldrb	r3, [r4, #16]
 8015922:	b17b      	cbz	r3, 8015944 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015924:	6820      	ldr	r0, [r4, #0]
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801592a:	4798      	blx	r3
 801592c:	9009      	str	r0, [sp, #36]	; 0x24
 801592e:	6820      	ldr	r0, [r4, #0]
 8015930:	6802      	ldr	r2, [r0, #0]
 8015932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015934:	4790      	blx	r2
 8015936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015938:	9000      	str	r0, [sp, #0]
 801593a:	a830      	add	r0, sp, #192	; 0xc0
 801593c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801593e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015940:	f002 fa29 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015944:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015948:	a80e      	add	r0, sp, #56	; 0x38
 801594a:	7be2      	ldrb	r2, [r4, #15]
 801594c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015950:	1a8a      	subs	r2, r1, r2
 8015952:	7c21      	ldrb	r1, [r4, #16]
 8015954:	9103      	str	r1, [sp, #12]
 8015956:	b292      	uxth	r2, r2
 8015958:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801595c:	9102      	str	r1, [sp, #8]
 801595e:	6821      	ldr	r1, [r4, #0]
 8015960:	9101      	str	r1, [sp, #4]
 8015962:	7961      	ldrb	r1, [r4, #5]
 8015964:	9100      	str	r1, [sp, #0]
 8015966:	a930      	add	r1, sp, #192	; 0xc0
 8015968:	f7ff fc34 	bl	80151d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801596c:	2e00      	cmp	r6, #0
 801596e:	dc5b      	bgt.n	8015a28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015970:	af17      	add	r7, sp, #92	; 0x5c
 8015972:	f04f 0900 	mov.w	r9, #0
 8015976:	7c23      	ldrb	r3, [r4, #16]
 8015978:	2b00      	cmp	r3, #0
 801597a:	f000 80ae 	beq.w	8015ada <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801597e:	a80e      	add	r0, sp, #56	; 0x38
 8015980:	f7ff fe4d 	bl	801561e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015984:	f1ba 0f00 	cmp.w	sl, #0
 8015988:	f000 80a2 	beq.w	8015ad0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801598c:	7c23      	ldrb	r3, [r4, #16]
 801598e:	2264      	movs	r2, #100	; 0x64
 8015990:	4639      	mov	r1, r7
 8015992:	a849      	add	r0, sp, #292	; 0x124
 8015994:	9309      	str	r3, [sp, #36]	; 0x24
 8015996:	f010 fa53 	bl	8025e40 <memcpy>
 801599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801599c:	2b00      	cmp	r3, #0
 801599e:	f000 80a4 	beq.w	8015aea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 80159a2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80159a6:	7922      	ldrb	r2, [r4, #4]
 80159a8:	2a01      	cmp	r2, #1
 80159aa:	f040 8087 	bne.w	8015abc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80159ae:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80159b2:	1ac0      	subs	r0, r0, r3
 80159b4:	2302      	movs	r3, #2
 80159b6:	fb90 f0f3 	sdiv	r0, r0, r3
 80159ba:	b200      	sxth	r0, r0
 80159bc:	7c23      	ldrb	r3, [r4, #16]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	f000 8088 	beq.w	8015ad4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 80159c4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 80159c8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 80159cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80159d0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80159d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80159d8:	2100      	movs	r1, #0
 80159da:	4410      	add	r0, r2
 80159dc:	4642      	mov	r2, r8
 80159de:	b200      	sxth	r0, r0
 80159e0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80159e4:	9000      	str	r0, [sp, #0]
 80159e6:	4658      	mov	r0, fp
 80159e8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80159ec:	f7ff fca2 	bl	8015334 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d160      	bne.n	8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80159f4:	b2b2      	uxth	r2, r6
 80159f6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80159fa:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80159fe:	4413      	add	r3, r2
 8015a00:	1a8a      	subs	r2, r1, r2
 8015a02:	b21b      	sxth	r3, r3
 8015a04:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8015a08:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8015a0c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015a10:	2a00      	cmp	r2, #0
 8015a12:	d150      	bne.n	8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015a14:	6822      	ldr	r2, [r4, #0]
 8015a16:	8869      	ldrh	r1, [r5, #2]
 8015a18:	7a12      	ldrb	r2, [r2, #8]
 8015a1a:	1a9b      	subs	r3, r3, r2
 8015a1c:	88ea      	ldrh	r2, [r5, #6]
 8015a1e:	440a      	add	r2, r1
 8015a20:	b212      	sxth	r2, r2
 8015a22:	4293      	cmp	r3, r2
 8015a24:	dda7      	ble.n	8015976 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015a26:	e046      	b.n	8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015a28:	7c23      	ldrb	r3, [r4, #16]
 8015a2a:	444f      	add	r7, r9
 8015a2c:	b1c3      	cbz	r3, 8015a60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015a2e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8015a32:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015a36:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015a3a:	443b      	add	r3, r7
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	da97      	bge.n	8015970 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015a40:	a80e      	add	r0, sp, #56	; 0x38
 8015a42:	f7ff fdec 	bl	801561e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015a46:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8015a4a:	3b01      	subs	r3, #1
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	454b      	cmp	r3, r9
 8015a50:	9309      	str	r3, [sp, #36]	; 0x24
 8015a52:	d021      	beq.n	8015a98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015a54:	7961      	ldrb	r1, [r4, #5]
 8015a56:	a817      	add	r0, sp, #92	; 0x5c
 8015a58:	f7f1 fc62 	bl	8007320 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a5e:	e7f4      	b.n	8015a4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015a60:	fa1f f986 	uxth.w	r9, r6
 8015a64:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015a68:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015a6c:	443b      	add	r3, r7
 8015a6e:	4293      	cmp	r3, r2
 8015a70:	f6bf af7e 	bge.w	8015970 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015a74:	a817      	add	r0, sp, #92	; 0x5c
 8015a76:	f002 fd4f 	bl	8018518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015a7a:	b1e0      	cbz	r0, 8015ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015a7c:	280a      	cmp	r0, #10
 8015a7e:	d1f1      	bne.n	8015a64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015a80:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015a84:	444b      	add	r3, r9
 8015a86:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015a8a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015a8e:	eba3 0309 	sub.w	r3, r3, r9
 8015a92:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015a96:	e7e5      	b.n	8015a64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015a98:	b2b3      	uxth	r3, r6
 8015a9a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015a9e:	441a      	add	r2, r3
 8015aa0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015aa4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8015aa8:	1ad3      	subs	r3, r2, r3
 8015aaa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015aae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1bd      	bne.n	8015a32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015ab6:	b063      	add	sp, #396	; 0x18c
 8015ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015abc:	2a02      	cmp	r2, #2
 8015abe:	d105      	bne.n	8015acc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8015ac0:	7be2      	ldrb	r2, [r4, #15]
 8015ac2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015ac6:	1a80      	subs	r0, r0, r2
 8015ac8:	1ac0      	subs	r0, r0, r3
 8015aca:	e776      	b.n	80159ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015acc:	2000      	movs	r0, #0
 8015ace:	e775      	b.n	80159bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015ad0:	7be0      	ldrb	r0, [r4, #15]
 8015ad2:	e773      	b.n	80159bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015ad4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015ad8:	e776      	b.n	80159c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015ada:	f1ba 0f00 	cmp.w	sl, #0
 8015ade:	d0f7      	beq.n	8015ad0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015ae0:	2264      	movs	r2, #100	; 0x64
 8015ae2:	4639      	mov	r1, r7
 8015ae4:	a849      	add	r0, sp, #292	; 0x124
 8015ae6:	f010 f9ab 	bl	8025e40 <memcpy>
 8015aea:	2300      	movs	r3, #0
 8015aec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015af0:	6821      	ldr	r1, [r4, #0]
 8015af2:	a849      	add	r0, sp, #292	; 0x124
 8015af4:	f7ff fbb1 	bl	801525a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015af8:	b203      	sxth	r3, r0
 8015afa:	e754      	b.n	80159a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015afc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015afc:	2b03      	cmp	r3, #3
 8015afe:	d818      	bhi.n	8015b32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015b00:	e8df f003 	tbb	[pc, r3]
 8015b04:	130d0602 	.word	0x130d0602
 8015b08:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015b0c:	1850      	adds	r0, r2, r1
 8015b0e:	4770      	bx	lr
 8015b10:	8803      	ldrh	r3, [r0, #0]
 8015b12:	8880      	ldrh	r0, [r0, #4]
 8015b14:	4418      	add	r0, r3
 8015b16:	b200      	sxth	r0, r0
 8015b18:	1a80      	subs	r0, r0, r2
 8015b1a:	3801      	subs	r0, #1
 8015b1c:	4770      	bx	lr
 8015b1e:	8803      	ldrh	r3, [r0, #0]
 8015b20:	8880      	ldrh	r0, [r0, #4]
 8015b22:	4418      	add	r0, r3
 8015b24:	b200      	sxth	r0, r0
 8015b26:	1a40      	subs	r0, r0, r1
 8015b28:	e7f7      	b.n	8015b1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015b2a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015b2e:	4410      	add	r0, r2
 8015b30:	4770      	bx	lr
 8015b32:	2000      	movs	r0, #0
 8015b34:	4770      	bx	lr

08015b36 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015b36:	2b03      	cmp	r3, #3
 8015b38:	d817      	bhi.n	8015b6a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015b3a:	e8df f003 	tbb	[pc, r3]
 8015b3e:	0602      	.short	0x0602
 8015b40:	1009      	.short	0x1009
 8015b42:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015b46:	1850      	adds	r0, r2, r1
 8015b48:	4770      	bx	lr
 8015b4a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015b4e:	e7fa      	b.n	8015b46 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015b50:	8843      	ldrh	r3, [r0, #2]
 8015b52:	88c0      	ldrh	r0, [r0, #6]
 8015b54:	4418      	add	r0, r3
 8015b56:	b200      	sxth	r0, r0
 8015b58:	1a80      	subs	r0, r0, r2
 8015b5a:	3801      	subs	r0, #1
 8015b5c:	4770      	bx	lr
 8015b5e:	8843      	ldrh	r3, [r0, #2]
 8015b60:	88c0      	ldrh	r0, [r0, #6]
 8015b62:	4418      	add	r0, r3
 8015b64:	b200      	sxth	r0, r0
 8015b66:	1a40      	subs	r0, r0, r1
 8015b68:	e7f7      	b.n	8015b5a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015b6a:	2000      	movs	r0, #0
 8015b6c:	4770      	bx	lr
	...

08015b70 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015b70:	4b01      	ldr	r3, [pc, #4]	; (8015b78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	601a      	str	r2, [r3, #0]
 8015b76:	4770      	bx	lr
 8015b78:	20027bb0 	.word	0x20027bb0

08015b7c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	b1c8      	cbz	r0, 8015bb4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015b80:	0c02      	lsrs	r2, r0, #16
 8015b82:	0412      	lsls	r2, r2, #16
 8015b84:	b9a2      	cbnz	r2, 8015bb0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015b86:	0403      	lsls	r3, r0, #16
 8015b88:	2010      	movs	r0, #16
 8015b8a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015b8e:	bf04      	itt	eq
 8015b90:	021b      	lsleq	r3, r3, #8
 8015b92:	3008      	addeq	r0, #8
 8015b94:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015b98:	bf04      	itt	eq
 8015b9a:	011b      	lsleq	r3, r3, #4
 8015b9c:	3004      	addeq	r0, #4
 8015b9e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015ba2:	bf04      	itt	eq
 8015ba4:	009b      	lsleq	r3, r3, #2
 8015ba6:	3002      	addeq	r0, #2
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	db04      	blt.n	8015bb6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015bac:	3001      	adds	r0, #1
 8015bae:	4770      	bx	lr
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	e7ea      	b.n	8015b8a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015bb4:	2020      	movs	r0, #32
 8015bb6:	4770      	bx	lr

08015bb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bbc:	b087      	sub	sp, #28
 8015bbe:	4681      	mov	r9, r0
 8015bc0:	4698      	mov	r8, r3
 8015bc2:	4610      	mov	r0, r2
 8015bc4:	460d      	mov	r5, r1
 8015bc6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015bca:	b981      	cbnz	r1, 8015bee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015bcc:	b14b      	cbz	r3, 8015be2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015bce:	460b      	mov	r3, r1
 8015bd0:	464a      	mov	r2, r9
 8015bd2:	4641      	mov	r1, r8
 8015bd4:	e9cd 4700 	strd	r4, r7, [sp]
 8015bd8:	f7ff ffee 	bl	8015bb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015bdc:	b007      	add	sp, #28
 8015bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be2:	f04f 33ff 	mov.w	r3, #4294967295
 8015be6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015bea:	603b      	str	r3, [r7, #0]
 8015bec:	e7f6      	b.n	8015bdc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015bee:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015bf2:	d107      	bne.n	8015c04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015bf4:	fb09 f602 	mul.w	r6, r9, r2
 8015bf8:	fbb6 f0f4 	udiv	r0, r6, r4
 8015bfc:	fb04 6610 	mls	r6, r4, r0, r6
 8015c00:	603e      	str	r6, [r7, #0]
 8015c02:	e7eb      	b.n	8015bdc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015c04:	2601      	movs	r6, #1
 8015c06:	fa09 fb01 	lsl.w	fp, r9, r1
 8015c0a:	408e      	lsls	r6, r1
 8015c0c:	fbbb f3f4 	udiv	r3, fp, r4
 8015c10:	3e01      	subs	r6, #1
 8015c12:	9302      	str	r3, [sp, #8]
 8015c14:	fb0a f303 	mul.w	r3, sl, r3
 8015c18:	4016      	ands	r6, r2
 8015c1a:	9303      	str	r3, [sp, #12]
 8015c1c:	4630      	mov	r0, r6
 8015c1e:	f7ff ffad 	bl	8015b7c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015c22:	464a      	mov	r2, r9
 8015c24:	460b      	mov	r3, r1
 8015c26:	4601      	mov	r1, r0
 8015c28:	4630      	mov	r0, r6
 8015c2a:	e9cd 4700 	strd	r4, r7, [sp]
 8015c2e:	f7ff ffc3 	bl	8015bb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015c32:	9b02      	ldr	r3, [sp, #8]
 8015c34:	4606      	mov	r6, r0
 8015c36:	eb05 0108 	add.w	r1, r5, r8
 8015c3a:	fb04 bb13 	mls	fp, r4, r3, fp
 8015c3e:	4658      	mov	r0, fp
 8015c40:	f7ff ff9c 	bl	8015b7c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015c44:	ab05      	add	r3, sp, #20
 8015c46:	465a      	mov	r2, fp
 8015c48:	e9cd 4300 	strd	r4, r3, [sp]
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	4650      	mov	r0, sl
 8015c50:	f7ff ffb2 	bl	8015bb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015c54:	6839      	ldr	r1, [r7, #0]
 8015c56:	9a05      	ldr	r2, [sp, #20]
 8015c58:	9b03      	ldr	r3, [sp, #12]
 8015c5a:	4411      	add	r1, r2
 8015c5c:	fbb1 f2f4 	udiv	r2, r1, r4
 8015c60:	18d3      	adds	r3, r2, r3
 8015c62:	fb04 1412 	mls	r4, r4, r2, r1
 8015c66:	441e      	add	r6, r3
 8015c68:	603c      	str	r4, [r7, #0]
 8015c6a:	4430      	add	r0, r6
 8015c6c:	e7b6      	b.n	8015bdc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015c6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c72:	b085      	sub	sp, #20
 8015c74:	f1b0 0900 	subs.w	r9, r0, #0
 8015c78:	461d      	mov	r5, r3
 8015c7a:	4617      	mov	r7, r2
 8015c7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015c7e:	bfbb      	ittet	lt
 8015c80:	f1c9 0900 	rsblt	r9, r9, #0
 8015c84:	f04f 36ff 	movlt.w	r6, #4294967295
 8015c88:	2601      	movge	r6, #1
 8015c8a:	6823      	ldrlt	r3, [r4, #0]
 8015c8c:	bfbc      	itt	lt
 8015c8e:	425b      	neglt	r3, r3
 8015c90:	6023      	strlt	r3, [r4, #0]
 8015c92:	2a00      	cmp	r2, #0
 8015c94:	da04      	bge.n	8015ca0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015c96:	6823      	ldr	r3, [r4, #0]
 8015c98:	4257      	negs	r7, r2
 8015c9a:	4276      	negs	r6, r6
 8015c9c:	425b      	negs	r3, r3
 8015c9e:	6023      	str	r3, [r4, #0]
 8015ca0:	2d00      	cmp	r5, #0
 8015ca2:	4638      	mov	r0, r7
 8015ca4:	bfba      	itte	lt
 8015ca6:	426d      	neglt	r5, r5
 8015ca8:	f04f 38ff 	movlt.w	r8, #4294967295
 8015cac:	f04f 0801 	movge.w	r8, #1
 8015cb0:	f7ff ff64 	bl	8015b7c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015cb4:	ab03      	add	r3, sp, #12
 8015cb6:	463a      	mov	r2, r7
 8015cb8:	e9cd 5300 	strd	r5, r3, [sp]
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	4648      	mov	r0, r9
 8015cc0:	f7ff ff7a 	bl	8015bb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	9a03      	ldr	r2, [sp, #12]
 8015cc8:	4546      	cmp	r6, r8
 8015cca:	441a      	add	r2, r3
 8015ccc:	fb92 f3f5 	sdiv	r3, r2, r5
 8015cd0:	4418      	add	r0, r3
 8015cd2:	fb05 2313 	mls	r3, r5, r3, r2
 8015cd6:	bf18      	it	ne
 8015cd8:	4240      	negne	r0, r0
 8015cda:	1c72      	adds	r2, r6, #1
 8015cdc:	6023      	str	r3, [r4, #0]
 8015cde:	d105      	bne.n	8015cec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	f1c3 0200 	rsb	r2, r3, #0
 8015ce6:	db0b      	blt.n	8015d00 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015ce8:	6022      	str	r2, [r4, #0]
 8015cea:	e006      	b.n	8015cfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015cec:	2e01      	cmp	r6, #1
 8015cee:	d104      	bne.n	8015cfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	da02      	bge.n	8015cfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015cf4:	442b      	add	r3, r5
 8015cf6:	3801      	subs	r0, #1
 8015cf8:	6023      	str	r3, [r4, #0]
 8015cfa:	b005      	add	sp, #20
 8015cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d00:	3801      	subs	r0, #1
 8015d02:	1b52      	subs	r2, r2, r5
 8015d04:	e7f0      	b.n	8015ce8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015d08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015d08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015d0c:	4c1c      	ldr	r4, [pc, #112]	; (8015d80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015d0e:	4605      	mov	r5, r0
 8015d10:	6807      	ldr	r7, [r0, #0]
 8015d12:	69a3      	ldr	r3, [r4, #24]
 8015d14:	b92b      	cbnz	r3, 8015d22 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015d16:	6840      	ldr	r0, [r0, #4]
 8015d18:	e9c5 7000 	strd	r7, r0, [r5]
 8015d1c:	b004      	add	sp, #16
 8015d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d22:	f04f 0802 	mov.w	r8, #2
 8015d26:	68a2      	ldr	r2, [r4, #8]
 8015d28:	ae04      	add	r6, sp, #16
 8015d2a:	6820      	ldr	r0, [r4, #0]
 8015d2c:	fb93 f1f8 	sdiv	r1, r3, r8
 8015d30:	440a      	add	r2, r1
 8015d32:	69e1      	ldr	r1, [r4, #28]
 8015d34:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015d38:	463a      	mov	r2, r7
 8015d3a:	9600      	str	r6, [sp, #0]
 8015d3c:	f7ff ff97 	bl	8015c6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015d40:	69a3      	ldr	r3, [r4, #24]
 8015d42:	4607      	mov	r7, r0
 8015d44:	686a      	ldr	r2, [r5, #4]
 8015d46:	6a21      	ldr	r1, [r4, #32]
 8015d48:	9600      	str	r6, [sp, #0]
 8015d4a:	6860      	ldr	r0, [r4, #4]
 8015d4c:	f7ff ff8f 	bl	8015c6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015d50:	69a3      	ldr	r3, [r4, #24]
 8015d52:	6962      	ldr	r2, [r4, #20]
 8015d54:	4407      	add	r7, r0
 8015d56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015d58:	9600      	str	r6, [sp, #0]
 8015d5a:	68e0      	ldr	r0, [r4, #12]
 8015d5c:	fb93 f8f8 	sdiv	r8, r3, r8
 8015d60:	4442      	add	r2, r8
 8015d62:	9203      	str	r2, [sp, #12]
 8015d64:	682a      	ldr	r2, [r5, #0]
 8015d66:	f7ff ff82 	bl	8015c6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015d6a:	4680      	mov	r8, r0
 8015d6c:	9600      	str	r6, [sp, #0]
 8015d6e:	69a3      	ldr	r3, [r4, #24]
 8015d70:	686a      	ldr	r2, [r5, #4]
 8015d72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015d74:	6920      	ldr	r0, [r4, #16]
 8015d76:	f7ff ff7a 	bl	8015c6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015d7a:	4440      	add	r0, r8
 8015d7c:	e7cc      	b.n	8015d18 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015d7e:	bf00      	nop
 8015d80:	20027bb4 	.word	0x20027bb4

08015d84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015d84:	4b07      	ldr	r3, [pc, #28]	; (8015da4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	2b01      	cmp	r3, #1
 8015d8a:	d109      	bne.n	8015da0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015d8c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015d90:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015d94:	8003      	strh	r3, [r0, #0]
 8015d96:	4b04      	ldr	r3, [pc, #16]	; (8015da8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015d98:	881b      	ldrh	r3, [r3, #0]
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	1a9b      	subs	r3, r3, r2
 8015d9e:	800b      	strh	r3, [r1, #0]
 8015da0:	4770      	bx	lr
 8015da2:	bf00      	nop
 8015da4:	20027b98 	.word	0x20027b98
 8015da8:	20027b94 	.word	0x20027b94

08015dac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015dac:	4b07      	ldr	r3, [pc, #28]	; (8015dcc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015dae:	b510      	push	{r4, lr}
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	2b01      	cmp	r3, #1
 8015db4:	d108      	bne.n	8015dc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015db6:	4b06      	ldr	r3, [pc, #24]	; (8015dd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015db8:	880c      	ldrh	r4, [r1, #0]
 8015dba:	881b      	ldrh	r3, [r3, #0]
 8015dbc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	1b1b      	subs	r3, r3, r4
 8015dc4:	8003      	strh	r3, [r0, #0]
 8015dc6:	800a      	strh	r2, [r1, #0]
 8015dc8:	bd10      	pop	{r4, pc}
 8015dca:	bf00      	nop
 8015dcc:	20027b98 	.word	0x20027b98
 8015dd0:	20027b94 	.word	0x20027b94

08015dd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015dd4:	4b0a      	ldr	r3, [pc, #40]	; (8015e00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015dd6:	b510      	push	{r4, lr}
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	2b01      	cmp	r3, #1
 8015ddc:	d10e      	bne.n	8015dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015dde:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015de2:	8843      	ldrh	r3, [r0, #2]
 8015de4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015de8:	18ca      	adds	r2, r1, r3
 8015dea:	4b06      	ldr	r3, [pc, #24]	; (8015e04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015dec:	8044      	strh	r4, [r0, #2]
 8015dee:	881b      	ldrh	r3, [r3, #0]
 8015df0:	1a9b      	subs	r3, r3, r2
 8015df2:	8003      	strh	r3, [r0, #0]
 8015df4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015df8:	8081      	strh	r1, [r0, #4]
 8015dfa:	80c3      	strh	r3, [r0, #6]
 8015dfc:	bd10      	pop	{r4, pc}
 8015dfe:	bf00      	nop
 8015e00:	20027b98 	.word	0x20027b98
 8015e04:	20027b94 	.word	0x20027b94

08015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015e08:	4b08      	ldr	r3, [pc, #32]	; (8015e2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	d10c      	bne.n	8015e2a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015e10:	8803      	ldrh	r3, [r0, #0]
 8015e12:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015e16:	8842      	ldrh	r2, [r0, #2]
 8015e18:	8002      	strh	r2, [r0, #0]
 8015e1a:	185a      	adds	r2, r3, r1
 8015e1c:	4b04      	ldr	r3, [pc, #16]	; (8015e30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015e1e:	881b      	ldrh	r3, [r3, #0]
 8015e20:	1a9b      	subs	r3, r3, r2
 8015e22:	8043      	strh	r3, [r0, #2]
 8015e24:	88c3      	ldrh	r3, [r0, #6]
 8015e26:	80c1      	strh	r1, [r0, #6]
 8015e28:	8083      	strh	r3, [r0, #4]
 8015e2a:	4770      	bx	lr
 8015e2c:	20027b98 	.word	0x20027b98
 8015e30:	20027b94 	.word	0x20027b94

08015e34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015e34:	4b07      	ldr	r3, [pc, #28]	; (8015e54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015e36:	b510      	push	{r4, lr}
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	2b01      	cmp	r3, #1
 8015e3c:	d108      	bne.n	8015e50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015e3e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015e42:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015e46:	8003      	strh	r3, [r0, #0]
 8015e48:	8893      	ldrh	r3, [r2, #4]
 8015e4a:	3b01      	subs	r3, #1
 8015e4c:	1b1b      	subs	r3, r3, r4
 8015e4e:	800b      	strh	r3, [r1, #0]
 8015e50:	bd10      	pop	{r4, pc}
 8015e52:	bf00      	nop
 8015e54:	20027b98 	.word	0x20027b98

08015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015e58:	4b0a      	ldr	r3, [pc, #40]	; (8015e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015e5a:	460a      	mov	r2, r1
 8015e5c:	b510      	push	{r4, lr}
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	2b01      	cmp	r3, #1
 8015e62:	d10d      	bne.n	8015e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015e64:	8881      	ldrh	r1, [r0, #4]
 8015e66:	8803      	ldrh	r3, [r0, #0]
 8015e68:	440b      	add	r3, r1
 8015e6a:	4601      	mov	r1, r0
 8015e6c:	3b01      	subs	r3, #1
 8015e6e:	f821 3b02 	strh.w	r3, [r1], #2
 8015e72:	f7ff ffdf 	bl	8015e34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015e76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015e7a:	88c2      	ldrh	r2, [r0, #6]
 8015e7c:	80c3      	strh	r3, [r0, #6]
 8015e7e:	8082      	strh	r2, [r0, #4]
 8015e80:	bd10      	pop	{r4, pc}
 8015e82:	bf00      	nop
 8015e84:	20027b98 	.word	0x20027b98

08015e88 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015e88:	4b06      	ldr	r3, [pc, #24]	; (8015ea4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015e8a:	2100      	movs	r1, #0
 8015e8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e90:	4b05      	ldr	r3, [pc, #20]	; (8015ea8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015e92:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8015e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e9a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8015e9e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8015ea2:	4770      	bx	lr
 8015ea4:	20027b94 	.word	0x20027b94
 8015ea8:	20027b96 	.word	0x20027b96

08015eac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015eac:	4b03      	ldr	r3, [pc, #12]	; (8015ebc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015eae:	6818      	ldr	r0, [r3, #0]
 8015eb0:	b110      	cbz	r0, 8015eb8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015eb2:	6803      	ldr	r3, [r0, #0]
 8015eb4:	699b      	ldr	r3, [r3, #24]
 8015eb6:	4718      	bx	r3
 8015eb8:	4770      	bx	lr
 8015eba:	bf00      	nop
 8015ebc:	20027be4 	.word	0x20027be4

08015ec0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015ec0:	4770      	bx	lr
	...

08015ec4 <_ZN8touchgfx11Application4drawEv>:
 8015ec4:	4b09      	ldr	r3, [pc, #36]	; (8015eec <_ZN8touchgfx11Application4drawEv+0x28>)
 8015ec6:	b507      	push	{r0, r1, r2, lr}
 8015ec8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ecc:	2100      	movs	r1, #0
 8015ece:	4b08      	ldr	r3, [pc, #32]	; (8015ef0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015ed0:	9100      	str	r1, [sp, #0]
 8015ed2:	4669      	mov	r1, sp
 8015ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ed8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015edc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015ee0:	6803      	ldr	r3, [r0, #0]
 8015ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee4:	4798      	blx	r3
 8015ee6:	b003      	add	sp, #12
 8015ee8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015eec:	20027b94 	.word	0x20027b94
 8015ef0:	20027b96 	.word	0x20027b96

08015ef4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015ef4:	4b03      	ldr	r3, [pc, #12]	; (8015f04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015ef6:	6818      	ldr	r0, [r3, #0]
 8015ef8:	b110      	cbz	r0, 8015f00 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015efa:	6803      	ldr	r3, [r0, #0]
 8015efc:	69db      	ldr	r3, [r3, #28]
 8015efe:	4718      	bx	r3
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	20027be4 	.word	0x20027be4

08015f08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015f08:	4b03      	ldr	r3, [pc, #12]	; (8015f18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015f0a:	6818      	ldr	r0, [r3, #0]
 8015f0c:	b110      	cbz	r0, 8015f14 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8015f0e:	6803      	ldr	r3, [r0, #0]
 8015f10:	6a1b      	ldr	r3, [r3, #32]
 8015f12:	4718      	bx	r3
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	20027be4 	.word	0x20027be4

08015f1c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8015f22:	4770      	bx	lr

08015f24 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015f24:	4b03      	ldr	r3, [pc, #12]	; (8015f34 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015f26:	6818      	ldr	r0, [r3, #0]
 8015f28:	b110      	cbz	r0, 8015f30 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015f2a:	6803      	ldr	r3, [r0, #0]
 8015f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f2e:	4718      	bx	r3
 8015f30:	4770      	bx	lr
 8015f32:	bf00      	nop
 8015f34:	20027be4 	.word	0x20027be4

08015f38 <_ZN8touchgfx11ApplicationD1Ev>:
 8015f38:	4770      	bx	lr

08015f3a <_ZN8touchgfx11ApplicationD0Ev>:
 8015f3a:	b510      	push	{r4, lr}
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8015f42:	f00f fdd6 	bl	8025af2 <_ZdlPvj>
 8015f46:	4620      	mov	r0, r4
 8015f48:	bd10      	pop	{r4, pc}

08015f4a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015f4a:	b510      	push	{r4, lr}
 8015f4c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015f50:	888a      	ldrh	r2, [r1, #4]
 8015f52:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015f56:	4422      	add	r2, r4
 8015f58:	b212      	sxth	r2, r2
 8015f5a:	4293      	cmp	r3, r2
 8015f5c:	da15      	bge.n	8015f8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015f5e:	8882      	ldrh	r2, [r0, #4]
 8015f60:	4413      	add	r3, r2
 8015f62:	b21b      	sxth	r3, r3
 8015f64:	429c      	cmp	r4, r3
 8015f66:	da10      	bge.n	8015f8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015f68:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015f6c:	88c9      	ldrh	r1, [r1, #6]
 8015f6e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015f72:	4419      	add	r1, r3
 8015f74:	b209      	sxth	r1, r1
 8015f76:	428a      	cmp	r2, r1
 8015f78:	da07      	bge.n	8015f8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015f7a:	88c0      	ldrh	r0, [r0, #6]
 8015f7c:	4410      	add	r0, r2
 8015f7e:	b200      	sxth	r0, r0
 8015f80:	4283      	cmp	r3, r0
 8015f82:	bfac      	ite	ge
 8015f84:	2000      	movge	r0, #0
 8015f86:	2001      	movlt	r0, #1
 8015f88:	bd10      	pop	{r4, pc}
 8015f8a:	2000      	movs	r0, #0
 8015f8c:	e7fc      	b.n	8015f88 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015f8e <_ZN8touchgfx4Rect10restrictToEss>:
 8015f8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	b510      	push	{r4, lr}
 8015f96:	da04      	bge.n	8015fa2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015f98:	8884      	ldrh	r4, [r0, #4]
 8015f9a:	4423      	add	r3, r4
 8015f9c:	8083      	strh	r3, [r0, #4]
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	8003      	strh	r3, [r0, #0]
 8015fa2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015fa6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015faa:	1b09      	subs	r1, r1, r4
 8015fac:	428b      	cmp	r3, r1
 8015fae:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015fb2:	bfc8      	it	gt
 8015fb4:	8081      	strhgt	r1, [r0, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	da04      	bge.n	8015fc4 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015fba:	88c1      	ldrh	r1, [r0, #6]
 8015fbc:	440b      	add	r3, r1
 8015fbe:	80c3      	strh	r3, [r0, #6]
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	8043      	strh	r3, [r0, #2]
 8015fc4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015fc8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015fcc:	1a52      	subs	r2, r2, r1
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	bfc8      	it	gt
 8015fd2:	80c2      	strhgt	r2, [r0, #6]
 8015fd4:	bd10      	pop	{r4, pc}
	...

08015fd8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015fd8:	4b10      	ldr	r3, [pc, #64]	; (801601c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015fda:	b510      	push	{r4, lr}
 8015fdc:	460c      	mov	r4, r1
 8015fde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015fe2:	4b0f      	ldr	r3, [pc, #60]	; (8016020 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015fea:	f7ff ffd0 	bl	8015f8e <_ZN8touchgfx4Rect10restrictToEss>
 8015fee:	4b0d      	ldr	r3, [pc, #52]	; (8016024 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8015ff0:	6818      	ldr	r0, [r3, #0]
 8015ff2:	b190      	cbz	r0, 801601a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015ff4:	6803      	ldr	r3, [r0, #0]
 8015ff6:	4621      	mov	r1, r4
 8015ff8:	689b      	ldr	r3, [r3, #8]
 8015ffa:	4798      	blx	r3
 8015ffc:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8015ffe:	6818      	ldr	r0, [r3, #0]
 8016000:	b118      	cbz	r0, 801600a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016002:	6803      	ldr	r3, [r0, #0]
 8016004:	4621      	mov	r1, r4
 8016006:	689b      	ldr	r3, [r3, #8]
 8016008:	4798      	blx	r3
 801600a:	4b08      	ldr	r3, [pc, #32]	; (801602c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801600c:	4621      	mov	r1, r4
 801600e:	6818      	ldr	r0, [r3, #0]
 8016010:	6803      	ldr	r3, [r0, #0]
 8016012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016016:	69db      	ldr	r3, [r3, #28]
 8016018:	4718      	bx	r3
 801601a:	bd10      	pop	{r4, pc}
 801601c:	20027b96 	.word	0x20027b96
 8016020:	20027b94 	.word	0x20027b94
 8016024:	20027be4 	.word	0x20027be4
 8016028:	20027be0 	.word	0x20027be0
 801602c:	20027ba0 	.word	0x20027ba0

08016030 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016032:	4606      	mov	r6, r0
 8016034:	4608      	mov	r0, r1
 8016036:	460f      	mov	r7, r1
 8016038:	f7fa f90f 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 801603c:	b9e8      	cbnz	r0, 801607a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801603e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016042:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016046:	42a5      	cmp	r5, r4
 8016048:	db17      	blt.n	801607a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801604a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801604e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016052:	429a      	cmp	r2, r3
 8016054:	db11      	blt.n	801607a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016056:	88b9      	ldrh	r1, [r7, #4]
 8016058:	440d      	add	r5, r1
 801605a:	88b1      	ldrh	r1, [r6, #4]
 801605c:	440c      	add	r4, r1
 801605e:	b22d      	sxth	r5, r5
 8016060:	b224      	sxth	r4, r4
 8016062:	42a5      	cmp	r5, r4
 8016064:	dc09      	bgt.n	801607a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016066:	88f8      	ldrh	r0, [r7, #6]
 8016068:	4410      	add	r0, r2
 801606a:	88f2      	ldrh	r2, [r6, #6]
 801606c:	4413      	add	r3, r2
 801606e:	b200      	sxth	r0, r0
 8016070:	b21b      	sxth	r3, r3
 8016072:	4298      	cmp	r0, r3
 8016074:	bfcc      	ite	gt
 8016076:	2000      	movgt	r0, #0
 8016078:	2001      	movle	r0, #1
 801607a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801607c <_ZN8touchgfx11Application11getInstanceEv>:
 801607c:	4b01      	ldr	r3, [pc, #4]	; (8016084 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801607e:	6818      	ldr	r0, [r3, #0]
 8016080:	4770      	bx	lr
 8016082:	bf00      	nop
 8016084:	20027bf4 	.word	0x20027bf4

08016088 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8016088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801608a:	4b10      	ldr	r3, [pc, #64]	; (80160cc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801608c:	4605      	mov	r5, r0
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	b1d3      	cbz	r3, 80160c8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8016092:	4b0f      	ldr	r3, [pc, #60]	; (80160d0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8016094:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 8016098:	4f0e      	ldr	r7, [pc, #56]	; (80160d4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801609a:	881c      	ldrh	r4, [r3, #0]
 801609c:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 80160a0:	42a3      	cmp	r3, r4
 80160a2:	d90e      	bls.n	80160c2 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80160aa:	b10a      	cbz	r2, 80160b0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 80160ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80160ae:	b900      	cbnz	r0, 80160b2 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 80160b0:	6898      	ldr	r0, [r3, #8]
 80160b2:	6803      	ldr	r3, [r0, #0]
 80160b4:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 80160b8:	3401      	adds	r4, #1
 80160ba:	69db      	ldr	r3, [r3, #28]
 80160bc:	4798      	blx	r3
 80160be:	b2a4      	uxth	r4, r4
 80160c0:	e7ec      	b.n	801609c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 80160c2:	2300      	movs	r3, #0
 80160c4:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 80160c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ca:	bf00      	nop
 80160cc:	20027b9e 	.word	0x20027b9e
 80160d0:	20000070 	.word	0x20000070
 80160d4:	20027ba0 	.word	0x20027ba0

080160d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80160d8:	2300      	movs	r3, #0
 80160da:	b510      	push	{r4, lr}
 80160dc:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80160e0:	4604      	mov	r4, r0
 80160e2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80160e6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80160ea:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80160ee:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d90e      	bls.n	8016114 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80160f6:	18e2      	adds	r2, r4, r3
 80160f8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80160fc:	b122      	cbz	r2, 8016108 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80160fe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016102:	6803      	ldr	r3, [r0, #0]
 8016104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016106:	4798      	blx	r3
 8016108:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801610c:	3301      	adds	r3, #1
 801610e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8016112:	e7ea      	b.n	80160ea <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016114:	bd10      	pop	{r4, pc}

08016116 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8016116:	b530      	push	{r4, r5, lr}
 8016118:	2200      	movs	r2, #0
 801611a:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801611e:	b293      	uxth	r3, r2
 8016120:	429d      	cmp	r5, r3
 8016122:	d90e      	bls.n	8016142 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016124:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8016128:	428b      	cmp	r3, r1
 801612a:	d10b      	bne.n	8016144 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801612c:	1884      	adds	r4, r0, r2
 801612e:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8016132:	b13b      	cbz	r3, 8016144 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016134:	3b01      	subs	r3, #1
 8016136:	b2db      	uxtb	r3, r3
 8016138:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801613c:	b90b      	cbnz	r3, 8016142 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801613e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016142:	bd30      	pop	{r4, r5, pc}
 8016144:	3201      	adds	r2, #1
 8016146:	e7ea      	b.n	801611e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08016148 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016148:	2300      	movs	r3, #0
 801614a:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801614e:	30a4      	adds	r0, #164	; 0xa4
 8016150:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016154:	f802 3b01 	strb.w	r3, [r2], #1
 8016158:	4282      	cmp	r2, r0
 801615a:	d1fb      	bne.n	8016154 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801615c:	4770      	bx	lr
	...

08016160 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	4c0b      	ldr	r4, [pc, #44]	; (8016190 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016164:	4605      	mov	r5, r0
 8016166:	460e      	mov	r6, r1
 8016168:	6820      	ldr	r0, [r4, #0]
 801616a:	b110      	cbz	r0, 8016172 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801616c:	6803      	ldr	r3, [r0, #0]
 801616e:	695b      	ldr	r3, [r3, #20]
 8016170:	4798      	blx	r3
 8016172:	1d28      	adds	r0, r5, #4
 8016174:	f7ff ffe8 	bl	8016148 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016178:	6026      	str	r6, [r4, #0]
 801617a:	6833      	ldr	r3, [r6, #0]
 801617c:	4630      	mov	r0, r6
 801617e:	68db      	ldr	r3, [r3, #12]
 8016180:	4798      	blx	r3
 8016182:	682b      	ldr	r3, [r5, #0]
 8016184:	4628      	mov	r0, r5
 8016186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801618c:	4718      	bx	r3
 801618e:	bf00      	nop
 8016190:	20027be4 	.word	0x20027be4

08016194 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016194:	2300      	movs	r3, #0
 8016196:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801619a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801619e:	461a      	mov	r2, r3
 80161a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161a2:	461c      	mov	r4, r3
 80161a4:	461d      	mov	r5, r3
 80161a6:	459c      	cmp	ip, r3
 80161a8:	dd1a      	ble.n	80161e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80161aa:	18c6      	adds	r6, r0, r3
 80161ac:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80161b0:	b16e      	cbz	r6, 80161ce <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d008      	beq.n	80161c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80161b6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80161ba:	fa1f fe82 	uxth.w	lr, r2
 80161be:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80161c2:	1887      	adds	r7, r0, r2
 80161c4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 80161c8:	3201      	adds	r2, #1
 80161ca:	3301      	adds	r3, #1
 80161cc:	e7eb      	b.n	80161a6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80161ce:	4299      	cmp	r1, r3
 80161d0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80161d4:	bfa8      	it	ge
 80161d6:	3501      	addge	r5, #1
 80161d8:	429e      	cmp	r6, r3
 80161da:	bfc8      	it	gt
 80161dc:	3401      	addgt	r4, #1
 80161de:	e7f4      	b.n	80161ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80161e0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80161e4:	1b49      	subs	r1, r1, r5
 80161e6:	1b1b      	subs	r3, r3, r4
 80161e8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80161ec:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80161f0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80161f4:	4293      	cmp	r3, r2
 80161f6:	dd03      	ble.n	8016200 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80161f8:	3b01      	subs	r3, #1
 80161fa:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80161fe:	e7f7      	b.n	80161f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016204 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	4d16      	ldr	r5, [pc, #88]	; (8016260 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016208:	4604      	mov	r4, r0
 801620a:	6828      	ldr	r0, [r5, #0]
 801620c:	b140      	cbz	r0, 8016220 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801620e:	7a03      	ldrb	r3, [r0, #8]
 8016210:	b933      	cbnz	r3, 8016220 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016212:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016216:	6803      	ldr	r3, [r0, #0]
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801621e:	4718      	bx	r3
 8016220:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8016224:	4e0f      	ldr	r6, [pc, #60]	; (8016264 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016226:	b973      	cbnz	r3, 8016246 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016228:	b168      	cbz	r0, 8016246 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801622a:	7a03      	ldrb	r3, [r0, #8]
 801622c:	b15b      	cbz	r3, 8016246 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801622e:	6830      	ldr	r0, [r6, #0]
 8016230:	b110      	cbz	r0, 8016238 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016232:	6803      	ldr	r3, [r0, #0]
 8016234:	691b      	ldr	r3, [r3, #16]
 8016236:	4798      	blx	r3
 8016238:	6828      	ldr	r0, [r5, #0]
 801623a:	6803      	ldr	r3, [r0, #0]
 801623c:	68db      	ldr	r3, [r3, #12]
 801623e:	4798      	blx	r3
 8016240:	2301      	movs	r3, #1
 8016242:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016246:	3404      	adds	r4, #4
 8016248:	4620      	mov	r0, r4
 801624a:	f7ff ff45 	bl	80160d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801624e:	4620      	mov	r0, r4
 8016250:	f7ff ffa0 	bl	8016194 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016254:	6830      	ldr	r0, [r6, #0]
 8016256:	b110      	cbz	r0, 801625e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016258:	6803      	ldr	r3, [r0, #0]
 801625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801625c:	e7dd      	b.n	801621a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801625e:	bd70      	pop	{r4, r5, r6, pc}
 8016260:	20027be8 	.word	0x20027be8
 8016264:	20027be4 	.word	0x20027be4

08016268 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8016268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801626a:	2300      	movs	r3, #0
 801626c:	4604      	mov	r4, r0
 801626e:	460d      	mov	r5, r1
 8016270:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 8016274:	4618      	mov	r0, r3
 8016276:	b29a      	uxth	r2, r3
 8016278:	4291      	cmp	r1, r2
 801627a:	d912      	bls.n	80162a2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801627c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8016280:	18e6      	adds	r6, r4, r3
 8016282:	42af      	cmp	r7, r5
 8016284:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 8016288:	d105      	bne.n	8016296 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801628a:	2aff      	cmp	r2, #255	; 0xff
 801628c:	d002      	beq.n	8016294 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801628e:	3201      	adds	r2, #1
 8016290:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 8016294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016296:	2a00      	cmp	r2, #0
 8016298:	f103 0301 	add.w	r3, r3, #1
 801629c:	bf08      	it	eq
 801629e:	2001      	moveq	r0, #1
 80162a0:	e7e9      	b.n	8016276 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80162a2:	b120      	cbz	r0, 80162ae <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80162a4:	2920      	cmp	r1, #32
 80162a6:	d102      	bne.n	80162ae <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80162a8:	4620      	mov	r0, r4
 80162aa:	f7ff ff73 	bl	8016194 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80162ae:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 80162b2:	2b1f      	cmp	r3, #31
 80162b4:	d8ee      	bhi.n	8016294 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80162b6:	18e2      	adds	r2, r4, r3
 80162b8:	2101      	movs	r1, #1
 80162ba:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 80162be:	185a      	adds	r2, r3, r1
 80162c0:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 80162c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80162c8:	e7e4      	b.n	8016294 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

080162ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80162ca:	4603      	mov	r3, r0
 80162cc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80162d0:	2200      	movs	r2, #0
 80162d2:	801a      	strh	r2, [r3, #0]
 80162d4:	3308      	adds	r3, #8
 80162d6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80162da:	f823 2c04 	strh.w	r2, [r3, #-4]
 80162de:	f823 2c02 	strh.w	r2, [r3, #-2]
 80162e2:	428b      	cmp	r3, r1
 80162e4:	d1f5      	bne.n	80162d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80162e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80162ea:	4770      	bx	lr

080162ec <_ZN8touchgfx11ApplicationC1Ev>:
 80162ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ee:	4b1d      	ldr	r3, [pc, #116]	; (8016364 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80162f0:	4606      	mov	r6, r0
 80162f2:	4604      	mov	r4, r0
 80162f4:	2500      	movs	r5, #0
 80162f6:	f846 3b04 	str.w	r3, [r6], #4
 80162fa:	22a8      	movs	r2, #168	; 0xa8
 80162fc:	2100      	movs	r1, #0
 80162fe:	4630      	mov	r0, r6
 8016300:	f00f fdac 	bl	8025e5c <memset>
 8016304:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8016308:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801630c:	4f16      	ldr	r7, [pc, #88]	; (8016368 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801630e:	f7ff ffdc 	bl	80162ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016312:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016316:	f7ff ffd8 	bl	80162ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801631a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801631e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016322:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8016326:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801632a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801632e:	490f      	ldr	r1, [pc, #60]	; (801636c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016330:	480f      	ldr	r0, [pc, #60]	; (8016370 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016332:	f00e fee9 	bl	8025108 <CRC_Lock>
 8016336:	4b0f      	ldr	r3, [pc, #60]	; (8016374 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016338:	b158      	cbz	r0, 8016352 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801633a:	801d      	strh	r5, [r3, #0]
 801633c:	2300      	movs	r3, #0
 801633e:	4a0e      	ldr	r2, [pc, #56]	; (8016378 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016340:	4630      	mov	r0, r6
 8016342:	6013      	str	r3, [r2, #0]
 8016344:	4a0d      	ldr	r2, [pc, #52]	; (801637c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016346:	603b      	str	r3, [r7, #0]
 8016348:	6013      	str	r3, [r2, #0]
 801634a:	f7ff fefd 	bl	8016148 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801634e:	4620      	mov	r0, r4
 8016350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016356:	2002      	movs	r0, #2
 8016358:	801a      	strh	r2, [r3, #0]
 801635a:	6038      	str	r0, [r7, #0]
 801635c:	f001 faee 	bl	801793c <_ZN8touchgfx6Screen4drawEv>
 8016360:	e7ec      	b.n	801633c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016362:	bf00      	nop
 8016364:	0802b184 	.word	0x0802b184
 8016368:	20027be4 	.word	0x20027be4
 801636c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016370:	f407a5c2 	.word	0xf407a5c2
 8016374:	20000070 	.word	0x20000070
 8016378:	20027bf4 	.word	0x20027bf4
 801637c:	20027be8 	.word	0x20027be8

08016380 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016380:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016384:	3b01      	subs	r3, #1
 8016386:	b29b      	uxth	r3, r3
 8016388:	428b      	cmp	r3, r1
 801638a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801638e:	b510      	push	{r4, lr}
 8016390:	d908      	bls.n	80163a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016392:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016396:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80163a0:	685a      	ldr	r2, [r3, #4]
 80163a2:	6062      	str	r2, [r4, #4]
 80163a4:	bd10      	pop	{r4, pc}
	...

080163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80163a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ac:	b08f      	sub	sp, #60	; 0x3c
 80163ae:	4b8f      	ldr	r3, [pc, #572]	; (80165ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80163b0:	4683      	mov	fp, r0
 80163b2:	ac0a      	add	r4, sp, #40	; 0x28
 80163b4:	e884 0006 	stmia.w	r4, {r1, r2}
 80163b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163bc:	4620      	mov	r0, r4
 80163be:	4b8c      	ldr	r3, [pc, #560]	; (80165f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80163c0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80163c4:	f7ff fde3 	bl	8015f8e <_ZN8touchgfx4Rect10restrictToEss>
 80163c8:	4620      	mov	r0, r4
 80163ca:	f7f9 ff46 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d16a      	bne.n	80164a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80163d2:	9403      	str	r4, [sp, #12]
 80163d4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80163d8:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80163dc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80163e0:	9301      	str	r3, [sp, #4]
 80163e2:	35a4      	adds	r5, #164	; 0xa4
 80163e4:	b15c      	cbz	r4, 80163fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80163e6:	4629      	mov	r1, r5
 80163e8:	9803      	ldr	r0, [sp, #12]
 80163ea:	f7ff fe21 	bl	8016030 <_ZNK8touchgfx4Rect8includesERKS0_>
 80163ee:	3c01      	subs	r4, #1
 80163f0:	b118      	cbz	r0, 80163fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80163f2:	b2a1      	uxth	r1, r4
 80163f4:	9801      	ldr	r0, [sp, #4]
 80163f6:	f7ff ffc3 	bl	8016380 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80163fa:	3d08      	subs	r5, #8
 80163fc:	e7f2      	b.n	80163e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80163fe:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8016402:	f108 33ff 	add.w	r3, r8, #4294967295
 8016406:	f8cd 8010 	str.w	r8, [sp, #16]
 801640a:	9302      	str	r3, [sp, #8]
 801640c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8016410:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8016414:	9306      	str	r3, [sp, #24]
 8016416:	445c      	add	r4, fp
 8016418:	2500      	movs	r5, #0
 801641a:	4626      	mov	r6, r4
 801641c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016420:	462f      	mov	r7, r5
 8016422:	9b05      	ldr	r3, [sp, #20]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d073      	beq.n	8016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016428:	9903      	ldr	r1, [sp, #12]
 801642a:	4630      	mov	r0, r6
 801642c:	f7ff fd8d 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016430:	b350      	cbz	r0, 8016488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016432:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8016436:	f9b6 c000 	ldrsh.w	ip, [r6]
 801643a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801643e:	45e6      	cmp	lr, ip
 8016440:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8016444:	db33      	blt.n	80164ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016446:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801644a:	88b3      	ldrh	r3, [r6, #4]
 801644c:	4472      	add	r2, lr
 801644e:	4463      	add	r3, ip
 8016450:	b212      	sxth	r2, r2
 8016452:	b21b      	sxth	r3, r3
 8016454:	429a      	cmp	r2, r3
 8016456:	dc2a      	bgt.n	80164ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016458:	fa1f f289 	uxth.w	r2, r9
 801645c:	88f3      	ldrh	r3, [r6, #6]
 801645e:	45ca      	cmp	sl, r9
 8016460:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016464:	4413      	add	r3, r2
 8016466:	fa1f fc8a 	uxth.w	ip, sl
 801646a:	b29b      	uxth	r3, r3
 801646c:	fa0f fe83 	sxth.w	lr, r3
 8016470:	db0f      	blt.n	8016492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016472:	eba3 030c 	sub.w	r3, r3, ip
 8016476:	1ac9      	subs	r1, r1, r3
 8016478:	b209      	sxth	r1, r1
 801647a:	2900      	cmp	r1, #0
 801647c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016480:	dd12      	ble.n	80164a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016482:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8016486:	4605      	mov	r5, r0
 8016488:	9b05      	ldr	r3, [sp, #20]
 801648a:	3e08      	subs	r6, #8
 801648c:	3b01      	subs	r3, #1
 801648e:	9305      	str	r3, [sp, #20]
 8016490:	e7c7      	b.n	8016422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016492:	4461      	add	r1, ip
 8016494:	b209      	sxth	r1, r1
 8016496:	4571      	cmp	r1, lr
 8016498:	dc38      	bgt.n	801650c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801649a:	eba2 020c 	sub.w	r2, r2, ip
 801649e:	b212      	sxth	r2, r2
 80164a0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80164a4:	2a00      	cmp	r2, #0
 80164a6:	dcee      	bgt.n	8016486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80164a8:	b00f      	add	sp, #60	; 0x3c
 80164aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ae:	45ca      	cmp	sl, r9
 80164b0:	db2c      	blt.n	801650c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80164b2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80164b6:	449a      	add	sl, r3
 80164b8:	88f3      	ldrh	r3, [r6, #6]
 80164ba:	4499      	add	r9, r3
 80164bc:	fa0f fa8a 	sxth.w	sl, sl
 80164c0:	fa0f f989 	sxth.w	r9, r9
 80164c4:	45ca      	cmp	sl, r9
 80164c6:	dc21      	bgt.n	801650c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80164c8:	fa1f f28c 	uxth.w	r2, ip
 80164cc:	88b3      	ldrh	r3, [r6, #4]
 80164ce:	45e6      	cmp	lr, ip
 80164d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80164d4:	4413      	add	r3, r2
 80164d6:	fa1f f98e 	uxth.w	r9, lr
 80164da:	b29b      	uxth	r3, r3
 80164dc:	fa0f fa83 	sxth.w	sl, r3
 80164e0:	db0a      	blt.n	80164f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80164e2:	eba3 0309 	sub.w	r3, r3, r9
 80164e6:	1ac9      	subs	r1, r1, r3
 80164e8:	b209      	sxth	r1, r1
 80164ea:	2900      	cmp	r1, #0
 80164ec:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80164f0:	ddda      	ble.n	80164a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80164f2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80164f6:	e7c6      	b.n	8016486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80164f8:	4449      	add	r1, r9
 80164fa:	b209      	sxth	r1, r1
 80164fc:	4551      	cmp	r1, sl
 80164fe:	dc05      	bgt.n	801650c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016500:	eba2 0209 	sub.w	r2, r2, r9
 8016504:	b212      	sxth	r2, r2
 8016506:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801650a:	e7cb      	b.n	80164a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801650c:	4607      	mov	r7, r0
 801650e:	e7bb      	b.n	8016488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016510:	2d00      	cmp	r5, #0
 8016512:	d181      	bne.n	8016418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016514:	2f00      	cmp	r7, #0
 8016516:	f000 81dd 	beq.w	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801651a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801651e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8016522:	b2b3      	uxth	r3, r6
 8016524:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016528:	b2b9      	uxth	r1, r7
 801652a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801652e:	441a      	add	r2, r3
 8016530:	448a      	add	sl, r1
 8016532:	9105      	str	r1, [sp, #20]
 8016534:	b292      	uxth	r2, r2
 8016536:	fa1f fa8a 	uxth.w	sl, sl
 801653a:	fa0f f882 	sxth.w	r8, r2
 801653e:	fa0f f98a 	sxth.w	r9, sl
 8016542:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016546:	9b04      	ldr	r3, [sp, #16]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d053      	beq.n	80165f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801654c:	9903      	ldr	r1, [sp, #12]
 801654e:	4620      	mov	r0, r4
 8016550:	f7ff fcfb 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016554:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016558:	b1c0      	cbz	r0, 801658c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801655a:	f9b4 e000 	ldrsh.w	lr, [r4]
 801655e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016562:	4576      	cmp	r6, lr
 8016564:	dc23      	bgt.n	80165ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016566:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801656a:	44f4      	add	ip, lr
 801656c:	fa0f fc8c 	sxth.w	ip, ip
 8016570:	45e0      	cmp	r8, ip
 8016572:	db1c      	blt.n	80165ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016574:	428f      	cmp	r7, r1
 8016576:	fa1f fc81 	uxth.w	ip, r1
 801657a:	88e1      	ldrh	r1, [r4, #6]
 801657c:	dc0d      	bgt.n	801659a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801657e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016582:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016586:	eba1 010c 	sub.w	r1, r1, ip
 801658a:	80e1      	strh	r1, [r4, #6]
 801658c:	4628      	mov	r0, r5
 801658e:	9904      	ldr	r1, [sp, #16]
 8016590:	3c08      	subs	r4, #8
 8016592:	4605      	mov	r5, r0
 8016594:	3901      	subs	r1, #1
 8016596:	9104      	str	r1, [sp, #16]
 8016598:	e7d3      	b.n	8016542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801659a:	4461      	add	r1, ip
 801659c:	b209      	sxth	r1, r1
 801659e:	4549      	cmp	r1, r9
 80165a0:	dcf5      	bgt.n	801658e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165a2:	9905      	ldr	r1, [sp, #20]
 80165a4:	eba1 0c0c 	sub.w	ip, r1, ip
 80165a8:	f8a4 c006 	strh.w	ip, [r4, #6]
 80165ac:	e7ee      	b.n	801658c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80165ae:	428f      	cmp	r7, r1
 80165b0:	dced      	bgt.n	801658e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165b2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80165b6:	4461      	add	r1, ip
 80165b8:	b209      	sxth	r1, r1
 80165ba:	4589      	cmp	r9, r1
 80165bc:	dbe7      	blt.n	801658e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165be:	4576      	cmp	r6, lr
 80165c0:	fa1f fc8e 	uxth.w	ip, lr
 80165c4:	88a1      	ldrh	r1, [r4, #4]
 80165c6:	dc07      	bgt.n	80165d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80165c8:	eba2 0c0c 	sub.w	ip, r2, ip
 80165cc:	f8a4 8000 	strh.w	r8, [r4]
 80165d0:	eba1 010c 	sub.w	r1, r1, ip
 80165d4:	80a1      	strh	r1, [r4, #4]
 80165d6:	e7d9      	b.n	801658c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80165d8:	4461      	add	r1, ip
 80165da:	b209      	sxth	r1, r1
 80165dc:	4588      	cmp	r8, r1
 80165de:	dbd6      	blt.n	801658e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80165e0:	eba3 0c0c 	sub.w	ip, r3, ip
 80165e4:	f8a4 c004 	strh.w	ip, [r4, #4]
 80165e8:	e7d0      	b.n	801658c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80165ea:	bf00      	nop
 80165ec:	20027b96 	.word	0x20027b96
 80165f0:	20027b94 	.word	0x20027b94
 80165f4:	2d00      	cmp	r5, #0
 80165f6:	f000 816d 	beq.w	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80165fa:	9b06      	ldr	r3, [sp, #24]
 80165fc:	445b      	add	r3, fp
 80165fe:	461c      	mov	r4, r3
 8016600:	9b02      	ldr	r3, [sp, #8]
 8016602:	3301      	adds	r3, #1
 8016604:	f000 8166 	beq.w	80168d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016608:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801660c:	9803      	ldr	r0, [sp, #12]
 801660e:	4629      	mov	r1, r5
 8016610:	f7ff fd0e 	bl	8016030 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016614:	b120      	cbz	r0, 8016620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016616:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801661a:	9801      	ldr	r0, [sp, #4]
 801661c:	f7ff feb0 	bl	8016380 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016620:	9903      	ldr	r1, [sp, #12]
 8016622:	4628      	mov	r0, r5
 8016624:	f7ff fc91 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016628:	2800      	cmp	r0, #0
 801662a:	f000 809c 	beq.w	8016766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801662e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8016632:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8016636:	fa1f f189 	uxth.w	r1, r9
 801663a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801663e:	9309      	str	r3, [sp, #36]	; 0x24
 8016640:	eb01 0c03 	add.w	ip, r1, r3
 8016644:	b283      	uxth	r3, r0
 8016646:	4548      	cmp	r0, r9
 8016648:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801664c:	fa1f fa8c 	uxth.w	sl, ip
 8016650:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8016654:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8016658:	eb03 050c 	add.w	r5, r3, ip
 801665c:	b2ad      	uxth	r5, r5
 801665e:	9505      	str	r5, [sp, #20]
 8016660:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016664:	9504      	str	r5, [sp, #16]
 8016666:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801666a:	f340 8099 	ble.w	80167a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801666e:	1a5b      	subs	r3, r3, r1
 8016670:	4596      	cmp	lr, r2
 8016672:	fa0f f08a 	sxth.w	r0, sl
 8016676:	b29b      	uxth	r3, r3
 8016678:	b21e      	sxth	r6, r3
 801667a:	dd2e      	ble.n	80166da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801667c:	9f02      	ldr	r7, [sp, #8]
 801667e:	fa1f fe8e 	uxth.w	lr, lr
 8016682:	b292      	uxth	r2, r2
 8016684:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8016688:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801668c:	9f04      	ldr	r7, [sp, #16]
 801668e:	ebae 0102 	sub.w	r1, lr, r2
 8016692:	44a6      	add	lr, r4
 8016694:	1a3f      	subs	r7, r7, r0
 8016696:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801669a:	b289      	uxth	r1, r1
 801669c:	4402      	add	r2, r0
 801669e:	fa0f fe8e 	sxth.w	lr, lr
 80166a2:	b20d      	sxth	r5, r1
 80166a4:	b212      	sxth	r2, r2
 80166a6:	436f      	muls	r7, r5
 80166a8:	ebae 0202 	sub.w	r2, lr, r2
 80166ac:	4372      	muls	r2, r6
 80166ae:	4297      	cmp	r7, r2
 80166b0:	db09      	blt.n	80166c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80166b2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80166b6:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80166ba:	449c      	add	ip, r3
 80166bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80166c0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80166c4:	e686      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80166c6:	4421      	add	r1, r4
 80166c8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80166cc:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80166d0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80166d4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80166d8:	e67c      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80166da:	9f04      	ldr	r7, [sp, #16]
 80166dc:	42b8      	cmp	r0, r7
 80166de:	da27      	bge.n	8016730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80166e0:	9902      	ldr	r1, [sp, #8]
 80166e2:	1a3f      	subs	r7, r7, r0
 80166e4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80166e8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80166ec:	eb05 010e 	add.w	r1, r5, lr
 80166f0:	fa1f f881 	uxth.w	r8, r1
 80166f4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80166f8:	4411      	add	r1, r2
 80166fa:	fa0f f988 	sxth.w	r9, r8
 80166fe:	eba2 020e 	sub.w	r2, r2, lr
 8016702:	eba1 0108 	sub.w	r1, r1, r8
 8016706:	4372      	muls	r2, r6
 8016708:	b289      	uxth	r1, r1
 801670a:	fa0f f881 	sxth.w	r8, r1
 801670e:	fb08 f707 	mul.w	r7, r8, r7
 8016712:	42ba      	cmp	r2, r7
 8016714:	dc06      	bgt.n	8016724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016716:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801671a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801671e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8016722:	e7ca      	b.n	80166ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016724:	4429      	add	r1, r5
 8016726:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801672a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801672e:	e651      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016730:	9805      	ldr	r0, [sp, #20]
 8016732:	2d06      	cmp	r5, #6
 8016734:	ebaa 0000 	sub.w	r0, sl, r0
 8016738:	b280      	uxth	r0, r0
 801673a:	fa0f fe80 	sxth.w	lr, r0
 801673e:	d817      	bhi.n	8016770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016740:	9b04      	ldr	r3, [sp, #16]
 8016742:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8016746:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801674a:	1c6b      	adds	r3, r5, #1
 801674c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8016750:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016754:	9b01      	ldr	r3, [sp, #4]
 8016756:	9801      	ldr	r0, [sp, #4]
 8016758:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801675c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016760:	805a      	strh	r2, [r3, #2]
 8016762:	809e      	strh	r6, [r3, #4]
 8016764:	80d9      	strh	r1, [r3, #6]
 8016766:	9b02      	ldr	r3, [sp, #8]
 8016768:	3c08      	subs	r4, #8
 801676a:	3b01      	subs	r3, #1
 801676c:	9302      	str	r3, [sp, #8]
 801676e:	e747      	b.n	8016600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016770:	9a02      	ldr	r2, [sp, #8]
 8016772:	45b6      	cmp	lr, r6
 8016774:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016778:	db0d      	blt.n	8016796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801677a:	449c      	add	ip, r3
 801677c:	445a      	add	r2, fp
 801677e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016782:	fa1f fc8c 	uxth.w	ip, ip
 8016786:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801678a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801678e:	448c      	add	ip, r1
 8016790:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016794:	e61e      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016796:	445a      	add	r2, fp
 8016798:	4484      	add	ip, r0
 801679a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801679e:	e78f      	b.n	80166c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80167a0:	fa1f f18e 	uxth.w	r1, lr
 80167a4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80167a8:	b293      	uxth	r3, r2
 80167aa:	4596      	cmp	lr, r2
 80167ac:	eb01 0806 	add.w	r8, r1, r6
 80167b0:	9306      	str	r3, [sp, #24]
 80167b2:	fa1f f888 	uxth.w	r8, r8
 80167b6:	9f06      	ldr	r7, [sp, #24]
 80167b8:	fa0f f388 	sxth.w	r3, r8
 80167bc:	9307      	str	r3, [sp, #28]
 80167be:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80167c2:	443b      	add	r3, r7
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	9308      	str	r3, [sp, #32]
 80167c8:	da24      	bge.n	8016814 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80167ca:	9905      	ldr	r1, [sp, #20]
 80167cc:	eba3 0308 	sub.w	r3, r3, r8
 80167d0:	eba2 020e 	sub.w	r2, r2, lr
 80167d4:	eba9 0000 	sub.w	r0, r9, r0
 80167d8:	ebaa 0401 	sub.w	r4, sl, r1
 80167dc:	b29b      	uxth	r3, r3
 80167de:	b2a4      	uxth	r4, r4
 80167e0:	b219      	sxth	r1, r3
 80167e2:	b225      	sxth	r5, r4
 80167e4:	4348      	muls	r0, r1
 80167e6:	436a      	muls	r2, r5
 80167e8:	4282      	cmp	r2, r0
 80167ea:	9a02      	ldr	r2, [sp, #8]
 80167ec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80167f0:	445a      	add	r2, fp
 80167f2:	dc06      	bgt.n	8016802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80167f4:	9b07      	ldr	r3, [sp, #28]
 80167f6:	44a4      	add	ip, r4
 80167f8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80167fc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8016800:	e75e      	b.n	80166c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016802:	9904      	ldr	r1, [sp, #16]
 8016804:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8016808:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801680c:	4433      	add	r3, r6
 801680e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016812:	e5df      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016814:	9f06      	ldr	r7, [sp, #24]
 8016816:	9b04      	ldr	r3, [sp, #16]
 8016818:	1bc9      	subs	r1, r1, r7
 801681a:	fa0f f78a 	sxth.w	r7, sl
 801681e:	b289      	uxth	r1, r1
 8016820:	429f      	cmp	r7, r3
 8016822:	fa0f fe81 	sxth.w	lr, r1
 8016826:	dd23      	ble.n	8016870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016828:	9a05      	ldr	r2, [sp, #20]
 801682a:	eba9 0000 	sub.w	r0, r9, r0
 801682e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016832:	ebaa 0202 	sub.w	r2, sl, r2
 8016836:	9d07      	ldr	r5, [sp, #28]
 8016838:	fb0e f000 	mul.w	r0, lr, r0
 801683c:	b292      	uxth	r2, r2
 801683e:	eba5 0a03 	sub.w	sl, r5, r3
 8016842:	9b02      	ldr	r3, [sp, #8]
 8016844:	b214      	sxth	r4, r2
 8016846:	00db      	lsls	r3, r3, #3
 8016848:	fb04 fa0a 	mul.w	sl, r4, sl
 801684c:	445b      	add	r3, fp
 801684e:	4550      	cmp	r0, sl
 8016850:	db03      	blt.n	801685a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016852:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8016856:	4494      	add	ip, r2
 8016858:	e732      	b.n	80166c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801685a:	9a04      	ldr	r2, [sp, #16]
 801685c:	4431      	add	r1, r6
 801685e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8016862:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016866:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801686a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801686e:	e75c      	b.n	801672a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016870:	9b08      	ldr	r3, [sp, #32]
 8016872:	2d06      	cmp	r5, #6
 8016874:	eba3 0308 	sub.w	r3, r3, r8
 8016878:	b29b      	uxth	r3, r3
 801687a:	b218      	sxth	r0, r3
 801687c:	d813      	bhi.n	80168a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801687e:	9b07      	ldr	r3, [sp, #28]
 8016880:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8016884:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016888:	1c6b      	adds	r3, r5, #1
 801688a:	9901      	ldr	r1, [sp, #4]
 801688c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016890:	9b01      	ldr	r3, [sp, #4]
 8016892:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016896:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801689a:	805a      	strh	r2, [r3, #2]
 801689c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801689e:	f8a3 e006 	strh.w	lr, [r3, #6]
 80168a2:	809a      	strh	r2, [r3, #4]
 80168a4:	e75f      	b.n	8016766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80168a6:	9c02      	ldr	r4, [sp, #8]
 80168a8:	4570      	cmp	r0, lr
 80168aa:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80168ae:	db0d      	blt.n	80168cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80168b0:	4431      	add	r1, r6
 80168b2:	9b06      	ldr	r3, [sp, #24]
 80168b4:	445c      	add	r4, fp
 80168b6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80168ba:	b289      	uxth	r1, r1
 80168bc:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80168c0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80168c4:	4419      	add	r1, r3
 80168c6:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80168ca:	e583      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80168cc:	445c      	add	r4, fp
 80168ce:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80168d2:	e79b      	b.n	801680c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80168d4:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80168d8:	2e07      	cmp	r6, #7
 80168da:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80168de:	d812      	bhi.n	8016906 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 80168e0:	1c75      	adds	r5, r6, #1
 80168e2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80168e6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80168ea:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80168ee:	9d01      	ldr	r5, [sp, #4]
 80168f0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80168f4:	442c      	add	r4, r5
 80168f6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80168fa:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80168fe:	8061      	strh	r1, [r4, #2]
 8016900:	80a2      	strh	r2, [r4, #4]
 8016902:	80e3      	strh	r3, [r4, #6]
 8016904:	e5d0      	b.n	80164a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016906:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801690a:	3e01      	subs	r6, #1
 801690c:	445c      	add	r4, fp
 801690e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016912:	f04f 37ff 	mov.w	r7, #4294967295
 8016916:	2500      	movs	r5, #0
 8016918:	9305      	str	r3, [sp, #20]
 801691a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801691e:	1e72      	subs	r2, r6, #1
 8016920:	9302      	str	r3, [sp, #8]
 8016922:	4691      	mov	r9, r2
 8016924:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016928:	9304      	str	r3, [sp, #16]
 801692a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801692e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016932:	6818      	ldr	r0, [r3, #0]
 8016934:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016938:	9207      	str	r2, [sp, #28]
 801693a:	bf16      	itet	ne
 801693c:	9905      	ldrne	r1, [sp, #20]
 801693e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016942:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016946:	9306      	str	r3, [sp, #24]
 8016948:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801694c:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016950:	fb18 f801 	smulbb	r8, r8, r1
 8016954:	6859      	ldr	r1, [r3, #4]
 8016956:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801695a:	4671      	mov	r1, lr
 801695c:	a80c      	add	r0, sp, #48	; 0x30
 801695e:	f7fb fea6 	bl	80126ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016962:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016966:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801696a:	f04f 0c08 	mov.w	ip, #8
 801696e:	9b04      	ldr	r3, [sp, #16]
 8016970:	9a02      	ldr	r2, [sp, #8]
 8016972:	fb10 f001 	smulbb	r0, r0, r1
 8016976:	fb02 8803 	mla	r8, r2, r3, r8
 801697a:	eba0 0108 	sub.w	r1, r0, r8
 801697e:	fb90 f0fc 	sdiv	r0, r0, ip
 8016982:	4288      	cmp	r0, r1
 8016984:	dc20      	bgt.n	80169c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016986:	4551      	cmp	r1, sl
 8016988:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801698c:	da03      	bge.n	8016996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801698e:	b1d9      	cbz	r1, 80169c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016990:	468a      	mov	sl, r1
 8016992:	464f      	mov	r7, r9
 8016994:	4635      	mov	r5, r6
 8016996:	f109 39ff 	add.w	r9, r9, #4294967295
 801699a:	f119 0f02 	cmn.w	r9, #2
 801699e:	d1c6      	bne.n	801692e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 80169a0:	4616      	mov	r6, r2
 80169a2:	3201      	adds	r2, #1
 80169a4:	f1a4 0408 	sub.w	r4, r4, #8
 80169a8:	d1b7      	bne.n	801691a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 80169aa:	9b01      	ldr	r3, [sp, #4]
 80169ac:	b2ac      	uxth	r4, r5
 80169ae:	00ed      	lsls	r5, r5, #3
 80169b0:	1958      	adds	r0, r3, r5
 80169b2:	1c7b      	adds	r3, r7, #1
 80169b4:	d10b      	bne.n	80169ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 80169b6:	4601      	mov	r1, r0
 80169b8:	9803      	ldr	r0, [sp, #12]
 80169ba:	f7fb fe78 	bl	80126ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80169be:	4621      	mov	r1, r4
 80169c0:	9801      	ldr	r0, [sp, #4]
 80169c2:	f7ff fcdd 	bl	8016380 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80169c6:	e505      	b.n	80163d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80169c8:	464f      	mov	r7, r9
 80169ca:	4635      	mov	r5, r6
 80169cc:	e7ed      	b.n	80169aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	00ff      	lsls	r7, r7, #3
 80169d2:	445d      	add	r5, fp
 80169d4:	19d9      	adds	r1, r3, r7
 80169d6:	445f      	add	r7, fp
 80169d8:	f7fb fe69 	bl	80126ae <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80169dc:	9b03      	ldr	r3, [sp, #12]
 80169de:	cb03      	ldmia	r3!, {r0, r1}
 80169e0:	9b03      	ldr	r3, [sp, #12]
 80169e2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80169e6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80169ea:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80169ee:	6869      	ldr	r1, [r5, #4]
 80169f0:	c303      	stmia	r3!, {r0, r1}
 80169f2:	e7e4      	b.n	80169be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

080169f4 <_ZN8touchgfx11Application10invalidateEv>:
 80169f4:	4b09      	ldr	r3, [pc, #36]	; (8016a1c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80169f6:	b082      	sub	sp, #8
 80169f8:	2100      	movs	r1, #0
 80169fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169fe:	4b08      	ldr	r3, [pc, #32]	; (8016a20 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016a00:	9100      	str	r1, [sp, #0]
 8016a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a06:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016a0a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a0e:	ab02      	add	r3, sp, #8
 8016a10:	e913 0006 	ldmdb	r3, {r1, r2}
 8016a14:	b002      	add	sp, #8
 8016a16:	f7ff bcc7 	b.w	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a1a:	bf00      	nop
 8016a1c:	20027b94 	.word	0x20027b94
 8016a20:	20027b96 	.word	0x20027b96

08016a24 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a28:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8016a2c:	b09b      	sub	sp, #108	; 0x6c
 8016a2e:	4604      	mov	r4, r0
 8016a30:	4630      	mov	r0, r6
 8016a32:	f7f9 fc12 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a36:	4605      	mov	r5, r0
 8016a38:	b940      	cbnz	r0, 8016a4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016a40:	f7ff fcb2 	bl	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a44:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016a48:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8016a4c:	4bc8      	ldr	r3, [pc, #800]	; (8016d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d03e      	beq.n	8016ad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016a54:	4dc7      	ldr	r5, [pc, #796]	; (8016d74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016a56:	4628      	mov	r0, r5
 8016a58:	f7f9 fbff 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a5c:	4606      	mov	r6, r0
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	d137      	bne.n	8016ad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016a62:	4628      	mov	r0, r5
 8016a64:	f7ff f9b6 	bl	8015dd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016a68:	6829      	ldr	r1, [r5, #0]
 8016a6a:	686a      	ldr	r2, [r5, #4]
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f7ff fc9b 	bl	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a72:	802e      	strh	r6, [r5, #0]
 8016a74:	806e      	strh	r6, [r5, #2]
 8016a76:	80ae      	strh	r6, [r5, #4]
 8016a78:	80ee      	strh	r6, [r5, #6]
 8016a7a:	ae09      	add	r6, sp, #36	; 0x24
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f7ff fc24 	bl	80162ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016a82:	4abd      	ldr	r2, [pc, #756]	; (8016d78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016a84:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016a88:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016a8c:	8815      	ldrh	r5, [r2, #0]
 8016a8e:	9202      	str	r2, [sp, #8]
 8016a90:	462b      	mov	r3, r5
 8016a92:	429f      	cmp	r7, r3
 8016a94:	d924      	bls.n	8016ae0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016a96:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8016a9a:	2907      	cmp	r1, #7
 8016a9c:	d816      	bhi.n	8016acc <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8016a9e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016aa2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016aa6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016aaa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016aae:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016ab2:	1c4a      	adds	r2, r1, #1
 8016ab4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016ab8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016abc:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016ac0:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016ac4:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016ac8:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016acc:	3301      	adds	r3, #1
 8016ace:	b29b      	uxth	r3, r3
 8016ad0:	e7df      	b.n	8016a92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016ad2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d1cf      	bne.n	8016a7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016ada:	b01b      	add	sp, #108	; 0x6c
 8016adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae0:	462f      	mov	r7, r5
 8016ae2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8016ae6:	42bb      	cmp	r3, r7
 8016ae8:	d90b      	bls.n	8016b02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016aea:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8016aee:	3701      	adds	r7, #1
 8016af0:	4620      	mov	r0, r4
 8016af2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8016af6:	b2bf      	uxth	r7, r7
 8016af8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8016afc:	f7ff fc54 	bl	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b00:	e7ef      	b.n	8016ae2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016b02:	4a9e      	ldr	r2, [pc, #632]	; (8016d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016b04:	6813      	ldr	r3, [r2, #0]
 8016b06:	4690      	mov	r8, r2
 8016b08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	f040 80e4 	bne.w	8016cda <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016b12:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016b16:	4629      	mov	r1, r5
 8016b18:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016b1c:	2500      	movs	r5, #0
 8016b1e:	33ae      	adds	r3, #174	; 0xae
 8016b20:	428f      	cmp	r7, r1
 8016b22:	f103 0308 	add.w	r3, r3, #8
 8016b26:	dd0a      	ble.n	8016b3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016b28:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016b2c:	3101      	adds	r1, #1
 8016b2e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8016b32:	4402      	add	r2, r0
 8016b34:	b212      	sxth	r2, r2
 8016b36:	4295      	cmp	r5, r2
 8016b38:	bfb8      	it	lt
 8016b3a:	4615      	movlt	r5, r2
 8016b3c:	e7f0      	b.n	8016b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8016b3e:	4b90      	ldr	r3, [pc, #576]	; (8016d80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016b40:	f8df b238 	ldr.w	fp, [pc, #568]	; 8016d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016b44:	881b      	ldrh	r3, [r3, #0]
 8016b46:	46d8      	mov	r8, fp
 8016b48:	2b0f      	cmp	r3, #15
 8016b4a:	bf8c      	ite	hi
 8016b4c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8016b50:	f04f 0a01 	movls.w	sl, #1
 8016b54:	2300      	movs	r3, #0
 8016b56:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016b5a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8016b5e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016b62:	4438      	add	r0, r7
 8016b64:	b207      	sxth	r7, r0
 8016b66:	f8db 0000 	ldr.w	r0, [fp]
 8016b6a:	42bd      	cmp	r5, r7
 8016b6c:	6803      	ldr	r3, [r0, #0]
 8016b6e:	f340 8084 	ble.w	8016c7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016b76:	4798      	blx	r3
 8016b78:	eb07 030a 	add.w	r3, r7, sl
 8016b7c:	4298      	cmp	r0, r3
 8016b7e:	da07      	bge.n	8016b90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016b80:	4285      	cmp	r5, r0
 8016b82:	dd05      	ble.n	8016b90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016b84:	4287      	cmp	r7, r0
 8016b86:	dd6d      	ble.n	8016c64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016b88:	2f00      	cmp	r7, #0
 8016b8a:	dd6b      	ble.n	8016c64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	e004      	b.n	8016b9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016b90:	4287      	cmp	r7, r0
 8016b92:	dcfb      	bgt.n	8016b8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016b94:	42a8      	cmp	r0, r5
 8016b96:	bfa8      	it	ge
 8016b98:	4628      	movge	r0, r5
 8016b9a:	4b7a      	ldr	r3, [pc, #488]	; (8016d84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016b9c:	1bc0      	subs	r0, r0, r7
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ba8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016bac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016bb0:	9b02      	ldr	r3, [sp, #8]
 8016bb2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016bb6:	881f      	ldrh	r7, [r3, #0]
 8016bb8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016bbc:	42bb      	cmp	r3, r7
 8016bbe:	d9cc      	bls.n	8016b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016bc0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016bc4:	ab07      	add	r3, sp, #28
 8016bc6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016bca:	6851      	ldr	r1, [r2, #4]
 8016bcc:	c303      	stmia	r3!, {r0, r1}
 8016bce:	a905      	add	r1, sp, #20
 8016bd0:	a807      	add	r0, sp, #28
 8016bd2:	f7ff f9ba 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d04c      	beq.n	8016c74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016bda:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016bde:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016be2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016be6:	4686      	mov	lr, r0
 8016be8:	4290      	cmp	r0, r2
 8016bea:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016bee:	4448      	add	r0, r9
 8016bf0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016bf4:	bfb8      	it	lt
 8016bf6:	4696      	movlt	lr, r2
 8016bf8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016bfc:	444a      	add	r2, r9
 8016bfe:	b280      	uxth	r0, r0
 8016c00:	4299      	cmp	r1, r3
 8016c02:	468c      	mov	ip, r1
 8016c04:	b292      	uxth	r2, r2
 8016c06:	9303      	str	r3, [sp, #12]
 8016c08:	bfb8      	it	lt
 8016c0a:	469c      	movlt	ip, r3
 8016c0c:	b203      	sxth	r3, r0
 8016c0e:	fa0f f982 	sxth.w	r9, r2
 8016c12:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016c16:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016c1a:	454b      	cmp	r3, r9
 8016c1c:	bfb8      	it	lt
 8016c1e:	4602      	movlt	r2, r0
 8016c20:	9b03      	ldr	r3, [sp, #12]
 8016c22:	eba2 020e 	sub.w	r2, r2, lr
 8016c26:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016c2a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016c2e:	4411      	add	r1, r2
 8016c30:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016c34:	4413      	add	r3, r2
 8016c36:	b289      	uxth	r1, r1
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	b208      	sxth	r0, r1
 8016c3c:	b21a      	sxth	r2, r3
 8016c3e:	4290      	cmp	r0, r2
 8016c40:	bfb8      	it	lt
 8016c42:	460b      	movlt	r3, r1
 8016c44:	eba3 030c 	sub.w	r3, r3, ip
 8016c48:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016c4c:	a807      	add	r0, sp, #28
 8016c4e:	f7f9 fb04 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c52:	b920      	cbnz	r0, 8016c5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016c54:	6823      	ldr	r3, [r4, #0]
 8016c56:	a907      	add	r1, sp, #28
 8016c58:	4620      	mov	r0, r4
 8016c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c5c:	4798      	blx	r3
 8016c5e:	3701      	adds	r7, #1
 8016c60:	b2bf      	uxth	r7, r7
 8016c62:	e7a9      	b.n	8016bb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016c64:	f8d8 0000 	ldr.w	r0, [r8]
 8016c68:	2101      	movs	r1, #1
 8016c6a:	6803      	ldr	r3, [r0, #0]
 8016c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016c70:	4798      	blx	r3
 8016c72:	e772      	b.n	8016b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016c74:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016c78:	e7e8      	b.n	8016c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8016c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c7c:	4798      	blx	r3
 8016c7e:	4b42      	ldr	r3, [pc, #264]	; (8016d88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	f43f af29 	beq.w	8016ada <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016c88:	2300      	movs	r3, #0
 8016c8a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016c8e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016c92:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8016c96:	9b02      	ldr	r3, [sp, #8]
 8016c98:	881b      	ldrh	r3, [r3, #0]
 8016c9a:	429d      	cmp	r5, r3
 8016c9c:	f67f af1d 	bls.w	8016ada <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016ca0:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8016ca4:	2907      	cmp	r1, #7
 8016ca6:	d815      	bhi.n	8016cd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016ca8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016cac:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8016cb0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016cb4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016cb8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8016cbc:	1c4a      	adds	r2, r1, #1
 8016cbe:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8016cc2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016cc6:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8016cca:	f8a2 e002 	strh.w	lr, [r2, #2]
 8016cce:	f8a2 c004 	strh.w	ip, [r2, #4]
 8016cd2:	80d7      	strh	r7, [r2, #6]
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	e7df      	b.n	8016c9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8016cda:	2b02      	cmp	r3, #2
 8016cdc:	f040 8135 	bne.w	8016f4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016ce0:	4b2a      	ldr	r3, [pc, #168]	; (8016d8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8016ce2:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	2b01      	cmp	r3, #1
 8016cea:	f000 809c 	beq.w	8016e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016cee:	9b02      	ldr	r3, [sp, #8]
 8016cf0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8016cf4:	f8b3 b000 	ldrh.w	fp, [r3]
 8016cf8:	f10b 0b01 	add.w	fp, fp, #1
 8016cfc:	fa1f fb8b 	uxth.w	fp, fp
 8016d00:	2a00      	cmp	r2, #0
 8016d02:	d0bc      	beq.n	8016c7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016d04:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8016d08:	4659      	mov	r1, fp
 8016d0a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8016d0e:	f04f 0800 	mov.w	r8, #0
 8016d12:	441d      	add	r5, r3
 8016d14:	b22d      	sxth	r5, r5
 8016d16:	b28b      	uxth	r3, r1
 8016d18:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	f240 80c0 	bls.w	8016ea2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8016d22:	4427      	add	r7, r4
 8016d24:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8016d28:	4608      	mov	r0, r1
 8016d2a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8016d2e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8016d32:	4563      	cmp	r3, ip
 8016d34:	f340 80a2 	ble.w	8016e7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016d38:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8016d3c:	4465      	add	r5, ip
 8016d3e:	b22d      	sxth	r5, r5
 8016d40:	429d      	cmp	r5, r3
 8016d42:	bfa8      	it	ge
 8016d44:	461d      	movge	r5, r3
 8016d46:	3101      	adds	r1, #1
 8016d48:	4680      	mov	r8, r0
 8016d4a:	e7e4      	b.n	8016d16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016d4c:	d10b      	bne.n	8016d66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8016d4e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8016d52:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8016d56:	458c      	cmp	ip, r1
 8016d58:	bfb4      	ite	lt
 8016d5a:	469c      	movlt	ip, r3
 8016d5c:	46bc      	movge	ip, r7
 8016d5e:	4572      	cmp	r2, lr
 8016d60:	bfb8      	it	lt
 8016d62:	4672      	movlt	r2, lr
 8016d64:	e087      	b.n	8016e76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016d66:	428a      	cmp	r2, r1
 8016d68:	46bc      	mov	ip, r7
 8016d6a:	bfb8      	it	lt
 8016d6c:	460a      	movlt	r2, r1
 8016d6e:	e082      	b.n	8016e76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016d70:	20027be0 	.word	0x20027be0
 8016d74:	20027bec 	.word	0x20027bec
 8016d78:	20000070 	.word	0x20000070
 8016d7c:	20027ba0 	.word	0x20027ba0
 8016d80:	20027b96 	.word	0x20027b96
 8016d84:	20027b94 	.word	0x20027b94
 8016d88:	20027b9e 	.word	0x20027b9e
 8016d8c:	20027b98 	.word	0x20027b98
 8016d90:	1961      	adds	r1, r4, r5
 8016d92:	ab07      	add	r3, sp, #28
 8016d94:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016d98:	6849      	ldr	r1, [r1, #4]
 8016d9a:	c303      	stmia	r3!, {r0, r1}
 8016d9c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016da0:	a807      	add	r0, sp, #28
 8016da2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016da6:	2b13      	cmp	r3, #19
 8016da8:	440b      	add	r3, r1
 8016daa:	bfd8      	it	le
 8016dac:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016db0:	1a9b      	subs	r3, r3, r2
 8016db2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016db6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016dba:	f7ff f825 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016dbe:	a807      	add	r0, sp, #28
 8016dc0:	f7f9 fa4b 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016dc4:	bb78      	cbnz	r0, 8016e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016dc6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016dca:	4425      	add	r5, r4
 8016dcc:	f8d8 0000 	ldr.w	r0, [r8]
 8016dd0:	f1bc 0f14 	cmp.w	ip, #20
 8016dd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016dd8:	f8d0 e000 	ldr.w	lr, [r0]
 8016ddc:	bfa8      	it	ge
 8016dde:	f04f 0c14 	movge.w	ip, #20
 8016de2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016de6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016dea:	fa1f fc8c 	uxth.w	ip, ip
 8016dee:	f8cd c000 	str.w	ip, [sp]
 8016df2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8016df6:	47d0      	blx	sl
 8016df8:	4682      	mov	sl, r0
 8016dfa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016dfe:	a807      	add	r0, sp, #28
 8016e00:	f7fe ffe8 	bl	8015dd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016e04:	6823      	ldr	r3, [r4, #0]
 8016e06:	4620      	mov	r0, r4
 8016e08:	a907      	add	r1, sp, #28
 8016e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e0c:	4798      	blx	r3
 8016e0e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8016e12:	eba0 000a 	sub.w	r0, r0, sl
 8016e16:	b200      	sxth	r0, r0
 8016e18:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8016e1c:	b918      	cbnz	r0, 8016e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016e1e:	b2b9      	uxth	r1, r7
 8016e20:	4648      	mov	r0, r9
 8016e22:	f7ff faad 	bl	8016380 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016e26:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8016e2a:	f1bb 0f00 	cmp.w	fp, #0
 8016e2e:	f43f af26 	beq.w	8016c7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016e32:	9b02      	ldr	r3, [sp, #8]
 8016e34:	2700      	movs	r7, #0
 8016e36:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8016e3a:	881b      	ldrh	r3, [r3, #0]
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	b299      	uxth	r1, r3
 8016e42:	00fd      	lsls	r5, r7, #3
 8016e44:	458b      	cmp	fp, r1
 8016e46:	d9a3      	bls.n	8016d90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016e48:	4425      	add	r5, r4
 8016e4a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016e4e:	469c      	mov	ip, r3
 8016e50:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8016e54:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8016e58:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8016e5c:	4408      	add	r0, r1
 8016e5e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8016e62:	4471      	add	r1, lr
 8016e64:	b200      	sxth	r0, r0
 8016e66:	b209      	sxth	r1, r1
 8016e68:	4288      	cmp	r0, r1
 8016e6a:	f6bf af6f 	bge.w	8016d4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8016e6e:	4586      	cmp	lr, r0
 8016e70:	4672      	mov	r2, lr
 8016e72:	bfb8      	it	lt
 8016e74:	4602      	movlt	r2, r0
 8016e76:	3301      	adds	r3, #1
 8016e78:	4667      	mov	r7, ip
 8016e7a:	e7e1      	b.n	8016e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8016e7c:	d10c      	bne.n	8016e98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8016e7e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8016e82:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8016e86:	4287      	cmp	r7, r0
 8016e88:	bfb4      	ite	lt
 8016e8a:	4608      	movlt	r0, r1
 8016e8c:	4640      	movge	r0, r8
 8016e8e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8016e92:	443b      	add	r3, r7
 8016e94:	b21b      	sxth	r3, r3
 8016e96:	e753      	b.n	8016d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016e98:	4565      	cmp	r5, ip
 8016e9a:	4640      	mov	r0, r8
 8016e9c:	bfa8      	it	ge
 8016e9e:	4665      	movge	r5, ip
 8016ea0:	e751      	b.n	8016d46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016ea2:	eb09 0007 	add.w	r0, r9, r7
 8016ea6:	4427      	add	r7, r4
 8016ea8:	9203      	str	r2, [sp, #12]
 8016eaa:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8016eae:	f1ba 0f13 	cmp.w	sl, #19
 8016eb2:	bfde      	ittt	le
 8016eb4:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8016eb8:	4455      	addle	r5, sl
 8016eba:	b22d      	sxthle	r5, r5
 8016ebc:	f7f9 f9cd 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ec0:	9a03      	ldr	r2, [sp, #12]
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	f47f af1c 	bne.w	8016d00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8016ec8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8016ecc:	fa1f fa8a 	uxth.w	sl, sl
 8016ed0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016ed4:	1aad      	subs	r5, r5, r2
 8016ed6:	4829      	ldr	r0, [pc, #164]	; (8016f7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8016ed8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8016edc:	2d14      	cmp	r5, #20
 8016ede:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8016ee2:	6800      	ldr	r0, [r0, #0]
 8016ee4:	bfa8      	it	ge
 8016ee6:	2514      	movge	r5, #20
 8016ee8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016eec:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016ef0:	b289      	uxth	r1, r1
 8016ef2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016ef6:	b2ad      	uxth	r5, r5
 8016ef8:	f8d0 c000 	ldr.w	ip, [r0]
 8016efc:	b292      	uxth	r2, r2
 8016efe:	4555      	cmp	r5, sl
 8016f00:	bf94      	ite	ls
 8016f02:	9500      	strls	r5, [sp, #0]
 8016f04:	f8cd a000 	strhi.w	sl, [sp]
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8016f0e:	47a8      	blx	r5
 8016f10:	6823      	ldr	r3, [r4, #0]
 8016f12:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016f16:	a907      	add	r1, sp, #28
 8016f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	4798      	blx	r3
 8016f1e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016f22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016f26:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8016f2a:	1a5b      	subs	r3, r3, r1
 8016f2c:	440a      	add	r2, r1
 8016f2e:	b21b      	sxth	r3, r3
 8016f30:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8016f34:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	f47f aed8 	bne.w	8016cee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016f3e:	fa1f f188 	uxth.w	r1, r8
 8016f42:	4648      	mov	r0, r9
 8016f44:	f7ff fa1c 	bl	8016380 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016f48:	e6d1      	b.n	8016cee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016f4a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016f4e:	42ab      	cmp	r3, r5
 8016f50:	f67f ae95 	bls.w	8016c7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016f54:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016f58:	ab07      	add	r3, sp, #28
 8016f5a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016f5e:	6851      	ldr	r1, [r2, #4]
 8016f60:	c303      	stmia	r3!, {r0, r1}
 8016f62:	a807      	add	r0, sp, #28
 8016f64:	f7f9 f979 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f68:	b920      	cbnz	r0, 8016f74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	a907      	add	r1, sp, #28
 8016f6e:	4620      	mov	r0, r4
 8016f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f72:	4798      	blx	r3
 8016f74:	3501      	adds	r5, #1
 8016f76:	b2ad      	uxth	r5, r5
 8016f78:	e7e7      	b.n	8016f4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016f7a:	bf00      	nop
 8016f7c:	20027ba0 	.word	0x20027ba0

08016f80 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016f80:	4b03      	ldr	r3, [pc, #12]	; (8016f90 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016f82:	2200      	movs	r2, #0
 8016f84:	801a      	strh	r2, [r3, #0]
 8016f86:	805a      	strh	r2, [r3, #2]
 8016f88:	809a      	strh	r2, [r3, #4]
 8016f8a:	80da      	strh	r2, [r3, #6]
 8016f8c:	4770      	bx	lr
 8016f8e:	bf00      	nop
 8016f90:	20027bec 	.word	0x20027bec

08016f94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f98:	b09d      	sub	sp, #116	; 0x74
 8016f9a:	4606      	mov	r6, r0
 8016f9c:	4614      	mov	r4, r2
 8016f9e:	468a      	mov	sl, r1
 8016fa0:	a803      	add	r0, sp, #12
 8016fa2:	461d      	mov	r5, r3
 8016fa4:	f000 fea4 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 8016fa8:	6833      	ldr	r3, [r6, #0]
 8016faa:	4630      	mov	r0, r6
 8016fac:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8016fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fb2:	4798      	blx	r3
 8016fb4:	6833      	ldr	r3, [r6, #0]
 8016fb6:	4607      	mov	r7, r0
 8016fb8:	4630      	mov	r0, r6
 8016fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fbc:	4798      	blx	r3
 8016fbe:	462a      	mov	r2, r5
 8016fc0:	2500      	movs	r5, #0
 8016fc2:	4621      	mov	r1, r4
 8016fc4:	9000      	str	r0, [sp, #0]
 8016fc6:	463b      	mov	r3, r7
 8016fc8:	462c      	mov	r4, r5
 8016fca:	46a9      	mov	r9, r5
 8016fcc:	46a8      	mov	r8, r5
 8016fce:	a803      	add	r0, sp, #12
 8016fd0:	f000 fee1 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	9302      	str	r3, [sp, #8]
 8016fd8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016fdc:	429c      	cmp	r4, r3
 8016fde:	d002      	beq.n	8016fe6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016fe0:	455c      	cmp	r4, fp
 8016fe2:	bf18      	it	ne
 8016fe4:	4625      	movne	r5, r4
 8016fe6:	ab02      	add	r3, sp, #8
 8016fe8:	4632      	mov	r2, r6
 8016fea:	4651      	mov	r1, sl
 8016fec:	a803      	add	r0, sp, #12
 8016fee:	f001 f9c7 	bl	8018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	b108      	cbz	r0, 8016ffa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016ff6:	280a      	cmp	r0, #10
 8016ff8:	d10a      	bne.n	8017010 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016ffa:	45c1      	cmp	r9, r8
 8016ffc:	bf38      	it	cc
 8016ffe:	46c1      	movcc	r9, r8
 8017000:	f04f 0800 	mov.w	r8, #0
 8017004:	2c00      	cmp	r4, #0
 8017006:	d1e5      	bne.n	8016fd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017008:	4648      	mov	r0, r9
 801700a:	b01d      	add	sp, #116	; 0x74
 801700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017010:	9a02      	ldr	r2, [sp, #8]
 8017012:	2a00      	cmp	r2, #0
 8017014:	d0de      	beq.n	8016fd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017016:	7b57      	ldrb	r7, [r2, #13]
 8017018:	4629      	mov	r1, r5
 801701a:	6833      	ldr	r3, [r6, #0]
 801701c:	007f      	lsls	r7, r7, #1
 801701e:	8894      	ldrh	r4, [r2, #4]
 8017020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017022:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017026:	7a97      	ldrb	r7, [r2, #10]
 8017028:	4307      	orrs	r7, r0
 801702a:	4630      	mov	r0, r6
 801702c:	4798      	blx	r3
 801702e:	4438      	add	r0, r7
 8017030:	4480      	add	r8, r0
 8017032:	fa1f f888 	uxth.w	r8, r8
 8017036:	e7e5      	b.n	8017004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017038 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017038:	b508      	push	{r3, lr}
 801703a:	6803      	ldr	r3, [r0, #0]
 801703c:	68db      	ldr	r3, [r3, #12]
 801703e:	4798      	blx	r3
 8017040:	b128      	cbz	r0, 801704e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017042:	7b43      	ldrb	r3, [r0, #13]
 8017044:	7a80      	ldrb	r0, [r0, #10]
 8017046:	005b      	lsls	r3, r3, #1
 8017048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801704c:	4318      	orrs	r0, r3
 801704e:	bd08      	pop	{r3, pc}

08017050 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017050:	b40e      	push	{r1, r2, r3}
 8017052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017054:	b09e      	sub	sp, #120	; 0x78
 8017056:	4605      	mov	r5, r0
 8017058:	ab23      	add	r3, sp, #140	; 0x8c
 801705a:	a805      	add	r0, sp, #20
 801705c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017060:	9303      	str	r3, [sp, #12]
 8017062:	f000 fe45 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 8017066:	682b      	ldr	r3, [r5, #0]
 8017068:	4628      	mov	r0, r5
 801706a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801706c:	4798      	blx	r3
 801706e:	682b      	ldr	r3, [r5, #0]
 8017070:	4606      	mov	r6, r0
 8017072:	4628      	mov	r0, r5
 8017074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017076:	4798      	blx	r3
 8017078:	4633      	mov	r3, r6
 801707a:	4621      	mov	r1, r4
 801707c:	ae1e      	add	r6, sp, #120	; 0x78
 801707e:	2400      	movs	r4, #0
 8017080:	9000      	str	r0, [sp, #0]
 8017082:	9a03      	ldr	r2, [sp, #12]
 8017084:	a805      	add	r0, sp, #20
 8017086:	f000 fe86 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801708a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801708e:	462a      	mov	r2, r5
 8017090:	4633      	mov	r3, r6
 8017092:	4621      	mov	r1, r4
 8017094:	a805      	add	r0, sp, #20
 8017096:	f001 f973 	bl	8018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801709a:	b300      	cbz	r0, 80170de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801709c:	280a      	cmp	r0, #10
 801709e:	d01a      	beq.n	80170d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80170a0:	9f04      	ldr	r7, [sp, #16]
 80170a2:	b1c7      	cbz	r7, 80170d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80170a4:	7b78      	ldrb	r0, [r7, #13]
 80170a6:	7a3b      	ldrb	r3, [r7, #8]
 80170a8:	00c1      	lsls	r1, r0, #3
 80170aa:	88ea      	ldrh	r2, [r5, #6]
 80170ac:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80170b0:	4319      	orrs	r1, r3
 80170b2:	0643      	lsls	r3, r0, #25
 80170b4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80170b8:	bf48      	it	mi
 80170ba:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80170be:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80170c2:	bf48      	it	mi
 80170c4:	b219      	sxthmi	r1, r3
 80170c6:	79fb      	ldrb	r3, [r7, #7]
 80170c8:	4303      	orrs	r3, r0
 80170ca:	4413      	add	r3, r2
 80170cc:	1a5b      	subs	r3, r3, r1
 80170ce:	b21b      	sxth	r3, r3
 80170d0:	429c      	cmp	r4, r3
 80170d2:	bfb8      	it	lt
 80170d4:	461c      	movlt	r4, r3
 80170d6:	4633      	mov	r3, r6
 80170d8:	462a      	mov	r2, r5
 80170da:	2100      	movs	r1, #0
 80170dc:	e7da      	b.n	8017094 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80170de:	b2a0      	uxth	r0, r4
 80170e0:	b01e      	add	sp, #120	; 0x78
 80170e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80170e6:	b003      	add	sp, #12
 80170e8:	4770      	bx	lr

080170ea <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80170ea:	7a43      	ldrb	r3, [r0, #9]
 80170ec:	8880      	ldrh	r0, [r0, #4]
 80170ee:	4418      	add	r0, r3
 80170f0:	b280      	uxth	r0, r0
 80170f2:	4770      	bx	lr

080170f4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80170f4:	6803      	ldr	r3, [r0, #0]
 80170f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170f8:	4718      	bx	r3

080170fa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80170fa:	b40e      	push	{r1, r2, r3}
 80170fc:	b570      	push	{r4, r5, r6, lr}
 80170fe:	b09d      	sub	sp, #116	; 0x74
 8017100:	4604      	mov	r4, r0
 8017102:	ab21      	add	r3, sp, #132	; 0x84
 8017104:	a803      	add	r0, sp, #12
 8017106:	f853 5b04 	ldr.w	r5, [r3], #4
 801710a:	9302      	str	r3, [sp, #8]
 801710c:	f000 fdf0 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	4620      	mov	r0, r4
 8017114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017116:	4798      	blx	r3
 8017118:	6823      	ldr	r3, [r4, #0]
 801711a:	4606      	mov	r6, r0
 801711c:	4620      	mov	r0, r4
 801711e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017120:	2401      	movs	r4, #1
 8017122:	4798      	blx	r3
 8017124:	4633      	mov	r3, r6
 8017126:	9000      	str	r0, [sp, #0]
 8017128:	4629      	mov	r1, r5
 801712a:	9a02      	ldr	r2, [sp, #8]
 801712c:	a803      	add	r0, sp, #12
 801712e:	f000 fe32 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017132:	a803      	add	r0, sp, #12
 8017134:	f001 f9f0 	bl	8018518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017138:	b2a3      	uxth	r3, r4
 801713a:	b138      	cbz	r0, 801714c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801713c:	280a      	cmp	r0, #10
 801713e:	a803      	add	r0, sp, #12
 8017140:	bf04      	itt	eq
 8017142:	3301      	addeq	r3, #1
 8017144:	b21c      	sxtheq	r4, r3
 8017146:	f001 f9e7 	bl	8018518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801714a:	e7f5      	b.n	8017138 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801714c:	4618      	mov	r0, r3
 801714e:	b01d      	add	sp, #116	; 0x74
 8017150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017154:	b003      	add	sp, #12
 8017156:	4770      	bx	lr

08017158 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017158:	b40e      	push	{r1, r2, r3}
 801715a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715c:	b09e      	sub	sp, #120	; 0x78
 801715e:	4604      	mov	r4, r0
 8017160:	ab23      	add	r3, sp, #140	; 0x8c
 8017162:	a805      	add	r0, sp, #20
 8017164:	f853 5b04 	ldr.w	r5, [r3], #4
 8017168:	9303      	str	r3, [sp, #12]
 801716a:	f000 fdc1 	bl	8017cf0 <_ZN8touchgfx12TextProviderC1Ev>
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	4620      	mov	r0, r4
 8017172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017174:	4798      	blx	r3
 8017176:	6823      	ldr	r3, [r4, #0]
 8017178:	4606      	mov	r6, r0
 801717a:	4620      	mov	r0, r4
 801717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801717e:	4798      	blx	r3
 8017180:	4633      	mov	r3, r6
 8017182:	4629      	mov	r1, r5
 8017184:	9000      	str	r0, [sp, #0]
 8017186:	9a03      	ldr	r2, [sp, #12]
 8017188:	a805      	add	r0, sp, #20
 801718a:	f000 fe04 	bl	8017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801718e:	ad1e      	add	r5, sp, #120	; 0x78
 8017190:	2100      	movs	r1, #0
 8017192:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8017196:	4622      	mov	r2, r4
 8017198:	a805      	add	r0, sp, #20
 801719a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801719e:	462b      	mov	r3, r5
 80171a0:	f001 f8ee 	bl	8018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80171a4:	b1d8      	cbz	r0, 80171de <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80171a6:	280a      	cmp	r0, #10
 80171a8:	d012      	beq.n	80171d0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80171aa:	9804      	ldr	r0, [sp, #16]
 80171ac:	b180      	cbz	r0, 80171d0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80171ae:	7b47      	ldrb	r7, [r0, #13]
 80171b0:	88e2      	ldrh	r2, [r4, #6]
 80171b2:	00fb      	lsls	r3, r7, #3
 80171b4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80171b8:	7a03      	ldrb	r3, [r0, #8]
 80171ba:	430b      	orrs	r3, r1
 80171bc:	0679      	lsls	r1, r7, #25
 80171be:	bf44      	itt	mi
 80171c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80171c4:	b21b      	sxthmi	r3, r3
 80171c6:	1ad3      	subs	r3, r2, r3
 80171c8:	b21b      	sxth	r3, r3
 80171ca:	429e      	cmp	r6, r3
 80171cc:	bfa8      	it	ge
 80171ce:	461e      	movge	r6, r3
 80171d0:	462b      	mov	r3, r5
 80171d2:	4622      	mov	r2, r4
 80171d4:	2100      	movs	r1, #0
 80171d6:	a805      	add	r0, sp, #20
 80171d8:	f001 f8d2 	bl	8018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80171dc:	e7e2      	b.n	80171a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80171de:	4630      	mov	r0, r6
 80171e0:	b01e      	add	sp, #120	; 0x78
 80171e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80171e6:	b003      	add	sp, #12
 80171e8:	4770      	bx	lr

080171ea <_ZNK8touchgfx8Drawable10invalidateEv>:
 80171ea:	b513      	push	{r0, r1, r4, lr}
 80171ec:	6803      	ldr	r3, [r0, #0]
 80171ee:	2400      	movs	r4, #0
 80171f0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80171f4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80171f8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80171fc:	4669      	mov	r1, sp
 80171fe:	691b      	ldr	r3, [r3, #16]
 8017200:	9400      	str	r4, [sp, #0]
 8017202:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017206:	4798      	blx	r3
 8017208:	b002      	add	sp, #8
 801720a:	bd10      	pop	{r4, pc}

0801720c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801720c:	b538      	push	{r3, r4, r5, lr}
 801720e:	680b      	ldr	r3, [r1, #0]
 8017210:	460c      	mov	r4, r1
 8017212:	4605      	mov	r5, r0
 8017214:	68db      	ldr	r3, [r3, #12]
 8017216:	4798      	blx	r3
 8017218:	6823      	ldr	r3, [r4, #0]
 801721a:	4620      	mov	r0, r4
 801721c:	4629      	mov	r1, r5
 801721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017220:	4798      	blx	r3
 8017222:	4628      	mov	r0, r5
 8017224:	bd38      	pop	{r3, r4, r5, pc}

08017226 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017226:	b410      	push	{r4}
 8017228:	880a      	ldrh	r2, [r1, #0]
 801722a:	8884      	ldrh	r4, [r0, #4]
 801722c:	4422      	add	r2, r4
 801722e:	800a      	strh	r2, [r1, #0]
 8017230:	884a      	ldrh	r2, [r1, #2]
 8017232:	88c4      	ldrh	r4, [r0, #6]
 8017234:	4422      	add	r2, r4
 8017236:	804a      	strh	r2, [r1, #2]
 8017238:	6940      	ldr	r0, [r0, #20]
 801723a:	b120      	cbz	r0, 8017246 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801723c:	6803      	ldr	r3, [r0, #0]
 801723e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017244:	4718      	bx	r3
 8017246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724a:	4770      	bx	lr

0801724c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801724c:	b570      	push	{r4, r5, r6, lr}
 801724e:	8882      	ldrh	r2, [r0, #4]
 8017250:	460c      	mov	r4, r1
 8017252:	880b      	ldrh	r3, [r1, #0]
 8017254:	4605      	mov	r5, r0
 8017256:	4413      	add	r3, r2
 8017258:	800b      	strh	r3, [r1, #0]
 801725a:	884b      	ldrh	r3, [r1, #2]
 801725c:	88c2      	ldrh	r2, [r0, #6]
 801725e:	4413      	add	r3, r2
 8017260:	804b      	strh	r3, [r1, #2]
 8017262:	1d01      	adds	r1, r0, #4
 8017264:	4620      	mov	r0, r4
 8017266:	f7f8 ffb5 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801726a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801726e:	2b00      	cmp	r3, #0
 8017270:	dd0b      	ble.n	801728a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017272:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017276:	2b00      	cmp	r3, #0
 8017278:	dd07      	ble.n	801728a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801727a:	6968      	ldr	r0, [r5, #20]
 801727c:	b128      	cbz	r0, 801728a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801727e:	6803      	ldr	r3, [r0, #0]
 8017280:	4621      	mov	r1, r4
 8017282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017288:	4718      	bx	r3
 801728a:	bd70      	pop	{r4, r5, r6, pc}

0801728c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801728c:	b570      	push	{r4, r5, r6, lr}
 801728e:	8882      	ldrh	r2, [r0, #4]
 8017290:	460c      	mov	r4, r1
 8017292:	880b      	ldrh	r3, [r1, #0]
 8017294:	4605      	mov	r5, r0
 8017296:	4413      	add	r3, r2
 8017298:	800b      	strh	r3, [r1, #0]
 801729a:	884b      	ldrh	r3, [r1, #2]
 801729c:	88c2      	ldrh	r2, [r0, #6]
 801729e:	4413      	add	r3, r2
 80172a0:	804b      	strh	r3, [r1, #2]
 80172a2:	1d01      	adds	r1, r0, #4
 80172a4:	4620      	mov	r0, r4
 80172a6:	f7f8 ff95 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 80172aa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	dd18      	ble.n	80172e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80172b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	dd14      	ble.n	80172e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80172ba:	6968      	ldr	r0, [r5, #20]
 80172bc:	b128      	cbz	r0, 80172ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80172be:	6803      	ldr	r3, [r0, #0]
 80172c0:	4621      	mov	r1, r4
 80172c2:	691b      	ldr	r3, [r3, #16]
 80172c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172c8:	4718      	bx	r3
 80172ca:	4b07      	ldr	r3, [pc, #28]	; (80172e8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	3304      	adds	r3, #4
 80172d0:	429d      	cmp	r5, r3
 80172d2:	d107      	bne.n	80172e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80172d4:	f7fe fed2 	bl	801607c <_ZN8touchgfx11Application11getInstanceEv>
 80172d8:	6821      	ldr	r1, [r4, #0]
 80172da:	6862      	ldr	r2, [r4, #4]
 80172dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172e0:	f7ff b862 	b.w	80163a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80172e4:	bd70      	pop	{r4, r5, r6, pc}
 80172e6:	bf00      	nop
 80172e8:	20027be4 	.word	0x20027be4

080172ec <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80172ec:	b570      	push	{r4, r5, r6, lr}
 80172ee:	4604      	mov	r4, r0
 80172f0:	4616      	mov	r6, r2
 80172f2:	460d      	mov	r5, r1
 80172f4:	b901      	cbnz	r1, 80172f8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80172f6:	b192      	cbz	r2, 801731e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80172f8:	6823      	ldr	r3, [r4, #0]
 80172fa:	4620      	mov	r0, r4
 80172fc:	699b      	ldr	r3, [r3, #24]
 80172fe:	4798      	blx	r3
 8017300:	88e2      	ldrh	r2, [r4, #6]
 8017302:	88a1      	ldrh	r1, [r4, #4]
 8017304:	4620      	mov	r0, r4
 8017306:	4432      	add	r2, r6
 8017308:	4429      	add	r1, r5
 801730a:	b212      	sxth	r2, r2
 801730c:	b209      	sxth	r1, r1
 801730e:	f7ef f99f 	bl	8006650 <_ZN8touchgfx8Drawable5setXYEss>
 8017312:	6823      	ldr	r3, [r4, #0]
 8017314:	4620      	mov	r0, r4
 8017316:	699b      	ldr	r3, [r3, #24]
 8017318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801731c:	4718      	bx	r3
 801731e:	bd70      	pop	{r4, r5, r6, pc}

08017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017320:	b510      	push	{r4, lr}
 8017322:	2300      	movs	r3, #0
 8017324:	4604      	mov	r4, r0
 8017326:	4608      	mov	r0, r1
 8017328:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801732c:	8023      	strh	r3, [r4, #0]
 801732e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017332:	8063      	strh	r3, [r4, #2]
 8017334:	6803      	ldr	r3, [r0, #0]
 8017336:	80a1      	strh	r1, [r4, #4]
 8017338:	4621      	mov	r1, r4
 801733a:	80e2      	strh	r2, [r4, #6]
 801733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801733e:	4798      	blx	r3
 8017340:	4620      	mov	r0, r4
 8017342:	bd10      	pop	{r4, pc}

08017344 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017344:	b530      	push	{r4, r5, lr}
 8017346:	8083      	strh	r3, [r0, #4]
 8017348:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801734c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017350:	80c3      	strh	r3, [r0, #6]
 8017352:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017356:	6141      	str	r1, [r0, #20]
 8017358:	7203      	strb	r3, [r0, #8]
 801735a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801735e:	8302      	strh	r2, [r0, #24]
 8017360:	7243      	strb	r3, [r0, #9]
 8017362:	7a83      	ldrb	r3, [r0, #10]
 8017364:	f365 0306 	bfi	r3, r5, #0, #7
 8017368:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801736c:	f365 13c7 	bfi	r3, r5, #7, #1
 8017370:	7283      	strb	r3, [r0, #10]
 8017372:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017376:	72c3      	strb	r3, [r0, #11]
 8017378:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801737c:	7303      	strb	r3, [r0, #12]
 801737e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8017382:	81c3      	strh	r3, [r0, #14]
 8017384:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8017388:	8203      	strh	r3, [r0, #16]
 801738a:	4b01      	ldr	r3, [pc, #4]	; (8017390 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801738c:	6003      	str	r3, [r0, #0]
 801738e:	bd30      	pop	{r4, r5, pc}
 8017390:	0802b238 	.word	0x0802b238

08017394 <_ZNK8touchgfx9ConstFont4findEt>:
 8017394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017396:	6944      	ldr	r4, [r0, #20]
 8017398:	b3bc      	cbz	r4, 801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801739a:	88a3      	ldrh	r3, [r4, #4]
 801739c:	8b02      	ldrh	r2, [r0, #24]
 801739e:	1acb      	subs	r3, r1, r3
 80173a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80173a4:	d431      	bmi.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173a6:	4293      	cmp	r3, r2
 80173a8:	dd0c      	ble.n	80173c4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80173aa:	230e      	movs	r3, #14
 80173ac:	fb03 4302 	mla	r3, r3, r2, r4
 80173b0:	889b      	ldrh	r3, [r3, #4]
 80173b2:	1a5b      	subs	r3, r3, r1
 80173b4:	1ad3      	subs	r3, r2, r3
 80173b6:	429a      	cmp	r2, r3
 80173b8:	db27      	blt.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	bfbc      	itt	lt
 80173be:	2302      	movlt	r3, #2
 80173c0:	fb92 f3f3 	sdivlt	r3, r2, r3
 80173c4:	2500      	movs	r5, #0
 80173c6:	260e      	movs	r6, #14
 80173c8:	4295      	cmp	r5, r2
 80173ca:	dc1e      	bgt.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173cc:	fb06 4003 	mla	r0, r6, r3, r4
 80173d0:	8887      	ldrh	r7, [r0, #4]
 80173d2:	42b9      	cmp	r1, r7
 80173d4:	d01a      	beq.n	801740c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80173d6:	d20d      	bcs.n	80173f4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80173d8:	1e5a      	subs	r2, r3, #1
 80173da:	4295      	cmp	r5, r2
 80173dc:	dc15      	bgt.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173de:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80173e2:	1a5b      	subs	r3, r3, r1
 80173e4:	1ad3      	subs	r3, r2, r3
 80173e6:	429a      	cmp	r2, r3
 80173e8:	db0f      	blt.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173ea:	429d      	cmp	r5, r3
 80173ec:	ddec      	ble.n	80173c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80173ee:	1953      	adds	r3, r2, r5
 80173f0:	105b      	asrs	r3, r3, #1
 80173f2:	e7e9      	b.n	80173c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80173f4:	1c5d      	adds	r5, r3, #1
 80173f6:	42aa      	cmp	r2, r5
 80173f8:	db07      	blt.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173fa:	8a43      	ldrh	r3, [r0, #18]
 80173fc:	1acb      	subs	r3, r1, r3
 80173fe:	442b      	add	r3, r5
 8017400:	429d      	cmp	r5, r3
 8017402:	dc02      	bgt.n	801740a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017404:	429a      	cmp	r2, r3
 8017406:	dadf      	bge.n	80173c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017408:	e7f1      	b.n	80173ee <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801740a:	2000      	movs	r0, #0
 801740c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801740e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801740e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017410:	4604      	mov	r4, r0
 8017412:	4617      	mov	r7, r2
 8017414:	461e      	mov	r6, r3
 8017416:	b911      	cbnz	r1, 801741e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017418:	2500      	movs	r5, #0
 801741a:	4628      	mov	r0, r5
 801741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801741e:	290a      	cmp	r1, #10
 8017420:	d0fa      	beq.n	8017418 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017422:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017426:	4291      	cmp	r1, r2
 8017428:	d0f6      	beq.n	8017418 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801742a:	f242 020b 	movw	r2, #8203	; 0x200b
 801742e:	4291      	cmp	r1, r2
 8017430:	d0f2      	beq.n	8017418 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017432:	f7ff ffaf 	bl	8017394 <_ZNK8touchgfx9ConstFont4findEt>
 8017436:	4605      	mov	r5, r0
 8017438:	b950      	cbnz	r0, 8017450 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801743a:	6823      	ldr	r3, [r4, #0]
 801743c:	4620      	mov	r0, r4
 801743e:	691b      	ldr	r3, [r3, #16]
 8017440:	4798      	blx	r3
 8017442:	4601      	mov	r1, r0
 8017444:	4620      	mov	r0, r4
 8017446:	f7ff ffa5 	bl	8017394 <_ZNK8touchgfx9ConstFont4findEt>
 801744a:	4605      	mov	r5, r0
 801744c:	2800      	cmp	r0, #0
 801744e:	d0e3      	beq.n	8017418 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017450:	6823      	ldr	r3, [r4, #0]
 8017452:	4629      	mov	r1, r5
 8017454:	4620      	mov	r0, r4
 8017456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017458:	4798      	blx	r3
 801745a:	6038      	str	r0, [r7, #0]
 801745c:	6823      	ldr	r3, [r4, #0]
 801745e:	4620      	mov	r0, r4
 8017460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017462:	4798      	blx	r3
 8017464:	7030      	strb	r0, [r6, #0]
 8017466:	e7d8      	b.n	801741a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017468 <_ZN8touchgfx4clzuEm>:
 8017468:	4603      	mov	r3, r0
 801746a:	b1c8      	cbz	r0, 80174a0 <_ZN8touchgfx4clzuEm+0x38>
 801746c:	0c02      	lsrs	r2, r0, #16
 801746e:	0412      	lsls	r2, r2, #16
 8017470:	b9a2      	cbnz	r2, 801749c <_ZN8touchgfx4clzuEm+0x34>
 8017472:	0403      	lsls	r3, r0, #16
 8017474:	2010      	movs	r0, #16
 8017476:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801747a:	bf04      	itt	eq
 801747c:	021b      	lsleq	r3, r3, #8
 801747e:	3008      	addeq	r0, #8
 8017480:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017484:	bf04      	itt	eq
 8017486:	011b      	lsleq	r3, r3, #4
 8017488:	3004      	addeq	r0, #4
 801748a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801748e:	bf04      	itt	eq
 8017490:	009b      	lsleq	r3, r3, #2
 8017492:	3002      	addeq	r0, #2
 8017494:	2b00      	cmp	r3, #0
 8017496:	db04      	blt.n	80174a2 <_ZN8touchgfx4clzuEm+0x3a>
 8017498:	3001      	adds	r0, #1
 801749a:	4770      	bx	lr
 801749c:	2000      	movs	r0, #0
 801749e:	e7ea      	b.n	8017476 <_ZN8touchgfx4clzuEm+0xe>
 80174a0:	2020      	movs	r0, #32
 80174a2:	4770      	bx	lr

080174a4 <_ZN8touchgfx7muldivuEmmmRm>:
 80174a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a8:	4680      	mov	r8, r0
 80174aa:	460f      	mov	r7, r1
 80174ac:	4615      	mov	r5, r2
 80174ae:	461e      	mov	r6, r3
 80174b0:	f7ff ffda 	bl	8017468 <_ZN8touchgfx4clzuEm>
 80174b4:	b998      	cbnz	r0, 80174de <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 80174b6:	4608      	mov	r0, r1
 80174b8:	f7ff ffd6 	bl	8017468 <_ZN8touchgfx4clzuEm>
 80174bc:	2800      	cmp	r0, #0
 80174be:	dd08      	ble.n	80174d2 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 80174c0:	4633      	mov	r3, r6
 80174c2:	462a      	mov	r2, r5
 80174c4:	4641      	mov	r1, r8
 80174c6:	4638      	mov	r0, r7
 80174c8:	f7ff ffec 	bl	80174a4 <_ZN8touchgfx7muldivuEmmmRm>
 80174cc:	b003      	add	sp, #12
 80174ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d2:	f04f 33ff 	mov.w	r3, #4294967295
 80174d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80174da:	6033      	str	r3, [r6, #0]
 80174dc:	e7f6      	b.n	80174cc <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80174de:	fa31 f900 	lsrs.w	r9, r1, r0
 80174e2:	fb01 f308 	mul.w	r3, r1, r8
 80174e6:	d105      	bne.n	80174f4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80174e8:	fbb3 f0f5 	udiv	r0, r3, r5
 80174ec:	fb05 3510 	mls	r5, r5, r0, r3
 80174f0:	6035      	str	r5, [r6, #0]
 80174f2:	e7eb      	b.n	80174cc <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80174f4:	2301      	movs	r3, #1
 80174f6:	fa08 fb00 	lsl.w	fp, r8, r0
 80174fa:	462a      	mov	r2, r5
 80174fc:	4641      	mov	r1, r8
 80174fe:	fa03 f000 	lsl.w	r0, r3, r0
 8017502:	4633      	mov	r3, r6
 8017504:	fbbb faf5 	udiv	sl, fp, r5
 8017508:	3801      	subs	r0, #1
 801750a:	fb09 f40a 	mul.w	r4, r9, sl
 801750e:	4038      	ands	r0, r7
 8017510:	f7ff ffc8 	bl	80174a4 <_ZN8touchgfx7muldivuEmmmRm>
 8017514:	462a      	mov	r2, r5
 8017516:	4607      	mov	r7, r0
 8017518:	ab01      	add	r3, sp, #4
 801751a:	fb05 b11a 	mls	r1, r5, sl, fp
 801751e:	4648      	mov	r0, r9
 8017520:	f7ff ffc0 	bl	80174a4 <_ZN8touchgfx7muldivuEmmmRm>
 8017524:	9b01      	ldr	r3, [sp, #4]
 8017526:	6832      	ldr	r2, [r6, #0]
 8017528:	441a      	add	r2, r3
 801752a:	fbb2 f3f5 	udiv	r3, r2, r5
 801752e:	441c      	add	r4, r3
 8017530:	fb05 2513 	mls	r5, r5, r3, r2
 8017534:	443c      	add	r4, r7
 8017536:	4420      	add	r0, r4
 8017538:	e7da      	b.n	80174f0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801753a <_ZN8touchgfx6muldivElllRl>:
 801753a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801753c:	2800      	cmp	r0, #0
 801753e:	461e      	mov	r6, r3
 8017540:	bfba      	itte	lt
 8017542:	4240      	neglt	r0, r0
 8017544:	f04f 34ff 	movlt.w	r4, #4294967295
 8017548:	2401      	movge	r4, #1
 801754a:	2900      	cmp	r1, #0
 801754c:	bfbc      	itt	lt
 801754e:	4249      	neglt	r1, r1
 8017550:	4264      	neglt	r4, r4
 8017552:	2a00      	cmp	r2, #0
 8017554:	bfb6      	itet	lt
 8017556:	4265      	neglt	r5, r4
 8017558:	4625      	movge	r5, r4
 801755a:	4252      	neglt	r2, r2
 801755c:	4288      	cmp	r0, r1
 801755e:	bfc2      	ittt	gt
 8017560:	4603      	movgt	r3, r0
 8017562:	4608      	movgt	r0, r1
 8017564:	4619      	movgt	r1, r3
 8017566:	ab01      	add	r3, sp, #4
 8017568:	f7ff ff9c 	bl	80174a4 <_ZN8touchgfx7muldivuEmmmRm>
 801756c:	9b01      	ldr	r3, [sp, #4]
 801756e:	4368      	muls	r0, r5
 8017570:	435c      	muls	r4, r3
 8017572:	6034      	str	r4, [r6, #0]
 8017574:	b002      	add	sp, #8
 8017576:	bd70      	pop	{r4, r5, r6, pc}

08017578 <_ZN8touchgfx6muldivElll>:
 8017578:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801757a:	4606      	mov	r6, r0
 801757c:	ab01      	add	r3, sp, #4
 801757e:	460d      	mov	r5, r1
 8017580:	4614      	mov	r4, r2
 8017582:	f7ff ffda 	bl	801753a <_ZN8touchgfx6muldivElllRl>
 8017586:	2e00      	cmp	r6, #0
 8017588:	db20      	blt.n	80175cc <_ZN8touchgfx6muldivElll+0x54>
 801758a:	bf14      	ite	ne
 801758c:	2301      	movne	r3, #1
 801758e:	2300      	moveq	r3, #0
 8017590:	2d00      	cmp	r5, #0
 8017592:	db1e      	blt.n	80175d2 <_ZN8touchgfx6muldivElll+0x5a>
 8017594:	bf14      	ite	ne
 8017596:	2201      	movne	r2, #1
 8017598:	2200      	moveq	r2, #0
 801759a:	2c00      	cmp	r4, #0
 801759c:	fb03 f202 	mul.w	r2, r3, r2
 80175a0:	db1a      	blt.n	80175d8 <_ZN8touchgfx6muldivElll+0x60>
 80175a2:	bf14      	ite	ne
 80175a4:	2301      	movne	r3, #1
 80175a6:	2300      	moveq	r3, #0
 80175a8:	4353      	muls	r3, r2
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	d117      	bne.n	80175de <_ZN8touchgfx6muldivElll+0x66>
 80175ae:	2c00      	cmp	r4, #0
 80175b0:	9b01      	ldr	r3, [sp, #4]
 80175b2:	bfb8      	it	lt
 80175b4:	4264      	neglt	r4, r4
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f104 0401 	add.w	r4, r4, #1
 80175bc:	bfb8      	it	lt
 80175be:	425b      	neglt	r3, r3
 80175c0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80175c4:	db00      	blt.n	80175c8 <_ZN8touchgfx6muldivElll+0x50>
 80175c6:	3001      	adds	r0, #1
 80175c8:	b002      	add	sp, #8
 80175ca:	bd70      	pop	{r4, r5, r6, pc}
 80175cc:	f04f 33ff 	mov.w	r3, #4294967295
 80175d0:	e7de      	b.n	8017590 <_ZN8touchgfx6muldivElll+0x18>
 80175d2:	f04f 32ff 	mov.w	r2, #4294967295
 80175d6:	e7e0      	b.n	801759a <_ZN8touchgfx6muldivElll+0x22>
 80175d8:	f04f 33ff 	mov.w	r3, #4294967295
 80175dc:	e7e4      	b.n	80175a8 <_ZN8touchgfx6muldivElll+0x30>
 80175de:	3301      	adds	r3, #1
 80175e0:	d1f2      	bne.n	80175c8 <_ZN8touchgfx6muldivElll+0x50>
 80175e2:	9b01      	ldr	r3, [sp, #4]
 80175e4:	2c00      	cmp	r4, #0
 80175e6:	bfb8      	it	lt
 80175e8:	4264      	neglt	r4, r4
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	bfb8      	it	lt
 80175ee:	425b      	neglt	r3, r3
 80175f0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80175f4:	bfc8      	it	gt
 80175f6:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80175fa:	e7e5      	b.n	80175c8 <_ZN8touchgfx6muldivElll+0x50>

080175fc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80175fc:	2000      	movs	r0, #0
 80175fe:	4770      	bx	lr

08017600 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8017600:	2001      	movs	r0, #1
 8017602:	4770      	bx	lr

08017604 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017604:	2002      	movs	r0, #2
 8017606:	4770      	bx	lr

08017608 <_ZN8touchgfx6ScreenD1Ev>:
 8017608:	4770      	bx	lr

0801760a <_ZN8touchgfx12GestureEventD1Ev>:
 801760a:	4770      	bx	lr

0801760c <_ZN8touchgfx9DragEventD1Ev>:
 801760c:	4770      	bx	lr

0801760e <_ZN8touchgfx10ClickEventD1Ev>:
 801760e:	4770      	bx	lr

08017610 <_ZN8touchgfx10ClickEventD0Ev>:
 8017610:	b510      	push	{r4, lr}
 8017612:	4604      	mov	r4, r0
 8017614:	210c      	movs	r1, #12
 8017616:	f00e fa6c 	bl	8025af2 <_ZdlPvj>
 801761a:	4620      	mov	r0, r4
 801761c:	bd10      	pop	{r4, pc}

0801761e <_ZN8touchgfx9DragEventD0Ev>:
 801761e:	b510      	push	{r4, lr}
 8017620:	4604      	mov	r4, r0
 8017622:	2110      	movs	r1, #16
 8017624:	f00e fa65 	bl	8025af2 <_ZdlPvj>
 8017628:	4620      	mov	r0, r4
 801762a:	bd10      	pop	{r4, pc}

0801762c <_ZN8touchgfx12GestureEventD0Ev>:
 801762c:	b510      	push	{r4, lr}
 801762e:	4604      	mov	r4, r0
 8017630:	210c      	movs	r1, #12
 8017632:	f00e fa5e 	bl	8025af2 <_ZdlPvj>
 8017636:	4620      	mov	r0, r4
 8017638:	bd10      	pop	{r4, pc}

0801763a <_ZN8touchgfx6ScreenD0Ev>:
 801763a:	b510      	push	{r4, lr}
 801763c:	4604      	mov	r4, r0
 801763e:	213c      	movs	r1, #60	; 0x3c
 8017640:	f00e fa57 	bl	8025af2 <_ZdlPvj>
 8017644:	4620      	mov	r0, r4
 8017646:	bd10      	pop	{r4, pc}

08017648 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017648:	b530      	push	{r4, r5, lr}
 801764a:	460d      	mov	r5, r1
 801764c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801764e:	b087      	sub	sp, #28
 8017650:	4604      	mov	r4, r0
 8017652:	b301      	cbz	r1, 8017696 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017654:	a801      	add	r0, sp, #4
 8017656:	f7ff fe63 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801765a:	892a      	ldrh	r2, [r5, #8]
 801765c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017660:	7928      	ldrb	r0, [r5, #4]
 8017662:	1ad2      	subs	r2, r2, r3
 8017664:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017666:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801766a:	441a      	add	r2, r3
 801766c:	896b      	ldrh	r3, [r5, #10]
 801766e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017672:	f88d 0010 	strb.w	r0, [sp, #16]
 8017676:	1b5b      	subs	r3, r3, r5
 8017678:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801767a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801767c:	442b      	add	r3, r5
 801767e:	4d07      	ldr	r5, [pc, #28]	; (801769c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017680:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017684:	a903      	add	r1, sp, #12
 8017686:	9503      	str	r5, [sp, #12]
 8017688:	f8ad 2014 	strh.w	r2, [sp, #20]
 801768c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017690:	6803      	ldr	r3, [r0, #0]
 8017692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017694:	4798      	blx	r3
 8017696:	b007      	add	sp, #28
 8017698:	bd30      	pop	{r4, r5, pc}
 801769a:	bf00      	nop
 801769c:	0802b2c0 	.word	0x0802b2c0

080176a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80176a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80176a6:	b08a      	sub	sp, #40	; 0x28
 80176a8:	4604      	mov	r4, r0
 80176aa:	460d      	mov	r5, r1
 80176ac:	b113      	cbz	r3, 80176b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80176ae:	790b      	ldrb	r3, [r1, #4]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d044      	beq.n	801773e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80176b4:	f104 0804 	add.w	r8, r4, #4
 80176b8:	a803      	add	r0, sp, #12
 80176ba:	4641      	mov	r1, r8
 80176bc:	f7ff fe30 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176c0:	792b      	ldrb	r3, [r5, #4]
 80176c2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80176c6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80176ca:	b983      	cbnz	r3, 80176ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80176cc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80176d0:	892a      	ldrh	r2, [r5, #8]
 80176d2:	88e9      	ldrh	r1, [r5, #6]
 80176d4:	4640      	mov	r0, r8
 80176d6:	1b92      	subs	r2, r2, r6
 80176d8:	9301      	str	r3, [sp, #4]
 80176da:	1bc9      	subs	r1, r1, r7
 80176dc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80176e0:	b212      	sxth	r2, r2
 80176e2:	9300      	str	r3, [sp, #0]
 80176e4:	b209      	sxth	r1, r1
 80176e6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80176ea:	f7f8 fc91 	bl	8010010 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80176ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80176f0:	b329      	cbz	r1, 801773e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80176f2:	a805      	add	r0, sp, #20
 80176f4:	f7ff fe14 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80176fc:	792b      	ldrb	r3, [r5, #4]
 80176fe:	a907      	add	r1, sp, #28
 8017700:	1abf      	subs	r7, r7, r2
 8017702:	88ea      	ldrh	r2, [r5, #6]
 8017704:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017706:	4417      	add	r7, r2
 8017708:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801770a:	f88d 3020 	strb.w	r3, [sp, #32]
 801770e:	4417      	add	r7, r2
 8017710:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017714:	1ab6      	subs	r6, r6, r2
 8017716:	892a      	ldrh	r2, [r5, #8]
 8017718:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801771c:	4416      	add	r6, r2
 801771e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017720:	4416      	add	r6, r2
 8017722:	4a08      	ldr	r2, [pc, #32]	; (8017744 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017724:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8017728:	2600      	movs	r6, #0
 801772a:	9207      	str	r2, [sp, #28]
 801772c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8017730:	6803      	ldr	r3, [r0, #0]
 8017732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017734:	4798      	blx	r3
 8017736:	792b      	ldrb	r3, [r5, #4]
 8017738:	b10b      	cbz	r3, 801773e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801773a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801773e:	b00a      	add	sp, #40	; 0x28
 8017740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017744:	0802b298 	.word	0x0802b298

08017748 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801774c:	460c      	mov	r4, r1
 801774e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017750:	b088      	sub	sp, #32
 8017752:	4605      	mov	r5, r0
 8017754:	2900      	cmp	r1, #0
 8017756:	d06d      	beq.n	8017834 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017758:	4668      	mov	r0, sp
 801775a:	f7ff fde1 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801775e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8017760:	88e3      	ldrh	r3, [r4, #6]
 8017762:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017766:	440b      	add	r3, r1
 8017768:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801776c:	b21b      	sxth	r3, r3
 801776e:	4543      	cmp	r3, r8
 8017770:	db31      	blt.n	80177d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017772:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8017776:	44c4      	add	ip, r8
 8017778:	fa0f fc8c 	sxth.w	ip, ip
 801777c:	4563      	cmp	r3, ip
 801777e:	da2a      	bge.n	80177d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017780:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8017782:	8926      	ldrh	r6, [r4, #8]
 8017784:	4416      	add	r6, r2
 8017786:	b236      	sxth	r6, r6
 8017788:	42be      	cmp	r6, r7
 801778a:	db24      	blt.n	80177d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801778c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017790:	4438      	add	r0, r7
 8017792:	b200      	sxth	r0, r0
 8017794:	4286      	cmp	r6, r0
 8017796:	da1e      	bge.n	80177d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017798:	8963      	ldrh	r3, [r4, #10]
 801779a:	4419      	add	r1, r3
 801779c:	b209      	sxth	r1, r1
 801779e:	4541      	cmp	r1, r8
 80177a0:	db08      	blt.n	80177b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80177a2:	4561      	cmp	r1, ip
 80177a4:	da06      	bge.n	80177b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80177a6:	89a3      	ldrh	r3, [r4, #12]
 80177a8:	441a      	add	r2, r3
 80177aa:	b212      	sxth	r2, r2
 80177ac:	42ba      	cmp	r2, r7
 80177ae:	db01      	blt.n	80177b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80177b0:	4282      	cmp	r2, r0
 80177b2:	db10      	blt.n	80177d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80177b4:	4b21      	ldr	r3, [pc, #132]	; (801783c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80177b6:	a904      	add	r1, sp, #16
 80177b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80177ba:	9304      	str	r3, [sp, #16]
 80177bc:	2302      	movs	r3, #2
 80177be:	f88d 3014 	strb.w	r3, [sp, #20]
 80177c2:	2300      	movs	r3, #0
 80177c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80177c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80177cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80177d0:	6803      	ldr	r3, [r0, #0]
 80177d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177d4:	4798      	blx	r3
 80177d6:	1d29      	adds	r1, r5, #4
 80177d8:	a802      	add	r0, sp, #8
 80177da:	f7ff fda1 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80177e2:	88e0      	ldrh	r0, [r4, #6]
 80177e4:	eba3 0808 	sub.w	r8, r3, r8
 80177e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80177ec:	7921      	ldrb	r1, [r4, #4]
 80177ee:	fa1f f888 	uxth.w	r8, r8
 80177f2:	1bdf      	subs	r7, r3, r7
 80177f4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80177f8:	b2bb      	uxth	r3, r7
 80177fa:	4440      	add	r0, r8
 80177fc:	8922      	ldrh	r2, [r4, #8]
 80177fe:	8967      	ldrh	r7, [r4, #10]
 8017800:	4460      	add	r0, ip
 8017802:	89a4      	ldrh	r4, [r4, #12]
 8017804:	441a      	add	r2, r3
 8017806:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8017808:	44b8      	add	r8, r7
 801780a:	4423      	add	r3, r4
 801780c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017810:	4432      	add	r2, r6
 8017812:	44e0      	add	r8, ip
 8017814:	4433      	add	r3, r6
 8017816:	4c0a      	ldr	r4, [pc, #40]	; (8017840 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017818:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801781a:	f88d 1014 	strb.w	r1, [sp, #20]
 801781e:	a904      	add	r1, sp, #16
 8017820:	9404      	str	r4, [sp, #16]
 8017822:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017826:	f8ad 801a 	strh.w	r8, [sp, #26]
 801782a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801782e:	6803      	ldr	r3, [r0, #0]
 8017830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017832:	4798      	blx	r3
 8017834:	b008      	add	sp, #32
 8017836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801783a:	bf00      	nop
 801783c:	0802b298 	.word	0x0802b298
 8017840:	0802b2ac 	.word	0x0802b2ac

08017844 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017846:	4604      	mov	r4, r0
 8017848:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801784c:	3201      	adds	r2, #1
 801784e:	d112      	bne.n	8017876 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017850:	2500      	movs	r5, #0
 8017852:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017856:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801785a:	6803      	ldr	r3, [r0, #0]
 801785c:	9500      	str	r5, [sp, #0]
 801785e:	466d      	mov	r5, sp
 8017860:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017864:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017868:	4629      	mov	r1, r5
 801786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801786c:	4798      	blx	r3
 801786e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017872:	e884 0003 	stmia.w	r4, {r0, r1}
 8017876:	4620      	mov	r0, r4
 8017878:	b003      	add	sp, #12
 801787a:	bd30      	pop	{r4, r5, pc}

0801787c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801787c:	b513      	push	{r0, r1, r4, lr}
 801787e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017882:	4604      	mov	r4, r0
 8017884:	3301      	adds	r3, #1
 8017886:	d109      	bne.n	801789c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017888:	4601      	mov	r1, r0
 801788a:	4668      	mov	r0, sp
 801788c:	f7ff fd48 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017890:	f8bd 3000 	ldrh.w	r3, [sp]
 8017894:	8423      	strh	r3, [r4, #32]
 8017896:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801789a:	8463      	strh	r3, [r4, #34]	; 0x22
 801789c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80178a0:	b002      	add	sp, #8
 80178a2:	bd10      	pop	{r4, pc}

080178a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80178a4:	b513      	push	{r0, r1, r4, lr}
 80178a6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80178aa:	4604      	mov	r4, r0
 80178ac:	3301      	adds	r3, #1
 80178ae:	d109      	bne.n	80178c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80178b0:	4601      	mov	r1, r0
 80178b2:	4668      	mov	r0, sp
 80178b4:	f7ff fd34 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80178b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80178bc:	8423      	strh	r3, [r4, #32]
 80178be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80178c2:	8463      	strh	r3, [r4, #34]	; 0x22
 80178c4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80178c8:	b002      	add	sp, #8
 80178ca:	bd10      	pop	{r4, pc}

080178cc <_ZN8touchgfx6ScreenC1Ev>:
 80178cc:	b570      	push	{r4, r5, r6, lr}
 80178ce:	4b17      	ldr	r3, [pc, #92]	; (801792c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80178d0:	4605      	mov	r5, r0
 80178d2:	4a17      	ldr	r2, [pc, #92]	; (8017930 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80178d4:	2101      	movs	r1, #1
 80178d6:	f845 3b04 	str.w	r3, [r5], #4
 80178da:	2300      	movs	r3, #0
 80178dc:	6042      	str	r2, [r0, #4]
 80178de:	4604      	mov	r4, r0
 80178e0:	8103      	strh	r3, [r0, #8]
 80178e2:	8143      	strh	r3, [r0, #10]
 80178e4:	8183      	strh	r3, [r0, #12]
 80178e6:	81c3      	strh	r3, [r0, #14]
 80178e8:	8203      	strh	r3, [r0, #16]
 80178ea:	8243      	strh	r3, [r0, #18]
 80178ec:	8283      	strh	r3, [r0, #20]
 80178ee:	82c3      	strh	r3, [r0, #22]
 80178f0:	6203      	str	r3, [r0, #32]
 80178f2:	8483      	strh	r3, [r0, #36]	; 0x24
 80178f4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80178f6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80178fa:	6343      	str	r3, [r0, #52]	; 0x34
 80178fc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8017900:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017904:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017908:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801790c:	4b09      	ldr	r3, [pc, #36]	; (8017934 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801790e:	4628      	mov	r0, r5
 8017910:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017914:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8017916:	4a08      	ldr	r2, [pc, #32]	; (8017938 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017918:	f9b2 1000 	ldrsh.w	r1, [r2]
 801791c:	4798      	blx	r3
 801791e:	6863      	ldr	r3, [r4, #4]
 8017920:	4628      	mov	r0, r5
 8017922:	4631      	mov	r1, r6
 8017924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017926:	4798      	blx	r3
 8017928:	4620      	mov	r0, r4
 801792a:	bd70      	pop	{r4, r5, r6, pc}
 801792c:	0802b2d4 	.word	0x0802b2d4
 8017930:	0802a84c 	.word	0x0802a84c
 8017934:	20027b96 	.word	0x20027b96
 8017938:	20027b94 	.word	0x20027b94

0801793c <_ZN8touchgfx6Screen4drawEv>:
 801793c:	4b09      	ldr	r3, [pc, #36]	; (8017964 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801793e:	b507      	push	{r0, r1, r2, lr}
 8017940:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017944:	2100      	movs	r1, #0
 8017946:	4b08      	ldr	r3, [pc, #32]	; (8017968 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017948:	9100      	str	r1, [sp, #0]
 801794a:	4669      	mov	r1, sp
 801794c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017950:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017954:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017958:	6803      	ldr	r3, [r0, #0]
 801795a:	689b      	ldr	r3, [r3, #8]
 801795c:	4798      	blx	r3
 801795e:	b003      	add	sp, #12
 8017960:	f85d fb04 	ldr.w	pc, [sp], #4
 8017964:	20027b94 	.word	0x20027b94
 8017968:	20027b96 	.word	0x20027b96

0801796c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017970:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017974:	b089      	sub	sp, #36	; 0x24
 8017976:	4680      	mov	r8, r0
 8017978:	460c      	mov	r4, r1
 801797a:	2b00      	cmp	r3, #0
 801797c:	4615      	mov	r5, r2
 801797e:	dd0e      	ble.n	801799e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017980:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017984:	2b00      	cmp	r3, #0
 8017986:	dd0a      	ble.n	801799e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017988:	4628      	mov	r0, r5
 801798a:	f7ff ff5b 	bl	8017844 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801798e:	4621      	mov	r1, r4
 8017990:	f7fe fadb 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017994:	69eb      	ldr	r3, [r5, #28]
 8017996:	b928      	cbnz	r0, 80179a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017998:	461d      	mov	r5, r3
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1f4      	bne.n	8017988 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801799e:	b009      	add	sp, #36	; 0x24
 80179a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a4:	ae04      	add	r6, sp, #16
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	f000 80b5 	beq.w	8017b16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80179ac:	682b      	ldr	r3, [r5, #0]
 80179ae:	4629      	mov	r1, r5
 80179b0:	a802      	add	r0, sp, #8
 80179b2:	68db      	ldr	r3, [r3, #12]
 80179b4:	4798      	blx	r3
 80179b6:	4628      	mov	r0, r5
 80179b8:	f7ff ff60 	bl	801787c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80179bc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80179c0:	4407      	add	r7, r0
 80179c2:	4628      	mov	r0, r5
 80179c4:	f7ff ff6e 	bl	80178a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80179c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80179cc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80179d0:	b23f      	sxth	r7, r7
 80179d2:	4418      	add	r0, r3
 80179d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80179d8:	4621      	mov	r1, r4
 80179da:	f8ad 2014 	strh.w	r2, [sp, #20]
 80179de:	f8ad 0012 	strh.w	r0, [sp, #18]
 80179e2:	4630      	mov	r0, r6
 80179e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179e8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80179ec:	f7f8 fbf2 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 80179f0:	4628      	mov	r0, r5
 80179f2:	f7ff ff27 	bl	8017844 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80179f6:	ab06      	add	r3, sp, #24
 80179f8:	4602      	mov	r2, r0
 80179fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80179fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a02:	4611      	mov	r1, r2
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7f8 fbe5 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8017a0a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017a0e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017a12:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017a16:	4299      	cmp	r1, r3
 8017a18:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017a1c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017a20:	d10b      	bne.n	8017a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017a22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017a26:	4552      	cmp	r2, sl
 8017a28:	d107      	bne.n	8017a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017a2a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017a2e:	455a      	cmp	r2, fp
 8017a30:	d103      	bne.n	8017a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017a32:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017a36:	454a      	cmp	r2, r9
 8017a38:	d06d      	beq.n	8017b16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017a3a:	f1bb 0f00 	cmp.w	fp, #0
 8017a3e:	dd65      	ble.n	8017b0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017a40:	f1b9 0f00 	cmp.w	r9, #0
 8017a44:	dd62      	ble.n	8017b0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017a46:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017a4a:	fa1f f08a 	uxth.w	r0, sl
 8017a4e:	4552      	cmp	r2, sl
 8017a50:	9000      	str	r0, [sp, #0]
 8017a52:	da12      	bge.n	8017a7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017a54:	9301      	str	r3, [sp, #4]
 8017a56:	9b00      	ldr	r3, [sp, #0]
 8017a58:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017a5c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017a60:	1a9a      	subs	r2, r3, r2
 8017a62:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017a66:	4631      	mov	r1, r6
 8017a68:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017a6c:	4640      	mov	r0, r8
 8017a6e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017a72:	69ea      	ldr	r2, [r5, #28]
 8017a74:	f7ff ff7a 	bl	801796c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a78:	9b01      	ldr	r3, [sp, #4]
 8017a7a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017a7e:	b29f      	uxth	r7, r3
 8017a80:	429a      	cmp	r2, r3
 8017a82:	da0d      	bge.n	8017aa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017a84:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017a88:	1aba      	subs	r2, r7, r2
 8017a8a:	f8ad a012 	strh.w	sl, [sp, #18]
 8017a8e:	4631      	mov	r1, r6
 8017a90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a94:	4640      	mov	r0, r8
 8017a96:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017a9a:	69ea      	ldr	r2, [r5, #28]
 8017a9c:	f7ff ff66 	bl	801796c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017aa0:	8822      	ldrh	r2, [r4, #0]
 8017aa2:	445f      	add	r7, fp
 8017aa4:	88a3      	ldrh	r3, [r4, #4]
 8017aa6:	b2bf      	uxth	r7, r7
 8017aa8:	4413      	add	r3, r2
 8017aaa:	b23a      	sxth	r2, r7
 8017aac:	b29b      	uxth	r3, r3
 8017aae:	b219      	sxth	r1, r3
 8017ab0:	4291      	cmp	r1, r2
 8017ab2:	dd0d      	ble.n	8017ad0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017ab4:	1bdb      	subs	r3, r3, r7
 8017ab6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017aba:	f8ad a012 	strh.w	sl, [sp, #18]
 8017abe:	4631      	mov	r1, r6
 8017ac0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ac4:	4640      	mov	r0, r8
 8017ac6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017aca:	69ea      	ldr	r2, [r5, #28]
 8017acc:	f7ff ff4e 	bl	801796c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017ad0:	88e2      	ldrh	r2, [r4, #6]
 8017ad2:	8863      	ldrh	r3, [r4, #2]
 8017ad4:	4413      	add	r3, r2
 8017ad6:	9a00      	ldr	r2, [sp, #0]
 8017ad8:	444a      	add	r2, r9
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	fa1f f982 	uxth.w	r9, r2
 8017ae0:	b219      	sxth	r1, r3
 8017ae2:	fa0f f289 	sxth.w	r2, r9
 8017ae6:	428a      	cmp	r2, r1
 8017ae8:	da15      	bge.n	8017b16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017aea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017aee:	eba3 0309 	sub.w	r3, r3, r9
 8017af2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017af6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017afa:	4631      	mov	r1, r6
 8017afc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017b00:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017b04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b08:	69ea      	ldr	r2, [r5, #28]
 8017b0a:	e001      	b.n	8017b10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017b0c:	69ea      	ldr	r2, [r5, #28]
 8017b0e:	4621      	mov	r1, r4
 8017b10:	4640      	mov	r0, r8
 8017b12:	f7ff ff2b 	bl	801796c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b16:	4628      	mov	r0, r5
 8017b18:	f7ff fe94 	bl	8017844 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017b1c:	6861      	ldr	r1, [r4, #4]
 8017b1e:	4602      	mov	r2, r0
 8017b20:	4633      	mov	r3, r6
 8017b22:	6820      	ldr	r0, [r4, #0]
 8017b24:	c303      	stmia	r3!, {r0, r1}
 8017b26:	4611      	mov	r1, r2
 8017b28:	4630      	mov	r0, r6
 8017b2a:	f7f8 fb53 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8017b2e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	f77f af33 	ble.w	801799e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017b38:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	f77f af2e 	ble.w	801799e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017b42:	4628      	mov	r0, r5
 8017b44:	f7ff fe9a 	bl	801787c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017b48:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017b4c:	1a18      	subs	r0, r3, r0
 8017b4e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017b52:	4628      	mov	r0, r5
 8017b54:	f7ff fea6 	bl	80178a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017b58:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017b5c:	4631      	mov	r1, r6
 8017b5e:	1a18      	subs	r0, r3, r0
 8017b60:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017b64:	4628      	mov	r0, r5
 8017b66:	682b      	ldr	r3, [r5, #0]
 8017b68:	689b      	ldr	r3, [r3, #8]
 8017b6a:	4798      	blx	r3
 8017b6c:	e717      	b.n	801799e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017b6e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017b6e:	b570      	push	{r4, r5, r6, lr}
 8017b70:	1d06      	adds	r6, r0, #4
 8017b72:	b086      	sub	sp, #24
 8017b74:	460c      	mov	r4, r1
 8017b76:	2300      	movs	r3, #0
 8017b78:	4631      	mov	r1, r6
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	a802      	add	r0, sp, #8
 8017b7e:	9301      	str	r3, [sp, #4]
 8017b80:	f7ff fbce 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b84:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017b88:	8822      	ldrh	r2, [r4, #0]
 8017b8a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017b8e:	1ad2      	subs	r2, r2, r3
 8017b90:	8863      	ldrh	r3, [r4, #2]
 8017b92:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017b96:	1a5b      	subs	r3, r3, r1
 8017b98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017b9c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017ba0:	aa01      	add	r2, sp, #4
 8017ba2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017bac:	a904      	add	r1, sp, #16
 8017bae:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017bb2:	f7f8 fbe7 	bl	8010384 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017bb6:	9a01      	ldr	r2, [sp, #4]
 8017bb8:	b11a      	cbz	r2, 8017bc2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017bba:	4621      	mov	r1, r4
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f7ff fed5 	bl	801796c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017bc2:	b006      	add	sp, #24
 8017bc4:	bd70      	pop	{r4, r5, r6, pc}

08017bc6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	b530      	push	{r4, r5, lr}
 8017bca:	4604      	mov	r4, r0
 8017bcc:	b085      	sub	sp, #20
 8017bce:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017bd2:	460d      	mov	r5, r1
 8017bd4:	466b      	mov	r3, sp
 8017bd6:	6851      	ldr	r1, [r2, #4]
 8017bd8:	c303      	stmia	r3!, {r0, r1}
 8017bda:	4629      	mov	r1, r5
 8017bdc:	4668      	mov	r0, sp
 8017bde:	f7f8 faf9 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 8017be2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017be6:	b12b      	cbz	r3, 8017bf4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017be8:	4669      	mov	r1, sp
 8017bea:	4620      	mov	r0, r4
 8017bec:	f7ff ffbf 	bl	8017b6e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017bf0:	b005      	add	sp, #20
 8017bf2:	bd30      	pop	{r4, r5, pc}
 8017bf4:	3404      	adds	r4, #4
 8017bf6:	a802      	add	r0, sp, #8
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	f7ff fb91 	bl	8017320 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017bfe:	f8bd 3000 	ldrh.w	r3, [sp]
 8017c02:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017c06:	4669      	mov	r1, sp
 8017c08:	4620      	mov	r0, r4
 8017c0a:	1a9b      	subs	r3, r3, r2
 8017c0c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017c10:	f8ad 3000 	strh.w	r3, [sp]
 8017c14:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017c18:	1a9b      	subs	r3, r3, r2
 8017c1a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017c1e:	f7f8 fb78 	bl	8010312 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017c22:	e7e5      	b.n	8017bf0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017c24 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017c24:	460b      	mov	r3, r1
 8017c26:	680a      	ldr	r2, [r1, #0]
 8017c28:	1d01      	adds	r1, r0, #4
 8017c2a:	6992      	ldr	r2, [r2, #24]
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	4710      	bx	r2

08017c30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8017c30:	4298      	cmp	r0, r3
 8017c32:	d200      	bcs.n	8017c36 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8017c34:	b913      	cbnz	r3, 8017c3c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8017c36:	440a      	add	r2, r1
 8017c38:	b210      	sxth	r0, r2
 8017c3a:	4770      	bx	lr
 8017c3c:	ee07 0a90 	vmov	s15, r0
 8017c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017c44:	ee07 3a90 	vmov	s15, r3
 8017c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017c50:	ee07 2a90 	vmov	s15, r2
 8017c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017c58:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017c5c:	ee07 1a90 	vmov	s15, r1
 8017c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c64:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017c68:	ee67 5a07 	vmul.f32	s11, s14, s14
 8017c6c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017c70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017c74:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c80:	bfcc      	ite	gt
 8017c82:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017c86:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c8e:	ee17 3a90 	vmov	r3, s15
 8017c92:	b218      	sxth	r0, r3
 8017c94:	4770      	bx	lr

08017c96 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8017c96:	4298      	cmp	r0, r3
 8017c98:	d200      	bcs.n	8017c9c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8017c9a:	b913      	cbnz	r3, 8017ca2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8017c9c:	440a      	add	r2, r1
 8017c9e:	b210      	sxth	r0, r2
 8017ca0:	4770      	bx	lr
 8017ca2:	ee07 2a90 	vmov	s15, r2
 8017ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017caa:	ee07 0a90 	vmov	s15, r0
 8017cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017cb6:	ee07 3a10 	vmov	s14, r3
 8017cba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8017cbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017cc2:	ee07 1a90 	vmov	s15, r1
 8017cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cda:	bfcc      	ite	gt
 8017cdc:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8017ce0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ce8:	ee17 3a90 	vmov	r3, s15
 8017cec:	b218      	sxth	r0, r3
 8017cee:	4770      	bx	lr

08017cf0 <_ZN8touchgfx12TextProviderC1Ev>:
 8017cf0:	b538      	push	{r3, r4, r5, lr}
 8017cf2:	2500      	movs	r5, #0
 8017cf4:	2302      	movs	r3, #2
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	220e      	movs	r2, #14
 8017cfa:	7403      	strb	r3, [r0, #16]
 8017cfc:	4629      	mov	r1, r5
 8017cfe:	6145      	str	r5, [r0, #20]
 8017d00:	7605      	strb	r5, [r0, #24]
 8017d02:	83c5      	strh	r5, [r0, #30]
 8017d04:	8405      	strh	r5, [r0, #32]
 8017d06:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017d08:	8705      	strh	r5, [r0, #56]	; 0x38
 8017d0a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017d0c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8017d10:	e9c0 5500 	strd	r5, r5, [r0]
 8017d14:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8017d18:	304c      	adds	r0, #76	; 0x4c
 8017d1a:	f00e f89f 	bl	8025e5c <memset>
 8017d1e:	2301      	movs	r3, #1
 8017d20:	4620      	mov	r0, r4
 8017d22:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8017d26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017d2a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017d2e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8017d32:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8017d36:	f7ef fb35 	bl	80073a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	bd38      	pop	{r3, r4, r5, pc}

08017d3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017d3e:	b530      	push	{r4, r5, lr}
 8017d40:	2500      	movs	r5, #0
 8017d42:	2401      	movs	r4, #1
 8017d44:	6843      	ldr	r3, [r0, #4]
 8017d46:	b913      	cbnz	r3, 8017d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017d48:	6803      	ldr	r3, [r0, #0]
 8017d4a:	b313      	cbz	r3, 8017d92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017d4c:	6043      	str	r3, [r0, #4]
 8017d4e:	7e03      	ldrb	r3, [r0, #24]
 8017d50:	b143      	cbz	r3, 8017d64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017d52:	6943      	ldr	r3, [r0, #20]
 8017d54:	b12b      	cbz	r3, 8017d62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017d56:	881a      	ldrh	r2, [r3, #0]
 8017d58:	b11a      	cbz	r2, 8017d62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017d5a:	1c9a      	adds	r2, r3, #2
 8017d5c:	6142      	str	r2, [r0, #20]
 8017d5e:	8818      	ldrh	r0, [r3, #0]
 8017d60:	bd30      	pop	{r4, r5, pc}
 8017d62:	7605      	strb	r5, [r0, #24]
 8017d64:	6843      	ldr	r3, [r0, #4]
 8017d66:	8819      	ldrh	r1, [r3, #0]
 8017d68:	b199      	cbz	r1, 8017d92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017d6a:	1c9a      	adds	r2, r3, #2
 8017d6c:	2902      	cmp	r1, #2
 8017d6e:	6042      	str	r2, [r0, #4]
 8017d70:	d1f5      	bne.n	8017d5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017d72:	7c03      	ldrb	r3, [r0, #16]
 8017d74:	2b01      	cmp	r3, #1
 8017d76:	d8e5      	bhi.n	8017d44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d78:	1c5a      	adds	r2, r3, #1
 8017d7a:	3302      	adds	r3, #2
 8017d7c:	7402      	strb	r2, [r0, #16]
 8017d7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017d82:	6143      	str	r3, [r0, #20]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d0dd      	beq.n	8017d44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d0da      	beq.n	8017d44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d8e:	7604      	strb	r4, [r0, #24]
 8017d90:	e7d8      	b.n	8017d44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d92:	2000      	movs	r0, #0
 8017d94:	e7e4      	b.n	8017d60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017d96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017d96:	6001      	str	r1, [r0, #0]
 8017d98:	2100      	movs	r1, #0
 8017d9a:	b430      	push	{r4, r5}
 8017d9c:	6041      	str	r1, [r0, #4]
 8017d9e:	6815      	ldr	r5, [r2, #0]
 8017da0:	6085      	str	r5, [r0, #8]
 8017da2:	6852      	ldr	r2, [r2, #4]
 8017da4:	6443      	str	r3, [r0, #68]	; 0x44
 8017da6:	9b02      	ldr	r3, [sp, #8]
 8017da8:	60c2      	str	r2, [r0, #12]
 8017daa:	7401      	strb	r1, [r0, #16]
 8017dac:	6141      	str	r1, [r0, #20]
 8017dae:	7601      	strb	r1, [r0, #24]
 8017db0:	8701      	strh	r1, [r0, #56]	; 0x38
 8017db2:	8401      	strh	r1, [r0, #32]
 8017db4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017db8:	6483      	str	r3, [r0, #72]	; 0x48
 8017dba:	bc30      	pop	{r4, r5}
 8017dbc:	f7ef baf2 	b.w	80073a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017dc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	4608      	mov	r0, r1
 8017dc6:	b1f1      	cbz	r1, 8017e06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017dc8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017dcc:	460b      	mov	r3, r1
 8017dce:	f101 0708 	add.w	r7, r1, #8
 8017dd2:	4622      	mov	r2, r4
 8017dd4:	6818      	ldr	r0, [r3, #0]
 8017dd6:	3308      	adds	r3, #8
 8017dd8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017ddc:	4626      	mov	r6, r4
 8017dde:	42bb      	cmp	r3, r7
 8017de0:	c603      	stmia	r6!, {r0, r1}
 8017de2:	4634      	mov	r4, r6
 8017de4:	d1f6      	bne.n	8017dd4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017de6:	6818      	ldr	r0, [r3, #0]
 8017de8:	6030      	str	r0, [r6, #0]
 8017dea:	4610      	mov	r0, r2
 8017dec:	889b      	ldrh	r3, [r3, #4]
 8017dee:	80b3      	strh	r3, [r6, #4]
 8017df0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8017df4:	015b      	lsls	r3, r3, #5
 8017df6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017dfa:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017dfe:	430b      	orrs	r3, r1
 8017e00:	425b      	negs	r3, r3
 8017e02:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8017e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017e08:	b538      	push	{r3, r4, r5, lr}
 8017e0a:	460c      	mov	r4, r1
 8017e0c:	6811      	ldr	r1, [r2, #0]
 8017e0e:	4610      	mov	r0, r2
 8017e10:	68cd      	ldr	r5, [r1, #12]
 8017e12:	4619      	mov	r1, r3
 8017e14:	47a8      	blx	r5
 8017e16:	2800      	cmp	r0, #0
 8017e18:	bf08      	it	eq
 8017e1a:	4620      	moveq	r0, r4
 8017e1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08017e20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e22:	4604      	mov	r4, r0
 8017e24:	4615      	mov	r5, r2
 8017e26:	4608      	mov	r0, r1
 8017e28:	b93a      	cbnz	r2, 8017e3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017e2a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017e2e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8017e32:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017e36:	4628      	mov	r0, r5
 8017e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e3a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017e3e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8017e42:	8893      	ldrh	r3, [r2, #4]
 8017e44:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017e48:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017e4c:	79ee      	ldrb	r6, [r5, #7]
 8017e4e:	4316      	orrs	r6, r2
 8017e50:	19da      	adds	r2, r3, r7
 8017e52:	b291      	uxth	r1, r2
 8017e54:	b2b7      	uxth	r7, r6
 8017e56:	291d      	cmp	r1, #29
 8017e58:	d87b      	bhi.n	8017f52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	10f6      	asrs	r6, r6, #3
 8017e5e:	408a      	lsls	r2, r1
 8017e60:	4974      	ldr	r1, [pc, #464]	; (8018034 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017e62:	420a      	tst	r2, r1
 8017e64:	d12e      	bne.n	8017ec4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017e66:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017e6a:	d072      	beq.n	8017f52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017e6c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8017e70:	462b      	mov	r3, r5
 8017e72:	f105 0e08 	add.w	lr, r5, #8
 8017e76:	4615      	mov	r5, r2
 8017e78:	6818      	ldr	r0, [r3, #0]
 8017e7a:	3308      	adds	r3, #8
 8017e7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017e80:	4694      	mov	ip, r2
 8017e82:	4573      	cmp	r3, lr
 8017e84:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017e88:	4662      	mov	r2, ip
 8017e8a:	d1f5      	bne.n	8017e78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017e8c:	6818      	ldr	r0, [r3, #0]
 8017e8e:	f8cc 0000 	str.w	r0, [ip]
 8017e92:	889b      	ldrh	r3, [r3, #4]
 8017e94:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017e98:	b2b3      	uxth	r3, r6
 8017e9a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017e9e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017ea2:	1aca      	subs	r2, r1, r3
 8017ea4:	1bcf      	subs	r7, r1, r7
 8017ea6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017eaa:	b292      	uxth	r2, r2
 8017eac:	1afb      	subs	r3, r7, r3
 8017eae:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017eb2:	10d2      	asrs	r2, r2, #3
 8017eb4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017eb8:	4302      	orrs	r2, r0
 8017eba:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017ebe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017ec2:	e7b8      	b.n	8017e36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017ec4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017ec6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017eca:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017ecc:	f640 6333 	movw	r3, #3635	; 0xe33
 8017ed0:	4299      	cmp	r1, r3
 8017ed2:	d110      	bne.n	8017ef6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017ed4:	6803      	ldr	r3, [r0, #0]
 8017ed6:	68db      	ldr	r3, [r3, #12]
 8017ed8:	4798      	blx	r3
 8017eda:	7b41      	ldrb	r1, [r0, #13]
 8017edc:	00cb      	lsls	r3, r1, #3
 8017ede:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017ee2:	7a03      	ldrb	r3, [r0, #8]
 8017ee4:	0648      	lsls	r0, r1, #25
 8017ee6:	ea43 0302 	orr.w	r3, r3, r2
 8017eea:	bf44      	itt	mi
 8017eec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017ef0:	b21b      	sxthmi	r3, r3
 8017ef2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017ef6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017efa:	462a      	mov	r2, r5
 8017efc:	f105 0c08 	add.w	ip, r5, #8
 8017f00:	443b      	add	r3, r7
 8017f02:	4433      	add	r3, r6
 8017f04:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8017f08:	b29b      	uxth	r3, r3
 8017f0a:	4635      	mov	r5, r6
 8017f0c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017f10:	6810      	ldr	r0, [r2, #0]
 8017f12:	3208      	adds	r2, #8
 8017f14:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017f18:	4637      	mov	r7, r6
 8017f1a:	4562      	cmp	r2, ip
 8017f1c:	c703      	stmia	r7!, {r0, r1}
 8017f1e:	463e      	mov	r6, r7
 8017f20:	d1f6      	bne.n	8017f10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8017f22:	6810      	ldr	r0, [r2, #0]
 8017f24:	6038      	str	r0, [r7, #0]
 8017f26:	8892      	ldrh	r2, [r2, #4]
 8017f28:	80ba      	strh	r2, [r7, #4]
 8017f2a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017f2e:	10db      	asrs	r3, r3, #3
 8017f30:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017f34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017f3c:	4313      	orrs	r3, r2
 8017f3e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8017f42:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017f46:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8017f4a:	1a9b      	subs	r3, r3, r2
 8017f4c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8017f50:	e771      	b.n	8017e36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017f52:	f023 0204 	bic.w	r2, r3, #4
 8017f56:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017f5a:	428a      	cmp	r2, r1
 8017f5c:	d003      	beq.n	8017f66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8017f5e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017f62:	4293      	cmp	r3, r2
 8017f64:	d120      	bne.n	8017fa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8017f66:	3b01      	subs	r3, #1
 8017f68:	4602      	mov	r2, r0
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	b29b      	uxth	r3, r3
 8017f70:	f7ff ff4a 	bl	8017e08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017f74:	7b41      	ldrb	r1, [r0, #13]
 8017f76:	00cb      	lsls	r3, r1, #3
 8017f78:	0649      	lsls	r1, r1, #25
 8017f7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f7e:	7a03      	ldrb	r3, [r0, #8]
 8017f80:	ea43 0302 	orr.w	r3, r3, r2
 8017f84:	bf44      	itt	mi
 8017f86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017f8a:	b21b      	sxthmi	r3, r3
 8017f8c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017f90:	7b6b      	ldrb	r3, [r5, #13]
 8017f92:	7aaa      	ldrb	r2, [r5, #10]
 8017f94:	005b      	lsls	r3, r3, #1
 8017f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f9a:	4313      	orrs	r3, r2
 8017f9c:	115a      	asrs	r2, r3, #5
 8017f9e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017fa2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017fa6:	e035      	b.n	8018014 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017fa8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017fac:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017fb0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017fb4:	7a2a      	ldrb	r2, [r5, #8]
 8017fb6:	ea42 0201 	orr.w	r2, r2, r1
 8017fba:	f640 6109 	movw	r1, #3593	; 0xe09
 8017fbe:	bf1c      	itt	ne
 8017fc0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017fc4:	b212      	sxthne	r2, r2
 8017fc6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017fca:	f023 0210 	bic.w	r2, r3, #16
 8017fce:	428a      	cmp	r2, r1
 8017fd0:	d003      	beq.n	8017fda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8017fd2:	f640 6213 	movw	r2, #3603	; 0xe13
 8017fd6:	4293      	cmp	r3, r2
 8017fd8:	d129      	bne.n	801802e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017fda:	7b6e      	ldrb	r6, [r5, #13]
 8017fdc:	4629      	mov	r1, r5
 8017fde:	0076      	lsls	r6, r6, #1
 8017fe0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017fe4:	7aae      	ldrb	r6, [r5, #10]
 8017fe6:	4316      	orrs	r6, r2
 8017fe8:	f640 6213 	movw	r2, #3603	; 0xe13
 8017fec:	4293      	cmp	r3, r2
 8017fee:	4602      	mov	r2, r0
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	bf16      	itet	ne
 8017ff4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017ff8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017ffc:	b29b      	uxthne	r3, r3
 8017ffe:	f7ff ff03 	bl	8017e08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018002:	7b43      	ldrb	r3, [r0, #13]
 8018004:	7a82      	ldrb	r2, [r0, #10]
 8018006:	005b      	lsls	r3, r3, #1
 8018008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801800c:	4313      	orrs	r3, r2
 801800e:	1af6      	subs	r6, r6, r3
 8018010:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018014:	7b69      	ldrb	r1, [r5, #13]
 8018016:	00cb      	lsls	r3, r1, #3
 8018018:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801801c:	7a2b      	ldrb	r3, [r5, #8]
 801801e:	4313      	orrs	r3, r2
 8018020:	064a      	lsls	r2, r1, #25
 8018022:	bf44      	itt	mi
 8018024:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018028:	b21b      	sxthmi	r3, r3
 801802a:	1bdb      	subs	r3, r3, r7
 801802c:	e747      	b.n	8017ebe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801802e:	2300      	movs	r3, #0
 8018030:	e7b7      	b.n	8017fa2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8018032:	bf00      	nop
 8018034:	3fc00079 	.word	0x3fc00079

08018038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801803c:	4604      	mov	r4, r0
 801803e:	b942      	cbnz	r2, 8018052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018044:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018048:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801804c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018050:	e047      	b.n	80180e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018052:	7b51      	ldrb	r1, [r2, #13]
 8018054:	8893      	ldrh	r3, [r2, #4]
 8018056:	010d      	lsls	r5, r1, #4
 8018058:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801805c:	79d5      	ldrb	r5, [r2, #7]
 801805e:	4305      	orrs	r5, r0
 8018060:	2d04      	cmp	r5, #4
 8018062:	bfcc      	ite	gt
 8018064:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018068:	f04f 0e01 	movle.w	lr, #1
 801806c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018070:	f200 80ab 	bhi.w	80181ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018074:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018078:	4283      	cmp	r3, r0
 801807a:	d216      	bcs.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801807c:	f240 605b 	movw	r0, #1627	; 0x65b
 8018080:	4283      	cmp	r3, r0
 8018082:	d859      	bhi.n	8018138 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018084:	f240 6057 	movw	r0, #1623	; 0x657
 8018088:	4283      	cmp	r3, r0
 801808a:	d20e      	bcs.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801808c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018090:	d24a      	bcs.n	8018128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018092:	f240 604e 	movw	r0, #1614	; 0x64e
 8018096:	4283      	cmp	r3, r0
 8018098:	d207      	bcs.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801809a:	f240 601a 	movw	r0, #1562	; 0x61a
 801809e:	4283      	cmp	r3, r0
 80180a0:	d02a      	beq.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80180a2:	d821      	bhi.n	80180e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80180a4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80180a8:	d35b      	bcc.n	8018162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80180aa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80180ae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80180b2:	f040 80d0 	bne.w	8018256 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80180b6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80180ba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80180be:	f040 80ca 	bne.w	8018256 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80180c2:	00cb      	lsls	r3, r1, #3
 80180c4:	0649      	lsls	r1, r1, #25
 80180c6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80180ca:	7a13      	ldrb	r3, [r2, #8]
 80180cc:	ea43 0300 	orr.w	r3, r3, r0
 80180d0:	bf44      	itt	mi
 80180d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80180d6:	b21b      	sxthmi	r3, r3
 80180d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80180dc:	1b5d      	subs	r5, r3, r5
 80180de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80180e2:	4610      	mov	r0, r2
 80180e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180e8:	f240 604b 	movw	r0, #1611	; 0x64b
 80180ec:	4283      	cmp	r3, r0
 80180ee:	d338      	bcc.n	8018162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80180f0:	f240 604c 	movw	r0, #1612	; 0x64c
 80180f4:	4283      	cmp	r3, r0
 80180f6:	d9d8      	bls.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80180f8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80180fc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018100:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018104:	f040 80f3 	bne.w	80182ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018108:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801810c:	f040 80ef 	bne.w	80182ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018110:	00cb      	lsls	r3, r1, #3
 8018112:	064e      	lsls	r6, r1, #25
 8018114:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018118:	7a13      	ldrb	r3, [r2, #8]
 801811a:	ea43 0300 	orr.w	r3, r3, r0
 801811e:	bf44      	itt	mi
 8018120:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018124:	b21b      	sxthmi	r3, r3
 8018126:	e7d9      	b.n	80180dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018128:	f240 6054 	movw	r0, #1620	; 0x654
 801812c:	4283      	cmp	r3, r0
 801812e:	d8e3      	bhi.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018130:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018134:	d9e0      	bls.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018136:	e7b8      	b.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018138:	f240 6074 	movw	r0, #1652	; 0x674
 801813c:	4283      	cmp	r3, r0
 801813e:	d0b4      	beq.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018140:	d82d      	bhi.n	801819e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018142:	f240 605e 	movw	r0, #1630	; 0x65e
 8018146:	4283      	cmp	r3, r0
 8018148:	d804      	bhi.n	8018154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801814a:	f240 605d 	movw	r0, #1629	; 0x65d
 801814e:	4283      	cmp	r3, r0
 8018150:	d3d2      	bcc.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018152:	e7aa      	b.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018154:	f240 605f 	movw	r0, #1631	; 0x65f
 8018158:	4283      	cmp	r3, r0
 801815a:	d0cd      	beq.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801815c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018160:	d0a3      	beq.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018162:	00cb      	lsls	r3, r1, #3
 8018164:	0649      	lsls	r1, r1, #25
 8018166:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801816a:	7a13      	ldrb	r3, [r2, #8]
 801816c:	ea43 0300 	orr.w	r3, r3, r0
 8018170:	bf44      	itt	mi
 8018172:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018176:	b21b      	sxthmi	r3, r3
 8018178:	1b5d      	subs	r5, r3, r5
 801817a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801817e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018182:	7b53      	ldrb	r3, [r2, #13]
 8018184:	015b      	lsls	r3, r3, #5
 8018186:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801818a:	7993      	ldrb	r3, [r2, #6]
 801818c:	430b      	orrs	r3, r1
 801818e:	2105      	movs	r1, #5
 8018190:	005b      	lsls	r3, r3, #1
 8018192:	fb93 f3f1 	sdiv	r3, r3, r1
 8018196:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801819a:	440b      	add	r3, r1
 801819c:	e756      	b.n	801804c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801819e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80181a2:	4283      	cmp	r3, r0
 80181a4:	d809      	bhi.n	80181ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80181a6:	f240 60df 	movw	r0, #1759	; 0x6df
 80181aa:	4283      	cmp	r3, r0
 80181ac:	f4bf af7d 	bcs.w	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181b0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80181b4:	2b05      	cmp	r3, #5
 80181b6:	d8d4      	bhi.n	8018162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80181b8:	e777      	b.n	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181ba:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80181be:	4283      	cmp	r3, r0
 80181c0:	d09a      	beq.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80181c2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80181c6:	4283      	cmp	r3, r0
 80181c8:	e7ca      	b.n	8018160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80181ca:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80181ce:	d22b      	bcs.n	8018228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80181d0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80181d4:	4283      	cmp	r3, r0
 80181d6:	d28f      	bcs.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80181d8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80181dc:	4283      	cmp	r3, r0
 80181de:	d816      	bhi.n	801820e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80181e0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80181e4:	4283      	cmp	r3, r0
 80181e6:	f4bf af60 	bcs.w	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181ea:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80181ee:	4283      	cmp	r3, r0
 80181f0:	d80a      	bhi.n	8018208 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80181f2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80181f6:	4283      	cmp	r3, r0
 80181f8:	f4bf af57 	bcs.w	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181fc:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018200:	4283      	cmp	r3, r0
 8018202:	f43f af79 	beq.w	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018206:	e7ac      	b.n	8018162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018208:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801820c:	e7f8      	b.n	8018200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801820e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018212:	4283      	cmp	r3, r0
 8018214:	d802      	bhi.n	801821c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018216:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801821a:	e798      	b.n	801814e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801821c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018220:	4283      	cmp	r3, r0
 8018222:	f47f af42 	bne.w	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018226:	e767      	b.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018228:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801822c:	4283      	cmp	r3, r0
 801822e:	f43f af63 	beq.w	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018232:	d802      	bhi.n	801823a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018234:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018238:	e7f2      	b.n	8018220 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801823a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801823e:	4283      	cmp	r3, r0
 8018240:	d805      	bhi.n	801824e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018242:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018246:	4283      	cmp	r3, r0
 8018248:	f4ff af2f 	bcc.w	80180aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801824c:	e754      	b.n	80180f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801824e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018252:	4283      	cmp	r3, r0
 8018254:	e7af      	b.n	80181b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018256:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801825a:	4617      	mov	r7, r2
 801825c:	f102 0808 	add.w	r8, r2, #8
 8018260:	4666      	mov	r6, ip
 8018262:	6838      	ldr	r0, [r7, #0]
 8018264:	3708      	adds	r7, #8
 8018266:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801826a:	46e6      	mov	lr, ip
 801826c:	4547      	cmp	r7, r8
 801826e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018272:	46f4      	mov	ip, lr
 8018274:	d1f5      	bne.n	8018262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018276:	6838      	ldr	r0, [r7, #0]
 8018278:	f8ce 0000 	str.w	r0, [lr]
 801827c:	88b9      	ldrh	r1, [r7, #4]
 801827e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018282:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018286:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801828a:	d009      	beq.n	80182a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801828c:	7b51      	ldrb	r1, [r2, #13]
 801828e:	7992      	ldrb	r2, [r2, #6]
 8018290:	0149      	lsls	r1, r1, #5
 8018292:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018296:	4311      	orrs	r1, r2
 8018298:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801829c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80182a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80182a4:	b2ad      	uxth	r5, r5
 80182a6:	d00d      	beq.n	80182c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80182a8:	442b      	add	r3, r5
 80182aa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80182b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80182b8:	10db      	asrs	r3, r3, #3
 80182ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80182be:	4313      	orrs	r3, r2
 80182c0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80182c4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80182c8:	00cb      	lsls	r3, r1, #3
 80182ca:	064f      	lsls	r7, r1, #25
 80182cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80182d0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80182d4:	ea43 0302 	orr.w	r3, r3, r2
 80182d8:	bf44      	itt	mi
 80182da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80182de:	b21b      	sxthmi	r3, r3
 80182e0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80182e4:	1b5b      	subs	r3, r3, r5
 80182e6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80182ea:	4632      	mov	r2, r6
 80182ec:	e6f9      	b.n	80180e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80182ee:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80182f2:	4617      	mov	r7, r2
 80182f4:	f102 0908 	add.w	r9, r2, #8
 80182f8:	4666      	mov	r6, ip
 80182fa:	6838      	ldr	r0, [r7, #0]
 80182fc:	3708      	adds	r7, #8
 80182fe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018302:	46e0      	mov	r8, ip
 8018304:	454f      	cmp	r7, r9
 8018306:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801830a:	46c4      	mov	ip, r8
 801830c:	d1f5      	bne.n	80182fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801830e:	6838      	ldr	r0, [r7, #0]
 8018310:	f8c8 0000 	str.w	r0, [r8]
 8018314:	88b9      	ldrh	r1, [r7, #4]
 8018316:	f8a8 1004 	strh.w	r1, [r8, #4]
 801831a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801831e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018322:	d009      	beq.n	8018338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018324:	7b51      	ldrb	r1, [r2, #13]
 8018326:	7992      	ldrb	r2, [r2, #6]
 8018328:	0149      	lsls	r1, r1, #5
 801832a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801832e:	4311      	orrs	r1, r2
 8018330:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018334:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018338:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801833c:	d00e      	beq.n	801835c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801833e:	eba3 030e 	sub.w	r3, r3, lr
 8018342:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018346:	b29b      	uxth	r3, r3
 8018348:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801834c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018350:	10db      	asrs	r3, r3, #3
 8018352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018356:	4313      	orrs	r3, r2
 8018358:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801835c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018360:	00cb      	lsls	r3, r1, #3
 8018362:	0648      	lsls	r0, r1, #25
 8018364:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018368:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801836c:	ea43 0302 	orr.w	r3, r3, r2
 8018370:	bf44      	itt	mi
 8018372:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018376:	b21b      	sxthmi	r3, r3
 8018378:	1b5d      	subs	r5, r3, r5
 801837a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801837e:	e7b4      	b.n	80182ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018384:	461e      	mov	r6, r3
 8018386:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018388:	4604      	mov	r4, r0
 801838a:	4617      	mov	r7, r2
 801838c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018390:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018394:	f7ee ffc4 	bl	8007320 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018398:	4605      	mov	r5, r0
 801839a:	b918      	cbnz	r0, 80183a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801839c:	6030      	str	r0, [r6, #0]
 801839e:	4628      	mov	r0, r5
 80183a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	4601      	mov	r1, r0
 80183a8:	4638      	mov	r0, r7
 80183aa:	68db      	ldr	r3, [r3, #12]
 80183ac:	4798      	blx	r3
 80183ae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80183b2:	4602      	mov	r2, r0
 80183b4:	6030      	str	r0, [r6, #0]
 80183b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80183ba:	d213      	bcs.n	80183e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80183bc:	4643      	mov	r3, r8
 80183be:	4639      	mov	r1, r7
 80183c0:	4620      	mov	r0, r4
 80183c2:	f7ff fe39 	bl	8018038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80183c6:	6030      	str	r0, [r6, #0]
 80183c8:	6833      	ldr	r3, [r6, #0]
 80183ca:	b143      	cbz	r3, 80183de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80183cc:	7b5a      	ldrb	r2, [r3, #13]
 80183ce:	7a9b      	ldrb	r3, [r3, #10]
 80183d0:	0052      	lsls	r2, r2, #1
 80183d2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80183d6:	4313      	orrs	r3, r2
 80183d8:	bf0c      	ite	eq
 80183da:	2301      	moveq	r3, #1
 80183dc:	2300      	movne	r3, #0
 80183de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80183e2:	e7dc      	b.n	801839e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80183e4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	2b7f      	cmp	r3, #127	; 0x7f
 80183ec:	d804      	bhi.n	80183f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80183ee:	4639      	mov	r1, r7
 80183f0:	4620      	mov	r0, r4
 80183f2:	f7ff fd15 	bl	8017e20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80183f6:	e7e6      	b.n	80183c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80183f8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d0e3      	beq.n	80183c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018400:	f640 1302 	movw	r3, #2306	; 0x902
 8018404:	429d      	cmp	r5, r3
 8018406:	d1df      	bne.n	80183c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018408:	4601      	mov	r1, r0
 801840a:	4620      	mov	r0, r4
 801840c:	f7ff fcd8 	bl	8017dc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018410:	e7d9      	b.n	80183c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018412 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018412:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018416:	461e      	mov	r6, r3
 8018418:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801841a:	4604      	mov	r4, r0
 801841c:	4617      	mov	r7, r2
 801841e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018422:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018426:	f7ee ff7b 	bl	8007320 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801842a:	4605      	mov	r5, r0
 801842c:	b918      	cbnz	r0, 8018436 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801842e:	6030      	str	r0, [r6, #0]
 8018430:	4628      	mov	r0, r5
 8018432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	4601      	mov	r1, r0
 801843a:	4638      	mov	r0, r7
 801843c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018440:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018444:	47c8      	blx	r9
 8018446:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801844a:	4602      	mov	r2, r0
 801844c:	6030      	str	r0, [r6, #0]
 801844e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018452:	d213      	bcs.n	801847c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018454:	4643      	mov	r3, r8
 8018456:	4639      	mov	r1, r7
 8018458:	4620      	mov	r0, r4
 801845a:	f7ff fded 	bl	8018038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801845e:	6030      	str	r0, [r6, #0]
 8018460:	6833      	ldr	r3, [r6, #0]
 8018462:	b143      	cbz	r3, 8018476 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018464:	7b5a      	ldrb	r2, [r3, #13]
 8018466:	7a9b      	ldrb	r3, [r3, #10]
 8018468:	0052      	lsls	r2, r2, #1
 801846a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801846e:	4313      	orrs	r3, r2
 8018470:	bf0c      	ite	eq
 8018472:	2301      	moveq	r3, #1
 8018474:	2300      	movne	r3, #0
 8018476:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801847a:	e7d9      	b.n	8018430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801847c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018480:	b29b      	uxth	r3, r3
 8018482:	2b7f      	cmp	r3, #127	; 0x7f
 8018484:	d804      	bhi.n	8018490 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018486:	4639      	mov	r1, r7
 8018488:	4620      	mov	r0, r4
 801848a:	f7ff fcc9 	bl	8017e20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801848e:	e7e6      	b.n	801845e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018490:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018494:	2b00      	cmp	r3, #0
 8018496:	d0e3      	beq.n	8018460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018498:	f640 1302 	movw	r3, #2306	; 0x902
 801849c:	429d      	cmp	r5, r3
 801849e:	d1df      	bne.n	8018460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80184a0:	4601      	mov	r1, r0
 80184a2:	4620      	mov	r0, r4
 80184a4:	f7ff fc8c 	bl	8017dc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80184a8:	e7d9      	b.n	801845e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080184aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80184aa:	b510      	push	{r4, lr}
 80184ac:	4604      	mov	r4, r0
 80184ae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80184b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80184b4:	b1e1      	cbz	r1, 80184f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80184b6:	2b0a      	cmp	r3, #10
 80184b8:	d02d      	beq.n	8018516 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80184ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80184bc:	3901      	subs	r1, #1
 80184be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80184c2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80184c4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80184c8:	1c51      	adds	r1, r2, #1
 80184ca:	b289      	uxth	r1, r1
 80184cc:	2901      	cmp	r1, #1
 80184ce:	bf8a      	itet	hi
 80184d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80184d4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80184d6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80184d8:	1c5a      	adds	r2, r3, #1
 80184da:	8722      	strh	r2, [r4, #56]	; 0x38
 80184dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80184de:	4413      	add	r3, r2
 80184e0:	b29b      	uxth	r3, r3
 80184e2:	2b09      	cmp	r3, #9
 80184e4:	bf88      	it	hi
 80184e6:	3b0a      	subhi	r3, #10
 80184e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80184ec:	8458      	strh	r0, [r3, #34]	; 0x22
 80184ee:	e7de      	b.n	80184ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80184f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80184f2:	2b0a      	cmp	r3, #10
 80184f4:	d00f      	beq.n	8018516 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80184f6:	4620      	mov	r0, r4
 80184f8:	f7ff fc21 	bl	8017d3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80184fc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80184fe:	1c5a      	adds	r2, r3, #1
 8018500:	8722      	strh	r2, [r4, #56]	; 0x38
 8018502:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018504:	4413      	add	r3, r2
 8018506:	b29b      	uxth	r3, r3
 8018508:	2b09      	cmp	r3, #9
 801850a:	bf88      	it	hi
 801850c:	3b0a      	subhi	r3, #10
 801850e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018512:	8458      	strh	r0, [r3, #34]	; 0x22
 8018514:	e7ec      	b.n	80184f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018516:	bd10      	pop	{r4, pc}

08018518 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801851c:	4604      	mov	r4, r0
 801851e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018522:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018524:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018526:	3a01      	subs	r2, #1
 8018528:	8702      	strh	r2, [r0, #56]	; 0x38
 801852a:	1c5a      	adds	r2, r3, #1
 801852c:	b292      	uxth	r2, r2
 801852e:	2a09      	cmp	r2, #9
 8018530:	bf8a      	itet	hi
 8018532:	3b09      	subhi	r3, #9
 8018534:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018536:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018538:	f7ff ffb7 	bl	80184aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801853c:	8c23      	ldrh	r3, [r4, #32]
 801853e:	2b01      	cmp	r3, #1
 8018540:	bf9c      	itt	ls
 8018542:	3301      	addls	r3, #1
 8018544:	8423      	strhls	r3, [r4, #32]
 8018546:	8be3      	ldrh	r3, [r4, #30]
 8018548:	b90b      	cbnz	r3, 801854e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801854a:	2302      	movs	r3, #2
 801854c:	83e3      	strh	r3, [r4, #30]
 801854e:	8be3      	ldrh	r3, [r4, #30]
 8018550:	4628      	mov	r0, r5
 8018552:	3b01      	subs	r3, #1
 8018554:	b29b      	uxth	r3, r3
 8018556:	83e3      	strh	r3, [r4, #30]
 8018558:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801855c:	8365      	strh	r5, [r4, #26]
 801855e:	bd38      	pop	{r3, r4, r5, pc}

08018560 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018560:	428a      	cmp	r2, r1
 8018562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018566:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018568:	d932      	bls.n	80185d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801856a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801856c:	1a54      	subs	r4, r2, r1
 801856e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018572:	19ee      	adds	r6, r5, r7
 8018574:	fa1f fe84 	uxth.w	lr, r4
 8018578:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801857c:	3e01      	subs	r6, #1
 801857e:	b2b4      	uxth	r4, r6
 8018580:	eba4 090e 	sub.w	r9, r4, lr
 8018584:	fa1f f989 	uxth.w	r9, r9
 8018588:	2c09      	cmp	r4, #9
 801858a:	4626      	mov	r6, r4
 801858c:	bf88      	it	hi
 801858e:	f1a4 060a 	subhi.w	r6, r4, #10
 8018592:	f1bc 0f00 	cmp.w	ip, #0
 8018596:	f104 34ff 	add.w	r4, r4, #4294967295
 801859a:	bf08      	it	eq
 801859c:	f04f 0c02 	moveq.w	ip, #2
 80185a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80185a4:	b2a4      	uxth	r4, r4
 80185a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80185aa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80185ae:	454c      	cmp	r4, r9
 80185b0:	fa1f fc8c 	uxth.w	ip, ip
 80185b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80185b8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80185bc:	d1e4      	bne.n	8018588 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80185be:	eba5 050e 	sub.w	r5, r5, lr
 80185c2:	eb0e 0408 	add.w	r4, lr, r8
 80185c6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80185ca:	8705      	strh	r5, [r0, #56]	; 0x38
 80185cc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80185d0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80185d2:	250a      	movs	r5, #10
 80185d4:	1a64      	subs	r4, r4, r1
 80185d6:	4439      	add	r1, r7
 80185d8:	b289      	uxth	r1, r1
 80185da:	8704      	strh	r4, [r0, #56]	; 0x38
 80185dc:	2909      	cmp	r1, #9
 80185de:	bf88      	it	hi
 80185e0:	390a      	subhi	r1, #10
 80185e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80185e4:	b18a      	cbz	r2, 801860a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80185e6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80185e8:	3a01      	subs	r2, #1
 80185ea:	3101      	adds	r1, #1
 80185ec:	b292      	uxth	r2, r2
 80185ee:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80185f2:	8701      	strh	r1, [r0, #56]	; 0x38
 80185f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80185f6:	b901      	cbnz	r1, 80185fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80185f8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80185fa:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80185fc:	3901      	subs	r1, #1
 80185fe:	b289      	uxth	r1, r1
 8018600:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018602:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018606:	844c      	strh	r4, [r1, #34]	; 0x22
 8018608:	e7ec      	b.n	80185e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801860a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801860e:	f7ff bf4c 	b.w	80184aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018612 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018612:	b570      	push	{r4, r5, r6, lr}
 8018614:	2500      	movs	r5, #0
 8018616:	4295      	cmp	r5, r2
 8018618:	d011      	beq.n	801863e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801861a:	8bc4      	ldrh	r4, [r0, #30]
 801861c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018620:	4414      	add	r4, r2
 8018622:	3c01      	subs	r4, #1
 8018624:	1b64      	subs	r4, r4, r5
 8018626:	b2a4      	uxth	r4, r4
 8018628:	2c01      	cmp	r4, #1
 801862a:	bf88      	it	hi
 801862c:	3c02      	subhi	r4, #2
 801862e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018632:	8b64      	ldrh	r4, [r4, #26]
 8018634:	42b4      	cmp	r4, r6
 8018636:	d117      	bne.n	8018668 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018638:	3501      	adds	r5, #1
 801863a:	b2ad      	uxth	r5, r5
 801863c:	e7eb      	b.n	8018616 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801863e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018642:	2400      	movs	r4, #0
 8018644:	4413      	add	r3, r2
 8018646:	b2a2      	uxth	r2, r4
 8018648:	429a      	cmp	r2, r3
 801864a:	da0f      	bge.n	801866c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801864c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801864e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018652:	3401      	adds	r4, #1
 8018654:	4432      	add	r2, r6
 8018656:	b292      	uxth	r2, r2
 8018658:	2a09      	cmp	r2, #9
 801865a:	bf88      	it	hi
 801865c:	3a0a      	subhi	r2, #10
 801865e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018662:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018664:	42aa      	cmp	r2, r5
 8018666:	d0ee      	beq.n	8018646 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018668:	2000      	movs	r0, #0
 801866a:	bd70      	pop	{r4, r5, r6, pc}
 801866c:	2001      	movs	r0, #1
 801866e:	e7fc      	b.n	801866a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018670 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018674:	4605      	mov	r5, r0
 8018676:	4616      	mov	r6, r2
 8018678:	1c8c      	adds	r4, r1, #2
 801867a:	8809      	ldrh	r1, [r1, #0]
 801867c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018680:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018684:	42b3      	cmp	r3, r6
 8018686:	d124      	bne.n	80186d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018688:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801868c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018690:	f001 070f 	and.w	r7, r1, #15
 8018694:	4652      	mov	r2, sl
 8018696:	f8cd 8000 	str.w	r8, [sp]
 801869a:	464b      	mov	r3, r9
 801869c:	4621      	mov	r1, r4
 801869e:	4628      	mov	r0, r5
 80186a0:	f7ff ffb7 	bl	8018612 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80186a4:	4683      	mov	fp, r0
 80186a6:	b168      	cbz	r0, 80186c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80186a8:	eb0a 0109 	add.w	r1, sl, r9
 80186ac:	463a      	mov	r2, r7
 80186ae:	4628      	mov	r0, r5
 80186b0:	4441      	add	r1, r8
 80186b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80186b6:	4649      	mov	r1, r9
 80186b8:	f7ff ff52 	bl	8018560 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80186bc:	4658      	mov	r0, fp
 80186be:	b003      	add	sp, #12
 80186c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186c4:	eb07 010a 	add.w	r1, r7, sl
 80186c8:	4449      	add	r1, r9
 80186ca:	4441      	add	r1, r8
 80186cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80186d0:	e7d2      	b.n	8018678 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80186d2:	f04f 0b00 	mov.w	fp, #0
 80186d6:	e7f1      	b.n	80186bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080186d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80186d8:	b570      	push	{r4, r5, r6, lr}
 80186da:	8810      	ldrh	r0, [r2, #0]
 80186dc:	4298      	cmp	r0, r3
 80186de:	d817      	bhi.n	8018710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80186e0:	1e48      	subs	r0, r1, #1
 80186e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80186e6:	4298      	cmp	r0, r3
 80186e8:	d312      	bcc.n	8018710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80186ea:	2400      	movs	r4, #0
 80186ec:	428c      	cmp	r4, r1
 80186ee:	d20f      	bcs.n	8018710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80186f0:	1860      	adds	r0, r4, r1
 80186f2:	1040      	asrs	r0, r0, #1
 80186f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80186f8:	0085      	lsls	r5, r0, #2
 80186fa:	42b3      	cmp	r3, r6
 80186fc:	d902      	bls.n	8018704 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80186fe:	3001      	adds	r0, #1
 8018700:	b284      	uxth	r4, r0
 8018702:	e7f3      	b.n	80186ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018704:	d201      	bcs.n	801870a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018706:	b281      	uxth	r1, r0
 8018708:	e7f0      	b.n	80186ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801870a:	442a      	add	r2, r5
 801870c:	8850      	ldrh	r0, [r2, #2]
 801870e:	bd70      	pop	{r4, r5, r6, pc}
 8018710:	2000      	movs	r0, #0
 8018712:	e7fc      	b.n	801870e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018714 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018718:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801871a:	4604      	mov	r4, r0
 801871c:	260b      	movs	r6, #11
 801871e:	886f      	ldrh	r7, [r5, #2]
 8018720:	087f      	lsrs	r7, r7, #1
 8018722:	3e01      	subs	r6, #1
 8018724:	d013      	beq.n	801874e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018726:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018728:	462a      	mov	r2, r5
 801872a:	4639      	mov	r1, r7
 801872c:	4620      	mov	r0, r4
 801872e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018732:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018736:	4643      	mov	r3, r8
 8018738:	f7ff ffce 	bl	80186d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801873c:	b138      	cbz	r0, 801874e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801873e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018742:	4642      	mov	r2, r8
 8018744:	4620      	mov	r0, r4
 8018746:	f7ff ff93 	bl	8018670 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801874a:	2800      	cmp	r0, #0
 801874c:	d1e9      	bne.n	8018722 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801874e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018754:	b570      	push	{r4, r5, r6, lr}
 8018756:	694a      	ldr	r2, [r1, #20]
 8018758:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801875a:	684b      	ldr	r3, [r1, #4]
 801875c:	1b54      	subs	r4, r2, r5
 801875e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018760:	f000 8106 	beq.w	8018970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018764:	1b9b      	subs	r3, r3, r6
 8018766:	d003      	beq.n	8018770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018768:	4363      	muls	r3, r4
 801876a:	2210      	movs	r2, #16
 801876c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018770:	680c      	ldr	r4, [r1, #0]
 8018772:	698a      	ldr	r2, [r1, #24]
 8018774:	1b65      	subs	r5, r4, r5
 8018776:	f000 80fd 	beq.w	8018974 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801877a:	1b92      	subs	r2, r2, r6
 801877c:	d003      	beq.n	8018786 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801877e:	436a      	muls	r2, r5
 8018780:	2410      	movs	r4, #16
 8018782:	fb92 f2f4 	sdiv	r2, r2, r4
 8018786:	1a9b      	subs	r3, r3, r2
 8018788:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80189b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801878c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018790:	460a      	mov	r2, r1
 8018792:	ee07 3a90 	vmov	s15, r3
 8018796:	f100 040c 	add.w	r4, r0, #12
 801879a:	4603      	mov	r3, r0
 801879c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80187a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80187a8:	eeb1 6a43 	vneg.f32	s12, s6
 80187ac:	edd2 7a02 	vldr	s15, [r2, #8]
 80187b0:	3214      	adds	r2, #20
 80187b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80187b6:	ece3 6a01 	vstmia	r3!, {s13}
 80187ba:	429c      	cmp	r4, r3
 80187bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80187c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80187c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80187c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80187cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80187d0:	edc3 7a05 	vstr	s15, [r3, #20]
 80187d4:	d1ea      	bne.n	80187ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80187d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80187d8:	698b      	ldr	r3, [r1, #24]
 80187da:	edd0 4a02 	vldr	s9, [r0, #8]
 80187de:	1a9b      	subs	r3, r3, r2
 80187e0:	edd0 3a00 	vldr	s7, [r0]
 80187e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80187e8:	ee07 3a90 	vmov	s15, r3
 80187ec:	684b      	ldr	r3, [r1, #4]
 80187ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80187f2:	ed90 5a05 	vldr	s10, [r0, #20]
 80187f6:	1a9b      	subs	r3, r3, r2
 80187f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018800:	ed90 2a03 	vldr	s4, [r0, #12]
 8018804:	ee07 3a10 	vmov	s14, r3
 8018808:	edd0 5a04 	vldr	s11, [r0, #16]
 801880c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018810:	ed90 1a07 	vldr	s2, [r0, #28]
 8018814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018818:	edd0 2a06 	vldr	s5, [r0, #24]
 801881c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018820:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018824:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018828:	ee32 5a45 	vsub.f32	s10, s4, s10
 801882c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018830:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018834:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018838:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801883a:	694a      	ldr	r2, [r1, #20]
 801883c:	1b13      	subs	r3, r2, r4
 801883e:	ee07 3a10 	vmov	s14, r3
 8018842:	680b      	ldr	r3, [r1, #0]
 8018844:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018848:	1b1b      	subs	r3, r3, r4
 801884a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801884e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018852:	ee07 3a10 	vmov	s14, r3
 8018856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801885a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801885e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018862:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018866:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801886a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801886c:	698b      	ldr	r3, [r1, #24]
 801886e:	1a9b      	subs	r3, r3, r2
 8018870:	ee06 3a90 	vmov	s13, r3
 8018874:	684b      	ldr	r3, [r1, #4]
 8018876:	1a9b      	subs	r3, r3, r2
 8018878:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801887c:	ee07 3a10 	vmov	s14, r3
 8018880:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018888:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801888c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018890:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018894:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018898:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801889c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801889e:	694a      	ldr	r2, [r1, #20]
 80188a0:	1b13      	subs	r3, r2, r4
 80188a2:	ee07 3a10 	vmov	s14, r3
 80188a6:	680b      	ldr	r3, [r1, #0]
 80188a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188ac:	1b1b      	subs	r3, r3, r4
 80188ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80188b2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80188b6:	ee07 3a10 	vmov	s14, r3
 80188ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80188c2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80188c6:	edd0 5a08 	vldr	s11, [r0, #32]
 80188ca:	ee31 1a65 	vsub.f32	s2, s2, s11
 80188ce:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80188d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80188d6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80188da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80188dc:	698b      	ldr	r3, [r1, #24]
 80188de:	1a9b      	subs	r3, r3, r2
 80188e0:	ee07 3a10 	vmov	s14, r3
 80188e4:	684b      	ldr	r3, [r1, #4]
 80188e6:	1a9b      	subs	r3, r3, r2
 80188e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188ec:	ee01 3a90 	vmov	s3, r3
 80188f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80188f4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80188f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80188fc:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018900:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018904:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018908:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801890c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801890e:	694a      	ldr	r2, [r1, #20]
 8018910:	1b13      	subs	r3, r2, r4
 8018912:	ee03 3a10 	vmov	s6, r3
 8018916:	680b      	ldr	r3, [r1, #0]
 8018918:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801891c:	1b1b      	subs	r3, r3, r4
 801891e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018922:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018926:	ee03 3a10 	vmov	s6, r3
 801892a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801892e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018932:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018936:	ee25 6a86 	vmul.f32	s12, s11, s12
 801893a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801893e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018942:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018946:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801894e:	dd13      	ble.n	8018978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018954:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018958:	63c3      	str	r3, [r0, #60]	; 0x3c
 801895a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801895e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018966:	dd15      	ble.n	8018994 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801896c:	6403      	str	r3, [r0, #64]	; 0x40
 801896e:	bd70      	pop	{r4, r5, r6, pc}
 8018970:	4623      	mov	r3, r4
 8018972:	e6fd      	b.n	8018770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018974:	462a      	mov	r2, r5
 8018976:	e706      	b.n	8018786 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018978:	d502      	bpl.n	8018980 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801897a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801897e:	e7e9      	b.n	8018954 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018980:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018984:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018988:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018990:	dade      	bge.n	8018950 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018992:	e7f2      	b.n	801897a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018994:	d502      	bpl.n	801899c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018996:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801899a:	e7e7      	b.n	801896c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801899c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80189a0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80189a4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80189a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ac:	dadc      	bge.n	8018968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80189ae:	e7f2      	b.n	8018996 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80189b0:	3d800000 	.word	0x3d800000

080189b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80189b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189b8:	2714      	movs	r7, #20
 80189ba:	435f      	muls	r7, r3
 80189bc:	eb02 0c07 	add.w	ip, r2, r7
 80189c0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80189c4:	f115 0e0f 	adds.w	lr, r5, #15
 80189c8:	f100 80a2 	bmi.w	8018b10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80189cc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80189d0:	9c08      	ldr	r4, [sp, #32]
 80189d2:	2614      	movs	r6, #20
 80189d4:	f8c0 e014 	str.w	lr, [r0, #20]
 80189d8:	4366      	muls	r6, r4
 80189da:	eb02 0806 	add.w	r8, r2, r6
 80189de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80189e2:	f115 040f 	adds.w	r4, r5, #15
 80189e6:	f100 809f 	bmi.w	8018b28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80189ea:	1124      	asrs	r4, r4, #4
 80189ec:	eba4 040e 	sub.w	r4, r4, lr
 80189f0:	6184      	str	r4, [r0, #24]
 80189f2:	2c00      	cmp	r4, #0
 80189f4:	f000 808a 	beq.w	8018b0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80189f8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80189fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018a00:	5995      	ldr	r5, [r2, r6]
 8018a02:	eba4 0809 	sub.w	r8, r4, r9
 8018a06:	59d4      	ldr	r4, [r2, r7]
 8018a08:	eba5 0a04 	sub.w	sl, r5, r4
 8018a0c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018a10:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018a14:	fb0e fe05 	mul.w	lr, lr, r5
 8018a18:	fb0a ee19 	mls	lr, sl, r9, lr
 8018a1c:	fb08 e404 	mla	r4, r8, r4, lr
 8018a20:	3c01      	subs	r4, #1
 8018a22:	19a4      	adds	r4, r4, r6
 8018a24:	f100 808c 	bmi.w	8018b40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018a28:	fb94 fef6 	sdiv	lr, r4, r6
 8018a2c:	fb06 441e 	mls	r4, r6, lr, r4
 8018a30:	f8c0 e000 	str.w	lr, [r0]
 8018a34:	6104      	str	r4, [r0, #16]
 8018a36:	2d00      	cmp	r5, #0
 8018a38:	f2c0 8095 	blt.w	8018b66 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018a3c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018a40:	fb06 5514 	mls	r5, r6, r4, r5
 8018a44:	6044      	str	r4, [r0, #4]
 8018a46:	6085      	str	r5, [r0, #8]
 8018a48:	60c6      	str	r6, [r0, #12]
 8018a4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018a4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018a52:	6945      	ldr	r5, [r0, #20]
 8018a54:	59d2      	ldr	r2, [r2, r7]
 8018a56:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018a5a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8018b88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018a5e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018a62:	ee07 4a10 	vmov	s14, r4
 8018a66:	6804      	ldr	r4, [r0, #0]
 8018a68:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018a6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018a70:	ee07 2a90 	vmov	s15, r2
 8018a74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018a80:	edd3 6a00 	vldr	s13, [r3]
 8018a84:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018a88:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018a8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018a90:	edc0 6a07 	vstr	s13, [r0, #28]
 8018a94:	edd0 6a01 	vldr	s13, [r0, #4]
 8018a98:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018a9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018aa0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018aa4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018aa8:	ed80 6a08 	vstr	s12, [r0, #32]
 8018aac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018aae:	6242      	str	r2, [r0, #36]	; 0x24
 8018ab0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018ab4:	ed93 6a03 	vldr	s12, [r3, #12]
 8018ab8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018abc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018ac0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018ac4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8018ac8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018acc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018ad0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018ad4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018ad8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018ada:	6302      	str	r2, [r0, #48]	; 0x30
 8018adc:	ed93 6a06 	vldr	s12, [r3, #24]
 8018ae0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018ae4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018ae8:	eeb0 7a46 	vmov.f32	s14, s12
 8018aec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018af0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018af4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018af8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018afc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018b00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018b04:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8018b08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8018b0a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b10:	2410      	movs	r4, #16
 8018b12:	f1c5 0501 	rsb	r5, r5, #1
 8018b16:	fb9e fef4 	sdiv	lr, lr, r4
 8018b1a:	f015 050f 	ands.w	r5, r5, #15
 8018b1e:	bf18      	it	ne
 8018b20:	2501      	movne	r5, #1
 8018b22:	ebae 0e05 	sub.w	lr, lr, r5
 8018b26:	e753      	b.n	80189d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018b28:	f04f 0910 	mov.w	r9, #16
 8018b2c:	f1c5 0501 	rsb	r5, r5, #1
 8018b30:	fb94 f4f9 	sdiv	r4, r4, r9
 8018b34:	f015 050f 	ands.w	r5, r5, #15
 8018b38:	bf18      	it	ne
 8018b3a:	2501      	movne	r5, #1
 8018b3c:	1b64      	subs	r4, r4, r5
 8018b3e:	e755      	b.n	80189ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018b40:	4264      	negs	r4, r4
 8018b42:	fb94 fef6 	sdiv	lr, r4, r6
 8018b46:	f1ce 0800 	rsb	r8, lr, #0
 8018b4a:	fb06 441e 	mls	r4, r6, lr, r4
 8018b4e:	f8c0 8000 	str.w	r8, [r0]
 8018b52:	6104      	str	r4, [r0, #16]
 8018b54:	2c00      	cmp	r4, #0
 8018b56:	f43f af6e 	beq.w	8018a36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018b5a:	ea6f 0e0e 	mvn.w	lr, lr
 8018b5e:	1b34      	subs	r4, r6, r4
 8018b60:	f8c0 e000 	str.w	lr, [r0]
 8018b64:	e766      	b.n	8018a34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018b66:	426d      	negs	r5, r5
 8018b68:	fb95 f4f6 	sdiv	r4, r5, r6
 8018b6c:	f1c4 0e00 	rsb	lr, r4, #0
 8018b70:	fb06 5514 	mls	r5, r6, r4, r5
 8018b74:	f8c0 e004 	str.w	lr, [r0, #4]
 8018b78:	6085      	str	r5, [r0, #8]
 8018b7a:	2d00      	cmp	r5, #0
 8018b7c:	f43f af64 	beq.w	8018a48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018b80:	43e4      	mvns	r4, r4
 8018b82:	1b75      	subs	r5, r6, r5
 8018b84:	6044      	str	r4, [r0, #4]
 8018b86:	e75e      	b.n	8018a46 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018b88:	3d800000 	.word	0x3d800000

08018b8c <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018b8c:	4602      	mov	r2, r0
 8018b8e:	b148      	cbz	r0, 8018ba4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018b90:	2300      	movs	r3, #0
 8018b92:	b298      	uxth	r0, r3
 8018b94:	3301      	adds	r3, #1
 8018b96:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018b9a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018b9e:	2900      	cmp	r1, #0
 8018ba0:	d1f7      	bne.n	8018b92 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018ba2:	4770      	bx	lr
 8018ba4:	4770      	bx	lr

08018ba6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018ba6:	b530      	push	{r4, r5, lr}
 8018ba8:	4604      	mov	r4, r0
 8018baa:	b159      	cbz	r1, 8018bc4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018bac:	b148      	cbz	r0, 8018bc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018bae:	2300      	movs	r3, #0
 8018bb0:	b298      	uxth	r0, r3
 8018bb2:	4282      	cmp	r2, r0
 8018bb4:	d905      	bls.n	8018bc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018bb6:	5ccd      	ldrb	r5, [r1, r3]
 8018bb8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	2d00      	cmp	r5, #0
 8018bc0:	d1f6      	bne.n	8018bb0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018bc2:	bd30      	pop	{r4, r5, pc}
 8018bc4:	4608      	mov	r0, r1
 8018bc6:	e7fc      	b.n	8018bc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018bc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8018bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bca:	468c      	mov	ip, r1
 8018bcc:	b08b      	sub	sp, #44	; 0x2c
 8018bce:	2100      	movs	r1, #0
 8018bd0:	ae01      	add	r6, sp, #4
 8018bd2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018bd6:	211f      	movs	r1, #31
 8018bd8:	fbb0 f7f3 	udiv	r7, r0, r3
 8018bdc:	fb03 0517 	mls	r5, r3, r7, r0
 8018be0:	4638      	mov	r0, r7
 8018be2:	b2ec      	uxtb	r4, r5
 8018be4:	2d09      	cmp	r5, #9
 8018be6:	bfd4      	ite	le
 8018be8:	3430      	addle	r4, #48	; 0x30
 8018bea:	3457      	addgt	r4, #87	; 0x57
 8018bec:	b2e4      	uxtb	r4, r4
 8018bee:	558c      	strb	r4, [r1, r6]
 8018bf0:	1e4c      	subs	r4, r1, #1
 8018bf2:	b92f      	cbnz	r7, 8018c00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8018bf4:	4431      	add	r1, r6
 8018bf6:	4660      	mov	r0, ip
 8018bf8:	f7ff ffd5 	bl	8018ba6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018bfc:	b00b      	add	sp, #44	; 0x2c
 8018bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c00:	4621      	mov	r1, r4
 8018c02:	e7e9      	b.n	8018bd8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08018c04 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c06:	4607      	mov	r7, r0
 8018c08:	b08b      	sub	sp, #44	; 0x2c
 8018c0a:	4608      	mov	r0, r1
 8018c0c:	b341      	cbz	r1, 8018c60 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018c0e:	1e99      	subs	r1, r3, #2
 8018c10:	2922      	cmp	r1, #34	; 0x22
 8018c12:	d825      	bhi.n	8018c60 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018c14:	2100      	movs	r1, #0
 8018c16:	463c      	mov	r4, r7
 8018c18:	261f      	movs	r6, #31
 8018c1a:	f10d 0c04 	add.w	ip, sp, #4
 8018c1e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018c22:	1e71      	subs	r1, r6, #1
 8018c24:	fb94 fef3 	sdiv	lr, r4, r3
 8018c28:	fb03 441e 	mls	r4, r3, lr, r4
 8018c2c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018c30:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018c34:	b2ec      	uxtb	r4, r5
 8018c36:	2d09      	cmp	r5, #9
 8018c38:	bfd4      	ite	le
 8018c3a:	3430      	addle	r4, #48	; 0x30
 8018c3c:	3457      	addgt	r4, #87	; 0x57
 8018c3e:	b2e4      	uxtb	r4, r4
 8018c40:	f80c 4006 	strb.w	r4, [ip, r6]
 8018c44:	4674      	mov	r4, lr
 8018c46:	b96c      	cbnz	r4, 8018c64 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018c48:	2f00      	cmp	r7, #0
 8018c4a:	da05      	bge.n	8018c58 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8018c4e:	4419      	add	r1, r3
 8018c50:	232d      	movs	r3, #45	; 0x2d
 8018c52:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018c56:	1eb1      	subs	r1, r6, #2
 8018c58:	3101      	adds	r1, #1
 8018c5a:	4461      	add	r1, ip
 8018c5c:	f7ff ffa3 	bl	8018ba6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018c60:	b00b      	add	sp, #44	; 0x2c
 8018c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c64:	460e      	mov	r6, r1
 8018c66:	e7dc      	b.n	8018c22 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018c68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	b085      	sub	sp, #20
 8018c6e:	4691      	mov	r9, r2
 8018c70:	6802      	ldr	r2, [r0, #0]
 8018c72:	4688      	mov	r8, r1
 8018c74:	461c      	mov	r4, r3
 8018c76:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018c7a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018c7e:	4683      	mov	fp, r0
 8018c80:	4610      	mov	r0, r2
 8018c82:	9103      	str	r1, [sp, #12]
 8018c84:	9302      	str	r3, [sp, #8]
 8018c86:	9201      	str	r2, [sp, #4]
 8018c88:	f7ff ff80 	bl	8018b8c <_ZN8touchgfx7Unicode6strlenEPKt>
 8018c8c:	f1b8 0f00 	cmp.w	r8, #0
 8018c90:	bf0c      	ite	eq
 8018c92:	4684      	moveq	ip, r0
 8018c94:	f100 0c01 	addne.w	ip, r0, #1
 8018c98:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018c9c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018ca0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018ca2:	fa1f fc8c 	uxth.w	ip, ip
 8018ca6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018ca8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018cac:	9903      	ldr	r1, [sp, #12]
 8018cae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018cb2:	d041      	beq.n	8018d38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018cb4:	d834      	bhi.n	8018d20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018cb6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018cba:	d059      	beq.n	8018d70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018cbc:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018cc0:	d03a      	beq.n	8018d38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018cc2:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018cc6:	d034      	beq.n	8018d32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018cc8:	2400      	movs	r4, #0
 8018cca:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018cce:	3a01      	subs	r2, #1
 8018cd0:	b169      	cbz	r1, 8018cee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018cd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018cd4:	458c      	cmp	ip, r1
 8018cd6:	da09      	bge.n	8018cec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018cd8:	eba1 010c 	sub.w	r1, r1, ip
 8018cdc:	b289      	uxth	r1, r1
 8018cde:	b933      	cbnz	r3, 8018cee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018ce0:	2e00      	cmp	r6, #0
 8018ce2:	d051      	beq.n	8018d88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018ce4:	2800      	cmp	r0, #0
 8018ce6:	d04f      	beq.n	8018d88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018ce8:	440c      	add	r4, r1
 8018cea:	b2a4      	uxth	r4, r4
 8018cec:	2100      	movs	r1, #0
 8018cee:	682b      	ldr	r3, [r5, #0]
 8018cf0:	4293      	cmp	r3, r2
 8018cf2:	da07      	bge.n	8018d04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018cf4:	f1b8 0f00 	cmp.w	r8, #0
 8018cf8:	d004      	beq.n	8018d04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018cfa:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018cfe:	682b      	ldr	r3, [r5, #0]
 8018d00:	3301      	adds	r3, #1
 8018d02:	602b      	str	r3, [r5, #0]
 8018d04:	2730      	movs	r7, #48	; 0x30
 8018d06:	2c00      	cmp	r4, #0
 8018d08:	d04e      	beq.n	8018da8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018d0a:	682e      	ldr	r6, [r5, #0]
 8018d0c:	3c01      	subs	r4, #1
 8018d0e:	42b2      	cmp	r2, r6
 8018d10:	b2a4      	uxth	r4, r4
 8018d12:	dd49      	ble.n	8018da8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018d14:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018d18:	682b      	ldr	r3, [r5, #0]
 8018d1a:	3301      	adds	r3, #1
 8018d1c:	602b      	str	r3, [r5, #0]
 8018d1e:	e7f2      	b.n	8018d06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018d20:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8018d24:	d01d      	beq.n	8018d62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018d26:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8018d2a:	d002      	beq.n	8018d32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018d2c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8018d30:	e7c9      	b.n	8018cc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018d32:	4684      	mov	ip, r0
 8018d34:	f04f 0800 	mov.w	r8, #0
 8018d38:	2c00      	cmp	r4, #0
 8018d3a:	d0c6      	beq.n	8018cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018d3c:	b947      	cbnz	r7, 8018d50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018d3e:	2801      	cmp	r0, #1
 8018d40:	d106      	bne.n	8018d50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018d42:	8814      	ldrh	r4, [r2, #0]
 8018d44:	2c30      	cmp	r4, #48	; 0x30
 8018d46:	bf02      	ittt	eq
 8018d48:	3202      	addeq	r2, #2
 8018d4a:	4638      	moveq	r0, r7
 8018d4c:	f8cb 2000 	streq.w	r2, [fp]
 8018d50:	45bc      	cmp	ip, r7
 8018d52:	da14      	bge.n	8018d7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018d54:	b2bf      	uxth	r7, r7
 8018d56:	eba7 040c 	sub.w	r4, r7, ip
 8018d5a:	46bc      	mov	ip, r7
 8018d5c:	b2a4      	uxth	r4, r4
 8018d5e:	2600      	movs	r6, #0
 8018d60:	e7b3      	b.n	8018cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018d62:	4684      	mov	ip, r0
 8018d64:	b16c      	cbz	r4, 8018d82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018d66:	42b8      	cmp	r0, r7
 8018d68:	dd00      	ble.n	8018d6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018d6a:	b2b8      	uxth	r0, r7
 8018d6c:	2400      	movs	r4, #0
 8018d6e:	e003      	b.n	8018d78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018d70:	f04f 0c01 	mov.w	ip, #1
 8018d74:	2400      	movs	r4, #0
 8018d76:	4660      	mov	r0, ip
 8018d78:	4626      	mov	r6, r4
 8018d7a:	46a0      	mov	r8, r4
 8018d7c:	e7a5      	b.n	8018cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018d7e:	2400      	movs	r4, #0
 8018d80:	e7ed      	b.n	8018d5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018d82:	4626      	mov	r6, r4
 8018d84:	46a0      	mov	r8, r4
 8018d86:	e7a0      	b.n	8018cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018d88:	2900      	cmp	r1, #0
 8018d8a:	d0b0      	beq.n	8018cee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018d8c:	2720      	movs	r7, #32
 8018d8e:	682e      	ldr	r6, [r5, #0]
 8018d90:	2900      	cmp	r1, #0
 8018d92:	d0ac      	beq.n	8018cee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018d94:	3901      	subs	r1, #1
 8018d96:	4296      	cmp	r6, r2
 8018d98:	b289      	uxth	r1, r1
 8018d9a:	daa7      	bge.n	8018cec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018d9c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018da0:	682b      	ldr	r3, [r5, #0]
 8018da2:	3301      	adds	r3, #1
 8018da4:	602b      	str	r3, [r5, #0]
 8018da6:	e7f2      	b.n	8018d8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018da8:	b188      	cbz	r0, 8018dce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018daa:	682b      	ldr	r3, [r5, #0]
 8018dac:	3801      	subs	r0, #1
 8018dae:	429a      	cmp	r2, r3
 8018db0:	b280      	uxth	r0, r0
 8018db2:	dd0c      	ble.n	8018dce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018db4:	f8db 3000 	ldr.w	r3, [fp]
 8018db8:	1c9c      	adds	r4, r3, #2
 8018dba:	f8cb 4000 	str.w	r4, [fp]
 8018dbe:	881c      	ldrh	r4, [r3, #0]
 8018dc0:	682b      	ldr	r3, [r5, #0]
 8018dc2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018dc6:	682b      	ldr	r3, [r5, #0]
 8018dc8:	3301      	adds	r3, #1
 8018dca:	602b      	str	r3, [r5, #0]
 8018dcc:	e7ec      	b.n	8018da8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018dce:	2620      	movs	r6, #32
 8018dd0:	b151      	cbz	r1, 8018de8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018dd2:	6828      	ldr	r0, [r5, #0]
 8018dd4:	3901      	subs	r1, #1
 8018dd6:	4282      	cmp	r2, r0
 8018dd8:	b289      	uxth	r1, r1
 8018dda:	dd05      	ble.n	8018de8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018ddc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018de0:	682b      	ldr	r3, [r5, #0]
 8018de2:	3301      	adds	r3, #1
 8018de4:	602b      	str	r3, [r5, #0]
 8018de6:	e7f3      	b.n	8018dd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018de8:	b005      	add	sp, #20
 8018dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018df2:	2400      	movs	r4, #0
 8018df4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018df8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018dfc:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018e00:	8014      	strh	r4, [r2, #0]
 8018e02:	701c      	strb	r4, [r3, #0]
 8018e04:	f888 4000 	strb.w	r4, [r8]
 8018e08:	f88c 4000 	strb.w	r4, [ip]
 8018e0c:	f88e 4000 	strb.w	r4, [lr]
 8018e10:	703c      	strb	r4, [r7, #0]
 8018e12:	6804      	ldr	r4, [r0, #0]
 8018e14:	b1a4      	cbz	r4, 8018e40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018e16:	8824      	ldrh	r4, [r4, #0]
 8018e18:	f04f 0901 	mov.w	r9, #1
 8018e1c:	b314      	cbz	r4, 8018e64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018e1e:	2c2b      	cmp	r4, #43	; 0x2b
 8018e20:	d001      	beq.n	8018e26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018e22:	2c20      	cmp	r4, #32
 8018e24:	d110      	bne.n	8018e48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018e26:	8014      	strh	r4, [r2, #0]
 8018e28:	6804      	ldr	r4, [r0, #0]
 8018e2a:	b10c      	cbz	r4, 8018e30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018e2c:	3402      	adds	r4, #2
 8018e2e:	6004      	str	r4, [r0, #0]
 8018e30:	680c      	ldr	r4, [r1, #0]
 8018e32:	b10c      	cbz	r4, 8018e38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018e34:	3401      	adds	r4, #1
 8018e36:	600c      	str	r4, [r1, #0]
 8018e38:	6804      	ldr	r4, [r0, #0]
 8018e3a:	b17c      	cbz	r4, 8018e5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018e3c:	8824      	ldrh	r4, [r4, #0]
 8018e3e:	e7ed      	b.n	8018e1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018e40:	680c      	ldr	r4, [r1, #0]
 8018e42:	b17c      	cbz	r4, 8018e64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018e44:	7824      	ldrb	r4, [r4, #0]
 8018e46:	e7e7      	b.n	8018e18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018e48:	2c2d      	cmp	r4, #45	; 0x2d
 8018e4a:	d102      	bne.n	8018e52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018e4c:	f883 9000 	strb.w	r9, [r3]
 8018e50:	e7ea      	b.n	8018e28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018e52:	2c23      	cmp	r4, #35	; 0x23
 8018e54:	d107      	bne.n	8018e66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018e56:	f888 9000 	strb.w	r9, [r8]
 8018e5a:	e7e5      	b.n	8018e28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018e5c:	680c      	ldr	r4, [r1, #0]
 8018e5e:	b10c      	cbz	r4, 8018e64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018e60:	7824      	ldrb	r4, [r4, #0]
 8018e62:	e7db      	b.n	8018e1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018e64:	2400      	movs	r4, #0
 8018e66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018e6a:	2b09      	cmp	r3, #9
 8018e6c:	d901      	bls.n	8018e72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018e6e:	2c2a      	cmp	r4, #42	; 0x2a
 8018e70:	d122      	bne.n	8018eb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018e72:	2301      	movs	r3, #1
 8018e74:	2c30      	cmp	r4, #48	; 0x30
 8018e76:	f88e 3000 	strb.w	r3, [lr]
 8018e7a:	d10d      	bne.n	8018e98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018e7c:	f88c 3000 	strb.w	r3, [ip]
 8018e80:	6803      	ldr	r3, [r0, #0]
 8018e82:	b10b      	cbz	r3, 8018e88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018e84:	3302      	adds	r3, #2
 8018e86:	6003      	str	r3, [r0, #0]
 8018e88:	680b      	ldr	r3, [r1, #0]
 8018e8a:	b10b      	cbz	r3, 8018e90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018e8c:	3301      	adds	r3, #1
 8018e8e:	600b      	str	r3, [r1, #0]
 8018e90:	6803      	ldr	r3, [r0, #0]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d02f      	beq.n	8018ef6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018e96:	881c      	ldrh	r4, [r3, #0]
 8018e98:	2c2a      	cmp	r4, #42	; 0x2a
 8018e9a:	d135      	bne.n	8018f08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018ea0:	6033      	str	r3, [r6, #0]
 8018ea2:	6803      	ldr	r3, [r0, #0]
 8018ea4:	b10b      	cbz	r3, 8018eaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018ea6:	3302      	adds	r3, #2
 8018ea8:	6003      	str	r3, [r0, #0]
 8018eaa:	680b      	ldr	r3, [r1, #0]
 8018eac:	b10b      	cbz	r3, 8018eb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018eae:	3301      	adds	r3, #1
 8018eb0:	600b      	str	r3, [r1, #0]
 8018eb2:	6803      	ldr	r3, [r0, #0]
 8018eb4:	b31b      	cbz	r3, 8018efe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018eb6:	881c      	ldrh	r4, [r3, #0]
 8018eb8:	2c2e      	cmp	r4, #46	; 0x2e
 8018eba:	d11a      	bne.n	8018ef2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	703b      	strb	r3, [r7, #0]
 8018ec0:	6803      	ldr	r3, [r0, #0]
 8018ec2:	b10b      	cbz	r3, 8018ec8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018ec4:	3302      	adds	r3, #2
 8018ec6:	6003      	str	r3, [r0, #0]
 8018ec8:	680b      	ldr	r3, [r1, #0]
 8018eca:	b10b      	cbz	r3, 8018ed0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018ecc:	3301      	adds	r3, #1
 8018ece:	600b      	str	r3, [r1, #0]
 8018ed0:	6803      	ldr	r3, [r0, #0]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d036      	beq.n	8018f44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018ed6:	881b      	ldrh	r3, [r3, #0]
 8018ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8018eda:	d137      	bne.n	8018f4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018edc:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee0:	602b      	str	r3, [r5, #0]
 8018ee2:	6803      	ldr	r3, [r0, #0]
 8018ee4:	b10b      	cbz	r3, 8018eea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018ee6:	3302      	adds	r3, #2
 8018ee8:	6003      	str	r3, [r0, #0]
 8018eea:	680b      	ldr	r3, [r1, #0]
 8018eec:	b10b      	cbz	r3, 8018ef2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018eee:	3301      	adds	r3, #1
 8018ef0:	600b      	str	r3, [r1, #0]
 8018ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ef6:	680c      	ldr	r4, [r1, #0]
 8018ef8:	b134      	cbz	r4, 8018f08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018efa:	7824      	ldrb	r4, [r4, #0]
 8018efc:	e7cc      	b.n	8018e98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018efe:	680b      	ldr	r3, [r1, #0]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d0f6      	beq.n	8018ef2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018f04:	781c      	ldrb	r4, [r3, #0]
 8018f06:	e7d7      	b.n	8018eb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018f08:	2300      	movs	r3, #0
 8018f0a:	220a      	movs	r2, #10
 8018f0c:	6033      	str	r3, [r6, #0]
 8018f0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018f12:	fa1f f38c 	uxth.w	r3, ip
 8018f16:	2b09      	cmp	r3, #9
 8018f18:	d8ce      	bhi.n	8018eb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018f1a:	6833      	ldr	r3, [r6, #0]
 8018f1c:	fb02 c303 	mla	r3, r2, r3, ip
 8018f20:	6033      	str	r3, [r6, #0]
 8018f22:	6803      	ldr	r3, [r0, #0]
 8018f24:	b10b      	cbz	r3, 8018f2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8018f26:	3302      	adds	r3, #2
 8018f28:	6003      	str	r3, [r0, #0]
 8018f2a:	680b      	ldr	r3, [r1, #0]
 8018f2c:	b10b      	cbz	r3, 8018f32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018f2e:	3301      	adds	r3, #1
 8018f30:	600b      	str	r3, [r1, #0]
 8018f32:	6803      	ldr	r3, [r0, #0]
 8018f34:	b10b      	cbz	r3, 8018f3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8018f36:	881c      	ldrh	r4, [r3, #0]
 8018f38:	e7e9      	b.n	8018f0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018f3a:	680c      	ldr	r4, [r1, #0]
 8018f3c:	2c00      	cmp	r4, #0
 8018f3e:	d0e6      	beq.n	8018f0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018f40:	7824      	ldrb	r4, [r4, #0]
 8018f42:	e7e4      	b.n	8018f0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018f44:	680b      	ldr	r3, [r1, #0]
 8018f46:	b10b      	cbz	r3, 8018f4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	e7c5      	b.n	8018ed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	240a      	movs	r4, #10
 8018f50:	602a      	str	r2, [r5, #0]
 8018f52:	3b30      	subs	r3, #48	; 0x30
 8018f54:	682a      	ldr	r2, [r5, #0]
 8018f56:	b29e      	uxth	r6, r3
 8018f58:	2e09      	cmp	r6, #9
 8018f5a:	d813      	bhi.n	8018f84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8018f5c:	fb04 3302 	mla	r3, r4, r2, r3
 8018f60:	602b      	str	r3, [r5, #0]
 8018f62:	6803      	ldr	r3, [r0, #0]
 8018f64:	b10b      	cbz	r3, 8018f6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8018f66:	3302      	adds	r3, #2
 8018f68:	6003      	str	r3, [r0, #0]
 8018f6a:	680b      	ldr	r3, [r1, #0]
 8018f6c:	b10b      	cbz	r3, 8018f72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8018f6e:	3301      	adds	r3, #1
 8018f70:	600b      	str	r3, [r1, #0]
 8018f72:	6803      	ldr	r3, [r0, #0]
 8018f74:	b10b      	cbz	r3, 8018f7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8018f76:	881b      	ldrh	r3, [r3, #0]
 8018f78:	e7eb      	b.n	8018f52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018f7a:	680b      	ldr	r3, [r1, #0]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d0e8      	beq.n	8018f52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	e7e6      	b.n	8018f52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018f84:	2a06      	cmp	r2, #6
 8018f86:	bfa8      	it	ge
 8018f88:	2206      	movge	r2, #6
 8018f8a:	602a      	str	r2, [r5, #0]
 8018f8c:	e7b1      	b.n	8018ef2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018f8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018f8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f92:	b0a3      	sub	sp, #140	; 0x8c
 8018f94:	2600      	movs	r6, #0
 8018f96:	4607      	mov	r7, r0
 8018f98:	4688      	mov	r8, r1
 8018f9a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018f9e:	4631      	mov	r1, r6
 8018fa0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018fa2:	4648      	mov	r0, r9
 8018fa4:	960d      	str	r6, [sp, #52]	; 0x34
 8018fa6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018faa:	2242      	movs	r2, #66	; 0x42
 8018fac:	f00c ff56 	bl	8025e5c <memset>
 8018fb0:	b15f      	cbz	r7, 8018fca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8018fb2:	f108 3aff 	add.w	sl, r8, #4294967295
 8018fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018fba:	b152      	cbz	r2, 8018fd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018fbc:	8812      	ldrh	r2, [r2, #0]
 8018fbe:	b10a      	cbz	r2, 8018fc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018fc0:	459a      	cmp	sl, r3
 8018fc2:	dc2e      	bgt.n	8019022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018fca:	4638      	mov	r0, r7
 8018fcc:	b023      	add	sp, #140	; 0x8c
 8018fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	9a08      	ldr	r2, [sp, #32]
 8018fd4:	2a00      	cmp	r2, #0
 8018fd6:	d0f5      	beq.n	8018fc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018fd8:	7812      	ldrb	r2, [r2, #0]
 8018fda:	e7f0      	b.n	8018fbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018fdc:	2d00      	cmp	r5, #0
 8018fde:	d0ea      	beq.n	8018fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018fe0:	782a      	ldrb	r2, [r5, #0]
 8018fe2:	b142      	cbz	r2, 8018ff6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8018fe4:	2a25      	cmp	r2, #37	; 0x25
 8018fe6:	d001      	beq.n	8018fec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018fe8:	459a      	cmp	sl, r3
 8018fea:	dc08      	bgt.n	8018ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018fec:	f1bb 0f00 	cmp.w	fp, #0
 8018ff0:	d121      	bne.n	8019036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8018ff2:	2d00      	cmp	r5, #0
 8018ff4:	d0df      	beq.n	8018fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018ff6:	782a      	ldrb	r2, [r5, #0]
 8018ff8:	f04f 0b00 	mov.w	fp, #0
 8018ffc:	e01d      	b.n	801903a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018ffe:	f1bb 0f00 	cmp.w	fp, #0
 8019002:	d077      	beq.n	80190f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019004:	f8bb 2000 	ldrh.w	r2, [fp]
 8019008:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801900c:	f1bb 0f00 	cmp.w	fp, #0
 8019010:	d002      	beq.n	8019018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019012:	f10b 0202 	add.w	r2, fp, #2
 8019016:	9209      	str	r2, [sp, #36]	; 0x24
 8019018:	b10d      	cbz	r5, 801901e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801901a:	3501      	adds	r5, #1
 801901c:	9508      	str	r5, [sp, #32]
 801901e:	3301      	adds	r3, #1
 8019020:	930d      	str	r3, [sp, #52]	; 0x34
 8019022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019024:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8019028:	f1bb 0f00 	cmp.w	fp, #0
 801902c:	d0d6      	beq.n	8018fdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801902e:	f8bb 2000 	ldrh.w	r2, [fp]
 8019032:	2a00      	cmp	r2, #0
 8019034:	d1d6      	bne.n	8018fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8019036:	f8bb 2000 	ldrh.w	r2, [fp]
 801903a:	2a00      	cmp	r2, #0
 801903c:	d0bb      	beq.n	8018fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801903e:	459a      	cmp	sl, r3
 8019040:	ddb9      	ble.n	8018fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019042:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8019046:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801904a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801904e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8019052:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8019056:	960e      	str	r6, [sp, #56]	; 0x38
 8019058:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801905c:	960f      	str	r6, [sp, #60]	; 0x3c
 801905e:	f1bb 0f00 	cmp.w	fp, #0
 8019062:	d002      	beq.n	801906a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8019064:	f10b 0302 	add.w	r3, fp, #2
 8019068:	9309      	str	r3, [sp, #36]	; 0x24
 801906a:	b10d      	cbz	r5, 8019070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801906c:	1c6b      	adds	r3, r5, #1
 801906e:	9308      	str	r3, [sp, #32]
 8019070:	ab0f      	add	r3, sp, #60	; 0x3c
 8019072:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8019076:	a908      	add	r1, sp, #32
 8019078:	a809      	add	r0, sp, #36	; 0x24
 801907a:	9305      	str	r3, [sp, #20]
 801907c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019080:	9304      	str	r3, [sp, #16]
 8019082:	ab0e      	add	r3, sp, #56	; 0x38
 8019084:	9303      	str	r3, [sp, #12]
 8019086:	ab0c      	add	r3, sp, #48	; 0x30
 8019088:	9302      	str	r3, [sp, #8]
 801908a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801908e:	9301      	str	r3, [sp, #4]
 8019090:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8019094:	9300      	str	r3, [sp, #0]
 8019096:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801909a:	f7ff fea8 	bl	8018dee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801909e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	bfbf      	itttt	lt
 80190a4:	6823      	ldrlt	r3, [r4, #0]
 80190a6:	3404      	addlt	r4, #4
 80190a8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80190ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80190ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	bfbe      	ittt	lt
 80190b4:	6823      	ldrlt	r3, [r4, #0]
 80190b6:	3404      	addlt	r4, #4
 80190b8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80190bc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80190c0:	bfb8      	it	lt
 80190c2:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80190c4:	b1d9      	cbz	r1, 80190fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80190c6:	880b      	ldrh	r3, [r1, #0]
 80190c8:	2b69      	cmp	r3, #105	; 0x69
 80190ca:	d01f      	beq.n	801910c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80190cc:	d82f      	bhi.n	801912e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80190ce:	2b58      	cmp	r3, #88	; 0x58
 80190d0:	d01c      	beq.n	801910c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80190d2:	d818      	bhi.n	8019106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80190d4:	2b25      	cmp	r3, #37	; 0x25
 80190d6:	d034      	beq.n	8019142 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80190d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190da:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80190de:	f1bb 0f00 	cmp.w	fp, #0
 80190e2:	f000 80b7 	beq.w	8019254 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80190e6:	f8bb 5000 	ldrh.w	r5, [fp]
 80190ea:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80190ee:	3301      	adds	r3, #1
 80190f0:	930d      	str	r3, [sp, #52]	; 0x34
 80190f2:	e029      	b.n	8019148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80190f4:	b10d      	cbz	r5, 80190fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80190f6:	782a      	ldrb	r2, [r5, #0]
 80190f8:	e786      	b.n	8019008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80190fa:	462a      	mov	r2, r5
 80190fc:	e784      	b.n	8019008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80190fe:	2a00      	cmp	r2, #0
 8019100:	d0ea      	beq.n	80190d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019102:	7813      	ldrb	r3, [r2, #0]
 8019104:	e7e0      	b.n	80190c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8019106:	3b63      	subs	r3, #99	; 0x63
 8019108:	2b01      	cmp	r3, #1
 801910a:	d8e5      	bhi.n	80190d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801910c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8019110:	b329      	cbz	r1, 801915e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8019112:	880b      	ldrh	r3, [r1, #0]
 8019114:	2b69      	cmp	r3, #105	; 0x69
 8019116:	d063      	beq.n	80191e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019118:	d825      	bhi.n	8019166 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801911a:	2b63      	cmp	r3, #99	; 0x63
 801911c:	d038      	beq.n	8019190 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801911e:	2b64      	cmp	r3, #100	; 0x64
 8019120:	d05e      	beq.n	80191e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019122:	2b58      	cmp	r3, #88	; 0x58
 8019124:	d07a      	beq.n	801921c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8019126:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801912a:	4625      	mov	r5, r4
 801912c:	e036      	b.n	801919c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801912e:	2b73      	cmp	r3, #115	; 0x73
 8019130:	d0ec      	beq.n	801910c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019132:	d802      	bhi.n	801913a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8019134:	2b6f      	cmp	r3, #111	; 0x6f
 8019136:	d1cf      	bne.n	80190d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019138:	e7e8      	b.n	801910c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801913a:	2b75      	cmp	r3, #117	; 0x75
 801913c:	d0e6      	beq.n	801910c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801913e:	2b78      	cmp	r3, #120	; 0x78
 8019140:	e7f9      	b.n	8019136 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8019142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019144:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8019148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801914a:	b10b      	cbz	r3, 8019150 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801914c:	3302      	adds	r3, #2
 801914e:	9309      	str	r3, [sp, #36]	; 0x24
 8019150:	9b08      	ldr	r3, [sp, #32]
 8019152:	2b00      	cmp	r3, #0
 8019154:	f43f af2f 	beq.w	8018fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019158:	3301      	adds	r3, #1
 801915a:	9308      	str	r3, [sp, #32]
 801915c:	e72b      	b.n	8018fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801915e:	2a00      	cmp	r2, #0
 8019160:	d0e1      	beq.n	8019126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019162:	7813      	ldrb	r3, [r2, #0]
 8019164:	e7d6      	b.n	8019114 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8019166:	2b73      	cmp	r3, #115	; 0x73
 8019168:	d036      	beq.n	80191d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801916a:	d807      	bhi.n	801917c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801916c:	2b6f      	cmp	r3, #111	; 0x6f
 801916e:	d1da      	bne.n	8019126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019172:	1d25      	adds	r5, r4, #4
 8019174:	2308      	movs	r3, #8
 8019176:	eba8 0202 	sub.w	r2, r8, r2
 801917a:	e049      	b.n	8019210 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801917c:	2b75      	cmp	r3, #117	; 0x75
 801917e:	d042      	beq.n	8019206 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8019180:	2b78      	cmp	r3, #120	; 0x78
 8019182:	d1d0      	bne.n	8019126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019186:	1d25      	adds	r5, r4, #4
 8019188:	2310      	movs	r3, #16
 801918a:	eba8 0202 	sub.w	r2, r8, r2
 801918e:	e03f      	b.n	8019210 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8019190:	6823      	ldr	r3, [r4, #0]
 8019192:	1d25      	adds	r5, r4, #4
 8019194:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8019198:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801919c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801919e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d051      	beq.n	801924a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80191a6:	881a      	ldrh	r2, [r3, #0]
 80191a8:	a80d      	add	r0, sp, #52	; 0x34
 80191aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80191ae:	462c      	mov	r4, r5
 80191b0:	9005      	str	r0, [sp, #20]
 80191b2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80191b6:	9004      	str	r0, [sp, #16]
 80191b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80191ba:	9003      	str	r0, [sp, #12]
 80191bc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80191c0:	9002      	str	r0, [sp, #8]
 80191c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80191c4:	9001      	str	r0, [sp, #4]
 80191c6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80191ca:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80191ce:	9000      	str	r0, [sp, #0]
 80191d0:	a810      	add	r0, sp, #64	; 0x40
 80191d2:	f7ff fd49 	bl	8018c68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80191d6:	e7b7      	b.n	8019148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80191d8:	1d25      	adds	r5, r4, #4
 80191da:	6823      	ldr	r3, [r4, #0]
 80191dc:	9310      	str	r3, [sp, #64]	; 0x40
 80191de:	e7dd      	b.n	801919c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80191e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80191e2:	230a      	movs	r3, #10
 80191e4:	4649      	mov	r1, r9
 80191e6:	6820      	ldr	r0, [r4, #0]
 80191e8:	eba8 0202 	sub.w	r2, r8, r2
 80191ec:	1d25      	adds	r5, r4, #4
 80191ee:	b292      	uxth	r2, r2
 80191f0:	f7ff fd08 	bl	8018c04 <_ZN8touchgfx7Unicode4itoaElPtti>
 80191f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80191f8:	2b2d      	cmp	r3, #45	; 0x2d
 80191fa:	d1cf      	bne.n	801919c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80191fc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019202:	3302      	adds	r3, #2
 8019204:	e7ea      	b.n	80191dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8019206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019208:	1d25      	adds	r5, r4, #4
 801920a:	230a      	movs	r3, #10
 801920c:	eba8 0202 	sub.w	r2, r8, r2
 8019210:	b292      	uxth	r2, r2
 8019212:	4649      	mov	r1, r9
 8019214:	6820      	ldr	r0, [r4, #0]
 8019216:	f7ff fcd7 	bl	8018bc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801921a:	e7bf      	b.n	801919c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801921c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801921e:	2310      	movs	r3, #16
 8019220:	4649      	mov	r1, r9
 8019222:	6820      	ldr	r0, [r4, #0]
 8019224:	eba8 0202 	sub.w	r2, r8, r2
 8019228:	1d25      	adds	r5, r4, #4
 801922a:	b292      	uxth	r2, r2
 801922c:	f7ff fccc 	bl	8018bc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019230:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8019234:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019238:	2b00      	cmp	r3, #0
 801923a:	d0af      	beq.n	801919c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801923c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019240:	2919      	cmp	r1, #25
 8019242:	d8f7      	bhi.n	8019234 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019244:	3b20      	subs	r3, #32
 8019246:	8013      	strh	r3, [r2, #0]
 8019248:	e7f4      	b.n	8019234 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801924a:	9a08      	ldr	r2, [sp, #32]
 801924c:	2a00      	cmp	r2, #0
 801924e:	d0ab      	beq.n	80191a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019250:	7812      	ldrb	r2, [r2, #0]
 8019252:	e7a9      	b.n	80191a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019254:	2d00      	cmp	r5, #0
 8019256:	f43f af48 	beq.w	80190ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801925a:	782d      	ldrb	r5, [r5, #0]
 801925c:	e745      	b.n	80190ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801925e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801925e:	b507      	push	{r0, r1, r2, lr}
 8019260:	9300      	str	r3, [sp, #0]
 8019262:	4613      	mov	r3, r2
 8019264:	2200      	movs	r2, #0
 8019266:	f7ff fe92 	bl	8018f8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801926a:	b003      	add	sp, #12
 801926c:	f85d fb04 	ldr.w	pc, [sp], #4

08019270 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019270:	b40c      	push	{r2, r3}
 8019272:	b507      	push	{r0, r1, r2, lr}
 8019274:	ab04      	add	r3, sp, #16
 8019276:	f853 2b04 	ldr.w	r2, [r3], #4
 801927a:	9301      	str	r3, [sp, #4]
 801927c:	f7ff ffef 	bl	801925e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019280:	b003      	add	sp, #12
 8019282:	f85d eb04 	ldr.w	lr, [sp], #4
 8019286:	b002      	add	sp, #8
 8019288:	4770      	bx	lr
	...

0801928c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019290:	b0c3      	sub	sp, #268	; 0x10c
 8019292:	2600      	movs	r6, #0
 8019294:	4607      	mov	r7, r0
 8019296:	4689      	mov	r9, r1
 8019298:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801929c:	4631      	mov	r1, r6
 801929e:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 80192a2:	4640      	mov	r0, r8
 80192a4:	960c      	str	r6, [sp, #48]	; 0x30
 80192a6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80192aa:	22c8      	movs	r2, #200	; 0xc8
 80192ac:	f00c fdd6 	bl	8025e5c <memset>
 80192b0:	b17f      	cbz	r7, 80192d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x46>
 80192b2:	eddf 5aa3 	vldr	s11, [pc, #652]	; 8019540 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b4>
 80192b6:	f8df b294 	ldr.w	fp, [pc, #660]	; 801954c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 80192ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192be:	b162      	cbz	r2, 80192da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4e>
 80192c0:	8812      	ldrh	r2, [r2, #0]
 80192c2:	b11a      	cbz	r2, 80192cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 80192c4:	f109 31ff 	add.w	r1, r9, #4294967295
 80192c8:	4299      	cmp	r1, r3
 80192ca:	dc26      	bgt.n	801931a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 80192cc:	2200      	movs	r2, #0
 80192ce:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80192d2:	4638      	mov	r0, r7
 80192d4:	b043      	add	sp, #268	; 0x10c
 80192d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192da:	9a08      	ldr	r2, [sp, #32]
 80192dc:	2a00      	cmp	r2, #0
 80192de:	d0f5      	beq.n	80192cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 80192e0:	7812      	ldrb	r2, [r2, #0]
 80192e2:	e7ee      	b.n	80192c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36>
 80192e4:	2c00      	cmp	r4, #0
 80192e6:	d0e8      	beq.n	80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80192e8:	7822      	ldrb	r2, [r4, #0]
 80192ea:	b132      	cbz	r2, 80192fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6e>
 80192ec:	2a25      	cmp	r2, #37	; 0x25
 80192ee:	d001      	beq.n	80192f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x68>
 80192f0:	4299      	cmp	r1, r3
 80192f2:	dc05      	bgt.n	8019300 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 80192f4:	b9cd      	cbnz	r5, 801932a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9e>
 80192f6:	2c00      	cmp	r4, #0
 80192f8:	d0df      	beq.n	80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80192fa:	7822      	ldrb	r2, [r4, #0]
 80192fc:	2500      	movs	r5, #0
 80192fe:	e015      	b.n	801932c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xa0>
 8019300:	2d00      	cmp	r5, #0
 8019302:	d073      	beq.n	80193ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 8019304:	882a      	ldrh	r2, [r5, #0]
 8019306:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801930a:	b10d      	cbz	r5, 8019310 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x84>
 801930c:	3502      	adds	r5, #2
 801930e:	9509      	str	r5, [sp, #36]	; 0x24
 8019310:	b10c      	cbz	r4, 8019316 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 8019312:	3401      	adds	r4, #1
 8019314:	9408      	str	r4, [sp, #32]
 8019316:	3301      	adds	r3, #1
 8019318:	930c      	str	r3, [sp, #48]	; 0x30
 801931a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801931c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8019320:	2d00      	cmp	r5, #0
 8019322:	d0df      	beq.n	80192e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x58>
 8019324:	882a      	ldrh	r2, [r5, #0]
 8019326:	2a00      	cmp	r2, #0
 8019328:	d1e0      	bne.n	80192ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x60>
 801932a:	882a      	ldrh	r2, [r5, #0]
 801932c:	2a00      	cmp	r2, #0
 801932e:	d0c4      	beq.n	80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019330:	4299      	cmp	r1, r3
 8019332:	ddc2      	ble.n	80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8019334:	2300      	movs	r3, #0
 8019336:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801933a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801933e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019342:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019346:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801934a:	930d      	str	r3, [sp, #52]	; 0x34
 801934c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8019350:	930e      	str	r3, [sp, #56]	; 0x38
 8019352:	b10d      	cbz	r5, 8019358 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xcc>
 8019354:	1cab      	adds	r3, r5, #2
 8019356:	9309      	str	r3, [sp, #36]	; 0x24
 8019358:	b10c      	cbz	r4, 801935e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xd2>
 801935a:	1c63      	adds	r3, r4, #1
 801935c:	9308      	str	r3, [sp, #32]
 801935e:	ab0e      	add	r3, sp, #56	; 0x38
 8019360:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8019364:	a908      	add	r1, sp, #32
 8019366:	a809      	add	r0, sp, #36	; 0x24
 8019368:	9305      	str	r3, [sp, #20]
 801936a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801936e:	9304      	str	r3, [sp, #16]
 8019370:	ab0d      	add	r3, sp, #52	; 0x34
 8019372:	9303      	str	r3, [sp, #12]
 8019374:	ab0b      	add	r3, sp, #44	; 0x2c
 8019376:	9302      	str	r3, [sp, #8]
 8019378:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801937c:	9301      	str	r3, [sp, #4]
 801937e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8019382:	9300      	str	r3, [sp, #0]
 8019384:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8019388:	f7ff fd31 	bl	8018dee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801938c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801938e:	2b00      	cmp	r3, #0
 8019390:	da0b      	bge.n	80193aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11e>
 8019392:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8019396:	3601      	adds	r6, #1
 8019398:	edd3 7a00 	vldr	s15, [r3]
 801939c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193a0:	ee17 3a90 	vmov	r3, s15
 80193a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80193a8:	930d      	str	r3, [sp, #52]	; 0x34
 80193aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	da0b      	bge.n	80193c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13c>
 80193b0:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80193b4:	3601      	adds	r6, #1
 80193b6:	edd3 7a00 	vldr	s15, [r3]
 80193ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80193be:	ee17 3a90 	vmov	r3, s15
 80193c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80193c6:	930e      	str	r3, [sp, #56]	; 0x38
 80193c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193ca:	b1a3      	cbz	r3, 80193f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x16a>
 80193cc:	881a      	ldrh	r2, [r3, #0]
 80193ce:	2a25      	cmp	r2, #37	; 0x25
 80193d0:	d016      	beq.n	8019400 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x174>
 80193d2:	2a66      	cmp	r2, #102	; 0x66
 80193d4:	d01a      	beq.n	801940c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 80193d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193d8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80193dc:	2d00      	cmp	r5, #0
 80193de:	f000 80fd 	beq.w	80195dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x350>
 80193e2:	882c      	ldrh	r4, [r5, #0]
 80193e4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80193e8:	3301      	adds	r3, #1
 80193ea:	e00d      	b.n	8019408 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 80193ec:	b10c      	cbz	r4, 80193f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 80193ee:	7822      	ldrb	r2, [r4, #0]
 80193f0:	e789      	b.n	8019306 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 80193f2:	4622      	mov	r2, r4
 80193f4:	e787      	b.n	8019306 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 80193f6:	9b08      	ldr	r3, [sp, #32]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d0ec      	beq.n	80193d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x14a>
 80193fc:	781a      	ldrb	r2, [r3, #0]
 80193fe:	e7e6      	b.n	80193ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x142>
 8019400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019402:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019406:	3302      	adds	r3, #2
 8019408:	930c      	str	r3, [sp, #48]	; 0x30
 801940a:	e040      	b.n	801948e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x202>
 801940c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8019410:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8019414:	3601      	adds	r6, #1
 8019416:	edd3 7a00 	vldr	s15, [r3]
 801941a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801941e:	b923      	cbnz	r3, 801942a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19e>
 8019420:	2301      	movs	r3, #1
 8019422:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8019426:	2306      	movs	r3, #6
 8019428:	930e      	str	r3, [sp, #56]	; 0x38
 801942a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801942e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019432:	bf42      	ittt	mi
 8019434:	eef1 7a67 	vnegmi.f32	s15, s15
 8019438:	232d      	movmi	r3, #45	; 0x2d
 801943a:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801943e:	eeb0 7ae7 	vabs.f32	s14, s15
 8019442:	eeb4 7a65 	vcmp.f32	s14, s11
 8019446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801944a:	dd2b      	ble.n	80194a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 801944c:	2366      	movs	r3, #102	; 0x66
 801944e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8019452:	9311      	str	r3, [sp, #68]	; 0x44
 8019454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019456:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801945a:	2b00      	cmp	r3, #0
 801945c:	f000 80b8 	beq.w	80195d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x344>
 8019460:	881a      	ldrh	r2, [r3, #0]
 8019462:	a80c      	add	r0, sp, #48	; 0x30
 8019464:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8019468:	9005      	str	r0, [sp, #20]
 801946a:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801946e:	9004      	str	r0, [sp, #16]
 8019470:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019472:	9003      	str	r0, [sp, #12]
 8019474:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8019478:	9002      	str	r0, [sp, #8]
 801947a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801947c:	9001      	str	r0, [sp, #4]
 801947e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8019482:	e9cd 9706 	strd	r9, r7, [sp, #24]
 8019486:	9000      	str	r0, [sp, #0]
 8019488:	a80f      	add	r0, sp, #60	; 0x3c
 801948a:	f7ff fbed 	bl	8018c68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801948e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019490:	b10b      	cbz	r3, 8019496 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x20a>
 8019492:	3302      	adds	r3, #2
 8019494:	9309      	str	r3, [sp, #36]	; 0x24
 8019496:	9b08      	ldr	r3, [sp, #32]
 8019498:	2b00      	cmp	r3, #0
 801949a:	f43f af0e 	beq.w	80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 801949e:	3301      	adds	r3, #1
 80194a0:	9308      	str	r3, [sp, #32]
 80194a2:	e70a      	b.n	80192ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80194a4:	eef4 7a67 	vcmp.f32	s15, s15
 80194a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ac:	d60b      	bvs.n	80194c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23a>
 80194ae:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80194b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80194b4:	2300      	movs	r3, #0
 80194b6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8019544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 80194ba:	4283      	cmp	r3, r0
 80194bc:	da07      	bge.n	80194ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x242>
 80194be:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80194c2:	3301      	adds	r3, #1
 80194c4:	e7f9      	b.n	80194ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22e>
 80194c6:	4b20      	ldr	r3, [pc, #128]	; (8019548 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2bc>)
 80194c8:	9310      	str	r3, [sp, #64]	; 0x40
 80194ca:	236e      	movs	r3, #110	; 0x6e
 80194cc:	e7c1      	b.n	8019452 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c6>
 80194ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194d6:	eeb0 7a67 	vmov.f32	s14, s15
 80194da:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80194de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194e2:	da27      	bge.n	8019534 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a8>
 80194e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80194e6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80194ea:	2100      	movs	r1, #0
 80194ec:	eba9 0202 	sub.w	r2, r9, r2
 80194f0:	eef4 6ac5 	vcmpe.f32	s13, s10
 80194f4:	b28c      	uxth	r4, r1
 80194f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194fa:	db2a      	blt.n	8019552 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 80194fc:	1a53      	subs	r3, r2, r1
 80194fe:	2b00      	cmp	r3, #0
 8019500:	dd27      	ble.n	8019552 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 8019502:	2963      	cmp	r1, #99	; 0x63
 8019504:	d024      	beq.n	8019550 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 8019506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801950a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801950e:	ee17 3a10 	vmov	r3, s14
 8019512:	2b09      	cmp	r3, #9
 8019514:	bfa8      	it	ge
 8019516:	2309      	movge	r3, #9
 8019518:	ee07 3a10 	vmov	s14, r3
 801951c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8019520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019524:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 8019528:	3101      	adds	r1, #1
 801952a:	eee7 7a66 	vfms.f32	s15, s14, s13
 801952e:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8019532:	e7dd      	b.n	80194f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x264>
 8019534:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019538:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801953c:	e7cd      	b.n	80194da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24e>
 801953e:	bf00      	nop
 8019540:	7f7fffff 	.word	0x7f7fffff
 8019544:	3f000002 	.word	0x3f000002
 8019548:	0061006e 	.word	0x0061006e
 801954c:	006e0069 	.word	0x006e0069
 8019550:	460c      	mov	r4, r1
 8019552:	2a63      	cmp	r2, #99	; 0x63
 8019554:	bfd4      	ite	le
 8019556:	ebc4 0202 	rsble	r2, r4, r2
 801955a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801955e:	2a00      	cmp	r2, #0
 8019560:	dd31      	ble.n	80195c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33a>
 8019562:	4603      	mov	r3, r0
 8019564:	2501      	movs	r5, #1
 8019566:	210a      	movs	r1, #10
 8019568:	2b00      	cmp	r3, #0
 801956a:	dd0d      	ble.n	8019588 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fc>
 801956c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019570:	3b01      	subs	r3, #1
 8019572:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019576:	ee17 ca10 	vmov	ip, s14
 801957a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801957e:	fb01 c505 	mla	r5, r1, r5, ip
 8019582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019586:	e7ef      	b.n	8019568 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2dc>
 8019588:	2800      	cmp	r0, #0
 801958a:	f100 33ff 	add.w	r3, r0, #4294967295
 801958e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8019592:	bfac      	ite	ge
 8019594:	1a18      	subge	r0, r3, r0
 8019596:	4618      	movlt	r0, r3
 8019598:	b292      	uxth	r2, r2
 801959a:	230a      	movs	r3, #10
 801959c:	900e      	str	r0, [sp, #56]	; 0x38
 801959e:	eb08 0104 	add.w	r1, r8, r4
 80195a2:	4628      	mov	r0, r5
 80195a4:	f7ff fb2e 	bl	8018c04 <_ZN8touchgfx7Unicode4itoaElPtti>
 80195a8:	2d01      	cmp	r5, #1
 80195aa:	dc0a      	bgt.n	80195c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 80195ac:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	bf0c      	ite	eq
 80195b4:	2300      	moveq	r3, #0
 80195b6:	232e      	movne	r3, #46	; 0x2e
 80195b8:	aa42      	add	r2, sp, #264	; 0x108
 80195ba:	4414      	add	r4, r2
 80195bc:	f824 3cc8 	strh.w	r3, [r4, #-200]
 80195c0:	e748      	b.n	8019454 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c8>
 80195c2:	232e      	movs	r3, #46	; 0x2e
 80195c4:	e7f8      	b.n	80195b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 80195c6:	ab42      	add	r3, sp, #264	; 0x108
 80195c8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80195cc:	2300      	movs	r3, #0
 80195ce:	e7f5      	b.n	80195bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 80195d0:	9a08      	ldr	r2, [sp, #32]
 80195d2:	2a00      	cmp	r2, #0
 80195d4:	f43f af45 	beq.w	8019462 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 80195d8:	7812      	ldrb	r2, [r2, #0]
 80195da:	e742      	b.n	8019462 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 80195dc:	2c00      	cmp	r4, #0
 80195de:	f43f af01 	beq.w	80193e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 80195e2:	7824      	ldrb	r4, [r4, #0]
 80195e4:	e6fe      	b.n	80193e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 80195e6:	bf00      	nop

080195e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 80195e8:	b507      	push	{r0, r1, r2, lr}
 80195ea:	9300      	str	r3, [sp, #0]
 80195ec:	4613      	mov	r3, r2
 80195ee:	2200      	movs	r2, #0
 80195f0:	f7ff fe4c 	bl	801928c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 80195f4:	b003      	add	sp, #12
 80195f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080195fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80195fc:	4b01      	ldr	r3, [pc, #4]	; (8019604 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80195fe:	6018      	str	r0, [r3, #0]
 8019600:	4770      	bx	lr
 8019602:	bf00      	nop
 8019604:	20027c08 	.word	0x20027c08

08019608 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019608:	4b06      	ldr	r3, [pc, #24]	; (8019624 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801960a:	881a      	ldrh	r2, [r3, #0]
 801960c:	4282      	cmp	r2, r0
 801960e:	d807      	bhi.n	8019620 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019610:	4b05      	ldr	r3, [pc, #20]	; (8019628 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019612:	881b      	ldrh	r3, [r3, #0]
 8019614:	4413      	add	r3, r2
 8019616:	4298      	cmp	r0, r3
 8019618:	bfac      	ite	ge
 801961a:	2000      	movge	r0, #0
 801961c:	2001      	movlt	r0, #1
 801961e:	4770      	bx	lr
 8019620:	2000      	movs	r0, #0
 8019622:	4770      	bx	lr
 8019624:	20027c28 	.word	0x20027c28
 8019628:	20027c2c 	.word	0x20027c2c

0801962c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801962c:	b508      	push	{r3, lr}
 801962e:	4601      	mov	r1, r0
 8019630:	f7ff ffea 	bl	8019608 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019634:	b118      	cbz	r0, 801963e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019636:	4b02      	ldr	r3, [pc, #8]	; (8019640 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801963e:	bd08      	pop	{r3, pc}
 8019640:	20027c0c 	.word	0x20027c0c

08019644 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019646:	4c24      	ldr	r4, [pc, #144]	; (80196d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019648:	6823      	ldr	r3, [r4, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d042      	beq.n	80196d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801964e:	4a23      	ldr	r2, [pc, #140]	; (80196dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019650:	4d23      	ldr	r5, [pc, #140]	; (80196e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019652:	8811      	ldrh	r1, [r2, #0]
 8019654:	f8b5 c000 	ldrh.w	ip, [r5]
 8019658:	4822      	ldr	r0, [pc, #136]	; (80196e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801965a:	4461      	add	r1, ip
 801965c:	1c4a      	adds	r2, r1, #1
 801965e:	008f      	lsls	r7, r1, #2
 8019660:	f022 0201 	bic.w	r2, r2, #1
 8019664:	19de      	adds	r6, r3, r7
 8019666:	0412      	lsls	r2, r2, #16
 8019668:	6006      	str	r6, [r0, #0]
 801966a:	4e1f      	ldr	r6, [pc, #124]	; (80196e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801966c:	0c12      	lsrs	r2, r2, #16
 801966e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019672:	19da      	adds	r2, r3, r7
 8019674:	6032      	str	r2, [r6, #0]
 8019676:	220e      	movs	r2, #14
 8019678:	fb02 f20c 	mul.w	r2, r2, ip
 801967c:	3203      	adds	r2, #3
 801967e:	f022 0203 	bic.w	r2, r2, #3
 8019682:	443a      	add	r2, r7
 8019684:	4f19      	ldr	r7, [pc, #100]	; (80196ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019686:	4413      	add	r3, r2
 8019688:	603b      	str	r3, [r7, #0]
 801968a:	2300      	movs	r3, #0
 801968c:	4f18      	ldr	r7, [pc, #96]	; (80196f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801968e:	469c      	mov	ip, r3
 8019690:	803b      	strh	r3, [r7, #0]
 8019692:	4f18      	ldr	r7, [pc, #96]	; (80196f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019694:	683f      	ldr	r7, [r7, #0]
 8019696:	1aba      	subs	r2, r7, r2
 8019698:	4f17      	ldr	r7, [pc, #92]	; (80196f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801969a:	603a      	str	r2, [r7, #0]
 801969c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80196a0:	4a16      	ldr	r2, [pc, #88]	; (80196fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80196a2:	8013      	strh	r3, [r2, #0]
 80196a4:	428b      	cmp	r3, r1
 80196a6:	d10d      	bne.n	80196c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80196a8:	882d      	ldrh	r5, [r5, #0]
 80196aa:	2300      	movs	r3, #0
 80196ac:	6830      	ldr	r0, [r6, #0]
 80196ae:	240e      	movs	r4, #14
 80196b0:	429d      	cmp	r5, r3
 80196b2:	d90f      	bls.n	80196d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80196b4:	fb04 0203 	mla	r2, r4, r3, r0
 80196b8:	3301      	adds	r3, #1
 80196ba:	7b11      	ldrb	r1, [r2, #12]
 80196bc:	f36f 1145 	bfc	r1, #5, #1
 80196c0:	7311      	strb	r1, [r2, #12]
 80196c2:	e7f5      	b.n	80196b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80196c4:	6822      	ldr	r2, [r4, #0]
 80196c6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80196ca:	6802      	ldr	r2, [r0, #0]
 80196cc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80196d0:	3301      	adds	r3, #1
 80196d2:	e7e7      	b.n	80196a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80196d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196d6:	bf00      	nop
 80196d8:	20027c0c 	.word	0x20027c0c
 80196dc:	20027c28 	.word	0x20027c28
 80196e0:	20027c2c 	.word	0x20027c2c
 80196e4:	20027c20 	.word	0x20027c20
 80196e8:	20027c10 	.word	0x20027c10
 80196ec:	20027c18 	.word	0x20027c18
 80196f0:	20027c2a 	.word	0x20027c2a
 80196f4:	20027c14 	.word	0x20027c14
 80196f8:	20027c24 	.word	0x20027c24
 80196fc:	20027c1c 	.word	0x20027c1c

08019700 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019700:	4b06      	ldr	r3, [pc, #24]	; (801971c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	b943      	cbnz	r3, 8019718 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019706:	b139      	cbz	r1, 8019718 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019708:	4b05      	ldr	r3, [pc, #20]	; (8019720 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801970a:	801a      	strh	r2, [r3, #0]
 801970c:	4b05      	ldr	r3, [pc, #20]	; (8019724 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801970e:	6019      	str	r1, [r3, #0]
 8019710:	4b05      	ldr	r3, [pc, #20]	; (8019728 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019712:	6018      	str	r0, [r3, #0]
 8019714:	f7ff bf96 	b.w	8019644 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019718:	4770      	bx	lr
 801971a:	bf00      	nop
 801971c:	20027c18 	.word	0x20027c18
 8019720:	20027c2c 	.word	0x20027c2c
 8019724:	20027c14 	.word	0x20027c14
 8019728:	20027c0c 	.word	0x20027c0c

0801972c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801972c:	b470      	push	{r4, r5, r6}
 801972e:	4c07      	ldr	r4, [pc, #28]	; (801974c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019730:	4605      	mov	r5, r0
 8019732:	4610      	mov	r0, r2
 8019734:	9a03      	ldr	r2, [sp, #12]
 8019736:	6826      	ldr	r6, [r4, #0]
 8019738:	b936      	cbnz	r6, 8019748 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801973a:	6025      	str	r5, [r4, #0]
 801973c:	4c04      	ldr	r4, [pc, #16]	; (8019750 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801973e:	8021      	strh	r1, [r4, #0]
 8019740:	4619      	mov	r1, r3
 8019742:	bc70      	pop	{r4, r5, r6}
 8019744:	f7ff bfdc 	b.w	8019700 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019748:	bc70      	pop	{r4, r5, r6}
 801974a:	4770      	bx	lr
 801974c:	20027c30 	.word	0x20027c30
 8019750:	20027c28 	.word	0x20027c28

08019754 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019754:	4a12      	ldr	r2, [pc, #72]	; (80197a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019756:	8803      	ldrh	r3, [r0, #0]
 8019758:	8812      	ldrh	r2, [r2, #0]
 801975a:	4293      	cmp	r3, r2
 801975c:	d207      	bcs.n	801976e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801975e:	4a11      	ldr	r2, [pc, #68]	; (80197a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019760:	2114      	movs	r1, #20
 8019762:	6812      	ldr	r2, [r2, #0]
 8019764:	fb01 2303 	mla	r3, r1, r3, r2
 8019768:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801976c:	4770      	bx	lr
 801976e:	490e      	ldr	r1, [pc, #56]	; (80197a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019770:	8809      	ldrh	r1, [r1, #0]
 8019772:	4411      	add	r1, r2
 8019774:	428b      	cmp	r3, r1
 8019776:	da04      	bge.n	8019782 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019778:	1a9b      	subs	r3, r3, r2
 801977a:	4a0c      	ldr	r2, [pc, #48]	; (80197ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801977c:	210e      	movs	r1, #14
 801977e:	6812      	ldr	r2, [r2, #0]
 8019780:	e7f0      	b.n	8019764 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019782:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019786:	4293      	cmp	r3, r2
 8019788:	d108      	bne.n	801979c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801978a:	4b09      	ldr	r3, [pc, #36]	; (80197b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801978c:	781b      	ldrb	r3, [r3, #0]
 801978e:	b91b      	cbnz	r3, 8019798 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019790:	4b08      	ldr	r3, [pc, #32]	; (80197b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019792:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019796:	4770      	bx	lr
 8019798:	4b07      	ldr	r3, [pc, #28]	; (80197b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801979a:	e7fa      	b.n	8019792 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801979c:	2000      	movs	r0, #0
 801979e:	4770      	bx	lr
 80197a0:	20027c28 	.word	0x20027c28
 80197a4:	20027c30 	.word	0x20027c30
 80197a8:	20027c2c 	.word	0x20027c2c
 80197ac:	20027c10 	.word	0x20027c10
 80197b0:	20027b98 	.word	0x20027b98
 80197b4:	20027b9a 	.word	0x20027b9a
 80197b8:	20027b9c 	.word	0x20027b9c

080197bc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80197bc:	4a12      	ldr	r2, [pc, #72]	; (8019808 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80197be:	8803      	ldrh	r3, [r0, #0]
 80197c0:	8812      	ldrh	r2, [r2, #0]
 80197c2:	4293      	cmp	r3, r2
 80197c4:	d207      	bcs.n	80197d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80197c6:	4a11      	ldr	r2, [pc, #68]	; (801980c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80197c8:	2114      	movs	r1, #20
 80197ca:	6812      	ldr	r2, [r2, #0]
 80197cc:	fb01 2303 	mla	r3, r1, r3, r2
 80197d0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80197d4:	4770      	bx	lr
 80197d6:	490e      	ldr	r1, [pc, #56]	; (8019810 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80197d8:	8809      	ldrh	r1, [r1, #0]
 80197da:	4411      	add	r1, r2
 80197dc:	428b      	cmp	r3, r1
 80197de:	da04      	bge.n	80197ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80197e0:	1a9b      	subs	r3, r3, r2
 80197e2:	4a0c      	ldr	r2, [pc, #48]	; (8019814 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80197e4:	210e      	movs	r1, #14
 80197e6:	6812      	ldr	r2, [r2, #0]
 80197e8:	e7f0      	b.n	80197cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80197ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80197ee:	4293      	cmp	r3, r2
 80197f0:	d108      	bne.n	8019804 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80197f2:	4b09      	ldr	r3, [pc, #36]	; (8019818 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	b91b      	cbnz	r3, 8019800 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80197f8:	4b08      	ldr	r3, [pc, #32]	; (801981c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80197fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80197fe:	4770      	bx	lr
 8019800:	4b07      	ldr	r3, [pc, #28]	; (8019820 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019802:	e7fa      	b.n	80197fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019804:	2000      	movs	r0, #0
 8019806:	4770      	bx	lr
 8019808:	20027c28 	.word	0x20027c28
 801980c:	20027c30 	.word	0x20027c30
 8019810:	20027c2c 	.word	0x20027c2c
 8019814:	20027c10 	.word	0x20027c10
 8019818:	20027b98 	.word	0x20027b98
 801981c:	20027b9c 	.word	0x20027b9c
 8019820:	20027b9a 	.word	0x20027b9a

08019824 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019824:	4a1f      	ldr	r2, [pc, #124]	; (80198a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8019826:	b510      	push	{r4, lr}
 8019828:	880b      	ldrh	r3, [r1, #0]
 801982a:	8812      	ldrh	r2, [r2, #0]
 801982c:	4293      	cmp	r3, r2
 801982e:	d213      	bcs.n	8019858 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019830:	4a1d      	ldr	r2, [pc, #116]	; (80198a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8019832:	2114      	movs	r1, #20
 8019834:	6812      	ldr	r2, [r2, #0]
 8019836:	fb01 2303 	mla	r3, r1, r3, r2
 801983a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801983e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019842:	8a1a      	ldrh	r2, [r3, #16]
 8019844:	8a5b      	ldrh	r3, [r3, #18]
 8019846:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801984a:	8004      	strh	r4, [r0, #0]
 801984c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019850:	8041      	strh	r1, [r0, #2]
 8019852:	8082      	strh	r2, [r0, #4]
 8019854:	80c3      	strh	r3, [r0, #6]
 8019856:	e00e      	b.n	8019876 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019858:	4914      	ldr	r1, [pc, #80]	; (80198ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801985a:	8809      	ldrh	r1, [r1, #0]
 801985c:	4411      	add	r1, r2
 801985e:	428b      	cmp	r3, r1
 8019860:	da0a      	bge.n	8019878 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8019862:	1a9b      	subs	r3, r3, r2
 8019864:	4a12      	ldr	r2, [pc, #72]	; (80198b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019866:	210e      	movs	r1, #14
 8019868:	6812      	ldr	r2, [r2, #0]
 801986a:	fb01 2303 	mla	r3, r1, r3, r2
 801986e:	681a      	ldr	r2, [r3, #0]
 8019870:	6002      	str	r2, [r0, #0]
 8019872:	685a      	ldr	r2, [r3, #4]
 8019874:	6042      	str	r2, [r0, #4]
 8019876:	bd10      	pop	{r4, pc}
 8019878:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801987c:	4293      	cmp	r3, r2
 801987e:	d10b      	bne.n	8019898 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8019880:	4b0c      	ldr	r3, [pc, #48]	; (80198b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019882:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019886:	4b0c      	ldr	r3, [pc, #48]	; (80198b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019888:	8081      	strh	r1, [r0, #4]
 801988a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801988e:	2300      	movs	r3, #0
 8019890:	80c2      	strh	r2, [r0, #6]
 8019892:	8003      	strh	r3, [r0, #0]
 8019894:	8043      	strh	r3, [r0, #2]
 8019896:	e7ee      	b.n	8019876 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019898:	2300      	movs	r3, #0
 801989a:	8003      	strh	r3, [r0, #0]
 801989c:	8043      	strh	r3, [r0, #2]
 801989e:	8083      	strh	r3, [r0, #4]
 80198a0:	e7d8      	b.n	8019854 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80198a2:	bf00      	nop
 80198a4:	20027c28 	.word	0x20027c28
 80198a8:	20027c30 	.word	0x20027c30
 80198ac:	20027c2c 	.word	0x20027c2c
 80198b0:	20027c10 	.word	0x20027c10
 80198b4:	20027b94 	.word	0x20027b94
 80198b8:	20027b96 	.word	0x20027b96

080198bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80198bc:	4a17      	ldr	r2, [pc, #92]	; (801991c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80198be:	8803      	ldrh	r3, [r0, #0]
 80198c0:	8812      	ldrh	r2, [r2, #0]
 80198c2:	4293      	cmp	r3, r2
 80198c4:	d213      	bcs.n	80198ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80198c6:	4a16      	ldr	r2, [pc, #88]	; (8019920 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80198c8:	2114      	movs	r1, #20
 80198ca:	6812      	ldr	r2, [r2, #0]
 80198cc:	fb01 2303 	mla	r3, r1, r3, r2
 80198d0:	8a1a      	ldrh	r2, [r3, #16]
 80198d2:	8919      	ldrh	r1, [r3, #8]
 80198d4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80198d8:	428a      	cmp	r2, r1
 80198da:	db1d      	blt.n	8019918 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80198dc:	8a58      	ldrh	r0, [r3, #18]
 80198de:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80198e2:	895b      	ldrh	r3, [r3, #10]
 80198e4:	4298      	cmp	r0, r3
 80198e6:	bfac      	ite	ge
 80198e8:	2000      	movge	r0, #0
 80198ea:	2001      	movlt	r0, #1
 80198ec:	4770      	bx	lr
 80198ee:	490d      	ldr	r1, [pc, #52]	; (8019924 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80198f0:	8809      	ldrh	r1, [r1, #0]
 80198f2:	4411      	add	r1, r2
 80198f4:	428b      	cmp	r3, r1
 80198f6:	da0d      	bge.n	8019914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80198f8:	1a9b      	subs	r3, r3, r2
 80198fa:	4a0b      	ldr	r2, [pc, #44]	; (8019928 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80198fc:	210e      	movs	r1, #14
 80198fe:	6812      	ldr	r2, [r2, #0]
 8019900:	fb01 2303 	mla	r3, r1, r3, r2
 8019904:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019908:	891a      	ldrh	r2, [r3, #8]
 801990a:	4291      	cmp	r1, r2
 801990c:	db04      	blt.n	8019918 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801990e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019912:	e7e6      	b.n	80198e2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8019914:	2000      	movs	r0, #0
 8019916:	4770      	bx	lr
 8019918:	2001      	movs	r0, #1
 801991a:	4770      	bx	lr
 801991c:	20027c28 	.word	0x20027c28
 8019920:	20027c30 	.word	0x20027c30
 8019924:	20027c2c 	.word	0x20027c2c
 8019928:	20027c10 	.word	0x20027c10

0801992c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801992c:	4a12      	ldr	r2, [pc, #72]	; (8019978 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801992e:	8803      	ldrh	r3, [r0, #0]
 8019930:	8811      	ldrh	r1, [r2, #0]
 8019932:	428b      	cmp	r3, r1
 8019934:	d20b      	bcs.n	801994e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019936:	4a11      	ldr	r2, [pc, #68]	; (801997c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019938:	6812      	ldr	r2, [r2, #0]
 801993a:	b112      	cbz	r2, 8019942 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801993c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019940:	b9c0      	cbnz	r0, 8019974 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8019942:	4a0f      	ldr	r2, [pc, #60]	; (8019980 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019944:	6811      	ldr	r1, [r2, #0]
 8019946:	2214      	movs	r2, #20
 8019948:	4353      	muls	r3, r2
 801994a:	58c8      	ldr	r0, [r1, r3]
 801994c:	4770      	bx	lr
 801994e:	4a0d      	ldr	r2, [pc, #52]	; (8019984 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019950:	8812      	ldrh	r2, [r2, #0]
 8019952:	440a      	add	r2, r1
 8019954:	4293      	cmp	r3, r2
 8019956:	da04      	bge.n	8019962 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019958:	4a08      	ldr	r2, [pc, #32]	; (801997c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801995a:	6812      	ldr	r2, [r2, #0]
 801995c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019960:	4770      	bx	lr
 8019962:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019966:	4293      	cmp	r3, r2
 8019968:	d103      	bne.n	8019972 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801996a:	4b07      	ldr	r3, [pc, #28]	; (8019988 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019970:	4770      	bx	lr
 8019972:	2000      	movs	r0, #0
 8019974:	4770      	bx	lr
 8019976:	bf00      	nop
 8019978:	20027c28 	.word	0x20027c28
 801997c:	20027c0c 	.word	0x20027c0c
 8019980:	20027c30 	.word	0x20027c30
 8019984:	20027c2c 	.word	0x20027c2c
 8019988:	20027ba0 	.word	0x20027ba0

0801998c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801998c:	4b24      	ldr	r3, [pc, #144]	; (8019a20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801998e:	8802      	ldrh	r2, [r0, #0]
 8019990:	8818      	ldrh	r0, [r3, #0]
 8019992:	4282      	cmp	r2, r0
 8019994:	d221      	bcs.n	80199da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8019996:	4b23      	ldr	r3, [pc, #140]	; (8019a24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019998:	6819      	ldr	r1, [r3, #0]
 801999a:	2314      	movs	r3, #20
 801999c:	fb03 1302 	mla	r3, r3, r2, r1
 80199a0:	6858      	ldr	r0, [r3, #4]
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d03a      	beq.n	8019a1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80199a6:	4920      	ldr	r1, [pc, #128]	; (8019a28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80199a8:	6809      	ldr	r1, [r1, #0]
 80199aa:	2900      	cmp	r1, #0
 80199ac:	d036      	beq.n	8019a1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80199ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80199b2:	2900      	cmp	r1, #0
 80199b4:	d032      	beq.n	8019a1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80199b6:	891a      	ldrh	r2, [r3, #8]
 80199b8:	8958      	ldrh	r0, [r3, #10]
 80199ba:	4350      	muls	r0, r2
 80199bc:	7c5a      	ldrb	r2, [r3, #17]
 80199be:	7cdb      	ldrb	r3, [r3, #19]
 80199c0:	0952      	lsrs	r2, r2, #5
 80199c2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80199c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80199ca:	2b0b      	cmp	r3, #11
 80199cc:	bf18      	it	ne
 80199ce:	0040      	lslne	r0, r0, #1
 80199d0:	3003      	adds	r0, #3
 80199d2:	f020 0003 	bic.w	r0, r0, #3
 80199d6:	4408      	add	r0, r1
 80199d8:	4770      	bx	lr
 80199da:	4b14      	ldr	r3, [pc, #80]	; (8019a2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80199dc:	881b      	ldrh	r3, [r3, #0]
 80199de:	4403      	add	r3, r0
 80199e0:	429a      	cmp	r2, r3
 80199e2:	da1a      	bge.n	8019a1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80199e4:	4b12      	ldr	r3, [pc, #72]	; (8019a30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80199e6:	1a10      	subs	r0, r2, r0
 80199e8:	210e      	movs	r1, #14
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	fb01 3000 	mla	r0, r1, r0, r3
 80199f0:	7b03      	ldrb	r3, [r0, #12]
 80199f2:	f003 031f 	and.w	r3, r3, #31
 80199f6:	2b0b      	cmp	r3, #11
 80199f8:	d10b      	bne.n	8019a12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80199fa:	8903      	ldrh	r3, [r0, #8]
 80199fc:	8940      	ldrh	r0, [r0, #10]
 80199fe:	4358      	muls	r0, r3
 8019a00:	4b09      	ldr	r3, [pc, #36]	; (8019a28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019a02:	3003      	adds	r0, #3
 8019a04:	6819      	ldr	r1, [r3, #0]
 8019a06:	f020 0303 	bic.w	r3, r0, #3
 8019a0a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019a0e:	4418      	add	r0, r3
 8019a10:	4770      	bx	lr
 8019a12:	2b0d      	cmp	r3, #13
 8019a14:	d101      	bne.n	8019a1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019a16:	300d      	adds	r0, #13
 8019a18:	4770      	bx	lr
 8019a1a:	2000      	movs	r0, #0
 8019a1c:	4770      	bx	lr
 8019a1e:	bf00      	nop
 8019a20:	20027c28 	.word	0x20027c28
 8019a24:	20027c30 	.word	0x20027c30
 8019a28:	20027c0c 	.word	0x20027c0c
 8019a2c:	20027c2c 	.word	0x20027c2c
 8019a30:	20027c10 	.word	0x20027c10

08019a34 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019a34:	4a17      	ldr	r2, [pc, #92]	; (8019a94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019a36:	b510      	push	{r4, lr}
 8019a38:	8803      	ldrh	r3, [r0, #0]
 8019a3a:	8812      	ldrh	r2, [r2, #0]
 8019a3c:	4293      	cmp	r3, r2
 8019a3e:	d20c      	bcs.n	8019a5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019a40:	4a15      	ldr	r2, [pc, #84]	; (8019a98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019a42:	2114      	movs	r1, #20
 8019a44:	6812      	ldr	r2, [r2, #0]
 8019a46:	fb01 2303 	mla	r3, r1, r3, r2
 8019a4a:	7c58      	ldrb	r0, [r3, #17]
 8019a4c:	0942      	lsrs	r2, r0, #5
 8019a4e:	7cd8      	ldrb	r0, [r3, #19]
 8019a50:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019a54:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019a58:	bd10      	pop	{r4, pc}
 8019a5a:	4910      	ldr	r1, [pc, #64]	; (8019a9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019a5c:	8809      	ldrh	r1, [r1, #0]
 8019a5e:	4411      	add	r1, r2
 8019a60:	428b      	cmp	r3, r1
 8019a62:	da09      	bge.n	8019a78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019a64:	1a9b      	subs	r3, r3, r2
 8019a66:	4a0e      	ldr	r2, [pc, #56]	; (8019aa0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019a68:	210e      	movs	r1, #14
 8019a6a:	6812      	ldr	r2, [r2, #0]
 8019a6c:	fb01 2303 	mla	r3, r1, r3, r2
 8019a70:	7b18      	ldrb	r0, [r3, #12]
 8019a72:	f000 001f 	and.w	r0, r0, #31
 8019a76:	e7ef      	b.n	8019a58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019a78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d106      	bne.n	8019a8e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019a80:	f7f6 fe78 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 8019a84:	6803      	ldr	r3, [r0, #0]
 8019a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a8c:	4718      	bx	r3
 8019a8e:	2000      	movs	r0, #0
 8019a90:	e7e2      	b.n	8019a58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019a92:	bf00      	nop
 8019a94:	20027c28 	.word	0x20027c28
 8019a98:	20027c30 	.word	0x20027c30
 8019a9c:	20027c2c 	.word	0x20027c2c
 8019aa0:	20027c10 	.word	0x20027c10

08019aa4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019aa4:	2010      	movs	r0, #16
 8019aa6:	4770      	bx	lr

08019aa8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019aa8:	2000      	movs	r0, #0
 8019aaa:	4770      	bx	lr

08019aac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8019aac:	4b02      	ldr	r3, [pc, #8]	; (8019ab8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8019aae:	8818      	ldrh	r0, [r3, #0]
 8019ab0:	0040      	lsls	r0, r0, #1
 8019ab2:	b280      	uxth	r0, r0
 8019ab4:	4770      	bx	lr
 8019ab6:	bf00      	nop
 8019ab8:	20027b9a 	.word	0x20027b9a

08019abc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019abc:	2bff      	cmp	r3, #255	; 0xff
 8019abe:	d050      	beq.n	8019b62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019ac0:	2a0b      	cmp	r2, #11
 8019ac2:	d04a      	beq.n	8019b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019ac4:	d80e      	bhi.n	8019ae4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019ac6:	2a03      	cmp	r2, #3
 8019ac8:	d03f      	beq.n	8019b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019aca:	d804      	bhi.n	8019ad6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019acc:	2a01      	cmp	r2, #1
 8019ace:	d03e      	beq.n	8019b4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019ad0:	d93f      	bls.n	8019b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019ad2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019ad4:	4770      	bx	lr
 8019ad6:	2a09      	cmp	r2, #9
 8019ad8:	d03f      	beq.n	8019b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019ada:	d83c      	bhi.n	8019b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019adc:	2a08      	cmp	r2, #8
 8019ade:	d03a      	beq.n	8019b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019ae0:	2000      	movs	r0, #0
 8019ae2:	4770      	bx	lr
 8019ae4:	2a2f      	cmp	r2, #47	; 0x2f
 8019ae6:	d024      	beq.n	8019b32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019ae8:	d80d      	bhi.n	8019b06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019aea:	2a2d      	cmp	r2, #45	; 0x2d
 8019aec:	d014      	beq.n	8019b18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019aee:	d826      	bhi.n	8019b3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019af0:	2a2c      	cmp	r2, #44	; 0x2c
 8019af2:	d1f5      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019af4:	684b      	ldr	r3, [r1, #4]
 8019af6:	781b      	ldrb	r3, [r3, #0]
 8019af8:	2b01      	cmp	r3, #1
 8019afa:	d018      	beq.n	8019b2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019afc:	d323      	bcc.n	8019b46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019afe:	2b02      	cmp	r3, #2
 8019b00:	d1ee      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b02:	6880      	ldr	r0, [r0, #8]
 8019b04:	4770      	bx	lr
 8019b06:	2a31      	cmp	r2, #49	; 0x31
 8019b08:	d004      	beq.n	8019b14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019b0a:	d328      	bcc.n	8019b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019b0c:	2a32      	cmp	r2, #50	; 0x32
 8019b0e:	d026      	beq.n	8019b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019b10:	2a33      	cmp	r2, #51	; 0x33
 8019b12:	d1e5      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b14:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019b16:	4770      	bx	lr
 8019b18:	684b      	ldr	r3, [r1, #4]
 8019b1a:	781b      	ldrb	r3, [r3, #0]
 8019b1c:	2b01      	cmp	r3, #1
 8019b1e:	d004      	beq.n	8019b2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019b20:	d30b      	bcc.n	8019b3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019b22:	2b02      	cmp	r3, #2
 8019b24:	d1dc      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b26:	6900      	ldr	r0, [r0, #16]
 8019b28:	4770      	bx	lr
 8019b2a:	6a00      	ldr	r0, [r0, #32]
 8019b2c:	4770      	bx	lr
 8019b2e:	6980      	ldr	r0, [r0, #24]
 8019b30:	4770      	bx	lr
 8019b32:	684b      	ldr	r3, [r1, #4]
 8019b34:	781b      	ldrb	r3, [r3, #0]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d1d2      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b3a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019b3c:	4770      	bx	lr
 8019b3e:	684b      	ldr	r3, [r1, #4]
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d1cc      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019b48:	4770      	bx	lr
 8019b4a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019b4c:	4770      	bx	lr
 8019b4e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019b50:	4770      	bx	lr
 8019b52:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019b54:	4770      	bx	lr
 8019b56:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019b58:	4770      	bx	lr
 8019b5a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019b5c:	4770      	bx	lr
 8019b5e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019b60:	4770      	bx	lr
 8019b62:	2a0b      	cmp	r2, #11
 8019b64:	d049      	beq.n	8019bfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019b66:	d80e      	bhi.n	8019b86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019b68:	2a03      	cmp	r2, #3
 8019b6a:	d040      	beq.n	8019bee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019b6c:	d804      	bhi.n	8019b78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019b6e:	2a01      	cmp	r2, #1
 8019b70:	d03f      	beq.n	8019bf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019b72:	d940      	bls.n	8019bf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019b74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019b76:	4770      	bx	lr
 8019b78:	2a09      	cmp	r2, #9
 8019b7a:	d03e      	beq.n	8019bfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019b7c:	d801      	bhi.n	8019b82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019b7e:	2a08      	cmp	r2, #8
 8019b80:	d1ae      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b82:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019b84:	4770      	bx	lr
 8019b86:	2a2f      	cmp	r2, #47	; 0x2f
 8019b88:	d024      	beq.n	8019bd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019b8a:	d80d      	bhi.n	8019ba8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019b8c:	2a2d      	cmp	r2, #45	; 0x2d
 8019b8e:	d014      	beq.n	8019bba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019b90:	d826      	bhi.n	8019be0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019b92:	2a2c      	cmp	r2, #44	; 0x2c
 8019b94:	d1a4      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019b96:	684b      	ldr	r3, [r1, #4]
 8019b98:	781b      	ldrb	r3, [r3, #0]
 8019b9a:	2b01      	cmp	r3, #1
 8019b9c:	d018      	beq.n	8019bd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019b9e:	d324      	bcc.n	8019bea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019ba0:	2b02      	cmp	r3, #2
 8019ba2:	d19d      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ba4:	68c0      	ldr	r0, [r0, #12]
 8019ba6:	4770      	bx	lr
 8019ba8:	2a31      	cmp	r2, #49	; 0x31
 8019baa:	d004      	beq.n	8019bb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019bac:	d327      	bcc.n	8019bfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019bae:	2a32      	cmp	r2, #50	; 0x32
 8019bb0:	d025      	beq.n	8019bfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019bb2:	2a33      	cmp	r2, #51	; 0x33
 8019bb4:	d194      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bb6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019bb8:	4770      	bx	lr
 8019bba:	684b      	ldr	r3, [r1, #4]
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	2b01      	cmp	r3, #1
 8019bc0:	d004      	beq.n	8019bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019bc2:	d30b      	bcc.n	8019bdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019bc4:	2b02      	cmp	r3, #2
 8019bc6:	d18b      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bc8:	6940      	ldr	r0, [r0, #20]
 8019bca:	4770      	bx	lr
 8019bcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019bce:	4770      	bx	lr
 8019bd0:	69c0      	ldr	r0, [r0, #28]
 8019bd2:	4770      	bx	lr
 8019bd4:	684b      	ldr	r3, [r1, #4]
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d181      	bne.n	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bdc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019bde:	4770      	bx	lr
 8019be0:	684b      	ldr	r3, [r1, #4]
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	f47f af7b 	bne.w	8019ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019bea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019bec:	4770      	bx	lr
 8019bee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019bf0:	4770      	bx	lr
 8019bf2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019bf4:	4770      	bx	lr
 8019bf6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019bf8:	4770      	bx	lr
 8019bfa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019bfc:	4770      	bx	lr
 8019bfe:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019c00:	4770      	bx	lr

08019c02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c06:	b087      	sub	sp, #28
 8019c08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019c0a:	9205      	str	r2, [sp, #20]
 8019c0c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019c10:	9101      	str	r1, [sp, #4]
 8019c12:	9202      	str	r2, [sp, #8]
 8019c14:	6841      	ldr	r1, [r0, #4]
 8019c16:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019c1a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019c1e:	fb01 2404 	mla	r4, r1, r4, r2
 8019c22:	6802      	ldr	r2, [r0, #0]
 8019c24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019c28:	f8de 2000 	ldr.w	r2, [lr]
 8019c2c:	9203      	str	r2, [sp, #12]
 8019c2e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019c32:	3204      	adds	r2, #4
 8019c34:	9204      	str	r2, [sp, #16]
 8019c36:	9a02      	ldr	r2, [sp, #8]
 8019c38:	43d6      	mvns	r6, r2
 8019c3a:	b2f6      	uxtb	r6, r6
 8019c3c:	9a01      	ldr	r2, [sp, #4]
 8019c3e:	2a00      	cmp	r2, #0
 8019c40:	dc03      	bgt.n	8019c4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019c42:	9a05      	ldr	r2, [sp, #20]
 8019c44:	2a00      	cmp	r2, #0
 8019c46:	f340 8129 	ble.w	8019e9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019c4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c4c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019c50:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c56:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019c5a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	dd0e      	ble.n	8019c80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019c62:	1408      	asrs	r0, r1, #16
 8019c64:	d405      	bmi.n	8019c72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019c66:	4560      	cmp	r0, ip
 8019c68:	da03      	bge.n	8019c72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019c6a:	1410      	asrs	r0, r2, #16
 8019c6c:	d401      	bmi.n	8019c72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019c6e:	42b8      	cmp	r0, r7
 8019c70:	db07      	blt.n	8019c82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019c72:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c74:	3b01      	subs	r3, #1
 8019c76:	3402      	adds	r4, #2
 8019c78:	4401      	add	r1, r0
 8019c7a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019c7c:	4402      	add	r2, r0
 8019c7e:	e7ee      	b.n	8019c5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019c80:	d071      	beq.n	8019d66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019c82:	1e58      	subs	r0, r3, #1
 8019c84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019c86:	fb05 1500 	mla	r5, r5, r0, r1
 8019c8a:	142d      	asrs	r5, r5, #16
 8019c8c:	d45f      	bmi.n	8019d4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019c8e:	4565      	cmp	r5, ip
 8019c90:	da5d      	bge.n	8019d4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019c92:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019c94:	fb05 2000 	mla	r0, r5, r0, r2
 8019c98:	1400      	asrs	r0, r0, #16
 8019c9a:	d458      	bmi.n	8019d4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019c9c:	42b8      	cmp	r0, r7
 8019c9e:	da56      	bge.n	8019d4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019ca0:	4699      	mov	r9, r3
 8019ca2:	46a2      	mov	sl, r4
 8019ca4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019ca8:	f1b9 0f00 	cmp.w	r9, #0
 8019cac:	dd57      	ble.n	8019d5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019cae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019cb2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019cb6:	9803      	ldr	r0, [sp, #12]
 8019cb8:	140d      	asrs	r5, r1, #16
 8019cba:	f109 39ff 	add.w	r9, r9, #4294967295
 8019cbe:	fb07 000c 	mla	r0, r7, ip, r0
 8019cc2:	5d40      	ldrb	r0, [r0, r5]
 8019cc4:	9d04      	ldr	r5, [sp, #16]
 8019cc6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019cca:	f8ba 5000 	ldrh.w	r5, [sl]
 8019cce:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019cd2:	122f      	asrs	r7, r5, #8
 8019cd4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019cd8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019cdc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019ce0:	00ed      	lsls	r5, r5, #3
 8019ce2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019ce6:	fb17 f706 	smulbb	r7, r7, r6
 8019cea:	b2ed      	uxtb	r5, r5
 8019cec:	fb18 f806 	smulbb	r8, r8, r6
 8019cf0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019cf4:	10c7      	asrs	r7, r0, #3
 8019cf6:	fb15 f506 	smulbb	r5, r5, r6
 8019cfa:	00c0      	lsls	r0, r0, #3
 8019cfc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d00:	fa1f fc8c 	uxth.w	ip, ip
 8019d04:	b2c0      	uxtb	r0, r0
 8019d06:	fb07 870b 	mla	r7, r7, fp, r8
 8019d0a:	fb00 500b 	mla	r0, r0, fp, r5
 8019d0e:	f10c 0501 	add.w	r5, ip, #1
 8019d12:	b2bf      	uxth	r7, r7
 8019d14:	b280      	uxth	r0, r0
 8019d16:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019d1a:	f107 0801 	add.w	r8, r7, #1
 8019d1e:	1c45      	adds	r5, r0, #1
 8019d20:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019d24:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019d28:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019d2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019d2e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019d32:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019d36:	4401      	add	r1, r0
 8019d38:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019d3c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019d3e:	ea45 0c0c 	orr.w	ip, r5, ip
 8019d42:	4402      	add	r2, r0
 8019d44:	ea4c 0c08 	orr.w	ip, ip, r8
 8019d48:	f82a cb02 	strh.w	ip, [sl], #2
 8019d4c:	e7ac      	b.n	8019ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019d4e:	f04f 0800 	mov.w	r8, #0
 8019d52:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019d56:	eb03 0008 	add.w	r0, r3, r8
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	dc41      	bgt.n	8019de2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019d5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019d66:	9b01      	ldr	r3, [sp, #4]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	f340 8097 	ble.w	8019e9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d7c:	eef0 6a62 	vmov.f32	s13, s5
 8019d80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d8c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019d90:	eef0 6a43 	vmov.f32	s13, s6
 8019d94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d98:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019d9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019da0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019da4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019da8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019dac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019db0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019db4:	ee12 2a90 	vmov	r2, s5
 8019db8:	eef0 2a47 	vmov.f32	s5, s14
 8019dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019dc0:	ee13 2a10 	vmov	r2, s6
 8019dc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8019dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019dc8:	eeb0 3a67 	vmov.f32	s6, s15
 8019dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019dd0:	9314      	str	r3, [sp, #80]	; 0x50
 8019dd2:	9b01      	ldr	r3, [sp, #4]
 8019dd4:	9a05      	ldr	r2, [sp, #20]
 8019dd6:	3b01      	subs	r3, #1
 8019dd8:	9301      	str	r3, [sp, #4]
 8019dda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ddc:	bf08      	it	eq
 8019dde:	4613      	moveq	r3, r2
 8019de0:	e72c      	b.n	8019c3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019de2:	140f      	asrs	r7, r1, #16
 8019de4:	d453      	bmi.n	8019e8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019de6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019dea:	42bd      	cmp	r5, r7
 8019dec:	dd4f      	ble.n	8019e8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019dee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019df2:	d44c      	bmi.n	8019e8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019df4:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019df8:	4560      	cmp	r0, ip
 8019dfa:	dd48      	ble.n	8019e8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019dfc:	9803      	ldr	r0, [sp, #12]
 8019dfe:	b22d      	sxth	r5, r5
 8019e00:	fb0c 0505 	mla	r5, ip, r5, r0
 8019e04:	5de8      	ldrb	r0, [r5, r7]
 8019e06:	9d04      	ldr	r5, [sp, #16]
 8019e08:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019e0c:	f06f 0501 	mvn.w	r5, #1
 8019e10:	fb05 fb08 	mul.w	fp, r5, r8
 8019e14:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019e18:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019e1c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019e20:	122f      	asrs	r7, r5, #8
 8019e22:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019e26:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019e2a:	00ed      	lsls	r5, r5, #3
 8019e2c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019e30:	fb17 f706 	smulbb	r7, r7, r6
 8019e34:	b2ed      	uxtb	r5, r5
 8019e36:	fb19 f906 	smulbb	r9, r9, r6
 8019e3a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019e3e:	10c7      	asrs	r7, r0, #3
 8019e40:	fb15 f506 	smulbb	r5, r5, r6
 8019e44:	00c0      	lsls	r0, r0, #3
 8019e46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019e4a:	fa1f fc8c 	uxth.w	ip, ip
 8019e4e:	b2c0      	uxtb	r0, r0
 8019e50:	fb07 970a 	mla	r7, r7, sl, r9
 8019e54:	fb00 500a 	mla	r0, r0, sl, r5
 8019e58:	f10c 0501 	add.w	r5, ip, #1
 8019e5c:	b2bf      	uxth	r7, r7
 8019e5e:	b280      	uxth	r0, r0
 8019e60:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019e64:	f107 0901 	add.w	r9, r7, #1
 8019e68:	1c45      	adds	r5, r0, #1
 8019e6a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019e6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019e72:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019e76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019e7a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019e7e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019e82:	ea45 0c0c 	orr.w	ip, r5, ip
 8019e86:	ea4c 0c09 	orr.w	ip, ip, r9
 8019e8a:	f824 c00b 	strh.w	ip, [r4, fp]
 8019e8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019e90:	f108 38ff 	add.w	r8, r8, #4294967295
 8019e94:	4401      	add	r1, r0
 8019e96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019e98:	4402      	add	r2, r0
 8019e9a:	e75c      	b.n	8019d56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019e9c:	b007      	add	sp, #28
 8019e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ea2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ea6:	b085      	sub	sp, #20
 8019ea8:	4693      	mov	fp, r2
 8019eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019eae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019eb0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019eb2:	6870      	ldr	r0, [r6, #4]
 8019eb4:	9100      	str	r1, [sp, #0]
 8019eb6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019eba:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019ebe:	fb00 2404 	mla	r4, r0, r4, r2
 8019ec2:	6832      	ldr	r2, [r6, #0]
 8019ec4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019ec8:	682a      	ldr	r2, [r5, #0]
 8019eca:	9201      	str	r2, [sp, #4]
 8019ecc:	686a      	ldr	r2, [r5, #4]
 8019ece:	3204      	adds	r2, #4
 8019ed0:	9202      	str	r2, [sp, #8]
 8019ed2:	9a00      	ldr	r2, [sp, #0]
 8019ed4:	2a00      	cmp	r2, #0
 8019ed6:	dc03      	bgt.n	8019ee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019ed8:	f1bb 0f00 	cmp.w	fp, #0
 8019edc:	f340 80a0 	ble.w	801a020 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ee2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019ee6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019eec:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019ef0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	dd0c      	ble.n	8019f12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019ef8:	1406      	asrs	r6, r0, #16
 8019efa:	d405      	bmi.n	8019f08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019efc:	454e      	cmp	r6, r9
 8019efe:	da03      	bge.n	8019f08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019f00:	1416      	asrs	r6, r2, #16
 8019f02:	d401      	bmi.n	8019f08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019f04:	4546      	cmp	r6, r8
 8019f06:	db05      	blt.n	8019f14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f08:	4470      	add	r0, lr
 8019f0a:	4462      	add	r2, ip
 8019f0c:	3b01      	subs	r3, #1
 8019f0e:	3402      	adds	r4, #2
 8019f10:	e7f0      	b.n	8019ef4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019f12:	d00f      	beq.n	8019f34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019f14:	1e5e      	subs	r6, r3, #1
 8019f16:	fb0e 0706 	mla	r7, lr, r6, r0
 8019f1a:	143f      	asrs	r7, r7, #16
 8019f1c:	d541      	bpl.n	8019fa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019f1e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019f22:	4698      	mov	r8, r3
 8019f24:	9603      	str	r6, [sp, #12]
 8019f26:	f1b8 0f00 	cmp.w	r8, #0
 8019f2a:	dc59      	bgt.n	8019fe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019f2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019f34:	9b00      	ldr	r3, [sp, #0]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	dd72      	ble.n	801a020 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019f3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f44:	eeb0 6a62 	vmov.f32	s12, s5
 8019f48:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f54:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019f58:	eeb0 6a43 	vmov.f32	s12, s6
 8019f5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f60:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019f64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f7c:	ee12 2a90 	vmov	r2, s5
 8019f80:	eef0 2a47 	vmov.f32	s5, s14
 8019f84:	fb92 fef3 	sdiv	lr, r2, r3
 8019f88:	ee13 2a10 	vmov	r2, s6
 8019f8c:	eeb0 3a67 	vmov.f32	s6, s15
 8019f90:	fb92 fcf3 	sdiv	ip, r2, r3
 8019f94:	9b00      	ldr	r3, [sp, #0]
 8019f96:	3b01      	subs	r3, #1
 8019f98:	9300      	str	r3, [sp, #0]
 8019f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f9c:	bf08      	it	eq
 8019f9e:	465b      	moveq	r3, fp
 8019fa0:	e797      	b.n	8019ed2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019fa2:	454f      	cmp	r7, r9
 8019fa4:	dabb      	bge.n	8019f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019fa6:	fb0c 2606 	mla	r6, ip, r6, r2
 8019faa:	1436      	asrs	r6, r6, #16
 8019fac:	d4b7      	bmi.n	8019f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019fae:	4546      	cmp	r6, r8
 8019fb0:	dab5      	bge.n	8019f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019fb2:	461e      	mov	r6, r3
 8019fb4:	46a0      	mov	r8, r4
 8019fb6:	2e00      	cmp	r6, #0
 8019fb8:	ddb8      	ble.n	8019f2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019fba:	1417      	asrs	r7, r2, #16
 8019fbc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019fc0:	9901      	ldr	r1, [sp, #4]
 8019fc2:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019fc6:	4462      	add	r2, ip
 8019fc8:	4470      	add	r0, lr
 8019fca:	fb0a 1707 	mla	r7, sl, r7, r1
 8019fce:	9902      	ldr	r1, [sp, #8]
 8019fd0:	3e01      	subs	r6, #1
 8019fd2:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019fd6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019fda:	f828 7b02 	strh.w	r7, [r8], #2
 8019fde:	e7ea      	b.n	8019fb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019fe0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019fe4:	d417      	bmi.n	801a016 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019fe6:	68ae      	ldr	r6, [r5, #8]
 8019fe8:	454e      	cmp	r6, r9
 8019fea:	dd14      	ble.n	801a016 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019fec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019ff0:	d411      	bmi.n	801a016 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019ff2:	68ef      	ldr	r7, [r5, #12]
 8019ff4:	4557      	cmp	r7, sl
 8019ff6:	dd0e      	ble.n	801a016 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019ff8:	9f01      	ldr	r7, [sp, #4]
 8019ffa:	b236      	sxth	r6, r6
 8019ffc:	f06f 0101 	mvn.w	r1, #1
 801a000:	fb0a 7606 	mla	r6, sl, r6, r7
 801a004:	9f02      	ldr	r7, [sp, #8]
 801a006:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a00a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a00e:	fb01 f608 	mul.w	r6, r1, r8
 801a012:	9903      	ldr	r1, [sp, #12]
 801a014:	538f      	strh	r7, [r1, r6]
 801a016:	4470      	add	r0, lr
 801a018:	4462      	add	r2, ip
 801a01a:	f108 38ff 	add.w	r8, r8, #4294967295
 801a01e:	e782      	b.n	8019f26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a020:	b005      	add	sp, #20
 801a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a026 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02a:	b087      	sub	sp, #28
 801a02c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a02e:	9205      	str	r2, [sp, #20]
 801a030:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a034:	9102      	str	r1, [sp, #8]
 801a036:	9203      	str	r2, [sp, #12]
 801a038:	6861      	ldr	r1, [r4, #4]
 801a03a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a03e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a042:	fb01 2000 	mla	r0, r1, r0, r2
 801a046:	6822      	ldr	r2, [r4, #0]
 801a048:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a04c:	9200      	str	r2, [sp, #0]
 801a04e:	f8dc 2000 	ldr.w	r2, [ip]
 801a052:	9204      	str	r2, [sp, #16]
 801a054:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a058:	3204      	adds	r2, #4
 801a05a:	9201      	str	r2, [sp, #4]
 801a05c:	9a03      	ldr	r2, [sp, #12]
 801a05e:	43d5      	mvns	r5, r2
 801a060:	b2ed      	uxtb	r5, r5
 801a062:	9a02      	ldr	r2, [sp, #8]
 801a064:	2a00      	cmp	r2, #0
 801a066:	dc03      	bgt.n	801a070 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a068:	9a05      	ldr	r2, [sp, #20]
 801a06a:	2a00      	cmp	r2, #0
 801a06c:	f340 812c 	ble.w	801a2c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a072:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a076:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a07a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a07c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a080:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a084:	2b00      	cmp	r3, #0
 801a086:	dd10      	ble.n	801a0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a088:	140c      	asrs	r4, r1, #16
 801a08a:	d405      	bmi.n	801a098 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a08c:	4574      	cmp	r4, lr
 801a08e:	da03      	bge.n	801a098 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a090:	1414      	asrs	r4, r2, #16
 801a092:	d401      	bmi.n	801a098 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a094:	42bc      	cmp	r4, r7
 801a096:	db09      	blt.n	801a0ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a098:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a09a:	3b01      	subs	r3, #1
 801a09c:	9800      	ldr	r0, [sp, #0]
 801a09e:	4421      	add	r1, r4
 801a0a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a0a2:	3002      	adds	r0, #2
 801a0a4:	4422      	add	r2, r4
 801a0a6:	9000      	str	r0, [sp, #0]
 801a0a8:	e7ec      	b.n	801a084 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a0aa:	d071      	beq.n	801a190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a0ac:	1e5c      	subs	r4, r3, #1
 801a0ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a0b0:	fb06 1604 	mla	r6, r6, r4, r1
 801a0b4:	1436      	asrs	r6, r6, #16
 801a0b6:	d45d      	bmi.n	801a174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a0b8:	4576      	cmp	r6, lr
 801a0ba:	da5b      	bge.n	801a174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a0bc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a0be:	fb06 2404 	mla	r4, r6, r4, r2
 801a0c2:	1424      	asrs	r4, r4, #16
 801a0c4:	d456      	bmi.n	801a174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a0c6:	42bc      	cmp	r4, r7
 801a0c8:	da54      	bge.n	801a174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a0ca:	4698      	mov	r8, r3
 801a0cc:	f8dd 9000 	ldr.w	r9, [sp]
 801a0d0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a0d4:	f1b8 0f00 	cmp.w	r8, #0
 801a0d8:	dd54      	ble.n	801a184 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a0da:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a0de:	1414      	asrs	r4, r2, #16
 801a0e0:	9804      	ldr	r0, [sp, #16]
 801a0e2:	140e      	asrs	r6, r1, #16
 801a0e4:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0e8:	fb07 0404 	mla	r4, r7, r4, r0
 801a0ec:	9801      	ldr	r0, [sp, #4]
 801a0ee:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a0f2:	f8b9 4000 	ldrh.w	r4, [r9]
 801a0f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a0fa:	1227      	asrs	r7, r4, #8
 801a0fc:	eb00 0b0e 	add.w	fp, r0, lr
 801a100:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a104:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a108:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a10a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a10e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a112:	4401      	add	r1, r0
 801a114:	fb16 f60a 	smulbb	r6, r6, sl
 801a118:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a11a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a11e:	fb07 6705 	mla	r7, r7, r5, r6
 801a122:	10e6      	asrs	r6, r4, #3
 801a124:	00e4      	lsls	r4, r4, #3
 801a126:	4402      	add	r2, r0
 801a128:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a12c:	b2bf      	uxth	r7, r7
 801a12e:	b2e4      	uxtb	r4, r4
 801a130:	fb06 b605 	mla	r6, r6, r5, fp
 801a134:	fb14 f405 	smulbb	r4, r4, r5
 801a138:	b2b6      	uxth	r6, r6
 801a13a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a13e:	1c7c      	adds	r4, r7, #1
 801a140:	f106 0b01 	add.w	fp, r6, #1
 801a144:	fa1f fe8e 	uxth.w	lr, lr
 801a148:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a14c:	f10e 0401 	add.w	r4, lr, #1
 801a150:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a154:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a158:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a15c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a160:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a164:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a168:	4327      	orrs	r7, r4
 801a16a:	ea47 070b 	orr.w	r7, r7, fp
 801a16e:	f829 7b02 	strh.w	r7, [r9], #2
 801a172:	e7af      	b.n	801a0d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a174:	f04f 0e00 	mov.w	lr, #0
 801a178:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a17c:	eb03 040e 	add.w	r4, r3, lr
 801a180:	2c00      	cmp	r4, #0
 801a182:	dc43      	bgt.n	801a20c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a184:	9a00      	ldr	r2, [sp, #0]
 801a186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a18a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a18e:	9300      	str	r3, [sp, #0]
 801a190:	9b02      	ldr	r3, [sp, #8]
 801a192:	2b00      	cmp	r3, #0
 801a194:	f340 8098 	ble.w	801a2c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a19e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1a6:	eef0 6a62 	vmov.f32	s13, s5
 801a1aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a1ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a1b6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a1ba:	eef0 6a43 	vmov.f32	s13, s6
 801a1be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a1c2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a1c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1de:	ee12 2a90 	vmov	r2, s5
 801a1e2:	eef0 2a47 	vmov.f32	s5, s14
 801a1e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1ea:	ee13 2a10 	vmov	r2, s6
 801a1ee:	9313      	str	r3, [sp, #76]	; 0x4c
 801a1f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a1f2:	eeb0 3a67 	vmov.f32	s6, s15
 801a1f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1fa:	9314      	str	r3, [sp, #80]	; 0x50
 801a1fc:	9b02      	ldr	r3, [sp, #8]
 801a1fe:	9a05      	ldr	r2, [sp, #20]
 801a200:	3b01      	subs	r3, #1
 801a202:	9302      	str	r3, [sp, #8]
 801a204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a206:	bf08      	it	eq
 801a208:	4613      	moveq	r3, r2
 801a20a:	e72a      	b.n	801a062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a20c:	140f      	asrs	r7, r1, #16
 801a20e:	d454      	bmi.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a210:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a214:	42be      	cmp	r6, r7
 801a216:	dd50      	ble.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a218:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a21c:	d44d      	bmi.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a21e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a222:	4544      	cmp	r4, r8
 801a224:	dd49      	ble.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a226:	9c04      	ldr	r4, [sp, #16]
 801a228:	b236      	sxth	r6, r6
 801a22a:	f06f 0001 	mvn.w	r0, #1
 801a22e:	fb08 4606 	mla	r6, r8, r6, r4
 801a232:	9c01      	ldr	r4, [sp, #4]
 801a234:	fb00 fa0e 	mul.w	sl, r0, lr
 801a238:	9800      	ldr	r0, [sp, #0]
 801a23a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a23e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a242:	eb04 0b08 	add.w	fp, r4, r8
 801a246:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a24a:	9801      	ldr	r0, [sp, #4]
 801a24c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a250:	1227      	asrs	r7, r4, #8
 801a252:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a256:	fb16 f609 	smulbb	r6, r6, r9
 801a25a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a25e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a262:	fb1b fb09 	smulbb	fp, fp, r9
 801a266:	fb07 6705 	mla	r7, r7, r5, r6
 801a26a:	10e6      	asrs	r6, r4, #3
 801a26c:	00e4      	lsls	r4, r4, #3
 801a26e:	9800      	ldr	r0, [sp, #0]
 801a270:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a274:	b2bf      	uxth	r7, r7
 801a276:	b2e4      	uxtb	r4, r4
 801a278:	fb06 b605 	mla	r6, r6, r5, fp
 801a27c:	fb14 f405 	smulbb	r4, r4, r5
 801a280:	b2b6      	uxth	r6, r6
 801a282:	fb08 4809 	mla	r8, r8, r9, r4
 801a286:	1c7c      	adds	r4, r7, #1
 801a288:	f106 0b01 	add.w	fp, r6, #1
 801a28c:	fa1f f888 	uxth.w	r8, r8
 801a290:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a294:	f108 0401 	add.w	r4, r8, #1
 801a298:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a29c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a2a0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a2a4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a2a8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a2ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a2b0:	4327      	orrs	r7, r4
 801a2b2:	ea47 070b 	orr.w	r7, r7, fp
 801a2b6:	f820 700a 	strh.w	r7, [r0, sl]
 801a2ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a2bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a2c0:	4401      	add	r1, r0
 801a2c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a2c4:	4402      	add	r2, r0
 801a2c6:	e759      	b.n	801a17c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a2c8:	b007      	add	sp, #28
 801a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a2d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2d4:	b085      	sub	sp, #20
 801a2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a2da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a2dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a2de:	9203      	str	r2, [sp, #12]
 801a2e0:	6870      	ldr	r0, [r6, #4]
 801a2e2:	686f      	ldr	r7, [r5, #4]
 801a2e4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a2e8:	3704      	adds	r7, #4
 801a2ea:	9101      	str	r1, [sp, #4]
 801a2ec:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a2f0:	fb00 2404 	mla	r4, r0, r4, r2
 801a2f4:	6832      	ldr	r2, [r6, #0]
 801a2f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a2fa:	682a      	ldr	r2, [r5, #0]
 801a2fc:	9202      	str	r2, [sp, #8]
 801a2fe:	9a01      	ldr	r2, [sp, #4]
 801a300:	2a00      	cmp	r2, #0
 801a302:	dc03      	bgt.n	801a30c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a304:	9a03      	ldr	r2, [sp, #12]
 801a306:	2a00      	cmp	r2, #0
 801a308:	f340 80cc 	ble.w	801a4a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a30c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a30e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a312:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a318:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a31c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a320:	2b00      	cmp	r3, #0
 801a322:	dd0d      	ble.n	801a340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a324:	1406      	asrs	r6, r0, #16
 801a326:	d405      	bmi.n	801a334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a328:	454e      	cmp	r6, r9
 801a32a:	da03      	bge.n	801a334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a32c:	1416      	asrs	r6, r2, #16
 801a32e:	d401      	bmi.n	801a334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a330:	4546      	cmp	r6, r8
 801a332:	db06      	blt.n	801a342 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a334:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a336:	4460      	add	r0, ip
 801a338:	3b01      	subs	r3, #1
 801a33a:	3402      	adds	r4, #2
 801a33c:	4432      	add	r2, r6
 801a33e:	e7ef      	b.n	801a320 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a340:	d00f      	beq.n	801a362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a342:	1e5e      	subs	r6, r3, #1
 801a344:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a348:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a34c:	d543      	bpl.n	801a3d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a34e:	4698      	mov	r8, r3
 801a350:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a354:	f1b8 0f00 	cmp.w	r8, #0
 801a358:	dc71      	bgt.n	801a43e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a35a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a35e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a362:	9b01      	ldr	r3, [sp, #4]
 801a364:	2b00      	cmp	r3, #0
 801a366:	f340 809d 	ble.w	801a4a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a36a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a370:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a374:	eeb0 6a62 	vmov.f32	s12, s5
 801a378:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a37c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a380:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a384:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a388:	eeb0 6a43 	vmov.f32	s12, s6
 801a38c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a390:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a394:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a398:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a39c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a3a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a3a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a3a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a3ac:	ee12 2a90 	vmov	r2, s5
 801a3b0:	eef0 2a47 	vmov.f32	s5, s14
 801a3b4:	fb92 fcf3 	sdiv	ip, r2, r3
 801a3b8:	ee13 2a10 	vmov	r2, s6
 801a3bc:	eeb0 3a67 	vmov.f32	s6, s15
 801a3c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3c4:	9312      	str	r3, [sp, #72]	; 0x48
 801a3c6:	9b01      	ldr	r3, [sp, #4]
 801a3c8:	9a03      	ldr	r2, [sp, #12]
 801a3ca:	3b01      	subs	r3, #1
 801a3cc:	9301      	str	r3, [sp, #4]
 801a3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3d0:	bf08      	it	eq
 801a3d2:	4613      	moveq	r3, r2
 801a3d4:	e793      	b.n	801a2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a3d6:	45ce      	cmp	lr, r9
 801a3d8:	dab9      	bge.n	801a34e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a3da:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3dc:	fb01 2606 	mla	r6, r1, r6, r2
 801a3e0:	1436      	asrs	r6, r6, #16
 801a3e2:	d4b4      	bmi.n	801a34e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a3e4:	4546      	cmp	r6, r8
 801a3e6:	dab2      	bge.n	801a34e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a3e8:	4698      	mov	r8, r3
 801a3ea:	46a2      	mov	sl, r4
 801a3ec:	f1b8 0f00 	cmp.w	r8, #0
 801a3f0:	ddb3      	ble.n	801a35a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a3f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a3f6:	1416      	asrs	r6, r2, #16
 801a3f8:	9902      	ldr	r1, [sp, #8]
 801a3fa:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a3fe:	f108 38ff 	add.w	r8, r8, #4294967295
 801a402:	4460      	add	r0, ip
 801a404:	fb09 1606 	mla	r6, r9, r6, r1
 801a408:	4928      	ldr	r1, [pc, #160]	; (801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a40a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a40e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a412:	eb07 0b0e 	add.w	fp, r7, lr
 801a416:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a41a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a41e:	00f6      	lsls	r6, r6, #3
 801a420:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a424:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a426:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a42a:	440a      	add	r2, r1
 801a42c:	ea49 0606 	orr.w	r6, r9, r6
 801a430:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a434:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a438:	f82a 6b02 	strh.w	r6, [sl], #2
 801a43c:	e7d6      	b.n	801a3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a43e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a442:	d429      	bmi.n	801a498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a444:	68ae      	ldr	r6, [r5, #8]
 801a446:	454e      	cmp	r6, r9
 801a448:	dd26      	ble.n	801a498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a44a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a44e:	d423      	bmi.n	801a498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a450:	68e9      	ldr	r1, [r5, #12]
 801a452:	4559      	cmp	r1, fp
 801a454:	dd20      	ble.n	801a498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a456:	fa0f fe86 	sxth.w	lr, r6
 801a45a:	9902      	ldr	r1, [sp, #8]
 801a45c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a460:	f06f 0101 	mvn.w	r1, #1
 801a464:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a468:	fb01 f908 	mul.w	r9, r1, r8
 801a46c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a470:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a474:	eb07 060e 	add.w	r6, r7, lr
 801a478:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a47c:	7876      	ldrb	r6, [r6, #1]
 801a47e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a482:	00f6      	lsls	r6, r6, #3
 801a484:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a488:	ea4b 0606 	orr.w	r6, fp, r6
 801a48c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a490:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a494:	f82a 6009 	strh.w	r6, [sl, r9]
 801a498:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a49a:	4460      	add	r0, ip
 801a49c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a4a0:	440a      	add	r2, r1
 801a4a2:	e757      	b.n	801a354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a4a4:	b005      	add	sp, #20
 801a4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4aa:	bf00      	nop
 801a4ac:	fffff800 	.word	0xfffff800

0801a4b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4b4:	b087      	sub	sp, #28
 801a4b6:	468b      	mov	fp, r1
 801a4b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a4bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a4be:	9204      	str	r2, [sp, #16]
 801a4c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a4c4:	6841      	ldr	r1, [r0, #4]
 801a4c6:	9205      	str	r2, [sp, #20]
 801a4c8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a4cc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a4d0:	fb01 2404 	mla	r4, r1, r4, r2
 801a4d4:	6802      	ldr	r2, [r0, #0]
 801a4d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a4da:	f8dc 2000 	ldr.w	r2, [ip]
 801a4de:	9201      	str	r2, [sp, #4]
 801a4e0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a4e4:	3204      	adds	r2, #4
 801a4e6:	9202      	str	r2, [sp, #8]
 801a4e8:	f1bb 0f00 	cmp.w	fp, #0
 801a4ec:	dc03      	bgt.n	801a4f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a4ee:	9a04      	ldr	r2, [sp, #16]
 801a4f0:	2a00      	cmp	r2, #0
 801a4f2:	f340 8138 	ble.w	801a766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a4f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a4f8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a4fc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a502:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a506:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	dd0e      	ble.n	801a52c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a50e:	1402      	asrs	r2, r0, #16
 801a510:	d405      	bmi.n	801a51e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a512:	42ba      	cmp	r2, r7
 801a514:	da03      	bge.n	801a51e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a516:	140a      	asrs	r2, r1, #16
 801a518:	d401      	bmi.n	801a51e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a51a:	42b2      	cmp	r2, r6
 801a51c:	db07      	blt.n	801a52e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a51e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a520:	3b01      	subs	r3, #1
 801a522:	3402      	adds	r4, #2
 801a524:	4410      	add	r0, r2
 801a526:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a528:	4411      	add	r1, r2
 801a52a:	e7ee      	b.n	801a50a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a52c:	d019      	beq.n	801a562 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a52e:	1e5a      	subs	r2, r3, #1
 801a530:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a532:	fb05 0502 	mla	r5, r5, r2, r0
 801a536:	142d      	asrs	r5, r5, #16
 801a538:	d409      	bmi.n	801a54e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a53a:	42bd      	cmp	r5, r7
 801a53c:	da07      	bge.n	801a54e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a53e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a540:	fb05 1202 	mla	r2, r5, r2, r1
 801a544:	1412      	asrs	r2, r2, #16
 801a546:	d402      	bmi.n	801a54e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a548:	42b2      	cmp	r2, r6
 801a54a:	f2c0 80ac 	blt.w	801a6a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a54e:	f04f 0e00 	mov.w	lr, #0
 801a552:	eb03 020e 	add.w	r2, r3, lr
 801a556:	2a00      	cmp	r2, #0
 801a558:	dc3e      	bgt.n	801a5d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a55a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a55e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a562:	f1bb 0f00 	cmp.w	fp, #0
 801a566:	f340 80fe 	ble.w	801a766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a56a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a56e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a570:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a574:	f1bb 0b01 	subs.w	fp, fp, #1
 801a578:	eeb0 6a62 	vmov.f32	s12, s5
 801a57c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a580:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a584:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a588:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a58c:	eeb0 6a43 	vmov.f32	s12, s6
 801a590:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a594:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a598:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a59c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a5a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a5a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a5a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a5ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a5b0:	ee12 2a90 	vmov	r2, s5
 801a5b4:	eef0 2a47 	vmov.f32	s5, s14
 801a5b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5bc:	ee13 2a10 	vmov	r2, s6
 801a5c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801a5c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5c4:	eeb0 3a67 	vmov.f32	s6, s15
 801a5c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5cc:	9a04      	ldr	r2, [sp, #16]
 801a5ce:	9314      	str	r3, [sp, #80]	; 0x50
 801a5d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5d2:	bf08      	it	eq
 801a5d4:	4613      	moveq	r3, r2
 801a5d6:	e787      	b.n	801a4e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a5d8:	1406      	asrs	r6, r0, #16
 801a5da:	d45d      	bmi.n	801a698 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a5dc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a5e0:	42b5      	cmp	r5, r6
 801a5e2:	dd59      	ble.n	801a698 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a5e4:	140f      	asrs	r7, r1, #16
 801a5e6:	d457      	bmi.n	801a698 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a5e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a5ec:	42ba      	cmp	r2, r7
 801a5ee:	dd53      	ble.n	801a698 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a5f0:	9a01      	ldr	r2, [sp, #4]
 801a5f2:	b22d      	sxth	r5, r5
 801a5f4:	fb07 2505 	mla	r5, r7, r5, r2
 801a5f8:	5daa      	ldrb	r2, [r5, r6]
 801a5fa:	9d02      	ldr	r5, [sp, #8]
 801a5fc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a600:	0e2e      	lsrs	r6, r5, #24
 801a602:	d049      	beq.n	801a698 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a604:	f06f 0201 	mvn.w	r2, #1
 801a608:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a60c:	fb02 f20e 	mul.w	r2, r2, lr
 801a610:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a614:	9203      	str	r2, [sp, #12]
 801a616:	9a05      	ldr	r2, [sp, #20]
 801a618:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a61c:	4356      	muls	r6, r2
 801a61e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a622:	1c72      	adds	r2, r6, #1
 801a624:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a628:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a62c:	b2ed      	uxtb	r5, r5
 801a62e:	1212      	asrs	r2, r2, #8
 801a630:	fa1f f982 	uxth.w	r9, r2
 801a634:	43d2      	mvns	r2, r2
 801a636:	fb16 f609 	smulbb	r6, r6, r9
 801a63a:	b2d2      	uxtb	r2, r2
 801a63c:	fb15 f509 	smulbb	r5, r5, r9
 801a640:	fb07 6702 	mla	r7, r7, r2, r6
 801a644:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a648:	fb1a fa09 	smulbb	sl, sl, r9
 801a64c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a650:	b2bf      	uxth	r7, r7
 801a652:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a656:	fa5f f888 	uxtb.w	r8, r8
 801a65a:	fb06 a602 	mla	r6, r6, r2, sl
 801a65e:	fb08 5502 	mla	r5, r8, r2, r5
 801a662:	1c7a      	adds	r2, r7, #1
 801a664:	b2b6      	uxth	r6, r6
 801a666:	b2ad      	uxth	r5, r5
 801a668:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a66c:	9a03      	ldr	r2, [sp, #12]
 801a66e:	f105 0a01 	add.w	sl, r5, #1
 801a672:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a676:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a67a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a67e:	ea4a 0707 	orr.w	r7, sl, r7
 801a682:	f106 0a01 	add.w	sl, r6, #1
 801a686:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a68a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a68e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a692:	ea47 070a 	orr.w	r7, r7, sl
 801a696:	52a7      	strh	r7, [r4, r2]
 801a698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a69a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a69e:	4410      	add	r0, r2
 801a6a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a6a2:	4411      	add	r1, r2
 801a6a4:	e755      	b.n	801a552 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a6a6:	f04f 0800 	mov.w	r8, #0
 801a6aa:	eba3 0208 	sub.w	r2, r3, r8
 801a6ae:	2a00      	cmp	r2, #0
 801a6b0:	f77f af53 	ble.w	801a55a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a6b4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a6b8:	140a      	asrs	r2, r1, #16
 801a6ba:	9f01      	ldr	r7, [sp, #4]
 801a6bc:	1405      	asrs	r5, r0, #16
 801a6be:	fb06 7202 	mla	r2, r6, r2, r7
 801a6c2:	5d52      	ldrb	r2, [r2, r5]
 801a6c4:	9d02      	ldr	r5, [sp, #8]
 801a6c6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a6ca:	0e2e      	lsrs	r6, r5, #24
 801a6cc:	d044      	beq.n	801a758 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a6ce:	9a05      	ldr	r2, [sp, #20]
 801a6d0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a6d4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a6d8:	4356      	muls	r6, r2
 801a6da:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a6de:	1c72      	adds	r2, r6, #1
 801a6e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6e4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a6e8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a6ec:	b2ed      	uxtb	r5, r5
 801a6ee:	1212      	asrs	r2, r2, #8
 801a6f0:	fa1f f982 	uxth.w	r9, r2
 801a6f4:	43d2      	mvns	r2, r2
 801a6f6:	fb16 f609 	smulbb	r6, r6, r9
 801a6fa:	b2d2      	uxtb	r2, r2
 801a6fc:	fb15 f509 	smulbb	r5, r5, r9
 801a700:	fb07 6702 	mla	r7, r7, r2, r6
 801a704:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a708:	fb1a fa09 	smulbb	sl, sl, r9
 801a70c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a710:	b2bf      	uxth	r7, r7
 801a712:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a716:	fa5f fe8e 	uxtb.w	lr, lr
 801a71a:	fb06 a602 	mla	r6, r6, r2, sl
 801a71e:	fb0e 5502 	mla	r5, lr, r2, r5
 801a722:	1c7a      	adds	r2, r7, #1
 801a724:	b2b6      	uxth	r6, r6
 801a726:	b2ad      	uxth	r5, r5
 801a728:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a72c:	f105 0a01 	add.w	sl, r5, #1
 801a730:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a734:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a738:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a73c:	ea4a 0707 	orr.w	r7, sl, r7
 801a740:	f106 0a01 	add.w	sl, r6, #1
 801a744:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a748:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a74c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a750:	ea47 070a 	orr.w	r7, r7, sl
 801a754:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a75a:	f108 0801 	add.w	r8, r8, #1
 801a75e:	4410      	add	r0, r2
 801a760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a762:	4411      	add	r1, r2
 801a764:	e7a1      	b.n	801a6aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a766:	b007      	add	sp, #28
 801a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a76c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a770:	b085      	sub	sp, #20
 801a772:	468b      	mov	fp, r1
 801a774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a778:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a77a:	9203      	str	r2, [sp, #12]
 801a77c:	6841      	ldr	r1, [r0, #4]
 801a77e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a782:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a786:	fb01 2404 	mla	r4, r1, r4, r2
 801a78a:	6802      	ldr	r2, [r0, #0]
 801a78c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a790:	f8de 2000 	ldr.w	r2, [lr]
 801a794:	9200      	str	r2, [sp, #0]
 801a796:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a79a:	3204      	adds	r2, #4
 801a79c:	9201      	str	r2, [sp, #4]
 801a79e:	f1bb 0f00 	cmp.w	fp, #0
 801a7a2:	dc03      	bgt.n	801a7ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a7a4:	9a03      	ldr	r2, [sp, #12]
 801a7a6:	2a00      	cmp	r2, #0
 801a7a8:	f340 8153 	ble.w	801aa52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a7ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7ae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a7b2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a7b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a7b8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a7bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	dd0e      	ble.n	801a7e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a7c4:	1408      	asrs	r0, r1, #16
 801a7c6:	d405      	bmi.n	801a7d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a7c8:	42b8      	cmp	r0, r7
 801a7ca:	da03      	bge.n	801a7d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a7cc:	1410      	asrs	r0, r2, #16
 801a7ce:	d401      	bmi.n	801a7d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a7d0:	42b0      	cmp	r0, r6
 801a7d2:	db07      	blt.n	801a7e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a7d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a7d6:	3b01      	subs	r3, #1
 801a7d8:	3402      	adds	r4, #2
 801a7da:	4401      	add	r1, r0
 801a7dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a7de:	4402      	add	r2, r0
 801a7e0:	e7ee      	b.n	801a7c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a7e2:	d017      	beq.n	801a814 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a7e4:	1e58      	subs	r0, r3, #1
 801a7e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a7e8:	fb05 1500 	mla	r5, r5, r0, r1
 801a7ec:	142d      	asrs	r5, r5, #16
 801a7ee:	d409      	bmi.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7f0:	42bd      	cmp	r5, r7
 801a7f2:	da07      	bge.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a7f6:	fb05 2000 	mla	r0, r5, r0, r2
 801a7fa:	1400      	asrs	r0, r0, #16
 801a7fc:	d402      	bmi.n	801a804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7fe:	42b0      	cmp	r0, r6
 801a800:	f2c0 80bc 	blt.w	801a97c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a804:	2600      	movs	r6, #0
 801a806:	1998      	adds	r0, r3, r6
 801a808:	2800      	cmp	r0, #0
 801a80a:	dc3e      	bgt.n	801a88a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a80c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a810:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a814:	f1bb 0f00 	cmp.w	fp, #0
 801a818:	f340 811b 	ble.w	801aa52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a81c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a822:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a826:	f1bb 0b01 	subs.w	fp, fp, #1
 801a82a:	eeb0 6a62 	vmov.f32	s12, s5
 801a82e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a832:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a836:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a83a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a83e:	eeb0 6a43 	vmov.f32	s12, s6
 801a842:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a846:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a84a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a84e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a852:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a856:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a85a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a85e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a862:	ee12 2a90 	vmov	r2, s5
 801a866:	eef0 2a47 	vmov.f32	s5, s14
 801a86a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a86e:	ee13 2a10 	vmov	r2, s6
 801a872:	9311      	str	r3, [sp, #68]	; 0x44
 801a874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a876:	eeb0 3a67 	vmov.f32	s6, s15
 801a87a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a87e:	9a03      	ldr	r2, [sp, #12]
 801a880:	9312      	str	r3, [sp, #72]	; 0x48
 801a882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a884:	bf08      	it	eq
 801a886:	4613      	moveq	r3, r2
 801a888:	e789      	b.n	801a79e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a88a:	140f      	asrs	r7, r1, #16
 801a88c:	d426      	bmi.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a88e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a892:	42bd      	cmp	r5, r7
 801a894:	dd22      	ble.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a896:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a89a:	d41f      	bmi.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a89c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a8a0:	4560      	cmp	r0, ip
 801a8a2:	dd1b      	ble.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a8a4:	9800      	ldr	r0, [sp, #0]
 801a8a6:	b22d      	sxth	r5, r5
 801a8a8:	fb0c 0505 	mla	r5, ip, r5, r0
 801a8ac:	5de8      	ldrb	r0, [r5, r7]
 801a8ae:	9d01      	ldr	r5, [sp, #4]
 801a8b0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a8b4:	0e07      	lsrs	r7, r0, #24
 801a8b6:	2fff      	cmp	r7, #255	; 0xff
 801a8b8:	d116      	bne.n	801a8e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a8ba:	f06f 0501 	mvn.w	r5, #1
 801a8be:	fb05 f706 	mul.w	r7, r5, r6
 801a8c2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a8c6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a8ca:	0945      	lsrs	r5, r0, #5
 801a8cc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a8d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a8d4:	ea4c 0505 	orr.w	r5, ip, r5
 801a8d8:	4305      	orrs	r5, r0
 801a8da:	53e5      	strh	r5, [r4, r7]
 801a8dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a8de:	3e01      	subs	r6, #1
 801a8e0:	4401      	add	r1, r0
 801a8e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a8e4:	4402      	add	r2, r0
 801a8e6:	e78e      	b.n	801a806 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a8e8:	b2fd      	uxtb	r5, r7
 801a8ea:	2f00      	cmp	r7, #0
 801a8ec:	d0f6      	beq.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a8ee:	f06f 0701 	mvn.w	r7, #1
 801a8f2:	fa1f f985 	uxth.w	r9, r5
 801a8f6:	43ed      	mvns	r5, r5
 801a8f8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a8fc:	4377      	muls	r7, r6
 801a8fe:	fb1a fa09 	smulbb	sl, sl, r9
 801a902:	b2ed      	uxtb	r5, r5
 801a904:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a908:	9702      	str	r7, [sp, #8]
 801a90a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a90e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a912:	fb17 f709 	smulbb	r7, r7, r9
 801a916:	b2c0      	uxtb	r0, r0
 801a918:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a91c:	fb10 f009 	smulbb	r0, r0, r9
 801a920:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a924:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a928:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a92c:	fa1f fc8c 	uxth.w	ip, ip
 801a930:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a934:	fa5f f888 	uxtb.w	r8, r8
 801a938:	fb07 a705 	mla	r7, r7, r5, sl
 801a93c:	fb08 0005 	mla	r0, r8, r5, r0
 801a940:	f10c 0501 	add.w	r5, ip, #1
 801a944:	b2bf      	uxth	r7, r7
 801a946:	b280      	uxth	r0, r0
 801a948:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a94c:	f100 0a01 	add.w	sl, r0, #1
 801a950:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a954:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a958:	9802      	ldr	r0, [sp, #8]
 801a95a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a95e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a962:	f107 0a01 	add.w	sl, r7, #1
 801a966:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a96a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a96e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a972:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a976:	f824 c000 	strh.w	ip, [r4, r0]
 801a97a:	e7af      	b.n	801a8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a97c:	f04f 0800 	mov.w	r8, #0
 801a980:	eba3 0008 	sub.w	r0, r3, r8
 801a984:	2800      	cmp	r0, #0
 801a986:	f77f af41 	ble.w	801a80c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a98a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a98e:	1410      	asrs	r0, r2, #16
 801a990:	9f00      	ldr	r7, [sp, #0]
 801a992:	140d      	asrs	r5, r1, #16
 801a994:	fb06 7000 	mla	r0, r6, r0, r7
 801a998:	5d40      	ldrb	r0, [r0, r5]
 801a99a:	9d01      	ldr	r5, [sp, #4]
 801a99c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a9a0:	0e2e      	lsrs	r6, r5, #24
 801a9a2:	2eff      	cmp	r6, #255	; 0xff
 801a9a4:	d112      	bne.n	801a9cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801a9a6:	482c      	ldr	r0, [pc, #176]	; (801aa58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a9a8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a9ac:	0968      	lsrs	r0, r5, #5
 801a9ae:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a9b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a9b6:	4330      	orrs	r0, r6
 801a9b8:	4328      	orrs	r0, r5
 801a9ba:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801a9be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a9c0:	f108 0801 	add.w	r8, r8, #1
 801a9c4:	4401      	add	r1, r0
 801a9c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a9c8:	4402      	add	r2, r0
 801a9ca:	e7d9      	b.n	801a980 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a9cc:	b2f0      	uxtb	r0, r6
 801a9ce:	2e00      	cmp	r6, #0
 801a9d0:	d0f5      	beq.n	801a9be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a9d2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a9d6:	fa1f f980 	uxth.w	r9, r0
 801a9da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a9de:	43c0      	mvns	r0, r0
 801a9e0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a9e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a9e8:	fb16 f609 	smulbb	r6, r6, r9
 801a9ec:	b2c0      	uxtb	r0, r0
 801a9ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a9f2:	b2ed      	uxtb	r5, r5
 801a9f4:	fb1a fa09 	smulbb	sl, sl, r9
 801a9f8:	fb07 6700 	mla	r7, r7, r0, r6
 801a9fc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801aa00:	fb15 f509 	smulbb	r5, r5, r9
 801aa04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801aa08:	b2bf      	uxth	r7, r7
 801aa0a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aa0e:	fa5f fc8c 	uxtb.w	ip, ip
 801aa12:	fb06 a600 	mla	r6, r6, r0, sl
 801aa16:	fb0c 5500 	mla	r5, ip, r0, r5
 801aa1a:	1c78      	adds	r0, r7, #1
 801aa1c:	b2b6      	uxth	r6, r6
 801aa1e:	b2ad      	uxth	r5, r5
 801aa20:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801aa24:	f105 0a01 	add.w	sl, r5, #1
 801aa28:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aa2c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aa30:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aa34:	ea4a 0707 	orr.w	r7, sl, r7
 801aa38:	f106 0a01 	add.w	sl, r6, #1
 801aa3c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801aa40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aa44:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aa48:	ea47 070a 	orr.w	r7, r7, sl
 801aa4c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801aa50:	e7b5      	b.n	801a9be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801aa52:	b005      	add	sp, #20
 801aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa58:	fffff800 	.word	0xfffff800

0801aa5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa60:	b087      	sub	sp, #28
 801aa62:	468b      	mov	fp, r1
 801aa64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa68:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aa6a:	9204      	str	r2, [sp, #16]
 801aa6c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801aa70:	6861      	ldr	r1, [r4, #4]
 801aa72:	9205      	str	r2, [sp, #20]
 801aa74:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801aa78:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801aa7c:	fb01 2000 	mla	r0, r1, r0, r2
 801aa80:	6822      	ldr	r2, [r4, #0]
 801aa82:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801aa86:	f8de 2000 	ldr.w	r2, [lr]
 801aa8a:	9201      	str	r2, [sp, #4]
 801aa8c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801aa90:	9202      	str	r2, [sp, #8]
 801aa92:	f1bb 0f00 	cmp.w	fp, #0
 801aa96:	dc03      	bgt.n	801aaa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801aa98:	9a04      	ldr	r2, [sp, #16]
 801aa9a:	2a00      	cmp	r2, #0
 801aa9c:	f340 8142 	ble.w	801ad24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801aaa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aaa2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801aaa6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aaaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aaac:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801aab0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dd0e      	ble.n	801aad6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801aab8:	140c      	asrs	r4, r1, #16
 801aaba:	d405      	bmi.n	801aac8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aabc:	42bc      	cmp	r4, r7
 801aabe:	da03      	bge.n	801aac8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aac0:	1414      	asrs	r4, r2, #16
 801aac2:	d401      	bmi.n	801aac8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aac4:	42b4      	cmp	r4, r6
 801aac6:	db07      	blt.n	801aad8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aac8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aaca:	3b01      	subs	r3, #1
 801aacc:	3002      	adds	r0, #2
 801aace:	4421      	add	r1, r4
 801aad0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aad2:	4422      	add	r2, r4
 801aad4:	e7ee      	b.n	801aab4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801aad6:	d019      	beq.n	801ab0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aad8:	1e5c      	subs	r4, r3, #1
 801aada:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801aadc:	fb05 1504 	mla	r5, r5, r4, r1
 801aae0:	142d      	asrs	r5, r5, #16
 801aae2:	d409      	bmi.n	801aaf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aae4:	42bd      	cmp	r5, r7
 801aae6:	da07      	bge.n	801aaf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aae8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aaea:	fb05 2404 	mla	r4, r5, r4, r2
 801aaee:	1424      	asrs	r4, r4, #16
 801aaf0:	d402      	bmi.n	801aaf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801aaf2:	42b4      	cmp	r4, r6
 801aaf4:	f2c0 80b1 	blt.w	801ac5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801aaf8:	f04f 0800 	mov.w	r8, #0
 801aafc:	eb03 0408 	add.w	r4, r3, r8
 801ab00:	2c00      	cmp	r4, #0
 801ab02:	dc3e      	bgt.n	801ab82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ab04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ab0c:	f1bb 0f00 	cmp.w	fp, #0
 801ab10:	f340 8108 	ble.w	801ad24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ab14:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab1e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ab22:	eeb0 6a62 	vmov.f32	s12, s5
 801ab26:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab32:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ab36:	eeb0 6a43 	vmov.f32	s12, s6
 801ab3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab3e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ab42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab46:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab5a:	ee12 2a90 	vmov	r2, s5
 801ab5e:	eef0 2a47 	vmov.f32	s5, s14
 801ab62:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab66:	ee13 2a10 	vmov	r2, s6
 801ab6a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab6e:	eeb0 3a67 	vmov.f32	s6, s15
 801ab72:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab76:	9a04      	ldr	r2, [sp, #16]
 801ab78:	9314      	str	r3, [sp, #80]	; 0x50
 801ab7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab7c:	bf08      	it	eq
 801ab7e:	4613      	moveq	r3, r2
 801ab80:	e787      	b.n	801aa92 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ab82:	140e      	asrs	r6, r1, #16
 801ab84:	d462      	bmi.n	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ab86:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ab8a:	42b5      	cmp	r5, r6
 801ab8c:	dd5e      	ble.n	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ab8e:	1417      	asrs	r7, r2, #16
 801ab90:	d45c      	bmi.n	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ab92:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ab96:	42bc      	cmp	r4, r7
 801ab98:	dd58      	ble.n	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ab9a:	b22d      	sxth	r5, r5
 801ab9c:	9c02      	ldr	r4, [sp, #8]
 801ab9e:	fb07 6505 	mla	r5, r7, r5, r6
 801aba2:	5d66      	ldrb	r6, [r4, r5]
 801aba4:	2e00      	cmp	r6, #0
 801aba6:	d051      	beq.n	801ac4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aba8:	9c01      	ldr	r4, [sp, #4]
 801abaa:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801abae:	f06f 0401 	mvn.w	r4, #1
 801abb2:	fb04 f408 	mul.w	r4, r4, r8
 801abb6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801abba:	5b05      	ldrh	r5, [r0, r4]
 801abbc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801abc0:	9403      	str	r4, [sp, #12]
 801abc2:	9c05      	ldr	r4, [sp, #20]
 801abc4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abc8:	4366      	muls	r6, r4
 801abca:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801abce:	1c74      	adds	r4, r6, #1
 801abd0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801abd4:	122e      	asrs	r6, r5, #8
 801abd6:	1224      	asrs	r4, r4, #8
 801abd8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801abdc:	00ed      	lsls	r5, r5, #3
 801abde:	b2a7      	uxth	r7, r4
 801abe0:	43e4      	mvns	r4, r4
 801abe2:	b2ed      	uxtb	r5, r5
 801abe4:	b2e4      	uxtb	r4, r4
 801abe6:	fb16 f604 	smulbb	r6, r6, r4
 801abea:	fb15 f504 	smulbb	r5, r5, r4
 801abee:	fb0c 6c07 	mla	ip, ip, r7, r6
 801abf2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801abf6:	fb1a fa04 	smulbb	sl, sl, r4
 801abfa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801abfe:	fa1f fc8c 	uxth.w	ip, ip
 801ac02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac06:	fa5f f989 	uxtb.w	r9, r9
 801ac0a:	fb06 a607 	mla	r6, r6, r7, sl
 801ac0e:	f10c 0401 	add.w	r4, ip, #1
 801ac12:	fb09 5507 	mla	r5, r9, r7, r5
 801ac16:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ac1a:	9c03      	ldr	r4, [sp, #12]
 801ac1c:	b2ad      	uxth	r5, r5
 801ac1e:	b2b6      	uxth	r6, r6
 801ac20:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ac24:	f105 0a01 	add.w	sl, r5, #1
 801ac28:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac30:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ac34:	f106 0a01 	add.w	sl, r6, #1
 801ac38:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ac3c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac40:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac44:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ac48:	f820 c004 	strh.w	ip, [r0, r4]
 801ac4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac4e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ac52:	4421      	add	r1, r4
 801ac54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac56:	4422      	add	r2, r4
 801ac58:	e750      	b.n	801aafc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ac5a:	f04f 0900 	mov.w	r9, #0
 801ac5e:	eba3 0409 	sub.w	r4, r3, r9
 801ac62:	2c00      	cmp	r4, #0
 801ac64:	f77f af4e 	ble.w	801ab04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ac68:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ac6c:	140d      	asrs	r5, r1, #16
 801ac6e:	1414      	asrs	r4, r2, #16
 801ac70:	fb06 5404 	mla	r4, r6, r4, r5
 801ac74:	9d02      	ldr	r5, [sp, #8]
 801ac76:	5d2e      	ldrb	r6, [r5, r4]
 801ac78:	2e00      	cmp	r6, #0
 801ac7a:	d04c      	beq.n	801ad16 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ac7c:	9d01      	ldr	r5, [sp, #4]
 801ac7e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801ac82:	9c05      	ldr	r4, [sp, #20]
 801ac84:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ac88:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ac8c:	4366      	muls	r6, r4
 801ac8e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ac92:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac96:	1c74      	adds	r4, r6, #1
 801ac98:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ac9c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801aca0:	122e      	asrs	r6, r5, #8
 801aca2:	1224      	asrs	r4, r4, #8
 801aca4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aca8:	00ed      	lsls	r5, r5, #3
 801acaa:	b2a7      	uxth	r7, r4
 801acac:	43e4      	mvns	r4, r4
 801acae:	b2ed      	uxtb	r5, r5
 801acb0:	b2e4      	uxtb	r4, r4
 801acb2:	fb16 f604 	smulbb	r6, r6, r4
 801acb6:	fb15 f504 	smulbb	r5, r5, r4
 801acba:	fb0c 6c07 	mla	ip, ip, r7, r6
 801acbe:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801acc2:	fb1a fa04 	smulbb	sl, sl, r4
 801acc6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801acca:	fa1f fc8c 	uxth.w	ip, ip
 801acce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801acd2:	fa5f f888 	uxtb.w	r8, r8
 801acd6:	fb06 a607 	mla	r6, r6, r7, sl
 801acda:	f10c 0401 	add.w	r4, ip, #1
 801acde:	fb08 5507 	mla	r5, r8, r7, r5
 801ace2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ace6:	b2ad      	uxth	r5, r5
 801ace8:	b2b6      	uxth	r6, r6
 801acea:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801acee:	f105 0a01 	add.w	sl, r5, #1
 801acf2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801acf6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801acfa:	ea4a 0c0c 	orr.w	ip, sl, ip
 801acfe:	f106 0a01 	add.w	sl, r6, #1
 801ad02:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ad06:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ad0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ad0e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ad12:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801ad16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad18:	f109 0901 	add.w	r9, r9, #1
 801ad1c:	4421      	add	r1, r4
 801ad1e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ad20:	4422      	add	r2, r4
 801ad22:	e79c      	b.n	801ac5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ad24:	b007      	add	sp, #28
 801ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad2e:	b085      	sub	sp, #20
 801ad30:	468b      	mov	fp, r1
 801ad32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ad36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad38:	9203      	str	r2, [sp, #12]
 801ad3a:	6861      	ldr	r1, [r4, #4]
 801ad3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ad40:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ad44:	fb01 2000 	mla	r0, r1, r0, r2
 801ad48:	6822      	ldr	r2, [r4, #0]
 801ad4a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ad4e:	f8d8 2000 	ldr.w	r2, [r8]
 801ad52:	9200      	str	r2, [sp, #0]
 801ad54:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ad58:	9201      	str	r2, [sp, #4]
 801ad5a:	f1bb 0f00 	cmp.w	fp, #0
 801ad5e:	dc03      	bgt.n	801ad68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ad60:	9a03      	ldr	r2, [sp, #12]
 801ad62:	2a00      	cmp	r2, #0
 801ad64:	f340 8146 	ble.w	801aff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ad68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad6a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ad6e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad74:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ad78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	dd0e      	ble.n	801ad9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ad80:	140c      	asrs	r4, r1, #16
 801ad82:	d405      	bmi.n	801ad90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ad84:	42bc      	cmp	r4, r7
 801ad86:	da03      	bge.n	801ad90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ad88:	1414      	asrs	r4, r2, #16
 801ad8a:	d401      	bmi.n	801ad90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ad8c:	42b4      	cmp	r4, r6
 801ad8e:	db07      	blt.n	801ada0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ad90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ad92:	3b01      	subs	r3, #1
 801ad94:	3002      	adds	r0, #2
 801ad96:	4421      	add	r1, r4
 801ad98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ad9a:	4422      	add	r2, r4
 801ad9c:	e7ee      	b.n	801ad7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ad9e:	d017      	beq.n	801add0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ada0:	1e5c      	subs	r4, r3, #1
 801ada2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ada4:	fb05 1504 	mla	r5, r5, r4, r1
 801ada8:	142d      	asrs	r5, r5, #16
 801adaa:	d409      	bmi.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801adac:	42bd      	cmp	r5, r7
 801adae:	da07      	bge.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801adb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801adb2:	fb05 2404 	mla	r4, r5, r4, r2
 801adb6:	1424      	asrs	r4, r4, #16
 801adb8:	d402      	bmi.n	801adc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801adba:	42b4      	cmp	r4, r6
 801adbc:	f2c0 80b3 	blt.w	801af26 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801adc0:	2600      	movs	r6, #0
 801adc2:	199c      	adds	r4, r3, r6
 801adc4:	2c00      	cmp	r4, #0
 801adc6:	dc3e      	bgt.n	801ae46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801adc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801adcc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801add0:	f1bb 0f00 	cmp.w	fp, #0
 801add4:	f340 810e 	ble.w	801aff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801add8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801addc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ade2:	f1bb 0b01 	subs.w	fp, fp, #1
 801ade6:	eeb0 6a62 	vmov.f32	s12, s5
 801adea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801adee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801adf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adf6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801adfa:	eeb0 6a43 	vmov.f32	s12, s6
 801adfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae02:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ae06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae1e:	ee12 2a90 	vmov	r2, s5
 801ae22:	eef0 2a47 	vmov.f32	s5, s14
 801ae26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae2a:	ee13 2a10 	vmov	r2, s6
 801ae2e:	9311      	str	r3, [sp, #68]	; 0x44
 801ae30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae32:	eeb0 3a67 	vmov.f32	s6, s15
 801ae36:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae3a:	9a03      	ldr	r2, [sp, #12]
 801ae3c:	9312      	str	r3, [sp, #72]	; 0x48
 801ae3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae40:	bf08      	it	eq
 801ae42:	4613      	moveq	r3, r2
 801ae44:	e789      	b.n	801ad5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ae46:	140f      	asrs	r7, r1, #16
 801ae48:	d418      	bmi.n	801ae7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ae4e:	42bd      	cmp	r5, r7
 801ae50:	dd14      	ble.n	801ae7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae52:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ae56:	d411      	bmi.n	801ae7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae58:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ae5c:	4564      	cmp	r4, ip
 801ae5e:	dd0d      	ble.n	801ae7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae60:	b22d      	sxth	r5, r5
 801ae62:	9c01      	ldr	r4, [sp, #4]
 801ae64:	fb0c 7505 	mla	r5, ip, r5, r7
 801ae68:	5d64      	ldrb	r4, [r4, r5]
 801ae6a:	2cff      	cmp	r4, #255	; 0xff
 801ae6c:	d10c      	bne.n	801ae88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ae6e:	9c00      	ldr	r4, [sp, #0]
 801ae70:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ae74:	f06f 0401 	mvn.w	r4, #1
 801ae78:	4374      	muls	r4, r6
 801ae7a:	5305      	strh	r5, [r0, r4]
 801ae7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae7e:	3e01      	subs	r6, #1
 801ae80:	4421      	add	r1, r4
 801ae82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ae84:	4422      	add	r2, r4
 801ae86:	e79c      	b.n	801adc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ae88:	2c00      	cmp	r4, #0
 801ae8a:	d0f7      	beq.n	801ae7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ae8c:	9f00      	ldr	r7, [sp, #0]
 801ae8e:	fa1f fc84 	uxth.w	ip, r4
 801ae92:	43e4      	mvns	r4, r4
 801ae94:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ae98:	f06f 0501 	mvn.w	r5, #1
 801ae9c:	b2e4      	uxtb	r4, r4
 801ae9e:	4375      	muls	r5, r6
 801aea0:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801aea4:	9502      	str	r5, [sp, #8]
 801aea6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801aeaa:	5b45      	ldrh	r5, [r0, r5]
 801aeac:	122f      	asrs	r7, r5, #8
 801aeae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aeb2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aeb6:	00ed      	lsls	r5, r5, #3
 801aeb8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801aebc:	fb17 f704 	smulbb	r7, r7, r4
 801aec0:	b2ed      	uxtb	r5, r5
 801aec2:	fb1a fa04 	smulbb	sl, sl, r4
 801aec6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801aeca:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801aece:	fb15 f504 	smulbb	r5, r5, r4
 801aed2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801aed6:	fa1f fe8e 	uxth.w	lr, lr
 801aeda:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aede:	fa5f f989 	uxtb.w	r9, r9
 801aee2:	fb07 a70c 	mla	r7, r7, ip, sl
 801aee6:	f10e 0401 	add.w	r4, lr, #1
 801aeea:	fb09 550c 	mla	r5, r9, ip, r5
 801aeee:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801aef2:	9c02      	ldr	r4, [sp, #8]
 801aef4:	b2ad      	uxth	r5, r5
 801aef6:	b2bf      	uxth	r7, r7
 801aef8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801aefc:	f105 0a01 	add.w	sl, r5, #1
 801af00:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801af04:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801af08:	ea4a 0e0e 	orr.w	lr, sl, lr
 801af0c:	f107 0a01 	add.w	sl, r7, #1
 801af10:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801af14:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af18:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af1c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801af20:	f820 e004 	strh.w	lr, [r0, r4]
 801af24:	e7aa      	b.n	801ae7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801af26:	f04f 0900 	mov.w	r9, #0
 801af2a:	eba3 0409 	sub.w	r4, r3, r9
 801af2e:	2c00      	cmp	r4, #0
 801af30:	f77f af4a 	ble.w	801adc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801af34:	1414      	asrs	r4, r2, #16
 801af36:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801af3a:	140d      	asrs	r5, r1, #16
 801af3c:	fb06 5504 	mla	r5, r6, r4, r5
 801af40:	9c01      	ldr	r4, [sp, #4]
 801af42:	5d64      	ldrb	r4, [r4, r5]
 801af44:	2cff      	cmp	r4, #255	; 0xff
 801af46:	d10b      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801af48:	9c00      	ldr	r4, [sp, #0]
 801af4a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801af4e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801af52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801af54:	f109 0901 	add.w	r9, r9, #1
 801af58:	4421      	add	r1, r4
 801af5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801af5c:	4422      	add	r2, r4
 801af5e:	e7e4      	b.n	801af2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801af60:	2c00      	cmp	r4, #0
 801af62:	d0f6      	beq.n	801af52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801af64:	9e00      	ldr	r6, [sp, #0]
 801af66:	b2a7      	uxth	r7, r4
 801af68:	43e4      	mvns	r4, r4
 801af6a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801af6e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801af72:	b2e4      	uxtb	r4, r4
 801af74:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801af78:	122e      	asrs	r6, r5, #8
 801af7a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801af7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af82:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801af86:	00ed      	lsls	r5, r5, #3
 801af88:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af8c:	fb16 f604 	smulbb	r6, r6, r4
 801af90:	b2ed      	uxtb	r5, r5
 801af92:	fb1a fa04 	smulbb	sl, sl, r4
 801af96:	fb0c 6c07 	mla	ip, ip, r7, r6
 801af9a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801af9e:	fb15 f504 	smulbb	r5, r5, r4
 801afa2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801afa6:	fa1f fc8c 	uxth.w	ip, ip
 801afaa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801afae:	fa5f fe8e 	uxtb.w	lr, lr
 801afb2:	fb06 a607 	mla	r6, r6, r7, sl
 801afb6:	f10c 0401 	add.w	r4, ip, #1
 801afba:	fb0e 5507 	mla	r5, lr, r7, r5
 801afbe:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801afc2:	b2ad      	uxth	r5, r5
 801afc4:	b2b6      	uxth	r6, r6
 801afc6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801afca:	f105 0a01 	add.w	sl, r5, #1
 801afce:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801afd2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801afd6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801afda:	f106 0a01 	add.w	sl, r6, #1
 801afde:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801afe2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afe6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801afee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801aff2:	e7ae      	b.n	801af52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801aff4:	b005      	add	sp, #20
 801aff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801affa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801affa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801affe:	b085      	sub	sp, #20
 801b000:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b002:	9203      	str	r2, [sp, #12]
 801b004:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b008:	9100      	str	r1, [sp, #0]
 801b00a:	9201      	str	r2, [sp, #4]
 801b00c:	6841      	ldr	r1, [r0, #4]
 801b00e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b012:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b016:	fb01 2404 	mla	r4, r1, r4, r2
 801b01a:	6802      	ldr	r2, [r0, #0]
 801b01c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b020:	f8de 2000 	ldr.w	r2, [lr]
 801b024:	9202      	str	r2, [sp, #8]
 801b026:	9a01      	ldr	r2, [sp, #4]
 801b028:	43d6      	mvns	r6, r2
 801b02a:	b2f6      	uxtb	r6, r6
 801b02c:	9a00      	ldr	r2, [sp, #0]
 801b02e:	2a00      	cmp	r2, #0
 801b030:	dc03      	bgt.n	801b03a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b032:	9a03      	ldr	r2, [sp, #12]
 801b034:	2a00      	cmp	r2, #0
 801b036:	f340 8124 	ble.w	801b282 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b03a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b03c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b040:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b046:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b04a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b04e:	2b00      	cmp	r3, #0
 801b050:	dd0e      	ble.n	801b070 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b052:	1408      	asrs	r0, r1, #16
 801b054:	d405      	bmi.n	801b062 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b056:	4560      	cmp	r0, ip
 801b058:	da03      	bge.n	801b062 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b05a:	1410      	asrs	r0, r2, #16
 801b05c:	d401      	bmi.n	801b062 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b05e:	42b8      	cmp	r0, r7
 801b060:	db07      	blt.n	801b072 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b062:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b064:	3b01      	subs	r3, #1
 801b066:	3402      	adds	r4, #2
 801b068:	4401      	add	r1, r0
 801b06a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b06c:	4402      	add	r2, r0
 801b06e:	e7ee      	b.n	801b04e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b070:	d06e      	beq.n	801b150 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b072:	1e58      	subs	r0, r3, #1
 801b074:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b076:	fb05 1500 	mla	r5, r5, r0, r1
 801b07a:	142d      	asrs	r5, r5, #16
 801b07c:	d45c      	bmi.n	801b138 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b07e:	4565      	cmp	r5, ip
 801b080:	da5a      	bge.n	801b138 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b082:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b084:	fb05 2000 	mla	r0, r5, r0, r2
 801b088:	1400      	asrs	r0, r0, #16
 801b08a:	d455      	bmi.n	801b138 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b08c:	42b8      	cmp	r0, r7
 801b08e:	da53      	bge.n	801b138 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b090:	4699      	mov	r9, r3
 801b092:	46a2      	mov	sl, r4
 801b094:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b098:	f1b9 0f00 	cmp.w	r9, #0
 801b09c:	dd54      	ble.n	801b148 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b09e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b0a2:	140d      	asrs	r5, r1, #16
 801b0a4:	1410      	asrs	r0, r2, #16
 801b0a6:	f109 39ff 	add.w	r9, r9, #4294967295
 801b0aa:	fb07 5000 	mla	r0, r7, r0, r5
 801b0ae:	9d02      	ldr	r5, [sp, #8]
 801b0b0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b0b4:	f8ba 5000 	ldrh.w	r5, [sl]
 801b0b8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b0bc:	122f      	asrs	r7, r5, #8
 801b0be:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b0c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b0c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b0ca:	00ed      	lsls	r5, r5, #3
 801b0cc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b0d0:	fb17 f706 	smulbb	r7, r7, r6
 801b0d4:	b2ed      	uxtb	r5, r5
 801b0d6:	fb18 f806 	smulbb	r8, r8, r6
 801b0da:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b0de:	10c7      	asrs	r7, r0, #3
 801b0e0:	fb15 f506 	smulbb	r5, r5, r6
 801b0e4:	00c0      	lsls	r0, r0, #3
 801b0e6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b0ea:	fa1f fc8c 	uxth.w	ip, ip
 801b0ee:	b2c0      	uxtb	r0, r0
 801b0f0:	fb07 870b 	mla	r7, r7, fp, r8
 801b0f4:	fb00 500b 	mla	r0, r0, fp, r5
 801b0f8:	f10c 0501 	add.w	r5, ip, #1
 801b0fc:	b2bf      	uxth	r7, r7
 801b0fe:	b280      	uxth	r0, r0
 801b100:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b104:	f107 0801 	add.w	r8, r7, #1
 801b108:	1c45      	adds	r5, r0, #1
 801b10a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b10e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b112:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b116:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b118:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b11c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b120:	4401      	add	r1, r0
 801b122:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b126:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b128:	ea45 0c0c 	orr.w	ip, r5, ip
 801b12c:	4402      	add	r2, r0
 801b12e:	ea4c 0c08 	orr.w	ip, ip, r8
 801b132:	f82a cb02 	strh.w	ip, [sl], #2
 801b136:	e7af      	b.n	801b098 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b138:	f04f 0800 	mov.w	r8, #0
 801b13c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b140:	eb03 0008 	add.w	r0, r3, r8
 801b144:	2800      	cmp	r0, #0
 801b146:	dc41      	bgt.n	801b1cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b14c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b150:	9b00      	ldr	r3, [sp, #0]
 801b152:	2b00      	cmp	r3, #0
 801b154:	f340 8095 	ble.w	801b282 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b15e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b162:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b166:	eef0 6a62 	vmov.f32	s13, s5
 801b16a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b16e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b172:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b176:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b17a:	eef0 6a43 	vmov.f32	s13, s6
 801b17e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b182:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b186:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b18a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b18e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b192:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b196:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b19a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b19e:	ee12 2a90 	vmov	r2, s5
 801b1a2:	eef0 2a47 	vmov.f32	s5, s14
 801b1a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1aa:	ee13 2a10 	vmov	r2, s6
 801b1ae:	9311      	str	r3, [sp, #68]	; 0x44
 801b1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1b2:	eeb0 3a67 	vmov.f32	s6, s15
 801b1b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1ba:	9312      	str	r3, [sp, #72]	; 0x48
 801b1bc:	9b00      	ldr	r3, [sp, #0]
 801b1be:	9a03      	ldr	r2, [sp, #12]
 801b1c0:	3b01      	subs	r3, #1
 801b1c2:	9300      	str	r3, [sp, #0]
 801b1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1c6:	bf08      	it	eq
 801b1c8:	4613      	moveq	r3, r2
 801b1ca:	e72f      	b.n	801b02c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b1cc:	140f      	asrs	r7, r1, #16
 801b1ce:	d451      	bmi.n	801b274 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b1d0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b1d4:	42bd      	cmp	r5, r7
 801b1d6:	dd4d      	ble.n	801b274 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b1d8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b1dc:	d44a      	bmi.n	801b274 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b1de:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b1e2:	4560      	cmp	r0, ip
 801b1e4:	dd46      	ble.n	801b274 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b1e6:	b22d      	sxth	r5, r5
 801b1e8:	9802      	ldr	r0, [sp, #8]
 801b1ea:	fb0c 7505 	mla	r5, ip, r5, r7
 801b1ee:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b1f2:	f06f 0501 	mvn.w	r5, #1
 801b1f6:	fb05 fb08 	mul.w	fp, r5, r8
 801b1fa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b1fe:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b202:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b206:	122f      	asrs	r7, r5, #8
 801b208:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b20c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b210:	00ed      	lsls	r5, r5, #3
 801b212:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b216:	fb17 f706 	smulbb	r7, r7, r6
 801b21a:	b2ed      	uxtb	r5, r5
 801b21c:	fb19 f906 	smulbb	r9, r9, r6
 801b220:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b224:	10c7      	asrs	r7, r0, #3
 801b226:	fb15 f506 	smulbb	r5, r5, r6
 801b22a:	00c0      	lsls	r0, r0, #3
 801b22c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b230:	fa1f fc8c 	uxth.w	ip, ip
 801b234:	b2c0      	uxtb	r0, r0
 801b236:	fb07 970a 	mla	r7, r7, sl, r9
 801b23a:	fb00 500a 	mla	r0, r0, sl, r5
 801b23e:	f10c 0501 	add.w	r5, ip, #1
 801b242:	b2bf      	uxth	r7, r7
 801b244:	b280      	uxth	r0, r0
 801b246:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b24a:	f107 0901 	add.w	r9, r7, #1
 801b24e:	1c45      	adds	r5, r0, #1
 801b250:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b254:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b258:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b25c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b260:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b264:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b268:	ea45 0c0c 	orr.w	ip, r5, ip
 801b26c:	ea4c 0c09 	orr.w	ip, ip, r9
 801b270:	f824 c00b 	strh.w	ip, [r4, fp]
 801b274:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b276:	f108 38ff 	add.w	r8, r8, #4294967295
 801b27a:	4401      	add	r1, r0
 801b27c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b27e:	4402      	add	r2, r0
 801b280:	e75e      	b.n	801b140 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b282:	b005      	add	sp, #20
 801b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b288 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28c:	b085      	sub	sp, #20
 801b28e:	4693      	mov	fp, r2
 801b290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b294:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b296:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b298:	6870      	ldr	r0, [r6, #4]
 801b29a:	9101      	str	r1, [sp, #4]
 801b29c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b2a0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b2a4:	fb00 2404 	mla	r4, r0, r4, r2
 801b2a8:	6832      	ldr	r2, [r6, #0]
 801b2aa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b2ae:	682a      	ldr	r2, [r5, #0]
 801b2b0:	9202      	str	r2, [sp, #8]
 801b2b2:	9a01      	ldr	r2, [sp, #4]
 801b2b4:	2a00      	cmp	r2, #0
 801b2b6:	dc03      	bgt.n	801b2c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b2b8:	f1bb 0f00 	cmp.w	fp, #0
 801b2bc:	f340 809a 	ble.w	801b3f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b2c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b2c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b2c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b2ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b2cc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b2d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	dd0c      	ble.n	801b2f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b2d8:	1406      	asrs	r6, r0, #16
 801b2da:	d405      	bmi.n	801b2e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2dc:	454e      	cmp	r6, r9
 801b2de:	da03      	bge.n	801b2e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2e0:	1416      	asrs	r6, r2, #16
 801b2e2:	d401      	bmi.n	801b2e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2e4:	4546      	cmp	r6, r8
 801b2e6:	db05      	blt.n	801b2f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b2e8:	4470      	add	r0, lr
 801b2ea:	4462      	add	r2, ip
 801b2ec:	3b01      	subs	r3, #1
 801b2ee:	3402      	adds	r4, #2
 801b2f0:	e7f0      	b.n	801b2d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b2f2:	d00f      	beq.n	801b314 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b2f4:	1e5e      	subs	r6, r3, #1
 801b2f6:	fb0e 0706 	mla	r7, lr, r6, r0
 801b2fa:	143f      	asrs	r7, r7, #16
 801b2fc:	d541      	bpl.n	801b382 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b2fe:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b302:	4698      	mov	r8, r3
 801b304:	9603      	str	r6, [sp, #12]
 801b306:	f1b8 0f00 	cmp.w	r8, #0
 801b30a:	dc56      	bgt.n	801b3ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b30c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b310:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b314:	9b01      	ldr	r3, [sp, #4]
 801b316:	2b00      	cmp	r3, #0
 801b318:	dd6c      	ble.n	801b3f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b31a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b320:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b324:	eeb0 6a62 	vmov.f32	s12, s5
 801b328:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b32c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b330:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b334:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b338:	eeb0 6a43 	vmov.f32	s12, s6
 801b33c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b340:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b344:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b348:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b34c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b350:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b354:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b358:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b35c:	ee12 2a90 	vmov	r2, s5
 801b360:	eef0 2a47 	vmov.f32	s5, s14
 801b364:	fb92 fef3 	sdiv	lr, r2, r3
 801b368:	ee13 2a10 	vmov	r2, s6
 801b36c:	eeb0 3a67 	vmov.f32	s6, s15
 801b370:	fb92 fcf3 	sdiv	ip, r2, r3
 801b374:	9b01      	ldr	r3, [sp, #4]
 801b376:	3b01      	subs	r3, #1
 801b378:	9301      	str	r3, [sp, #4]
 801b37a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b37c:	bf08      	it	eq
 801b37e:	465b      	moveq	r3, fp
 801b380:	e797      	b.n	801b2b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b382:	454f      	cmp	r7, r9
 801b384:	dabb      	bge.n	801b2fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b386:	fb0c 2606 	mla	r6, ip, r6, r2
 801b38a:	1436      	asrs	r6, r6, #16
 801b38c:	d4b7      	bmi.n	801b2fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b38e:	4546      	cmp	r6, r8
 801b390:	dab5      	bge.n	801b2fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b392:	461e      	mov	r6, r3
 801b394:	46a0      	mov	r8, r4
 801b396:	2e00      	cmp	r6, #0
 801b398:	ddb8      	ble.n	801b30c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b39a:	1417      	asrs	r7, r2, #16
 801b39c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b3a0:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b3a4:	9902      	ldr	r1, [sp, #8]
 801b3a6:	4470      	add	r0, lr
 801b3a8:	4462      	add	r2, ip
 801b3aa:	fb0a 9707 	mla	r7, sl, r7, r9
 801b3ae:	3e01      	subs	r6, #1
 801b3b0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b3b4:	f828 7b02 	strh.w	r7, [r8], #2
 801b3b8:	e7ed      	b.n	801b396 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b3ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b3be:	d414      	bmi.n	801b3ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b3c0:	68ae      	ldr	r6, [r5, #8]
 801b3c2:	454e      	cmp	r6, r9
 801b3c4:	dd11      	ble.n	801b3ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b3c6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b3ca:	d40e      	bmi.n	801b3ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b3cc:	68ef      	ldr	r7, [r5, #12]
 801b3ce:	4557      	cmp	r7, sl
 801b3d0:	dd0b      	ble.n	801b3ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b3d2:	b236      	sxth	r6, r6
 801b3d4:	f06f 0101 	mvn.w	r1, #1
 801b3d8:	9f02      	ldr	r7, [sp, #8]
 801b3da:	fb0a 9606 	mla	r6, sl, r6, r9
 801b3de:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b3e2:	fb01 f608 	mul.w	r6, r1, r8
 801b3e6:	9903      	ldr	r1, [sp, #12]
 801b3e8:	538f      	strh	r7, [r1, r6]
 801b3ea:	4470      	add	r0, lr
 801b3ec:	4462      	add	r2, ip
 801b3ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3f2:	e788      	b.n	801b306 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b3f4:	b005      	add	sp, #20
 801b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b3fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3fe:	b087      	sub	sp, #28
 801b400:	468b      	mov	fp, r1
 801b402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b406:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b408:	9203      	str	r2, [sp, #12]
 801b40a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b40e:	6841      	ldr	r1, [r0, #4]
 801b410:	9204      	str	r2, [sp, #16]
 801b412:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b416:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b41a:	fb01 2505 	mla	r5, r1, r5, r2
 801b41e:	6802      	ldr	r2, [r0, #0]
 801b420:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b424:	f8d9 2000 	ldr.w	r2, [r9]
 801b428:	9201      	str	r2, [sp, #4]
 801b42a:	f1bb 0f00 	cmp.w	fp, #0
 801b42e:	dc03      	bgt.n	801b438 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b430:	9a03      	ldr	r2, [sp, #12]
 801b432:	2a00      	cmp	r2, #0
 801b434:	f340 8158 	ble.w	801b6e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b438:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b43a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b43e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b442:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b444:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b448:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	dd0e      	ble.n	801b46e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b450:	1402      	asrs	r2, r0, #16
 801b452:	d405      	bmi.n	801b460 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b454:	42ba      	cmp	r2, r7
 801b456:	da03      	bge.n	801b460 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b458:	140a      	asrs	r2, r1, #16
 801b45a:	d401      	bmi.n	801b460 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b45c:	42b2      	cmp	r2, r6
 801b45e:	db07      	blt.n	801b470 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b462:	3b01      	subs	r3, #1
 801b464:	3502      	adds	r5, #2
 801b466:	4410      	add	r0, r2
 801b468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b46a:	4411      	add	r1, r2
 801b46c:	e7ee      	b.n	801b44c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b46e:	d017      	beq.n	801b4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b470:	1e5a      	subs	r2, r3, #1
 801b472:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b474:	fb04 0402 	mla	r4, r4, r2, r0
 801b478:	1424      	asrs	r4, r4, #16
 801b47a:	d409      	bmi.n	801b490 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b47c:	42bc      	cmp	r4, r7
 801b47e:	da07      	bge.n	801b490 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b480:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b482:	fb04 1202 	mla	r2, r4, r2, r1
 801b486:	1412      	asrs	r2, r2, #16
 801b488:	d402      	bmi.n	801b490 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b48a:	42b2      	cmp	r2, r6
 801b48c:	f2c0 80bf 	blt.w	801b60e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b490:	2700      	movs	r7, #0
 801b492:	19da      	adds	r2, r3, r7
 801b494:	2a00      	cmp	r2, #0
 801b496:	dc3e      	bgt.n	801b516 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b498:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b49c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b4a0:	f1bb 0f00 	cmp.w	fp, #0
 801b4a4:	f340 8120 	ble.w	801b6e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b4a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b4b2:	f1bb 0b01 	subs.w	fp, fp, #1
 801b4b6:	eeb0 6a62 	vmov.f32	s12, s5
 801b4ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b4be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b4c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b4c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b4ca:	eeb0 6a43 	vmov.f32	s12, s6
 801b4ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b4d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b4d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b4da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b4e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b4e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b4ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b4ee:	ee12 2a90 	vmov	r2, s5
 801b4f2:	eef0 2a47 	vmov.f32	s5, s14
 801b4f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4fa:	ee13 2a10 	vmov	r2, s6
 801b4fe:	9313      	str	r3, [sp, #76]	; 0x4c
 801b500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b502:	eeb0 3a67 	vmov.f32	s6, s15
 801b506:	fb92 f3f3 	sdiv	r3, r2, r3
 801b50a:	9a03      	ldr	r2, [sp, #12]
 801b50c:	9314      	str	r3, [sp, #80]	; 0x50
 801b50e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b510:	bf08      	it	eq
 801b512:	4613      	moveq	r3, r2
 801b514:	e789      	b.n	801b42a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b516:	1406      	asrs	r6, r0, #16
 801b518:	d42d      	bmi.n	801b576 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b51a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b51e:	42b4      	cmp	r4, r6
 801b520:	dd29      	ble.n	801b576 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b522:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b526:	d426      	bmi.n	801b576 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b528:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b52c:	4562      	cmp	r2, ip
 801b52e:	dd22      	ble.n	801b576 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b530:	b224      	sxth	r4, r4
 801b532:	9a01      	ldr	r2, [sp, #4]
 801b534:	fb0c 6404 	mla	r4, ip, r4, r6
 801b538:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b53c:	0e22      	lsrs	r2, r4, #24
 801b53e:	d01a      	beq.n	801b576 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b540:	9e04      	ldr	r6, [sp, #16]
 801b542:	4372      	muls	r2, r6
 801b544:	1c56      	adds	r6, r2, #1
 801b546:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b54a:	0a26      	lsrs	r6, r4, #8
 801b54c:	1212      	asrs	r2, r2, #8
 801b54e:	9605      	str	r6, [sp, #20]
 801b550:	2aff      	cmp	r2, #255	; 0xff
 801b552:	d116      	bne.n	801b582 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b554:	f06f 0201 	mvn.w	r2, #1
 801b558:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b55c:	fb02 fc07 	mul.w	ip, r2, r7
 801b560:	0962      	lsrs	r2, r4, #5
 801b562:	f026 0607 	bic.w	r6, r6, #7
 801b566:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b56a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b56e:	4316      	orrs	r6, r2
 801b570:	4326      	orrs	r6, r4
 801b572:	f825 600c 	strh.w	r6, [r5, ip]
 801b576:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b578:	3f01      	subs	r7, #1
 801b57a:	4410      	add	r0, r2
 801b57c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b57e:	4411      	add	r1, r2
 801b580:	e787      	b.n	801b492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b582:	f06f 0601 	mvn.w	r6, #1
 801b586:	fa1f fa82 	uxth.w	sl, r2
 801b58a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b58e:	43d2      	mvns	r2, r2
 801b590:	437e      	muls	r6, r7
 801b592:	b2e4      	uxtb	r4, r4
 801b594:	fb1c fc0a 	smulbb	ip, ip, sl
 801b598:	b2d2      	uxtb	r2, r2
 801b59a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b59e:	fb14 f40a 	smulbb	r4, r4, sl
 801b5a2:	9602      	str	r6, [sp, #8]
 801b5a4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b5a8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b5ac:	fb16 f60a 	smulbb	r6, r6, sl
 801b5b0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b5b4:	fb0e ce02 	mla	lr, lr, r2, ip
 801b5b8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b5bc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b5c0:	fa1f fe8e 	uxth.w	lr, lr
 801b5c4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b5c8:	fa5f f888 	uxtb.w	r8, r8
 801b5cc:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b5d0:	fb08 4402 	mla	r4, r8, r2, r4
 801b5d4:	f10e 0201 	add.w	r2, lr, #1
 801b5d8:	fa1f fc8c 	uxth.w	ip, ip
 801b5dc:	b2a4      	uxth	r4, r4
 801b5de:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b5e2:	9a02      	ldr	r2, [sp, #8]
 801b5e4:	1c66      	adds	r6, r4, #1
 801b5e6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b5ea:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b5ee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b5f2:	ea46 0e0e 	orr.w	lr, r6, lr
 801b5f6:	f10c 0601 	add.w	r6, ip, #1
 801b5fa:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b5fe:	0976      	lsrs	r6, r6, #5
 801b600:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b604:	ea4e 0e06 	orr.w	lr, lr, r6
 801b608:	f825 e002 	strh.w	lr, [r5, r2]
 801b60c:	e7b3      	b.n	801b576 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b60e:	f04f 0800 	mov.w	r8, #0
 801b612:	eba3 0208 	sub.w	r2, r3, r8
 801b616:	2a00      	cmp	r2, #0
 801b618:	f77f af3e 	ble.w	801b498 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b61c:	1404      	asrs	r4, r0, #16
 801b61e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b622:	140a      	asrs	r2, r1, #16
 801b624:	fb06 4202 	mla	r2, r6, r2, r4
 801b628:	9c01      	ldr	r4, [sp, #4]
 801b62a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b62e:	0e22      	lsrs	r2, r4, #24
 801b630:	d015      	beq.n	801b65e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b632:	9e04      	ldr	r6, [sp, #16]
 801b634:	4372      	muls	r2, r6
 801b636:	1c56      	adds	r6, r2, #1
 801b638:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b63c:	0a26      	lsrs	r6, r4, #8
 801b63e:	1212      	asrs	r2, r2, #8
 801b640:	2aff      	cmp	r2, #255	; 0xff
 801b642:	d113      	bne.n	801b66c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b644:	0962      	lsrs	r2, r4, #5
 801b646:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b64a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b64e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b652:	f026 0607 	bic.w	r6, r6, #7
 801b656:	4316      	orrs	r6, r2
 801b658:	4326      	orrs	r6, r4
 801b65a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b65e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b660:	f108 0801 	add.w	r8, r8, #1
 801b664:	4410      	add	r0, r2
 801b666:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b668:	4411      	add	r1, r2
 801b66a:	e7d2      	b.n	801b612 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b66c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b670:	fa1f fa82 	uxth.w	sl, r2
 801b674:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b678:	43d2      	mvns	r2, r2
 801b67a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b67e:	fb17 f70a 	smulbb	r7, r7, sl
 801b682:	b2d2      	uxtb	r2, r2
 801b684:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b688:	b2e4      	uxtb	r4, r4
 801b68a:	b2f6      	uxtb	r6, r6
 801b68c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b690:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b694:	fb14 f40a 	smulbb	r4, r4, sl
 801b698:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b69c:	fa1f fc8c 	uxth.w	ip, ip
 801b6a0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b6a4:	fb16 f60a 	smulbb	r6, r6, sl
 801b6a8:	fa5f fe8e 	uxtb.w	lr, lr
 801b6ac:	fb0e 4402 	mla	r4, lr, r2, r4
 801b6b0:	fb07 6702 	mla	r7, r7, r2, r6
 801b6b4:	f10c 0201 	add.w	r2, ip, #1
 801b6b8:	b2a4      	uxth	r4, r4
 801b6ba:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b6be:	1c66      	adds	r6, r4, #1
 801b6c0:	b2bf      	uxth	r7, r7
 801b6c2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b6c6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b6ca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b6ce:	ea46 0c0c 	orr.w	ip, r6, ip
 801b6d2:	1c7e      	adds	r6, r7, #1
 801b6d4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b6d8:	0976      	lsrs	r6, r6, #5
 801b6da:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b6de:	ea4c 0c06 	orr.w	ip, ip, r6
 801b6e2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b6e6:	e7ba      	b.n	801b65e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b6e8:	b007      	add	sp, #28
 801b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b6f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f4:	b085      	sub	sp, #20
 801b6f6:	468b      	mov	fp, r1
 801b6f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b6fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b6fe:	9203      	str	r2, [sp, #12]
 801b700:	6841      	ldr	r1, [r0, #4]
 801b702:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b706:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b70a:	fb01 2404 	mla	r4, r1, r4, r2
 801b70e:	6802      	ldr	r2, [r0, #0]
 801b710:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b714:	f8d8 2000 	ldr.w	r2, [r8]
 801b718:	9201      	str	r2, [sp, #4]
 801b71a:	f1bb 0f00 	cmp.w	fp, #0
 801b71e:	dc03      	bgt.n	801b728 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b720:	9a03      	ldr	r2, [sp, #12]
 801b722:	2a00      	cmp	r2, #0
 801b724:	f340 814f 	ble.w	801b9c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b72a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b72e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b732:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b734:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b738:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	dd0e      	ble.n	801b75e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b740:	1408      	asrs	r0, r1, #16
 801b742:	d405      	bmi.n	801b750 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b744:	42b8      	cmp	r0, r7
 801b746:	da03      	bge.n	801b750 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b748:	1410      	asrs	r0, r2, #16
 801b74a:	d401      	bmi.n	801b750 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b74c:	42b0      	cmp	r0, r6
 801b74e:	db07      	blt.n	801b760 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b750:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b752:	3b01      	subs	r3, #1
 801b754:	3402      	adds	r4, #2
 801b756:	4401      	add	r1, r0
 801b758:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b75a:	4402      	add	r2, r0
 801b75c:	e7ee      	b.n	801b73c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b75e:	d017      	beq.n	801b790 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b760:	1e58      	subs	r0, r3, #1
 801b762:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b764:	fb05 1500 	mla	r5, r5, r0, r1
 801b768:	142d      	asrs	r5, r5, #16
 801b76a:	d409      	bmi.n	801b780 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b76c:	42bd      	cmp	r5, r7
 801b76e:	da07      	bge.n	801b780 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b770:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b772:	fb05 2000 	mla	r0, r5, r0, r2
 801b776:	1400      	asrs	r0, r0, #16
 801b778:	d402      	bmi.n	801b780 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b77a:	42b0      	cmp	r0, r6
 801b77c:	f2c0 80ba 	blt.w	801b8f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b780:	2600      	movs	r6, #0
 801b782:	1998      	adds	r0, r3, r6
 801b784:	2800      	cmp	r0, #0
 801b786:	dc3e      	bgt.n	801b806 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b788:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b78c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b790:	f1bb 0f00 	cmp.w	fp, #0
 801b794:	f340 8117 	ble.w	801b9c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b798:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b79e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7a2:	f1bb 0b01 	subs.w	fp, fp, #1
 801b7a6:	eeb0 6a62 	vmov.f32	s12, s5
 801b7aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b7ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b7b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b7ba:	eeb0 6a43 	vmov.f32	s12, s6
 801b7be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b7c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b7ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b7ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b7d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b7d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b7da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b7de:	ee12 2a90 	vmov	r2, s5
 801b7e2:	eef0 2a47 	vmov.f32	s5, s14
 801b7e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7ea:	ee13 2a10 	vmov	r2, s6
 801b7ee:	9311      	str	r3, [sp, #68]	; 0x44
 801b7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7f2:	eeb0 3a67 	vmov.f32	s6, s15
 801b7f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7fa:	9a03      	ldr	r2, [sp, #12]
 801b7fc:	9312      	str	r3, [sp, #72]	; 0x48
 801b7fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b800:	bf08      	it	eq
 801b802:	4613      	moveq	r3, r2
 801b804:	e789      	b.n	801b71a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b806:	140f      	asrs	r7, r1, #16
 801b808:	d424      	bmi.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b80a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b80e:	42bd      	cmp	r5, r7
 801b810:	dd20      	ble.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b812:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b816:	d41d      	bmi.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b818:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b81c:	4560      	cmp	r0, ip
 801b81e:	dd19      	ble.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b820:	b22d      	sxth	r5, r5
 801b822:	9801      	ldr	r0, [sp, #4]
 801b824:	fb0c 7505 	mla	r5, ip, r5, r7
 801b828:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b82c:	0e07      	lsrs	r7, r0, #24
 801b82e:	2fff      	cmp	r7, #255	; 0xff
 801b830:	d116      	bne.n	801b860 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b832:	f06f 0501 	mvn.w	r5, #1
 801b836:	fb05 f706 	mul.w	r7, r5, r6
 801b83a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b83e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b842:	0945      	lsrs	r5, r0, #5
 801b844:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b848:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b84c:	ea4c 0505 	orr.w	r5, ip, r5
 801b850:	4305      	orrs	r5, r0
 801b852:	53e5      	strh	r5, [r4, r7]
 801b854:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b856:	3e01      	subs	r6, #1
 801b858:	4401      	add	r1, r0
 801b85a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b85c:	4402      	add	r2, r0
 801b85e:	e790      	b.n	801b782 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b860:	b2fd      	uxtb	r5, r7
 801b862:	2f00      	cmp	r7, #0
 801b864:	d0f6      	beq.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b866:	f06f 0701 	mvn.w	r7, #1
 801b86a:	fa1f f985 	uxth.w	r9, r5
 801b86e:	43ed      	mvns	r5, r5
 801b870:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b874:	4377      	muls	r7, r6
 801b876:	fb1a fa09 	smulbb	sl, sl, r9
 801b87a:	b2ed      	uxtb	r5, r5
 801b87c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b880:	9702      	str	r7, [sp, #8]
 801b882:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b886:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b88a:	fb17 f709 	smulbb	r7, r7, r9
 801b88e:	b2c0      	uxtb	r0, r0
 801b890:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b894:	fb10 f009 	smulbb	r0, r0, r9
 801b898:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b89c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b8a0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b8a4:	fa1f fc8c 	uxth.w	ip, ip
 801b8a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b8ac:	fa5f fe8e 	uxtb.w	lr, lr
 801b8b0:	fb07 a705 	mla	r7, r7, r5, sl
 801b8b4:	fb0e 0005 	mla	r0, lr, r5, r0
 801b8b8:	f10c 0501 	add.w	r5, ip, #1
 801b8bc:	b2bf      	uxth	r7, r7
 801b8be:	b280      	uxth	r0, r0
 801b8c0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b8c4:	f100 0a01 	add.w	sl, r0, #1
 801b8c8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b8cc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b8d0:	9802      	ldr	r0, [sp, #8]
 801b8d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b8d6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b8da:	f107 0a01 	add.w	sl, r7, #1
 801b8de:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b8e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b8e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b8ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b8ee:	f824 c000 	strh.w	ip, [r4, r0]
 801b8f2:	e7af      	b.n	801b854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b8f4:	f04f 0e00 	mov.w	lr, #0
 801b8f8:	eba3 000e 	sub.w	r0, r3, lr
 801b8fc:	2800      	cmp	r0, #0
 801b8fe:	f77f af43 	ble.w	801b788 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b902:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b906:	140d      	asrs	r5, r1, #16
 801b908:	1410      	asrs	r0, r2, #16
 801b90a:	fb06 5000 	mla	r0, r6, r0, r5
 801b90e:	9d01      	ldr	r5, [sp, #4]
 801b910:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b914:	0e2e      	lsrs	r6, r5, #24
 801b916:	2eff      	cmp	r6, #255	; 0xff
 801b918:	d112      	bne.n	801b940 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b91a:	482c      	ldr	r0, [pc, #176]	; (801b9cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b91c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b920:	0968      	lsrs	r0, r5, #5
 801b922:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b926:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b92a:	4330      	orrs	r0, r6
 801b92c:	4328      	orrs	r0, r5
 801b92e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b932:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b934:	f10e 0e01 	add.w	lr, lr, #1
 801b938:	4401      	add	r1, r0
 801b93a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b93c:	4402      	add	r2, r0
 801b93e:	e7db      	b.n	801b8f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b940:	b2f0      	uxtb	r0, r6
 801b942:	2e00      	cmp	r6, #0
 801b944:	d0f5      	beq.n	801b932 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b946:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b94a:	fa1f f980 	uxth.w	r9, r0
 801b94e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b952:	43c0      	mvns	r0, r0
 801b954:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b958:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b95c:	fb16 f609 	smulbb	r6, r6, r9
 801b960:	b2c0      	uxtb	r0, r0
 801b962:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b966:	b2ed      	uxtb	r5, r5
 801b968:	fb1a fa09 	smulbb	sl, sl, r9
 801b96c:	fb07 6700 	mla	r7, r7, r0, r6
 801b970:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b974:	fb15 f509 	smulbb	r5, r5, r9
 801b978:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b97c:	b2bf      	uxth	r7, r7
 801b97e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b982:	fa5f fc8c 	uxtb.w	ip, ip
 801b986:	fb06 a600 	mla	r6, r6, r0, sl
 801b98a:	fb0c 5500 	mla	r5, ip, r0, r5
 801b98e:	1c78      	adds	r0, r7, #1
 801b990:	b2b6      	uxth	r6, r6
 801b992:	b2ad      	uxth	r5, r5
 801b994:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b998:	f105 0a01 	add.w	sl, r5, #1
 801b99c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b9a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b9a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b9a8:	ea4a 0707 	orr.w	r7, sl, r7
 801b9ac:	f106 0a01 	add.w	sl, r6, #1
 801b9b0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b9b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b9b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b9bc:	ea47 070a 	orr.w	r7, r7, sl
 801b9c0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b9c4:	e7b5      	b.n	801b932 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b9c6:	b005      	add	sp, #20
 801b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9cc:	fffff800 	.word	0xfffff800

0801b9d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d4:	b087      	sub	sp, #28
 801b9d6:	468b      	mov	fp, r1
 801b9d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b9dc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b9de:	9203      	str	r2, [sp, #12]
 801b9e0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b9e4:	6841      	ldr	r1, [r0, #4]
 801b9e6:	9204      	str	r2, [sp, #16]
 801b9e8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b9ec:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b9f0:	fb01 2404 	mla	r4, r1, r4, r2
 801b9f4:	6802      	ldr	r2, [r0, #0]
 801b9f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b9fa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b9fe:	3201      	adds	r2, #1
 801ba00:	f022 0201 	bic.w	r2, r2, #1
 801ba04:	9200      	str	r2, [sp, #0]
 801ba06:	f8d9 2000 	ldr.w	r2, [r9]
 801ba0a:	9201      	str	r2, [sp, #4]
 801ba0c:	f1bb 0f00 	cmp.w	fp, #0
 801ba10:	dc03      	bgt.n	801ba1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ba12:	9a03      	ldr	r2, [sp, #12]
 801ba14:	2a00      	cmp	r2, #0
 801ba16:	f340 816a 	ble.w	801bcee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ba1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ba1c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ba20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba26:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ba2a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	dd0e      	ble.n	801ba50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ba32:	1402      	asrs	r2, r0, #16
 801ba34:	d405      	bmi.n	801ba42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ba36:	42ba      	cmp	r2, r7
 801ba38:	da03      	bge.n	801ba42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ba3a:	140a      	asrs	r2, r1, #16
 801ba3c:	d401      	bmi.n	801ba42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ba3e:	42b2      	cmp	r2, r6
 801ba40:	db07      	blt.n	801ba52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ba42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba44:	3b01      	subs	r3, #1
 801ba46:	3402      	adds	r4, #2
 801ba48:	4410      	add	r0, r2
 801ba4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba4c:	4411      	add	r1, r2
 801ba4e:	e7ee      	b.n	801ba2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ba50:	d017      	beq.n	801ba82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ba52:	1e5a      	subs	r2, r3, #1
 801ba54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ba56:	fb05 0502 	mla	r5, r5, r2, r0
 801ba5a:	142d      	asrs	r5, r5, #16
 801ba5c:	d409      	bmi.n	801ba72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ba5e:	42bd      	cmp	r5, r7
 801ba60:	da07      	bge.n	801ba72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ba62:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ba64:	fb05 1202 	mla	r2, r5, r2, r1
 801ba68:	1412      	asrs	r2, r2, #16
 801ba6a:	d402      	bmi.n	801ba72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ba6c:	42b2      	cmp	r2, r6
 801ba6e:	f2c0 80c8 	blt.w	801bc02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ba72:	2700      	movs	r7, #0
 801ba74:	19da      	adds	r2, r3, r7
 801ba76:	2a00      	cmp	r2, #0
 801ba78:	dc3e      	bgt.n	801baf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ba7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba7e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ba82:	f1bb 0f00 	cmp.w	fp, #0
 801ba86:	f340 8132 	ble.w	801bcee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ba8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba94:	f1bb 0b01 	subs.w	fp, fp, #1
 801ba98:	eeb0 6a62 	vmov.f32	s12, s5
 801ba9c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801baa0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801baa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baa8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801baac:	eeb0 6a43 	vmov.f32	s12, s6
 801bab0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bab4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bab8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801babc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bac0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bac4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bac8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bacc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bad0:	ee12 2a90 	vmov	r2, s5
 801bad4:	eef0 2a47 	vmov.f32	s5, s14
 801bad8:	fb92 f3f3 	sdiv	r3, r2, r3
 801badc:	ee13 2a10 	vmov	r2, s6
 801bae0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bae4:	eeb0 3a67 	vmov.f32	s6, s15
 801bae8:	fb92 f3f3 	sdiv	r3, r2, r3
 801baec:	9a03      	ldr	r2, [sp, #12]
 801baee:	9314      	str	r3, [sp, #80]	; 0x50
 801baf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801baf2:	bf08      	it	eq
 801baf4:	4613      	moveq	r3, r2
 801baf6:	e789      	b.n	801ba0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801baf8:	1405      	asrs	r5, r0, #16
 801bafa:	d436      	bmi.n	801bb6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bafc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801bb00:	42aa      	cmp	r2, r5
 801bb02:	dd32      	ble.n	801bb6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb04:	140e      	asrs	r6, r1, #16
 801bb06:	d430      	bmi.n	801bb6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb08:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801bb0c:	42b2      	cmp	r2, r6
 801bb0e:	dd2c      	ble.n	801bb6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb10:	9a00      	ldr	r2, [sp, #0]
 801bb12:	fb06 5502 	mla	r5, r6, r2, r5
 801bb16:	9e01      	ldr	r6, [sp, #4]
 801bb18:	086a      	lsrs	r2, r5, #1
 801bb1a:	5cb2      	ldrb	r2, [r6, r2]
 801bb1c:	07ee      	lsls	r6, r5, #31
 801bb1e:	bf54      	ite	pl
 801bb20:	f002 020f 	andpl.w	r2, r2, #15
 801bb24:	1112      	asrmi	r2, r2, #4
 801bb26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb2a:	b2d2      	uxtb	r2, r2
 801bb2c:	b1ea      	cbz	r2, 801bb6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bb2e:	9d04      	ldr	r5, [sp, #16]
 801bb30:	436a      	muls	r2, r5
 801bb32:	1c55      	adds	r5, r2, #1
 801bb34:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bb38:	4d6e      	ldr	r5, [pc, #440]	; (801bcf4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bb3a:	1212      	asrs	r2, r2, #8
 801bb3c:	682d      	ldr	r5, [r5, #0]
 801bb3e:	2aff      	cmp	r2, #255	; 0xff
 801bb40:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801bb44:	9605      	str	r6, [sp, #20]
 801bb46:	d116      	bne.n	801bb76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bb48:	f06f 0201 	mvn.w	r2, #1
 801bb4c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bb50:	fb02 fc07 	mul.w	ip, r2, r7
 801bb54:	096a      	lsrs	r2, r5, #5
 801bb56:	f026 0607 	bic.w	r6, r6, #7
 801bb5a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bb5e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb62:	4316      	orrs	r6, r2
 801bb64:	432e      	orrs	r6, r5
 801bb66:	f824 600c 	strh.w	r6, [r4, ip]
 801bb6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb6c:	3f01      	subs	r7, #1
 801bb6e:	4410      	add	r0, r2
 801bb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb72:	4411      	add	r1, r2
 801bb74:	e77e      	b.n	801ba74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801bb76:	f06f 0601 	mvn.w	r6, #1
 801bb7a:	fa1f fa82 	uxth.w	sl, r2
 801bb7e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801bb82:	43d2      	mvns	r2, r2
 801bb84:	437e      	muls	r6, r7
 801bb86:	b2ed      	uxtb	r5, r5
 801bb88:	fb1c fc0a 	smulbb	ip, ip, sl
 801bb8c:	b2d2      	uxtb	r2, r2
 801bb8e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801bb92:	fb15 f50a 	smulbb	r5, r5, sl
 801bb96:	9602      	str	r6, [sp, #8]
 801bb98:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bb9c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bba0:	fb16 f60a 	smulbb	r6, r6, sl
 801bba4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bba8:	fb0e ce02 	mla	lr, lr, r2, ip
 801bbac:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bbb0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bbb4:	fa1f fe8e 	uxth.w	lr, lr
 801bbb8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bbbc:	fa5f f888 	uxtb.w	r8, r8
 801bbc0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bbc4:	fb08 5502 	mla	r5, r8, r2, r5
 801bbc8:	f10e 0201 	add.w	r2, lr, #1
 801bbcc:	fa1f fc8c 	uxth.w	ip, ip
 801bbd0:	b2ad      	uxth	r5, r5
 801bbd2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bbd6:	9a02      	ldr	r2, [sp, #8]
 801bbd8:	1c6e      	adds	r6, r5, #1
 801bbda:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bbde:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bbe2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bbe6:	ea46 0e0e 	orr.w	lr, r6, lr
 801bbea:	f10c 0601 	add.w	r6, ip, #1
 801bbee:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bbf2:	0976      	lsrs	r6, r6, #5
 801bbf4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bbf8:	ea4e 0e06 	orr.w	lr, lr, r6
 801bbfc:	f824 e002 	strh.w	lr, [r4, r2]
 801bc00:	e7b3      	b.n	801bb6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bc02:	f04f 0800 	mov.w	r8, #0
 801bc06:	eba3 0208 	sub.w	r2, r3, r8
 801bc0a:	2a00      	cmp	r2, #0
 801bc0c:	f77f af35 	ble.w	801ba7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bc10:	1402      	asrs	r2, r0, #16
 801bc12:	9e00      	ldr	r6, [sp, #0]
 801bc14:	140d      	asrs	r5, r1, #16
 801bc16:	fb06 2505 	mla	r5, r6, r5, r2
 801bc1a:	9e01      	ldr	r6, [sp, #4]
 801bc1c:	086a      	lsrs	r2, r5, #1
 801bc1e:	07ed      	lsls	r5, r5, #31
 801bc20:	5cb2      	ldrb	r2, [r6, r2]
 801bc22:	bf54      	ite	pl
 801bc24:	f002 020f 	andpl.w	r2, r2, #15
 801bc28:	1112      	asrmi	r2, r2, #4
 801bc2a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bc2e:	b2d2      	uxtb	r2, r2
 801bc30:	b1c2      	cbz	r2, 801bc64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bc32:	9d04      	ldr	r5, [sp, #16]
 801bc34:	436a      	muls	r2, r5
 801bc36:	1c55      	adds	r5, r2, #1
 801bc38:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bc3c:	4d2d      	ldr	r5, [pc, #180]	; (801bcf4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bc3e:	1212      	asrs	r2, r2, #8
 801bc40:	682e      	ldr	r6, [r5, #0]
 801bc42:	2aff      	cmp	r2, #255	; 0xff
 801bc44:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bc48:	d113      	bne.n	801bc72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bc4a:	0972      	lsrs	r2, r6, #5
 801bc4c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801bc50:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bc54:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bc58:	f025 0507 	bic.w	r5, r5, #7
 801bc5c:	4315      	orrs	r5, r2
 801bc5e:	4335      	orrs	r5, r6
 801bc60:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bc64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc66:	f108 0801 	add.w	r8, r8, #1
 801bc6a:	4410      	add	r0, r2
 801bc6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc6e:	4411      	add	r1, r2
 801bc70:	e7c9      	b.n	801bc06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bc72:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bc76:	fa1f fa82 	uxth.w	sl, r2
 801bc7a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bc7e:	43d2      	mvns	r2, r2
 801bc80:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bc84:	fb17 f70a 	smulbb	r7, r7, sl
 801bc88:	b2d2      	uxtb	r2, r2
 801bc8a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bc8e:	b2f6      	uxtb	r6, r6
 801bc90:	b2ed      	uxtb	r5, r5
 801bc92:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bc96:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bc9a:	fb16 f60a 	smulbb	r6, r6, sl
 801bc9e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bca2:	fa1f fc8c 	uxth.w	ip, ip
 801bca6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bcaa:	fb15 f50a 	smulbb	r5, r5, sl
 801bcae:	fa5f fe8e 	uxtb.w	lr, lr
 801bcb2:	fb0e 6602 	mla	r6, lr, r2, r6
 801bcb6:	fb07 5702 	mla	r7, r7, r2, r5
 801bcba:	f10c 0201 	add.w	r2, ip, #1
 801bcbe:	b2b6      	uxth	r6, r6
 801bcc0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bcc4:	1c75      	adds	r5, r6, #1
 801bcc6:	b2bf      	uxth	r7, r7
 801bcc8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bccc:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801bcd0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bcd4:	ea45 0c0c 	orr.w	ip, r5, ip
 801bcd8:	1c7d      	adds	r5, r7, #1
 801bcda:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801bcde:	096d      	lsrs	r5, r5, #5
 801bce0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bce4:	ea4c 0c05 	orr.w	ip, ip, r5
 801bce8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801bcec:	e7ba      	b.n	801bc64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bcee:	b007      	add	sp, #28
 801bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcf4:	20027bb0 	.word	0x20027bb0

0801bcf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcfc:	b087      	sub	sp, #28
 801bcfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd02:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801c00c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801bd06:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bd08:	9101      	str	r1, [sp, #4]
 801bd0a:	9205      	str	r2, [sp, #20]
 801bd0c:	6841      	ldr	r1, [r0, #4]
 801bd0e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801bd12:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bd16:	fb01 2404 	mla	r4, r1, r4, r2
 801bd1a:	6802      	ldr	r2, [r0, #0]
 801bd1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bd20:	f8db 2008 	ldr.w	r2, [fp, #8]
 801bd24:	3201      	adds	r2, #1
 801bd26:	f022 0201 	bic.w	r2, r2, #1
 801bd2a:	9202      	str	r2, [sp, #8]
 801bd2c:	f8db 2000 	ldr.w	r2, [fp]
 801bd30:	9203      	str	r2, [sp, #12]
 801bd32:	9a01      	ldr	r2, [sp, #4]
 801bd34:	2a00      	cmp	r2, #0
 801bd36:	dc03      	bgt.n	801bd40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bd38:	9a05      	ldr	r2, [sp, #20]
 801bd3a:	2a00      	cmp	r2, #0
 801bd3c:	f340 8162 	ble.w	801c004 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bd40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd42:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801bd46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bd4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd4c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801bd50:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	dd0e      	ble.n	801bd76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bd58:	1402      	asrs	r2, r0, #16
 801bd5a:	d405      	bmi.n	801bd68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bd5c:	42ba      	cmp	r2, r7
 801bd5e:	da03      	bge.n	801bd68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bd60:	140a      	asrs	r2, r1, #16
 801bd62:	d401      	bmi.n	801bd68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bd64:	42b2      	cmp	r2, r6
 801bd66:	db07      	blt.n	801bd78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bd68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bd6a:	3b01      	subs	r3, #1
 801bd6c:	3402      	adds	r4, #2
 801bd6e:	4410      	add	r0, r2
 801bd70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd72:	4411      	add	r1, r2
 801bd74:	e7ee      	b.n	801bd54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bd76:	d017      	beq.n	801bda8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bd78:	1e5a      	subs	r2, r3, #1
 801bd7a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bd7c:	fb05 0502 	mla	r5, r5, r2, r0
 801bd80:	142d      	asrs	r5, r5, #16
 801bd82:	d409      	bmi.n	801bd98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bd84:	42bd      	cmp	r5, r7
 801bd86:	da07      	bge.n	801bd98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bd88:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bd8a:	fb05 1202 	mla	r2, r5, r2, r1
 801bd8e:	1412      	asrs	r2, r2, #16
 801bd90:	d402      	bmi.n	801bd98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bd92:	42b2      	cmp	r2, r6
 801bd94:	f2c0 80c3 	blt.w	801bf1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801bd98:	2500      	movs	r5, #0
 801bd9a:	195a      	adds	r2, r3, r5
 801bd9c:	2a00      	cmp	r2, #0
 801bd9e:	dc3f      	bgt.n	801be20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bda0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bda4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bda8:	9b01      	ldr	r3, [sp, #4]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	f340 812a 	ble.w	801c004 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801bdb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bdba:	eeb0 6a62 	vmov.f32	s12, s5
 801bdbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bdc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bdc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bdca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bdce:	eeb0 6a43 	vmov.f32	s12, s6
 801bdd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bdd6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bdda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bdde:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bde2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bde6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bdea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bdee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bdf2:	ee12 2a90 	vmov	r2, s5
 801bdf6:	eef0 2a47 	vmov.f32	s5, s14
 801bdfa:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdfe:	ee13 2a10 	vmov	r2, s6
 801be02:	9313      	str	r3, [sp, #76]	; 0x4c
 801be04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be06:	eeb0 3a67 	vmov.f32	s6, s15
 801be0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801be0e:	9314      	str	r3, [sp, #80]	; 0x50
 801be10:	9b01      	ldr	r3, [sp, #4]
 801be12:	9a05      	ldr	r2, [sp, #20]
 801be14:	3b01      	subs	r3, #1
 801be16:	9301      	str	r3, [sp, #4]
 801be18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be1a:	bf08      	it	eq
 801be1c:	4613      	moveq	r3, r2
 801be1e:	e788      	b.n	801bd32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801be20:	1406      	asrs	r6, r0, #16
 801be22:	d42c      	bmi.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be24:	f8db 2008 	ldr.w	r2, [fp, #8]
 801be28:	42b2      	cmp	r2, r6
 801be2a:	dd28      	ble.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be2c:	140f      	asrs	r7, r1, #16
 801be2e:	d426      	bmi.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be30:	f8db 200c 	ldr.w	r2, [fp, #12]
 801be34:	42ba      	cmp	r2, r7
 801be36:	dd22      	ble.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be38:	9a02      	ldr	r2, [sp, #8]
 801be3a:	fb07 6602 	mla	r6, r7, r2, r6
 801be3e:	9f03      	ldr	r7, [sp, #12]
 801be40:	0872      	lsrs	r2, r6, #1
 801be42:	07f6      	lsls	r6, r6, #31
 801be44:	5cba      	ldrb	r2, [r7, r2]
 801be46:	bf54      	ite	pl
 801be48:	f002 020f 	andpl.w	r2, r2, #15
 801be4c:	1112      	asrmi	r2, r2, #4
 801be4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be52:	b2d2      	uxtb	r2, r2
 801be54:	2aff      	cmp	r2, #255	; 0xff
 801be56:	d118      	bne.n	801be8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801be58:	f06f 0601 	mvn.w	r6, #1
 801be5c:	f8d8 2000 	ldr.w	r2, [r8]
 801be60:	fb06 f705 	mul.w	r7, r6, r5
 801be64:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801be68:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801be6c:	0956      	lsrs	r6, r2, #5
 801be6e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801be72:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801be76:	ea4c 0606 	orr.w	r6, ip, r6
 801be7a:	4316      	orrs	r6, r2
 801be7c:	53e6      	strh	r6, [r4, r7]
 801be7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be80:	3d01      	subs	r5, #1
 801be82:	4410      	add	r0, r2
 801be84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801be86:	4411      	add	r1, r2
 801be88:	e787      	b.n	801bd9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801be8a:	2a00      	cmp	r2, #0
 801be8c:	d0f7      	beq.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801be8e:	f06f 0601 	mvn.w	r6, #1
 801be92:	f8d8 c000 	ldr.w	ip, [r8]
 801be96:	fa1f f982 	uxth.w	r9, r2
 801be9a:	43d2      	mvns	r2, r2
 801be9c:	436e      	muls	r6, r5
 801be9e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801bea2:	b2d2      	uxtb	r2, r2
 801bea4:	f834 e006 	ldrh.w	lr, [r4, r6]
 801bea8:	fb1a fa09 	smulbb	sl, sl, r9
 801beac:	9604      	str	r6, [sp, #16]
 801beae:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801beb2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801beb6:	fb16 f609 	smulbb	r6, r6, r9
 801beba:	fa5f fc8c 	uxtb.w	ip, ip
 801bebe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bec2:	fb1c fc09 	smulbb	ip, ip, r9
 801bec6:	fb07 6702 	mla	r7, r7, r2, r6
 801beca:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801bece:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bed2:	b2bf      	uxth	r7, r7
 801bed4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bed8:	fa5f fe8e 	uxtb.w	lr, lr
 801bedc:	fb06 a602 	mla	r6, r6, r2, sl
 801bee0:	fb0e cc02 	mla	ip, lr, r2, ip
 801bee4:	1c7a      	adds	r2, r7, #1
 801bee6:	b2b6      	uxth	r6, r6
 801bee8:	fa1f fc8c 	uxth.w	ip, ip
 801beec:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bef0:	9a04      	ldr	r2, [sp, #16]
 801bef2:	f10c 0a01 	add.w	sl, ip, #1
 801bef6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801befa:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801befe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf02:	ea4a 0707 	orr.w	r7, sl, r7
 801bf06:	f106 0a01 	add.w	sl, r6, #1
 801bf0a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bf0e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf12:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bf16:	ea47 070a 	orr.w	r7, r7, sl
 801bf1a:	52a7      	strh	r7, [r4, r2]
 801bf1c:	e7af      	b.n	801be7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bf1e:	f04f 0e00 	mov.w	lr, #0
 801bf22:	eba3 020e 	sub.w	r2, r3, lr
 801bf26:	2a00      	cmp	r2, #0
 801bf28:	f77f af3a 	ble.w	801bda0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bf2c:	1402      	asrs	r2, r0, #16
 801bf2e:	9e02      	ldr	r6, [sp, #8]
 801bf30:	140d      	asrs	r5, r1, #16
 801bf32:	fb06 2505 	mla	r5, r6, r5, r2
 801bf36:	9e03      	ldr	r6, [sp, #12]
 801bf38:	086a      	lsrs	r2, r5, #1
 801bf3a:	07ed      	lsls	r5, r5, #31
 801bf3c:	5cb2      	ldrb	r2, [r6, r2]
 801bf3e:	bf54      	ite	pl
 801bf40:	f002 020f 	andpl.w	r2, r2, #15
 801bf44:	1112      	asrmi	r2, r2, #4
 801bf46:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bf4a:	b2d2      	uxtb	r2, r2
 801bf4c:	2aff      	cmp	r2, #255	; 0xff
 801bf4e:	d115      	bne.n	801bf7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801bf50:	f8d8 5000 	ldr.w	r5, [r8]
 801bf54:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801bf58:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801bf5c:	096a      	lsrs	r2, r5, #5
 801bf5e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bf62:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bf66:	4332      	orrs	r2, r6
 801bf68:	432a      	orrs	r2, r5
 801bf6a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801bf6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf70:	f10e 0e01 	add.w	lr, lr, #1
 801bf74:	4410      	add	r0, r2
 801bf76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bf78:	4411      	add	r1, r2
 801bf7a:	e7d2      	b.n	801bf22 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801bf7c:	2a00      	cmp	r2, #0
 801bf7e:	d0f6      	beq.n	801bf6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bf80:	f8d8 7000 	ldr.w	r7, [r8]
 801bf84:	fa1f f982 	uxth.w	r9, r2
 801bf88:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801bf8c:	43d2      	mvns	r2, r2
 801bf8e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801bf92:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bf96:	ea4f 262c 	mov.w	r6, ip, asr #8
 801bf9a:	fb15 f509 	smulbb	r5, r5, r9
 801bf9e:	b2d2      	uxtb	r2, r2
 801bfa0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bfa4:	b2ff      	uxtb	r7, r7
 801bfa6:	fb1a fa09 	smulbb	sl, sl, r9
 801bfaa:	fb06 5602 	mla	r6, r6, r2, r5
 801bfae:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801bfb2:	fb17 f709 	smulbb	r7, r7, r9
 801bfb6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bfba:	b2b6      	uxth	r6, r6
 801bfbc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bfc0:	fa5f fc8c 	uxtb.w	ip, ip
 801bfc4:	fb05 a502 	mla	r5, r5, r2, sl
 801bfc8:	fb0c 7702 	mla	r7, ip, r2, r7
 801bfcc:	1c72      	adds	r2, r6, #1
 801bfce:	b2ad      	uxth	r5, r5
 801bfd0:	b2bf      	uxth	r7, r7
 801bfd2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801bfd6:	f107 0a01 	add.w	sl, r7, #1
 801bfda:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bfde:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bfe2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bfe6:	ea4a 0606 	orr.w	r6, sl, r6
 801bfea:	f105 0a01 	add.w	sl, r5, #1
 801bfee:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bff2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bff6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bffa:	ea46 060a 	orr.w	r6, r6, sl
 801bffe:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c002:	e7b4      	b.n	801bf6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c004:	b007      	add	sp, #28
 801c006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c00a:	bf00      	nop
 801c00c:	20027bb0 	.word	0x20027bb0

0801c010 <_ZN8touchgfx8LCD16bppD1Ev>:
 801c010:	4770      	bx	lr

0801c012 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c012:	4770      	bx	lr

0801c014 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c014:	4770      	bx	lr

0801c016 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c016:	4770      	bx	lr

0801c018 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c018:	4770      	bx	lr

0801c01a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c01a:	4770      	bx	lr

0801c01c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c01c:	4770      	bx	lr

0801c01e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c01e:	4770      	bx	lr

0801c020 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c020:	4770      	bx	lr

0801c022 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c022:	4770      	bx	lr

0801c024 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c024:	4770      	bx	lr

0801c026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c026:	4770      	bx	lr

0801c028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c028:	4770      	bx	lr

0801c02a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c02a:	4770      	bx	lr

0801c02c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c02c:	4770      	bx	lr

0801c02e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c02e:	4770      	bx	lr

0801c030 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c030:	4770      	bx	lr

0801c032 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c032:	4770      	bx	lr

0801c034 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c034:	4770      	bx	lr

0801c036 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c036:	4770      	bx	lr

0801c038 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c038:	4770      	bx	lr

0801c03a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c03a:	4770      	bx	lr

0801c03c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c03c:	4770      	bx	lr

0801c03e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c03e:	4770      	bx	lr

0801c040 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c040:	4770      	bx	lr

0801c042 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c042:	4770      	bx	lr

0801c044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c044:	4770      	bx	lr

0801c046 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c046:	4770      	bx	lr

0801c048 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c048:	4770      	bx	lr

0801c04a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c04a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c04e:	b088      	sub	sp, #32
 801c050:	4606      	mov	r6, r0
 801c052:	4688      	mov	r8, r1
 801c054:	4691      	mov	r9, r2
 801c056:	ac08      	add	r4, sp, #32
 801c058:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c05c:	4620      	mov	r0, r4
 801c05e:	f7fd fc65 	bl	801992c <_ZNK8touchgfx6Bitmap7getDataEv>
 801c062:	6833      	ldr	r3, [r6, #0]
 801c064:	4605      	mov	r5, r0
 801c066:	4620      	mov	r0, r4
 801c068:	699f      	ldr	r7, [r3, #24]
 801c06a:	f7fd fb73 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c06e:	4682      	mov	sl, r0
 801c070:	4620      	mov	r0, r4
 801c072:	f7fd fba3 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c076:	9500      	str	r5, [sp, #0]
 801c078:	464b      	mov	r3, r9
 801c07a:	4642      	mov	r2, r8
 801c07c:	4631      	mov	r1, r6
 801c07e:	e9cd a001 	strd	sl, r0, [sp, #4]
 801c082:	a806      	add	r0, sp, #24
 801c084:	47b8      	blx	r7
 801c086:	4628      	mov	r0, r5
 801c088:	b008      	add	sp, #32
 801c08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c090 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c094:	2300      	movs	r3, #0
 801c096:	9300      	str	r3, [sp, #0]
 801c098:	4b3d      	ldr	r3, [pc, #244]	; (801c190 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801c09a:	781b      	ldrb	r3, [r3, #0]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d137      	bne.n	801c110 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801c0a0:	4a3c      	ldr	r2, [pc, #240]	; (801c194 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c0a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c0a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d132      	bne.n	801c114 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c0ae:	4b3a      	ldr	r3, [pc, #232]	; (801c198 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0b4:	ac02      	add	r4, sp, #8
 801c0b6:	6808      	ldr	r0, [r1, #0]
 801c0b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c0bc:	ab02      	add	r3, sp, #8
 801c0be:	6849      	ldr	r1, [r1, #4]
 801c0c0:	4d36      	ldr	r5, [pc, #216]	; (801c19c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c0c2:	c303      	stmia	r3!, {r0, r1}
 801c0c4:	4669      	mov	r1, sp
 801c0c6:	4620      	mov	r0, r4
 801c0c8:	f7f9 fec6 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c0cc:	4668      	mov	r0, sp
 801c0ce:	f7f9 fe9b 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c0d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c0d6:	f8bd 2000 	ldrh.w	r2, [sp]
 801c0da:	462f      	mov	r7, r5
 801c0dc:	6828      	ldr	r0, [r5, #0]
 801c0de:	4413      	add	r3, r2
 801c0e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c0e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c0e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c0ec:	4413      	add	r3, r2
 801c0ee:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c0f2:	6803      	ldr	r3, [r0, #0]
 801c0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0f6:	4798      	blx	r3
 801c0f8:	f010 0f01 	tst.w	r0, #1
 801c0fc:	d00c      	beq.n	801c118 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c0fe:	6828      	ldr	r0, [r5, #0]
 801c100:	6803      	ldr	r3, [r0, #0]
 801c102:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c108:	4798      	blx	r3
 801c10a:	b004      	add	sp, #16
 801c10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c110:	4a21      	ldr	r2, [pc, #132]	; (801c198 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c112:	e7c6      	b.n	801c0a2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c114:	4b1f      	ldr	r3, [pc, #124]	; (801c194 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c116:	e7cb      	b.n	801c0b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c118:	6838      	ldr	r0, [r7, #0]
 801c11a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c11e:	6803      	ldr	r3, [r0, #0]
 801c120:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c124:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c12a:	4798      	blx	r3
 801c12c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c130:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c134:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c138:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c13c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c140:	6838      	ldr	r0, [r7, #0]
 801c142:	6803      	ldr	r3, [r0, #0]
 801c144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c146:	4798      	blx	r3
 801c148:	4a12      	ldr	r2, [pc, #72]	; (801c194 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c14a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c14e:	8813      	ldrh	r3, [r2, #0]
 801c150:	4691      	mov	r9, r2
 801c152:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c156:	435d      	muls	r5, r3
 801c158:	fb03 1404 	mla	r4, r3, r4, r1
 801c15c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c160:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c164:	6838      	ldr	r0, [r7, #0]
 801c166:	42ac      	cmp	r4, r5
 801c168:	6803      	ldr	r3, [r0, #0]
 801c16a:	d20e      	bcs.n	801c18a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c16c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c170:	4632      	mov	r2, r6
 801c172:	4643      	mov	r3, r8
 801c174:	4621      	mov	r1, r4
 801c176:	47d0      	blx	sl
 801c178:	f8b9 3000 	ldrh.w	r3, [r9]
 801c17c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c180:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c184:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c188:	e7ec      	b.n	801c164 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c18c:	4798      	blx	r3
 801c18e:	e7bc      	b.n	801c10a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c190:	20027b98 	.word	0x20027b98
 801c194:	20027b9a 	.word	0x20027b9a
 801c198:	20027b9c 	.word	0x20027b9c
 801c19c:	20027ba0 	.word	0x20027ba0

0801c1a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	b08b      	sub	sp, #44	; 0x2c
 801c1a6:	460f      	mov	r7, r1
 801c1a8:	4616      	mov	r6, r2
 801c1aa:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c1ae:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c1b2:	f1bb 0f00 	cmp.w	fp, #0
 801c1b6:	d049      	beq.n	801c24c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c1b8:	6810      	ldr	r0, [r2, #0]
 801c1ba:	ad06      	add	r5, sp, #24
 801c1bc:	6851      	ldr	r1, [r2, #4]
 801c1be:	c503      	stmia	r5!, {r0, r1}
 801c1c0:	6818      	ldr	r0, [r3, #0]
 801c1c2:	ad08      	add	r5, sp, #32
 801c1c4:	6859      	ldr	r1, [r3, #4]
 801c1c6:	c503      	stmia	r5!, {r0, r1}
 801c1c8:	a806      	add	r0, sp, #24
 801c1ca:	f7f9 fe1d 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c1ce:	4631      	mov	r1, r6
 801c1d0:	a808      	add	r0, sp, #32
 801c1d2:	f7f9 fe41 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c1d6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c1da:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c1de:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c1e2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c1e6:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c1ea:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c1ee:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c1f2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c1f6:	4f5f      	ldr	r7, [pc, #380]	; (801c374 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c1f8:	440a      	add	r2, r1
 801c1fa:	6838      	ldr	r0, [r7, #0]
 801c1fc:	46b9      	mov	r9, r7
 801c1fe:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c202:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c206:	4413      	add	r3, r2
 801c208:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c20c:	6803      	ldr	r3, [r0, #0]
 801c20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c210:	4798      	blx	r3
 801c212:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c216:	d01c      	beq.n	801c252 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c218:	f010 0f04 	tst.w	r0, #4
 801c21c:	d01d      	beq.n	801c25a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c21e:	f8d9 0000 	ldr.w	r0, [r9]
 801c222:	2700      	movs	r7, #0
 801c224:	b2ad      	uxth	r5, r5
 801c226:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c22a:	6801      	ldr	r1, [r0, #0]
 801c22c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c230:	f8cd b00c 	str.w	fp, [sp, #12]
 801c234:	9501      	str	r5, [sp, #4]
 801c236:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c23a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c23e:	9402      	str	r4, [sp, #8]
 801c240:	fa1f f488 	uxth.w	r4, r8
 801c244:	9400      	str	r4, [sp, #0]
 801c246:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c248:	4631      	mov	r1, r6
 801c24a:	47a0      	blx	r4
 801c24c:	b00b      	add	sp, #44	; 0x2c
 801c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c252:	b914      	cbnz	r4, 801c25a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c254:	f010 0f01 	tst.w	r0, #1
 801c258:	e7e0      	b.n	801c21c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c25a:	f8d9 0000 	ldr.w	r0, [r9]
 801c25e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c262:	6803      	ldr	r3, [r0, #0]
 801c264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c266:	4798      	blx	r3
 801c268:	4b43      	ldr	r3, [pc, #268]	; (801c378 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c26a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c26e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c272:	881a      	ldrh	r2, [r3, #0]
 801c274:	469a      	mov	sl, r3
 801c276:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c27a:	fb05 f502 	mul.w	r5, r5, r2
 801c27e:	fb02 1404 	mla	r4, r2, r4, r1
 801c282:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c286:	d059      	beq.n	801c33c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c288:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c28c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c290:	fa1f f28b 	uxth.w	r2, fp
 801c294:	469e      	mov	lr, r3
 801c296:	fa1f f989 	uxth.w	r9, r9
 801c29a:	42ac      	cmp	r4, r5
 801c29c:	d264      	bcs.n	801c368 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c29e:	eb04 0a07 	add.w	sl, r4, r7
 801c2a2:	4554      	cmp	r4, sl
 801c2a4:	d23d      	bcs.n	801c322 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c2a6:	8821      	ldrh	r1, [r4, #0]
 801c2a8:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c2ac:	1208      	asrs	r0, r1, #8
 801c2ae:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c2b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c2b6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c2ba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c2be:	00c9      	lsls	r1, r1, #3
 801c2c0:	fb10 f009 	smulbb	r0, r0, r9
 801c2c4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c2c8:	b2c9      	uxtb	r1, r1
 801c2ca:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c2ce:	10d8      	asrs	r0, r3, #3
 801c2d0:	fb1b fb09 	smulbb	fp, fp, r9
 801c2d4:	00db      	lsls	r3, r3, #3
 801c2d6:	fa1f fc8c 	uxth.w	ip, ip
 801c2da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c2de:	fb11 f109 	smulbb	r1, r1, r9
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	fb00 b002 	mla	r0, r0, r2, fp
 801c2e8:	f10c 0b01 	add.w	fp, ip, #1
 801c2ec:	fb03 1302 	mla	r3, r3, r2, r1
 801c2f0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c2f4:	b29b      	uxth	r3, r3
 801c2f6:	b280      	uxth	r0, r0
 801c2f8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c2fc:	f103 0c01 	add.w	ip, r3, #1
 801c300:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c304:	1c43      	adds	r3, r0, #1
 801c306:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c30a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c30e:	0940      	lsrs	r0, r0, #5
 801c310:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c314:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c318:	ea4c 0c00 	orr.w	ip, ip, r0
 801c31c:	f824 cb02 	strh.w	ip, [r4], #2
 801c320:	e7bf      	b.n	801c2a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c322:	f8be 3000 	ldrh.w	r3, [lr]
 801c326:	eba3 0308 	sub.w	r3, r3, r8
 801c32a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c32e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c332:	eba3 0308 	sub.w	r3, r3, r8
 801c336:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c33a:	e7ae      	b.n	801c29a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c33c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c340:	f8d9 0000 	ldr.w	r0, [r9]
 801c344:	42ac      	cmp	r4, r5
 801c346:	6803      	ldr	r3, [r0, #0]
 801c348:	d20e      	bcs.n	801c368 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c34a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c34e:	4632      	mov	r2, r6
 801c350:	463b      	mov	r3, r7
 801c352:	4621      	mov	r1, r4
 801c354:	47c0      	blx	r8
 801c356:	f8ba 3000 	ldrh.w	r3, [sl]
 801c35a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c35e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c362:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c366:	e7eb      	b.n	801c340 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c368:	4b02      	ldr	r3, [pc, #8]	; (801c374 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c36a:	6818      	ldr	r0, [r3, #0]
 801c36c:	6803      	ldr	r3, [r0, #0]
 801c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c370:	4798      	blx	r3
 801c372:	e76b      	b.n	801c24c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c374:	20027ba0 	.word	0x20027ba0
 801c378:	20027b9a 	.word	0x20027b9a

0801c37c <_ZN8touchgfx8LCD16bppD0Ev>:
 801c37c:	b510      	push	{r4, lr}
 801c37e:	4604      	mov	r4, r0
 801c380:	2178      	movs	r1, #120	; 0x78
 801c382:	f009 fbb6 	bl	8025af2 <_ZdlPvj>
 801c386:	4620      	mov	r0, r4
 801c388:	bd10      	pop	{r4, pc}

0801c38a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c38a:	b510      	push	{r4, lr}
 801c38c:	4604      	mov	r4, r0
 801c38e:	2104      	movs	r1, #4
 801c390:	f009 fbaf 	bl	8025af2 <_ZdlPvj>
 801c394:	4620      	mov	r0, r4
 801c396:	bd10      	pop	{r4, pc}

0801c398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c398:	b510      	push	{r4, lr}
 801c39a:	4604      	mov	r4, r0
 801c39c:	2104      	movs	r1, #4
 801c39e:	f009 fba8 	bl	8025af2 <_ZdlPvj>
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	bd10      	pop	{r4, pc}

0801c3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c3a6:	b510      	push	{r4, lr}
 801c3a8:	4604      	mov	r4, r0
 801c3aa:	2104      	movs	r1, #4
 801c3ac:	f009 fba1 	bl	8025af2 <_ZdlPvj>
 801c3b0:	4620      	mov	r0, r4
 801c3b2:	bd10      	pop	{r4, pc}

0801c3b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c3b4:	b510      	push	{r4, lr}
 801c3b6:	4604      	mov	r4, r0
 801c3b8:	2104      	movs	r1, #4
 801c3ba:	f009 fb9a 	bl	8025af2 <_ZdlPvj>
 801c3be:	4620      	mov	r0, r4
 801c3c0:	bd10      	pop	{r4, pc}

0801c3c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c3c2:	b510      	push	{r4, lr}
 801c3c4:	4604      	mov	r4, r0
 801c3c6:	2104      	movs	r1, #4
 801c3c8:	f009 fb93 	bl	8025af2 <_ZdlPvj>
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	bd10      	pop	{r4, pc}

0801c3d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c3d0:	b510      	push	{r4, lr}
 801c3d2:	4604      	mov	r4, r0
 801c3d4:	2104      	movs	r1, #4
 801c3d6:	f009 fb8c 	bl	8025af2 <_ZdlPvj>
 801c3da:	4620      	mov	r0, r4
 801c3dc:	bd10      	pop	{r4, pc}

0801c3de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c3de:	b510      	push	{r4, lr}
 801c3e0:	4604      	mov	r4, r0
 801c3e2:	2104      	movs	r1, #4
 801c3e4:	f009 fb85 	bl	8025af2 <_ZdlPvj>
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	bd10      	pop	{r4, pc}

0801c3ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c3ec:	b510      	push	{r4, lr}
 801c3ee:	4604      	mov	r4, r0
 801c3f0:	2104      	movs	r1, #4
 801c3f2:	f009 fb7e 	bl	8025af2 <_ZdlPvj>
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	bd10      	pop	{r4, pc}

0801c3fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c3fa:	b510      	push	{r4, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	2104      	movs	r1, #4
 801c400:	f009 fb77 	bl	8025af2 <_ZdlPvj>
 801c404:	4620      	mov	r0, r4
 801c406:	bd10      	pop	{r4, pc}

0801c408 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c408:	b510      	push	{r4, lr}
 801c40a:	4604      	mov	r4, r0
 801c40c:	2104      	movs	r1, #4
 801c40e:	f009 fb70 	bl	8025af2 <_ZdlPvj>
 801c412:	4620      	mov	r0, r4
 801c414:	bd10      	pop	{r4, pc}

0801c416 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c416:	b510      	push	{r4, lr}
 801c418:	4604      	mov	r4, r0
 801c41a:	2104      	movs	r1, #4
 801c41c:	f009 fb69 	bl	8025af2 <_ZdlPvj>
 801c420:	4620      	mov	r0, r4
 801c422:	bd10      	pop	{r4, pc}

0801c424 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c424:	b510      	push	{r4, lr}
 801c426:	4604      	mov	r4, r0
 801c428:	2104      	movs	r1, #4
 801c42a:	f009 fb62 	bl	8025af2 <_ZdlPvj>
 801c42e:	4620      	mov	r0, r4
 801c430:	bd10      	pop	{r4, pc}

0801c432 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c432:	b510      	push	{r4, lr}
 801c434:	4604      	mov	r4, r0
 801c436:	2104      	movs	r1, #4
 801c438:	f009 fb5b 	bl	8025af2 <_ZdlPvj>
 801c43c:	4620      	mov	r0, r4
 801c43e:	bd10      	pop	{r4, pc}

0801c440 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c440:	b510      	push	{r4, lr}
 801c442:	4604      	mov	r4, r0
 801c444:	2104      	movs	r1, #4
 801c446:	f009 fb54 	bl	8025af2 <_ZdlPvj>
 801c44a:	4620      	mov	r0, r4
 801c44c:	bd10      	pop	{r4, pc}

0801c44e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c44e:	b510      	push	{r4, lr}
 801c450:	4604      	mov	r4, r0
 801c452:	2104      	movs	r1, #4
 801c454:	f009 fb4d 	bl	8025af2 <_ZdlPvj>
 801c458:	4620      	mov	r0, r4
 801c45a:	bd10      	pop	{r4, pc}

0801c45c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c45c:	b510      	push	{r4, lr}
 801c45e:	4604      	mov	r4, r0
 801c460:	2104      	movs	r1, #4
 801c462:	f009 fb46 	bl	8025af2 <_ZdlPvj>
 801c466:	4620      	mov	r0, r4
 801c468:	bd10      	pop	{r4, pc}

0801c46a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c46a:	b510      	push	{r4, lr}
 801c46c:	4604      	mov	r4, r0
 801c46e:	2104      	movs	r1, #4
 801c470:	f009 fb3f 	bl	8025af2 <_ZdlPvj>
 801c474:	4620      	mov	r0, r4
 801c476:	bd10      	pop	{r4, pc}

0801c478 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c478:	b510      	push	{r4, lr}
 801c47a:	4604      	mov	r4, r0
 801c47c:	2104      	movs	r1, #4
 801c47e:	f009 fb38 	bl	8025af2 <_ZdlPvj>
 801c482:	4620      	mov	r0, r4
 801c484:	bd10      	pop	{r4, pc}

0801c486 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c486:	b510      	push	{r4, lr}
 801c488:	4604      	mov	r4, r0
 801c48a:	2104      	movs	r1, #4
 801c48c:	f009 fb31 	bl	8025af2 <_ZdlPvj>
 801c490:	4620      	mov	r0, r4
 801c492:	bd10      	pop	{r4, pc}

0801c494 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c494:	b510      	push	{r4, lr}
 801c496:	4604      	mov	r4, r0
 801c498:	2104      	movs	r1, #4
 801c49a:	f009 fb2a 	bl	8025af2 <_ZdlPvj>
 801c49e:	4620      	mov	r0, r4
 801c4a0:	bd10      	pop	{r4, pc}

0801c4a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c4a2:	b510      	push	{r4, lr}
 801c4a4:	4604      	mov	r4, r0
 801c4a6:	2104      	movs	r1, #4
 801c4a8:	f009 fb23 	bl	8025af2 <_ZdlPvj>
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	bd10      	pop	{r4, pc}

0801c4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c4b0:	b510      	push	{r4, lr}
 801c4b2:	4604      	mov	r4, r0
 801c4b4:	2104      	movs	r1, #4
 801c4b6:	f009 fb1c 	bl	8025af2 <_ZdlPvj>
 801c4ba:	4620      	mov	r0, r4
 801c4bc:	bd10      	pop	{r4, pc}

0801c4be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c4be:	b510      	push	{r4, lr}
 801c4c0:	4604      	mov	r4, r0
 801c4c2:	2104      	movs	r1, #4
 801c4c4:	f009 fb15 	bl	8025af2 <_ZdlPvj>
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	bd10      	pop	{r4, pc}

0801c4cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c4cc:	b510      	push	{r4, lr}
 801c4ce:	4604      	mov	r4, r0
 801c4d0:	2104      	movs	r1, #4
 801c4d2:	f009 fb0e 	bl	8025af2 <_ZdlPvj>
 801c4d6:	4620      	mov	r0, r4
 801c4d8:	bd10      	pop	{r4, pc}

0801c4da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c4da:	b510      	push	{r4, lr}
 801c4dc:	4604      	mov	r4, r0
 801c4de:	2104      	movs	r1, #4
 801c4e0:	f009 fb07 	bl	8025af2 <_ZdlPvj>
 801c4e4:	4620      	mov	r0, r4
 801c4e6:	bd10      	pop	{r4, pc}

0801c4e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c4e8:	b510      	push	{r4, lr}
 801c4ea:	4604      	mov	r4, r0
 801c4ec:	2104      	movs	r1, #4
 801c4ee:	f009 fb00 	bl	8025af2 <_ZdlPvj>
 801c4f2:	4620      	mov	r0, r4
 801c4f4:	bd10      	pop	{r4, pc}

0801c4f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c4f6:	b510      	push	{r4, lr}
 801c4f8:	4604      	mov	r4, r0
 801c4fa:	2104      	movs	r1, #4
 801c4fc:	f009 faf9 	bl	8025af2 <_ZdlPvj>
 801c500:	4620      	mov	r0, r4
 801c502:	bd10      	pop	{r4, pc}

0801c504 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c504:	b510      	push	{r4, lr}
 801c506:	4604      	mov	r4, r0
 801c508:	2104      	movs	r1, #4
 801c50a:	f009 faf2 	bl	8025af2 <_ZdlPvj>
 801c50e:	4620      	mov	r0, r4
 801c510:	bd10      	pop	{r4, pc}
	...

0801c514 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c518:	b091      	sub	sp, #68	; 0x44
 801c51a:	469b      	mov	fp, r3
 801c51c:	4616      	mov	r6, r2
 801c51e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c522:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801c526:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c52a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801c52e:	4604      	mov	r4, r0
 801c530:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801c534:	4640      	mov	r0, r8
 801c536:	460d      	mov	r5, r1
 801c538:	4659      	mov	r1, fp
 801c53a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c53e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c542:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801c546:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801c54a:	f7f3 fe43 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801c54e:	4631      	mov	r1, r6
 801c550:	4640      	mov	r0, r8
 801c552:	f7f3 fe3f 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801c556:	4b74      	ldr	r3, [pc, #464]	; (801c728 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801c558:	8818      	ldrh	r0, [r3, #0]
 801c55a:	4b74      	ldr	r3, [pc, #464]	; (801c72c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801c55c:	b202      	sxth	r2, r0
 801c55e:	8819      	ldrh	r1, [r3, #0]
 801c560:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c564:	b20e      	sxth	r6, r1
 801c566:	2b00      	cmp	r3, #0
 801c568:	da07      	bge.n	801c57a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801c56a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c56e:	4463      	add	r3, ip
 801c570:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c574:	2300      	movs	r3, #0
 801c576:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801c57a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c57e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c582:	1ad2      	subs	r2, r2, r3
 801c584:	4594      	cmp	ip, r2
 801c586:	bfc4      	itt	gt
 801c588:	1ac2      	subgt	r2, r0, r3
 801c58a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801c58e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c592:	2a00      	cmp	r2, #0
 801c594:	da07      	bge.n	801c5a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801c596:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801c59a:	4462      	add	r2, ip
 801c59c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c5a0:	2200      	movs	r2, #0
 801c5a2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c5a6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c5aa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c5ae:	eba6 060a 	sub.w	r6, r6, sl
 801c5b2:	42b2      	cmp	r2, r6
 801c5b4:	bfc4      	itt	gt
 801c5b6:	eba1 020a 	subgt.w	r2, r1, sl
 801c5ba:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801c5be:	4a5c      	ldr	r2, [pc, #368]	; (801c730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801c5c0:	7812      	ldrb	r2, [r2, #0]
 801c5c2:	b9a2      	cbnz	r2, 801c5ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801c5c4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c5c8:	4286      	cmp	r6, r0
 801c5ca:	4640      	mov	r0, r8
 801c5cc:	9303      	str	r3, [sp, #12]
 801c5ce:	bf14      	ite	ne
 801c5d0:	2600      	movne	r6, #0
 801c5d2:	2601      	moveq	r6, #1
 801c5d4:	f7f3 fe41 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c5d8:	9b03      	ldr	r3, [sp, #12]
 801c5da:	b160      	cbz	r0, 801c5f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801c5dc:	2300      	movs	r3, #0
 801c5de:	8023      	strh	r3, [r4, #0]
 801c5e0:	8063      	strh	r3, [r4, #2]
 801c5e2:	80a3      	strh	r3, [r4, #4]
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	80e3      	strh	r3, [r4, #6]
 801c5e8:	b011      	add	sp, #68	; 0x44
 801c5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ee:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c5f2:	428e      	cmp	r6, r1
 801c5f4:	e7e9      	b.n	801c5ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801c5f6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c5fa:	a90e      	add	r1, sp, #56	; 0x38
 801c5fc:	900e      	str	r0, [sp, #56]	; 0x38
 801c5fe:	a80c      	add	r0, sp, #48	; 0x30
 801c600:	9205      	str	r2, [sp, #20]
 801c602:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c606:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801c60a:	9206      	str	r2, [sp, #24]
 801c60c:	f8bb 2000 	ldrh.w	r2, [fp]
 801c610:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801c614:	1a9b      	subs	r3, r3, r2
 801c616:	b21b      	sxth	r3, r3
 801c618:	9303      	str	r3, [sp, #12]
 801c61a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c61e:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c738 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c622:	ebaa 0a03 	sub.w	sl, sl, r3
 801c626:	fa0f f38a 	sxth.w	r3, sl
 801c62a:	9304      	str	r3, [sp, #16]
 801c62c:	9b03      	ldr	r3, [sp, #12]
 801c62e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c632:	9b04      	ldr	r3, [sp, #16]
 801c634:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c638:	9b05      	ldr	r3, [sp, #20]
 801c63a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c63e:	9b06      	ldr	r3, [sp, #24]
 801c640:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c644:	f7f9 fc08 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c648:	4640      	mov	r0, r8
 801c64a:	f7f9 fbdd 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c64e:	a80e      	add	r0, sp, #56	; 0x38
 801c650:	f7f9 fbda 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c654:	4b37      	ldr	r3, [pc, #220]	; (801c734 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c656:	4628      	mov	r0, r5
 801c658:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801c65c:	881b      	ldrh	r3, [r3, #0]
 801c65e:	9307      	str	r3, [sp, #28]
 801c660:	682b      	ldr	r3, [r5, #0]
 801c662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c664:	4798      	blx	r3
 801c666:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801c66a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c66e:	4681      	mov	r9, r0
 801c670:	f8db 0000 	ldr.w	r0, [fp]
 801c674:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801c678:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c67a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c67e:	6803      	ldr	r3, [r0, #0]
 801c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c682:	4798      	blx	r3
 801c684:	4607      	mov	r7, r0
 801c686:	f8db 0000 	ldr.w	r0, [fp]
 801c68a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c68e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c692:	6803      	ldr	r3, [r0, #0]
 801c694:	9109      	str	r1, [sp, #36]	; 0x24
 801c696:	9208      	str	r2, [sp, #32]
 801c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c69a:	4798      	blx	r3
 801c69c:	f010 0f01 	tst.w	r0, #1
 801c6a0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c6a4:	d012      	beq.n	801c6cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801c6a6:	f8db 0000 	ldr.w	r0, [fp]
 801c6aa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c6ae:	6803      	ldr	r3, [r0, #0]
 801c6b0:	9200      	str	r2, [sp, #0]
 801c6b2:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c6b4:	462b      	mov	r3, r5
 801c6b6:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c6ba:	47b0      	blx	r6
 801c6bc:	9b03      	ldr	r3, [sp, #12]
 801c6be:	8023      	strh	r3, [r4, #0]
 801c6c0:	9b04      	ldr	r3, [sp, #16]
 801c6c2:	8063      	strh	r3, [r4, #2]
 801c6c4:	9b05      	ldr	r3, [sp, #20]
 801c6c6:	80a3      	strh	r3, [r4, #4]
 801c6c8:	9b06      	ldr	r3, [sp, #24]
 801c6ca:	e78b      	b.n	801c5e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801c6cc:	fb09 f202 	mul.w	r2, r9, r2
 801c6d0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c6d4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c6d8:	440f      	add	r7, r1
 801c6da:	b166      	cbz	r6, 801c6f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c6dc:	9a07      	ldr	r2, [sp, #28]
 801c6de:	4592      	cmp	sl, r2
 801c6e0:	d109      	bne.n	801c6f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c6e2:	f8db 0000 	ldr.w	r0, [fp]
 801c6e6:	fb09 f303 	mul.w	r3, r9, r3
 801c6ea:	4629      	mov	r1, r5
 801c6ec:	6802      	ldr	r2, [r0, #0]
 801c6ee:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801c6f0:	463a      	mov	r2, r7
 801c6f2:	47b0      	blx	r6
 801c6f4:	e7e2      	b.n	801c6bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c6f6:	fb0a f303 	mul.w	r3, sl, r3
 801c6fa:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801c6fe:	f8df b038 	ldr.w	fp, [pc, #56]	; 801c738 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c702:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801c706:	4545      	cmp	r5, r8
 801c708:	d2d8      	bcs.n	801c6bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c70a:	f8db 0000 	ldr.w	r0, [fp]
 801c70e:	4629      	mov	r1, r5
 801c710:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c714:	4435      	add	r5, r6
 801c716:	6802      	ldr	r2, [r0, #0]
 801c718:	005b      	lsls	r3, r3, #1
 801c71a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c71e:	463a      	mov	r2, r7
 801c720:	47d0      	blx	sl
 801c722:	444f      	add	r7, r9
 801c724:	e7ef      	b.n	801c706 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801c726:	bf00      	nop
 801c728:	20027b94 	.word	0x20027b94
 801c72c:	20027b96 	.word	0x20027b96
 801c730:	20027b98 	.word	0x20027b98
 801c734:	20027b9a 	.word	0x20027b9a
 801c738:	20027ba0 	.word	0x20027ba0

0801c73c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c73e:	4606      	mov	r6, r0
 801c740:	b087      	sub	sp, #28
 801c742:	460c      	mov	r4, r1
 801c744:	4617      	mov	r7, r2
 801c746:	461d      	mov	r5, r3
 801c748:	b333      	cbz	r3, 801c798 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c74a:	4608      	mov	r0, r1
 801c74c:	f7f3 fd85 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c750:	bb10      	cbnz	r0, 801c798 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c752:	6820      	ldr	r0, [r4, #0]
 801c754:	ab04      	add	r3, sp, #16
 801c756:	6861      	ldr	r1, [r4, #4]
 801c758:	4c1b      	ldr	r4, [pc, #108]	; (801c7c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c75a:	c303      	stmia	r3!, {r0, r1}
 801c75c:	a804      	add	r0, sp, #16
 801c75e:	f7f9 fb53 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c762:	6820      	ldr	r0, [r4, #0]
 801c764:	6803      	ldr	r3, [r0, #0]
 801c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c768:	4798      	blx	r3
 801c76a:	2dff      	cmp	r5, #255	; 0xff
 801c76c:	d016      	beq.n	801c79c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c76e:	f010 0f08 	tst.w	r0, #8
 801c772:	6820      	ldr	r0, [r4, #0]
 801c774:	d015      	beq.n	801c7a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c776:	2400      	movs	r4, #0
 801c778:	6801      	ldr	r1, [r0, #0]
 801c77a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c77e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c782:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c786:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c78a:	9401      	str	r4, [sp, #4]
 801c78c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c790:	9400      	str	r4, [sp, #0]
 801c792:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c794:	4639      	mov	r1, r7
 801c796:	47a0      	blx	r4
 801c798:	b007      	add	sp, #28
 801c79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c79c:	f010 0f02 	tst.w	r0, #2
 801c7a0:	e7e7      	b.n	801c772 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c7a2:	6803      	ldr	r3, [r0, #0]
 801c7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7a6:	4798      	blx	r3
 801c7a8:	4b08      	ldr	r3, [pc, #32]	; (801c7cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c7aa:	4601      	mov	r1, r0
 801c7ac:	4630      	mov	r0, r6
 801c7ae:	881a      	ldrh	r2, [r3, #0]
 801c7b0:	6833      	ldr	r3, [r6, #0]
 801c7b2:	e9cd 7500 	strd	r7, r5, [sp]
 801c7b6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c7b8:	ab04      	add	r3, sp, #16
 801c7ba:	47a8      	blx	r5
 801c7bc:	6820      	ldr	r0, [r4, #0]
 801c7be:	6803      	ldr	r3, [r0, #0]
 801c7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7c2:	4798      	blx	r3
 801c7c4:	e7e8      	b.n	801c798 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c7c6:	bf00      	nop
 801c7c8:	20027ba0 	.word	0x20027ba0
 801c7cc:	20027b9a 	.word	0x20027b9a

0801c7d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7d4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801c7d8:	4688      	mov	r8, r1
 801c7da:	4614      	mov	r4, r2
 801c7dc:	461d      	mov	r5, r3
 801c7de:	9e08      	ldr	r6, [sp, #32]
 801c7e0:	2f00      	cmp	r7, #0
 801c7e2:	f000 80ab 	beq.w	801c93c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	f7f3 fd37 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c7ec:	2800      	cmp	r0, #0
 801c7ee:	f040 80a5 	bne.w	801c93c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c7f2:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c7f6:	2fff      	cmp	r7, #255	; 0xff
 801c7f8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c7fc:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801c800:	fb04 1303 	mla	r3, r4, r3, r1
 801c804:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801c808:	eba4 0200 	sub.w	r2, r4, r0
 801c80c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801c810:	fb04 f505 	mul.w	r5, r4, r5
 801c814:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801c818:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801c81c:	d04a      	beq.n	801c8b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801c81e:	b2bc      	uxth	r4, r7
 801c820:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c824:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801c828:	fa5f f788 	uxtb.w	r7, r8
 801c82c:	b2f3      	uxtb	r3, r6
 801c82e:	0040      	lsls	r0, r0, #1
 801c830:	fb0e fe04 	mul.w	lr, lr, r4
 801c834:	4367      	muls	r7, r4
 801c836:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801c83a:	4363      	muls	r3, r4
 801c83c:	fa1f fc8c 	uxth.w	ip, ip
 801c840:	42a9      	cmp	r1, r5
 801c842:	d27b      	bcs.n	801c93c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c844:	eb01 0900 	add.w	r9, r1, r0
 801c848:	4549      	cmp	r1, r9
 801c84a:	d231      	bcs.n	801c8b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801c84c:	880a      	ldrh	r2, [r1, #0]
 801c84e:	1214      	asrs	r4, r2, #8
 801c850:	10d6      	asrs	r6, r2, #3
 801c852:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c856:	00d2      	lsls	r2, r2, #3
 801c858:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c85c:	b2d2      	uxtb	r2, r2
 801c85e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c862:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c866:	fb14 f40c 	smulbb	r4, r4, ip
 801c86a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c86e:	fb12 f20c 	smulbb	r2, r2, ip
 801c872:	fb16 f60c 	smulbb	r6, r6, ip
 801c876:	4474      	add	r4, lr
 801c878:	441a      	add	r2, r3
 801c87a:	b2a4      	uxth	r4, r4
 801c87c:	443e      	add	r6, r7
 801c87e:	b292      	uxth	r2, r2
 801c880:	f104 0a01 	add.w	sl, r4, #1
 801c884:	b2b6      	uxth	r6, r6
 801c886:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c88a:	f102 0a01 	add.w	sl, r2, #1
 801c88e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801c892:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c896:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c89a:	4322      	orrs	r2, r4
 801c89c:	1c74      	adds	r4, r6, #1
 801c89e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c8a2:	0976      	lsrs	r6, r6, #5
 801c8a4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c8a8:	4332      	orrs	r2, r6
 801c8aa:	f821 2b02 	strh.w	r2, [r1], #2
 801c8ae:	e7cb      	b.n	801c848 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801c8b0:	4441      	add	r1, r8
 801c8b2:	e7c5      	b.n	801c840 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801c8b4:	0973      	lsrs	r3, r6, #5
 801c8b6:	4f22      	ldr	r7, [pc, #136]	; (801c940 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801c8b8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c8bc:	ea08 0707 	and.w	r7, r8, r7
 801c8c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c8c4:	433b      	orrs	r3, r7
 801c8c6:	07e7      	lsls	r7, r4, #31
 801c8c8:	ea43 0306 	orr.w	r3, r3, r6
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	d50b      	bpl.n	801c8e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801c8d0:	0040      	lsls	r0, r0, #1
 801c8d2:	0052      	lsls	r2, r2, #1
 801c8d4:	42a9      	cmp	r1, r5
 801c8d6:	d231      	bcs.n	801c93c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c8d8:	180c      	adds	r4, r1, r0
 801c8da:	42a1      	cmp	r1, r4
 801c8dc:	d202      	bcs.n	801c8e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801c8de:	f821 3b02 	strh.w	r3, [r1], #2
 801c8e2:	e7fa      	b.n	801c8da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801c8e4:	4411      	add	r1, r2
 801c8e6:	e7f5      	b.n	801c8d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801c8e8:	078e      	lsls	r6, r1, #30
 801c8ea:	d008      	beq.n	801c8fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801c8ec:	0066      	lsls	r6, r4, #1
 801c8ee:	460a      	mov	r2, r1
 801c8f0:	42aa      	cmp	r2, r5
 801c8f2:	d202      	bcs.n	801c8fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801c8f4:	8013      	strh	r3, [r2, #0]
 801c8f6:	4432      	add	r2, r6
 801c8f8:	e7fa      	b.n	801c8f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801c8fa:	3102      	adds	r1, #2
 801c8fc:	3801      	subs	r0, #1
 801c8fe:	07c2      	lsls	r2, r0, #31
 801c900:	d50b      	bpl.n	801c91a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801c902:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801c906:	0066      	lsls	r6, r4, #1
 801c908:	3a01      	subs	r2, #1
 801c90a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c90e:	42aa      	cmp	r2, r5
 801c910:	d202      	bcs.n	801c918 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801c912:	8013      	strh	r3, [r2, #0]
 801c914:	4432      	add	r2, r6
 801c916:	e7fa      	b.n	801c90e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801c918:	3801      	subs	r0, #1
 801c91a:	b178      	cbz	r0, 801c93c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c91c:	1040      	asrs	r0, r0, #1
 801c91e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801c922:	0080      	lsls	r0, r0, #2
 801c924:	0064      	lsls	r4, r4, #1
 801c926:	42a9      	cmp	r1, r5
 801c928:	d208      	bcs.n	801c93c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c92a:	180e      	adds	r6, r1, r0
 801c92c:	460a      	mov	r2, r1
 801c92e:	42b2      	cmp	r2, r6
 801c930:	d202      	bcs.n	801c938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c932:	f842 3b04 	str.w	r3, [r2], #4
 801c936:	e7fa      	b.n	801c92e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801c938:	4421      	add	r1, r4
 801c93a:	e7f4      	b.n	801c926 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c940:	00fff800 	.word	0x00fff800

0801c944 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c944:	2200      	movs	r2, #0
 801c946:	4910      	ldr	r1, [pc, #64]	; (801c988 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c948:	6042      	str	r2, [r0, #4]
 801c94a:	6001      	str	r1, [r0, #0]
 801c94c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c950:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c954:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c958:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c95c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c960:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c964:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c968:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c96c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c970:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c974:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c978:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c97c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c980:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c984:	4770      	bx	lr
 801c986:	bf00      	nop
 801c988:	0802b538 	.word	0x0802b538

0801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c990:	b08d      	sub	sp, #52	; 0x34
 801c992:	460d      	mov	r5, r1
 801c994:	4604      	mov	r4, r0
 801c996:	4699      	mov	r9, r3
 801c998:	6808      	ldr	r0, [r1, #0]
 801c99a:	ab08      	add	r3, sp, #32
 801c99c:	6849      	ldr	r1, [r1, #4]
 801c99e:	c303      	stmia	r3!, {r0, r1}
 801c9a0:	6810      	ldr	r0, [r2, #0]
 801c9a2:	ab0a      	add	r3, sp, #40	; 0x28
 801c9a4:	6851      	ldr	r1, [r2, #4]
 801c9a6:	c303      	stmia	r3!, {r0, r1}
 801c9a8:	a808      	add	r0, sp, #32
 801c9aa:	f7f9 fa2d 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9ae:	4629      	mov	r1, r5
 801c9b0:	a80a      	add	r0, sp, #40	; 0x28
 801c9b2:	4d67      	ldr	r5, [pc, #412]	; (801cb50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c9b4:	f7f9 fa50 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c9b8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c9bc:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c9c0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c9c4:	6828      	ldr	r0, [r5, #0]
 801c9c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c9ca:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801c9ce:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c9d2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c9d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c9da:	440a      	add	r2, r1
 801c9dc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c9e0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c9e4:	4413      	add	r3, r2
 801c9e6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c9ea:	6803      	ldr	r3, [r0, #0]
 801c9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9ee:	4798      	blx	r3
 801c9f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c9f4:	d119      	bne.n	801ca2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c9f6:	f010 0f20 	tst.w	r0, #32
 801c9fa:	6828      	ldr	r0, [r5, #0]
 801c9fc:	d018      	beq.n	801ca30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c9fe:	2500      	movs	r5, #0
 801ca00:	6801      	ldr	r1, [r0, #0]
 801ca02:	b2b6      	uxth	r6, r6
 801ca04:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ca08:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ca0c:	9601      	str	r6, [sp, #4]
 801ca0e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801ca12:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ca16:	9502      	str	r5, [sp, #8]
 801ca18:	fa1f f588 	uxth.w	r5, r8
 801ca1c:	9500      	str	r5, [sp, #0]
 801ca1e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ca20:	4621      	mov	r1, r4
 801ca22:	47a8      	blx	r5
 801ca24:	b00d      	add	sp, #52	; 0x34
 801ca26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ca2e:	e7e4      	b.n	801c9fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801ca30:	6803      	ldr	r3, [r0, #0]
 801ca32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca34:	4798      	blx	r3
 801ca36:	4947      	ldr	r1, [pc, #284]	; (801cb54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801ca38:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ca3c:	880b      	ldrh	r3, [r1, #0]
 801ca3e:	468a      	mov	sl, r1
 801ca40:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801ca44:	fb03 5202 	mla	r2, r3, r2, r5
 801ca48:	4373      	muls	r3, r6
 801ca4a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ca4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ca52:	9307      	str	r3, [sp, #28]
 801ca54:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801ca58:	9306      	str	r3, [sp, #24]
 801ca5a:	9b07      	ldr	r3, [sp, #28]
 801ca5c:	4298      	cmp	r0, r3
 801ca5e:	d270      	bcs.n	801cb42 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801ca60:	9b06      	ldr	r3, [sp, #24]
 801ca62:	4621      	mov	r1, r4
 801ca64:	eb00 0b03 	add.w	fp, r0, r3
 801ca68:	4558      	cmp	r0, fp
 801ca6a:	d25d      	bcs.n	801cb28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801ca6c:	f851 4b04 	ldr.w	r4, [r1], #4
 801ca70:	0e23      	lsrs	r3, r4, #24
 801ca72:	d014      	beq.n	801ca9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ca74:	2bff      	cmp	r3, #255	; 0xff
 801ca76:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801ca7a:	d112      	bne.n	801caa2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801ca7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ca80:	d10f      	bne.n	801caa2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801ca82:	0963      	lsrs	r3, r4, #5
 801ca84:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801ca88:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ca8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ca90:	f02c 0c07 	bic.w	ip, ip, #7
 801ca94:	ea43 0c0c 	orr.w	ip, r3, ip
 801ca98:	ea4c 0404 	orr.w	r4, ip, r4
 801ca9c:	8004      	strh	r4, [r0, #0]
 801ca9e:	3002      	adds	r0, #2
 801caa0:	e7e2      	b.n	801ca68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801caa2:	fb09 f303 	mul.w	r3, r9, r3
 801caa6:	8807      	ldrh	r7, [r0, #0]
 801caa8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801caac:	fa5f fc8c 	uxtb.w	ip, ip
 801cab0:	1c5a      	adds	r2, r3, #1
 801cab2:	123e      	asrs	r6, r7, #8
 801cab4:	10fd      	asrs	r5, r7, #3
 801cab6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801caba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cabe:	00ff      	lsls	r7, r7, #3
 801cac0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cac4:	1212      	asrs	r2, r2, #8
 801cac6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801caca:	b293      	uxth	r3, r2
 801cacc:	43d2      	mvns	r2, r2
 801cace:	b2ff      	uxtb	r7, r7
 801cad0:	fb1e fe03 	smulbb	lr, lr, r3
 801cad4:	b2d2      	uxtb	r2, r2
 801cad6:	fb1c fc03 	smulbb	ip, ip, r3
 801cada:	b2e4      	uxtb	r4, r4
 801cadc:	fb06 e602 	mla	r6, r6, r2, lr
 801cae0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cae4:	fb14 f403 	smulbb	r4, r4, r3
 801cae8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801caec:	b2b6      	uxth	r6, r6
 801caee:	fb05 c502 	mla	r5, r5, r2, ip
 801caf2:	fb07 4702 	mla	r7, r7, r2, r4
 801caf6:	f106 0e01 	add.w	lr, r6, #1
 801cafa:	b2ad      	uxth	r5, r5
 801cafc:	b2bf      	uxth	r7, r7
 801cafe:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801cb02:	f105 0c01 	add.w	ip, r5, #1
 801cb06:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801cb0a:	1c7e      	adds	r6, r7, #1
 801cb0c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cb10:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801cb14:	096d      	lsrs	r5, r5, #5
 801cb16:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cb1a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cb1e:	ea46 060e 	orr.w	r6, r6, lr
 801cb22:	432e      	orrs	r6, r5
 801cb24:	8006      	strh	r6, [r0, #0]
 801cb26:	e7ba      	b.n	801ca9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cb28:	f8ba 3000 	ldrh.w	r3, [sl]
 801cb2c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801cb30:	eba3 0308 	sub.w	r3, r3, r8
 801cb34:	eba4 0408 	sub.w	r4, r4, r8
 801cb38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cb3c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801cb40:	e78b      	b.n	801ca5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801cb42:	4b03      	ldr	r3, [pc, #12]	; (801cb50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cb44:	6818      	ldr	r0, [r3, #0]
 801cb46:	6803      	ldr	r3, [r0, #0]
 801cb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb4a:	4798      	blx	r3
 801cb4c:	e76a      	b.n	801ca24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801cb4e:	bf00      	nop
 801cb50:	20027ba0 	.word	0x20027ba0
 801cb54:	20027b9a 	.word	0x20027b9a

0801cb58 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801cb58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb5c:	b085      	sub	sp, #20
 801cb5e:	6810      	ldr	r0, [r2, #0]
 801cb60:	460c      	mov	r4, r1
 801cb62:	6851      	ldr	r1, [r2, #4]
 801cb64:	466d      	mov	r5, sp
 801cb66:	4616      	mov	r6, r2
 801cb68:	c503      	stmia	r5!, {r0, r1}
 801cb6a:	6818      	ldr	r0, [r3, #0]
 801cb6c:	6859      	ldr	r1, [r3, #4]
 801cb6e:	c503      	stmia	r5!, {r0, r1}
 801cb70:	4668      	mov	r0, sp
 801cb72:	4d2e      	ldr	r5, [pc, #184]	; (801cc2c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801cb74:	f7f9 f948 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb78:	4631      	mov	r1, r6
 801cb7a:	a802      	add	r0, sp, #8
 801cb7c:	4e2c      	ldr	r6, [pc, #176]	; (801cc30 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801cb7e:	f7f9 f96b 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb82:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801cb86:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801cb8a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801cb8e:	6828      	ldr	r0, [r5, #0]
 801cb90:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cb94:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cb98:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801cb9c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cba0:	f8bd 1000 	ldrh.w	r1, [sp]
 801cba4:	440a      	add	r2, r1
 801cba6:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cbaa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cbae:	4413      	add	r3, r2
 801cbb0:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cbb4:	6803      	ldr	r3, [r0, #0]
 801cbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbb8:	4798      	blx	r3
 801cbba:	8833      	ldrh	r3, [r6, #0]
 801cbbc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801cbc0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801cbc4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801cbc8:	f8df e068 	ldr.w	lr, [pc, #104]	; 801cc34 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801cbcc:	fb03 1202 	mla	r2, r3, r2, r1
 801cbd0:	fb08 f303 	mul.w	r3, r8, r3
 801cbd4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cbd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cbdc:	4298      	cmp	r0, r3
 801cbde:	d21d      	bcs.n	801cc1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801cbe0:	eb00 080c 	add.w	r8, r0, ip
 801cbe4:	4540      	cmp	r0, r8
 801cbe6:	d20f      	bcs.n	801cc08 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801cbe8:	f854 1b04 	ldr.w	r1, [r4], #4
 801cbec:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801cbf0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801cbf4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801cbf8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cbfc:	ea42 0209 	orr.w	r2, r2, r9
 801cc00:	430a      	orrs	r2, r1
 801cc02:	f820 2b02 	strh.w	r2, [r0], #2
 801cc06:	e7ed      	b.n	801cbe4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801cc08:	8832      	ldrh	r2, [r6, #0]
 801cc0a:	1bd2      	subs	r2, r2, r7
 801cc0c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cc10:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cc14:	1bd2      	subs	r2, r2, r7
 801cc16:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801cc1a:	e7df      	b.n	801cbdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801cc1c:	6828      	ldr	r0, [r5, #0]
 801cc1e:	6803      	ldr	r3, [r0, #0]
 801cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc22:	4798      	blx	r3
 801cc24:	b005      	add	sp, #20
 801cc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc2a:	bf00      	nop
 801cc2c:	20027ba0 	.word	0x20027ba0
 801cc30:	20027b9a 	.word	0x20027b9a
 801cc34:	fffff800 	.word	0xfffff800

0801cc38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801cc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc3c:	b08e      	sub	sp, #56	; 0x38
 801cc3e:	460e      	mov	r6, r1
 801cc40:	4604      	mov	r4, r0
 801cc42:	461d      	mov	r5, r3
 801cc44:	6808      	ldr	r0, [r1, #0]
 801cc46:	ab0a      	add	r3, sp, #40	; 0x28
 801cc48:	6849      	ldr	r1, [r1, #4]
 801cc4a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801ce20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801cc4e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ce24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801cc52:	c303      	stmia	r3!, {r0, r1}
 801cc54:	6810      	ldr	r0, [r2, #0]
 801cc56:	ab0c      	add	r3, sp, #48	; 0x30
 801cc58:	6851      	ldr	r1, [r2, #4]
 801cc5a:	c303      	stmia	r3!, {r0, r1}
 801cc5c:	a80a      	add	r0, sp, #40	; 0x28
 801cc5e:	f7f9 f8d3 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc62:	4631      	mov	r1, r6
 801cc64:	a80c      	add	r0, sp, #48	; 0x30
 801cc66:	f7f9 f8f7 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc6a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cc6e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cc72:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cc76:	f8d8 0000 	ldr.w	r0, [r8]
 801cc7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cc7e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801cc82:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801cc86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cc8a:	440c      	add	r4, r1
 801cc8c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801cc90:	440a      	add	r2, r1
 801cc92:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cc96:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cc9a:	4413      	add	r3, r2
 801cc9c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cca0:	6803      	ldr	r3, [r0, #0]
 801cca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cca4:	4798      	blx	r3
 801cca6:	2dff      	cmp	r5, #255	; 0xff
 801cca8:	d124      	bne.n	801ccf4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801ccaa:	f010 0f01 	tst.w	r0, #1
 801ccae:	f8d8 0000 	ldr.w	r0, [r8]
 801ccb2:	d022      	beq.n	801ccfa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801ccb4:	2100      	movs	r1, #0
 801ccb6:	f04f 0e01 	mov.w	lr, #1
 801ccba:	f8d0 c000 	ldr.w	ip, [r0]
 801ccbe:	b2b6      	uxth	r6, r6
 801ccc0:	f8cd e018 	str.w	lr, [sp, #24]
 801ccc4:	b2bf      	uxth	r7, r7
 801ccc6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ccca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ccce:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801ccd2:	f8b9 e000 	ldrh.w	lr, [r9]
 801ccd6:	9503      	str	r5, [sp, #12]
 801ccd8:	9601      	str	r6, [sp, #4]
 801ccda:	9700      	str	r7, [sp, #0]
 801ccdc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cce0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cce4:	9102      	str	r1, [sp, #8]
 801cce6:	4621      	mov	r1, r4
 801cce8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801ccec:	47a8      	blx	r5
 801ccee:	b00e      	add	sp, #56	; 0x38
 801ccf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccf4:	f010 0f04 	tst.w	r0, #4
 801ccf8:	e7d9      	b.n	801ccae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801ccfa:	6803      	ldr	r3, [r0, #0]
 801ccfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccfe:	4798      	blx	r3
 801cd00:	f8b9 3000 	ldrh.w	r3, [r9]
 801cd04:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801cd08:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801cd0c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cd10:	435e      	muls	r6, r3
 801cd12:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cd16:	2dff      	cmp	r5, #255	; 0xff
 801cd18:	fb03 1202 	mla	r2, r3, r2, r1
 801cd1c:	ebac 0c07 	sub.w	ip, ip, r7
 801cd20:	eba3 0707 	sub.w	r7, r3, r7
 801cd24:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cd28:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cd2c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cd30:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801cd34:	d049      	beq.n	801cdca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801cd36:	43eb      	mvns	r3, r5
 801cd38:	fa1f f985 	uxth.w	r9, r5
 801cd3c:	b2db      	uxtb	r3, r3
 801cd3e:	42b0      	cmp	r0, r6
 801cd40:	d266      	bcs.n	801ce10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cd42:	eb00 0a0e 	add.w	sl, r0, lr
 801cd46:	4550      	cmp	r0, sl
 801cd48:	4621      	mov	r1, r4
 801cd4a:	f104 0403 	add.w	r4, r4, #3
 801cd4e:	d25b      	bcs.n	801ce08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801cd50:	8802      	ldrh	r2, [r0, #0]
 801cd52:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cd56:	ea4f 2822 	mov.w	r8, r2, asr #8
 801cd5a:	fb11 f109 	smulbb	r1, r1, r9
 801cd5e:	10d5      	asrs	r5, r2, #3
 801cd60:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801cd64:	00d2      	lsls	r2, r2, #3
 801cd66:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cd6a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801cd6e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cd72:	fb08 1803 	mla	r8, r8, r3, r1
 801cd76:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801cd7a:	b2d2      	uxtb	r2, r2
 801cd7c:	fb11 f109 	smulbb	r1, r1, r9
 801cd80:	fa1f f888 	uxth.w	r8, r8
 801cd84:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cd88:	fb05 1503 	mla	r5, r5, r3, r1
 801cd8c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cd90:	fb11 f109 	smulbb	r1, r1, r9
 801cd94:	b2ad      	uxth	r5, r5
 801cd96:	fb02 1203 	mla	r2, r2, r3, r1
 801cd9a:	f108 0101 	add.w	r1, r8, #1
 801cd9e:	b292      	uxth	r2, r2
 801cda0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801cda4:	1c51      	adds	r1, r2, #1
 801cda6:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801cdaa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cdae:	1c69      	adds	r1, r5, #1
 801cdb0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801cdb4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cdb8:	096d      	lsrs	r5, r5, #5
 801cdba:	ea42 0208 	orr.w	r2, r2, r8
 801cdbe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cdc2:	432a      	orrs	r2, r5
 801cdc4:	f820 2b02 	strh.w	r2, [r0], #2
 801cdc8:	e7bd      	b.n	801cd46 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801cdca:	4a14      	ldr	r2, [pc, #80]	; (801ce1c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801cdcc:	42b0      	cmp	r0, r6
 801cdce:	d21f      	bcs.n	801ce10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cdd0:	eb00 050e 	add.w	r5, r0, lr
 801cdd4:	42a8      	cmp	r0, r5
 801cdd6:	4621      	mov	r1, r4
 801cdd8:	f104 0403 	add.w	r4, r4, #3
 801cddc:	d210      	bcs.n	801ce00 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801cdde:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801cde2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cde6:	00db      	lsls	r3, r3, #3
 801cde8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801cdec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cdf0:	430b      	orrs	r3, r1
 801cdf2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cdf6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801cdfa:	f820 3b02 	strh.w	r3, [r0], #2
 801cdfe:	e7e9      	b.n	801cdd4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ce00:	4438      	add	r0, r7
 801ce02:	eb01 040c 	add.w	r4, r1, ip
 801ce06:	e7e1      	b.n	801cdcc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801ce08:	4438      	add	r0, r7
 801ce0a:	eb01 040c 	add.w	r4, r1, ip
 801ce0e:	e796      	b.n	801cd3e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ce10:	4b03      	ldr	r3, [pc, #12]	; (801ce20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ce12:	6818      	ldr	r0, [r3, #0]
 801ce14:	6803      	ldr	r3, [r0, #0]
 801ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce18:	4798      	blx	r3
 801ce1a:	e768      	b.n	801ccee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801ce1c:	fffff800 	.word	0xfffff800
 801ce20:	20027ba0 	.word	0x20027ba0
 801ce24:	20027b9a 	.word	0x20027b9a

0801ce28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ce28:	b4f0      	push	{r4, r5, r6, r7}
 801ce2a:	4616      	mov	r6, r2
 801ce2c:	461c      	mov	r4, r3
 801ce2e:	460d      	mov	r5, r1
 801ce30:	9a04      	ldr	r2, [sp, #16]
 801ce32:	2e01      	cmp	r6, #1
 801ce34:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ce38:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801ce3c:	d012      	beq.n	801ce64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801ce3e:	d303      	bcc.n	801ce48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801ce40:	2e02      	cmp	r6, #2
 801ce42:	d00a      	beq.n	801ce5a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801ce44:	bcf0      	pop	{r4, r5, r6, r7}
 801ce46:	4770      	bx	lr
 801ce48:	6805      	ldr	r5, [r0, #0]
 801ce4a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801ce4e:	68ed      	ldr	r5, [r5, #12]
 801ce50:	4613      	mov	r3, r2
 801ce52:	4622      	mov	r2, r4
 801ce54:	46ac      	mov	ip, r5
 801ce56:	bcf0      	pop	{r4, r5, r6, r7}
 801ce58:	4760      	bx	ip
 801ce5a:	4621      	mov	r1, r4
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	bcf0      	pop	{r4, r5, r6, r7}
 801ce60:	f7ff bd94 	b.w	801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ce64:	4621      	mov	r1, r4
 801ce66:	4628      	mov	r0, r5
 801ce68:	bcf0      	pop	{r4, r5, r6, r7}
 801ce6a:	f7ff bee5 	b.w	801cc38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801ce70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce74:	b093      	sub	sp, #76	; 0x4c
 801ce76:	4681      	mov	r9, r0
 801ce78:	4688      	mov	r8, r1
 801ce7a:	6810      	ldr	r0, [r2, #0]
 801ce7c:	6851      	ldr	r1, [r2, #4]
 801ce7e:	ac0e      	add	r4, sp, #56	; 0x38
 801ce80:	4616      	mov	r6, r2
 801ce82:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ce86:	4f6b      	ldr	r7, [pc, #428]	; (801d034 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801ce88:	c403      	stmia	r4!, {r0, r1}
 801ce8a:	6818      	ldr	r0, [r3, #0]
 801ce8c:	ac10      	add	r4, sp, #64	; 0x40
 801ce8e:	6859      	ldr	r1, [r3, #4]
 801ce90:	c403      	stmia	r4!, {r0, r1}
 801ce92:	a80e      	add	r0, sp, #56	; 0x38
 801ce94:	f7f8 ffb8 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce98:	4631      	mov	r1, r6
 801ce9a:	a810      	add	r0, sp, #64	; 0x40
 801ce9c:	4e66      	ldr	r6, [pc, #408]	; (801d038 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ce9e:	f7f8 ffdb 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cea2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cea6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ceaa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ceae:	6830      	ldr	r0, [r6, #0]
 801ceb0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ceb4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801ceb8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801cebc:	4489      	add	r9, r1
 801cebe:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cec2:	440a      	add	r2, r1
 801cec4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cec8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cecc:	4413      	add	r3, r2
 801cece:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ced2:	6803      	ldr	r3, [r0, #0]
 801ced4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ced6:	4798      	blx	r3
 801ced8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801cedc:	6830      	ldr	r0, [r6, #0]
 801cede:	d01d      	beq.n	801cf1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801cee0:	2200      	movs	r2, #0
 801cee2:	6801      	ldr	r1, [r0, #0]
 801cee4:	b2a4      	uxth	r4, r4
 801cee6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ceea:	b2ad      	uxth	r5, r5
 801ceec:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801cef0:	220b      	movs	r2, #11
 801cef2:	9207      	str	r2, [sp, #28]
 801cef4:	883a      	ldrh	r2, [r7, #0]
 801cef6:	9502      	str	r5, [sp, #8]
 801cef8:	9206      	str	r2, [sp, #24]
 801cefa:	2201      	movs	r2, #1
 801cefc:	9401      	str	r4, [sp, #4]
 801cefe:	e9cd a204 	strd	sl, r2, [sp, #16]
 801cf02:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801cf06:	9203      	str	r2, [sp, #12]
 801cf08:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801cf0c:	9200      	str	r2, [sp, #0]
 801cf0e:	4642      	mov	r2, r8
 801cf10:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801cf12:	4649      	mov	r1, r9
 801cf14:	47a0      	blx	r4
 801cf16:	b013      	add	sp, #76	; 0x4c
 801cf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1c:	6803      	ldr	r3, [r0, #0]
 801cf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf20:	4798      	blx	r3
 801cf22:	883b      	ldrh	r3, [r7, #0]
 801cf24:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801cf28:	f04f 0e04 	mov.w	lr, #4
 801cf2c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801cf30:	435d      	muls	r5, r3
 801cf32:	fb03 1202 	mla	r2, r3, r2, r1
 801cf36:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cf3a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801cf3e:	920c      	str	r2, [sp, #48]	; 0x30
 801cf40:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801cf44:	1b12      	subs	r2, r2, r4
 801cf46:	920d      	str	r2, [sp, #52]	; 0x34
 801cf48:	0062      	lsls	r2, r4, #1
 801cf4a:	1b1c      	subs	r4, r3, r4
 801cf4c:	920a      	str	r2, [sp, #40]	; 0x28
 801cf4e:	0063      	lsls	r3, r4, #1
 801cf50:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf54:	4298      	cmp	r0, r3
 801cf56:	d266      	bcs.n	801d026 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801cf58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf5a:	eb00 0b03 	add.w	fp, r0, r3
 801cf5e:	4558      	cmp	r0, fp
 801cf60:	d25c      	bcs.n	801d01c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801cf62:	f819 3b01 	ldrb.w	r3, [r9], #1
 801cf66:	fb1e e303 	smlabb	r3, lr, r3, lr
 801cf6a:	f858 2003 	ldr.w	r2, [r8, r3]
 801cf6e:	0e11      	lsrs	r1, r2, #24
 801cf70:	d012      	beq.n	801cf98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cf72:	29ff      	cmp	r1, #255	; 0xff
 801cf74:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801cf78:	d110      	bne.n	801cf9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801cf7a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cf7e:	d10d      	bne.n	801cf9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801cf80:	0953      	lsrs	r3, r2, #5
 801cf82:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801cf86:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cf8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cf8e:	f027 0707 	bic.w	r7, r7, #7
 801cf92:	431f      	orrs	r7, r3
 801cf94:	433a      	orrs	r2, r7
 801cf96:	8002      	strh	r2, [r0, #0]
 801cf98:	3002      	adds	r0, #2
 801cf9a:	e7e0      	b.n	801cf5e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801cf9c:	fb0a f101 	mul.w	r1, sl, r1
 801cfa0:	8806      	ldrh	r6, [r0, #0]
 801cfa2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801cfa6:	b2d2      	uxtb	r2, r2
 801cfa8:	1c4b      	adds	r3, r1, #1
 801cfaa:	1235      	asrs	r5, r6, #8
 801cfac:	10f4      	asrs	r4, r6, #3
 801cfae:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801cfb2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cfb6:	00f6      	lsls	r6, r6, #3
 801cfb8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cfbc:	121b      	asrs	r3, r3, #8
 801cfbe:	b2f6      	uxtb	r6, r6
 801cfc0:	b299      	uxth	r1, r3
 801cfc2:	43db      	mvns	r3, r3
 801cfc4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801cfc8:	fb1c fc01 	smulbb	ip, ip, r1
 801cfcc:	b2db      	uxtb	r3, r3
 801cfce:	fb12 f201 	smulbb	r2, r2, r1
 801cfd2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cfd6:	fb05 c503 	mla	r5, r5, r3, ip
 801cfda:	b2ff      	uxtb	r7, r7
 801cfdc:	fb06 2203 	mla	r2, r6, r3, r2
 801cfe0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801cfe4:	fb17 f701 	smulbb	r7, r7, r1
 801cfe8:	b2ad      	uxth	r5, r5
 801cfea:	b292      	uxth	r2, r2
 801cfec:	fb04 7403 	mla	r4, r4, r3, r7
 801cff0:	f105 0c01 	add.w	ip, r5, #1
 801cff4:	1c57      	adds	r7, r2, #1
 801cff6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cffa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801cffe:	b2a4      	uxth	r4, r4
 801d000:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d004:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d008:	433d      	orrs	r5, r7
 801d00a:	1c67      	adds	r7, r4, #1
 801d00c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d010:	0964      	lsrs	r4, r4, #5
 801d012:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d016:	4325      	orrs	r5, r4
 801d018:	8005      	strh	r5, [r0, #0]
 801d01a:	e7bd      	b.n	801cf98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d01e:	4418      	add	r0, r3
 801d020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d022:	4499      	add	r9, r3
 801d024:	e795      	b.n	801cf52 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d026:	4b04      	ldr	r3, [pc, #16]	; (801d038 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d028:	6818      	ldr	r0, [r3, #0]
 801d02a:	6803      	ldr	r3, [r0, #0]
 801d02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d02e:	4798      	blx	r3
 801d030:	e771      	b.n	801cf16 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d032:	bf00      	nop
 801d034:	20027b9a 	.word	0x20027b9a
 801d038:	20027ba0 	.word	0x20027ba0

0801d03c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d040:	b087      	sub	sp, #28
 801d042:	4680      	mov	r8, r0
 801d044:	460d      	mov	r5, r1
 801d046:	4614      	mov	r4, r2
 801d048:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d04c:	2e00      	cmp	r6, #0
 801d04e:	f000 80b9 	beq.w	801d1c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d052:	6810      	ldr	r0, [r2, #0]
 801d054:	af02      	add	r7, sp, #8
 801d056:	6851      	ldr	r1, [r2, #4]
 801d058:	c703      	stmia	r7!, {r0, r1}
 801d05a:	6818      	ldr	r0, [r3, #0]
 801d05c:	af04      	add	r7, sp, #16
 801d05e:	6859      	ldr	r1, [r3, #4]
 801d060:	c703      	stmia	r7!, {r0, r1}
 801d062:	a802      	add	r0, sp, #8
 801d064:	f7f8 fed0 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d068:	4621      	mov	r1, r4
 801d06a:	a804      	add	r0, sp, #16
 801d06c:	f7f8 fef4 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d070:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d074:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d078:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d07c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d080:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d084:	eb08 0401 	add.w	r4, r8, r1
 801d088:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d08c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d090:	440a      	add	r2, r1
 801d092:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d096:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d09a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d09e:	4413      	add	r3, r2
 801d0a0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d0a4:	4b49      	ldr	r3, [pc, #292]	; (801d1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d0a6:	6818      	ldr	r0, [r3, #0]
 801d0a8:	6803      	ldr	r3, [r0, #0]
 801d0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0ac:	4798      	blx	r3
 801d0ae:	4b48      	ldr	r3, [pc, #288]	; (801d1d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d0b0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d0b4:	2eff      	cmp	r6, #255	; 0xff
 801d0b6:	881a      	ldrh	r2, [r3, #0]
 801d0b8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d0bc:	fb02 c101 	mla	r1, r2, r1, ip
 801d0c0:	fb02 f207 	mul.w	r2, r2, r7
 801d0c4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d0c8:	f105 0104 	add.w	r1, r5, #4
 801d0cc:	461d      	mov	r5, r3
 801d0ce:	d05a      	beq.n	801d186 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d0d0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d0d4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d0d8:	b2b6      	uxth	r6, r6
 801d0da:	9301      	str	r3, [sp, #4]
 801d0dc:	fa1f fe8e 	uxth.w	lr, lr
 801d0e0:	4282      	cmp	r2, r0
 801d0e2:	d96a      	bls.n	801d1ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d0e4:	eb00 0b0a 	add.w	fp, r0, sl
 801d0e8:	4583      	cmp	fp, r0
 801d0ea:	d940      	bls.n	801d16e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d0ec:	8805      	ldrh	r5, [r0, #0]
 801d0ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d0f2:	122f      	asrs	r7, r5, #8
 801d0f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d0f8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d0fc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d100:	00ed      	lsls	r5, r5, #3
 801d102:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d106:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d10a:	fb17 f70e 	smulbb	r7, r7, lr
 801d10e:	b2ed      	uxtb	r5, r5
 801d110:	fb19 f90e 	smulbb	r9, r9, lr
 801d114:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d118:	fb15 f50e 	smulbb	r5, r5, lr
 801d11c:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d120:	10df      	asrs	r7, r3, #3
 801d122:	00db      	lsls	r3, r3, #3
 801d124:	fa1f fc8c 	uxth.w	ip, ip
 801d128:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d12c:	b2db      	uxtb	r3, r3
 801d12e:	fb07 9706 	mla	r7, r7, r6, r9
 801d132:	f10c 0901 	add.w	r9, ip, #1
 801d136:	fb03 5306 	mla	r3, r3, r6, r5
 801d13a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d13e:	b29b      	uxth	r3, r3
 801d140:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d144:	b2bf      	uxth	r7, r7
 801d146:	f103 0c01 	add.w	ip, r3, #1
 801d14a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d14e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d152:	ea4c 0c09 	orr.w	ip, ip, r9
 801d156:	f107 0901 	add.w	r9, r7, #1
 801d15a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d15e:	097f      	lsrs	r7, r7, #5
 801d160:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d164:	ea4c 0c07 	orr.w	ip, ip, r7
 801d168:	f820 cb02 	strh.w	ip, [r0], #2
 801d16c:	e7bc      	b.n	801d0e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d16e:	9b01      	ldr	r3, [sp, #4]
 801d170:	881b      	ldrh	r3, [r3, #0]
 801d172:	eba3 0308 	sub.w	r3, r3, r8
 801d176:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d17a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d17e:	eba3 0308 	sub.w	r3, r3, r8
 801d182:	441c      	add	r4, r3
 801d184:	e7ac      	b.n	801d0e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d186:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d18a:	4282      	cmp	r2, r0
 801d18c:	d915      	bls.n	801d1ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d18e:	eb00 060a 	add.w	r6, r0, sl
 801d192:	4286      	cmp	r6, r0
 801d194:	d906      	bls.n	801d1a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d196:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d19a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d19e:	f820 3b02 	strh.w	r3, [r0], #2
 801d1a2:	e7f6      	b.n	801d192 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d1a4:	882b      	ldrh	r3, [r5, #0]
 801d1a6:	eba3 0308 	sub.w	r3, r3, r8
 801d1aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d1ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d1b2:	eba3 0308 	sub.w	r3, r3, r8
 801d1b6:	441c      	add	r4, r3
 801d1b8:	e7e7      	b.n	801d18a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d1ba:	4b04      	ldr	r3, [pc, #16]	; (801d1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d1bc:	6818      	ldr	r0, [r3, #0]
 801d1be:	6803      	ldr	r3, [r0, #0]
 801d1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1c2:	4798      	blx	r3
 801d1c4:	b007      	add	sp, #28
 801d1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ca:	bf00      	nop
 801d1cc:	20027ba0 	.word	0x20027ba0
 801d1d0:	20027b9a 	.word	0x20027b9a

0801d1d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1d8:	b091      	sub	sp, #68	; 0x44
 801d1da:	4680      	mov	r8, r0
 801d1dc:	460f      	mov	r7, r1
 801d1de:	4614      	mov	r4, r2
 801d1e0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d1e4:	2d00      	cmp	r5, #0
 801d1e6:	d051      	beq.n	801d28c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d1e8:	6810      	ldr	r0, [r2, #0]
 801d1ea:	ae0c      	add	r6, sp, #48	; 0x30
 801d1ec:	6851      	ldr	r1, [r2, #4]
 801d1ee:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801d3f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d1f2:	c603      	stmia	r6!, {r0, r1}
 801d1f4:	6818      	ldr	r0, [r3, #0]
 801d1f6:	ae0e      	add	r6, sp, #56	; 0x38
 801d1f8:	6859      	ldr	r1, [r3, #4]
 801d1fa:	c603      	stmia	r6!, {r0, r1}
 801d1fc:	a80c      	add	r0, sp, #48	; 0x30
 801d1fe:	f7f8 fe03 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d202:	4621      	mov	r1, r4
 801d204:	a80e      	add	r0, sp, #56	; 0x38
 801d206:	f7f8 fe27 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d20a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d20e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d212:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d216:	f8d9 0000 	ldr.w	r0, [r9]
 801d21a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d21e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d222:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d226:	eb08 0401 	add.w	r4, r8, r1
 801d22a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d22e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801d3f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d232:	440a      	add	r2, r1
 801d234:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d238:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d23c:	4413      	add	r3, r2
 801d23e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d246:	4798      	blx	r3
 801d248:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d24c:	f8d9 0000 	ldr.w	r0, [r9]
 801d250:	d01f      	beq.n	801d292 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d252:	2200      	movs	r2, #0
 801d254:	6801      	ldr	r1, [r0, #0]
 801d256:	b2b6      	uxth	r6, r6
 801d258:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d25c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d260:	220b      	movs	r2, #11
 801d262:	9207      	str	r2, [sp, #28]
 801d264:	f8b8 2000 	ldrh.w	r2, [r8]
 801d268:	9601      	str	r6, [sp, #4]
 801d26a:	9206      	str	r2, [sp, #24]
 801d26c:	2201      	movs	r2, #1
 801d26e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d272:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d276:	9203      	str	r2, [sp, #12]
 801d278:	fa1f f28a 	uxth.w	r2, sl
 801d27c:	9202      	str	r2, [sp, #8]
 801d27e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d282:	9200      	str	r2, [sp, #0]
 801d284:	463a      	mov	r2, r7
 801d286:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d288:	4621      	mov	r1, r4
 801d28a:	47a8      	blx	r5
 801d28c:	b011      	add	sp, #68	; 0x44
 801d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d292:	6803      	ldr	r3, [r0, #0]
 801d294:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d29a:	4798      	blx	r3
 801d29c:	f8b8 2000 	ldrh.w	r2, [r8]
 801d2a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d2a4:	2dff      	cmp	r5, #255	; 0xff
 801d2a6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d2aa:	fb0a fa02 	mul.w	sl, sl, r2
 801d2ae:	fb02 1303 	mla	r3, r2, r3, r1
 801d2b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d2b6:	d062      	beq.n	801d37e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d2b8:	ea6f 0c05 	mvn.w	ip, r5
 801d2bc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d2c0:	b2ad      	uxth	r5, r5
 801d2c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d2c6:	fa5f fc8c 	uxtb.w	ip, ip
 801d2ca:	930a      	str	r3, [sp, #40]	; 0x28
 801d2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2ce:	4298      	cmp	r0, r3
 801d2d0:	f080 8085 	bcs.w	801d3de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d2d4:	eb00 0b09 	add.w	fp, r0, r9
 801d2d8:	4558      	cmp	r0, fp
 801d2da:	d246      	bcs.n	801d36a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d2dc:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d2e0:	2303      	movs	r3, #3
 801d2e2:	2204      	movs	r2, #4
 801d2e4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d2e8:	8803      	ldrh	r3, [r0, #0]
 801d2ea:	eb07 0a0e 	add.w	sl, r7, lr
 801d2ee:	1219      	asrs	r1, r3, #8
 801d2f0:	10da      	asrs	r2, r3, #3
 801d2f2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d2f6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d2fa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d2fe:	00db      	lsls	r3, r3, #3
 801d300:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d304:	fb18 f805 	smulbb	r8, r8, r5
 801d308:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d30c:	fb1e fe05 	smulbb	lr, lr, r5
 801d310:	b2db      	uxtb	r3, r3
 801d312:	fb01 810c 	mla	r1, r1, ip, r8
 801d316:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d31a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d31e:	fb18 f805 	smulbb	r8, r8, r5
 801d322:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d326:	b289      	uxth	r1, r1
 801d328:	fb02 820c 	mla	r2, r2, ip, r8
 801d32c:	fb03 e30c 	mla	r3, r3, ip, lr
 801d330:	f101 0801 	add.w	r8, r1, #1
 801d334:	b292      	uxth	r2, r2
 801d336:	b29b      	uxth	r3, r3
 801d338:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d33c:	f102 0801 	add.w	r8, r2, #1
 801d340:	f103 0e01 	add.w	lr, r3, #1
 801d344:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d348:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d34c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d350:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d354:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d358:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d35c:	ea4e 0101 	orr.w	r1, lr, r1
 801d360:	ea41 0108 	orr.w	r1, r1, r8
 801d364:	f820 1b02 	strh.w	r1, [r0], #2
 801d368:	e7b6      	b.n	801d2d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801d36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d36c:	881b      	ldrh	r3, [r3, #0]
 801d36e:	1b9b      	subs	r3, r3, r6
 801d370:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d374:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d378:	1b9b      	subs	r3, r3, r6
 801d37a:	441c      	add	r4, r3
 801d37c:	e7a6      	b.n	801d2cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d37e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d382:	2203      	movs	r2, #3
 801d384:	2504      	movs	r5, #4
 801d386:	4919      	ldr	r1, [pc, #100]	; (801d3ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801d388:	4550      	cmp	r0, sl
 801d38a:	d228      	bcs.n	801d3de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d38c:	eb00 0c09 	add.w	ip, r0, r9
 801d390:	4560      	cmp	r0, ip
 801d392:	4623      	mov	r3, r4
 801d394:	d219      	bcs.n	801d3ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801d396:	f893 e000 	ldrb.w	lr, [r3]
 801d39a:	3401      	adds	r4, #1
 801d39c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d3a0:	eb07 0b0e 	add.w	fp, r7, lr
 801d3a4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d3a8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d3ac:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d3b0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d3b4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d3b8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d3bc:	ea43 030b 	orr.w	r3, r3, fp
 801d3c0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d3c4:	f820 3b02 	strh.w	r3, [r0], #2
 801d3c8:	e7e2      	b.n	801d390 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801d3ca:	f8b8 3000 	ldrh.w	r3, [r8]
 801d3ce:	1b9b      	subs	r3, r3, r6
 801d3d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d3d4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d3d8:	1b9b      	subs	r3, r3, r6
 801d3da:	441c      	add	r4, r3
 801d3dc:	e7d4      	b.n	801d388 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d3de:	4b04      	ldr	r3, [pc, #16]	; (801d3f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801d3e0:	6818      	ldr	r0, [r3, #0]
 801d3e2:	6803      	ldr	r3, [r0, #0]
 801d3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3e6:	4798      	blx	r3
 801d3e8:	e750      	b.n	801d28c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d3ea:	bf00      	nop
 801d3ec:	fffff800 	.word	0xfffff800
 801d3f0:	20027ba0 	.word	0x20027ba0
 801d3f4:	20027b9a 	.word	0x20027b9a

0801d3f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d3f8:	b430      	push	{r4, r5}
 801d3fa:	780d      	ldrb	r5, [r1, #0]
 801d3fc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d400:	2d01      	cmp	r5, #1
 801d402:	d00a      	beq.n	801d41a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d404:	d305      	bcc.n	801d412 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d406:	2d02      	cmp	r5, #2
 801d408:	d10b      	bne.n	801d422 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d40a:	9402      	str	r4, [sp, #8]
 801d40c:	bc30      	pop	{r4, r5}
 801d40e:	f7ff be15 	b.w	801d03c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d412:	9402      	str	r4, [sp, #8]
 801d414:	bc30      	pop	{r4, r5}
 801d416:	f7ff bd2b 	b.w	801ce70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d41a:	9402      	str	r4, [sp, #8]
 801d41c:	bc30      	pop	{r4, r5}
 801d41e:	f7ff bed9 	b.w	801d1d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d422:	bc30      	pop	{r4, r5}
 801d424:	4770      	bx	lr
	...

0801d428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d42c:	b087      	sub	sp, #28
 801d42e:	4604      	mov	r4, r0
 801d430:	460e      	mov	r6, r1
 801d432:	6810      	ldr	r0, [r2, #0]
 801d434:	6851      	ldr	r1, [r2, #4]
 801d436:	ad02      	add	r5, sp, #8
 801d438:	4617      	mov	r7, r2
 801d43a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d43e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801d670 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d442:	c503      	stmia	r5!, {r0, r1}
 801d444:	6818      	ldr	r0, [r3, #0]
 801d446:	ad04      	add	r5, sp, #16
 801d448:	6859      	ldr	r1, [r3, #4]
 801d44a:	c503      	stmia	r5!, {r0, r1}
 801d44c:	a802      	add	r0, sp, #8
 801d44e:	f7f8 fcdb 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d452:	4639      	mov	r1, r7
 801d454:	a804      	add	r0, sp, #16
 801d456:	f7f8 fcff 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d45a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d45e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d462:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d466:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d46a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d46e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d472:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d476:	440e      	add	r6, r1
 801d478:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d47c:	440a      	add	r2, r1
 801d47e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d482:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d486:	4413      	add	r3, r2
 801d488:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d48c:	4b77      	ldr	r3, [pc, #476]	; (801d66c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d48e:	6818      	ldr	r0, [r3, #0]
 801d490:	6803      	ldr	r3, [r0, #0]
 801d492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d494:	4798      	blx	r3
 801d496:	f8b9 b000 	ldrh.w	fp, [r9]
 801d49a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d49e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d4a2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d4a6:	fb05 f50b 	mul.w	r5, r5, fp
 801d4aa:	fb0b 2303 	mla	r3, fp, r3, r2
 801d4ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d4b2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d4b6:	9300      	str	r3, [sp, #0]
 801d4b8:	d069      	beq.n	801d58e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d4ba:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d4be:	4558      	cmp	r0, fp
 801d4c0:	f080 80cc 	bcs.w	801d65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d4c4:	9b00      	ldr	r3, [sp, #0]
 801d4c6:	4631      	mov	r1, r6
 801d4c8:	18c3      	adds	r3, r0, r3
 801d4ca:	9301      	str	r3, [sp, #4]
 801d4cc:	9b01      	ldr	r3, [sp, #4]
 801d4ce:	4298      	cmp	r0, r3
 801d4d0:	d24f      	bcs.n	801d572 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d4d6:	2a00      	cmp	r2, #0
 801d4d8:	d048      	beq.n	801d56c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d4da:	fb0a f202 	mul.w	r2, sl, r2
 801d4de:	1c53      	adds	r3, r2, #1
 801d4e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d4e4:	121b      	asrs	r3, r3, #8
 801d4e6:	d041      	beq.n	801d56c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d4e8:	8802      	ldrh	r2, [r0, #0]
 801d4ea:	b29e      	uxth	r6, r3
 801d4ec:	f8b4 c000 	ldrh.w	ip, [r4]
 801d4f0:	43db      	mvns	r3, r3
 801d4f2:	1215      	asrs	r5, r2, #8
 801d4f4:	b2db      	uxtb	r3, r3
 801d4f6:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d4fa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d4fe:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d502:	fb15 f503 	smulbb	r5, r5, r3
 801d506:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d50a:	00d2      	lsls	r2, r2, #3
 801d50c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d510:	fb07 5706 	mla	r7, r7, r6, r5
 801d514:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d518:	b2d2      	uxtb	r2, r2
 801d51a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d51e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d522:	fb1e fe03 	smulbb	lr, lr, r3
 801d526:	b2bf      	uxth	r7, r7
 801d528:	fb12 f203 	smulbb	r2, r2, r3
 801d52c:	fa5f fc8c 	uxtb.w	ip, ip
 801d530:	fb05 e506 	mla	r5, r5, r6, lr
 801d534:	f107 0e01 	add.w	lr, r7, #1
 801d538:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d53c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d540:	fa1f fc8c 	uxth.w	ip, ip
 801d544:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d548:	b2ad      	uxth	r5, r5
 801d54a:	f10c 0701 	add.w	r7, ip, #1
 801d54e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d552:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d556:	ea47 070e 	orr.w	r7, r7, lr
 801d55a:	f105 0e01 	add.w	lr, r5, #1
 801d55e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d562:	096d      	lsrs	r5, r5, #5
 801d564:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d568:	432f      	orrs	r7, r5
 801d56a:	8007      	strh	r7, [r0, #0]
 801d56c:	3002      	adds	r0, #2
 801d56e:	3402      	adds	r4, #2
 801d570:	e7ac      	b.n	801d4cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d572:	f8b9 3000 	ldrh.w	r3, [r9]
 801d576:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d57a:	eba3 0308 	sub.w	r3, r3, r8
 801d57e:	eba6 0608 	sub.w	r6, r6, r8
 801d582:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d586:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d58a:	440e      	add	r6, r1
 801d58c:	e797      	b.n	801d4be <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d58e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d592:	42a8      	cmp	r0, r5
 801d594:	d262      	bcs.n	801d65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d596:	9b00      	ldr	r3, [sp, #0]
 801d598:	4631      	mov	r1, r6
 801d59a:	eb00 0b03 	add.w	fp, r0, r3
 801d59e:	4558      	cmp	r0, fp
 801d5a0:	d24e      	bcs.n	801d640 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d5a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d5a6:	b12b      	cbz	r3, 801d5b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d5a8:	2bff      	cmp	r3, #255	; 0xff
 801d5aa:	f8b4 e000 	ldrh.w	lr, [r4]
 801d5ae:	d104      	bne.n	801d5ba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d5b0:	f8a0 e000 	strh.w	lr, [r0]
 801d5b4:	3002      	adds	r0, #2
 801d5b6:	3402      	adds	r4, #2
 801d5b8:	e7f1      	b.n	801d59e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d5ba:	8802      	ldrh	r2, [r0, #0]
 801d5bc:	b29f      	uxth	r7, r3
 801d5be:	43db      	mvns	r3, r3
 801d5c0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d5c4:	1216      	asrs	r6, r2, #8
 801d5c6:	b2db      	uxtb	r3, r3
 801d5c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d5cc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d5d0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d5d4:	00d2      	lsls	r2, r2, #3
 801d5d6:	fb16 f603 	smulbb	r6, r6, r3
 801d5da:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d5de:	b2d2      	uxtb	r2, r2
 801d5e0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d5e4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d5e8:	fb1a fa03 	smulbb	sl, sl, r3
 801d5ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d5f0:	fa1f fc8c 	uxth.w	ip, ip
 801d5f4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d5f8:	fb12 f303 	smulbb	r3, r2, r3
 801d5fc:	fa5f fe8e 	uxtb.w	lr, lr
 801d600:	fb06 a607 	mla	r6, r6, r7, sl
 801d604:	f10c 0201 	add.w	r2, ip, #1
 801d608:	fb0e 3307 	mla	r3, lr, r7, r3
 801d60c:	b2b6      	uxth	r6, r6
 801d60e:	b29b      	uxth	r3, r3
 801d610:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d614:	f106 0a01 	add.w	sl, r6, #1
 801d618:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801d61c:	f103 0c01 	add.w	ip, r3, #1
 801d620:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d624:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d628:	0976      	lsrs	r6, r6, #5
 801d62a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d62e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d632:	ea4c 0c02 	orr.w	ip, ip, r2
 801d636:	ea4c 0c06 	orr.w	ip, ip, r6
 801d63a:	f8a0 c000 	strh.w	ip, [r0]
 801d63e:	e7b9      	b.n	801d5b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d640:	f8b9 3000 	ldrh.w	r3, [r9]
 801d644:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d648:	eba3 0308 	sub.w	r3, r3, r8
 801d64c:	eba6 0608 	sub.w	r6, r6, r8
 801d650:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d654:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d658:	440e      	add	r6, r1
 801d65a:	e79a      	b.n	801d592 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d65c:	4b03      	ldr	r3, [pc, #12]	; (801d66c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d65e:	6818      	ldr	r0, [r3, #0]
 801d660:	6803      	ldr	r3, [r0, #0]
 801d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d664:	4798      	blx	r3
 801d666:	b007      	add	sp, #28
 801d668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d66c:	20027ba0 	.word	0x20027ba0
 801d670:	20027b9a 	.word	0x20027b9a

0801d674 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d678:	b089      	sub	sp, #36	; 0x24
 801d67a:	4682      	mov	sl, r0
 801d67c:	460f      	mov	r7, r1
 801d67e:	4691      	mov	r9, r2
 801d680:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801d684:	4698      	mov	r8, r3
 801d686:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d688:	2e00      	cmp	r6, #0
 801d68a:	d036      	beq.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d68c:	4608      	mov	r0, r1
 801d68e:	f7fc f861 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d692:	4605      	mov	r5, r0
 801d694:	4638      	mov	r0, r7
 801d696:	f7fc f891 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d69a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d69e:	4638      	mov	r0, r7
 801d6a0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d6a4:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d6a8:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d6ac:	f7fc f93e 	bl	801992c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d6b0:	4605      	mov	r5, r0
 801d6b2:	4638      	mov	r0, r7
 801d6b4:	f7fc f96a 	bl	801998c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d6b8:	4681      	mov	r9, r0
 801d6ba:	4638      	mov	r0, r7
 801d6bc:	f7fc f9ba 	bl	8019a34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d6c0:	280b      	cmp	r0, #11
 801d6c2:	d81a      	bhi.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d6c4:	e8df f000 	tbb	[pc, r0]
 801d6c8:	1906aebd 	.word	0x1906aebd
 801d6cc:	19191919 	.word	0x19191919
 801d6d0:	b5191919 	.word	0xb5191919
 801d6d4:	4bb0      	ldr	r3, [pc, #704]	; (801d998 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801d6d6:	6818      	ldr	r0, [r3, #0]
 801d6d8:	6803      	ldr	r3, [r0, #0]
 801d6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6dc:	4798      	blx	r3
 801d6de:	2eff      	cmp	r6, #255	; 0xff
 801d6e0:	d121      	bne.n	801d726 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d6e2:	0683      	lsls	r3, r0, #26
 801d6e4:	d41f      	bmi.n	801d726 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d6e6:	4638      	mov	r0, r7
 801d6e8:	f7fc f8e8 	bl	80198bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d6ec:	b940      	cbnz	r0, 801d700 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801d6ee:	4623      	mov	r3, r4
 801d6f0:	aa02      	add	r2, sp, #8
 801d6f2:	4629      	mov	r1, r5
 801d6f4:	4650      	mov	r0, sl
 801d6f6:	f7ff fa2f 	bl	801cb58 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d6fa:	b009      	add	sp, #36	; 0x24
 801d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d700:	f10d 0818 	add.w	r8, sp, #24
 801d704:	4639      	mov	r1, r7
 801d706:	af04      	add	r7, sp, #16
 801d708:	4640      	mov	r0, r8
 801d70a:	f7fc f88b 	bl	8019824 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d70e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d712:	e887 0003 	stmia.w	r7, {r0, r1}
 801d716:	4638      	mov	r0, r7
 801d718:	4621      	mov	r1, r4
 801d71a:	f7f2 fd5b 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801d71e:	4638      	mov	r0, r7
 801d720:	f7f2 fd9b 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d724:	b130      	cbz	r0, 801d734 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d726:	4633      	mov	r3, r6
 801d728:	4622      	mov	r2, r4
 801d72a:	a902      	add	r1, sp, #8
 801d72c:	4628      	mov	r0, r5
 801d72e:	f7ff f92d 	bl	801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d732:	e7e2      	b.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d734:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d738:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d73c:	4293      	cmp	r3, r2
 801d73e:	dd12      	ble.n	801d766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801d740:	1a9b      	subs	r3, r3, r2
 801d742:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d746:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d74a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d74e:	4628      	mov	r0, r5
 801d750:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d754:	4642      	mov	r2, r8
 801d756:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d75a:	a902      	add	r1, sp, #8
 801d75c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d760:	4633      	mov	r3, r6
 801d762:	f7ff f913 	bl	801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d766:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d76a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d76e:	4293      	cmp	r3, r2
 801d770:	dd12      	ble.n	801d798 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801d772:	1a9b      	subs	r3, r3, r2
 801d774:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d778:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d77c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d780:	4642      	mov	r2, r8
 801d782:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d786:	4628      	mov	r0, r5
 801d788:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d78c:	23ff      	movs	r3, #255	; 0xff
 801d78e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d792:	a902      	add	r1, sp, #8
 801d794:	f7ff f8fa 	bl	801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d798:	463b      	mov	r3, r7
 801d79a:	aa02      	add	r2, sp, #8
 801d79c:	4629      	mov	r1, r5
 801d79e:	4650      	mov	r0, sl
 801d7a0:	f7ff f9da 	bl	801cb58 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d7a4:	88a2      	ldrh	r2, [r4, #4]
 801d7a6:	8823      	ldrh	r3, [r4, #0]
 801d7a8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d7ac:	4413      	add	r3, r2
 801d7ae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d7b2:	440a      	add	r2, r1
 801d7b4:	b29b      	uxth	r3, r3
 801d7b6:	b292      	uxth	r2, r2
 801d7b8:	b218      	sxth	r0, r3
 801d7ba:	b211      	sxth	r1, r2
 801d7bc:	4288      	cmp	r0, r1
 801d7be:	dd12      	ble.n	801d7e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801d7c0:	1a9b      	subs	r3, r3, r2
 801d7c2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d7c6:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801d7ca:	4642      	mov	r2, r8
 801d7cc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d7d0:	a902      	add	r1, sp, #8
 801d7d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d7d6:	23ff      	movs	r3, #255	; 0xff
 801d7d8:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d7dc:	4628      	mov	r0, r5
 801d7de:	f8ad 601a 	strh.w	r6, [sp, #26]
 801d7e2:	f7ff f8d3 	bl	801c98c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d7e6:	88e2      	ldrh	r2, [r4, #6]
 801d7e8:	8863      	ldrh	r3, [r4, #2]
 801d7ea:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d7ee:	4413      	add	r3, r2
 801d7f0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d7f4:	440a      	add	r2, r1
 801d7f6:	b29b      	uxth	r3, r3
 801d7f8:	b292      	uxth	r2, r2
 801d7fa:	b218      	sxth	r0, r3
 801d7fc:	b211      	sxth	r1, r2
 801d7fe:	4288      	cmp	r0, r1
 801d800:	f77f af7b 	ble.w	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d804:	1a9b      	subs	r3, r3, r2
 801d806:	f9b4 6000 	ldrsh.w	r6, [r4]
 801d80a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d80e:	4642      	mov	r2, r8
 801d810:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d814:	23ff      	movs	r3, #255	; 0xff
 801d816:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d81a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d81e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d822:	e782      	b.n	801d72a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801d824:	4633      	mov	r3, r6
 801d826:	4622      	mov	r2, r4
 801d828:	a902      	add	r1, sp, #8
 801d82a:	4628      	mov	r0, r5
 801d82c:	f7ff fa04 	bl	801cc38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d830:	e763      	b.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d832:	9600      	str	r6, [sp, #0]
 801d834:	4623      	mov	r3, r4
 801d836:	aa02      	add	r2, sp, #8
 801d838:	4649      	mov	r1, r9
 801d83a:	4628      	mov	r0, r5
 801d83c:	f7ff fddc 	bl	801d3f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d840:	e75b      	b.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d842:	4638      	mov	r0, r7
 801d844:	f7fc f83a 	bl	80198bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d848:	b950      	cbnz	r0, 801d860 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801d84a:	f8da 3000 	ldr.w	r3, [sl]
 801d84e:	aa02      	add	r2, sp, #8
 801d850:	4629      	mov	r1, r5
 801d852:	e9cd 6000 	strd	r6, r0, [sp]
 801d856:	4650      	mov	r0, sl
 801d858:	68de      	ldr	r6, [r3, #12]
 801d85a:	4623      	mov	r3, r4
 801d85c:	47b0      	blx	r6
 801d85e:	e74c      	b.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d860:	f10d 0818 	add.w	r8, sp, #24
 801d864:	4639      	mov	r1, r7
 801d866:	af04      	add	r7, sp, #16
 801d868:	4640      	mov	r0, r8
 801d86a:	f7fb ffdb 	bl	8019824 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d86e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d872:	e887 0003 	stmia.w	r7, {r0, r1}
 801d876:	4638      	mov	r0, r7
 801d878:	4621      	mov	r1, r4
 801d87a:	f7f2 fcab 	bl	80101d4 <_ZN8touchgfx4RectaNERKS0_>
 801d87e:	4638      	mov	r0, r7
 801d880:	f7f2 fceb 	bl	801025a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d884:	b138      	cbz	r0, 801d896 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801d886:	4623      	mov	r3, r4
 801d888:	9600      	str	r6, [sp, #0]
 801d88a:	aa02      	add	r2, sp, #8
 801d88c:	4649      	mov	r1, r9
 801d88e:	4628      	mov	r0, r5
 801d890:	f7ff fdca 	bl	801d428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d894:	e731      	b.n	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d896:	f8da 3000 	ldr.w	r3, [sl]
 801d89a:	aa02      	add	r2, sp, #8
 801d89c:	4629      	mov	r1, r5
 801d89e:	e9cd 6000 	strd	r6, r0, [sp]
 801d8a2:	4650      	mov	r0, sl
 801d8a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d8a8:	463b      	mov	r3, r7
 801d8aa:	47d8      	blx	fp
 801d8ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d8b0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d8b4:	4293      	cmp	r3, r2
 801d8b6:	dd13      	ble.n	801d8e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801d8b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d8bc:	1a9b      	subs	r3, r3, r2
 801d8be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d8c2:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d8cc:	aa02      	add	r2, sp, #8
 801d8ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d8d2:	4649      	mov	r1, r9
 801d8d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d8d8:	4643      	mov	r3, r8
 801d8da:	9600      	str	r6, [sp, #0]
 801d8dc:	f7ff fda4 	bl	801d428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d8e0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d8e4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d8e8:	4293      	cmp	r3, r2
 801d8ea:	dd13      	ble.n	801d914 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801d8ec:	1a9b      	subs	r3, r3, r2
 801d8ee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d8f2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d8f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d8fa:	aa02      	add	r2, sp, #8
 801d8fc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d900:	4628      	mov	r0, r5
 801d902:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d906:	4643      	mov	r3, r8
 801d908:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d90c:	4649      	mov	r1, r9
 801d90e:	9600      	str	r6, [sp, #0]
 801d910:	f7ff fd8a 	bl	801d428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d914:	88a2      	ldrh	r2, [r4, #4]
 801d916:	8823      	ldrh	r3, [r4, #0]
 801d918:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d91c:	4413      	add	r3, r2
 801d91e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d922:	440a      	add	r2, r1
 801d924:	b29b      	uxth	r3, r3
 801d926:	b292      	uxth	r2, r2
 801d928:	b218      	sxth	r0, r3
 801d92a:	b211      	sxth	r1, r2
 801d92c:	4288      	cmp	r0, r1
 801d92e:	dd13      	ble.n	801d958 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801d930:	1a9b      	subs	r3, r3, r2
 801d932:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d936:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801d93a:	aa02      	add	r2, sp, #8
 801d93c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d940:	4649      	mov	r1, r9
 801d942:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d946:	4643      	mov	r3, r8
 801d948:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d94c:	4628      	mov	r0, r5
 801d94e:	9600      	str	r6, [sp, #0]
 801d950:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d954:	f7ff fd68 	bl	801d428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d958:	88e2      	ldrh	r2, [r4, #6]
 801d95a:	8863      	ldrh	r3, [r4, #2]
 801d95c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d960:	4413      	add	r3, r2
 801d962:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d966:	440a      	add	r2, r1
 801d968:	b29b      	uxth	r3, r3
 801d96a:	b292      	uxth	r2, r2
 801d96c:	b218      	sxth	r0, r3
 801d96e:	b211      	sxth	r1, r2
 801d970:	4288      	cmp	r0, r1
 801d972:	f77f aec2 	ble.w	801d6fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d976:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d97a:	1a9b      	subs	r3, r3, r2
 801d97c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d980:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d984:	4643      	mov	r3, r8
 801d986:	f8ad 7018 	strh.w	r7, [sp, #24]
 801d98a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d98e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d992:	9600      	str	r6, [sp, #0]
 801d994:	e779      	b.n	801d88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801d996:	bf00      	nop
 801d998:	20027ba0 	.word	0x20027ba0

0801d99c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d99c:	b180      	cbz	r0, 801d9c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801d99e:	2903      	cmp	r1, #3
 801d9a0:	d81c      	bhi.n	801d9dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d9a2:	e8df f001 	tbb	[pc, r1]
 801d9a6:	1d02      	.short	0x1d02
 801d9a8:	1f08      	.short	0x1f08
 801d9aa:	4b10      	ldr	r3, [pc, #64]	; (801d9ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d9ac:	8818      	ldrh	r0, [r3, #0]
 801d9ae:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d9b2:	4240      	negs	r0, r0
 801d9b4:	4770      	bx	lr
 801d9b6:	4b0d      	ldr	r3, [pc, #52]	; (801d9ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d9b8:	8818      	ldrh	r0, [r3, #0]
 801d9ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d9be:	4770      	bx	lr
 801d9c0:	2903      	cmp	r1, #3
 801d9c2:	d80b      	bhi.n	801d9dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d9c4:	a301      	add	r3, pc, #4	; (adr r3, 801d9cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801d9c6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d9ca:	bf00      	nop
 801d9cc:	0801d9e1 	.word	0x0801d9e1
 801d9d0:	0801d9b7 	.word	0x0801d9b7
 801d9d4:	0801d9e5 	.word	0x0801d9e5
 801d9d8:	0801d9ab 	.word	0x0801d9ab
 801d9dc:	2000      	movs	r0, #0
 801d9de:	4770      	bx	lr
 801d9e0:	2001      	movs	r0, #1
 801d9e2:	4770      	bx	lr
 801d9e4:	f04f 30ff 	mov.w	r0, #4294967295
 801d9e8:	4770      	bx	lr
 801d9ea:	bf00      	nop
 801d9ec:	20027b9a 	.word	0x20027b9a

0801d9f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d9f0:	b180      	cbz	r0, 801da14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801d9f2:	2903      	cmp	r1, #3
 801d9f4:	d81c      	bhi.n	801da30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d9f6:	e8df f001 	tbb	[pc, r1]
 801d9fa:	021d      	.short	0x021d
 801d9fc:	071f      	.short	0x071f
 801d9fe:	4b10      	ldr	r3, [pc, #64]	; (801da40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801da00:	8818      	ldrh	r0, [r3, #0]
 801da02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801da06:	4770      	bx	lr
 801da08:	4b0d      	ldr	r3, [pc, #52]	; (801da40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801da0a:	8818      	ldrh	r0, [r3, #0]
 801da0c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801da10:	4240      	negs	r0, r0
 801da12:	4770      	bx	lr
 801da14:	2903      	cmp	r1, #3
 801da16:	d80b      	bhi.n	801da30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801da18:	a301      	add	r3, pc, #4	; (adr r3, 801da20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801da1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801da1e:	bf00      	nop
 801da20:	0801d9ff 	.word	0x0801d9ff
 801da24:	0801da39 	.word	0x0801da39
 801da28:	0801da09 	.word	0x0801da09
 801da2c:	0801da35 	.word	0x0801da35
 801da30:	2000      	movs	r0, #0
 801da32:	4770      	bx	lr
 801da34:	2001      	movs	r0, #1
 801da36:	4770      	bx	lr
 801da38:	f04f 30ff 	mov.w	r0, #4294967295
 801da3c:	4770      	bx	lr
 801da3e:	bf00      	nop
 801da40:	20027b9a 	.word	0x20027b9a

0801da44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da48:	b099      	sub	sp, #100	; 0x64
 801da4a:	910b      	str	r1, [sp, #44]	; 0x2c
 801da4c:	a914      	add	r1, sp, #80	; 0x50
 801da4e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801da52:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801da56:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801da5a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801da5e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801da62:	e881 000c 	stmia.w	r1, {r2, r3}
 801da66:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801da6a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801da6e:	9309      	str	r3, [sp, #36]	; 0x24
 801da70:	f891 900d 	ldrb.w	r9, [r1, #13]
 801da74:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801da78:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801da7c:	9310      	str	r3, [sp, #64]	; 0x40
 801da7e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801da82:	930c      	str	r3, [sp, #48]	; 0x30
 801da84:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801da88:	798f      	ldrb	r7, [r1, #6]
 801da8a:	431f      	orrs	r7, r3
 801da8c:	f000 8195 	beq.w	801ddba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801da90:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801da94:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801da98:	f891 9007 	ldrb.w	r9, [r1, #7]
 801da9c:	ea59 0903 	orrs.w	r9, r9, r3
 801daa0:	f000 818b 	beq.w	801ddba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801daa4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801daa8:	b29b      	uxth	r3, r3
 801daaa:	2d00      	cmp	r5, #0
 801daac:	f000 812e 	beq.w	801dd0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801dab0:	1aed      	subs	r5, r5, r3
 801dab2:	b2ad      	uxth	r5, r5
 801dab4:	042b      	lsls	r3, r5, #16
 801dab6:	d502      	bpl.n	801dabe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801dab8:	1b64      	subs	r4, r4, r5
 801daba:	2500      	movs	r5, #0
 801dabc:	b224      	sxth	r4, r4
 801dabe:	f9b2 1000 	ldrsh.w	r1, [r2]
 801dac2:	a814      	add	r0, sp, #80	; 0x50
 801dac4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801dac8:	428c      	cmp	r4, r1
 801daca:	b28b      	uxth	r3, r1
 801dacc:	bfbf      	itttt	lt
 801dace:	18ed      	addlt	r5, r5, r3
 801dad0:	1b2c      	sublt	r4, r5, r4
 801dad2:	b2a5      	uxthlt	r5, r4
 801dad4:	460c      	movlt	r4, r1
 801dad6:	8891      	ldrh	r1, [r2, #4]
 801dad8:	440b      	add	r3, r1
 801dada:	4621      	mov	r1, r4
 801dadc:	b21b      	sxth	r3, r3
 801dade:	930f      	str	r3, [sp, #60]	; 0x3c
 801dae0:	88d3      	ldrh	r3, [r2, #6]
 801dae2:	8852      	ldrh	r2, [r2, #2]
 801dae4:	4413      	add	r3, r2
 801dae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dae8:	b21b      	sxth	r3, r3
 801daea:	930d      	str	r3, [sp, #52]	; 0x34
 801daec:	4bbd      	ldr	r3, [pc, #756]	; (801dde4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801daee:	f893 b000 	ldrb.w	fp, [r3]
 801daf2:	f10b 3cff 	add.w	ip, fp, #4294967295
 801daf6:	f1dc 0300 	rsbs	r3, ip, #0
 801dafa:	eb43 030c 	adc.w	r3, r3, ip
 801dafe:	930e      	str	r3, [sp, #56]	; 0x38
 801db00:	4653      	mov	r3, sl
 801db02:	f7f7 fffb 	bl	8015afc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801db06:	4621      	mov	r1, r4
 801db08:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801db0c:	4653      	mov	r3, sl
 801db0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db10:	a814      	add	r0, sp, #80	; 0x50
 801db12:	f7f8 f810 	bl	8015b36 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801db16:	a918      	add	r1, sp, #96	; 0x60
 801db18:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801db1c:	a817      	add	r0, sp, #92	; 0x5c
 801db1e:	f7f8 f931 	bl	8015d84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801db22:	f1ba 0f00 	cmp.w	sl, #0
 801db26:	f040 80f4 	bne.w	801dd12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801db2a:	f1bb 0f01 	cmp.w	fp, #1
 801db2e:	f040 80f8 	bne.w	801dd22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801db32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db34:	2b00      	cmp	r3, #0
 801db36:	f040 8145 	bne.w	801ddc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801db3a:	b2ba      	uxth	r2, r7
 801db3c:	b905      	cbnz	r5, 801db40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801db3e:	b16e      	cbz	r6, 801db5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801db40:	fb06 5302 	mla	r3, r6, r2, r5
 801db44:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801db46:	4631      	mov	r1, r6
 801db48:	fb08 f303 	mul.w	r3, r8, r3
 801db4c:	f003 0607 	and.w	r6, r3, #7
 801db50:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801db54:	9328      	str	r3, [sp, #160]	; 0xa0
 801db56:	eba9 0301 	sub.w	r3, r9, r1
 801db5a:	930a      	str	r3, [sp, #40]	; 0x28
 801db5c:	4651      	mov	r1, sl
 801db5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801db60:	f7ff ff1c 	bl	801d99c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801db64:	4681      	mov	r9, r0
 801db66:	980e      	ldr	r0, [sp, #56]	; 0x38
 801db68:	f7ff ff42 	bl	801d9f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801db6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801db70:	4683      	mov	fp, r0
 801db72:	eba3 0a01 	sub.w	sl, r3, r1
 801db76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db78:	459a      	cmp	sl, r3
 801db7a:	bfa8      	it	ge
 801db7c:	469a      	movge	sl, r3
 801db7e:	f1ba 0f00 	cmp.w	sl, #0
 801db82:	f340 811a 	ble.w	801ddba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801db86:	1b64      	subs	r4, r4, r5
 801db88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db8a:	1b1c      	subs	r4, r3, r4
 801db8c:	42bc      	cmp	r4, r7
 801db8e:	bfd4      	ite	le
 801db90:	ebc5 0504 	rsble	r5, r5, r4
 801db94:	ebc5 0507 	rsbgt	r5, r5, r7
 801db98:	2d00      	cmp	r5, #0
 801db9a:	f340 810e 	ble.w	801ddba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801db9e:	1b52      	subs	r2, r2, r5
 801dba0:	fb08 f302 	mul.w	r3, r8, r2
 801dba4:	930f      	str	r3, [sp, #60]	; 0x3c
 801dba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	f040 8116 	bne.w	801ddda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801dbae:	4b8e      	ldr	r3, [pc, #568]	; (801dde8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801dbb0:	6818      	ldr	r0, [r3, #0]
 801dbb2:	6803      	ldr	r3, [r0, #0]
 801dbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbb6:	4798      	blx	r3
 801dbb8:	2301      	movs	r3, #1
 801dbba:	4a8c      	ldr	r2, [pc, #560]	; (801ddec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801dbbc:	fa03 f308 	lsl.w	r3, r3, r8
 801dbc0:	8811      	ldrh	r1, [r2, #0]
 801dbc2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dbc6:	3b01      	subs	r3, #1
 801dbc8:	b2db      	uxtb	r3, r3
 801dbca:	930e      	str	r3, [sp, #56]	; 0x38
 801dbcc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801dbd0:	fb01 2303 	mla	r3, r1, r3, r2
 801dbd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dbd8:	930a      	str	r3, [sp, #40]	; 0x28
 801dbda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dbdc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801dbe0:	9313      	str	r3, [sp, #76]	; 0x4c
 801dbe2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dbe4:	0a19      	lsrs	r1, r3, #8
 801dbe6:	b2cb      	uxtb	r3, r1
 801dbe8:	9312      	str	r3, [sp, #72]	; 0x48
 801dbea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dbec:	b2db      	uxtb	r3, r3
 801dbee:	9311      	str	r3, [sp, #68]	; 0x44
 801dbf0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dbf2:	095a      	lsrs	r2, r3, #5
 801dbf4:	4b7e      	ldr	r3, [pc, #504]	; (801ddf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801dbf6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dbfa:	400b      	ands	r3, r1
 801dbfc:	4313      	orrs	r3, r2
 801dbfe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801dc00:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801dc04:	4313      	orrs	r3, r2
 801dc06:	b29b      	uxth	r3, r3
 801dc08:	9310      	str	r3, [sp, #64]	; 0x40
 801dc0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc0c:	781a      	ldrb	r2, [r3, #0]
 801dc0e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801dc12:	fb05 b919 	mls	r9, r5, r9, fp
 801dc16:	4132      	asrs	r2, r6
 801dc18:	fb03 fb05 	mul.w	fp, r3, r5
 801dc1c:	930d      	str	r3, [sp, #52]	; 0x34
 801dc1e:	b2d2      	uxtb	r2, r2
 801dc20:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801dc24:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801dc28:	f0c0 80f5 	bcc.w	801de16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801dc2c:	46ae      	mov	lr, r5
 801dc2e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801dc32:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801dc36:	f0c0 80dd 	bcc.w	801ddf4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801dc3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc3c:	4013      	ands	r3, r2
 801dc3e:	d055      	beq.n	801dcec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801dc40:	20ff      	movs	r0, #255	; 0xff
 801dc42:	990e      	ldr	r1, [sp, #56]	; 0x38
 801dc44:	fb90 f1f1 	sdiv	r1, r0, r1
 801dc48:	434b      	muls	r3, r1
 801dc4a:	2bfe      	cmp	r3, #254	; 0xfe
 801dc4c:	dd03      	ble.n	801dc56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801dc4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dc50:	4281      	cmp	r1, r0
 801dc52:	f000 80c4 	beq.w	801ddde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801dc56:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dc58:	f8bc 4000 	ldrh.w	r4, [ip]
 801dc5c:	fb11 f303 	smulbb	r3, r1, r3
 801dc60:	1220      	asrs	r0, r4, #8
 801dc62:	b29b      	uxth	r3, r3
 801dc64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dc68:	1c59      	adds	r1, r3, #1
 801dc6a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801dc6e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801dc72:	10e1      	asrs	r1, r4, #3
 801dc74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dc78:	00e4      	lsls	r4, r4, #3
 801dc7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dc7e:	b29f      	uxth	r7, r3
 801dc80:	43db      	mvns	r3, r3
 801dc82:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801dc86:	b2db      	uxtb	r3, r3
 801dc88:	b2e4      	uxtb	r4, r4
 801dc8a:	9309      	str	r3, [sp, #36]	; 0x24
 801dc8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dc8e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801dc92:	fb13 f907 	smulbb	r9, r3, r7
 801dc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc98:	fb00 9003 	mla	r0, r0, r3, r9
 801dc9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dc9e:	fb13 f907 	smulbb	r9, r3, r7
 801dca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dca4:	b280      	uxth	r0, r0
 801dca6:	fb01 9103 	mla	r1, r1, r3, r9
 801dcaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dcac:	fb13 f707 	smulbb	r7, r3, r7
 801dcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcb2:	b289      	uxth	r1, r1
 801dcb4:	fb04 7403 	mla	r4, r4, r3, r7
 801dcb8:	1c43      	adds	r3, r0, #1
 801dcba:	b2a4      	uxth	r4, r4
 801dcbc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dcc0:	f104 0901 	add.w	r9, r4, #1
 801dcc4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dcc8:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801dccc:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801dcd0:	ea49 0000 	orr.w	r0, r9, r0
 801dcd4:	f101 0901 	add.w	r9, r1, #1
 801dcd8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801dcdc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dce0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dce4:	ea40 0009 	orr.w	r0, r0, r9
 801dce8:	f8ac 0000 	strh.w	r0, [ip]
 801dcec:	4446      	add	r6, r8
 801dcee:	b2b6      	uxth	r6, r6
 801dcf0:	2e07      	cmp	r6, #7
 801dcf2:	bf89      	itett	hi
 801dcf4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801dcf6:	fa42 f208 	asrls.w	r2, r2, r8
 801dcfa:	2600      	movhi	r6, #0
 801dcfc:	785a      	ldrbhi	r2, [r3, #1]
 801dcfe:	bf8a      	itet	hi
 801dd00:	3301      	addhi	r3, #1
 801dd02:	b2d2      	uxtbls	r2, r2
 801dd04:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801dd06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd08:	449c      	add	ip, r3
 801dd0a:	e792      	b.n	801dc32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801dd0c:	441c      	add	r4, r3
 801dd0e:	b224      	sxth	r4, r4
 801dd10:	e6d5      	b.n	801dabe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801dd12:	f1ba 0f01 	cmp.w	sl, #1
 801dd16:	f47f af0c 	bne.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd1a:	f1bb 0f01 	cmp.w	fp, #1
 801dd1e:	f47f af08 	bne.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd22:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801dde8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801dd26:	f8db 0000 	ldr.w	r0, [fp]
 801dd2a:	6803      	ldr	r3, [r0, #0]
 801dd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd2e:	4798      	blx	r3
 801dd30:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801dd34:	465a      	mov	r2, fp
 801dd36:	d006      	beq.n	801dd46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801dd38:	f1b8 0f04 	cmp.w	r8, #4
 801dd3c:	d140      	bne.n	801ddc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801dd3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd40:	3300      	adds	r3, #0
 801dd42:	bf18      	it	ne
 801dd44:	2301      	movne	r3, #1
 801dd46:	0580      	lsls	r0, r0, #22
 801dd48:	d56e      	bpl.n	801de28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801dd4a:	f1b8 0f08 	cmp.w	r8, #8
 801dd4e:	d16b      	bne.n	801de28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	bf0c      	ite	eq
 801dd54:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801dd58:	f44f 7180 	movne.w	r1, #256	; 0x100
 801dd5c:	2d00      	cmp	r5, #0
 801dd5e:	f47f aee8 	bne.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd62:	2e00      	cmp	r6, #0
 801dd64:	f47f aee5 	bne.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd68:	19e3      	adds	r3, r4, r7
 801dd6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dd6c:	4283      	cmp	r3, r0
 801dd6e:	f73f aee0 	bgt.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd74:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dd76:	444b      	add	r3, r9
 801dd78:	4283      	cmp	r3, r0
 801dd7a:	f73f aeda 	bgt.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801dd7e:	b2bf      	uxth	r7, r7
 801dd80:	f1b8 0f08 	cmp.w	r8, #8
 801dd84:	6810      	ldr	r0, [r2, #0]
 801dd86:	f04f 0500 	mov.w	r5, #0
 801dd8a:	bf18      	it	ne
 801dd8c:	3701      	addne	r7, #1
 801dd8e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801dd92:	6804      	ldr	r4, [r0, #0]
 801dd94:	bf18      	it	ne
 801dd96:	f027 0701 	bicne.w	r7, r7, #1
 801dd9a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801dd9e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801dda2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dda4:	bf18      	it	ne
 801dda6:	b2bf      	uxthne	r7, r7
 801dda8:	9104      	str	r1, [sp, #16]
 801ddaa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ddac:	e9cd 7900 	strd	r7, r9, [sp]
 801ddb0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ddb4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ddb6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801ddb8:	47a0      	blx	r4
 801ddba:	b019      	add	sp, #100	; 0x64
 801ddbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	e7c0      	b.n	801dd46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801ddc4:	2208      	movs	r2, #8
 801ddc6:	fb92 f3f8 	sdiv	r3, r2, r8
 801ddca:	1e5a      	subs	r2, r3, #1
 801ddcc:	443a      	add	r2, r7
 801ddce:	fb92 f2f3 	sdiv	r2, r2, r3
 801ddd2:	fb12 f203 	smulbb	r2, r2, r3
 801ddd6:	b292      	uxth	r2, r2
 801ddd8:	e6b0      	b.n	801db3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801ddda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dddc:	e6ec      	b.n	801dbb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801ddde:	9810      	ldr	r0, [sp, #64]	; 0x40
 801dde0:	e782      	b.n	801dce8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801dde2:	bf00      	nop
 801dde4:	20027b98 	.word	0x20027b98
 801dde8:	20027ba0 	.word	0x20027ba0
 801ddec:	20027b9a 	.word	0x20027b9a
 801ddf0:	00fff800 	.word	0x00fff800
 801ddf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ddf6:	b153      	cbz	r3, 801de0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801ddf8:	441e      	add	r6, r3
 801ddfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ddfc:	b2b6      	uxth	r6, r6
 801ddfe:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801de02:	f006 0607 	and.w	r6, r6, #7
 801de06:	781a      	ldrb	r2, [r3, #0]
 801de08:	9328      	str	r3, [sp, #160]	; 0xa0
 801de0a:	4132      	asrs	r2, r6
 801de0c:	b2d2      	uxtb	r2, r2
 801de0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de10:	445b      	add	r3, fp
 801de12:	930a      	str	r3, [sp, #40]	; 0x28
 801de14:	e706      	b.n	801dc24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801de16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d1ce      	bne.n	801ddba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801de1c:	4b05      	ldr	r3, [pc, #20]	; (801de34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801de1e:	6818      	ldr	r0, [r3, #0]
 801de20:	6803      	ldr	r3, [r0, #0]
 801de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de24:	4798      	blx	r3
 801de26:	e7c8      	b.n	801ddba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801de28:	2b00      	cmp	r3, #0
 801de2a:	f43f ae82 	beq.w	801db32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801de2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801de32:	e793      	b.n	801dd5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801de34:	20027ba0 	.word	0x20027ba0

0801de38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801de38:	b538      	push	{r3, r4, r5, lr}
 801de3a:	4c15      	ldr	r4, [pc, #84]	; (801de90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801de3c:	4605      	mov	r5, r0
 801de3e:	7823      	ldrb	r3, [r4, #0]
 801de40:	f3bf 8f5b 	dmb	ish
 801de44:	07da      	lsls	r2, r3, #31
 801de46:	d40b      	bmi.n	801de60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801de48:	4620      	mov	r0, r4
 801de4a:	f007 fe54 	bl	8025af6 <__cxa_guard_acquire>
 801de4e:	b138      	cbz	r0, 801de60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801de50:	4620      	mov	r0, r4
 801de52:	f007 fe5c 	bl	8025b0e <__cxa_guard_release>
 801de56:	4a0f      	ldr	r2, [pc, #60]	; (801de94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801de58:	490f      	ldr	r1, [pc, #60]	; (801de98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801de5a:	4810      	ldr	r0, [pc, #64]	; (801de9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801de5c:	f007 fe44 	bl	8025ae8 <__aeabi_atexit>
 801de60:	4c0f      	ldr	r4, [pc, #60]	; (801dea0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801de62:	7823      	ldrb	r3, [r4, #0]
 801de64:	f3bf 8f5b 	dmb	ish
 801de68:	07db      	lsls	r3, r3, #31
 801de6a:	d40b      	bmi.n	801de84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801de6c:	4620      	mov	r0, r4
 801de6e:	f007 fe42 	bl	8025af6 <__cxa_guard_acquire>
 801de72:	b138      	cbz	r0, 801de84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801de74:	4620      	mov	r0, r4
 801de76:	f007 fe4a 	bl	8025b0e <__cxa_guard_release>
 801de7a:	4a06      	ldr	r2, [pc, #24]	; (801de94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801de7c:	4909      	ldr	r1, [pc, #36]	; (801dea4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801de7e:	480a      	ldr	r0, [pc, #40]	; (801dea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801de80:	f007 fe32 	bl	8025ae8 <__aeabi_atexit>
 801de84:	4b05      	ldr	r3, [pc, #20]	; (801de9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801de86:	612b      	str	r3, [r5, #16]
 801de88:	4b07      	ldr	r3, [pc, #28]	; (801dea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801de8a:	616b      	str	r3, [r5, #20]
 801de8c:	bd38      	pop	{r3, r4, r5, pc}
 801de8e:	bf00      	nop
 801de90:	20027c74 	.word	0x20027c74
 801de94:	20000000 	.word	0x20000000
 801de98:	0801c045 	.word	0x0801c045
 801de9c:	200000b4 	.word	0x200000b4
 801dea0:	20027c78 	.word	0x20027c78
 801dea4:	0801c043 	.word	0x0801c043
 801dea8:	200000b8 	.word	0x200000b8

0801deac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801deac:	b538      	push	{r3, r4, r5, lr}
 801deae:	4c15      	ldr	r4, [pc, #84]	; (801df04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801deb0:	4605      	mov	r5, r0
 801deb2:	7823      	ldrb	r3, [r4, #0]
 801deb4:	f3bf 8f5b 	dmb	ish
 801deb8:	07da      	lsls	r2, r3, #31
 801deba:	d40b      	bmi.n	801ded4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801debc:	4620      	mov	r0, r4
 801debe:	f007 fe1a 	bl	8025af6 <__cxa_guard_acquire>
 801dec2:	b138      	cbz	r0, 801ded4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801dec4:	4620      	mov	r0, r4
 801dec6:	f007 fe22 	bl	8025b0e <__cxa_guard_release>
 801deca:	4a0f      	ldr	r2, [pc, #60]	; (801df08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801decc:	490f      	ldr	r1, [pc, #60]	; (801df0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801dece:	4810      	ldr	r0, [pc, #64]	; (801df10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ded0:	f007 fe0a 	bl	8025ae8 <__aeabi_atexit>
 801ded4:	4c0f      	ldr	r4, [pc, #60]	; (801df14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ded6:	7823      	ldrb	r3, [r4, #0]
 801ded8:	f3bf 8f5b 	dmb	ish
 801dedc:	07db      	lsls	r3, r3, #31
 801dede:	d40b      	bmi.n	801def8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801dee0:	4620      	mov	r0, r4
 801dee2:	f007 fe08 	bl	8025af6 <__cxa_guard_acquire>
 801dee6:	b138      	cbz	r0, 801def8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801dee8:	4620      	mov	r0, r4
 801deea:	f007 fe10 	bl	8025b0e <__cxa_guard_release>
 801deee:	4a06      	ldr	r2, [pc, #24]	; (801df08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801def0:	4909      	ldr	r1, [pc, #36]	; (801df18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801def2:	480a      	ldr	r0, [pc, #40]	; (801df1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801def4:	f007 fdf8 	bl	8025ae8 <__aeabi_atexit>
 801def8:	4b05      	ldr	r3, [pc, #20]	; (801df10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801defa:	60ab      	str	r3, [r5, #8]
 801defc:	4b07      	ldr	r3, [pc, #28]	; (801df1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801defe:	60eb      	str	r3, [r5, #12]
 801df00:	bd38      	pop	{r3, r4, r5, pc}
 801df02:	bf00      	nop
 801df04:	20027c4c 	.word	0x20027c4c
 801df08:	20000000 	.word	0x20000000
 801df0c:	0801c049 	.word	0x0801c049
 801df10:	2000008c 	.word	0x2000008c
 801df14:	20027c50 	.word	0x20027c50
 801df18:	0801c047 	.word	0x0801c047
 801df1c:	20000090 	.word	0x20000090

0801df20 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801df20:	b510      	push	{r4, lr}
 801df22:	4604      	mov	r4, r0
 801df24:	f7ff ff88 	bl	801de38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801df28:	4620      	mov	r0, r4
 801df2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df2e:	f7ff bfbd 	b.w	801deac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801df34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801df34:	b538      	push	{r3, r4, r5, lr}
 801df36:	4c15      	ldr	r4, [pc, #84]	; (801df8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801df38:	4605      	mov	r5, r0
 801df3a:	7823      	ldrb	r3, [r4, #0]
 801df3c:	f3bf 8f5b 	dmb	ish
 801df40:	07da      	lsls	r2, r3, #31
 801df42:	d40b      	bmi.n	801df5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801df44:	4620      	mov	r0, r4
 801df46:	f007 fdd6 	bl	8025af6 <__cxa_guard_acquire>
 801df4a:	b138      	cbz	r0, 801df5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801df4c:	4620      	mov	r0, r4
 801df4e:	f007 fdde 	bl	8025b0e <__cxa_guard_release>
 801df52:	4a0f      	ldr	r2, [pc, #60]	; (801df90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801df54:	490f      	ldr	r1, [pc, #60]	; (801df94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801df56:	4810      	ldr	r0, [pc, #64]	; (801df98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801df58:	f007 fdc6 	bl	8025ae8 <__aeabi_atexit>
 801df5c:	4c0f      	ldr	r4, [pc, #60]	; (801df9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801df5e:	7823      	ldrb	r3, [r4, #0]
 801df60:	f3bf 8f5b 	dmb	ish
 801df64:	07db      	lsls	r3, r3, #31
 801df66:	d40b      	bmi.n	801df80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801df68:	4620      	mov	r0, r4
 801df6a:	f007 fdc4 	bl	8025af6 <__cxa_guard_acquire>
 801df6e:	b138      	cbz	r0, 801df80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801df70:	4620      	mov	r0, r4
 801df72:	f007 fdcc 	bl	8025b0e <__cxa_guard_release>
 801df76:	4a06      	ldr	r2, [pc, #24]	; (801df90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801df78:	4909      	ldr	r1, [pc, #36]	; (801dfa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801df7a:	480a      	ldr	r0, [pc, #40]	; (801dfa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801df7c:	f007 fdb4 	bl	8025ae8 <__aeabi_atexit>
 801df80:	4b05      	ldr	r3, [pc, #20]	; (801df98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801df82:	622b      	str	r3, [r5, #32]
 801df84:	4b07      	ldr	r3, [pc, #28]	; (801dfa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801df86:	626b      	str	r3, [r5, #36]	; 0x24
 801df88:	bd38      	pop	{r3, r4, r5, pc}
 801df8a:	bf00      	nop
 801df8c:	20027c7c 	.word	0x20027c7c
 801df90:	20000000 	.word	0x20000000
 801df94:	0801c03d 	.word	0x0801c03d
 801df98:	200000bc 	.word	0x200000bc
 801df9c:	20027c80 	.word	0x20027c80
 801dfa0:	0801c03b 	.word	0x0801c03b
 801dfa4:	200000c0 	.word	0x200000c0

0801dfa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801dfa8:	b538      	push	{r3, r4, r5, lr}
 801dfaa:	4c15      	ldr	r4, [pc, #84]	; (801e000 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801dfac:	4605      	mov	r5, r0
 801dfae:	7823      	ldrb	r3, [r4, #0]
 801dfb0:	f3bf 8f5b 	dmb	ish
 801dfb4:	07da      	lsls	r2, r3, #31
 801dfb6:	d40b      	bmi.n	801dfd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801dfb8:	4620      	mov	r0, r4
 801dfba:	f007 fd9c 	bl	8025af6 <__cxa_guard_acquire>
 801dfbe:	b138      	cbz	r0, 801dfd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	f007 fda4 	bl	8025b0e <__cxa_guard_release>
 801dfc6:	4a0f      	ldr	r2, [pc, #60]	; (801e004 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801dfc8:	490f      	ldr	r1, [pc, #60]	; (801e008 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801dfca:	4810      	ldr	r0, [pc, #64]	; (801e00c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801dfcc:	f007 fd8c 	bl	8025ae8 <__aeabi_atexit>
 801dfd0:	4c0f      	ldr	r4, [pc, #60]	; (801e010 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801dfd2:	7823      	ldrb	r3, [r4, #0]
 801dfd4:	f3bf 8f5b 	dmb	ish
 801dfd8:	07db      	lsls	r3, r3, #31
 801dfda:	d40b      	bmi.n	801dff4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801dfdc:	4620      	mov	r0, r4
 801dfde:	f007 fd8a 	bl	8025af6 <__cxa_guard_acquire>
 801dfe2:	b138      	cbz	r0, 801dff4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801dfe4:	4620      	mov	r0, r4
 801dfe6:	f007 fd92 	bl	8025b0e <__cxa_guard_release>
 801dfea:	4a06      	ldr	r2, [pc, #24]	; (801e004 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801dfec:	4909      	ldr	r1, [pc, #36]	; (801e014 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801dfee:	480a      	ldr	r0, [pc, #40]	; (801e018 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801dff0:	f007 fd7a 	bl	8025ae8 <__aeabi_atexit>
 801dff4:	4b05      	ldr	r3, [pc, #20]	; (801e00c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801dff6:	61ab      	str	r3, [r5, #24]
 801dff8:	4b07      	ldr	r3, [pc, #28]	; (801e018 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801dffa:	61eb      	str	r3, [r5, #28]
 801dffc:	bd38      	pop	{r3, r4, r5, pc}
 801dffe:	bf00      	nop
 801e000:	20027c54 	.word	0x20027c54
 801e004:	20000000 	.word	0x20000000
 801e008:	0801c041 	.word	0x0801c041
 801e00c:	20000094 	.word	0x20000094
 801e010:	20027c58 	.word	0x20027c58
 801e014:	0801c03f 	.word	0x0801c03f
 801e018:	20000098 	.word	0x20000098

0801e01c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e01c:	b510      	push	{r4, lr}
 801e01e:	4604      	mov	r4, r0
 801e020:	f7ff ff88 	bl	801df34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e024:	4620      	mov	r0, r4
 801e026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e02a:	f7ff bfbd 	b.w	801dfa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e030 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e030:	b538      	push	{r3, r4, r5, lr}
 801e032:	4c15      	ldr	r4, [pc, #84]	; (801e088 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e034:	4605      	mov	r5, r0
 801e036:	7823      	ldrb	r3, [r4, #0]
 801e038:	f3bf 8f5b 	dmb	ish
 801e03c:	07da      	lsls	r2, r3, #31
 801e03e:	d40b      	bmi.n	801e058 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e040:	4620      	mov	r0, r4
 801e042:	f007 fd58 	bl	8025af6 <__cxa_guard_acquire>
 801e046:	b138      	cbz	r0, 801e058 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e048:	4620      	mov	r0, r4
 801e04a:	f007 fd60 	bl	8025b0e <__cxa_guard_release>
 801e04e:	4a0f      	ldr	r2, [pc, #60]	; (801e08c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e050:	490f      	ldr	r1, [pc, #60]	; (801e090 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e052:	4810      	ldr	r0, [pc, #64]	; (801e094 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e054:	f007 fd48 	bl	8025ae8 <__aeabi_atexit>
 801e058:	4c0f      	ldr	r4, [pc, #60]	; (801e098 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e05a:	7823      	ldrb	r3, [r4, #0]
 801e05c:	f3bf 8f5b 	dmb	ish
 801e060:	07db      	lsls	r3, r3, #31
 801e062:	d40b      	bmi.n	801e07c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e064:	4620      	mov	r0, r4
 801e066:	f007 fd46 	bl	8025af6 <__cxa_guard_acquire>
 801e06a:	b138      	cbz	r0, 801e07c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e06c:	4620      	mov	r0, r4
 801e06e:	f007 fd4e 	bl	8025b0e <__cxa_guard_release>
 801e072:	4a06      	ldr	r2, [pc, #24]	; (801e08c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e074:	4909      	ldr	r1, [pc, #36]	; (801e09c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e076:	480a      	ldr	r0, [pc, #40]	; (801e0a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e078:	f007 fd36 	bl	8025ae8 <__aeabi_atexit>
 801e07c:	4b05      	ldr	r3, [pc, #20]	; (801e094 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e07e:	632b      	str	r3, [r5, #48]	; 0x30
 801e080:	4b07      	ldr	r3, [pc, #28]	; (801e0a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e082:	636b      	str	r3, [r5, #52]	; 0x34
 801e084:	bd38      	pop	{r3, r4, r5, pc}
 801e086:	bf00      	nop
 801e088:	20027c8c 	.word	0x20027c8c
 801e08c:	20000000 	.word	0x20000000
 801e090:	0801c035 	.word	0x0801c035
 801e094:	200000cc 	.word	0x200000cc
 801e098:	20027c90 	.word	0x20027c90
 801e09c:	0801c033 	.word	0x0801c033
 801e0a0:	200000d0 	.word	0x200000d0

0801e0a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e0a4:	b538      	push	{r3, r4, r5, lr}
 801e0a6:	4c15      	ldr	r4, [pc, #84]	; (801e0fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e0a8:	4605      	mov	r5, r0
 801e0aa:	7823      	ldrb	r3, [r4, #0]
 801e0ac:	f3bf 8f5b 	dmb	ish
 801e0b0:	07da      	lsls	r2, r3, #31
 801e0b2:	d40b      	bmi.n	801e0cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	f007 fd1e 	bl	8025af6 <__cxa_guard_acquire>
 801e0ba:	b138      	cbz	r0, 801e0cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e0bc:	4620      	mov	r0, r4
 801e0be:	f007 fd26 	bl	8025b0e <__cxa_guard_release>
 801e0c2:	4a0f      	ldr	r2, [pc, #60]	; (801e100 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e0c4:	490f      	ldr	r1, [pc, #60]	; (801e104 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e0c6:	4810      	ldr	r0, [pc, #64]	; (801e108 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e0c8:	f007 fd0e 	bl	8025ae8 <__aeabi_atexit>
 801e0cc:	4c0f      	ldr	r4, [pc, #60]	; (801e10c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e0ce:	7823      	ldrb	r3, [r4, #0]
 801e0d0:	f3bf 8f5b 	dmb	ish
 801e0d4:	07db      	lsls	r3, r3, #31
 801e0d6:	d40b      	bmi.n	801e0f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e0d8:	4620      	mov	r0, r4
 801e0da:	f007 fd0c 	bl	8025af6 <__cxa_guard_acquire>
 801e0de:	b138      	cbz	r0, 801e0f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e0e0:	4620      	mov	r0, r4
 801e0e2:	f007 fd14 	bl	8025b0e <__cxa_guard_release>
 801e0e6:	4a06      	ldr	r2, [pc, #24]	; (801e100 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e0e8:	4909      	ldr	r1, [pc, #36]	; (801e110 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e0ea:	480a      	ldr	r0, [pc, #40]	; (801e114 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e0ec:	f007 fcfc 	bl	8025ae8 <__aeabi_atexit>
 801e0f0:	4b05      	ldr	r3, [pc, #20]	; (801e108 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e0f2:	62ab      	str	r3, [r5, #40]	; 0x28
 801e0f4:	4b07      	ldr	r3, [pc, #28]	; (801e114 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e0f6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e0f8:	bd38      	pop	{r3, r4, r5, pc}
 801e0fa:	bf00      	nop
 801e0fc:	20027c5c 	.word	0x20027c5c
 801e100:	20000000 	.word	0x20000000
 801e104:	0801c039 	.word	0x0801c039
 801e108:	2000009c 	.word	0x2000009c
 801e10c:	20027c60 	.word	0x20027c60
 801e110:	0801c037 	.word	0x0801c037
 801e114:	200000a0 	.word	0x200000a0

0801e118 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e118:	b510      	push	{r4, lr}
 801e11a:	4604      	mov	r4, r0
 801e11c:	f7ff ff88 	bl	801e030 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e120:	4620      	mov	r0, r4
 801e122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e126:	f7ff bfbd 	b.w	801e0a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e12c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e12c:	b538      	push	{r3, r4, r5, lr}
 801e12e:	4c15      	ldr	r4, [pc, #84]	; (801e184 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e130:	4605      	mov	r5, r0
 801e132:	7823      	ldrb	r3, [r4, #0]
 801e134:	f3bf 8f5b 	dmb	ish
 801e138:	07da      	lsls	r2, r3, #31
 801e13a:	d40b      	bmi.n	801e154 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e13c:	4620      	mov	r0, r4
 801e13e:	f007 fcda 	bl	8025af6 <__cxa_guard_acquire>
 801e142:	b138      	cbz	r0, 801e154 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e144:	4620      	mov	r0, r4
 801e146:	f007 fce2 	bl	8025b0e <__cxa_guard_release>
 801e14a:	4a0f      	ldr	r2, [pc, #60]	; (801e188 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e14c:	490f      	ldr	r1, [pc, #60]	; (801e18c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e14e:	4810      	ldr	r0, [pc, #64]	; (801e190 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e150:	f007 fcca 	bl	8025ae8 <__aeabi_atexit>
 801e154:	4c0f      	ldr	r4, [pc, #60]	; (801e194 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e156:	7823      	ldrb	r3, [r4, #0]
 801e158:	f3bf 8f5b 	dmb	ish
 801e15c:	07db      	lsls	r3, r3, #31
 801e15e:	d40b      	bmi.n	801e178 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e160:	4620      	mov	r0, r4
 801e162:	f007 fcc8 	bl	8025af6 <__cxa_guard_acquire>
 801e166:	b138      	cbz	r0, 801e178 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e168:	4620      	mov	r0, r4
 801e16a:	f007 fcd0 	bl	8025b0e <__cxa_guard_release>
 801e16e:	4a06      	ldr	r2, [pc, #24]	; (801e188 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e170:	4909      	ldr	r1, [pc, #36]	; (801e198 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e172:	480a      	ldr	r0, [pc, #40]	; (801e19c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e174:	f007 fcb8 	bl	8025ae8 <__aeabi_atexit>
 801e178:	4b05      	ldr	r3, [pc, #20]	; (801e190 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e17a:	652b      	str	r3, [r5, #80]	; 0x50
 801e17c:	4b07      	ldr	r3, [pc, #28]	; (801e19c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e17e:	656b      	str	r3, [r5, #84]	; 0x54
 801e180:	bd38      	pop	{r3, r4, r5, pc}
 801e182:	bf00      	nop
 801e184:	20027c94 	.word	0x20027c94
 801e188:	20000000 	.word	0x20000000
 801e18c:	0801c025 	.word	0x0801c025
 801e190:	200000d4 	.word	0x200000d4
 801e194:	20027c98 	.word	0x20027c98
 801e198:	0801c023 	.word	0x0801c023
 801e19c:	200000d8 	.word	0x200000d8

0801e1a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e1a0:	b538      	push	{r3, r4, r5, lr}
 801e1a2:	4c15      	ldr	r4, [pc, #84]	; (801e1f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e1a4:	4605      	mov	r5, r0
 801e1a6:	7823      	ldrb	r3, [r4, #0]
 801e1a8:	f3bf 8f5b 	dmb	ish
 801e1ac:	07da      	lsls	r2, r3, #31
 801e1ae:	d40b      	bmi.n	801e1c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	f007 fca0 	bl	8025af6 <__cxa_guard_acquire>
 801e1b6:	b138      	cbz	r0, 801e1c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e1b8:	4620      	mov	r0, r4
 801e1ba:	f007 fca8 	bl	8025b0e <__cxa_guard_release>
 801e1be:	4a0f      	ldr	r2, [pc, #60]	; (801e1fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e1c0:	490f      	ldr	r1, [pc, #60]	; (801e200 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e1c2:	4810      	ldr	r0, [pc, #64]	; (801e204 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e1c4:	f007 fc90 	bl	8025ae8 <__aeabi_atexit>
 801e1c8:	4c0f      	ldr	r4, [pc, #60]	; (801e208 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e1ca:	7823      	ldrb	r3, [r4, #0]
 801e1cc:	f3bf 8f5b 	dmb	ish
 801e1d0:	07db      	lsls	r3, r3, #31
 801e1d2:	d40b      	bmi.n	801e1ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	f007 fc8e 	bl	8025af6 <__cxa_guard_acquire>
 801e1da:	b138      	cbz	r0, 801e1ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e1dc:	4620      	mov	r0, r4
 801e1de:	f007 fc96 	bl	8025b0e <__cxa_guard_release>
 801e1e2:	4a06      	ldr	r2, [pc, #24]	; (801e1fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e1e4:	4909      	ldr	r1, [pc, #36]	; (801e20c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e1e6:	480a      	ldr	r0, [pc, #40]	; (801e210 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e1e8:	f007 fc7e 	bl	8025ae8 <__aeabi_atexit>
 801e1ec:	4b05      	ldr	r3, [pc, #20]	; (801e204 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e1ee:	64ab      	str	r3, [r5, #72]	; 0x48
 801e1f0:	4b07      	ldr	r3, [pc, #28]	; (801e210 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e1f2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e1f4:	bd38      	pop	{r3, r4, r5, pc}
 801e1f6:	bf00      	nop
 801e1f8:	20027c9c 	.word	0x20027c9c
 801e1fc:	20000000 	.word	0x20000000
 801e200:	0801c029 	.word	0x0801c029
 801e204:	200000dc 	.word	0x200000dc
 801e208:	20027ca0 	.word	0x20027ca0
 801e20c:	0801c027 	.word	0x0801c027
 801e210:	200000e0 	.word	0x200000e0

0801e214 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e214:	b538      	push	{r3, r4, r5, lr}
 801e216:	4c15      	ldr	r4, [pc, #84]	; (801e26c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e218:	4605      	mov	r5, r0
 801e21a:	7823      	ldrb	r3, [r4, #0]
 801e21c:	f3bf 8f5b 	dmb	ish
 801e220:	07da      	lsls	r2, r3, #31
 801e222:	d40b      	bmi.n	801e23c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e224:	4620      	mov	r0, r4
 801e226:	f007 fc66 	bl	8025af6 <__cxa_guard_acquire>
 801e22a:	b138      	cbz	r0, 801e23c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e22c:	4620      	mov	r0, r4
 801e22e:	f007 fc6e 	bl	8025b0e <__cxa_guard_release>
 801e232:	4a0f      	ldr	r2, [pc, #60]	; (801e270 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e234:	490f      	ldr	r1, [pc, #60]	; (801e274 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e236:	4810      	ldr	r0, [pc, #64]	; (801e278 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e238:	f007 fc56 	bl	8025ae8 <__aeabi_atexit>
 801e23c:	4c0f      	ldr	r4, [pc, #60]	; (801e27c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e23e:	7823      	ldrb	r3, [r4, #0]
 801e240:	f3bf 8f5b 	dmb	ish
 801e244:	07db      	lsls	r3, r3, #31
 801e246:	d40b      	bmi.n	801e260 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e248:	4620      	mov	r0, r4
 801e24a:	f007 fc54 	bl	8025af6 <__cxa_guard_acquire>
 801e24e:	b138      	cbz	r0, 801e260 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e250:	4620      	mov	r0, r4
 801e252:	f007 fc5c 	bl	8025b0e <__cxa_guard_release>
 801e256:	4a06      	ldr	r2, [pc, #24]	; (801e270 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e258:	4909      	ldr	r1, [pc, #36]	; (801e280 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e25a:	480a      	ldr	r0, [pc, #40]	; (801e284 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e25c:	f007 fc44 	bl	8025ae8 <__aeabi_atexit>
 801e260:	4b05      	ldr	r3, [pc, #20]	; (801e278 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e262:	642b      	str	r3, [r5, #64]	; 0x40
 801e264:	4b07      	ldr	r3, [pc, #28]	; (801e284 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e266:	646b      	str	r3, [r5, #68]	; 0x44
 801e268:	bd38      	pop	{r3, r4, r5, pc}
 801e26a:	bf00      	nop
 801e26c:	20027c64 	.word	0x20027c64
 801e270:	20000000 	.word	0x20000000
 801e274:	0801c02d 	.word	0x0801c02d
 801e278:	200000a4 	.word	0x200000a4
 801e27c:	20027c68 	.word	0x20027c68
 801e280:	0801c02b 	.word	0x0801c02b
 801e284:	200000a8 	.word	0x200000a8

0801e288 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e288:	b538      	push	{r3, r4, r5, lr}
 801e28a:	4c15      	ldr	r4, [pc, #84]	; (801e2e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e28c:	4605      	mov	r5, r0
 801e28e:	7823      	ldrb	r3, [r4, #0]
 801e290:	f3bf 8f5b 	dmb	ish
 801e294:	07da      	lsls	r2, r3, #31
 801e296:	d40b      	bmi.n	801e2b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e298:	4620      	mov	r0, r4
 801e29a:	f007 fc2c 	bl	8025af6 <__cxa_guard_acquire>
 801e29e:	b138      	cbz	r0, 801e2b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	f007 fc34 	bl	8025b0e <__cxa_guard_release>
 801e2a6:	4a0f      	ldr	r2, [pc, #60]	; (801e2e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e2a8:	490f      	ldr	r1, [pc, #60]	; (801e2e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e2aa:	4810      	ldr	r0, [pc, #64]	; (801e2ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e2ac:	f007 fc1c 	bl	8025ae8 <__aeabi_atexit>
 801e2b0:	4c0f      	ldr	r4, [pc, #60]	; (801e2f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e2b2:	7823      	ldrb	r3, [r4, #0]
 801e2b4:	f3bf 8f5b 	dmb	ish
 801e2b8:	07db      	lsls	r3, r3, #31
 801e2ba:	d40b      	bmi.n	801e2d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e2bc:	4620      	mov	r0, r4
 801e2be:	f007 fc1a 	bl	8025af6 <__cxa_guard_acquire>
 801e2c2:	b138      	cbz	r0, 801e2d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e2c4:	4620      	mov	r0, r4
 801e2c6:	f007 fc22 	bl	8025b0e <__cxa_guard_release>
 801e2ca:	4a06      	ldr	r2, [pc, #24]	; (801e2e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e2cc:	4909      	ldr	r1, [pc, #36]	; (801e2f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e2ce:	480a      	ldr	r0, [pc, #40]	; (801e2f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e2d0:	f007 fc0a 	bl	8025ae8 <__aeabi_atexit>
 801e2d4:	4b05      	ldr	r3, [pc, #20]	; (801e2ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e2d6:	63ab      	str	r3, [r5, #56]	; 0x38
 801e2d8:	4b07      	ldr	r3, [pc, #28]	; (801e2f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e2da:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e2dc:	bd38      	pop	{r3, r4, r5, pc}
 801e2de:	bf00      	nop
 801e2e0:	20027c84 	.word	0x20027c84
 801e2e4:	20000000 	.word	0x20000000
 801e2e8:	0801c031 	.word	0x0801c031
 801e2ec:	200000c4 	.word	0x200000c4
 801e2f0:	20027c88 	.word	0x20027c88
 801e2f4:	0801c02f 	.word	0x0801c02f
 801e2f8:	200000c8 	.word	0x200000c8

0801e2fc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e2fc:	b510      	push	{r4, lr}
 801e2fe:	4604      	mov	r4, r0
 801e300:	f7ff ff14 	bl	801e12c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e304:	4620      	mov	r0, r4
 801e306:	f7ff ff85 	bl	801e214 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e30a:	4620      	mov	r0, r4
 801e30c:	f7ff ff48 	bl	801e1a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e310:	4620      	mov	r0, r4
 801e312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e316:	f7ff bfb7 	b.w	801e288 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e31c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e31c:	b538      	push	{r3, r4, r5, lr}
 801e31e:	4c15      	ldr	r4, [pc, #84]	; (801e374 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e320:	4605      	mov	r5, r0
 801e322:	7823      	ldrb	r3, [r4, #0]
 801e324:	f3bf 8f5b 	dmb	ish
 801e328:	07da      	lsls	r2, r3, #31
 801e32a:	d40b      	bmi.n	801e344 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e32c:	4620      	mov	r0, r4
 801e32e:	f007 fbe2 	bl	8025af6 <__cxa_guard_acquire>
 801e332:	b138      	cbz	r0, 801e344 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e334:	4620      	mov	r0, r4
 801e336:	f007 fbea 	bl	8025b0e <__cxa_guard_release>
 801e33a:	4a0f      	ldr	r2, [pc, #60]	; (801e378 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e33c:	490f      	ldr	r1, [pc, #60]	; (801e37c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e33e:	4810      	ldr	r0, [pc, #64]	; (801e380 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e340:	f007 fbd2 	bl	8025ae8 <__aeabi_atexit>
 801e344:	4c0f      	ldr	r4, [pc, #60]	; (801e384 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e346:	7823      	ldrb	r3, [r4, #0]
 801e348:	f3bf 8f5b 	dmb	ish
 801e34c:	07db      	lsls	r3, r3, #31
 801e34e:	d40b      	bmi.n	801e368 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e350:	4620      	mov	r0, r4
 801e352:	f007 fbd0 	bl	8025af6 <__cxa_guard_acquire>
 801e356:	b138      	cbz	r0, 801e368 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e358:	4620      	mov	r0, r4
 801e35a:	f007 fbd8 	bl	8025b0e <__cxa_guard_release>
 801e35e:	4a06      	ldr	r2, [pc, #24]	; (801e378 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e360:	4909      	ldr	r1, [pc, #36]	; (801e388 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e362:	480a      	ldr	r0, [pc, #40]	; (801e38c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e364:	f007 fbc0 	bl	8025ae8 <__aeabi_atexit>
 801e368:	4b05      	ldr	r3, [pc, #20]	; (801e380 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e36a:	662b      	str	r3, [r5, #96]	; 0x60
 801e36c:	4b07      	ldr	r3, [pc, #28]	; (801e38c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e36e:	666b      	str	r3, [r5, #100]	; 0x64
 801e370:	bd38      	pop	{r3, r4, r5, pc}
 801e372:	bf00      	nop
 801e374:	20027c6c 	.word	0x20027c6c
 801e378:	20000000 	.word	0x20000000
 801e37c:	0801c01d 	.word	0x0801c01d
 801e380:	200000ac 	.word	0x200000ac
 801e384:	20027c70 	.word	0x20027c70
 801e388:	0801c01b 	.word	0x0801c01b
 801e38c:	200000b0 	.word	0x200000b0

0801e390 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e390:	b538      	push	{r3, r4, r5, lr}
 801e392:	4c15      	ldr	r4, [pc, #84]	; (801e3e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e394:	4605      	mov	r5, r0
 801e396:	7823      	ldrb	r3, [r4, #0]
 801e398:	f3bf 8f5b 	dmb	ish
 801e39c:	07da      	lsls	r2, r3, #31
 801e39e:	d40b      	bmi.n	801e3b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	f007 fba8 	bl	8025af6 <__cxa_guard_acquire>
 801e3a6:	b138      	cbz	r0, 801e3b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	f007 fbb0 	bl	8025b0e <__cxa_guard_release>
 801e3ae:	4a0f      	ldr	r2, [pc, #60]	; (801e3ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e3b0:	490f      	ldr	r1, [pc, #60]	; (801e3f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e3b2:	4810      	ldr	r0, [pc, #64]	; (801e3f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e3b4:	f007 fb98 	bl	8025ae8 <__aeabi_atexit>
 801e3b8:	4c0f      	ldr	r4, [pc, #60]	; (801e3f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e3ba:	7823      	ldrb	r3, [r4, #0]
 801e3bc:	f3bf 8f5b 	dmb	ish
 801e3c0:	07db      	lsls	r3, r3, #31
 801e3c2:	d40b      	bmi.n	801e3dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f007 fb96 	bl	8025af6 <__cxa_guard_acquire>
 801e3ca:	b138      	cbz	r0, 801e3dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f007 fb9e 	bl	8025b0e <__cxa_guard_release>
 801e3d2:	4a06      	ldr	r2, [pc, #24]	; (801e3ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e3d4:	4909      	ldr	r1, [pc, #36]	; (801e3fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e3d6:	480a      	ldr	r0, [pc, #40]	; (801e400 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e3d8:	f007 fb86 	bl	8025ae8 <__aeabi_atexit>
 801e3dc:	4b05      	ldr	r3, [pc, #20]	; (801e3f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e3de:	65ab      	str	r3, [r5, #88]	; 0x58
 801e3e0:	4b07      	ldr	r3, [pc, #28]	; (801e400 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e3e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e3e4:	bd38      	pop	{r3, r4, r5, pc}
 801e3e6:	bf00      	nop
 801e3e8:	20027c44 	.word	0x20027c44
 801e3ec:	20000000 	.word	0x20000000
 801e3f0:	0801c021 	.word	0x0801c021
 801e3f4:	20000084 	.word	0x20000084
 801e3f8:	20027c48 	.word	0x20027c48
 801e3fc:	0801c01f 	.word	0x0801c01f
 801e400:	20000088 	.word	0x20000088

0801e404 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e404:	b510      	push	{r4, lr}
 801e406:	4604      	mov	r4, r0
 801e408:	f7ff ff88 	bl	801e31c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e40c:	4620      	mov	r0, r4
 801e40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e412:	f7ff bfbd 	b.w	801e390 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e418 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e418:	b538      	push	{r3, r4, r5, lr}
 801e41a:	4c15      	ldr	r4, [pc, #84]	; (801e470 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e41c:	4605      	mov	r5, r0
 801e41e:	7823      	ldrb	r3, [r4, #0]
 801e420:	f3bf 8f5b 	dmb	ish
 801e424:	07da      	lsls	r2, r3, #31
 801e426:	d40b      	bmi.n	801e440 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e428:	4620      	mov	r0, r4
 801e42a:	f007 fb64 	bl	8025af6 <__cxa_guard_acquire>
 801e42e:	b138      	cbz	r0, 801e440 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e430:	4620      	mov	r0, r4
 801e432:	f007 fb6c 	bl	8025b0e <__cxa_guard_release>
 801e436:	4a0f      	ldr	r2, [pc, #60]	; (801e474 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e438:	490f      	ldr	r1, [pc, #60]	; (801e478 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e43a:	4810      	ldr	r0, [pc, #64]	; (801e47c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e43c:	f007 fb54 	bl	8025ae8 <__aeabi_atexit>
 801e440:	4c0f      	ldr	r4, [pc, #60]	; (801e480 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e442:	7823      	ldrb	r3, [r4, #0]
 801e444:	f3bf 8f5b 	dmb	ish
 801e448:	07db      	lsls	r3, r3, #31
 801e44a:	d40b      	bmi.n	801e464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e44c:	4620      	mov	r0, r4
 801e44e:	f007 fb52 	bl	8025af6 <__cxa_guard_acquire>
 801e452:	b138      	cbz	r0, 801e464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e454:	4620      	mov	r0, r4
 801e456:	f007 fb5a 	bl	8025b0e <__cxa_guard_release>
 801e45a:	4a06      	ldr	r2, [pc, #24]	; (801e474 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e45c:	4909      	ldr	r1, [pc, #36]	; (801e484 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e45e:	480a      	ldr	r0, [pc, #40]	; (801e488 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e460:	f007 fb42 	bl	8025ae8 <__aeabi_atexit>
 801e464:	4b05      	ldr	r3, [pc, #20]	; (801e47c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e466:	672b      	str	r3, [r5, #112]	; 0x70
 801e468:	4b07      	ldr	r3, [pc, #28]	; (801e488 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e46a:	676b      	str	r3, [r5, #116]	; 0x74
 801e46c:	bd38      	pop	{r3, r4, r5, pc}
 801e46e:	bf00      	nop
 801e470:	20027c3c 	.word	0x20027c3c
 801e474:	20000000 	.word	0x20000000
 801e478:	0801c015 	.word	0x0801c015
 801e47c:	2000007c 	.word	0x2000007c
 801e480:	20027c40 	.word	0x20027c40
 801e484:	0801c013 	.word	0x0801c013
 801e488:	20000080 	.word	0x20000080

0801e48c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	4c15      	ldr	r4, [pc, #84]	; (801e4e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e490:	4605      	mov	r5, r0
 801e492:	7823      	ldrb	r3, [r4, #0]
 801e494:	f3bf 8f5b 	dmb	ish
 801e498:	07da      	lsls	r2, r3, #31
 801e49a:	d40b      	bmi.n	801e4b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e49c:	4620      	mov	r0, r4
 801e49e:	f007 fb2a 	bl	8025af6 <__cxa_guard_acquire>
 801e4a2:	b138      	cbz	r0, 801e4b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e4a4:	4620      	mov	r0, r4
 801e4a6:	f007 fb32 	bl	8025b0e <__cxa_guard_release>
 801e4aa:	4a0f      	ldr	r2, [pc, #60]	; (801e4e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e4ac:	490f      	ldr	r1, [pc, #60]	; (801e4ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e4ae:	4810      	ldr	r0, [pc, #64]	; (801e4f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e4b0:	f007 fb1a 	bl	8025ae8 <__aeabi_atexit>
 801e4b4:	4c0f      	ldr	r4, [pc, #60]	; (801e4f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e4b6:	7823      	ldrb	r3, [r4, #0]
 801e4b8:	f3bf 8f5b 	dmb	ish
 801e4bc:	07db      	lsls	r3, r3, #31
 801e4be:	d40b      	bmi.n	801e4d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f007 fb18 	bl	8025af6 <__cxa_guard_acquire>
 801e4c6:	b138      	cbz	r0, 801e4d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	f007 fb20 	bl	8025b0e <__cxa_guard_release>
 801e4ce:	4a06      	ldr	r2, [pc, #24]	; (801e4e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e4d0:	4909      	ldr	r1, [pc, #36]	; (801e4f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e4d2:	480a      	ldr	r0, [pc, #40]	; (801e4fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e4d4:	f007 fb08 	bl	8025ae8 <__aeabi_atexit>
 801e4d8:	4b05      	ldr	r3, [pc, #20]	; (801e4f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e4da:	66ab      	str	r3, [r5, #104]	; 0x68
 801e4dc:	4b07      	ldr	r3, [pc, #28]	; (801e4fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e4de:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e4e0:	bd38      	pop	{r3, r4, r5, pc}
 801e4e2:	bf00      	nop
 801e4e4:	20027c34 	.word	0x20027c34
 801e4e8:	20000000 	.word	0x20000000
 801e4ec:	0801c019 	.word	0x0801c019
 801e4f0:	20000074 	.word	0x20000074
 801e4f4:	20027c38 	.word	0x20027c38
 801e4f8:	0801c017 	.word	0x0801c017
 801e4fc:	20000078 	.word	0x20000078

0801e500 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e500:	b510      	push	{r4, lr}
 801e502:	4604      	mov	r4, r0
 801e504:	f7ff ff88 	bl	801e418 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e508:	4620      	mov	r0, r4
 801e50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e50e:	f7ff bfbd 	b.w	801e48c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e512 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e512:	b510      	push	{r4, lr}
 801e514:	4604      	mov	r4, r0
 801e516:	f7ff fff3 	bl	801e500 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e51a:	4620      	mov	r0, r4
 801e51c:	f7ff ff72 	bl	801e404 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e520:	4620      	mov	r0, r4
 801e522:	f7ff fdf9 	bl	801e118 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e526:	4620      	mov	r0, r4
 801e528:	f7ff fcfa 	bl	801df20 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e52c:	4620      	mov	r0, r4
 801e52e:	f7ff fd75 	bl	801e01c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e532:	4620      	mov	r0, r4
 801e534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e538:	f7ff bee0 	b.w	801e2fc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e53c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e540:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801e544:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801e548:	2d00      	cmp	r5, #0
 801e54a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801e54e:	fb05 4c0e 	mla	ip, r5, lr, r4
 801e552:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801e556:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801e55a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e55e:	eb02 0a0c 	add.w	sl, r2, ip
 801e562:	8808      	ldrh	r0, [r1, #0]
 801e564:	f2c0 80b0 	blt.w	801e6c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e568:	45ab      	cmp	fp, r5
 801e56a:	f340 80ad 	ble.w	801e6c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e56e:	2c00      	cmp	r4, #0
 801e570:	f2c0 80a8 	blt.w	801e6c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e574:	45a6      	cmp	lr, r4
 801e576:	f340 80a5 	ble.w	801e6c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e57a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e57e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801e582:	1c62      	adds	r2, r4, #1
 801e584:	f100 80a3 	bmi.w	801e6ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e588:	4596      	cmp	lr, r2
 801e58a:	f340 80a0 	ble.w	801e6ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e58e:	f1b9 0f00 	cmp.w	r9, #0
 801e592:	f000 809c 	beq.w	801e6ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e596:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e59a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e59e:	3501      	adds	r5, #1
 801e5a0:	f100 8099 	bmi.w	801e6d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e5a4:	45ab      	cmp	fp, r5
 801e5a6:	f340 8096 	ble.w	801e6d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e5aa:	2f00      	cmp	r7, #0
 801e5ac:	f000 8093 	beq.w	801e6d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e5b0:	2c00      	cmp	r4, #0
 801e5b2:	f2c0 808e 	blt.w	801e6d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e5b6:	45a6      	cmp	lr, r4
 801e5b8:	f340 808b 	ble.w	801e6d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e5bc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801e5c0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801e5c4:	3401      	adds	r4, #1
 801e5c6:	f100 8089 	bmi.w	801e6dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e5ca:	45a6      	cmp	lr, r4
 801e5cc:	f340 8086 	ble.w	801e6dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e5d0:	f1b9 0f00 	cmp.w	r9, #0
 801e5d4:	f000 8082 	beq.w	801e6dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e5d8:	44d6      	add	lr, sl
 801e5da:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e5de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e5e2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e5e6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e5ea:	fb19 fe07 	smulbb	lr, r9, r7
 801e5ee:	f1c7 0210 	rsb	r2, r7, #16
 801e5f2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e5f6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e5fa:	eba2 0209 	sub.w	r2, r2, r9
 801e5fe:	ea44 0808 	orr.w	r8, r4, r8
 801e602:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e606:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e60a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e60e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e612:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e616:	ea44 0c0c 	orr.w	ip, r4, ip
 801e61a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e61e:	fb04 f40c 	mul.w	r4, r4, ip
 801e622:	fb02 4808 	mla	r8, r2, r8, r4
 801e626:	041a      	lsls	r2, r3, #16
 801e628:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e62c:	b2b4      	uxth	r4, r6
 801e62e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e632:	43f6      	mvns	r6, r6
 801e634:	4313      	orrs	r3, r2
 801e636:	042a      	lsls	r2, r5, #16
 801e638:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e63c:	b2f6      	uxtb	r6, r6
 801e63e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e642:	fb0e 8303 	mla	r3, lr, r3, r8
 801e646:	432a      	orrs	r2, r5
 801e648:	fb07 3202 	mla	r2, r7, r2, r3
 801e64c:	10c7      	asrs	r7, r0, #3
 801e64e:	0d53      	lsrs	r3, r2, #21
 801e650:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e654:	0952      	lsrs	r2, r2, #5
 801e656:	fb17 f706 	smulbb	r7, r7, r6
 801e65a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e65e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e662:	431a      	orrs	r2, r3
 801e664:	b293      	uxth	r3, r2
 801e666:	1202      	asrs	r2, r0, #8
 801e668:	121d      	asrs	r5, r3, #8
 801e66a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e66e:	00c0      	lsls	r0, r0, #3
 801e670:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e674:	fb12 f206 	smulbb	r2, r2, r6
 801e678:	b2c0      	uxtb	r0, r0
 801e67a:	fb05 2504 	mla	r5, r5, r4, r2
 801e67e:	10da      	asrs	r2, r3, #3
 801e680:	fb10 f006 	smulbb	r0, r0, r6
 801e684:	00db      	lsls	r3, r3, #3
 801e686:	b2ad      	uxth	r5, r5
 801e688:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e68c:	b2db      	uxtb	r3, r3
 801e68e:	fb02 7204 	mla	r2, r2, r4, r7
 801e692:	fb03 0004 	mla	r0, r3, r4, r0
 801e696:	1c6b      	adds	r3, r5, #1
 801e698:	b292      	uxth	r2, r2
 801e69a:	b280      	uxth	r0, r0
 801e69c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e6a0:	1c43      	adds	r3, r0, #1
 801e6a2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e6a6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e6aa:	1c50      	adds	r0, r2, #1
 801e6ac:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e6b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e6b4:	0952      	lsrs	r2, r2, #5
 801e6b6:	432b      	orrs	r3, r5
 801e6b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e6bc:	4313      	orrs	r3, r2
 801e6be:	800b      	strh	r3, [r1, #0]
 801e6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6c4:	4680      	mov	r8, r0
 801e6c6:	e75c      	b.n	801e582 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801e6c8:	4684      	mov	ip, r0
 801e6ca:	4680      	mov	r8, r0
 801e6cc:	e767      	b.n	801e59e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e6ce:	4684      	mov	ip, r0
 801e6d0:	e765      	b.n	801e59e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e6d2:	4605      	mov	r5, r0
 801e6d4:	e776      	b.n	801e5c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801e6d6:	4603      	mov	r3, r0
 801e6d8:	4605      	mov	r5, r0
 801e6da:	e782      	b.n	801e5e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e6dc:	4603      	mov	r3, r0
 801e6de:	e780      	b.n	801e5e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801e6e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6e4:	b099      	sub	sp, #100	; 0x64
 801e6e6:	9215      	str	r2, [sp, #84]	; 0x54
 801e6e8:	9309      	str	r3, [sp, #36]	; 0x24
 801e6ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e6ec:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801e6f0:	9016      	str	r0, [sp, #88]	; 0x58
 801e6f2:	930d      	str	r3, [sp, #52]	; 0x34
 801e6f4:	6850      	ldr	r0, [r2, #4]
 801e6f6:	910c      	str	r1, [sp, #48]	; 0x30
 801e6f8:	6812      	ldr	r2, [r2, #0]
 801e6fa:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e6fe:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801e702:	fb00 1303 	mla	r3, r0, r3, r1
 801e706:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801e70a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e710:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e712:	685e      	ldr	r6, [r3, #4]
 801e714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e716:	3604      	adds	r6, #4
 801e718:	43db      	mvns	r3, r3
 801e71a:	b2db      	uxtb	r3, r3
 801e71c:	930a      	str	r3, [sp, #40]	; 0x28
 801e71e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e720:	2b00      	cmp	r3, #0
 801e722:	dc03      	bgt.n	801e72c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e726:	2b00      	cmp	r3, #0
 801e728:	f340 8225 	ble.w	801eb76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e72c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e72e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e732:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e736:	1e48      	subs	r0, r1, #1
 801e738:	1e57      	subs	r7, r2, #1
 801e73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	f340 80e3 	ble.w	801e908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e742:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801e746:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e74a:	d406      	bmi.n	801e75a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e74c:	4584      	cmp	ip, r0
 801e74e:	da04      	bge.n	801e75a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e750:	2b00      	cmp	r3, #0
 801e752:	db02      	blt.n	801e75a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e754:	42bb      	cmp	r3, r7
 801e756:	f2c0 80d8 	blt.w	801e90a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e75a:	f11c 0c01 	adds.w	ip, ip, #1
 801e75e:	f100 80c9 	bmi.w	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e762:	4561      	cmp	r1, ip
 801e764:	f2c0 80c6 	blt.w	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e768:	3301      	adds	r3, #1
 801e76a:	f100 80c3 	bmi.w	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e76e:	429a      	cmp	r2, r3
 801e770:	f2c0 80c0 	blt.w	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e774:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e778:	4647      	mov	r7, r8
 801e77a:	f1bb 0f00 	cmp.w	fp, #0
 801e77e:	f340 80e3 	ble.w	801e948 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e782:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e784:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e788:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e78a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801e78e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e792:	ea5f 422a 	movs.w	r2, sl, asr #16
 801e796:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e79a:	689b      	ldr	r3, [r3, #8]
 801e79c:	f100 8121 	bmi.w	801e9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e7a0:	f103 39ff 	add.w	r9, r3, #4294967295
 801e7a4:	454a      	cmp	r2, r9
 801e7a6:	f280 811c 	bge.w	801e9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e7aa:	f1bc 0f00 	cmp.w	ip, #0
 801e7ae:	f2c0 8118 	blt.w	801e9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e7b2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801e7b6:	45cc      	cmp	ip, r9
 801e7b8:	f280 8113 	bge.w	801e9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e7bc:	b21b      	sxth	r3, r3
 801e7be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e7c0:	fb0c 2203 	mla	r2, ip, r3, r2
 801e7c4:	eb04 0902 	add.w	r9, r4, r2
 801e7c8:	5ca2      	ldrb	r2, [r4, r2]
 801e7ca:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801e7ce:	2800      	cmp	r0, #0
 801e7d0:	f000 80fe 	beq.w	801e9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e7d4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e7d8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e7dc:	9211      	str	r2, [sp, #68]	; 0x44
 801e7de:	b151      	cbz	r1, 801e7f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e7e0:	eb09 0203 	add.w	r2, r9, r3
 801e7e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e7e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e7ec:	930f      	str	r3, [sp, #60]	; 0x3c
 801e7ee:	7853      	ldrb	r3, [r2, #1]
 801e7f0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e7f4:	9312      	str	r3, [sp, #72]	; 0x48
 801e7f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e7f8:	fb10 f201 	smulbb	r2, r0, r1
 801e7fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e7fe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e802:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e806:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e80a:	10d2      	asrs	r2, r2, #3
 801e80c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e810:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801e814:	ea4c 0c03 	orr.w	ip, ip, r3
 801e818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e81a:	041b      	lsls	r3, r3, #16
 801e81c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e820:	4323      	orrs	r3, r4
 801e822:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e824:	4353      	muls	r3, r2
 801e826:	fb09 330c 	mla	r3, r9, ip, r3
 801e82a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e82e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e832:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e836:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e83a:	f1c1 0c10 	rsb	ip, r1, #16
 801e83e:	ebac 0c00 	sub.w	ip, ip, r0
 801e842:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e846:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e84a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e850:	0418      	lsls	r0, r3, #16
 801e852:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e856:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e85a:	4318      	orrs	r0, r3
 801e85c:	fb02 c200 	mla	r2, r2, r0, ip
 801e860:	8838      	ldrh	r0, [r7, #0]
 801e862:	0d53      	lsrs	r3, r2, #21
 801e864:	0952      	lsrs	r2, r2, #5
 801e866:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e86a:	1201      	asrs	r1, r0, #8
 801e86c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e870:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e874:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e878:	00c0      	lsls	r0, r0, #3
 801e87a:	431a      	orrs	r2, r3
 801e87c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e880:	fb11 f104 	smulbb	r1, r1, r4
 801e884:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e888:	b292      	uxth	r2, r2
 801e88a:	fb1e fe04 	smulbb	lr, lr, r4
 801e88e:	b2c0      	uxtb	r0, r0
 801e890:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e894:	fb10 f004 	smulbb	r0, r0, r4
 801e898:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e89c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801e8a0:	10d1      	asrs	r1, r2, #3
 801e8a2:	00d2      	lsls	r2, r2, #3
 801e8a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e8a8:	fa1f fc8c 	uxth.w	ip, ip
 801e8ac:	b2d2      	uxtb	r2, r2
 801e8ae:	fb01 e103 	mla	r1, r1, r3, lr
 801e8b2:	fb02 0303 	mla	r3, r2, r3, r0
 801e8b6:	b289      	uxth	r1, r1
 801e8b8:	b29a      	uxth	r2, r3
 801e8ba:	f10c 0301 	add.w	r3, ip, #1
 801e8be:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e8c2:	1c53      	adds	r3, r2, #1
 801e8c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e8c8:	1c4a      	adds	r2, r1, #1
 801e8ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e8ce:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e8d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e8d6:	0949      	lsrs	r1, r1, #5
 801e8d8:	ea43 030c 	orr.w	r3, r3, ip
 801e8dc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e8e0:	430b      	orrs	r3, r1
 801e8e2:	803b      	strh	r3, [r7, #0]
 801e8e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e8e6:	3702      	adds	r7, #2
 801e8e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e8ec:	449a      	add	sl, r3
 801e8ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e8f0:	441d      	add	r5, r3
 801e8f2:	e742      	b.n	801e77a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e8f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e8f6:	f108 0802 	add.w	r8, r8, #2
 801e8fa:	449a      	add	sl, r3
 801e8fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e8fe:	441d      	add	r5, r3
 801e900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e902:	3b01      	subs	r3, #1
 801e904:	9309      	str	r3, [sp, #36]	; 0x24
 801e906:	e718      	b.n	801e73a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e908:	d023      	beq.n	801e952 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e90c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e90e:	3b01      	subs	r3, #1
 801e910:	fb00 a003 	mla	r0, r0, r3, sl
 801e914:	1400      	asrs	r0, r0, #16
 801e916:	f53f af2d 	bmi.w	801e774 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e91a:	3901      	subs	r1, #1
 801e91c:	4288      	cmp	r0, r1
 801e91e:	f6bf af29 	bge.w	801e774 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e922:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e924:	fb01 5303 	mla	r3, r1, r3, r5
 801e928:	141b      	asrs	r3, r3, #16
 801e92a:	f53f af23 	bmi.w	801e774 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e92e:	3a01      	subs	r2, #1
 801e930:	4293      	cmp	r3, r2
 801e932:	f6bf af1f 	bge.w	801e774 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e936:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e93a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e93e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e942:	f1be 0f00 	cmp.w	lr, #0
 801e946:	dc6c      	bgt.n	801ea22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e94a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e94e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801e952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e954:	2b00      	cmp	r3, #0
 801e956:	f340 810e 	ble.w	801eb76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e95e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e960:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e964:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e968:	eef0 6a62 	vmov.f32	s13, s5
 801e96c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e970:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e974:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e978:	ee16 aa90 	vmov	sl, s13
 801e97c:	eef0 6a43 	vmov.f32	s13, s6
 801e980:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e984:	ee16 5a90 	vmov	r5, s13
 801e988:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e98c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e990:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e994:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e998:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e99c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9a0:	ee12 2a90 	vmov	r2, s5
 801e9a4:	eef0 2a47 	vmov.f32	s5, s14
 801e9a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9ac:	ee13 2a10 	vmov	r2, s6
 801e9b0:	9325      	str	r3, [sp, #148]	; 0x94
 801e9b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e9b4:	eeb0 3a67 	vmov.f32	s6, s15
 801e9b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9bc:	9326      	str	r3, [sp, #152]	; 0x98
 801e9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e9c2:	3b01      	subs	r3, #1
 801e9c4:	930c      	str	r3, [sp, #48]	; 0x30
 801e9c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e9c8:	bf08      	it	eq
 801e9ca:	4613      	moveq	r3, r2
 801e9cc:	9309      	str	r3, [sp, #36]	; 0x24
 801e9ce:	e6a6      	b.n	801e71e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e9d0:	2900      	cmp	r1, #0
 801e9d2:	f43f af10 	beq.w	801e7f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e9d6:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e9da:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e9de:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9e0:	e709      	b.n	801e7f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e9e2:	f112 0901 	adds.w	r9, r2, #1
 801e9e6:	f53f af7d 	bmi.w	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e9ea:	454b      	cmp	r3, r9
 801e9ec:	f6ff af7a 	blt.w	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e9f0:	f11c 0901 	adds.w	r9, ip, #1
 801e9f4:	f53f af76 	bmi.w	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e9f8:	45ce      	cmp	lr, r9
 801e9fa:	f6ff af73 	blt.w	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e9fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea00:	b21b      	sxth	r3, r3
 801ea02:	9202      	str	r2, [sp, #8]
 801ea04:	fa0f f28e 	sxth.w	r2, lr
 801ea08:	9300      	str	r3, [sp, #0]
 801ea0a:	4633      	mov	r3, r6
 801ea0c:	9201      	str	r2, [sp, #4]
 801ea0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ea10:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ea14:	e9cd c003 	strd	ip, r0, [sp, #12]
 801ea18:	4639      	mov	r1, r7
 801ea1a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ea1c:	f7ff fd8e 	bl	801e53c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801ea20:	e760      	b.n	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ea22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ea24:	ea4f 422a 	mov.w	r2, sl, asr #16
 801ea28:	1429      	asrs	r1, r5, #16
 801ea2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ea2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ea30:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801ea34:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ea38:	fb03 2101 	mla	r1, r3, r1, r2
 801ea3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ea3e:	440a      	add	r2, r1
 801ea40:	5c61      	ldrb	r1, [r4, r1]
 801ea42:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801ea46:	f1bc 0f00 	cmp.w	ip, #0
 801ea4a:	f000 808c 	beq.w	801eb66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ea4e:	7857      	ldrb	r7, [r2, #1]
 801ea50:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801ea54:	9413      	str	r4, [sp, #76]	; 0x4c
 801ea56:	b140      	cbz	r0, 801ea6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ea58:	18d7      	adds	r7, r2, r3
 801ea5a:	5cd3      	ldrb	r3, [r2, r3]
 801ea5c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ea60:	9310      	str	r3, [sp, #64]	; 0x40
 801ea62:	787b      	ldrb	r3, [r7, #1]
 801ea64:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ea68:	9314      	str	r3, [sp, #80]	; 0x50
 801ea6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea6c:	fb1c f200 	smulbb	r2, ip, r0
 801ea70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ea72:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea76:	041f      	lsls	r7, r3, #16
 801ea78:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ea7c:	10d2      	asrs	r2, r2, #3
 801ea7e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801ea82:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801ea86:	431f      	orrs	r7, r3
 801ea88:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801ea8c:	9317      	str	r3, [sp, #92]	; 0x5c
 801ea8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ea90:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ea92:	041b      	lsls	r3, r3, #16
 801ea94:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ea98:	ea43 030b 	orr.w	r3, r3, fp
 801ea9c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801eaa0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801eaa4:	4353      	muls	r3, r2
 801eaa6:	fb04 3707 	mla	r7, r4, r7, r3
 801eaaa:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801eaae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801eab0:	ea43 0b01 	orr.w	fp, r3, r1
 801eab4:	f1c0 0110 	rsb	r1, r0, #16
 801eab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eaba:	eba1 0c0c 	sub.w	ip, r1, ip
 801eabe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801eac2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801eac6:	fb0c 770b 	mla	r7, ip, fp, r7
 801eaca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801eace:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801ead2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ead6:	ea4c 0c0b 	orr.w	ip, ip, fp
 801eada:	fb02 770c 	mla	r7, r2, ip, r7
 801eade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eae0:	0d79      	lsrs	r1, r7, #21
 801eae2:	8812      	ldrh	r2, [r2, #0]
 801eae4:	097f      	lsrs	r7, r7, #5
 801eae6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eaea:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eaee:	430f      	orrs	r7, r1
 801eaf0:	1211      	asrs	r1, r2, #8
 801eaf2:	b2bb      	uxth	r3, r7
 801eaf4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801eaf8:	10d7      	asrs	r7, r2, #3
 801eafa:	fb11 f104 	smulbb	r1, r1, r4
 801eafe:	1218      	asrs	r0, r3, #8
 801eb00:	00d2      	lsls	r2, r2, #3
 801eb02:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eb06:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eb0a:	fb17 f704 	smulbb	r7, r7, r4
 801eb0e:	b2d2      	uxtb	r2, r2
 801eb10:	fb00 1009 	mla	r0, r0, r9, r1
 801eb14:	10d9      	asrs	r1, r3, #3
 801eb16:	fb12 f204 	smulbb	r2, r2, r4
 801eb1a:	00db      	lsls	r3, r3, #3
 801eb1c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eb20:	b280      	uxth	r0, r0
 801eb22:	b2db      	uxtb	r3, r3
 801eb24:	fb01 7109 	mla	r1, r1, r9, r7
 801eb28:	fb03 2309 	mla	r3, r3, r9, r2
 801eb2c:	1c42      	adds	r2, r0, #1
 801eb2e:	b289      	uxth	r1, r1
 801eb30:	b29b      	uxth	r3, r3
 801eb32:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eb36:	1c4f      	adds	r7, r1, #1
 801eb38:	1c5a      	adds	r2, r3, #1
 801eb3a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801eb3e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801eb42:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801eb46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb48:	0949      	lsrs	r1, r1, #5
 801eb4a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801eb4e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eb52:	4310      	orrs	r0, r2
 801eb54:	4308      	orrs	r0, r1
 801eb56:	f823 0b02 	strh.w	r0, [r3], #2
 801eb5a:	930e      	str	r3, [sp, #56]	; 0x38
 801eb5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801eb5e:	449a      	add	sl, r3
 801eb60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb62:	441d      	add	r5, r3
 801eb64:	e6ed      	b.n	801e942 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801eb66:	2800      	cmp	r0, #0
 801eb68:	f43f af7f 	beq.w	801ea6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eb6c:	5cd3      	ldrb	r3, [r2, r3]
 801eb6e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801eb72:	9310      	str	r3, [sp, #64]	; 0x40
 801eb74:	e779      	b.n	801ea6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eb76:	b019      	add	sp, #100	; 0x64
 801eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb80:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801eb84:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801eb88:	f1b8 0f00 	cmp.w	r8, #0
 801eb8c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801eb90:	fb08 470e 	mla	r7, r8, lr, r4
 801eb94:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801eb98:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801eb9c:	eb02 0907 	add.w	r9, r2, r7
 801eba0:	8808      	ldrh	r0, [r1, #0]
 801eba2:	db67      	blt.n	801ec74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801eba4:	45c2      	cmp	sl, r8
 801eba6:	dd65      	ble.n	801ec74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801eba8:	2c00      	cmp	r4, #0
 801ebaa:	db61      	blt.n	801ec70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ebac:	45a6      	cmp	lr, r4
 801ebae:	dd5f      	ble.n	801ec70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801ebb0:	5dd2      	ldrb	r2, [r2, r7]
 801ebb2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ebb6:	1c62      	adds	r2, r4, #1
 801ebb8:	d45f      	bmi.n	801ec7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ebba:	4596      	cmp	lr, r2
 801ebbc:	dd5d      	ble.n	801ec7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ebbe:	2d00      	cmp	r5, #0
 801ebc0:	d05b      	beq.n	801ec7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801ebc2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ebc6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801ebca:	f118 0801 	adds.w	r8, r8, #1
 801ebce:	d458      	bmi.n	801ec82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ebd0:	45c2      	cmp	sl, r8
 801ebd2:	dd56      	ble.n	801ec82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ebd4:	2e00      	cmp	r6, #0
 801ebd6:	d054      	beq.n	801ec82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ebd8:	2c00      	cmp	r4, #0
 801ebda:	db50      	blt.n	801ec7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ebdc:	45a6      	cmp	lr, r4
 801ebde:	dd4e      	ble.n	801ec7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ebe0:	f819 200e 	ldrb.w	r2, [r9, lr]
 801ebe4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ebe8:	3401      	adds	r4, #1
 801ebea:	d407      	bmi.n	801ebfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ebec:	45a6      	cmp	lr, r4
 801ebee:	dd05      	ble.n	801ebfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ebf0:	b125      	cbz	r5, 801ebfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ebf2:	44ce      	add	lr, r9
 801ebf4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ebf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ebfc:	fb15 f406 	smulbb	r4, r5, r6
 801ec00:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801ec04:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801ec08:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ec0c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ec10:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801ec14:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ec18:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ec1c:	ea43 0c0c 	orr.w	ip, r3, ip
 801ec20:	f1c6 0310 	rsb	r3, r6, #16
 801ec24:	ea4e 0707 	orr.w	r7, lr, r7
 801ec28:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801ec2c:	1b5b      	subs	r3, r3, r5
 801ec2e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801ec32:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ec36:	437d      	muls	r5, r7
 801ec38:	fb03 5c0c 	mla	ip, r3, ip, r5
 801ec3c:	0403      	lsls	r3, r0, #16
 801ec3e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ec42:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ec46:	4318      	orrs	r0, r3
 801ec48:	0413      	lsls	r3, r2, #16
 801ec4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ec4e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ec52:	fb04 c000 	mla	r0, r4, r0, ip
 801ec56:	4313      	orrs	r3, r2
 801ec58:	fb06 0003 	mla	r0, r6, r3, r0
 801ec5c:	0d43      	lsrs	r3, r0, #21
 801ec5e:	0940      	lsrs	r0, r0, #5
 801ec60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ec64:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ec68:	4318      	orrs	r0, r3
 801ec6a:	8008      	strh	r0, [r1, #0]
 801ec6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec70:	4684      	mov	ip, r0
 801ec72:	e7a0      	b.n	801ebb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801ec74:	4607      	mov	r7, r0
 801ec76:	4684      	mov	ip, r0
 801ec78:	e7a7      	b.n	801ebca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ec7a:	4607      	mov	r7, r0
 801ec7c:	e7a5      	b.n	801ebca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ec7e:	4602      	mov	r2, r0
 801ec80:	e7b2      	b.n	801ebe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801ec82:	4602      	mov	r2, r0
 801ec84:	e7ba      	b.n	801ebfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801ec86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec8a:	b093      	sub	sp, #76	; 0x4c
 801ec8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec90:	920f      	str	r2, [sp, #60]	; 0x3c
 801ec92:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ec94:	9010      	str	r0, [sp, #64]	; 0x40
 801ec96:	9108      	str	r1, [sp, #32]
 801ec98:	6850      	ldr	r0, [r2, #4]
 801ec9a:	9306      	str	r3, [sp, #24]
 801ec9c:	6812      	ldr	r2, [r2, #0]
 801ec9e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801eca2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801eca6:	fb00 1303 	mla	r3, r0, r3, r1
 801ecaa:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ecae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ecb0:	681b      	ldr	r3, [r3, #0]
 801ecb2:	9307      	str	r3, [sp, #28]
 801ecb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ecb6:	685f      	ldr	r7, [r3, #4]
 801ecb8:	3704      	adds	r7, #4
 801ecba:	9b08      	ldr	r3, [sp, #32]
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	dc03      	bgt.n	801ecc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ecc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	f340 81b2 	ble.w	801f02c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ecc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ecca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ecce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ecd2:	1e48      	subs	r0, r1, #1
 801ecd4:	f102 3cff 	add.w	ip, r2, #4294967295
 801ecd8:	9b06      	ldr	r3, [sp, #24]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	f340 80a9 	ble.w	801ee32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ece0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ece4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ece8:	d406      	bmi.n	801ecf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecea:	4586      	cmp	lr, r0
 801ecec:	da04      	bge.n	801ecf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	db02      	blt.n	801ecf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecf2:	4563      	cmp	r3, ip
 801ecf4:	f2c0 809e 	blt.w	801ee34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ecf8:	f11e 0e01 	adds.w	lr, lr, #1
 801ecfc:	f100 808f 	bmi.w	801ee1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ed00:	4571      	cmp	r1, lr
 801ed02:	f2c0 808c 	blt.w	801ee1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ed06:	3301      	adds	r3, #1
 801ed08:	f100 8089 	bmi.w	801ee1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ed0c:	429a      	cmp	r2, r3
 801ed0e:	f2c0 8086 	blt.w	801ee1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ed12:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ed16:	46c8      	mov	r8, r9
 801ed18:	f1bb 0f00 	cmp.w	fp, #0
 801ed1c:	f340 80a6 	ble.w	801ee6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ed20:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ed22:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ed26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed28:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ed2c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ed30:	1422      	asrs	r2, r4, #16
 801ed32:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ed36:	689b      	ldr	r3, [r3, #8]
 801ed38:	f100 80e3 	bmi.w	801ef02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ed3c:	f103 3aff 	add.w	sl, r3, #4294967295
 801ed40:	4552      	cmp	r2, sl
 801ed42:	f280 80de 	bge.w	801ef02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ed46:	f1bc 0f00 	cmp.w	ip, #0
 801ed4a:	f2c0 80da 	blt.w	801ef02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ed4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ed52:	45d4      	cmp	ip, sl
 801ed54:	f280 80d5 	bge.w	801ef02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ed58:	b21b      	sxth	r3, r3
 801ed5a:	9d07      	ldr	r5, [sp, #28]
 801ed5c:	fb0c 2203 	mla	r2, ip, r3, r2
 801ed60:	eb05 0a02 	add.w	sl, r5, r2
 801ed64:	5caa      	ldrb	r2, [r5, r2]
 801ed66:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801ed6a:	2800      	cmp	r0, #0
 801ed6c:	f000 80c0 	beq.w	801eef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ed70:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ed74:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ed78:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed7a:	b151      	cbz	r1, 801ed92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ed7c:	eb0a 0203 	add.w	r2, sl, r3
 801ed80:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ed84:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ed88:	9309      	str	r3, [sp, #36]	; 0x24
 801ed8a:	7853      	ldrb	r3, [r2, #1]
 801ed8c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ed90:	930c      	str	r3, [sp, #48]	; 0x30
 801ed92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed94:	fb10 f201 	smulbb	r2, r0, r1
 801ed98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ed9a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ed9e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801eda2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801eda6:	10d2      	asrs	r2, r2, #3
 801eda8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801edac:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801edb0:	ea4c 0c03 	orr.w	ip, ip, r3
 801edb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801edb6:	041b      	lsls	r3, r3, #16
 801edb8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801edbc:	432b      	orrs	r3, r5
 801edbe:	4353      	muls	r3, r2
 801edc0:	fb0a 330c 	mla	r3, sl, ip, r3
 801edc4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801edc8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801edcc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801edd0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801edd4:	f1c1 0c10 	rsb	ip, r1, #16
 801edd8:	ebac 0c00 	sub.w	ip, ip, r0
 801eddc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ede0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ede4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ede8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edea:	0418      	lsls	r0, r3, #16
 801edec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801edf0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801edf4:	4318      	orrs	r0, r3
 801edf6:	fb02 c200 	mla	r2, r2, r0, ip
 801edfa:	0d53      	lsrs	r3, r2, #21
 801edfc:	0952      	lsrs	r2, r2, #5
 801edfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ee06:	431a      	orrs	r2, r3
 801ee08:	f8a8 2000 	strh.w	r2, [r8]
 801ee0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ee0e:	f108 0802 	add.w	r8, r8, #2
 801ee12:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ee16:	441c      	add	r4, r3
 801ee18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ee1a:	441e      	add	r6, r3
 801ee1c:	e77c      	b.n	801ed18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ee1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ee20:	f109 0902 	add.w	r9, r9, #2
 801ee24:	441c      	add	r4, r3
 801ee26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ee28:	441e      	add	r6, r3
 801ee2a:	9b06      	ldr	r3, [sp, #24]
 801ee2c:	3b01      	subs	r3, #1
 801ee2e:	9306      	str	r3, [sp, #24]
 801ee30:	e752      	b.n	801ecd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ee32:	d020      	beq.n	801ee76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ee34:	9b06      	ldr	r3, [sp, #24]
 801ee36:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ee38:	3b01      	subs	r3, #1
 801ee3a:	fb00 4003 	mla	r0, r0, r3, r4
 801ee3e:	1400      	asrs	r0, r0, #16
 801ee40:	f53f af67 	bmi.w	801ed12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ee44:	3901      	subs	r1, #1
 801ee46:	4288      	cmp	r0, r1
 801ee48:	f6bf af63 	bge.w	801ed12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ee4c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ee4e:	fb01 6303 	mla	r3, r1, r3, r6
 801ee52:	141b      	asrs	r3, r3, #16
 801ee54:	f53f af5d 	bmi.w	801ed12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ee58:	3a01      	subs	r2, #1
 801ee5a:	4293      	cmp	r3, r2
 801ee5c:	f6bf af59 	bge.w	801ed12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ee60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ee64:	46ca      	mov	sl, r9
 801ee66:	f1b8 0f00 	cmp.w	r8, #0
 801ee6a:	dc67      	bgt.n	801ef3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ee6c:	9b06      	ldr	r3, [sp, #24]
 801ee6e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ee72:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ee76:	9b08      	ldr	r3, [sp, #32]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	f340 80d7 	ble.w	801f02c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ee7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ee84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee88:	eeb0 6a62 	vmov.f32	s12, s5
 801ee8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee98:	ee16 4a10 	vmov	r4, s12
 801ee9c:	eeb0 6a43 	vmov.f32	s12, s6
 801eea0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eea4:	ee16 6a10 	vmov	r6, s12
 801eea8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eeac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eeb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eeb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eeb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eebc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eec0:	ee12 2a90 	vmov	r2, s5
 801eec4:	eef0 2a47 	vmov.f32	s5, s14
 801eec8:	fb92 f3f3 	sdiv	r3, r2, r3
 801eecc:	ee13 2a10 	vmov	r2, s6
 801eed0:	931f      	str	r3, [sp, #124]	; 0x7c
 801eed2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eed4:	eeb0 3a67 	vmov.f32	s6, s15
 801eed8:	fb92 f3f3 	sdiv	r3, r2, r3
 801eedc:	9320      	str	r3, [sp, #128]	; 0x80
 801eede:	9b08      	ldr	r3, [sp, #32]
 801eee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eee2:	3b01      	subs	r3, #1
 801eee4:	9308      	str	r3, [sp, #32]
 801eee6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eee8:	bf08      	it	eq
 801eeea:	4613      	moveq	r3, r2
 801eeec:	9306      	str	r3, [sp, #24]
 801eeee:	e6e4      	b.n	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801eef0:	2900      	cmp	r1, #0
 801eef2:	f43f af4e 	beq.w	801ed92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801eef6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801eefa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eefe:	9309      	str	r3, [sp, #36]	; 0x24
 801ef00:	e747      	b.n	801ed92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ef02:	f112 0a01 	adds.w	sl, r2, #1
 801ef06:	d481      	bmi.n	801ee0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef08:	4553      	cmp	r3, sl
 801ef0a:	f6ff af7f 	blt.w	801ee0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef0e:	f11c 0a01 	adds.w	sl, ip, #1
 801ef12:	f53f af7b 	bmi.w	801ee0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef16:	45d6      	cmp	lr, sl
 801ef18:	f6ff af78 	blt.w	801ee0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef1c:	b21b      	sxth	r3, r3
 801ef1e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801ef22:	fa0f f28e 	sxth.w	r2, lr
 801ef26:	9300      	str	r3, [sp, #0]
 801ef28:	463b      	mov	r3, r7
 801ef2a:	9201      	str	r2, [sp, #4]
 801ef2c:	9a07      	ldr	r2, [sp, #28]
 801ef2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ef32:	4641      	mov	r1, r8
 801ef34:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ef36:	f7ff fe21 	bl	801eb7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ef3a:	e767      	b.n	801ee0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef3e:	1422      	asrs	r2, r4, #16
 801ef40:	1431      	asrs	r1, r6, #16
 801ef42:	9d07      	ldr	r5, [sp, #28]
 801ef44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ef48:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801ef4c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ef50:	fb03 2101 	mla	r1, r3, r1, r2
 801ef54:	9a07      	ldr	r2, [sp, #28]
 801ef56:	440a      	add	r2, r1
 801ef58:	5c69      	ldrb	r1, [r5, r1]
 801ef5a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801ef5e:	f1be 0f00 	cmp.w	lr, #0
 801ef62:	d05c      	beq.n	801f01e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801ef64:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ef68:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801ef6c:	950d      	str	r5, [sp, #52]	; 0x34
 801ef6e:	b150      	cbz	r0, 801ef86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ef70:	eb02 0c03 	add.w	ip, r2, r3
 801ef74:	5cd3      	ldrb	r3, [r2, r3]
 801ef76:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ef7a:	930a      	str	r3, [sp, #40]	; 0x28
 801ef7c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ef80:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ef84:	930e      	str	r3, [sp, #56]	; 0x38
 801ef86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ef88:	fb1e f200 	smulbb	r2, lr, r0
 801ef8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ef8e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ef92:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ef96:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ef9a:	10d2      	asrs	r2, r2, #3
 801ef9c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801efa0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801efa4:	ea4c 0c03 	orr.w	ip, ip, r3
 801efa8:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801efac:	9311      	str	r3, [sp, #68]	; 0x44
 801efae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801efb2:	041b      	lsls	r3, r3, #16
 801efb4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801efb8:	ea43 030b 	orr.w	r3, r3, fp
 801efbc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801efc0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801efc4:	4353      	muls	r3, r2
 801efc6:	fb05 3c0c 	mla	ip, r5, ip, r3
 801efca:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801efce:	ea43 0b01 	orr.w	fp, r3, r1
 801efd2:	f1c0 0110 	rsb	r1, r0, #16
 801efd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efd8:	eba1 0e0e 	sub.w	lr, r1, lr
 801efdc:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801efe0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801efe4:	fb0e cc0b 	mla	ip, lr, fp, ip
 801efe8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801efec:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801eff0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801eff4:	ea4b 0e0e 	orr.w	lr, fp, lr
 801eff8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801effc:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f000:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f004:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f008:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f00c:	ea43 0c0c 	orr.w	ip, r3, ip
 801f010:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f012:	441c      	add	r4, r3
 801f014:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f016:	f82a cb02 	strh.w	ip, [sl], #2
 801f01a:	441e      	add	r6, r3
 801f01c:	e723      	b.n	801ee66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f01e:	2800      	cmp	r0, #0
 801f020:	d0b1      	beq.n	801ef86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f022:	5cd3      	ldrb	r3, [r2, r3]
 801f024:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f028:	930a      	str	r3, [sp, #40]	; 0x28
 801f02a:	e7ac      	b.n	801ef86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f02c:	b013      	add	sp, #76	; 0x4c
 801f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f032 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f036:	880d      	ldrh	r5, [r1, #0]
 801f038:	b087      	sub	sp, #28
 801f03a:	10ef      	asrs	r7, r5, #3
 801f03c:	9103      	str	r1, [sp, #12]
 801f03e:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801f042:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801f046:	00ed      	lsls	r5, r5, #3
 801f048:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f04c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f050:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f054:	b2ed      	uxtb	r5, r5
 801f056:	9701      	str	r7, [sp, #4]
 801f058:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f05c:	9502      	str	r5, [sp, #8]
 801f05e:	9d01      	ldr	r5, [sp, #4]
 801f060:	9902      	ldr	r1, [sp, #8]
 801f062:	022d      	lsls	r5, r5, #8
 801f064:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f068:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801f06c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f070:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f074:	430d      	orrs	r5, r1
 801f076:	fb06 0709 	mla	r7, r6, r9, r0
 801f07a:	2e00      	cmp	r6, #0
 801f07c:	9505      	str	r5, [sp, #20]
 801f07e:	eb02 0c07 	add.w	ip, r2, r7
 801f082:	f2c0 80b6 	blt.w	801f1f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f086:	45b3      	cmp	fp, r6
 801f088:	f340 80b3 	ble.w	801f1f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f08c:	2800      	cmp	r0, #0
 801f08e:	f2c0 80ae 	blt.w	801f1ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f092:	4581      	cmp	r9, r0
 801f094:	f340 80ab 	ble.w	801f1ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f098:	5dd7      	ldrb	r7, [r2, r7]
 801f09a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f09e:	441f      	add	r7, r3
 801f0a0:	1c42      	adds	r2, r0, #1
 801f0a2:	f100 80a9 	bmi.w	801f1f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f0a6:	4591      	cmp	r9, r2
 801f0a8:	f340 80a6 	ble.w	801f1f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f0ac:	2c00      	cmp	r4, #0
 801f0ae:	f000 80a3 	beq.w	801f1f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f0b2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f0b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f0ba:	441d      	add	r5, r3
 801f0bc:	3601      	adds	r6, #1
 801f0be:	f100 809f 	bmi.w	801f200 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f0c2:	45b3      	cmp	fp, r6
 801f0c4:	f340 809c 	ble.w	801f200 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f0c8:	f1be 0f00 	cmp.w	lr, #0
 801f0cc:	f000 8098 	beq.w	801f200 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f0d0:	2800      	cmp	r0, #0
 801f0d2:	f2c0 8093 	blt.w	801f1fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f0d6:	4581      	cmp	r9, r0
 801f0d8:	f340 8090 	ble.w	801f1fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f0dc:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f0e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f0e4:	441e      	add	r6, r3
 801f0e6:	3001      	adds	r0, #1
 801f0e8:	f100 808d 	bmi.w	801f206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f0ec:	4581      	cmp	r9, r0
 801f0ee:	f340 808a 	ble.w	801f206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f0f2:	2c00      	cmp	r4, #0
 801f0f4:	f000 8087 	beq.w	801f206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f0f8:	44e1      	add	r9, ip
 801f0fa:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f0fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f102:	4413      	add	r3, r2
 801f104:	b2a4      	uxth	r4, r4
 801f106:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f10a:	fa1f fe8e 	uxth.w	lr, lr
 801f10e:	9901      	ldr	r1, [sp, #4]
 801f110:	fb04 fb0e 	mul.w	fp, r4, lr
 801f114:	0124      	lsls	r4, r4, #4
 801f116:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f11a:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801f11e:	eba4 040b 	sub.w	r4, r4, fp
 801f122:	fa1f f08e 	uxth.w	r0, lr
 801f126:	b2a2      	uxth	r2, r4
 801f128:	78ac      	ldrb	r4, [r5, #2]
 801f12a:	eba9 0900 	sub.w	r9, r9, r0
 801f12e:	fa1f fe88 	uxth.w	lr, r8
 801f132:	4354      	muls	r4, r2
 801f134:	ea6f 0808 	mvn.w	r8, r8
 801f138:	fa1f f989 	uxth.w	r9, r9
 801f13c:	fa5f f888 	uxtb.w	r8, r8
 801f140:	fb09 440c 	mla	r4, r9, ip, r4
 801f144:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f148:	fb1a fa08 	smulbb	sl, sl, r8
 801f14c:	fb00 440c 	mla	r4, r0, ip, r4
 801f150:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f154:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f158:	787c      	ldrb	r4, [r7, #1]
 801f15a:	783f      	ldrb	r7, [r7, #0]
 801f15c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f160:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f164:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f168:	782d      	ldrb	r5, [r5, #0]
 801f16a:	fb02 fa0a 	mul.w	sl, r2, sl
 801f16e:	fa1f fc8c 	uxth.w	ip, ip
 801f172:	436a      	muls	r2, r5
 801f174:	7835      	ldrb	r5, [r6, #0]
 801f176:	fb09 aa04 	mla	sl, r9, r4, sl
 801f17a:	7874      	ldrb	r4, [r6, #1]
 801f17c:	fb09 2207 	mla	r2, r9, r7, r2
 801f180:	fb00 aa04 	mla	sl, r0, r4, sl
 801f184:	785c      	ldrb	r4, [r3, #1]
 801f186:	fb00 2005 	mla	r0, r0, r5, r2
 801f18a:	781b      	ldrb	r3, [r3, #0]
 801f18c:	fb0b a404 	mla	r4, fp, r4, sl
 801f190:	fb11 fa08 	smulbb	sl, r1, r8
 801f194:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f198:	9b02      	ldr	r3, [sp, #8]
 801f19a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f19e:	fb13 f808 	smulbb	r8, r3, r8
 801f1a2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f1a6:	fb04 a40e 	mla	r4, r4, lr, sl
 801f1aa:	f10c 0301 	add.w	r3, ip, #1
 801f1ae:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f1b2:	b2a4      	uxth	r4, r4
 801f1b4:	fa1f fe8e 	uxth.w	lr, lr
 801f1b8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f1bc:	f104 0a01 	add.w	sl, r4, #1
 801f1c0:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801f1c4:	f10e 0c01 	add.w	ip, lr, #1
 801f1c8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f1cc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f1d0:	0964      	lsrs	r4, r4, #5
 801f1d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f1d6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f1da:	ea4c 0c03 	orr.w	ip, ip, r3
 801f1de:	9b03      	ldr	r3, [sp, #12]
 801f1e0:	ea4c 0c04 	orr.w	ip, ip, r4
 801f1e4:	f8a3 c000 	strh.w	ip, [r3]
 801f1e8:	b007      	add	sp, #28
 801f1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ee:	af05      	add	r7, sp, #20
 801f1f0:	e756      	b.n	801f0a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801f1f2:	ad05      	add	r5, sp, #20
 801f1f4:	462f      	mov	r7, r5
 801f1f6:	e761      	b.n	801f0bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f1f8:	ad05      	add	r5, sp, #20
 801f1fa:	e75f      	b.n	801f0bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f1fc:	ae05      	add	r6, sp, #20
 801f1fe:	e772      	b.n	801f0e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f200:	ab05      	add	r3, sp, #20
 801f202:	461e      	mov	r6, r3
 801f204:	e77e      	b.n	801f104 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801f206:	ab05      	add	r3, sp, #20
 801f208:	e77c      	b.n	801f104 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801f20a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f20a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f20e:	b095      	sub	sp, #84	; 0x54
 801f210:	9212      	str	r2, [sp, #72]	; 0x48
 801f212:	9309      	str	r3, [sp, #36]	; 0x24
 801f214:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f216:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801f21a:	9013      	str	r0, [sp, #76]	; 0x4c
 801f21c:	930f      	str	r3, [sp, #60]	; 0x3c
 801f21e:	6850      	ldr	r0, [r2, #4]
 801f220:	910e      	str	r1, [sp, #56]	; 0x38
 801f222:	6812      	ldr	r2, [r2, #0]
 801f224:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801f228:	fb00 1303 	mla	r3, r0, r3, r1
 801f22c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f230:	930a      	str	r3, [sp, #40]	; 0x28
 801f232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	930d      	str	r3, [sp, #52]	; 0x34
 801f238:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f23a:	685c      	ldr	r4, [r3, #4]
 801f23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f23e:	3404      	adds	r4, #4
 801f240:	43db      	mvns	r3, r3
 801f242:	b2db      	uxtb	r3, r3
 801f244:	930b      	str	r3, [sp, #44]	; 0x2c
 801f246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f248:	2b00      	cmp	r3, #0
 801f24a:	dc03      	bgt.n	801f254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f24c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f24e:	2b00      	cmp	r3, #0
 801f250:	f340 8255 	ble.w	801f6fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f254:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f256:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f25a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f25e:	1e48      	subs	r0, r1, #1
 801f260:	1e55      	subs	r5, r2, #1
 801f262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f264:	2b00      	cmp	r3, #0
 801f266:	f340 80f9 	ble.w	801f45c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f26a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f26c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f26e:	1436      	asrs	r6, r6, #16
 801f270:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f274:	d406      	bmi.n	801f284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f276:	4286      	cmp	r6, r0
 801f278:	da04      	bge.n	801f284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	db02      	blt.n	801f284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f27e:	42ab      	cmp	r3, r5
 801f280:	f2c0 80ed 	blt.w	801f45e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f284:	3601      	adds	r6, #1
 801f286:	f100 80da 	bmi.w	801f43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f28a:	42b1      	cmp	r1, r6
 801f28c:	f2c0 80d7 	blt.w	801f43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f290:	3301      	adds	r3, #1
 801f292:	f100 80d4 	bmi.w	801f43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f296:	429a      	cmp	r2, r3
 801f298:	f2c0 80d1 	blt.w	801f43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f29e:	9311      	str	r3, [sp, #68]	; 0x44
 801f2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2a2:	930c      	str	r3, [sp, #48]	; 0x30
 801f2a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	f340 80fa 	ble.w	801f4a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f2ac:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f2ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f2b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f2b2:	68c6      	ldr	r6, [r0, #12]
 801f2b4:	141d      	asrs	r5, r3, #16
 801f2b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f2b8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f2bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f2be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f2c0:	1400      	asrs	r0, r0, #16
 801f2c2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f2c6:	6892      	ldr	r2, [r2, #8]
 801f2c8:	f100 813e 	bmi.w	801f548 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f2cc:	1e57      	subs	r7, r2, #1
 801f2ce:	42b8      	cmp	r0, r7
 801f2d0:	f280 813a 	bge.w	801f548 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f2d4:	2d00      	cmp	r5, #0
 801f2d6:	f2c0 8137 	blt.w	801f548 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f2da:	1e77      	subs	r7, r6, #1
 801f2dc:	42bd      	cmp	r5, r7
 801f2de:	f280 8133 	bge.w	801f548 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f2e2:	b212      	sxth	r2, r2
 801f2e4:	fb05 0002 	mla	r0, r5, r2, r0
 801f2e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f2ea:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f2ee:	182e      	adds	r6, r5, r0
 801f2f0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f2f4:	eb04 050a 	add.w	r5, r4, sl
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	f000 8117 	beq.w	801f52c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f2fe:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f302:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f306:	44a4      	add	ip, r4
 801f308:	2900      	cmp	r1, #0
 801f30a:	f000 8117 	beq.w	801f53c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f30e:	18b0      	adds	r0, r6, r2
 801f310:	5cb2      	ldrb	r2, [r6, r2]
 801f312:	7840      	ldrb	r0, [r0, #1]
 801f314:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f318:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f31c:	4422      	add	r2, r4
 801f31e:	4420      	add	r0, r4
 801f320:	b29b      	uxth	r3, r3
 801f322:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f326:	b289      	uxth	r1, r1
 801f328:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f32c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f32e:	fb03 f901 	mul.w	r9, r3, r1
 801f332:	011b      	lsls	r3, r3, #4
 801f334:	f8b6 e000 	ldrh.w	lr, [r6]
 801f338:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f33c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f340:	eba3 0309 	sub.w	r3, r3, r9
 801f344:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f348:	b289      	uxth	r1, r1
 801f34a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f34e:	b29b      	uxth	r3, r3
 801f350:	eba8 0801 	sub.w	r8, r8, r1
 801f354:	435f      	muls	r7, r3
 801f356:	fa1f f888 	uxth.w	r8, r8
 801f35a:	9310      	str	r3, [sp, #64]	; 0x40
 801f35c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f35e:	fb08 770b 	mla	r7, r8, fp, r7
 801f362:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f366:	fb01 770b 	mla	r7, r1, fp, r7
 801f36a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f36e:	fb09 770b 	mla	r7, r9, fp, r7
 801f372:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f376:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f37a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f37e:	fb1b fb03 	smulbb	fp, fp, r3
 801f382:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f384:	fb07 b706 	mla	r7, r7, r6, fp
 801f388:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f38c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f390:	f89c c000 	ldrb.w	ip, [ip]
 801f394:	b2bf      	uxth	r7, r7
 801f396:	435d      	muls	r5, r3
 801f398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f39a:	fb08 550b 	mla	r5, r8, fp, r5
 801f39e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f3a2:	fb01 550b 	mla	r5, r1, fp, r5
 801f3a6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f3aa:	fb09 550b 	mla	r5, r9, fp, r5
 801f3ae:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f3b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f3b6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f3ba:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f3be:	fa5f fe8e 	uxtb.w	lr, lr
 801f3c2:	fb1b fb03 	smulbb	fp, fp, r3
 801f3c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3c8:	fb03 f30c 	mul.w	r3, r3, ip
 801f3cc:	f892 c000 	ldrb.w	ip, [r2]
 801f3d0:	fb05 b506 	mla	r5, r5, r6, fp
 801f3d4:	fb08 330a 	mla	r3, r8, sl, r3
 801f3d8:	b2ad      	uxth	r5, r5
 801f3da:	fb01 330c 	mla	r3, r1, ip, r3
 801f3de:	f890 c000 	ldrb.w	ip, [r0]
 801f3e2:	f105 0b01 	add.w	fp, r5, #1
 801f3e6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3ec:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f3f0:	fb1e fe03 	smulbb	lr, lr, r3
 801f3f4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f3f8:	1c7b      	adds	r3, r7, #1
 801f3fa:	096d      	lsrs	r5, r5, #5
 801f3fc:	fb0c e606 	mla	r6, ip, r6, lr
 801f400:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f404:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f408:	b2b6      	uxth	r6, r6
 801f40a:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f40e:	1c77      	adds	r7, r6, #1
 801f410:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f414:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f418:	431f      	orrs	r7, r3
 801f41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f41c:	433d      	orrs	r5, r7
 801f41e:	801d      	strh	r5, [r3, #0]
 801f420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f422:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f424:	3302      	adds	r3, #2
 801f426:	930c      	str	r3, [sp, #48]	; 0x30
 801f428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f42a:	4413      	add	r3, r2
 801f42c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f42e:	931f      	str	r3, [sp, #124]	; 0x7c
 801f430:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f432:	4413      	add	r3, r2
 801f434:	9320      	str	r3, [sp, #128]	; 0x80
 801f436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f438:	3b01      	subs	r3, #1
 801f43a:	9311      	str	r3, [sp, #68]	; 0x44
 801f43c:	e732      	b.n	801f2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f43e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f440:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f442:	4433      	add	r3, r6
 801f444:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801f446:	931f      	str	r3, [sp, #124]	; 0x7c
 801f448:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f44a:	4433      	add	r3, r6
 801f44c:	9320      	str	r3, [sp, #128]	; 0x80
 801f44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f450:	3b01      	subs	r3, #1
 801f452:	9309      	str	r3, [sp, #36]	; 0x24
 801f454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f456:	3302      	adds	r3, #2
 801f458:	930a      	str	r3, [sp, #40]	; 0x28
 801f45a:	e702      	b.n	801f262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f45c:	d027      	beq.n	801f4ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f460:	9821      	ldr	r0, [sp, #132]	; 0x84
 801f462:	3b01      	subs	r3, #1
 801f464:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f466:	fb00 5003 	mla	r0, r0, r3, r5
 801f46a:	1400      	asrs	r0, r0, #16
 801f46c:	f53f af16 	bmi.w	801f29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f470:	3901      	subs	r1, #1
 801f472:	4288      	cmp	r0, r1
 801f474:	f6bf af12 	bge.w	801f29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f478:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f47a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f47c:	fb01 0303 	mla	r3, r1, r3, r0
 801f480:	141b      	asrs	r3, r3, #16
 801f482:	f53f af0b 	bmi.w	801f29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f486:	3a01      	subs	r2, #1
 801f488:	4293      	cmp	r3, r2
 801f48a:	f6bf af07 	bge.w	801f29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f490:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f494:	9311      	str	r3, [sp, #68]	; 0x44
 801f496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f498:	930c      	str	r3, [sp, #48]	; 0x30
 801f49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	dc70      	bgt.n	801f582 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f4ac:	930a      	str	r3, [sp, #40]	; 0x28
 801f4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	f340 8124 	ble.w	801f6fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f4ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f4bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4c4:	eef0 6a62 	vmov.f32	s13, s5
 801f4c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f4cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4d4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801f4d8:	eef0 6a43 	vmov.f32	s13, s6
 801f4dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4e0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801f4e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f4e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f4ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f4f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f4f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f4f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4fc:	ee12 2a90 	vmov	r2, s5
 801f500:	eef0 2a47 	vmov.f32	s5, s14
 801f504:	fb92 f3f3 	sdiv	r3, r2, r3
 801f508:	ee13 2a10 	vmov	r2, s6
 801f50c:	9321      	str	r3, [sp, #132]	; 0x84
 801f50e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f510:	eeb0 3a67 	vmov.f32	s6, s15
 801f514:	fb92 f3f3 	sdiv	r3, r2, r3
 801f518:	9322      	str	r3, [sp, #136]	; 0x88
 801f51a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f51c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f51e:	3b01      	subs	r3, #1
 801f520:	930e      	str	r3, [sp, #56]	; 0x38
 801f522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f524:	bf08      	it	eq
 801f526:	4613      	moveq	r3, r2
 801f528:	9309      	str	r3, [sp, #36]	; 0x24
 801f52a:	e68c      	b.n	801f246 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f52c:	b149      	cbz	r1, 801f542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801f52e:	5cb2      	ldrb	r2, [r6, r2]
 801f530:	4628      	mov	r0, r5
 801f532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f536:	4422      	add	r2, r4
 801f538:	46ac      	mov	ip, r5
 801f53a:	e6f1      	b.n	801f320 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f53c:	4628      	mov	r0, r5
 801f53e:	462a      	mov	r2, r5
 801f540:	e6ee      	b.n	801f320 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f542:	4628      	mov	r0, r5
 801f544:	462a      	mov	r2, r5
 801f546:	e7f7      	b.n	801f538 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801f548:	1c47      	adds	r7, r0, #1
 801f54a:	f53f af69 	bmi.w	801f420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f54e:	42ba      	cmp	r2, r7
 801f550:	f6ff af66 	blt.w	801f420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f554:	1c6f      	adds	r7, r5, #1
 801f556:	f53f af63 	bmi.w	801f420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f55a:	42be      	cmp	r6, r7
 801f55c:	f6ff af60 	blt.w	801f420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f560:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f562:	b236      	sxth	r6, r6
 801f564:	b212      	sxth	r2, r2
 801f566:	9002      	str	r0, [sp, #8]
 801f568:	9601      	str	r6, [sp, #4]
 801f56a:	9200      	str	r2, [sp, #0]
 801f56c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f56e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f572:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f576:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f57a:	4623      	mov	r3, r4
 801f57c:	f7ff fd59 	bl	801f032 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f580:	e74e      	b.n	801f420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f582:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f584:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f586:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f58a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f58c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f58e:	1400      	asrs	r0, r0, #16
 801f590:	142d      	asrs	r5, r5, #16
 801f592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f594:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f598:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f59c:	fb02 5000 	mla	r0, r2, r0, r5
 801f5a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f5a2:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f5a6:	182e      	adds	r6, r5, r0
 801f5a8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f5ac:	eb04 0509 	add.w	r5, r4, r9
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	f000 8096 	beq.w	801f6e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801f5b6:	7877      	ldrb	r7, [r6, #1]
 801f5b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f5bc:	4427      	add	r7, r4
 801f5be:	2900      	cmp	r1, #0
 801f5c0:	f000 8097 	beq.w	801f6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801f5c4:	18b0      	adds	r0, r6, r2
 801f5c6:	5cb2      	ldrb	r2, [r6, r2]
 801f5c8:	7840      	ldrb	r0, [r0, #1]
 801f5ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f5d2:	4422      	add	r2, r4
 801f5d4:	4420      	add	r0, r4
 801f5d6:	b29b      	uxth	r3, r3
 801f5d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f5da:	b289      	uxth	r1, r1
 801f5dc:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f5e0:	f8b6 c000 	ldrh.w	ip, [r6]
 801f5e4:	fb03 f801 	mul.w	r8, r3, r1
 801f5e8:	011b      	lsls	r3, r3, #4
 801f5ea:	78be      	ldrb	r6, [r7, #2]
 801f5ec:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f5f0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f5f4:	eba3 0308 	sub.w	r3, r3, r8
 801f5f8:	f814 9009 	ldrb.w	r9, [r4, r9]
 801f5fc:	b289      	uxth	r1, r1
 801f5fe:	b29b      	uxth	r3, r3
 801f600:	ebae 0e01 	sub.w	lr, lr, r1
 801f604:	435e      	muls	r6, r3
 801f606:	fa1f fe8e 	uxth.w	lr, lr
 801f60a:	9310      	str	r3, [sp, #64]	; 0x40
 801f60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f60e:	fb0e 660b 	mla	r6, lr, fp, r6
 801f612:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f616:	fb01 660b 	mla	r6, r1, fp, r6
 801f61a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f61e:	fb08 660b 	mla	r6, r8, fp, r6
 801f622:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801f626:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f62a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f62e:	fb1b fb03 	smulbb	fp, fp, r3
 801f632:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f634:	fb06 b60a 	mla	r6, r6, sl, fp
 801f638:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f63c:	787d      	ldrb	r5, [r7, #1]
 801f63e:	783f      	ldrb	r7, [r7, #0]
 801f640:	b2b6      	uxth	r6, r6
 801f642:	435d      	muls	r5, r3
 801f644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f646:	fb0e 550b 	mla	r5, lr, fp, r5
 801f64a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f64e:	fb01 550b 	mla	r5, r1, fp, r5
 801f652:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f656:	fb08 550b 	mla	r5, r8, fp, r5
 801f65a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f65e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f662:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f666:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f66a:	fa5f fc8c 	uxtb.w	ip, ip
 801f66e:	fb1b fb03 	smulbb	fp, fp, r3
 801f672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f674:	437b      	muls	r3, r7
 801f676:	7817      	ldrb	r7, [r2, #0]
 801f678:	fb05 b50a 	mla	r5, r5, sl, fp
 801f67c:	fb0e 3309 	mla	r3, lr, r9, r3
 801f680:	b2ad      	uxth	r5, r5
 801f682:	fb01 3307 	mla	r3, r1, r7, r3
 801f686:	7807      	ldrb	r7, [r0, #0]
 801f688:	f105 0b01 	add.w	fp, r5, #1
 801f68c:	fb08 3707 	mla	r7, r8, r7, r3
 801f690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f692:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f696:	fb1c fc03 	smulbb	ip, ip, r3
 801f69a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f69e:	1c73      	adds	r3, r6, #1
 801f6a0:	096d      	lsrs	r5, r5, #5
 801f6a2:	fb07 c70a 	mla	r7, r7, sl, ip
 801f6a6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f6aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f6ae:	b2bf      	uxth	r7, r7
 801f6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6b2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f6b6:	1c7a      	adds	r2, r7, #1
 801f6b8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f6bc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f6c0:	4316      	orrs	r6, r2
 801f6c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f6c4:	432e      	orrs	r6, r5
 801f6c6:	f823 6b02 	strh.w	r6, [r3], #2
 801f6ca:	930c      	str	r3, [sp, #48]	; 0x30
 801f6cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f6ce:	4413      	add	r3, r2
 801f6d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f6d2:	931f      	str	r3, [sp, #124]	; 0x7c
 801f6d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f6d6:	4413      	add	r3, r2
 801f6d8:	9320      	str	r3, [sp, #128]	; 0x80
 801f6da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6dc:	3b01      	subs	r3, #1
 801f6de:	9311      	str	r3, [sp, #68]	; 0x44
 801f6e0:	e6db      	b.n	801f49a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801f6e2:	b149      	cbz	r1, 801f6f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801f6e4:	5cb2      	ldrb	r2, [r6, r2]
 801f6e6:	4628      	mov	r0, r5
 801f6e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6ec:	4422      	add	r2, r4
 801f6ee:	462f      	mov	r7, r5
 801f6f0:	e771      	b.n	801f5d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f6f2:	4628      	mov	r0, r5
 801f6f4:	462a      	mov	r2, r5
 801f6f6:	e76e      	b.n	801f5d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f6f8:	4628      	mov	r0, r5
 801f6fa:	462a      	mov	r2, r5
 801f6fc:	e7f7      	b.n	801f6ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f6fe:	b015      	add	sp, #84	; 0x54
 801f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f704 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801f704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f708:	880f      	ldrh	r7, [r1, #0]
 801f70a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f70e:	023c      	lsls	r4, r7, #8
 801f710:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f714:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801f718:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801f71c:	017c      	lsls	r4, r7, #5
 801f71e:	00ff      	lsls	r7, r7, #3
 801f720:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f724:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801f728:	b2ff      	uxtb	r7, r7
 801f72a:	ea4b 0404 	orr.w	r4, fp, r4
 801f72e:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801f732:	4327      	orrs	r7, r4
 801f734:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f738:	2d00      	cmp	r5, #0
 801f73a:	9701      	str	r7, [sp, #4]
 801f73c:	eb02 080a 	add.w	r8, r2, sl
 801f740:	db7e      	blt.n	801f840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f742:	45a9      	cmp	r9, r5
 801f744:	dd7c      	ble.n	801f840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f746:	f1bc 0f00 	cmp.w	ip, #0
 801f74a:	db77      	blt.n	801f83c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f74c:	45e6      	cmp	lr, ip
 801f74e:	dd75      	ble.n	801f83c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f750:	f812 700a 	ldrb.w	r7, [r2, sl]
 801f754:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f758:	441f      	add	r7, r3
 801f75a:	f11c 0201 	adds.w	r2, ip, #1
 801f75e:	d472      	bmi.n	801f846 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f760:	4596      	cmp	lr, r2
 801f762:	dd70      	ble.n	801f846 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f764:	2800      	cmp	r0, #0
 801f766:	d06e      	beq.n	801f846 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f768:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f76c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f770:	441c      	add	r4, r3
 801f772:	3501      	adds	r5, #1
 801f774:	d46b      	bmi.n	801f84e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f776:	45a9      	cmp	r9, r5
 801f778:	dd69      	ble.n	801f84e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f77a:	2e00      	cmp	r6, #0
 801f77c:	d067      	beq.n	801f84e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f77e:	f1bc 0f00 	cmp.w	ip, #0
 801f782:	db62      	blt.n	801f84a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f784:	45e6      	cmp	lr, ip
 801f786:	dd60      	ble.n	801f84a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f788:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f790:	441d      	add	r5, r3
 801f792:	f11c 0201 	adds.w	r2, ip, #1
 801f796:	d45d      	bmi.n	801f854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f798:	4596      	cmp	lr, r2
 801f79a:	dd5b      	ble.n	801f854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f79c:	2800      	cmp	r0, #0
 801f79e:	d059      	beq.n	801f854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f7a0:	44c6      	add	lr, r8
 801f7a2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f7a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7aa:	4413      	add	r3, r2
 801f7ac:	b280      	uxth	r0, r0
 801f7ae:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f7b2:	b2b2      	uxth	r2, r6
 801f7b4:	f897 9000 	ldrb.w	r9, [r7]
 801f7b8:	787f      	ldrb	r7, [r7, #1]
 801f7ba:	fb00 f602 	mul.w	r6, r0, r2
 801f7be:	0100      	lsls	r0, r0, #4
 801f7c0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f7c4:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801f7c8:	1b80      	subs	r0, r0, r6
 801f7ca:	fa1f fc82 	uxth.w	ip, r2
 801f7ce:	b282      	uxth	r2, r0
 801f7d0:	78a0      	ldrb	r0, [r4, #2]
 801f7d2:	eba8 080c 	sub.w	r8, r8, ip
 801f7d6:	4350      	muls	r0, r2
 801f7d8:	fa1f f888 	uxth.w	r8, r8
 801f7dc:	fb08 0e0e 	mla	lr, r8, lr, r0
 801f7e0:	78a8      	ldrb	r0, [r5, #2]
 801f7e2:	fb0c e000 	mla	r0, ip, r0, lr
 801f7e6:	f893 e002 	ldrb.w	lr, [r3, #2]
 801f7ea:	fb06 0e0e 	mla	lr, r6, lr, r0
 801f7ee:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801f7f2:	f894 e000 	ldrb.w	lr, [r4]
 801f7f6:	fb02 fe0e 	mul.w	lr, r2, lr
 801f7fa:	fb08 e909 	mla	r9, r8, r9, lr
 801f7fe:	f895 e000 	ldrb.w	lr, [r5]
 801f802:	fb0c 990e 	mla	r9, ip, lr, r9
 801f806:	f893 e000 	ldrb.w	lr, [r3]
 801f80a:	785b      	ldrb	r3, [r3, #1]
 801f80c:	fb06 9e0e 	mla	lr, r6, lr, r9
 801f810:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f814:	ea4e 0e00 	orr.w	lr, lr, r0
 801f818:	7860      	ldrb	r0, [r4, #1]
 801f81a:	4350      	muls	r0, r2
 801f81c:	786a      	ldrb	r2, [r5, #1]
 801f81e:	fb08 0007 	mla	r0, r8, r7, r0
 801f822:	fb0c 0202 	mla	r2, ip, r2, r0
 801f826:	fb06 2303 	mla	r3, r6, r3, r2
 801f82a:	095b      	lsrs	r3, r3, #5
 801f82c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f830:	ea4e 0303 	orr.w	r3, lr, r3
 801f834:	800b      	strh	r3, [r1, #0]
 801f836:	b003      	add	sp, #12
 801f838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f83c:	af01      	add	r7, sp, #4
 801f83e:	e78c      	b.n	801f75a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801f840:	ac01      	add	r4, sp, #4
 801f842:	4627      	mov	r7, r4
 801f844:	e795      	b.n	801f772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f846:	ac01      	add	r4, sp, #4
 801f848:	e793      	b.n	801f772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f84a:	ad01      	add	r5, sp, #4
 801f84c:	e7a1      	b.n	801f792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801f84e:	ab01      	add	r3, sp, #4
 801f850:	461d      	mov	r5, r3
 801f852:	e7ab      	b.n	801f7ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801f854:	ab01      	add	r3, sp, #4
 801f856:	e7a9      	b.n	801f7ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801f858 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f85c:	b08f      	sub	sp, #60	; 0x3c
 801f85e:	920c      	str	r2, [sp, #48]	; 0x30
 801f860:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f862:	900d      	str	r0, [sp, #52]	; 0x34
 801f864:	910a      	str	r1, [sp, #40]	; 0x28
 801f866:	6850      	ldr	r0, [r2, #4]
 801f868:	9306      	str	r3, [sp, #24]
 801f86a:	6812      	ldr	r2, [r2, #0]
 801f86c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801f870:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801f874:	fb00 1303 	mla	r3, r0, r3, r1
 801f878:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f87c:	9307      	str	r3, [sp, #28]
 801f87e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	9308      	str	r3, [sp, #32]
 801f884:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f886:	685c      	ldr	r4, [r3, #4]
 801f888:	3404      	adds	r4, #4
 801f88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	dc03      	bgt.n	801f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f892:	2b00      	cmp	r3, #0
 801f894:	f340 81d5 	ble.w	801fc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f89a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f89e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f8a2:	1e48      	subs	r0, r1, #1
 801f8a4:	1e56      	subs	r6, r2, #1
 801f8a6:	9b06      	ldr	r3, [sp, #24]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	f340 80b6 	ble.w	801fa1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f8ae:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f8b2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f8b6:	d406      	bmi.n	801f8c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f8b8:	4287      	cmp	r7, r0
 801f8ba:	da04      	bge.n	801f8c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	db02      	blt.n	801f8c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f8c0:	42b3      	cmp	r3, r6
 801f8c2:	f2c0 80ab 	blt.w	801fa1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f8c6:	3701      	adds	r7, #1
 801f8c8:	f100 809c 	bmi.w	801fa04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f8cc:	42b9      	cmp	r1, r7
 801f8ce:	f2c0 8099 	blt.w	801fa04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f8d2:	3301      	adds	r3, #1
 801f8d4:	f100 8096 	bmi.w	801fa04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f8d8:	429a      	cmp	r2, r3
 801f8da:	f2c0 8093 	blt.w	801fa04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f8de:	9b06      	ldr	r3, [sp, #24]
 801f8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8e2:	9b07      	ldr	r3, [sp, #28]
 801f8e4:	9309      	str	r3, [sp, #36]	; 0x24
 801f8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	f340 80b4 	ble.w	801fa56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f8ee:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f8f0:	142e      	asrs	r6, r5, #16
 801f8f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f8f4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f8f8:	68c7      	ldr	r7, [r0, #12]
 801f8fa:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f8fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f902:	6892      	ldr	r2, [r2, #8]
 801f904:	f100 80fb 	bmi.w	801fafe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f908:	f102 3cff 	add.w	ip, r2, #4294967295
 801f90c:	4560      	cmp	r0, ip
 801f90e:	f280 80f6 	bge.w	801fafe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f912:	2e00      	cmp	r6, #0
 801f914:	f2c0 80f3 	blt.w	801fafe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f918:	f107 3cff 	add.w	ip, r7, #4294967295
 801f91c:	4566      	cmp	r6, ip
 801f91e:	f280 80ee 	bge.w	801fafe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f922:	b212      	sxth	r2, r2
 801f924:	fb06 0002 	mla	r0, r6, r2, r0
 801f928:	9e08      	ldr	r6, [sp, #32]
 801f92a:	1837      	adds	r7, r6, r0
 801f92c:	5c30      	ldrb	r0, [r6, r0]
 801f92e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f932:	eb04 0c08 	add.w	ip, r4, r8
 801f936:	2b00      	cmp	r3, #0
 801f938:	f000 80d3 	beq.w	801fae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f93c:	787e      	ldrb	r6, [r7, #1]
 801f93e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f942:	4426      	add	r6, r4
 801f944:	2900      	cmp	r1, #0
 801f946:	f000 80d4 	beq.w	801faf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f94a:	18b8      	adds	r0, r7, r2
 801f94c:	5cba      	ldrb	r2, [r7, r2]
 801f94e:	7840      	ldrb	r0, [r0, #1]
 801f950:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f954:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f958:	4422      	add	r2, r4
 801f95a:	4420      	add	r0, r4
 801f95c:	b29b      	uxth	r3, r3
 801f95e:	78b7      	ldrb	r7, [r6, #2]
 801f960:	b289      	uxth	r1, r1
 801f962:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f966:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f96a:	fb03 f901 	mul.w	r9, r3, r1
 801f96e:	011b      	lsls	r3, r3, #4
 801f970:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f974:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f978:	eba3 0309 	sub.w	r3, r3, r9
 801f97c:	b289      	uxth	r1, r1
 801f97e:	b29b      	uxth	r3, r3
 801f980:	ebae 0e01 	sub.w	lr, lr, r1
 801f984:	435f      	muls	r7, r3
 801f986:	fa1f fe8e 	uxth.w	lr, lr
 801f98a:	fb0e 770a 	mla	r7, lr, sl, r7
 801f98e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f992:	fb01 770a 	mla	r7, r1, sl, r7
 801f996:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f99a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f99e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f9a2:	f896 8000 	ldrb.w	r8, [r6]
 801f9a6:	7876      	ldrb	r6, [r6, #1]
 801f9a8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f9ac:	fb03 f808 	mul.w	r8, r3, r8
 801f9b0:	4373      	muls	r3, r6
 801f9b2:	fb0e 8807 	mla	r8, lr, r7, r8
 801f9b6:	7817      	ldrb	r7, [r2, #0]
 801f9b8:	fb0e 330c 	mla	r3, lr, ip, r3
 801f9bc:	fb01 8807 	mla	r8, r1, r7, r8
 801f9c0:	7807      	ldrb	r7, [r0, #0]
 801f9c2:	fb09 8707 	mla	r7, r9, r7, r8
 801f9c6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f9ca:	ea47 070a 	orr.w	r7, r7, sl
 801f9ce:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f9d2:	fb01 310a 	mla	r1, r1, sl, r3
 801f9d6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9dc:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f9e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f9e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f9e8:	ea47 070a 	orr.w	r7, r7, sl
 801f9ec:	801f      	strh	r7, [r3, #0]
 801f9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9f0:	3302      	adds	r3, #2
 801f9f2:	9309      	str	r3, [sp, #36]	; 0x24
 801f9f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f9f6:	449b      	add	fp, r3
 801f9f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f9fa:	441d      	add	r5, r3
 801f9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9fe:	3b01      	subs	r3, #1
 801fa00:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa02:	e770      	b.n	801f8e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fa04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fa06:	449b      	add	fp, r3
 801fa08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fa0a:	441d      	add	r5, r3
 801fa0c:	9b06      	ldr	r3, [sp, #24]
 801fa0e:	3b01      	subs	r3, #1
 801fa10:	9306      	str	r3, [sp, #24]
 801fa12:	9b07      	ldr	r3, [sp, #28]
 801fa14:	3302      	adds	r3, #2
 801fa16:	9307      	str	r3, [sp, #28]
 801fa18:	e745      	b.n	801f8a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fa1a:	d023      	beq.n	801fa64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fa1c:	9b06      	ldr	r3, [sp, #24]
 801fa1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fa20:	3b01      	subs	r3, #1
 801fa22:	fb00 b003 	mla	r0, r0, r3, fp
 801fa26:	1400      	asrs	r0, r0, #16
 801fa28:	f53f af59 	bmi.w	801f8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa2c:	3901      	subs	r1, #1
 801fa2e:	4288      	cmp	r0, r1
 801fa30:	f6bf af55 	bge.w	801f8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa34:	991c      	ldr	r1, [sp, #112]	; 0x70
 801fa36:	fb01 5303 	mla	r3, r1, r3, r5
 801fa3a:	141b      	asrs	r3, r3, #16
 801fa3c:	f53f af4f 	bmi.w	801f8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa40:	3a01      	subs	r2, #1
 801fa42:	4293      	cmp	r3, r2
 801fa44:	f6bf af4b 	bge.w	801f8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa48:	9b06      	ldr	r3, [sp, #24]
 801fa4a:	9309      	str	r3, [sp, #36]	; 0x24
 801fa4c:	9b07      	ldr	r3, [sp, #28]
 801fa4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	dc70      	bgt.n	801fb38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fa56:	9b06      	ldr	r3, [sp, #24]
 801fa58:	9a07      	ldr	r2, [sp, #28]
 801fa5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fa62:	9307      	str	r3, [sp, #28]
 801fa64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	f340 80eb 	ble.w	801fc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fa6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fa70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fa72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa7a:	eef0 6a62 	vmov.f32	s13, s5
 801fa7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fa82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa8a:	ee16 ba90 	vmov	fp, s13
 801fa8e:	eef0 6a43 	vmov.f32	s13, s6
 801fa92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa96:	ee16 5a90 	vmov	r5, s13
 801fa9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801faa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801faa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801faaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801faae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fab2:	ee12 2a90 	vmov	r2, s5
 801fab6:	eef0 2a47 	vmov.f32	s5, s14
 801faba:	fb92 f3f3 	sdiv	r3, r2, r3
 801fabe:	ee13 2a10 	vmov	r2, s6
 801fac2:	931b      	str	r3, [sp, #108]	; 0x6c
 801fac4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fac6:	eeb0 3a67 	vmov.f32	s6, s15
 801faca:	fb92 f3f3 	sdiv	r3, r2, r3
 801face:	931c      	str	r3, [sp, #112]	; 0x70
 801fad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fad4:	3b01      	subs	r3, #1
 801fad6:	930a      	str	r3, [sp, #40]	; 0x28
 801fad8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fada:	bf08      	it	eq
 801fadc:	4613      	moveq	r3, r2
 801fade:	9306      	str	r3, [sp, #24]
 801fae0:	e6d3      	b.n	801f88a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fae2:	b149      	cbz	r1, 801faf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801fae4:	5cba      	ldrb	r2, [r7, r2]
 801fae6:	4660      	mov	r0, ip
 801fae8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801faec:	4422      	add	r2, r4
 801faee:	4666      	mov	r6, ip
 801faf0:	e734      	b.n	801f95c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801faf2:	4660      	mov	r0, ip
 801faf4:	4662      	mov	r2, ip
 801faf6:	e731      	b.n	801f95c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801faf8:	4660      	mov	r0, ip
 801fafa:	4662      	mov	r2, ip
 801fafc:	e7f7      	b.n	801faee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fafe:	f110 0c01 	adds.w	ip, r0, #1
 801fb02:	f53f af74 	bmi.w	801f9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fb06:	4562      	cmp	r2, ip
 801fb08:	f6ff af71 	blt.w	801f9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fb0c:	f116 0c01 	adds.w	ip, r6, #1
 801fb10:	f53f af6d 	bmi.w	801f9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fb14:	4567      	cmp	r7, ip
 801fb16:	f6ff af6a 	blt.w	801f9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fb1a:	b23f      	sxth	r7, r7
 801fb1c:	b212      	sxth	r2, r2
 801fb1e:	9701      	str	r7, [sp, #4]
 801fb20:	9200      	str	r2, [sp, #0]
 801fb22:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fb26:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801fb2a:	4623      	mov	r3, r4
 801fb2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fb2e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801fb32:	f7ff fde7 	bl	801f704 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801fb36:	e75a      	b.n	801f9ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fb38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fb3a:	ea4f 462b 	mov.w	r6, fp, asr #16
 801fb3e:	1428      	asrs	r0, r5, #16
 801fb40:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fb44:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fb48:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fb4c:	fb02 6000 	mla	r0, r2, r0, r6
 801fb50:	9e08      	ldr	r6, [sp, #32]
 801fb52:	f816 8000 	ldrb.w	r8, [r6, r0]
 801fb56:	1837      	adds	r7, r6, r0
 801fb58:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fb5c:	eb04 0c08 	add.w	ip, r4, r8
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d060      	beq.n	801fc26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801fb64:	787e      	ldrb	r6, [r7, #1]
 801fb66:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fb6a:	4426      	add	r6, r4
 801fb6c:	2900      	cmp	r1, #0
 801fb6e:	d062      	beq.n	801fc36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801fb70:	18b8      	adds	r0, r7, r2
 801fb72:	5cba      	ldrb	r2, [r7, r2]
 801fb74:	7840      	ldrb	r0, [r0, #1]
 801fb76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb7e:	4422      	add	r2, r4
 801fb80:	4420      	add	r0, r4
 801fb82:	b29b      	uxth	r3, r3
 801fb84:	78b7      	ldrb	r7, [r6, #2]
 801fb86:	b289      	uxth	r1, r1
 801fb88:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fb8c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fb90:	fb03 f901 	mul.w	r9, r3, r1
 801fb94:	011b      	lsls	r3, r3, #4
 801fb96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fb9a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fb9e:	eba3 0309 	sub.w	r3, r3, r9
 801fba2:	b289      	uxth	r1, r1
 801fba4:	b29b      	uxth	r3, r3
 801fba6:	ebae 0e01 	sub.w	lr, lr, r1
 801fbaa:	435f      	muls	r7, r3
 801fbac:	fa1f fe8e 	uxth.w	lr, lr
 801fbb0:	fb0e 770a 	mla	r7, lr, sl, r7
 801fbb4:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fbb8:	fb01 770a 	mla	r7, r1, sl, r7
 801fbbc:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fbc0:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fbc4:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fbc8:	f896 8000 	ldrb.w	r8, [r6]
 801fbcc:	7876      	ldrb	r6, [r6, #1]
 801fbce:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801fbd2:	fb03 f808 	mul.w	r8, r3, r8
 801fbd6:	4373      	muls	r3, r6
 801fbd8:	7856      	ldrb	r6, [r2, #1]
 801fbda:	fb0e 8807 	mla	r8, lr, r7, r8
 801fbde:	7817      	ldrb	r7, [r2, #0]
 801fbe0:	fb0e 330c 	mla	r3, lr, ip, r3
 801fbe4:	fb01 8807 	mla	r8, r1, r7, r8
 801fbe8:	7807      	ldrb	r7, [r0, #0]
 801fbea:	fb01 3306 	mla	r3, r1, r6, r3
 801fbee:	fb09 8707 	mla	r7, r9, r7, r8
 801fbf2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fbf6:	ea47 070a 	orr.w	r7, r7, sl
 801fbfa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fbfe:	fb09 3a0a 	mla	sl, r9, sl, r3
 801fc02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fc08:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fc0c:	ea47 070a 	orr.w	r7, r7, sl
 801fc10:	f823 7b02 	strh.w	r7, [r3], #2
 801fc14:	930b      	str	r3, [sp, #44]	; 0x2c
 801fc16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fc18:	449b      	add	fp, r3
 801fc1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fc1c:	441d      	add	r5, r3
 801fc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc20:	3b01      	subs	r3, #1
 801fc22:	9309      	str	r3, [sp, #36]	; 0x24
 801fc24:	e714      	b.n	801fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fc26:	b149      	cbz	r1, 801fc3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801fc28:	5cba      	ldrb	r2, [r7, r2]
 801fc2a:	4660      	mov	r0, ip
 801fc2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc30:	4422      	add	r2, r4
 801fc32:	4666      	mov	r6, ip
 801fc34:	e7a5      	b.n	801fb82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801fc36:	4660      	mov	r0, ip
 801fc38:	4662      	mov	r2, ip
 801fc3a:	e7a2      	b.n	801fb82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801fc3c:	4660      	mov	r0, ip
 801fc3e:	4662      	mov	r2, ip
 801fc40:	e7f7      	b.n	801fc32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801fc42:	b00f      	add	sp, #60	; 0x3c
 801fc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc4c:	b085      	sub	sp, #20
 801fc4e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801fc52:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fc56:	9102      	str	r1, [sp, #8]
 801fc58:	2c00      	cmp	r4, #0
 801fc5a:	fb04 710c 	mla	r1, r4, ip, r7
 801fc5e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fc62:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801fc66:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801fc6a:	eb02 0e01 	add.w	lr, r2, r1
 801fc6e:	f2c0 8122 	blt.w	801feb6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fc72:	45a0      	cmp	r8, r4
 801fc74:	f340 811f 	ble.w	801feb6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801fc78:	2f00      	cmp	r7, #0
 801fc7a:	f2c0 811a 	blt.w	801feb2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fc7e:	45bc      	cmp	ip, r7
 801fc80:	f340 8117 	ble.w	801feb2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801fc84:	5c52      	ldrb	r2, [r2, r1]
 801fc86:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fc8a:	1c7a      	adds	r2, r7, #1
 801fc8c:	f100 8116 	bmi.w	801febc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fc90:	4594      	cmp	ip, r2
 801fc92:	f340 8113 	ble.w	801febc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801fc96:	2e00      	cmp	r6, #0
 801fc98:	f000 8112 	beq.w	801fec0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801fc9c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fca4:	3401      	adds	r4, #1
 801fca6:	f100 810f 	bmi.w	801fec8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fcaa:	45a0      	cmp	r8, r4
 801fcac:	f340 810c 	ble.w	801fec8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801fcb0:	2800      	cmp	r0, #0
 801fcb2:	f000 810c 	beq.w	801fece <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801fcb6:	2f00      	cmp	r7, #0
 801fcb8:	f2c0 8104 	blt.w	801fec4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fcbc:	45bc      	cmp	ip, r7
 801fcbe:	f340 8101 	ble.w	801fec4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801fcc2:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801fcc6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fcca:	3701      	adds	r7, #1
 801fccc:	f100 8102 	bmi.w	801fed4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fcd0:	45bc      	cmp	ip, r7
 801fcd2:	f340 80ff 	ble.w	801fed4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801fcd6:	2e00      	cmp	r6, #0
 801fcd8:	f000 80fe 	beq.w	801fed8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801fcdc:	44f4      	add	ip, lr
 801fcde:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fce6:	b2b6      	uxth	r6, r6
 801fce8:	b280      	uxth	r0, r0
 801fcea:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fcee:	fb00 fe06 	mul.w	lr, r0, r6
 801fcf2:	0136      	lsls	r6, r6, #4
 801fcf4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801fcf8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801fcfc:	eba6 070e 	sub.w	r7, r6, lr
 801fd00:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801fd04:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fd08:	b280      	uxth	r0, r0
 801fd0a:	b2bf      	uxth	r7, r7
 801fd0c:	1a1b      	subs	r3, r3, r0
 801fd0e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fd12:	fb0a f607 	mul.w	r6, sl, r7
 801fd16:	b29b      	uxth	r3, r3
 801fd18:	fb0b 6603 	mla	r6, fp, r3, r6
 801fd1c:	fb00 6609 	mla	r6, r0, r9, r6
 801fd20:	fb0e 6608 	mla	r6, lr, r8, r6
 801fd24:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fd28:	9600      	str	r6, [sp, #0]
 801fd2a:	2e00      	cmp	r6, #0
 801fd2c:	f000 80be 	beq.w	801feac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801fd30:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fd34:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fd38:	9e02      	ldr	r6, [sp, #8]
 801fd3a:	fb0b fc0c 	mul.w	ip, fp, ip
 801fd3e:	fb0b f505 	mul.w	r5, fp, r5
 801fd42:	8836      	ldrh	r6, [r6, #0]
 801fd44:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fd48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd4c:	9501      	str	r5, [sp, #4]
 801fd4e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fd52:	44dc      	add	ip, fp
 801fd54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd58:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801fd5c:	9503      	str	r5, [sp, #12]
 801fd5e:	9d01      	ldr	r5, [sp, #4]
 801fd60:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801fd64:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fd68:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801fd6c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fd70:	fb0a fc0c 	mul.w	ip, sl, ip
 801fd74:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801fd78:	fb0a fa01 	mul.w	sl, sl, r1
 801fd7c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801fd80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd84:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801fd88:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fd8c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801fd90:	4465      	add	r5, ip
 801fd92:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fd96:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fd9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd9e:	fb09 fc0c 	mul.w	ip, r9, ip
 801fda2:	0a2d      	lsrs	r5, r5, #8
 801fda4:	fb09 f904 	mul.w	r9, r9, r4
 801fda8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fdac:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801fdb0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fdb4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fdb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fdbc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fdc0:	437d      	muls	r5, r7
 801fdc2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fdc6:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801fdca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fdce:	4461      	add	r1, ip
 801fdd0:	fb08 f404 	mul.w	r4, r8, r4
 801fdd4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fdd8:	fb08 f802 	mul.w	r8, r8, r2
 801fddc:	0a09      	lsrs	r1, r1, #8
 801fdde:	0a22      	lsrs	r2, r4, #8
 801fde0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801fde4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801fde8:	fb07 f70a 	mul.w	r7, r7, sl
 801fdec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fdf0:	4414      	add	r4, r2
 801fdf2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801fdf6:	0a24      	lsrs	r4, r4, #8
 801fdf8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fdfc:	9a03      	ldr	r2, [sp, #12]
 801fdfe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fe02:	fb02 5503 	mla	r5, r2, r3, r5
 801fe06:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fe0a:	9a00      	ldr	r2, [sp, #0]
 801fe0c:	fb04 540e 	mla	r4, r4, lr, r5
 801fe10:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fe14:	1235      	asrs	r5, r6, #8
 801fe16:	fb01 4100 	mla	r1, r1, r0, r4
 801fe1a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fe1e:	0a09      	lsrs	r1, r1, #8
 801fe20:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801fe24:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801fe28:	fb03 7101 	mla	r1, r3, r1, r7
 801fe2c:	fb0e 1e08 	mla	lr, lr, r8, r1
 801fe30:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801fe34:	fb00 e101 	mla	r1, r0, r1, lr
 801fe38:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801fe3c:	b287      	uxth	r7, r0
 801fe3e:	0a09      	lsrs	r1, r1, #8
 801fe40:	437a      	muls	r2, r7
 801fe42:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fe46:	1c53      	adds	r3, r2, #1
 801fe48:	4321      	orrs	r1, r4
 801fe4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fe4e:	0c0a      	lsrs	r2, r1, #16
 801fe50:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801fe54:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fe58:	b2c8      	uxtb	r0, r1
 801fe5a:	fb12 f207 	smulbb	r2, r2, r7
 801fe5e:	fb14 f407 	smulbb	r4, r4, r7
 801fe62:	b2db      	uxtb	r3, r3
 801fe64:	fb10 f007 	smulbb	r0, r0, r7
 801fe68:	fb05 2503 	mla	r5, r5, r3, r2
 801fe6c:	10f2      	asrs	r2, r6, #3
 801fe6e:	00f6      	lsls	r6, r6, #3
 801fe70:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fe74:	b2ad      	uxth	r5, r5
 801fe76:	b2f6      	uxtb	r6, r6
 801fe78:	fb02 4203 	mla	r2, r2, r3, r4
 801fe7c:	fb06 0303 	mla	r3, r6, r3, r0
 801fe80:	b294      	uxth	r4, r2
 801fe82:	b299      	uxth	r1, r3
 801fe84:	1c6b      	adds	r3, r5, #1
 801fe86:	1c62      	adds	r2, r4, #1
 801fe88:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fe8c:	1c4b      	adds	r3, r1, #1
 801fe8e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fe92:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fe96:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fe9a:	0952      	lsrs	r2, r2, #5
 801fe9c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fea0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fea4:	432b      	orrs	r3, r5
 801fea6:	4313      	orrs	r3, r2
 801fea8:	9a02      	ldr	r2, [sp, #8]
 801feaa:	8013      	strh	r3, [r2, #0]
 801feac:	b005      	add	sp, #20
 801feae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feb2:	2500      	movs	r5, #0
 801feb4:	e6e9      	b.n	801fc8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801feb6:	2100      	movs	r1, #0
 801feb8:	460d      	mov	r5, r1
 801feba:	e6f3      	b.n	801fca4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801febc:	2100      	movs	r1, #0
 801febe:	e6f1      	b.n	801fca4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fec0:	4631      	mov	r1, r6
 801fec2:	e6ef      	b.n	801fca4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fec4:	2400      	movs	r4, #0
 801fec6:	e700      	b.n	801fcca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801fec8:	2200      	movs	r2, #0
 801feca:	4614      	mov	r4, r2
 801fecc:	e70b      	b.n	801fce6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fece:	4602      	mov	r2, r0
 801fed0:	4604      	mov	r4, r0
 801fed2:	e708      	b.n	801fce6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fed4:	2200      	movs	r2, #0
 801fed6:	e706      	b.n	801fce6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fed8:	4632      	mov	r2, r6
 801feda:	e704      	b.n	801fce6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801fedc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fee0:	b09f      	sub	sp, #124	; 0x7c
 801fee2:	921b      	str	r2, [sp, #108]	; 0x6c
 801fee4:	9309      	str	r3, [sp, #36]	; 0x24
 801fee6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fee8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801feec:	901d      	str	r0, [sp, #116]	; 0x74
 801feee:	931c      	str	r3, [sp, #112]	; 0x70
 801fef0:	6850      	ldr	r0, [r2, #4]
 801fef2:	9119      	str	r1, [sp, #100]	; 0x64
 801fef4:	6812      	ldr	r2, [r2, #0]
 801fef6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801fef8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fefc:	fb00 1303 	mla	r3, r0, r3, r1
 801ff00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ff04:	930c      	str	r3, [sp, #48]	; 0x30
 801ff06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	9312      	str	r3, [sp, #72]	; 0x48
 801ff0c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ff0e:	685e      	ldr	r6, [r3, #4]
 801ff10:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801ff14:	3604      	adds	r6, #4
 801ff16:	930d      	str	r3, [sp, #52]	; 0x34
 801ff18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	dc03      	bgt.n	801ff26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ff1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ff20:	2b00      	cmp	r3, #0
 801ff22:	f340 8387 	ble.w	8020634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801ff26:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ff28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff2c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ff30:	1e48      	subs	r0, r1, #1
 801ff32:	1e57      	subs	r7, r2, #1
 801ff34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	f340 8194 	ble.w	8020264 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801ff3c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ff3e:	142b      	asrs	r3, r5, #16
 801ff40:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ff44:	d406      	bmi.n	801ff54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff46:	4584      	cmp	ip, r0
 801ff48:	da04      	bge.n	801ff54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	db02      	blt.n	801ff54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff4e:	42bb      	cmp	r3, r7
 801ff50:	f2c0 8189 	blt.w	8020266 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ff54:	f11c 0c01 	adds.w	ip, ip, #1
 801ff58:	f100 8177 	bmi.w	802024a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ff5c:	4561      	cmp	r1, ip
 801ff5e:	f2c0 8174 	blt.w	802024a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ff62:	3301      	adds	r3, #1
 801ff64:	f100 8171 	bmi.w	802024a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ff68:	429a      	cmp	r2, r3
 801ff6a:	f2c0 816e 	blt.w	802024a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ff6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ff72:	931a      	str	r3, [sp, #104]	; 0x68
 801ff74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	f340 8193 	ble.w	80202a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ff7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ff7e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ff82:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ff86:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ff8a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ff8c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801ff90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ff92:	141b      	asrs	r3, r3, #16
 801ff94:	f100 81d6 	bmi.w	8020344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801ff98:	f100 38ff 	add.w	r8, r0, #4294967295
 801ff9c:	4543      	cmp	r3, r8
 801ff9e:	f280 81d1 	bge.w	8020344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801ffa2:	f1bc 0f00 	cmp.w	ip, #0
 801ffa6:	f2c0 81cd 	blt.w	8020344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801ffaa:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ffae:	45c4      	cmp	ip, r8
 801ffb0:	f280 81c8 	bge.w	8020344 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801ffb4:	b200      	sxth	r0, r0
 801ffb6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ffb8:	fb0c 3300 	mla	r3, ip, r0, r3
 801ffbc:	eb04 0803 	add.w	r8, r4, r3
 801ffc0:	5ce3      	ldrb	r3, [r4, r3]
 801ffc2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ffc6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ffca:	2a00      	cmp	r2, #0
 801ffcc:	f000 81af 	beq.w	802032e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ffd0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ffd4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ffd8:	940e      	str	r4, [sp, #56]	; 0x38
 801ffda:	0e24      	lsrs	r4, r4, #24
 801ffdc:	9415      	str	r4, [sp, #84]	; 0x54
 801ffde:	b179      	cbz	r1, 8020000 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801ffe0:	eb08 0c00 	add.w	ip, r8, r0
 801ffe4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ffe8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ffec:	900a      	str	r0, [sp, #40]	; 0x28
 801ffee:	0e00      	lsrs	r0, r0, #24
 801fff0:	9013      	str	r0, [sp, #76]	; 0x4c
 801fff2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fff6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fffa:	900f      	str	r0, [sp, #60]	; 0x3c
 801fffc:	0e00      	lsrs	r0, r0, #24
 801fffe:	9016      	str	r0, [sp, #88]	; 0x58
 8020000:	b292      	uxth	r2, r2
 8020002:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020004:	b289      	uxth	r1, r1
 8020006:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020008:	fb02 f901 	mul.w	r9, r2, r1
 802000c:	0112      	lsls	r2, r2, #4
 802000e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020012:	eba2 0809 	sub.w	r8, r2, r9
 8020016:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802001a:	b289      	uxth	r1, r1
 802001c:	fa1f f888 	uxth.w	r8, r8
 8020020:	1a52      	subs	r2, r2, r1
 8020022:	fb08 f000 	mul.w	r0, r8, r0
 8020026:	b292      	uxth	r2, r2
 8020028:	fb02 000e 	mla	r0, r2, lr, r0
 802002c:	fb01 0004 	mla	r0, r1, r4, r0
 8020030:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020032:	fb09 0004 	mla	r0, r9, r4, r0
 8020036:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802003a:	2800      	cmp	r0, #0
 802003c:	f000 80fa 	beq.w	8020234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020040:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020044:	d01b      	beq.n	802007e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020046:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802004a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802004e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020052:	fb0e fe03 	mul.w	lr, lr, r3
 8020056:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802005a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802005e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020062:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020066:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802006a:	4453      	add	r3, sl
 802006c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020070:	0a1b      	lsrs	r3, r3, #8
 8020072:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020076:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802007a:	ea43 030c 	orr.w	r3, r3, ip
 802007e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020080:	2cff      	cmp	r4, #255	; 0xff
 8020082:	d021      	beq.n	80200c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8020084:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020086:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802008a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802008c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020090:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020092:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020096:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020098:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802009c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80200a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80200a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80200ac:	44de      	add	lr, fp
 80200ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80200c2:	ea4e 040a 	orr.w	r4, lr, sl
 80200c6:	940e      	str	r4, [sp, #56]	; 0x38
 80200c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200ca:	2cff      	cmp	r4, #255	; 0xff
 80200cc:	d021      	beq.n	8020112 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80200ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80200d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80200d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80200da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80200dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80200e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80200e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80200ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80200ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80200f6:	44de      	add	lr, fp
 80200f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020100:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020104:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020108:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802010c:	ea4e 040a 	orr.w	r4, lr, sl
 8020110:	940a      	str	r4, [sp, #40]	; 0x28
 8020112:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020114:	2cff      	cmp	r4, #255	; 0xff
 8020116:	d021      	beq.n	802015c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8020118:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802011a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802011e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020120:	fb04 fb0b 	mul.w	fp, r4, fp
 8020124:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020126:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802012a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802012c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020130:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020134:	fb04 fa0a 	mul.w	sl, r4, sl
 8020138:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802013c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020140:	44de      	add	lr, fp
 8020142:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020146:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802014a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802014e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020152:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020156:	ea4e 040a 	orr.w	r4, lr, sl
 802015a:	940f      	str	r4, [sp, #60]	; 0x3c
 802015c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802015e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020166:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802016a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802016c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020170:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020174:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020178:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802017a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802017e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020182:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020184:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020188:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802018c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802018e:	fb08 f80e 	mul.w	r8, r8, lr
 8020192:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020196:	fb02 8303 	mla	r3, r2, r3, r8
 802019a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802019c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201a0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80201a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80201a6:	fb01 330a 	mla	r3, r1, sl, r3
 80201aa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80201ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80201b0:	fb09 3901 	mla	r9, r9, r1, r3
 80201b4:	883b      	ldrh	r3, [r7, #0]
 80201b6:	4342      	muls	r2, r0
 80201b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80201bc:	1c50      	adds	r0, r2, #1
 80201be:	1219      	asrs	r1, r3, #8
 80201c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80201c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80201c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80201cc:	ea4c 0c09 	orr.w	ip, ip, r9
 80201d0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80201d4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80201d8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80201dc:	b2c0      	uxtb	r0, r0
 80201de:	fb12 f204 	smulbb	r2, r2, r4
 80201e2:	fa5f fc8c 	uxtb.w	ip, ip
 80201e6:	fb1e fe04 	smulbb	lr, lr, r4
 80201ea:	fb01 2100 	mla	r1, r1, r0, r2
 80201ee:	10da      	asrs	r2, r3, #3
 80201f0:	fb1c fc04 	smulbb	ip, ip, r4
 80201f4:	00db      	lsls	r3, r3, #3
 80201f6:	b289      	uxth	r1, r1
 80201f8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80201fc:	b2db      	uxtb	r3, r3
 80201fe:	fb02 e200 	mla	r2, r2, r0, lr
 8020202:	fb03 c300 	mla	r3, r3, r0, ip
 8020206:	b292      	uxth	r2, r2
 8020208:	fa1f fc83 	uxth.w	ip, r3
 802020c:	1c4b      	adds	r3, r1, #1
 802020e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020212:	f10c 0301 	add.w	r3, ip, #1
 8020216:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802021a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802021e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020222:	430b      	orrs	r3, r1
 8020224:	1c51      	adds	r1, r2, #1
 8020226:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802022a:	0952      	lsrs	r2, r2, #5
 802022c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020230:	4313      	orrs	r3, r2
 8020232:	803b      	strh	r3, [r7, #0]
 8020234:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020236:	3702      	adds	r7, #2
 8020238:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802023a:	441a      	add	r2, r3
 802023c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802023e:	441d      	add	r5, r3
 8020240:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020242:	9229      	str	r2, [sp, #164]	; 0xa4
 8020244:	3b01      	subs	r3, #1
 8020246:	931a      	str	r3, [sp, #104]	; 0x68
 8020248:	e694      	b.n	801ff74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802024a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802024c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802024e:	441c      	add	r4, r3
 8020250:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020252:	441d      	add	r5, r3
 8020254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020256:	9429      	str	r4, [sp, #164]	; 0xa4
 8020258:	3b01      	subs	r3, #1
 802025a:	9309      	str	r3, [sp, #36]	; 0x24
 802025c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802025e:	3302      	adds	r3, #2
 8020260:	930c      	str	r3, [sp, #48]	; 0x30
 8020262:	e667      	b.n	801ff34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020264:	d024      	beq.n	80202b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020268:	982b      	ldr	r0, [sp, #172]	; 0xac
 802026a:	3b01      	subs	r3, #1
 802026c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802026e:	fb00 4003 	mla	r0, r0, r3, r4
 8020272:	1400      	asrs	r0, r0, #16
 8020274:	f53f ae7b 	bmi.w	801ff6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020278:	3901      	subs	r1, #1
 802027a:	4288      	cmp	r0, r1
 802027c:	f6bf ae77 	bge.w	801ff6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020280:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020282:	fb01 5303 	mla	r3, r1, r3, r5
 8020286:	141b      	asrs	r3, r3, #16
 8020288:	f53f ae71 	bmi.w	801ff6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802028c:	3a01      	subs	r2, #1
 802028e:	4293      	cmp	r3, r2
 8020290:	f6bf ae6d 	bge.w	801ff6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020294:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020298:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802029c:	f1bb 0f00 	cmp.w	fp, #0
 80202a0:	dc70      	bgt.n	8020384 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80202a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80202aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80202ae:	930c      	str	r3, [sp, #48]	; 0x30
 80202b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	f340 81be 	ble.w	8020634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80202b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80202bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80202be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80202c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80202c6:	eef0 6a62 	vmov.f32	s13, s5
 80202ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80202ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202d6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80202da:	eef0 6a43 	vmov.f32	s13, s6
 80202de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202e2:	ee16 5a90 	vmov	r5, s13
 80202e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202fe:	ee12 2a90 	vmov	r2, s5
 8020302:	eef0 2a47 	vmov.f32	s5, s14
 8020306:	fb92 f3f3 	sdiv	r3, r2, r3
 802030a:	ee13 2a10 	vmov	r2, s6
 802030e:	932b      	str	r3, [sp, #172]	; 0xac
 8020310:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020312:	eeb0 3a67 	vmov.f32	s6, s15
 8020316:	fb92 f3f3 	sdiv	r3, r2, r3
 802031a:	932c      	str	r3, [sp, #176]	; 0xb0
 802031c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802031e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020320:	3b01      	subs	r3, #1
 8020322:	9319      	str	r3, [sp, #100]	; 0x64
 8020324:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020326:	bf08      	it	eq
 8020328:	4613      	moveq	r3, r2
 802032a:	9309      	str	r3, [sp, #36]	; 0x24
 802032c:	e5f4      	b.n	801ff18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802032e:	2900      	cmp	r1, #0
 8020330:	f43f ae66 	beq.w	8020000 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020334:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020338:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802033c:	900a      	str	r0, [sp, #40]	; 0x28
 802033e:	0e00      	lsrs	r0, r0, #24
 8020340:	9013      	str	r0, [sp, #76]	; 0x4c
 8020342:	e65d      	b.n	8020000 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020344:	f113 0801 	adds.w	r8, r3, #1
 8020348:	f53f af74 	bmi.w	8020234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802034c:	4540      	cmp	r0, r8
 802034e:	f6ff af71 	blt.w	8020234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020352:	f11c 0801 	adds.w	r8, ip, #1
 8020356:	f53f af6d 	bmi.w	8020234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802035a:	45c6      	cmp	lr, r8
 802035c:	f6ff af6a 	blt.w	8020234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020360:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020362:	b200      	sxth	r0, r0
 8020364:	9302      	str	r3, [sp, #8]
 8020366:	fa0f f38e 	sxth.w	r3, lr
 802036a:	9000      	str	r0, [sp, #0]
 802036c:	9301      	str	r3, [sp, #4]
 802036e:	4633      	mov	r3, r6
 8020370:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020372:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020376:	e9cd c203 	strd	ip, r2, [sp, #12]
 802037a:	4639      	mov	r1, r7
 802037c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802037e:	f7ff fc63 	bl	801fc48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020382:	e757      	b.n	8020234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020384:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020386:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802038a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802038c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020390:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020392:	1427      	asrs	r7, r4, #16
 8020394:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020396:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802039a:	142b      	asrs	r3, r5, #16
 802039c:	fb01 7303 	mla	r3, r1, r3, r7
 80203a0:	18e7      	adds	r7, r4, r3
 80203a2:	5ce3      	ldrb	r3, [r4, r3]
 80203a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80203a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80203ac:	2a00      	cmp	r2, #0
 80203ae:	f000 8137 	beq.w	8020620 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80203b2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80203b6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80203ba:	9410      	str	r4, [sp, #64]	; 0x40
 80203bc:	0e24      	lsrs	r4, r4, #24
 80203be:	9417      	str	r4, [sp, #92]	; 0x5c
 80203c0:	b170      	cbz	r0, 80203e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80203c2:	eb07 0e01 	add.w	lr, r7, r1
 80203c6:	5c79      	ldrb	r1, [r7, r1]
 80203c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80203cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80203ce:	0e09      	lsrs	r1, r1, #24
 80203d0:	9114      	str	r1, [sp, #80]	; 0x50
 80203d2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80203d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80203da:	9111      	str	r1, [sp, #68]	; 0x44
 80203dc:	0e09      	lsrs	r1, r1, #24
 80203de:	9118      	str	r1, [sp, #96]	; 0x60
 80203e0:	b292      	uxth	r2, r2
 80203e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80203e4:	b280      	uxth	r0, r0
 80203e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80203e8:	fb02 f800 	mul.w	r8, r2, r0
 80203ec:	0112      	lsls	r2, r2, #4
 80203ee:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80203f2:	eba2 0e08 	sub.w	lr, r2, r8
 80203f6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80203fa:	b280      	uxth	r0, r0
 80203fc:	fa1f fe8e 	uxth.w	lr, lr
 8020400:	1a12      	subs	r2, r2, r0
 8020402:	fb0e f101 	mul.w	r1, lr, r1
 8020406:	b292      	uxth	r2, r2
 8020408:	fb02 110c 	mla	r1, r2, ip, r1
 802040c:	fb00 1104 	mla	r1, r0, r4, r1
 8020410:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020412:	fb08 1104 	mla	r1, r8, r4, r1
 8020416:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802041a:	2900      	cmp	r1, #0
 802041c:	f000 80f5 	beq.w	802060a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8020420:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020424:	d019      	beq.n	802045a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8020426:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802042a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802042e:	fb0c fa0a 	mul.w	sl, ip, sl
 8020432:	fb0c fc03 	mul.w	ip, ip, r3
 8020436:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802043a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802043e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020442:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020446:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802044a:	4453      	add	r3, sl
 802044c:	0a3f      	lsrs	r7, r7, #8
 802044e:	0a1b      	lsrs	r3, r3, #8
 8020450:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020454:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020458:	433b      	orrs	r3, r7
 802045a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802045c:	2cff      	cmp	r4, #255	; 0xff
 802045e:	d020      	beq.n	80204a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020460:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020462:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020466:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020468:	4367      	muls	r7, r4
 802046a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802046c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020470:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020474:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020476:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802047a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802047e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020482:	44bc      	add	ip, r7
 8020484:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802048c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020490:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020494:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020498:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802049c:	ea4c 040a 	orr.w	r4, ip, sl
 80204a0:	9410      	str	r4, [sp, #64]	; 0x40
 80204a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204a4:	2cff      	cmp	r4, #255	; 0xff
 80204a6:	d020      	beq.n	80204ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 80204a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80204aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80204ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204b0:	4367      	muls	r7, r4
 80204b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80204b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80204b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80204c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80204ca:	44bc      	add	ip, r7
 80204cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80204d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204e4:	ea4c 040a 	orr.w	r4, ip, sl
 80204e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80204ea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80204ec:	2cff      	cmp	r4, #255	; 0xff
 80204ee:	d020      	beq.n	8020532 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80204f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80204f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80204f6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80204f8:	4367      	muls	r7, r4
 80204fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80204fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020500:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020504:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020506:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802050a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802050e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020512:	44bc      	add	ip, r7
 8020514:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020518:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802051c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020520:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020524:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020528:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802052c:	ea4c 040a 	orr.w	r4, ip, sl
 8020530:	9411      	str	r4, [sp, #68]	; 0x44
 8020532:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020534:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802053c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020540:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020542:	fb0e f707 	mul.w	r7, lr, r7
 8020546:	fb02 770c 	mla	r7, r2, ip, r7
 802054a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802054e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020550:	fb00 770c 	mla	r7, r0, ip, r7
 8020554:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020558:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802055a:	fb08 770c 	mla	r7, r8, ip, r7
 802055e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020562:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020564:	fb0e fe0c 	mul.w	lr, lr, ip
 8020568:	0a3f      	lsrs	r7, r7, #8
 802056a:	fb02 e303 	mla	r3, r2, r3, lr
 802056e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020570:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020574:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020578:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802057a:	fb00 330a 	mla	r3, r0, sl, r3
 802057e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020582:	f8b9 0000 	ldrh.w	r0, [r9]
 8020586:	fb08 3c0c 	mla	ip, r8, ip, r3
 802058a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802058c:	1202      	asrs	r2, r0, #8
 802058e:	434b      	muls	r3, r1
 8020590:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020594:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020598:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802059c:	1c59      	adds	r1, r3, #1
 802059e:	ea47 070c 	orr.w	r7, r7, ip
 80205a2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80205a6:	0c3b      	lsrs	r3, r7, #16
 80205a8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80205ac:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80205b0:	b2ff      	uxtb	r7, r7
 80205b2:	fb13 f304 	smulbb	r3, r3, r4
 80205b6:	b2c9      	uxtb	r1, r1
 80205b8:	fb1c fc04 	smulbb	ip, ip, r4
 80205bc:	fb02 3201 	mla	r2, r2, r1, r3
 80205c0:	10c3      	asrs	r3, r0, #3
 80205c2:	fb17 f704 	smulbb	r7, r7, r4
 80205c6:	00c0      	lsls	r0, r0, #3
 80205c8:	b292      	uxth	r2, r2
 80205ca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80205ce:	b2c0      	uxtb	r0, r0
 80205d0:	fb03 c301 	mla	r3, r3, r1, ip
 80205d4:	f102 0c01 	add.w	ip, r2, #1
 80205d8:	fb00 7001 	mla	r0, r0, r1, r7
 80205dc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80205e0:	b280      	uxth	r0, r0
 80205e2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80205e6:	b29b      	uxth	r3, r3
 80205e8:	1c42      	adds	r2, r0, #1
 80205ea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80205ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80205f2:	ea42 020c 	orr.w	r2, r2, ip
 80205f6:	f103 0c01 	add.w	ip, r3, #1
 80205fa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80205fe:	095b      	lsrs	r3, r3, #5
 8020600:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020604:	431a      	orrs	r2, r3
 8020606:	f8a9 2000 	strh.w	r2, [r9]
 802060a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802060c:	f109 0902 	add.w	r9, r9, #2
 8020610:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020612:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020616:	441a      	add	r2, r3
 8020618:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802061a:	9229      	str	r2, [sp, #164]	; 0xa4
 802061c:	441d      	add	r5, r3
 802061e:	e63d      	b.n	802029c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020620:	2800      	cmp	r0, #0
 8020622:	f43f aedd 	beq.w	80203e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020626:	5c79      	ldrb	r1, [r7, r1]
 8020628:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802062c:	910b      	str	r1, [sp, #44]	; 0x2c
 802062e:	0e09      	lsrs	r1, r1, #24
 8020630:	9114      	str	r1, [sp, #80]	; 0x50
 8020632:	e6d5      	b.n	80203e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020634:	b01f      	add	sp, #124	; 0x7c
 8020636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802063a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802063a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802063e:	b089      	sub	sp, #36	; 0x24
 8020640:	9101      	str	r1, [sp, #4]
 8020642:	9801      	ldr	r0, [sp, #4]
 8020644:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020648:	8800      	ldrh	r0, [r0, #0]
 802064a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 802064e:	1206      	asrs	r6, r0, #8
 8020650:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020654:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8020658:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802065c:	9602      	str	r6, [sp, #8]
 802065e:	10c6      	asrs	r6, r0, #3
 8020660:	00c0      	lsls	r0, r0, #3
 8020662:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020666:	b2c0      	uxtb	r0, r0
 8020668:	9603      	str	r6, [sp, #12]
 802066a:	9004      	str	r0, [sp, #16]
 802066c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020670:	fb07 100c 	mla	r0, r7, ip, r1
 8020674:	2f00      	cmp	r7, #0
 8020676:	eb02 0e00 	add.w	lr, r2, r0
 802067a:	f2c0 810a 	blt.w	8020892 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802067e:	45b8      	cmp	r8, r7
 8020680:	f340 8107 	ble.w	8020892 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020684:	2900      	cmp	r1, #0
 8020686:	f2c0 8102 	blt.w	802088e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802068a:	458c      	cmp	ip, r1
 802068c:	f340 80ff 	ble.w	802088e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020690:	5c12      	ldrb	r2, [r2, r0]
 8020692:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020696:	1c4a      	adds	r2, r1, #1
 8020698:	f100 80fe 	bmi.w	8020898 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802069c:	4594      	cmp	ip, r2
 802069e:	f340 80fb 	ble.w	8020898 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80206a2:	2d00      	cmp	r5, #0
 80206a4:	f000 80fa 	beq.w	802089c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80206a8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80206ac:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80206b0:	3701      	adds	r7, #1
 80206b2:	f100 80f7 	bmi.w	80208a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80206b6:	45b8      	cmp	r8, r7
 80206b8:	f340 80f4 	ble.w	80208a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80206bc:	2c00      	cmp	r4, #0
 80206be:	f000 80f4 	beq.w	80208aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 80206c2:	2900      	cmp	r1, #0
 80206c4:	eb0e 020c 	add.w	r2, lr, ip
 80206c8:	f2c0 80ea 	blt.w	80208a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80206cc:	458c      	cmp	ip, r1
 80206ce:	f340 80e7 	ble.w	80208a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80206d2:	f81e 700c 	ldrb.w	r7, [lr, ip]
 80206d6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80206da:	3101      	adds	r1, #1
 80206dc:	f100 80e8 	bmi.w	80208b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80206e0:	458c      	cmp	ip, r1
 80206e2:	f340 80e5 	ble.w	80208b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80206e6:	2d00      	cmp	r5, #0
 80206e8:	f000 80e4 	beq.w	80208b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 80206ec:	7852      	ldrb	r2, [r2, #1]
 80206ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80206f2:	0e0b      	lsrs	r3, r1, #24
 80206f4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80206f8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	b2a4      	uxth	r4, r4
 8020700:	b2ab      	uxth	r3, r5
 8020702:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020706:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802070a:	fb03 f904 	mul.w	r9, r3, r4
 802070e:	011b      	lsls	r3, r3, #4
 8020710:	fb0a f505 	mul.w	r5, sl, r5
 8020714:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8020718:	eba3 0e09 	sub.w	lr, r3, r9
 802071c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8020720:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020724:	0a28      	lsrs	r0, r5, #8
 8020726:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802072a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802072e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020732:	fb0a f303 	mul.w	r3, sl, r3
 8020736:	fb08 f707 	mul.w	r7, r8, r7
 802073a:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 802073e:	4405      	add	r5, r0
 8020740:	fb08 fc0c 	mul.w	ip, r8, ip
 8020744:	b2a4      	uxth	r4, r4
 8020746:	0a2d      	lsrs	r5, r5, #8
 8020748:	fa1f fe8e 	uxth.w	lr, lr
 802074c:	1b12      	subs	r2, r2, r4
 802074e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8020752:	b292      	uxth	r2, r2
 8020754:	9005      	str	r0, [sp, #20]
 8020756:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802075a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802075e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8020762:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020766:	0a1b      	lsrs	r3, r3, #8
 8020768:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802076c:	9306      	str	r3, [sp, #24]
 802076e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8020772:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020776:	4460      	add	r0, ip
 8020778:	fb0b f303 	mul.w	r3, fp, r3
 802077c:	fb0b f606 	mul.w	r6, fp, r6
 8020780:	0a00      	lsrs	r0, r0, #8
 8020782:	0a1d      	lsrs	r5, r3, #8
 8020784:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020788:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802078c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020790:	441d      	add	r5, r3
 8020792:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8020796:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802079a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802079e:	0a2d      	lsrs	r5, r5, #8
 80207a0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80207a4:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80207a8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80207ac:	0a36      	lsrs	r6, r6, #8
 80207ae:	0a1b      	lsrs	r3, r3, #8
 80207b0:	fb05 f50e 	mul.w	r5, r5, lr
 80207b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80207b8:	9307      	str	r3, [sp, #28]
 80207ba:	0e0b      	lsrs	r3, r1, #24
 80207bc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80207c0:	fb0e f606 	mul.w	r6, lr, r6
 80207c4:	435f      	muls	r7, r3
 80207c6:	4359      	muls	r1, r3
 80207c8:	9b05      	ldr	r3, [sp, #20]
 80207ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80207ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80207d2:	fb03 5502 	mla	r5, r3, r2, r5
 80207d6:	9b06      	ldr	r3, [sp, #24]
 80207d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207dc:	fb0e fe0b 	mul.w	lr, lr, fp
 80207e0:	44bc      	add	ip, r7
 80207e2:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80207e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207ea:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80207ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207f2:	0a09      	lsrs	r1, r1, #8
 80207f4:	fb0c 5509 	mla	r5, ip, r9, r5
 80207f8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80207fc:	fb00 5504 	mla	r5, r0, r4, r5
 8020800:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8020804:	9b07      	ldr	r3, [sp, #28]
 8020806:	fb02 6000 	mla	r0, r2, r0, r6
 802080a:	0a2d      	lsrs	r5, r5, #8
 802080c:	fb02 e20a 	mla	r2, r2, sl, lr
 8020810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020814:	fb09 0001 	mla	r0, r9, r1, r0
 8020818:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802081c:	fb04 0003 	mla	r0, r4, r3, r0
 8020820:	9b00      	ldr	r3, [sp, #0]
 8020822:	fb04 2408 	mla	r4, r4, r8, r2
 8020826:	9a04      	ldr	r2, [sp, #16]
 8020828:	0a00      	lsrs	r0, r0, #8
 802082a:	fb09 4903 	mla	r9, r9, r3, r4
 802082e:	9b02      	ldr	r3, [sp, #8]
 8020830:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020834:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020838:	4305      	orrs	r5, r0
 802083a:	fa5f f989 	uxtb.w	r9, r9
 802083e:	fb03 f109 	mul.w	r1, r3, r9
 8020842:	9b03      	ldr	r3, [sp, #12]
 8020844:	fb03 f309 	mul.w	r3, r3, r9
 8020848:	fb02 f909 	mul.w	r9, r2, r9
 802084c:	1c4a      	adds	r2, r1, #1
 802084e:	1c58      	adds	r0, r3, #1
 8020850:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020854:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020858:	0c2a      	lsrs	r2, r5, #16
 802085a:	0a2b      	lsrs	r3, r5, #8
 802085c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020860:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020864:	0212      	lsls	r2, r2, #8
 8020866:	00db      	lsls	r3, r3, #3
 8020868:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802086c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020870:	4313      	orrs	r3, r2
 8020872:	f109 0201 	add.w	r2, r9, #1
 8020876:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802087a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802087e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020882:	431d      	orrs	r5, r3
 8020884:	9b01      	ldr	r3, [sp, #4]
 8020886:	801d      	strh	r5, [r3, #0]
 8020888:	b009      	add	sp, #36	; 0x24
 802088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802088e:	2000      	movs	r0, #0
 8020890:	e701      	b.n	8020696 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8020892:	2600      	movs	r6, #0
 8020894:	4630      	mov	r0, r6
 8020896:	e70b      	b.n	80206b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020898:	2600      	movs	r6, #0
 802089a:	e709      	b.n	80206b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802089c:	462e      	mov	r6, r5
 802089e:	e707      	b.n	80206b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80208a0:	2700      	movs	r7, #0
 80208a2:	e71a      	b.n	80206da <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80208a4:	2100      	movs	r1, #0
 80208a6:	460f      	mov	r7, r1
 80208a8:	e723      	b.n	80206f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80208aa:	4621      	mov	r1, r4
 80208ac:	4627      	mov	r7, r4
 80208ae:	e720      	b.n	80206f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80208b0:	2100      	movs	r1, #0
 80208b2:	e71e      	b.n	80206f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80208b4:	4629      	mov	r1, r5
 80208b6:	e71c      	b.n	80206f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080208b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208bc:	b09b      	sub	sp, #108	; 0x6c
 80208be:	9218      	str	r2, [sp, #96]	; 0x60
 80208c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80208c2:	9019      	str	r0, [sp, #100]	; 0x64
 80208c4:	9116      	str	r1, [sp, #88]	; 0x58
 80208c6:	6850      	ldr	r0, [r2, #4]
 80208c8:	9307      	str	r3, [sp, #28]
 80208ca:	6812      	ldr	r2, [r2, #0]
 80208cc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80208ce:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80208d2:	fb00 1303 	mla	r3, r0, r3, r1
 80208d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80208da:	930a      	str	r3, [sp, #40]	; 0x28
 80208dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80208e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80208e4:	685e      	ldr	r6, [r3, #4]
 80208e6:	3604      	adds	r6, #4
 80208e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	dc03      	bgt.n	80208f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80208ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80208f0:	2b00      	cmp	r3, #0
 80208f2:	f340 8373 	ble.w	8020fdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80208f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80208f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020900:	1e48      	subs	r0, r1, #1
 8020902:	1e57      	subs	r7, r2, #1
 8020904:	9b07      	ldr	r3, [sp, #28]
 8020906:	2b00      	cmp	r3, #0
 8020908:	f340 818f 	ble.w	8020c2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802090c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802090e:	142b      	asrs	r3, r5, #16
 8020910:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020914:	d406      	bmi.n	8020924 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020916:	4584      	cmp	ip, r0
 8020918:	da04      	bge.n	8020924 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802091a:	2b00      	cmp	r3, #0
 802091c:	db02      	blt.n	8020924 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802091e:	42bb      	cmp	r3, r7
 8020920:	f2c0 8184 	blt.w	8020c2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020924:	f11c 0c01 	adds.w	ip, ip, #1
 8020928:	f100 8172 	bmi.w	8020c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802092c:	4561      	cmp	r1, ip
 802092e:	f2c0 816f 	blt.w	8020c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020932:	3301      	adds	r3, #1
 8020934:	f100 816c 	bmi.w	8020c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020938:	429a      	cmp	r2, r3
 802093a:	f2c0 8169 	blt.w	8020c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802093e:	9b07      	ldr	r3, [sp, #28]
 8020940:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020942:	9317      	str	r3, [sp, #92]	; 0x5c
 8020944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020946:	2b00      	cmp	r3, #0
 8020948:	f340 818e 	ble.w	8020c68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802094c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802094e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020952:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020956:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802095a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802095c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020960:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020962:	141b      	asrs	r3, r3, #16
 8020964:	f100 81d1 	bmi.w	8020d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020968:	f101 38ff 	add.w	r8, r1, #4294967295
 802096c:	4543      	cmp	r3, r8
 802096e:	f280 81cc 	bge.w	8020d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020972:	f1bc 0f00 	cmp.w	ip, #0
 8020976:	f2c0 81c8 	blt.w	8020d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802097a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802097e:	45c4      	cmp	ip, r8
 8020980:	f280 81c3 	bge.w	8020d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020984:	b209      	sxth	r1, r1
 8020986:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020988:	fb0c 3301 	mla	r3, ip, r1, r3
 802098c:	eb04 0803 	add.w	r8, r4, r3
 8020990:	5ce3      	ldrb	r3, [r4, r3]
 8020992:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020996:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802099a:	2a00      	cmp	r2, #0
 802099c:	f000 81aa 	beq.w	8020cf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80209a0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80209a4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80209a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80209aa:	0e24      	lsrs	r4, r4, #24
 80209ac:	9412      	str	r4, [sp, #72]	; 0x48
 80209ae:	b178      	cbz	r0, 80209d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80209b0:	eb08 0c01 	add.w	ip, r8, r1
 80209b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80209b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209bc:	9108      	str	r1, [sp, #32]
 80209be:	0e09      	lsrs	r1, r1, #24
 80209c0:	9110      	str	r1, [sp, #64]	; 0x40
 80209c2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80209c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209ca:	910c      	str	r1, [sp, #48]	; 0x30
 80209cc:	0e09      	lsrs	r1, r1, #24
 80209ce:	9113      	str	r1, [sp, #76]	; 0x4c
 80209d0:	b292      	uxth	r2, r2
 80209d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80209d4:	b280      	uxth	r0, r0
 80209d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209d8:	fb02 f900 	mul.w	r9, r2, r0
 80209dc:	0112      	lsls	r2, r2, #4
 80209de:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80209e2:	eba2 0809 	sub.w	r8, r2, r9
 80209e6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80209ea:	b280      	uxth	r0, r0
 80209ec:	fa1f f888 	uxth.w	r8, r8
 80209f0:	1a12      	subs	r2, r2, r0
 80209f2:	fb08 f101 	mul.w	r1, r8, r1
 80209f6:	b292      	uxth	r2, r2
 80209f8:	fb02 110e 	mla	r1, r2, lr, r1
 80209fc:	fb00 1104 	mla	r1, r0, r4, r1
 8020a00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020a02:	fb09 1104 	mla	r1, r9, r4, r1
 8020a06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a0a:	2900      	cmp	r1, #0
 8020a0c:	f000 80f5 	beq.w	8020bfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020a10:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020a14:	d01b      	beq.n	8020a4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020a16:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020a22:	fb0e fe03 	mul.w	lr, lr, r3
 8020a26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020a2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020a2e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020a32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020a3a:	4453      	add	r3, sl
 8020a3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a40:	0a1b      	lsrs	r3, r3, #8
 8020a42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020a46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a4a:	ea43 030c 	orr.w	r3, r3, ip
 8020a4e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020a50:	2cff      	cmp	r4, #255	; 0xff
 8020a52:	d021      	beq.n	8020a98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8020a54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020a5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020a5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020a68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020a70:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a7c:	44de      	add	lr, fp
 8020a7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a92:	ea4e 040a 	orr.w	r4, lr, sl
 8020a96:	940b      	str	r4, [sp, #44]	; 0x2c
 8020a98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a9a:	2cff      	cmp	r4, #255	; 0xff
 8020a9c:	d021      	beq.n	8020ae2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020a9e:	9c08      	ldr	r4, [sp, #32]
 8020aa0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020aa4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020aa6:	fb04 fb0b 	mul.w	fp, r4, fp
 8020aaa:	9c08      	ldr	r4, [sp, #32]
 8020aac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ab0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ab2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020ab6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020aba:	fb04 fa0a 	mul.w	sl, r4, sl
 8020abe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ac2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020ac6:	44de      	add	lr, fp
 8020ac8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020acc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ad0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ad4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ad8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020adc:	ea4e 040a 	orr.w	r4, lr, sl
 8020ae0:	9408      	str	r4, [sp, #32]
 8020ae2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ae4:	2cff      	cmp	r4, #255	; 0xff
 8020ae6:	d021      	beq.n	8020b2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8020ae8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020aea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020aee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020af0:	fb04 fb0b 	mul.w	fp, r4, fp
 8020af4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020af6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020afa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020afc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b04:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020b10:	44de      	add	lr, fp
 8020b12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b26:	ea4e 040a 	orr.w	r4, lr, sl
 8020b2a:	940c      	str	r4, [sp, #48]	; 0x30
 8020b2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b2e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020b32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b36:	43c9      	mvns	r1, r1
 8020b38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020b3c:	9c08      	ldr	r4, [sp, #32]
 8020b3e:	fb08 fc0c 	mul.w	ip, r8, ip
 8020b42:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020b46:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020b4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020b4c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020b50:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020b54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b56:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020b5a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020b5e:	fb08 f80e 	mul.w	r8, r8, lr
 8020b62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b66:	fa5f fe81 	uxtb.w	lr, r1
 8020b6a:	fb02 8303 	mla	r3, r2, r3, r8
 8020b6e:	9a08      	ldr	r2, [sp, #32]
 8020b70:	f8b7 8000 	ldrh.w	r8, [r7]
 8020b74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b78:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020b7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8020b82:	fb00 330a 	mla	r3, r0, sl, r3
 8020b86:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020b8a:	ea4f 2228 	mov.w	r2, r8, asr #8
 8020b8e:	fb09 3900 	mla	r9, r9, r0, r3
 8020b92:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8020b96:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020b9a:	b2c9      	uxtb	r1, r1
 8020b9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ba0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020ba4:	fb02 f20e 	mul.w	r2, r2, lr
 8020ba8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020bac:	fb00 f00e 	mul.w	r0, r0, lr
 8020bb0:	1c53      	adds	r3, r2, #1
 8020bb2:	fb01 f10e 	mul.w	r1, r1, lr
 8020bb6:	ea4c 0c09 	orr.w	ip, ip, r9
 8020bba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020bbe:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8020bc2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020bc6:	4a60      	ldr	r2, [pc, #384]	; (8020d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8020bc8:	b2db      	uxtb	r3, r3
 8020bca:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8020bce:	1c43      	adds	r3, r0, #1
 8020bd0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020bd4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020bd8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020bdc:	00db      	lsls	r3, r3, #3
 8020bde:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020be2:	4313      	orrs	r3, r2
 8020be4:	1c4a      	adds	r2, r1, #1
 8020be6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020bea:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020bee:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020bf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8020bf6:	f8a7 c000 	strh.w	ip, [r7]
 8020bfa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020bfc:	3702      	adds	r7, #2
 8020bfe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020c00:	441a      	add	r2, r3
 8020c02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c04:	441d      	add	r5, r3
 8020c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020c08:	9225      	str	r2, [sp, #148]	; 0x94
 8020c0a:	3b01      	subs	r3, #1
 8020c0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8020c0e:	e699      	b.n	8020944 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020c10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020c12:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020c14:	441c      	add	r4, r3
 8020c16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c18:	441d      	add	r5, r3
 8020c1a:	9b07      	ldr	r3, [sp, #28]
 8020c1c:	9425      	str	r4, [sp, #148]	; 0x94
 8020c1e:	3b01      	subs	r3, #1
 8020c20:	9307      	str	r3, [sp, #28]
 8020c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c24:	3302      	adds	r3, #2
 8020c26:	930a      	str	r3, [sp, #40]	; 0x28
 8020c28:	e66c      	b.n	8020904 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020c2a:	d024      	beq.n	8020c76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020c2c:	9b07      	ldr	r3, [sp, #28]
 8020c2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020c30:	3b01      	subs	r3, #1
 8020c32:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020c34:	fb00 4003 	mla	r0, r0, r3, r4
 8020c38:	1400      	asrs	r0, r0, #16
 8020c3a:	f53f ae80 	bmi.w	802093e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020c3e:	3901      	subs	r1, #1
 8020c40:	4288      	cmp	r0, r1
 8020c42:	f6bf ae7c 	bge.w	802093e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020c46:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020c48:	fb01 5303 	mla	r3, r1, r3, r5
 8020c4c:	141b      	asrs	r3, r3, #16
 8020c4e:	f53f ae76 	bmi.w	802093e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020c52:	3a01      	subs	r2, #1
 8020c54:	4293      	cmp	r3, r2
 8020c56:	f6bf ae72 	bge.w	802093e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020c5a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020c5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020c62:	f1bb 0f00 	cmp.w	fp, #0
 8020c66:	dc71      	bgt.n	8020d4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8020c68:	9b07      	ldr	r3, [sp, #28]
 8020c6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c70:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020c74:	930a      	str	r3, [sp, #40]	; 0x28
 8020c76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	f340 81af 	ble.w	8020fdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c8c:	eef0 6a62 	vmov.f32	s13, s5
 8020c90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020c94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c9c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020ca0:	eef0 6a43 	vmov.f32	s13, s6
 8020ca4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ca8:	ee16 5a90 	vmov	r5, s13
 8020cac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020cb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020cb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020cb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020cbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020cc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020cc4:	ee12 2a90 	vmov	r2, s5
 8020cc8:	eef0 2a47 	vmov.f32	s5, s14
 8020ccc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cd0:	ee13 2a10 	vmov	r2, s6
 8020cd4:	9327      	str	r3, [sp, #156]	; 0x9c
 8020cd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020cd8:	eeb0 3a67 	vmov.f32	s6, s15
 8020cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ce0:	9328      	str	r3, [sp, #160]	; 0xa0
 8020ce2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020ce4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020ce6:	3b01      	subs	r3, #1
 8020ce8:	9316      	str	r3, [sp, #88]	; 0x58
 8020cea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020cec:	bf08      	it	eq
 8020cee:	4613      	moveq	r3, r2
 8020cf0:	9307      	str	r3, [sp, #28]
 8020cf2:	e5f9      	b.n	80208e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020cf4:	2800      	cmp	r0, #0
 8020cf6:	f43f ae6b 	beq.w	80209d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020cfa:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020cfe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d02:	9108      	str	r1, [sp, #32]
 8020d04:	0e09      	lsrs	r1, r1, #24
 8020d06:	9110      	str	r1, [sp, #64]	; 0x40
 8020d08:	e662      	b.n	80209d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020d0a:	f113 0801 	adds.w	r8, r3, #1
 8020d0e:	f53f af74 	bmi.w	8020bfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020d12:	4541      	cmp	r1, r8
 8020d14:	f6ff af71 	blt.w	8020bfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020d18:	f11c 0801 	adds.w	r8, ip, #1
 8020d1c:	f53f af6d 	bmi.w	8020bfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020d20:	45c6      	cmp	lr, r8
 8020d22:	f6ff af6a 	blt.w	8020bfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020d26:	b209      	sxth	r1, r1
 8020d28:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020d2c:	fa0f f38e 	sxth.w	r3, lr
 8020d30:	9100      	str	r1, [sp, #0]
 8020d32:	4639      	mov	r1, r7
 8020d34:	9301      	str	r3, [sp, #4]
 8020d36:	4633      	mov	r3, r6
 8020d38:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020d40:	f7ff fc7b 	bl	802063a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020d44:	e759      	b.n	8020bfa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020d46:	bf00      	nop
 8020d48:	fffff800 	.word	0xfffff800
 8020d4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020d4e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020d52:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020d54:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020d58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d5a:	1427      	asrs	r7, r4, #16
 8020d5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020d5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d62:	142b      	asrs	r3, r5, #16
 8020d64:	fb01 7303 	mla	r3, r1, r3, r7
 8020d68:	18e7      	adds	r7, r4, r3
 8020d6a:	5ce3      	ldrb	r3, [r4, r3]
 8020d6c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020d70:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020d74:	2a00      	cmp	r2, #0
 8020d76:	f000 8127 	beq.w	8020fc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8020d7a:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020d7e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020d82:	940d      	str	r4, [sp, #52]	; 0x34
 8020d84:	0e24      	lsrs	r4, r4, #24
 8020d86:	9414      	str	r4, [sp, #80]	; 0x50
 8020d88:	b170      	cbz	r0, 8020da8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020d8a:	eb07 0e01 	add.w	lr, r7, r1
 8020d8e:	5c79      	ldrb	r1, [r7, r1]
 8020d90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d94:	9109      	str	r1, [sp, #36]	; 0x24
 8020d96:	0e09      	lsrs	r1, r1, #24
 8020d98:	9111      	str	r1, [sp, #68]	; 0x44
 8020d9a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020d9e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020da2:	910e      	str	r1, [sp, #56]	; 0x38
 8020da4:	0e09      	lsrs	r1, r1, #24
 8020da6:	9115      	str	r1, [sp, #84]	; 0x54
 8020da8:	b292      	uxth	r2, r2
 8020daa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020dac:	b280      	uxth	r0, r0
 8020dae:	fb02 f800 	mul.w	r8, r2, r0
 8020db2:	0112      	lsls	r2, r2, #4
 8020db4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020db8:	eba2 0e08 	sub.w	lr, r2, r8
 8020dbc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020dc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020dc2:	b280      	uxth	r0, r0
 8020dc4:	fa1f fe8e 	uxth.w	lr, lr
 8020dc8:	1a09      	subs	r1, r1, r0
 8020dca:	fb0e f202 	mul.w	r2, lr, r2
 8020dce:	b289      	uxth	r1, r1
 8020dd0:	fb01 220c 	mla	r2, r1, ip, r2
 8020dd4:	fb00 2204 	mla	r2, r0, r4, r2
 8020dd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020dda:	fb08 2204 	mla	r2, r8, r4, r2
 8020dde:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020de2:	2a00      	cmp	r2, #0
 8020de4:	f000 80e5 	beq.w	8020fb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8020de8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020dec:	d019      	beq.n	8020e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8020dee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020df6:	fb0c fa0a 	mul.w	sl, ip, sl
 8020dfa:	fb0c fc03 	mul.w	ip, ip, r3
 8020dfe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020e02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020e06:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020e0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e0e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020e12:	4453      	add	r3, sl
 8020e14:	0a3f      	lsrs	r7, r7, #8
 8020e16:	0a1b      	lsrs	r3, r3, #8
 8020e18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020e1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e20:	433b      	orrs	r3, r7
 8020e22:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e24:	2cff      	cmp	r4, #255	; 0xff
 8020e26:	d020      	beq.n	8020e6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8020e28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020e2a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e2e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e30:	4367      	muls	r7, r4
 8020e32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020e34:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020e3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020e42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e46:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e4a:	44bc      	add	ip, r7
 8020e4c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020e50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e64:	ea4c 040a 	orr.w	r4, ip, sl
 8020e68:	940d      	str	r4, [sp, #52]	; 0x34
 8020e6a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e6c:	2cff      	cmp	r4, #255	; 0xff
 8020e6e:	d020      	beq.n	8020eb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8020e70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020e72:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e76:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e78:	4367      	muls	r7, r4
 8020e7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020e7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020e84:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020e8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e92:	44bc      	add	ip, r7
 8020e94:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020e98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ea0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ea4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ea8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020eac:	ea4c 040a 	orr.w	r4, ip, sl
 8020eb0:	9409      	str	r4, [sp, #36]	; 0x24
 8020eb2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020eb4:	2cff      	cmp	r4, #255	; 0xff
 8020eb6:	d020      	beq.n	8020efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020eb8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020eba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020ebe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020ec0:	4367      	muls	r7, r4
 8020ec2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020ec4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ec8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ecc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020ece:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ed6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020eda:	44bc      	add	ip, r7
 8020edc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020ee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ee4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ee8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020eec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ef0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ef4:	ea4c 040a 	orr.w	r4, ip, sl
 8020ef8:	940e      	str	r4, [sp, #56]	; 0x38
 8020efa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020efc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020f00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f04:	43d2      	mvns	r2, r2
 8020f06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020f0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020f0c:	b2d2      	uxtb	r2, r2
 8020f0e:	fb0e f707 	mul.w	r7, lr, r7
 8020f12:	fb01 770c 	mla	r7, r1, ip, r7
 8020f16:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020f1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f1c:	fb00 770c 	mla	r7, r0, ip, r7
 8020f20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020f24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020f26:	fb08 770c 	mla	r7, r8, ip, r7
 8020f2a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020f2e:	fb0e fe0c 	mul.w	lr, lr, ip
 8020f32:	0a3f      	lsrs	r7, r7, #8
 8020f34:	fb01 e303 	mla	r3, r1, r3, lr
 8020f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020f3a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020f3e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020f42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020f44:	fb00 330a 	mla	r3, r0, sl, r3
 8020f48:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020f4c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020f50:	f8b9 3000 	ldrh.w	r3, [r9]
 8020f54:	1218      	asrs	r0, r3, #8
 8020f56:	10d9      	asrs	r1, r3, #3
 8020f58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f5c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020f60:	00db      	lsls	r3, r3, #3
 8020f62:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020f66:	4350      	muls	r0, r2
 8020f68:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f6c:	b2db      	uxtb	r3, r3
 8020f6e:	4351      	muls	r1, r2
 8020f70:	ea47 070c 	orr.w	r7, r7, ip
 8020f74:	4353      	muls	r3, r2
 8020f76:	1c42      	adds	r2, r0, #1
 8020f78:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020f7c:	0c3a      	lsrs	r2, r7, #16
 8020f7e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020f82:	4a18      	ldr	r2, [pc, #96]	; (8020fe4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020f84:	b2c0      	uxtb	r0, r0
 8020f86:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020f8a:	1c4a      	adds	r2, r1, #1
 8020f8c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020f90:	0a3a      	lsrs	r2, r7, #8
 8020f92:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020f96:	00c9      	lsls	r1, r1, #3
 8020f98:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020f9c:	4301      	orrs	r1, r0
 8020f9e:	1c58      	adds	r0, r3, #1
 8020fa0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020fa4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020fa8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8020fac:	4308      	orrs	r0, r1
 8020fae:	f8a9 0000 	strh.w	r0, [r9]
 8020fb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020fb4:	f109 0902 	add.w	r9, r9, #2
 8020fb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020fba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020fbe:	441a      	add	r2, r3
 8020fc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020fc2:	9225      	str	r2, [sp, #148]	; 0x94
 8020fc4:	441d      	add	r5, r3
 8020fc6:	e64c      	b.n	8020c62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020fc8:	2800      	cmp	r0, #0
 8020fca:	f43f aeed 	beq.w	8020da8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020fce:	5c79      	ldrb	r1, [r7, r1]
 8020fd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020fd4:	9109      	str	r1, [sp, #36]	; 0x24
 8020fd6:	0e09      	lsrs	r1, r1, #24
 8020fd8:	9111      	str	r1, [sp, #68]	; 0x44
 8020fda:	e6e5      	b.n	8020da8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020fdc:	b01b      	add	sp, #108	; 0x6c
 8020fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fe2:	bf00      	nop
 8020fe4:	fffff800 	.word	0xfffff800

08020fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8020fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fec:	b085      	sub	sp, #20
 8020fee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8020ff2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8020ff6:	2800      	cmp	r0, #0
 8020ff8:	9103      	str	r1, [sp, #12]
 8020ffa:	fb00 7406 	mla	r4, r0, r6, r7
 8020ffe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8021002:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021006:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 802100a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802100e:	eb03 0904 	add.w	r9, r3, r4
 8021012:	9501      	str	r5, [sp, #4]
 8021014:	f2c0 8150 	blt.w	80212b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021018:	4583      	cmp	fp, r0
 802101a:	f340 814d 	ble.w	80212b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802101e:	2f00      	cmp	r7, #0
 8021020:	f2c0 8146 	blt.w	80212b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021024:	42be      	cmp	r6, r7
 8021026:	f340 8143 	ble.w	80212b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802102a:	f813 c004 	ldrb.w	ip, [r3, r4]
 802102e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021032:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021036:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802103a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802103e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021042:	4355      	muls	r5, r2
 8021044:	fb0c f203 	mul.w	r2, ip, r3
 8021048:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802104c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021050:	441d      	add	r5, r3
 8021052:	f102 0320 	add.w	r3, r2, #32
 8021056:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802105a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802105e:	0a1b      	lsrs	r3, r3, #8
 8021060:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021064:	431c      	orrs	r4, r3
 8021066:	1c7b      	adds	r3, r7, #1
 8021068:	f100 812b 	bmi.w	80212c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802106c:	429e      	cmp	r6, r3
 802106e:	f340 8128 	ble.w	80212c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021072:	2900      	cmp	r1, #0
 8021074:	f000 8128 	beq.w	80212c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8021078:	9a01      	ldr	r2, [sp, #4]
 802107a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802107e:	8855      	ldrh	r5, [r2, #2]
 8021080:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021084:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021088:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802108c:	fb08 f802 	mul.w	r8, r8, r2
 8021090:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021094:	435d      	muls	r5, r3
 8021096:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802109a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802109e:	44d0      	add	r8, sl
 80210a0:	f105 0a20 	add.w	sl, r5, #32
 80210a4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80210a8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80210ac:	0a2d      	lsrs	r5, r5, #8
 80210ae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80210b2:	432a      	orrs	r2, r5
 80210b4:	3001      	adds	r0, #1
 80210b6:	f100 810d 	bmi.w	80212d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80210ba:	4583      	cmp	fp, r0
 80210bc:	f340 810a 	ble.w	80212d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80210c0:	f1be 0f00 	cmp.w	lr, #0
 80210c4:	f000 810b 	beq.w	80212de <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80210c8:	2f00      	cmp	r7, #0
 80210ca:	f2c0 8100 	blt.w	80212ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80210ce:	42be      	cmp	r6, r7
 80210d0:	f340 80fd 	ble.w	80212ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80210d4:	9801      	ldr	r0, [sp, #4]
 80210d6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80210da:	f819 5006 	ldrb.w	r5, [r9, r6]
 80210de:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80210e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80210e6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80210ea:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80210ee:	fb0a fa00 	mul.w	sl, sl, r0
 80210f2:	fb05 f808 	mul.w	r8, r5, r8
 80210f6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80210fa:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80210fe:	4482      	add	sl, r0
 8021100:	f108 0020 	add.w	r0, r8, #32
 8021104:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021108:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802110c:	0a00      	lsrs	r0, r0, #8
 802110e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021112:	ea4b 0b00 	orr.w	fp, fp, r0
 8021116:	3701      	adds	r7, #1
 8021118:	f100 80e6 	bmi.w	80212e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802111c:	42be      	cmp	r6, r7
 802111e:	f340 80e3 	ble.w	80212e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021122:	2900      	cmp	r1, #0
 8021124:	f000 80e3 	beq.w	80212ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021128:	3601      	adds	r6, #1
 802112a:	9801      	ldr	r0, [sp, #4]
 802112c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021130:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021134:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021138:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802113c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021140:	fb09 f906 	mul.w	r9, r9, r6
 8021144:	fb07 f800 	mul.w	r8, r7, r0
 8021148:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802114c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021150:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021154:	44d1      	add	r9, sl
 8021156:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802115a:	f108 0020 	add.w	r0, r8, #32
 802115e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021162:	0a00      	lsrs	r0, r0, #8
 8021164:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021168:	4330      	orrs	r0, r6
 802116a:	b28e      	uxth	r6, r1
 802116c:	fa1f f98e 	uxth.w	r9, lr
 8021170:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021174:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021178:	fb06 f809 	mul.w	r8, r6, r9
 802117c:	0136      	lsls	r6, r6, #4
 802117e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021182:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021186:	9601      	str	r6, [sp, #4]
 8021188:	ea4a 0404 	orr.w	r4, sl, r4
 802118c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021190:	fa1f f689 	uxth.w	r6, r9
 8021194:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021198:	fb11 f90e 	smulbb	r9, r1, lr
 802119c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80211a0:	9602      	str	r6, [sp, #8]
 80211a2:	4626      	mov	r6, r4
 80211a4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80211a8:	f1ce 0410 	rsb	r4, lr, #16
 80211ac:	ea4a 0202 	orr.w	r2, sl, r2
 80211b0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80211b4:	1a64      	subs	r4, r4, r1
 80211b6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80211ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80211be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80211c2:	434a      	muls	r2, r1
 80211c4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80211c8:	ea4a 0000 	orr.w	r0, sl, r0
 80211cc:	9903      	ldr	r1, [sp, #12]
 80211ce:	fb04 2406 	mla	r4, r4, r6, r2
 80211d2:	9e02      	ldr	r6, [sp, #8]
 80211d4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80211d8:	fb09 4200 	mla	r2, r9, r0, r4
 80211dc:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80211e0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80211e4:	8808      	ldrh	r0, [r1, #0]
 80211e6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80211ea:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80211ee:	ea44 0b0b 	orr.w	fp, r4, fp
 80211f2:	9c01      	ldr	r4, [sp, #4]
 80211f4:	b289      	uxth	r1, r1
 80211f6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80211fa:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80211fe:	1ba4      	subs	r4, r4, r6
 8021200:	9e01      	ldr	r6, [sp, #4]
 8021202:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021206:	eba6 0608 	sub.w	r6, r6, r8
 802120a:	b2a4      	uxth	r4, r4
 802120c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021210:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021214:	b2b6      	uxth	r6, r6
 8021216:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802121a:	4373      	muls	r3, r6
 802121c:	ea42 0e0e 	orr.w	lr, r2, lr
 8021220:	fb0c 3304 	mla	r3, ip, r4, r3
 8021224:	9c02      	ldr	r4, [sp, #8]
 8021226:	fa1f f28e 	uxth.w	r2, lr
 802122a:	fb04 3505 	mla	r5, r4, r5, r3
 802122e:	10d4      	asrs	r4, r2, #3
 8021230:	fb08 5707 	mla	r7, r8, r7, r5
 8021234:	1215      	asrs	r5, r2, #8
 8021236:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802123a:	00d2      	lsls	r2, r2, #3
 802123c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021240:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021244:	b2d2      	uxtb	r2, r2
 8021246:	434f      	muls	r7, r1
 8021248:	1c7b      	adds	r3, r7, #1
 802124a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802124e:	1203      	asrs	r3, r0, #8
 8021250:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021254:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021258:	b2ff      	uxtb	r7, r7
 802125a:	fb13 f307 	smulbb	r3, r3, r7
 802125e:	fb05 3501 	mla	r5, r5, r1, r3
 8021262:	10c3      	asrs	r3, r0, #3
 8021264:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021268:	b2ad      	uxth	r5, r5
 802126a:	fb13 f307 	smulbb	r3, r3, r7
 802126e:	fb04 3401 	mla	r4, r4, r1, r3
 8021272:	00c3      	lsls	r3, r0, #3
 8021274:	b2db      	uxtb	r3, r3
 8021276:	b2a4      	uxth	r4, r4
 8021278:	fb13 f307 	smulbb	r3, r3, r7
 802127c:	fb02 3101 	mla	r1, r2, r1, r3
 8021280:	1c6b      	adds	r3, r5, #1
 8021282:	1c62      	adds	r2, r4, #1
 8021284:	b289      	uxth	r1, r1
 8021286:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802128a:	1c4b      	adds	r3, r1, #1
 802128c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021290:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021294:	9a03      	ldr	r2, [sp, #12]
 8021296:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802129a:	0964      	lsrs	r4, r4, #5
 802129c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80212a0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80212a4:	432b      	orrs	r3, r5
 80212a6:	4323      	orrs	r3, r4
 80212a8:	8013      	strh	r3, [r2, #0]
 80212aa:	b005      	add	sp, #20
 80212ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212b0:	f04f 0c00 	mov.w	ip, #0
 80212b4:	4664      	mov	r4, ip
 80212b6:	e6d6      	b.n	8021066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80212b8:	2300      	movs	r3, #0
 80212ba:	469c      	mov	ip, r3
 80212bc:	461a      	mov	r2, r3
 80212be:	461c      	mov	r4, r3
 80212c0:	e6f8      	b.n	80210b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80212c2:	2300      	movs	r3, #0
 80212c4:	461a      	mov	r2, r3
 80212c6:	e6f5      	b.n	80210b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80212c8:	460b      	mov	r3, r1
 80212ca:	460a      	mov	r2, r1
 80212cc:	e6f2      	b.n	80210b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80212ce:	2500      	movs	r5, #0
 80212d0:	46ab      	mov	fp, r5
 80212d2:	e720      	b.n	8021116 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80212d4:	2700      	movs	r7, #0
 80212d6:	463d      	mov	r5, r7
 80212d8:	4638      	mov	r0, r7
 80212da:	46bb      	mov	fp, r7
 80212dc:	e745      	b.n	802116a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80212de:	4677      	mov	r7, lr
 80212e0:	4675      	mov	r5, lr
 80212e2:	4670      	mov	r0, lr
 80212e4:	46f3      	mov	fp, lr
 80212e6:	e740      	b.n	802116a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80212e8:	2700      	movs	r7, #0
 80212ea:	4638      	mov	r0, r7
 80212ec:	e73d      	b.n	802116a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80212ee:	460f      	mov	r7, r1
 80212f0:	4608      	mov	r0, r1
 80212f2:	e73a      	b.n	802116a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080212f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212f8:	b097      	sub	sp, #92	; 0x5c
 80212fa:	9214      	str	r2, [sp, #80]	; 0x50
 80212fc:	9308      	str	r3, [sp, #32]
 80212fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021300:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021304:	9015      	str	r0, [sp, #84]	; 0x54
 8021306:	9312      	str	r3, [sp, #72]	; 0x48
 8021308:	6850      	ldr	r0, [r2, #4]
 802130a:	9111      	str	r1, [sp, #68]	; 0x44
 802130c:	6812      	ldr	r2, [r2, #0]
 802130e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021312:	fb00 1303 	mla	r3, r0, r3, r1
 8021316:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802131a:	9309      	str	r3, [sp, #36]	; 0x24
 802131c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	930b      	str	r3, [sp, #44]	; 0x2c
 8021322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021324:	685b      	ldr	r3, [r3, #4]
 8021326:	930c      	str	r3, [sp, #48]	; 0x30
 8021328:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802132c:	930a      	str	r3, [sp, #40]	; 0x28
 802132e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021330:	2b00      	cmp	r3, #0
 8021332:	dc03      	bgt.n	802133c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021336:	2b00      	cmp	r3, #0
 8021338:	f340 83cd 	ble.w	8021ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 802133c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802133e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021342:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021346:	1e48      	subs	r0, r1, #1
 8021348:	1e55      	subs	r5, r2, #1
 802134a:	9b08      	ldr	r3, [sp, #32]
 802134c:	2b00      	cmp	r3, #0
 802134e:	f340 81a5 	ble.w	802169c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8021352:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021356:	1436      	asrs	r6, r6, #16
 8021358:	ea4f 4323 	mov.w	r3, r3, asr #16
 802135c:	d406      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802135e:	4286      	cmp	r6, r0
 8021360:	da04      	bge.n	802136c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021362:	2b00      	cmp	r3, #0
 8021364:	db02      	blt.n	802136c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021366:	42ab      	cmp	r3, r5
 8021368:	f2c0 8199 	blt.w	802169e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802136c:	3601      	adds	r6, #1
 802136e:	f100 8186 	bmi.w	802167e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021372:	42b1      	cmp	r1, r6
 8021374:	f2c0 8183 	blt.w	802167e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021378:	3301      	adds	r3, #1
 802137a:	f100 8180 	bmi.w	802167e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802137e:	429a      	cmp	r2, r3
 8021380:	f2c0 817d 	blt.w	802167e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021384:	9b08      	ldr	r3, [sp, #32]
 8021386:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802138a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802138c:	9313      	str	r3, [sp, #76]	; 0x4c
 802138e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021390:	2b00      	cmp	r3, #0
 8021392:	f340 81a6 	ble.w	80216e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021396:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021398:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802139a:	1418      	asrs	r0, r3, #16
 802139c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802139e:	142d      	asrs	r5, r5, #16
 80213a0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80213a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80213a6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80213aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80213b0:	f100 81fa 	bmi.w	80217a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80213b4:	f102 3eff 	add.w	lr, r2, #4294967295
 80213b8:	4575      	cmp	r5, lr
 80213ba:	f280 81f5 	bge.w	80217a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80213be:	2800      	cmp	r0, #0
 80213c0:	f2c0 81f2 	blt.w	80217a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80213c4:	f103 3eff 	add.w	lr, r3, #4294967295
 80213c8:	4570      	cmp	r0, lr
 80213ca:	f280 81ed 	bge.w	80217a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80213ce:	b212      	sxth	r2, r2
 80213d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213d2:	fa1f fe81 	uxth.w	lr, r1
 80213d6:	fb00 5002 	mla	r0, r0, r2, r5
 80213da:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80213de:	eb03 0a00 	add.w	sl, r3, r0
 80213e2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80213e6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80213ea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80213ee:	b29b      	uxth	r3, r3
 80213f0:	f1bc 0f00 	cmp.w	ip, #0
 80213f4:	f000 81bb 	beq.w	802176e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80213f8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80213fc:	eb0a 0b02 	add.w	fp, sl, r2
 8021400:	fa1f fa8c 	uxth.w	sl, ip
 8021404:	940d      	str	r4, [sp, #52]	; 0x34
 8021406:	fb0a fe0e 	mul.w	lr, sl, lr
 802140a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802140e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021412:	eba5 050e 	sub.w	r5, r5, lr
 8021416:	940e      	str	r4, [sp, #56]	; 0x38
 8021418:	fa1f fa8a 	uxth.w	sl, sl
 802141c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802141e:	b2ad      	uxth	r5, r5
 8021420:	eba3 030a 	sub.w	r3, r3, sl
 8021424:	fb08 f505 	mul.w	r5, r8, r5
 8021428:	b29b      	uxth	r3, r3
 802142a:	fb09 5303 	mla	r3, r9, r3, r5
 802142e:	fb0a 3304 	mla	r3, sl, r4, r3
 8021432:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021434:	fb0e 3304 	mla	r3, lr, r4, r3
 8021438:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802143c:	2b00      	cmp	r3, #0
 802143e:	f000 8111 	beq.w	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021442:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021444:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021448:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802144c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021450:	f000 8192 	beq.w	8021778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021454:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021458:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802145c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021460:	fb0a fe0e 	mul.w	lr, sl, lr
 8021464:	fb09 f000 	mul.w	r0, r9, r0
 8021468:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802146c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021470:	f100 0b20 	add.w	fp, r0, #32
 8021474:	44ce      	add	lr, r9
 8021476:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802147a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802147e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021482:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021486:	ea4e 0909 	orr.w	r9, lr, r9
 802148a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802148e:	8868      	ldrh	r0, [r5, #2]
 8021490:	d019      	beq.n	80214c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021492:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021496:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802149a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802149e:	fb0a fe0e 	mul.w	lr, sl, lr
 80214a2:	fb08 f800 	mul.w	r8, r8, r0
 80214a6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80214aa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80214ae:	f108 0b20 	add.w	fp, r8, #32
 80214b2:	4486      	add	lr, r0
 80214b4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80214b8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80214bc:	0a00      	lsrs	r0, r0, #8
 80214be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80214c2:	ea4e 0000 	orr.w	r0, lr, r0
 80214c6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80214ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80214ce:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80214d2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80214d6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80214da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80214de:	ea4e 0909 	orr.w	r9, lr, r9
 80214e2:	ea4a 0000 	orr.w	r0, sl, r0
 80214e6:	f1bc 0f00 	cmp.w	ip, #0
 80214ea:	f000 8147 	beq.w	802177c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80214ee:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80214f2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80214f4:	3a01      	subs	r2, #1
 80214f6:	2cff      	cmp	r4, #255	; 0xff
 80214f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80214fc:	f102 0202 	add.w	r2, r2, #2
 8021500:	eb05 0e02 	add.w	lr, r5, r2
 8021504:	5aaa      	ldrh	r2, [r5, r2]
 8021506:	d018      	beq.n	802153a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021508:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802150c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021510:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021514:	fb04 fa02 	mul.w	sl, r4, r2
 8021518:	fb08 f805 	mul.w	r8, r8, r5
 802151c:	f10a 0520 	add.w	r5, sl, #32
 8021520:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021524:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021528:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802152c:	4442      	add	r2, r8
 802152e:	0a2d      	lsrs	r5, r5, #8
 8021530:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021534:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021538:	432a      	orrs	r2, r5
 802153a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802153c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021540:	2cff      	cmp	r4, #255	; 0xff
 8021542:	d01a      	beq.n	802157a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8021544:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021548:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802154c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021550:	fb04 fa05 	mul.w	sl, r4, r5
 8021554:	fb08 f80e 	mul.w	r8, r8, lr
 8021558:	f10a 0e20 	add.w	lr, sl, #32
 802155c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021560:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021564:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021568:	4445      	add	r5, r8
 802156a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802156e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021572:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021576:	ea45 050e 	orr.w	r5, r5, lr
 802157a:	fb1c fe01 	smulbb	lr, ip, r1
 802157e:	f1cc 0810 	rsb	r8, ip, #16
 8021582:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021586:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802158a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802158e:	eba8 0801 	sub.w	r8, r8, r1
 8021592:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021596:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802159a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802159e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80215a2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80215a6:	ea4a 0202 	orr.w	r2, sl, r2
 80215aa:	4341      	muls	r1, r0
 80215ac:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80215b0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80215b4:	fb09 1108 	mla	r1, r9, r8, r1
 80215b8:	ea4b 0505 	orr.w	r5, fp, r5
 80215bc:	fb0c 1102 	mla	r1, ip, r2, r1
 80215c0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80215c4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80215c8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80215cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215d0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80215d4:	ea42 0e0e 	orr.w	lr, r2, lr
 80215d8:	fa1f f28e 	uxth.w	r2, lr
 80215dc:	2bff      	cmp	r3, #255	; 0xff
 80215de:	d103      	bne.n	80215e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80215e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80215e2:	29ff      	cmp	r1, #255	; 0xff
 80215e4:	f000 80de 	beq.w	80217a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80215e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80215ea:	1215      	asrs	r5, r2, #8
 80215ec:	8838      	ldrh	r0, [r7, #0]
 80215ee:	434b      	muls	r3, r1
 80215f0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80215f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80215f6:	f103 0c01 	add.w	ip, r3, #1
 80215fa:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80215fe:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021602:	fa5f fc83 	uxtb.w	ip, r3
 8021606:	1203      	asrs	r3, r0, #8
 8021608:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802160c:	fb13 f30c 	smulbb	r3, r3, ip
 8021610:	fb05 3501 	mla	r5, r5, r1, r3
 8021614:	10c3      	asrs	r3, r0, #3
 8021616:	10d1      	asrs	r1, r2, #3
 8021618:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802161c:	00d2      	lsls	r2, r2, #3
 802161e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021622:	b2ad      	uxth	r5, r5
 8021624:	fb13 f30c 	smulbb	r3, r3, ip
 8021628:	b2d2      	uxtb	r2, r2
 802162a:	fb01 3104 	mla	r1, r1, r4, r3
 802162e:	00c3      	lsls	r3, r0, #3
 8021630:	b2db      	uxtb	r3, r3
 8021632:	b289      	uxth	r1, r1
 8021634:	fb13 f30c 	smulbb	r3, r3, ip
 8021638:	fb02 3304 	mla	r3, r2, r4, r3
 802163c:	b29a      	uxth	r2, r3
 802163e:	1c6b      	adds	r3, r5, #1
 8021640:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021644:	1c53      	adds	r3, r2, #1
 8021646:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802164a:	1c4a      	adds	r2, r1, #1
 802164c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021650:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021654:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021658:	0949      	lsrs	r1, r1, #5
 802165a:	432b      	orrs	r3, r5
 802165c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021660:	430b      	orrs	r3, r1
 8021662:	803b      	strh	r3, [r7, #0]
 8021664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021666:	3702      	adds	r7, #2
 8021668:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802166a:	4413      	add	r3, r2
 802166c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802166e:	9321      	str	r3, [sp, #132]	; 0x84
 8021670:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021672:	441a      	add	r2, r3
 8021674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021676:	3b01      	subs	r3, #1
 8021678:	9222      	str	r2, [sp, #136]	; 0x88
 802167a:	9313      	str	r3, [sp, #76]	; 0x4c
 802167c:	e687      	b.n	802138e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802167e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021680:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021682:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021684:	4433      	add	r3, r6
 8021686:	9321      	str	r3, [sp, #132]	; 0x84
 8021688:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802168a:	441c      	add	r4, r3
 802168c:	9b08      	ldr	r3, [sp, #32]
 802168e:	3b01      	subs	r3, #1
 8021690:	9422      	str	r4, [sp, #136]	; 0x88
 8021692:	9308      	str	r3, [sp, #32]
 8021694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021696:	3302      	adds	r3, #2
 8021698:	9309      	str	r3, [sp, #36]	; 0x24
 802169a:	e656      	b.n	802134a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802169c:	d028      	beq.n	80216f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802169e:	9b08      	ldr	r3, [sp, #32]
 80216a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80216a2:	3b01      	subs	r3, #1
 80216a4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80216a6:	fb00 5003 	mla	r0, r0, r3, r5
 80216aa:	1400      	asrs	r0, r0, #16
 80216ac:	f53f ae6a 	bmi.w	8021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216b0:	3901      	subs	r1, #1
 80216b2:	4288      	cmp	r0, r1
 80216b4:	f6bf ae66 	bge.w	8021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216b8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80216ba:	9822      	ldr	r0, [sp, #136]	; 0x88
 80216bc:	fb01 0303 	mla	r3, r1, r3, r0
 80216c0:	141b      	asrs	r3, r3, #16
 80216c2:	f53f ae5f 	bmi.w	8021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216c6:	3a01      	subs	r2, #1
 80216c8:	4293      	cmp	r3, r2
 80216ca:	f6bf ae5b 	bge.w	8021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216ce:	9b08      	ldr	r3, [sp, #32]
 80216d0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80216d4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80216d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80216da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80216dc:	2b00      	cmp	r3, #0
 80216de:	f300 8082 	bgt.w	80217e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80216e2:	9b08      	ldr	r3, [sp, #32]
 80216e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80216e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216ea:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80216ee:	9309      	str	r3, [sp, #36]	; 0x24
 80216f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	f340 81ef 	ble.w	8021ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80216f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80216fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80216fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021702:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021706:	eef0 6a62 	vmov.f32	s13, s5
 802170a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802170e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021712:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021716:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 802171a:	eef0 6a43 	vmov.f32	s13, s6
 802171e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021722:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8021726:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802172a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802172e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021732:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021736:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802173a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802173e:	ee12 2a90 	vmov	r2, s5
 8021742:	eef0 2a47 	vmov.f32	s5, s14
 8021746:	fb92 f3f3 	sdiv	r3, r2, r3
 802174a:	ee13 2a10 	vmov	r2, s6
 802174e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021750:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021752:	eeb0 3a67 	vmov.f32	s6, s15
 8021756:	fb92 f3f3 	sdiv	r3, r2, r3
 802175a:	9324      	str	r3, [sp, #144]	; 0x90
 802175c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802175e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021760:	3b01      	subs	r3, #1
 8021762:	9311      	str	r3, [sp, #68]	; 0x44
 8021764:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021766:	bf08      	it	eq
 8021768:	4613      	moveq	r3, r2
 802176a:	9308      	str	r3, [sp, #32]
 802176c:	e5df      	b.n	802132e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802176e:	fb08 f505 	mul.w	r5, r8, r5
 8021772:	fb09 5303 	mla	r3, r9, r3, r5
 8021776:	e65f      	b.n	8021438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8021778:	4681      	mov	r9, r0
 802177a:	e686      	b.n	802148a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802177c:	f1c1 0210 	rsb	r2, r1, #16
 8021780:	4341      	muls	r1, r0
 8021782:	fb09 1902 	mla	r9, r9, r2, r1
 8021786:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802178a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802178e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021792:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021796:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802179a:	ea42 0909 	orr.w	r9, r2, r9
 802179e:	fa1f f289 	uxth.w	r2, r9
 80217a2:	e71b      	b.n	80215dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80217a4:	803a      	strh	r2, [r7, #0]
 80217a6:	e75d      	b.n	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80217a8:	f115 0e01 	adds.w	lr, r5, #1
 80217ac:	f53f af5a 	bmi.w	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80217b0:	4572      	cmp	r2, lr
 80217b2:	f6ff af57 	blt.w	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80217b6:	f110 0e01 	adds.w	lr, r0, #1
 80217ba:	f53f af53 	bmi.w	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80217be:	4573      	cmp	r3, lr
 80217c0:	f6ff af50 	blt.w	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80217c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80217c6:	b21b      	sxth	r3, r3
 80217c8:	b212      	sxth	r2, r2
 80217ca:	9502      	str	r5, [sp, #8]
 80217cc:	9301      	str	r3, [sp, #4]
 80217ce:	9200      	str	r2, [sp, #0]
 80217d0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80217d4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80217d8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80217dc:	4639      	mov	r1, r7
 80217de:	9815      	ldr	r0, [sp, #84]	; 0x54
 80217e0:	f7ff fc02 	bl	8020fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80217e4:	e73e      	b.n	8021664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80217e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80217e8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80217ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80217ee:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80217f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217f4:	fa1f fc82 	uxth.w	ip, r2
 80217f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80217fe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021802:	141f      	asrs	r7, r3, #16
 8021804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021806:	141b      	asrs	r3, r3, #16
 8021808:	fb01 3707 	mla	r7, r1, r7, r3
 802180c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802180e:	eb03 0a07 	add.w	sl, r3, r7
 8021812:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021816:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802181a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802181e:	b29b      	uxth	r3, r3
 8021820:	2d00      	cmp	r5, #0
 8021822:	f000 813d 	beq.w	8021aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8021826:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802182a:	eb0a 0b01 	add.w	fp, sl, r1
 802182e:	fa1f fa85 	uxth.w	sl, r5
 8021832:	940f      	str	r4, [sp, #60]	; 0x3c
 8021834:	fb0a fc0c 	mul.w	ip, sl, ip
 8021838:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802183c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021840:	eba0 000c 	sub.w	r0, r0, ip
 8021844:	9410      	str	r4, [sp, #64]	; 0x40
 8021846:	fa1f fa8a 	uxth.w	sl, sl
 802184a:	b280      	uxth	r0, r0
 802184c:	eba3 030a 	sub.w	r3, r3, sl
 8021850:	fb08 f000 	mul.w	r0, r8, r0
 8021854:	b29b      	uxth	r3, r3
 8021856:	fb09 0303 	mla	r3, r9, r3, r0
 802185a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802185c:	fb0a 3300 	mla	r3, sl, r0, r3
 8021860:	fb0c 3304 	mla	r3, ip, r4, r3
 8021864:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021868:	2b00      	cmp	r3, #0
 802186a:	f000 810b 	beq.w	8021a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802186e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021870:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021874:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021876:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802187a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802187e:	f000 8114 	beq.w	8021aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8021882:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021886:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802188a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802188e:	fb0a fc0c 	mul.w	ip, sl, ip
 8021892:	fb09 f707 	mul.w	r7, r9, r7
 8021896:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802189a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802189e:	f107 0b20 	add.w	fp, r7, #32
 80218a2:	44cc      	add	ip, r9
 80218a4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80218a8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80218ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80218b0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80218b4:	ea4c 0909 	orr.w	r9, ip, r9
 80218b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80218bc:	8847      	ldrh	r7, [r0, #2]
 80218be:	d019      	beq.n	80218f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80218c0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80218c4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80218c8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80218cc:	fb0a fc0c 	mul.w	ip, sl, ip
 80218d0:	fb08 f807 	mul.w	r8, r8, r7
 80218d4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80218d8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80218dc:	f108 0b20 	add.w	fp, r8, #32
 80218e0:	44bc      	add	ip, r7
 80218e2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80218e6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80218ea:	0a3f      	lsrs	r7, r7, #8
 80218ec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80218f0:	ea4c 0707 	orr.w	r7, ip, r7
 80218f4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80218f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80218fc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021900:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021904:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021908:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802190c:	ea4c 0909 	orr.w	r9, ip, r9
 8021910:	ea4a 0707 	orr.w	r7, sl, r7
 8021914:	2d00      	cmp	r5, #0
 8021916:	f000 80ca 	beq.w	8021aae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 802191a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802191e:	3901      	subs	r1, #1
 8021920:	0049      	lsls	r1, r1, #1
 8021922:	3102      	adds	r1, #2
 8021924:	eb00 0c01 	add.w	ip, r0, r1
 8021928:	5a41      	ldrh	r1, [r0, r1]
 802192a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802192c:	28ff      	cmp	r0, #255	; 0xff
 802192e:	d019      	beq.n	8021964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8021930:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021934:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021936:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802193a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802193e:	fb04 fa01 	mul.w	sl, r4, r1
 8021942:	fb08 f800 	mul.w	r8, r8, r0
 8021946:	f10a 0020 	add.w	r0, sl, #32
 802194a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802194e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021952:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021956:	4441      	add	r1, r8
 8021958:	0a00      	lsrs	r0, r0, #8
 802195a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802195e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021962:	4301      	orrs	r1, r0
 8021964:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021966:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802196a:	2cff      	cmp	r4, #255	; 0xff
 802196c:	d01a      	beq.n	80219a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802196e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021972:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021976:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802197a:	fb04 fa00 	mul.w	sl, r4, r0
 802197e:	fb08 f80c 	mul.w	r8, r8, ip
 8021982:	f10a 0c20 	add.w	ip, sl, #32
 8021986:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802198a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802198e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021992:	4440      	add	r0, r8
 8021994:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021998:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802199c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80219a0:	ea40 000c 	orr.w	r0, r0, ip
 80219a4:	fb15 fc02 	smulbb	ip, r5, r2
 80219a8:	f1c5 0810 	rsb	r8, r5, #16
 80219ac:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80219b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80219b4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80219b8:	eba8 0802 	sub.w	r8, r8, r2
 80219bc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80219c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80219c4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80219c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80219cc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80219d0:	ea4a 0101 	orr.w	r1, sl, r1
 80219d4:	437a      	muls	r2, r7
 80219d6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80219da:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80219de:	fb09 2208 	mla	r2, r9, r8, r2
 80219e2:	ea4b 0000 	orr.w	r0, fp, r0
 80219e6:	fb05 2201 	mla	r2, r5, r1, r2
 80219ea:	fb0c 2200 	mla	r2, ip, r0, r2
 80219ee:	0d57      	lsrs	r7, r2, #21
 80219f0:	0952      	lsrs	r2, r2, #5
 80219f2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80219f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80219fa:	433a      	orrs	r2, r7
 80219fc:	2bff      	cmp	r3, #255	; 0xff
 80219fe:	b292      	uxth	r2, r2
 8021a00:	d102      	bne.n	8021a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8021a02:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021a04:	29ff      	cmp	r1, #255	; 0xff
 8021a06:	d063      	beq.n	8021ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8021a08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021a0a:	1215      	asrs	r5, r2, #8
 8021a0c:	f8be 1000 	ldrh.w	r1, [lr]
 8021a10:	4343      	muls	r3, r0
 8021a12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021a14:	10cf      	asrs	r7, r1, #3
 8021a16:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021a1a:	1c58      	adds	r0, r3, #1
 8021a1c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021a20:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8021a24:	1208      	asrs	r0, r1, #8
 8021a26:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021a2a:	00c9      	lsls	r1, r1, #3
 8021a2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a30:	b2db      	uxtb	r3, r3
 8021a32:	b2c9      	uxtb	r1, r1
 8021a34:	fb10 f003 	smulbb	r0, r0, r3
 8021a38:	fb11 f103 	smulbb	r1, r1, r3
 8021a3c:	fb05 0504 	mla	r5, r5, r4, r0
 8021a40:	10d0      	asrs	r0, r2, #3
 8021a42:	fb17 f703 	smulbb	r7, r7, r3
 8021a46:	00d2      	lsls	r2, r2, #3
 8021a48:	b2ad      	uxth	r5, r5
 8021a4a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021a4e:	b2d2      	uxtb	r2, r2
 8021a50:	fb00 7004 	mla	r0, r0, r4, r7
 8021a54:	1c6b      	adds	r3, r5, #1
 8021a56:	fb02 1204 	mla	r2, r2, r4, r1
 8021a5a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021a5e:	b292      	uxth	r2, r2
 8021a60:	b280      	uxth	r0, r0
 8021a62:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021a66:	1c57      	adds	r7, r2, #1
 8021a68:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021a6c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021a70:	433d      	orrs	r5, r7
 8021a72:	1c47      	adds	r7, r0, #1
 8021a74:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021a78:	097f      	lsrs	r7, r7, #5
 8021a7a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021a7e:	433d      	orrs	r5, r7
 8021a80:	f8ae 5000 	strh.w	r5, [lr]
 8021a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a86:	f10e 0e02 	add.w	lr, lr, #2
 8021a8a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021a8c:	4413      	add	r3, r2
 8021a8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021a90:	9321      	str	r3, [sp, #132]	; 0x84
 8021a92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a94:	441a      	add	r2, r3
 8021a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021a98:	3b01      	subs	r3, #1
 8021a9a:	9222      	str	r2, [sp, #136]	; 0x88
 8021a9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a9e:	e61c      	b.n	80216da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021aa0:	fb08 f000 	mul.w	r0, r8, r0
 8021aa4:	fb09 0303 	mla	r3, r9, r3, r0
 8021aa8:	e6dc      	b.n	8021864 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8021aaa:	46b9      	mov	r9, r7
 8021aac:	e704      	b.n	80218b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8021aae:	f1c2 0110 	rsb	r1, r2, #16
 8021ab2:	437a      	muls	r2, r7
 8021ab4:	fb09 2901 	mla	r9, r9, r1, r2
 8021ab8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021abc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021ac0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021ac4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ac8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021acc:	4302      	orrs	r2, r0
 8021ace:	e795      	b.n	80219fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8021ad0:	f8ae 2000 	strh.w	r2, [lr]
 8021ad4:	e7d6      	b.n	8021a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8021ad6:	b017      	add	sp, #92	; 0x5c
 8021ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021adc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ae0:	b085      	sub	sp, #20
 8021ae2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8021ae6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8021aea:	2800      	cmp	r0, #0
 8021aec:	9103      	str	r1, [sp, #12]
 8021aee:	fb00 7406 	mla	r4, r0, r6, r7
 8021af2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8021af6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021afa:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8021afe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021b02:	eb02 0904 	add.w	r9, r2, r4
 8021b06:	9501      	str	r5, [sp, #4]
 8021b08:	f2c0 8141 	blt.w	8021d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021b0c:	4583      	cmp	fp, r0
 8021b0e:	f340 813e 	ble.w	8021d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8021b12:	2f00      	cmp	r7, #0
 8021b14:	f2c0 8137 	blt.w	8021d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021b18:	42be      	cmp	r6, r7
 8021b1a:	f340 8134 	ble.w	8021d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8021b1e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8021b22:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8021b26:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021b2a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021b2e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021b32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b36:	4355      	muls	r5, r2
 8021b38:	fb0c f203 	mul.w	r2, ip, r3
 8021b3c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021b40:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021b44:	441d      	add	r5, r3
 8021b46:	f102 0320 	add.w	r3, r2, #32
 8021b4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021b4e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021b52:	0a1b      	lsrs	r3, r3, #8
 8021b54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b58:	431c      	orrs	r4, r3
 8021b5a:	1c7b      	adds	r3, r7, #1
 8021b5c:	f100 811c 	bmi.w	8021d98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021b60:	429e      	cmp	r6, r3
 8021b62:	f340 8119 	ble.w	8021d98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021b66:	2900      	cmp	r1, #0
 8021b68:	f000 8119 	beq.w	8021d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8021b6c:	9a01      	ldr	r2, [sp, #4]
 8021b6e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021b72:	8855      	ldrh	r5, [r2, #2]
 8021b74:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021b78:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021b7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021b80:	fb08 f802 	mul.w	r8, r8, r2
 8021b84:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021b88:	435d      	muls	r5, r3
 8021b8a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021b8e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021b92:	44d0      	add	r8, sl
 8021b94:	f105 0a20 	add.w	sl, r5, #32
 8021b98:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021b9c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021ba0:	0a2d      	lsrs	r5, r5, #8
 8021ba2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ba6:	432a      	orrs	r2, r5
 8021ba8:	3001      	adds	r0, #1
 8021baa:	f100 80fe 	bmi.w	8021daa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021bae:	4583      	cmp	fp, r0
 8021bb0:	f340 80fb 	ble.w	8021daa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021bb4:	f1be 0f00 	cmp.w	lr, #0
 8021bb8:	f000 80fc 	beq.w	8021db4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8021bbc:	2f00      	cmp	r7, #0
 8021bbe:	f2c0 80f1 	blt.w	8021da4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021bc2:	42be      	cmp	r6, r7
 8021bc4:	f340 80ee 	ble.w	8021da4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021bc8:	9801      	ldr	r0, [sp, #4]
 8021bca:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021bce:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021bd2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021bd6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021bda:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021bde:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021be2:	fb0a fa00 	mul.w	sl, sl, r0
 8021be6:	fb05 f808 	mul.w	r8, r5, r8
 8021bea:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021bee:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021bf2:	4482      	add	sl, r0
 8021bf4:	f108 0020 	add.w	r0, r8, #32
 8021bf8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021bfc:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021c00:	0a00      	lsrs	r0, r0, #8
 8021c02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c06:	ea4b 0b00 	orr.w	fp, fp, r0
 8021c0a:	3701      	adds	r7, #1
 8021c0c:	f100 80d7 	bmi.w	8021dbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021c10:	42be      	cmp	r6, r7
 8021c12:	f340 80d4 	ble.w	8021dbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8021c16:	2900      	cmp	r1, #0
 8021c18:	f000 80d4 	beq.w	8021dc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8021c1c:	3601      	adds	r6, #1
 8021c1e:	9801      	ldr	r0, [sp, #4]
 8021c20:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021c24:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021c28:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021c2c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021c30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c34:	fb09 f906 	mul.w	r9, r9, r6
 8021c38:	fb07 f800 	mul.w	r8, r7, r0
 8021c3c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021c40:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021c44:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021c48:	44d1      	add	r9, sl
 8021c4a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021c4e:	f108 0020 	add.w	r0, r8, #32
 8021c52:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021c56:	0a00      	lsrs	r0, r0, #8
 8021c58:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c5c:	4330      	orrs	r0, r6
 8021c5e:	b28e      	uxth	r6, r1
 8021c60:	fa1f f98e 	uxth.w	r9, lr
 8021c64:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021c68:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021c6c:	fb06 f809 	mul.w	r8, r6, r9
 8021c70:	0136      	lsls	r6, r6, #4
 8021c72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c76:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021c7a:	9601      	str	r6, [sp, #4]
 8021c7c:	ea4a 0404 	orr.w	r4, sl, r4
 8021c80:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021c84:	fa1f f689 	uxth.w	r6, r9
 8021c88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021c8c:	fb11 f90e 	smulbb	r9, r1, lr
 8021c90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c94:	9602      	str	r6, [sp, #8]
 8021c96:	4626      	mov	r6, r4
 8021c98:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021c9c:	f1ce 0410 	rsb	r4, lr, #16
 8021ca0:	ea4a 0202 	orr.w	r2, sl, r2
 8021ca4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021ca8:	1a64      	subs	r4, r4, r1
 8021caa:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021cae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021cb2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021cb6:	434a      	muls	r2, r1
 8021cb8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021cbc:	ea4a 0000 	orr.w	r0, sl, r0
 8021cc0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021cc4:	fb04 2406 	mla	r4, r4, r6, r2
 8021cc8:	9903      	ldr	r1, [sp, #12]
 8021cca:	fb09 4200 	mla	r2, r9, r0, r4
 8021cce:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021cd2:	9801      	ldr	r0, [sp, #4]
 8021cd4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021cd8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021cdc:	8809      	ldrh	r1, [r1, #0]
 8021cde:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021ce2:	ea44 0b0b 	orr.w	fp, r4, fp
 8021ce6:	9c02      	ldr	r4, [sp, #8]
 8021ce8:	1b00      	subs	r0, r0, r4
 8021cea:	9c01      	ldr	r4, [sp, #4]
 8021cec:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021cf0:	eba4 0608 	sub.w	r6, r4, r8
 8021cf4:	b280      	uxth	r0, r0
 8021cf6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021cfa:	b2b6      	uxth	r6, r6
 8021cfc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021d00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d04:	4373      	muls	r3, r6
 8021d06:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021d0a:	fb0c 3300 	mla	r3, ip, r0, r3
 8021d0e:	9802      	ldr	r0, [sp, #8]
 8021d10:	ea42 0e0e 	orr.w	lr, r2, lr
 8021d14:	fb00 3505 	mla	r5, r0, r5, r3
 8021d18:	120b      	asrs	r3, r1, #8
 8021d1a:	10c8      	asrs	r0, r1, #3
 8021d1c:	fb08 5707 	mla	r7, r8, r7, r5
 8021d20:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021d24:	00c9      	lsls	r1, r1, #3
 8021d26:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021d2a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8021d2e:	fa1f f28e 	uxth.w	r2, lr
 8021d32:	b2c9      	uxtb	r1, r1
 8021d34:	b2ff      	uxtb	r7, r7
 8021d36:	437b      	muls	r3, r7
 8021d38:	4378      	muls	r0, r7
 8021d3a:	434f      	muls	r7, r1
 8021d3c:	1c59      	adds	r1, r3, #1
 8021d3e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021d42:	1213      	asrs	r3, r2, #8
 8021d44:	f023 0307 	bic.w	r3, r3, #7
 8021d48:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021d4c:	1c41      	adds	r1, r0, #1
 8021d4e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021d52:	10d1      	asrs	r1, r2, #3
 8021d54:	021b      	lsls	r3, r3, #8
 8021d56:	f021 0103 	bic.w	r1, r1, #3
 8021d5a:	00d2      	lsls	r2, r2, #3
 8021d5c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021d60:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021d64:	00c9      	lsls	r1, r1, #3
 8021d66:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021d6a:	430b      	orrs	r3, r1
 8021d6c:	1c79      	adds	r1, r7, #1
 8021d6e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021d72:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021d76:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021d7a:	431a      	orrs	r2, r3
 8021d7c:	9b03      	ldr	r3, [sp, #12]
 8021d7e:	801a      	strh	r2, [r3, #0]
 8021d80:	b005      	add	sp, #20
 8021d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d86:	f04f 0c00 	mov.w	ip, #0
 8021d8a:	4664      	mov	r4, ip
 8021d8c:	e6e5      	b.n	8021b5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8021d8e:	2300      	movs	r3, #0
 8021d90:	469c      	mov	ip, r3
 8021d92:	461a      	mov	r2, r3
 8021d94:	461c      	mov	r4, r3
 8021d96:	e707      	b.n	8021ba8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021d98:	2300      	movs	r3, #0
 8021d9a:	461a      	mov	r2, r3
 8021d9c:	e704      	b.n	8021ba8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021d9e:	460b      	mov	r3, r1
 8021da0:	460a      	mov	r2, r1
 8021da2:	e701      	b.n	8021ba8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021da4:	2500      	movs	r5, #0
 8021da6:	46ab      	mov	fp, r5
 8021da8:	e72f      	b.n	8021c0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8021daa:	2700      	movs	r7, #0
 8021dac:	463d      	mov	r5, r7
 8021dae:	4638      	mov	r0, r7
 8021db0:	46bb      	mov	fp, r7
 8021db2:	e754      	b.n	8021c5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021db4:	4677      	mov	r7, lr
 8021db6:	4675      	mov	r5, lr
 8021db8:	4670      	mov	r0, lr
 8021dba:	46f3      	mov	fp, lr
 8021dbc:	e74f      	b.n	8021c5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021dbe:	2700      	movs	r7, #0
 8021dc0:	4638      	mov	r0, r7
 8021dc2:	e74c      	b.n	8021c5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021dc4:	460f      	mov	r7, r1
 8021dc6:	4608      	mov	r0, r1
 8021dc8:	e749      	b.n	8021c5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dd0:	b093      	sub	sp, #76	; 0x4c
 8021dd2:	9210      	str	r2, [sp, #64]	; 0x40
 8021dd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021dd6:	9011      	str	r0, [sp, #68]	; 0x44
 8021dd8:	910e      	str	r1, [sp, #56]	; 0x38
 8021dda:	6850      	ldr	r0, [r2, #4]
 8021ddc:	9306      	str	r3, [sp, #24]
 8021dde:	6812      	ldr	r2, [r2, #0]
 8021de0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021de4:	fb00 1303 	mla	r3, r0, r3, r1
 8021de8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021dec:	9307      	str	r3, [sp, #28]
 8021dee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	9308      	str	r3, [sp, #32]
 8021df4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021df6:	685b      	ldr	r3, [r3, #4]
 8021df8:	9309      	str	r3, [sp, #36]	; 0x24
 8021dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	dc03      	bgt.n	8021e08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021e00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	f340 83b6 	ble.w	8022574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8021e08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021e12:	1e48      	subs	r0, r1, #1
 8021e14:	1e55      	subs	r5, r2, #1
 8021e16:	9b06      	ldr	r3, [sp, #24]
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	f340 8165 	ble.w	80220e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021e1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021e20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021e22:	1436      	asrs	r6, r6, #16
 8021e24:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021e28:	d406      	bmi.n	8021e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021e2a:	4286      	cmp	r6, r0
 8021e2c:	da04      	bge.n	8021e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	db02      	blt.n	8021e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021e32:	42ab      	cmp	r3, r5
 8021e34:	f2c0 8159 	blt.w	80220ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021e38:	3601      	adds	r6, #1
 8021e3a:	f100 8146 	bmi.w	80220ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021e3e:	42b1      	cmp	r1, r6
 8021e40:	f2c0 8143 	blt.w	80220ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021e44:	3301      	adds	r3, #1
 8021e46:	f100 8140 	bmi.w	80220ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021e4a:	429a      	cmp	r2, r3
 8021e4c:	f2c0 813d 	blt.w	80220ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021e50:	9b06      	ldr	r3, [sp, #24]
 8021e52:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021e56:	9f07      	ldr	r7, [sp, #28]
 8021e58:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	f340 8166 	ble.w	802212e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8021e62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021e64:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021e66:	1418      	asrs	r0, r3, #16
 8021e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021e6a:	142d      	asrs	r5, r5, #16
 8021e6c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021e70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021e72:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021e76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021e7c:	f100 81f0 	bmi.w	8022260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021e80:	f102 3eff 	add.w	lr, r2, #4294967295
 8021e84:	4575      	cmp	r5, lr
 8021e86:	f280 81eb 	bge.w	8022260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021e8a:	2800      	cmp	r0, #0
 8021e8c:	f2c0 81e8 	blt.w	8022260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021e90:	f103 3eff 	add.w	lr, r3, #4294967295
 8021e94:	4570      	cmp	r0, lr
 8021e96:	f280 81e3 	bge.w	8022260 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021e9a:	b212      	sxth	r2, r2
 8021e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e9e:	fa1f fe81 	uxth.w	lr, r1
 8021ea2:	fb00 5002 	mla	r0, r0, r2, r5
 8021ea6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021eaa:	eb03 0a00 	add.w	sl, r3, r0
 8021eae:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021eb2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021eb6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021eba:	b29b      	uxth	r3, r3
 8021ebc:	f1bc 0f00 	cmp.w	ip, #0
 8021ec0:	f000 817b 	beq.w	80221ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021ec4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021ec8:	eb0a 0b02 	add.w	fp, sl, r2
 8021ecc:	fa1f fa8c 	uxth.w	sl, ip
 8021ed0:	940a      	str	r4, [sp, #40]	; 0x28
 8021ed2:	fb0a fe0e 	mul.w	lr, sl, lr
 8021ed6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021eda:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021ede:	eba5 050e 	sub.w	r5, r5, lr
 8021ee2:	940b      	str	r4, [sp, #44]	; 0x2c
 8021ee4:	fa1f fa8a 	uxth.w	sl, sl
 8021ee8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021eea:	b2ad      	uxth	r5, r5
 8021eec:	eba3 030a 	sub.w	r3, r3, sl
 8021ef0:	fb08 f505 	mul.w	r5, r8, r5
 8021ef4:	b29b      	uxth	r3, r3
 8021ef6:	fb09 5303 	mla	r3, r9, r3, r5
 8021efa:	fb0a 3304 	mla	r3, sl, r4, r3
 8021efe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f00:	fb0e 3304 	mla	r3, lr, r4, r3
 8021f04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	f000 80d1 	beq.w	80220b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021f0e:	9c08      	ldr	r4, [sp, #32]
 8021f10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f14:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021f18:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021f1c:	f000 8152 	beq.w	80221c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021f20:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021f24:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021f28:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f2c:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f30:	fb09 f000 	mul.w	r0, r9, r0
 8021f34:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021f38:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021f3c:	f100 0b20 	add.w	fp, r0, #32
 8021f40:	44ce      	add	lr, r9
 8021f42:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021f46:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021f4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f4e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f52:	ea4e 0909 	orr.w	r9, lr, r9
 8021f56:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f5a:	8868      	ldrh	r0, [r5, #2]
 8021f5c:	d019      	beq.n	8021f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021f5e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021f62:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021f66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f6a:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f6e:	fb08 f800 	mul.w	r8, r8, r0
 8021f72:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021f76:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021f7a:	f108 0b20 	add.w	fp, r8, #32
 8021f7e:	4486      	add	lr, r0
 8021f80:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021f84:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021f88:	0a00      	lsrs	r0, r0, #8
 8021f8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f8e:	ea4e 0000 	orr.w	r0, lr, r0
 8021f92:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021f96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021f9a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021f9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021fa2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021fa6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021faa:	ea4e 0909 	orr.w	r9, lr, r9
 8021fae:	ea4a 0000 	orr.w	r0, sl, r0
 8021fb2:	f1bc 0f00 	cmp.w	ip, #0
 8021fb6:	f000 8107 	beq.w	80221c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8021fba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021fbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021fc0:	3a01      	subs	r2, #1
 8021fc2:	2cff      	cmp	r4, #255	; 0xff
 8021fc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021fc8:	f102 0202 	add.w	r2, r2, #2
 8021fcc:	eb05 0e02 	add.w	lr, r5, r2
 8021fd0:	5aaa      	ldrh	r2, [r5, r2]
 8021fd2:	d018      	beq.n	8022006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021fd4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021fd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021fdc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021fe0:	fb04 fa02 	mul.w	sl, r4, r2
 8021fe4:	fb08 f805 	mul.w	r8, r8, r5
 8021fe8:	f10a 0520 	add.w	r5, sl, #32
 8021fec:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021ff0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021ff4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021ff8:	4442      	add	r2, r8
 8021ffa:	0a2d      	lsrs	r5, r5, #8
 8021ffc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022000:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022004:	432a      	orrs	r2, r5
 8022006:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022008:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802200c:	2cff      	cmp	r4, #255	; 0xff
 802200e:	d01a      	beq.n	8022046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8022010:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022014:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022018:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802201c:	fb04 fa05 	mul.w	sl, r4, r5
 8022020:	fb08 f80e 	mul.w	r8, r8, lr
 8022024:	f10a 0e20 	add.w	lr, sl, #32
 8022028:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802202c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022030:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022034:	4445      	add	r5, r8
 8022036:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802203a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802203e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022042:	ea45 050e 	orr.w	r5, r5, lr
 8022046:	fb1c fe01 	smulbb	lr, ip, r1
 802204a:	f1cc 0810 	rsb	r8, ip, #16
 802204e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022052:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022056:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802205a:	eba8 0801 	sub.w	r8, r8, r1
 802205e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022062:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022066:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802206a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802206e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022072:	ea4a 0202 	orr.w	r2, sl, r2
 8022076:	4341      	muls	r1, r0
 8022078:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802207c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022080:	fb09 1108 	mla	r1, r9, r8, r1
 8022084:	ea4b 0505 	orr.w	r5, fp, r5
 8022088:	fb0c 1102 	mla	r1, ip, r2, r1
 802208c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022090:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022094:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022098:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802209c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80220a0:	ea42 0e0e 	orr.w	lr, r2, lr
 80220a4:	fa1f f28e 	uxth.w	r2, lr
 80220a8:	2bff      	cmp	r3, #255	; 0xff
 80220aa:	f040 80a1 	bne.w	80221f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80220ae:	803a      	strh	r2, [r7, #0]
 80220b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80220b2:	3702      	adds	r7, #2
 80220b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80220b6:	4413      	add	r3, r2
 80220b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80220ba:	931d      	str	r3, [sp, #116]	; 0x74
 80220bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80220be:	441a      	add	r2, r3
 80220c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80220c2:	3b01      	subs	r3, #1
 80220c4:	921e      	str	r2, [sp, #120]	; 0x78
 80220c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80220c8:	e6c7      	b.n	8021e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80220ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80220cc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80220ce:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80220d0:	4433      	add	r3, r6
 80220d2:	931d      	str	r3, [sp, #116]	; 0x74
 80220d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80220d6:	441c      	add	r4, r3
 80220d8:	9b06      	ldr	r3, [sp, #24]
 80220da:	3b01      	subs	r3, #1
 80220dc:	941e      	str	r4, [sp, #120]	; 0x78
 80220de:	9306      	str	r3, [sp, #24]
 80220e0:	9b07      	ldr	r3, [sp, #28]
 80220e2:	3302      	adds	r3, #2
 80220e4:	9307      	str	r3, [sp, #28]
 80220e6:	e696      	b.n	8021e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80220e8:	d028      	beq.n	802213c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80220ea:	9b06      	ldr	r3, [sp, #24]
 80220ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80220ee:	3b01      	subs	r3, #1
 80220f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80220f2:	fb00 5003 	mla	r0, r0, r3, r5
 80220f6:	1400      	asrs	r0, r0, #16
 80220f8:	f53f aeaa 	bmi.w	8021e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80220fc:	3901      	subs	r1, #1
 80220fe:	4288      	cmp	r0, r1
 8022100:	f6bf aea6 	bge.w	8021e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022104:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022106:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022108:	fb01 0303 	mla	r3, r1, r3, r0
 802210c:	141b      	asrs	r3, r3, #16
 802210e:	f53f ae9f 	bmi.w	8021e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022112:	3a01      	subs	r2, #1
 8022114:	4293      	cmp	r3, r2
 8022116:	f6bf ae9b 	bge.w	8021e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802211a:	9b06      	ldr	r3, [sp, #24]
 802211c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022120:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022124:	930f      	str	r3, [sp, #60]	; 0x3c
 8022126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022128:	2b00      	cmp	r3, #0
 802212a:	f300 80b6 	bgt.w	802229a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802212e:	9b06      	ldr	r3, [sp, #24]
 8022130:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022134:	9b07      	ldr	r3, [sp, #28]
 8022136:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802213a:	9307      	str	r3, [sp, #28]
 802213c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802213e:	2b00      	cmp	r3, #0
 8022140:	f340 8218 	ble.w	8022574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8022144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022148:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802214a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802214e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022152:	eef0 6a62 	vmov.f32	s13, s5
 8022156:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802215a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802215e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022162:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022166:	eef0 6a43 	vmov.f32	s13, s6
 802216a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802216e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022172:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022176:	ee61 7a27 	vmul.f32	s15, s2, s15
 802217a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802217e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022182:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022186:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802218a:	ee12 2a90 	vmov	r2, s5
 802218e:	eef0 2a47 	vmov.f32	s5, s14
 8022192:	fb92 f3f3 	sdiv	r3, r2, r3
 8022196:	ee13 2a10 	vmov	r2, s6
 802219a:	931f      	str	r3, [sp, #124]	; 0x7c
 802219c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802219e:	eeb0 3a67 	vmov.f32	s6, s15
 80221a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80221a6:	9320      	str	r3, [sp, #128]	; 0x80
 80221a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221ac:	3b01      	subs	r3, #1
 80221ae:	930e      	str	r3, [sp, #56]	; 0x38
 80221b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80221b2:	bf08      	it	eq
 80221b4:	4613      	moveq	r3, r2
 80221b6:	9306      	str	r3, [sp, #24]
 80221b8:	e61f      	b.n	8021dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80221ba:	fb08 f505 	mul.w	r5, r8, r5
 80221be:	fb09 5303 	mla	r3, r9, r3, r5
 80221c2:	e69f      	b.n	8021f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80221c4:	4681      	mov	r9, r0
 80221c6:	e6c6      	b.n	8021f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80221c8:	f1c1 0210 	rsb	r2, r1, #16
 80221cc:	4341      	muls	r1, r0
 80221ce:	fb09 1902 	mla	r9, r9, r2, r1
 80221d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80221d6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80221da:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80221de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80221e2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80221e6:	ea42 0909 	orr.w	r9, r2, r9
 80221ea:	fa1f f289 	uxth.w	r2, r9
 80221ee:	e75b      	b.n	80220a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80221f0:	f8b7 c000 	ldrh.w	ip, [r7]
 80221f4:	43db      	mvns	r3, r3
 80221f6:	ea4f 202c 	mov.w	r0, ip, asr #8
 80221fa:	fa5f fe83 	uxtb.w	lr, r3
 80221fe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022202:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022206:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802220a:	fb00 f00e 	mul.w	r0, r0, lr
 802220e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022212:	b2db      	uxtb	r3, r3
 8022214:	1c41      	adds	r1, r0, #1
 8022216:	fb05 f50e 	mul.w	r5, r5, lr
 802221a:	fb03 f30e 	mul.w	r3, r3, lr
 802221e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022222:	1211      	asrs	r1, r2, #8
 8022224:	f021 0107 	bic.w	r1, r1, #7
 8022228:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802222c:	48d3      	ldr	r0, [pc, #844]	; (802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802222e:	b2c9      	uxtb	r1, r1
 8022230:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022234:	1c69      	adds	r1, r5, #1
 8022236:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802223a:	10d1      	asrs	r1, r2, #3
 802223c:	00d2      	lsls	r2, r2, #3
 802223e:	f021 0103 	bic.w	r1, r1, #3
 8022242:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022246:	00c9      	lsls	r1, r1, #3
 8022248:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802224c:	4301      	orrs	r1, r0
 802224e:	1c58      	adds	r0, r3, #1
 8022250:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022254:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022258:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802225c:	430a      	orrs	r2, r1
 802225e:	e726      	b.n	80220ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8022260:	f115 0e01 	adds.w	lr, r5, #1
 8022264:	f53f af24 	bmi.w	80220b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022268:	4572      	cmp	r2, lr
 802226a:	f6ff af21 	blt.w	80220b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802226e:	f110 0e01 	adds.w	lr, r0, #1
 8022272:	f53f af1d 	bmi.w	80220b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022276:	4573      	cmp	r3, lr
 8022278:	f6ff af1a 	blt.w	80220b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802227c:	b21b      	sxth	r3, r3
 802227e:	b212      	sxth	r2, r2
 8022280:	9301      	str	r3, [sp, #4]
 8022282:	9200      	str	r2, [sp, #0]
 8022284:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022288:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802228c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022290:	4639      	mov	r1, r7
 8022292:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022294:	f7ff fc22 	bl	8021adc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022298:	e70a      	b.n	80220b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802229a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802229c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80222a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80222a2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80222a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80222a8:	fa1f fc82 	uxth.w	ip, r2
 80222ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80222b2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80222b6:	141f      	asrs	r7, r3, #16
 80222b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80222ba:	141b      	asrs	r3, r3, #16
 80222bc:	fb01 3707 	mla	r7, r1, r7, r3
 80222c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222c2:	eb03 0a07 	add.w	sl, r3, r7
 80222c6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80222ca:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80222ce:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80222d2:	b29b      	uxth	r3, r3
 80222d4:	2d00      	cmp	r5, #0
 80222d6:	f000 80fe 	beq.w	80224d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80222da:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80222de:	eb0a 0b01 	add.w	fp, sl, r1
 80222e2:	fa1f fa85 	uxth.w	sl, r5
 80222e6:	940c      	str	r4, [sp, #48]	; 0x30
 80222e8:	fb0a fc0c 	mul.w	ip, sl, ip
 80222ec:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80222f0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80222f4:	eba0 000c 	sub.w	r0, r0, ip
 80222f8:	940d      	str	r4, [sp, #52]	; 0x34
 80222fa:	fa1f fa8a 	uxth.w	sl, sl
 80222fe:	b280      	uxth	r0, r0
 8022300:	eba3 030a 	sub.w	r3, r3, sl
 8022304:	fb08 f000 	mul.w	r0, r8, r0
 8022308:	b29b      	uxth	r3, r3
 802230a:	fb09 0303 	mla	r3, r9, r3, r0
 802230e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022310:	fb0a 3300 	mla	r3, sl, r0, r3
 8022314:	fb0c 3304 	mla	r3, ip, r4, r3
 8022318:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802231c:	2b00      	cmp	r3, #0
 802231e:	f000 80cc 	beq.w	80224ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8022322:	9808      	ldr	r0, [sp, #32]
 8022324:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022328:	9c08      	ldr	r4, [sp, #32]
 802232a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802232e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022332:	f000 80d5 	beq.w	80224e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022336:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802233a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802233e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022342:	fb0a fc0c 	mul.w	ip, sl, ip
 8022346:	fb09 f707 	mul.w	r7, r9, r7
 802234a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802234e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022352:	f107 0b20 	add.w	fp, r7, #32
 8022356:	44cc      	add	ip, r9
 8022358:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802235c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022360:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022364:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022368:	ea4c 0909 	orr.w	r9, ip, r9
 802236c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022370:	8847      	ldrh	r7, [r0, #2]
 8022372:	d019      	beq.n	80223a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8022374:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022378:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802237c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022380:	fb0a fc0c 	mul.w	ip, sl, ip
 8022384:	fb08 f807 	mul.w	r8, r8, r7
 8022388:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802238c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022390:	f108 0b20 	add.w	fp, r8, #32
 8022394:	44bc      	add	ip, r7
 8022396:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802239a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802239e:	0a3f      	lsrs	r7, r7, #8
 80223a0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80223a4:	ea4c 0707 	orr.w	r7, ip, r7
 80223a8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80223ac:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80223b0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80223b4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80223b8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80223bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80223c0:	ea4c 0909 	orr.w	r9, ip, r9
 80223c4:	ea4a 0707 	orr.w	r7, sl, r7
 80223c8:	2d00      	cmp	r5, #0
 80223ca:	f000 808b 	beq.w	80224e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80223ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80223d2:	3901      	subs	r1, #1
 80223d4:	0049      	lsls	r1, r1, #1
 80223d6:	3102      	adds	r1, #2
 80223d8:	eb00 0c01 	add.w	ip, r0, r1
 80223dc:	5a41      	ldrh	r1, [r0, r1]
 80223de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80223e0:	28ff      	cmp	r0, #255	; 0xff
 80223e2:	d019      	beq.n	8022418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80223e4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80223e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80223ea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80223ee:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80223f2:	fb04 fa01 	mul.w	sl, r4, r1
 80223f6:	fb08 f800 	mul.w	r8, r8, r0
 80223fa:	f10a 0020 	add.w	r0, sl, #32
 80223fe:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022402:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022406:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802240a:	4441      	add	r1, r8
 802240c:	0a00      	lsrs	r0, r0, #8
 802240e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022412:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022416:	4301      	orrs	r1, r0
 8022418:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802241a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802241e:	2cff      	cmp	r4, #255	; 0xff
 8022420:	d01a      	beq.n	8022458 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8022422:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022426:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802242a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802242e:	fb04 fa00 	mul.w	sl, r4, r0
 8022432:	fb08 f80c 	mul.w	r8, r8, ip
 8022436:	f10a 0c20 	add.w	ip, sl, #32
 802243a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802243e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022442:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022446:	4440      	add	r0, r8
 8022448:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802244c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022450:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022454:	ea40 000c 	orr.w	r0, r0, ip
 8022458:	fb15 fc02 	smulbb	ip, r5, r2
 802245c:	f1c5 0810 	rsb	r8, r5, #16
 8022460:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022464:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022468:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802246c:	eba8 0802 	sub.w	r8, r8, r2
 8022470:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022474:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022478:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802247c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022480:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022484:	ea4a 0101 	orr.w	r1, sl, r1
 8022488:	437a      	muls	r2, r7
 802248a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802248e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022492:	fb09 2208 	mla	r2, r9, r8, r2
 8022496:	ea4b 0000 	orr.w	r0, fp, r0
 802249a:	fb05 2201 	mla	r2, r5, r1, r2
 802249e:	fb0c 2200 	mla	r2, ip, r0, r2
 80224a2:	0d57      	lsrs	r7, r2, #21
 80224a4:	0952      	lsrs	r2, r2, #5
 80224a6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80224aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80224ae:	433a      	orrs	r2, r7
 80224b0:	2bff      	cmp	r3, #255	; 0xff
 80224b2:	b292      	uxth	r2, r2
 80224b4:	d127      	bne.n	8022506 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80224b6:	f8ae 2000 	strh.w	r2, [lr]
 80224ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80224bc:	f10e 0e02 	add.w	lr, lr, #2
 80224c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80224c2:	4413      	add	r3, r2
 80224c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80224c6:	931d      	str	r3, [sp, #116]	; 0x74
 80224c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80224ca:	441a      	add	r2, r3
 80224cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80224ce:	3b01      	subs	r3, #1
 80224d0:	921e      	str	r2, [sp, #120]	; 0x78
 80224d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80224d4:	e627      	b.n	8022126 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80224d6:	fb08 f000 	mul.w	r0, r8, r0
 80224da:	fb09 0303 	mla	r3, r9, r3, r0
 80224de:	e71b      	b.n	8022318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 80224e0:	46b9      	mov	r9, r7
 80224e2:	e743      	b.n	802236c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 80224e4:	f1c2 0110 	rsb	r1, r2, #16
 80224e8:	437a      	muls	r2, r7
 80224ea:	fb09 2901 	mla	r9, r9, r1, r2
 80224ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80224f2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80224f6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80224fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022502:	4302      	orrs	r2, r0
 8022504:	e7d4      	b.n	80224b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8022506:	f8be 7000 	ldrh.w	r7, [lr]
 802250a:	43db      	mvns	r3, r3
 802250c:	4c1b      	ldr	r4, [pc, #108]	; (802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802250e:	1238      	asrs	r0, r7, #8
 8022510:	fa5f fc83 	uxtb.w	ip, r3
 8022514:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022518:	10fd      	asrs	r5, r7, #3
 802251a:	00fb      	lsls	r3, r7, #3
 802251c:	fb00 f00c 	mul.w	r0, r0, ip
 8022520:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022524:	b2db      	uxtb	r3, r3
 8022526:	fb05 f10c 	mul.w	r1, r5, ip
 802252a:	1c45      	adds	r5, r0, #1
 802252c:	fb03 f30c 	mul.w	r3, r3, ip
 8022530:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022534:	1215      	asrs	r5, r2, #8
 8022536:	f025 0507 	bic.w	r5, r5, #7
 802253a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802253e:	1c4d      	adds	r5, r1, #1
 8022540:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022544:	10d1      	asrs	r1, r2, #3
 8022546:	b2c0      	uxtb	r0, r0
 8022548:	f021 0103 	bic.w	r1, r1, #3
 802254c:	00d2      	lsls	r2, r2, #3
 802254e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022552:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022556:	00c9      	lsls	r1, r1, #3
 8022558:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802255c:	4308      	orrs	r0, r1
 802255e:	1c59      	adds	r1, r3, #1
 8022560:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022564:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022568:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802256c:	4318      	orrs	r0, r3
 802256e:	f8ae 0000 	strh.w	r0, [lr]
 8022572:	e7a2      	b.n	80224ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8022574:	b013      	add	sp, #76	; 0x4c
 8022576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802257a:	bf00      	nop
 802257c:	fffff800 	.word	0xfffff800

08022580 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022584:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022588:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802258c:	fb05 4c03 	mla	ip, r5, r3, r4
 8022590:	2d00      	cmp	r5, #0
 8022592:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022596:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802259a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802259e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80225a2:	8808      	ldrh	r0, [r1, #0]
 80225a4:	f2c0 80a7 	blt.w	80226f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80225a8:	45aa      	cmp	sl, r5
 80225aa:	f340 80a4 	ble.w	80226f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80225ae:	2c00      	cmp	r4, #0
 80225b0:	f2c0 809f 	blt.w	80226f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80225b4:	42a3      	cmp	r3, r4
 80225b6:	f340 809c 	ble.w	80226f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80225ba:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80225be:	1c62      	adds	r2, r4, #1
 80225c0:	f100 809c 	bmi.w	80226fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80225c4:	4293      	cmp	r3, r2
 80225c6:	f340 8099 	ble.w	80226fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80225ca:	f1b9 0f00 	cmp.w	r9, #0
 80225ce:	f000 8095 	beq.w	80226fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80225d2:	f8be c002 	ldrh.w	ip, [lr, #2]
 80225d6:	3501      	adds	r5, #1
 80225d8:	f100 8094 	bmi.w	8022704 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80225dc:	45aa      	cmp	sl, r5
 80225de:	f340 8091 	ble.w	8022704 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80225e2:	2f00      	cmp	r7, #0
 80225e4:	f000 808e 	beq.w	8022704 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80225e8:	2c00      	cmp	r4, #0
 80225ea:	f2c0 8089 	blt.w	8022700 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80225ee:	42a3      	cmp	r3, r4
 80225f0:	f340 8086 	ble.w	8022700 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80225f4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80225f8:	3401      	adds	r4, #1
 80225fa:	f100 8086 	bmi.w	802270a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80225fe:	42a3      	cmp	r3, r4
 8022600:	f340 8083 	ble.w	802270a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022604:	f1b9 0f00 	cmp.w	r9, #0
 8022608:	d07f      	beq.n	802270a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802260a:	3301      	adds	r3, #1
 802260c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8022610:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022614:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022618:	fb19 fe07 	smulbb	lr, r9, r7
 802261c:	f1c7 0210 	rsb	r2, r7, #16
 8022620:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022624:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022628:	eba2 0209 	sub.w	r2, r2, r9
 802262c:	ea44 0808 	orr.w	r8, r4, r8
 8022630:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022634:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022638:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802263c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022640:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022644:	ea44 0c0c 	orr.w	ip, r4, ip
 8022648:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802264c:	fb04 f40c 	mul.w	r4, r4, ip
 8022650:	fb02 4808 	mla	r8, r2, r8, r4
 8022654:	041a      	lsls	r2, r3, #16
 8022656:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802265a:	b2b4      	uxth	r4, r6
 802265c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022660:	43f6      	mvns	r6, r6
 8022662:	4313      	orrs	r3, r2
 8022664:	042a      	lsls	r2, r5, #16
 8022666:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802266a:	b2f6      	uxtb	r6, r6
 802266c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022670:	fb0e 8303 	mla	r3, lr, r3, r8
 8022674:	432a      	orrs	r2, r5
 8022676:	fb07 3202 	mla	r2, r7, r2, r3
 802267a:	10c7      	asrs	r7, r0, #3
 802267c:	0d53      	lsrs	r3, r2, #21
 802267e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022682:	0952      	lsrs	r2, r2, #5
 8022684:	fb17 f706 	smulbb	r7, r7, r6
 8022688:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802268c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022690:	431a      	orrs	r2, r3
 8022692:	b293      	uxth	r3, r2
 8022694:	1202      	asrs	r2, r0, #8
 8022696:	121d      	asrs	r5, r3, #8
 8022698:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802269c:	00c0      	lsls	r0, r0, #3
 802269e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80226a2:	fb12 f206 	smulbb	r2, r2, r6
 80226a6:	b2c0      	uxtb	r0, r0
 80226a8:	fb05 2504 	mla	r5, r5, r4, r2
 80226ac:	10da      	asrs	r2, r3, #3
 80226ae:	fb10 f006 	smulbb	r0, r0, r6
 80226b2:	00db      	lsls	r3, r3, #3
 80226b4:	b2ad      	uxth	r5, r5
 80226b6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80226ba:	b2db      	uxtb	r3, r3
 80226bc:	fb02 7204 	mla	r2, r2, r4, r7
 80226c0:	fb03 0004 	mla	r0, r3, r4, r0
 80226c4:	1c6b      	adds	r3, r5, #1
 80226c6:	b292      	uxth	r2, r2
 80226c8:	b280      	uxth	r0, r0
 80226ca:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80226ce:	1c43      	adds	r3, r0, #1
 80226d0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80226d4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80226d8:	1c50      	adds	r0, r2, #1
 80226da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80226de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80226e2:	0952      	lsrs	r2, r2, #5
 80226e4:	432b      	orrs	r3, r5
 80226e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80226ea:	4313      	orrs	r3, r2
 80226ec:	800b      	strh	r3, [r1, #0]
 80226ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226f2:	4680      	mov	r8, r0
 80226f4:	e763      	b.n	80225be <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80226f6:	4684      	mov	ip, r0
 80226f8:	4680      	mov	r8, r0
 80226fa:	e76c      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80226fc:	4684      	mov	ip, r0
 80226fe:	e76a      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022700:	4605      	mov	r5, r0
 8022702:	e779      	b.n	80225f8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8022704:	4603      	mov	r3, r0
 8022706:	4605      	mov	r5, r0
 8022708:	e782      	b.n	8022610 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802270a:	4603      	mov	r3, r0
 802270c:	e780      	b.n	8022610 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802270e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802270e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022712:	b093      	sub	sp, #76	; 0x4c
 8022714:	461d      	mov	r5, r3
 8022716:	9210      	str	r2, [sp, #64]	; 0x40
 8022718:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802271a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802271e:	910a      	str	r1, [sp, #40]	; 0x28
 8022720:	920b      	str	r2, [sp, #44]	; 0x2c
 8022722:	6859      	ldr	r1, [r3, #4]
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	9011      	str	r0, [sp, #68]	; 0x44
 8022728:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 802272c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022730:	fb01 2707 	mla	r7, r1, r7, r2
 8022734:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022738:	9307      	str	r3, [sp, #28]
 802273a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	9309      	str	r3, [sp, #36]	; 0x24
 8022740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022742:	43db      	mvns	r3, r3
 8022744:	b2db      	uxtb	r3, r3
 8022746:	9308      	str	r3, [sp, #32]
 8022748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802274a:	2b00      	cmp	r3, #0
 802274c:	dc03      	bgt.n	8022756 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802274e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022750:	2b00      	cmp	r3, #0
 8022752:	f340 8205 	ble.w	8022b60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022756:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022758:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802275c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022760:	1e48      	subs	r0, r1, #1
 8022762:	f102 3cff 	add.w	ip, r2, #4294967295
 8022766:	2d00      	cmp	r5, #0
 8022768:	f340 80da 	ble.w	8022920 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802276c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022770:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022774:	d406      	bmi.n	8022784 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022776:	4586      	cmp	lr, r0
 8022778:	da04      	bge.n	8022784 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802277a:	2b00      	cmp	r3, #0
 802277c:	db02      	blt.n	8022784 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802277e:	4563      	cmp	r3, ip
 8022780:	f2c0 80cf 	blt.w	8022922 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022784:	f11e 0e01 	adds.w	lr, lr, #1
 8022788:	f100 80c1 	bmi.w	802290e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802278c:	4571      	cmp	r1, lr
 802278e:	f2c0 80be 	blt.w	802290e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022792:	3301      	adds	r3, #1
 8022794:	f100 80bb 	bmi.w	802290e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022798:	429a      	cmp	r2, r3
 802279a:	f2c0 80b8 	blt.w	802290e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802279e:	46a9      	mov	r9, r5
 80227a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80227a4:	f1b9 0f00 	cmp.w	r9, #0
 80227a8:	f340 80d8 	ble.w	802295c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80227ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227ae:	1421      	asrs	r1, r4, #16
 80227b0:	ea4f 4026 	mov.w	r0, r6, asr #16
 80227b4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80227b8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80227bc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80227c0:	f100 8112 	bmi.w	80229e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80227c4:	f10e 3aff 	add.w	sl, lr, #4294967295
 80227c8:	4551      	cmp	r1, sl
 80227ca:	f280 810d 	bge.w	80229e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80227ce:	2800      	cmp	r0, #0
 80227d0:	f2c0 810a 	blt.w	80229e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80227d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80227d8:	4550      	cmp	r0, sl
 80227da:	f280 8105 	bge.w	80229e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80227de:	fa0f f38e 	sxth.w	r3, lr
 80227e2:	fb00 1103 	mla	r1, r0, r3, r1
 80227e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227e8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80227ec:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80227f0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80227f4:	f1bc 0f00 	cmp.w	ip, #0
 80227f8:	d007      	beq.n	802280a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80227fa:	005b      	lsls	r3, r3, #1
 80227fc:	eb0a 0003 	add.w	r0, sl, r3
 8022800:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8022804:	930c      	str	r3, [sp, #48]	; 0x30
 8022806:	8843      	ldrh	r3, [r0, #2]
 8022808:	930d      	str	r3, [sp, #52]	; 0x34
 802280a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802280e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022812:	fb12 f30c 	smulbb	r3, r2, ip
 8022816:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802281a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802281e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022822:	10db      	asrs	r3, r3, #3
 8022824:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022828:	ea40 000e 	orr.w	r0, r0, lr
 802282c:	f1cc 0e10 	rsb	lr, ip, #16
 8022830:	ea4a 0101 	orr.w	r1, sl, r1
 8022834:	9f08      	ldr	r7, [sp, #32]
 8022836:	ebae 0e02 	sub.w	lr, lr, r2
 802283a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802283e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022842:	4351      	muls	r1, r2
 8022844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022846:	fb0e 1e00 	mla	lr, lr, r0, r1
 802284a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802284c:	0410      	lsls	r0, r2, #16
 802284e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022852:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022856:	4310      	orrs	r0, r2
 8022858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802285a:	0412      	lsls	r2, r2, #16
 802285c:	fb03 e000 	mla	r0, r3, r0, lr
 8022860:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022864:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022868:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802286c:	ea42 020e 	orr.w	r2, r2, lr
 8022870:	fb03 0302 	mla	r3, r3, r2, r0
 8022874:	f8b8 0000 	ldrh.w	r0, [r8]
 8022878:	0d5a      	lsrs	r2, r3, #21
 802287a:	095b      	lsrs	r3, r3, #5
 802287c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022880:	1201      	asrs	r1, r0, #8
 8022882:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022886:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802288a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802288e:	00c0      	lsls	r0, r0, #3
 8022890:	4313      	orrs	r3, r2
 8022892:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022896:	fb11 f107 	smulbb	r1, r1, r7
 802289a:	b2c0      	uxtb	r0, r0
 802289c:	b29b      	uxth	r3, r3
 802289e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80228a2:	fb10 f007 	smulbb	r0, r0, r7
 80228a6:	fb1e fe07 	smulbb	lr, lr, r7
 80228aa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80228ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80228b2:	fb0c 1c02 	mla	ip, ip, r2, r1
 80228b6:	10d9      	asrs	r1, r3, #3
 80228b8:	00db      	lsls	r3, r3, #3
 80228ba:	fa1f fc8c 	uxth.w	ip, ip
 80228be:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80228c2:	b2db      	uxtb	r3, r3
 80228c4:	fb01 e102 	mla	r1, r1, r2, lr
 80228c8:	fb03 0302 	mla	r3, r3, r2, r0
 80228cc:	b289      	uxth	r1, r1
 80228ce:	b29a      	uxth	r2, r3
 80228d0:	f10c 0301 	add.w	r3, ip, #1
 80228d4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80228d8:	1c53      	adds	r3, r2, #1
 80228da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80228de:	1c4a      	adds	r2, r1, #1
 80228e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80228e4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80228e8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80228ec:	0949      	lsrs	r1, r1, #5
 80228ee:	ea43 030c 	orr.w	r3, r3, ip
 80228f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80228f6:	430b      	orrs	r3, r1
 80228f8:	f8a8 3000 	strh.w	r3, [r8]
 80228fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80228fe:	f108 0802 	add.w	r8, r8, #2
 8022902:	f109 39ff 	add.w	r9, r9, #4294967295
 8022906:	441c      	add	r4, r3
 8022908:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802290a:	441e      	add	r6, r3
 802290c:	e74a      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802290e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022910:	3d01      	subs	r5, #1
 8022912:	441c      	add	r4, r3
 8022914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022916:	441e      	add	r6, r3
 8022918:	9b07      	ldr	r3, [sp, #28]
 802291a:	3302      	adds	r3, #2
 802291c:	9307      	str	r3, [sp, #28]
 802291e:	e722      	b.n	8022766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022920:	d022      	beq.n	8022968 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022922:	1e6b      	subs	r3, r5, #1
 8022924:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022926:	fb00 4003 	mla	r0, r0, r3, r4
 802292a:	1400      	asrs	r0, r0, #16
 802292c:	f53f af37 	bmi.w	802279e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022930:	3901      	subs	r1, #1
 8022932:	4288      	cmp	r0, r1
 8022934:	f6bf af33 	bge.w	802279e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022938:	9920      	ldr	r1, [sp, #128]	; 0x80
 802293a:	fb01 6303 	mla	r3, r1, r3, r6
 802293e:	141b      	asrs	r3, r3, #16
 8022940:	f53f af2d 	bmi.w	802279e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022944:	3a01      	subs	r2, #1
 8022946:	4293      	cmp	r3, r2
 8022948:	f6bf af29 	bge.w	802279e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802294c:	46a8      	mov	r8, r5
 802294e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022952:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8022956:	f1b8 0f00 	cmp.w	r8, #0
 802295a:	dc60      	bgt.n	8022a1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 802295c:	9b07      	ldr	r3, [sp, #28]
 802295e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022962:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022966:	9307      	str	r3, [sp, #28]
 8022968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802296a:	2b00      	cmp	r3, #0
 802296c:	f340 80f8 	ble.w	8022b60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022974:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022976:	ee30 0a04 	vadd.f32	s0, s0, s8
 802297a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802297e:	eef0 6a62 	vmov.f32	s13, s5
 8022982:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022986:	ee31 1a05 	vadd.f32	s2, s2, s10
 802298a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802298e:	ee16 4a90 	vmov	r4, s13
 8022992:	eef0 6a43 	vmov.f32	s13, s6
 8022996:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802299a:	ee16 6a90 	vmov	r6, s13
 802299e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80229a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80229a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80229aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80229ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80229b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80229b6:	ee12 2a90 	vmov	r2, s5
 80229ba:	eef0 2a47 	vmov.f32	s5, s14
 80229be:	fb92 f3f3 	sdiv	r3, r2, r3
 80229c2:	ee13 2a10 	vmov	r2, s6
 80229c6:	931f      	str	r3, [sp, #124]	; 0x7c
 80229c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229ca:	eeb0 3a67 	vmov.f32	s6, s15
 80229ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80229d2:	9320      	str	r3, [sp, #128]	; 0x80
 80229d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80229d8:	3b01      	subs	r3, #1
 80229da:	930a      	str	r3, [sp, #40]	; 0x28
 80229dc:	bf08      	it	eq
 80229de:	4615      	moveq	r5, r2
 80229e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229e2:	bf18      	it	ne
 80229e4:	461d      	movne	r5, r3
 80229e6:	e6af      	b.n	8022748 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80229e8:	f111 0a01 	adds.w	sl, r1, #1
 80229ec:	d486      	bmi.n	80228fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80229ee:	45d6      	cmp	lr, sl
 80229f0:	db84      	blt.n	80228fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80229f2:	f110 0a01 	adds.w	sl, r0, #1
 80229f6:	d481      	bmi.n	80228fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80229f8:	4553      	cmp	r3, sl
 80229fa:	f6ff af7f 	blt.w	80228fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80229fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022a00:	b21b      	sxth	r3, r3
 8022a02:	9101      	str	r1, [sp, #4]
 8022a04:	4641      	mov	r1, r8
 8022a06:	9300      	str	r3, [sp, #0]
 8022a08:	fa0f f38e 	sxth.w	r3, lr
 8022a0c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8022a10:	e9cd c704 	strd	ip, r7, [sp, #16]
 8022a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a16:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022a18:	f7ff fdb2 	bl	8022580 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8022a1c:	e76e      	b.n	80228fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a20:	1430      	asrs	r0, r6, #16
 8022a22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022a24:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022a28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a2c:	1423      	asrs	r3, r4, #16
 8022a2e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022a32:	fb01 3000 	mla	r0, r1, r0, r3
 8022a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8022a3c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8022a40:	8858      	ldrh	r0, [r3, #2]
 8022a42:	f1be 0f00 	cmp.w	lr, #0
 8022a46:	d00b      	beq.n	8022a60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8022a48:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022a4c:	3901      	subs	r1, #1
 8022a4e:	0049      	lsls	r1, r1, #1
 8022a50:	3102      	adds	r1, #2
 8022a52:	eb03 0b01 	add.w	fp, r3, r1
 8022a56:	5a5b      	ldrh	r3, [r3, r1]
 8022a58:	930e      	str	r3, [sp, #56]	; 0x38
 8022a5a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022a60:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8022a64:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022a68:	fb12 f30e 	smulbb	r3, r2, lr
 8022a6c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022a70:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8022a74:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022a78:	10db      	asrs	r3, r3, #3
 8022a7a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022a7e:	ea41 010c 	orr.w	r1, r1, ip
 8022a82:	f1ce 0c10 	rsb	ip, lr, #16
 8022a86:	ea4b 0000 	orr.w	r0, fp, r0
 8022a8a:	9f08      	ldr	r7, [sp, #32]
 8022a8c:	ebac 0c02 	sub.w	ip, ip, r2
 8022a90:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022a94:	f108 38ff 	add.w	r8, r8, #4294967295
 8022a98:	4350      	muls	r0, r2
 8022a9a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022aa0:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022aa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022aa6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022aaa:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8022aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ab0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022ab4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022ab8:	0412      	lsls	r2, r2, #16
 8022aba:	ea4b 0101 	orr.w	r1, fp, r1
 8022abe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022ac2:	fb03 c101 	mla	r1, r3, r1, ip
 8022ac6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022aca:	4302      	orrs	r2, r0
 8022acc:	fb03 1202 	mla	r2, r3, r2, r1
 8022ad0:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8022ad4:	0952      	lsrs	r2, r2, #5
 8022ad6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022ada:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8022ade:	f8b9 2000 	ldrh.w	r2, [r9]
 8022ae2:	ea4b 0303 	orr.w	r3, fp, r3
 8022ae6:	1211      	asrs	r1, r2, #8
 8022ae8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8022aec:	b29b      	uxth	r3, r3
 8022aee:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022af2:	00d2      	lsls	r2, r2, #3
 8022af4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022af8:	fb11 f107 	smulbb	r1, r1, r7
 8022afc:	1218      	asrs	r0, r3, #8
 8022afe:	fb1c fc07 	smulbb	ip, ip, r7
 8022b02:	b2d2      	uxtb	r2, r2
 8022b04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022b08:	fb12 f207 	smulbb	r2, r2, r7
 8022b0c:	fb00 100a 	mla	r0, r0, sl, r1
 8022b10:	10d9      	asrs	r1, r3, #3
 8022b12:	00db      	lsls	r3, r3, #3
 8022b14:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022b18:	b280      	uxth	r0, r0
 8022b1a:	b2db      	uxtb	r3, r3
 8022b1c:	fb01 c10a 	mla	r1, r1, sl, ip
 8022b20:	fb03 230a 	mla	r3, r3, sl, r2
 8022b24:	1c42      	adds	r2, r0, #1
 8022b26:	b289      	uxth	r1, r1
 8022b28:	b29b      	uxth	r3, r3
 8022b2a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022b2e:	f101 0c01 	add.w	ip, r1, #1
 8022b32:	1c5a      	adds	r2, r3, #1
 8022b34:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022b38:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022b3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022b40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022b42:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022b46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022b4a:	441c      	add	r4, r3
 8022b4c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022b50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b52:	4310      	orrs	r0, r2
 8022b54:	441e      	add	r6, r3
 8022b56:	ea40 000c 	orr.w	r0, r0, ip
 8022b5a:	f829 0b02 	strh.w	r0, [r9], #2
 8022b5e:	e6fa      	b.n	8022956 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022b60:	b013      	add	sp, #76	; 0x4c
 8022b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022b66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022b6a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8022b6e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8022b72:	fb0e 4703 	mla	r7, lr, r3, r4
 8022b76:	f1be 0f00 	cmp.w	lr, #0
 8022b7a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8022b7e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8022b82:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8022b86:	8808      	ldrh	r0, [r1, #0]
 8022b88:	db60      	blt.n	8022c4c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022b8a:	45f1      	cmp	r9, lr
 8022b8c:	dd5e      	ble.n	8022c4c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022b8e:	2c00      	cmp	r4, #0
 8022b90:	db5a      	blt.n	8022c48 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022b92:	42a3      	cmp	r3, r4
 8022b94:	dd58      	ble.n	8022c48 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022b96:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8022b9a:	1c62      	adds	r2, r4, #1
 8022b9c:	d459      	bmi.n	8022c52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022b9e:	4293      	cmp	r3, r2
 8022ba0:	dd57      	ble.n	8022c52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022ba2:	2d00      	cmp	r5, #0
 8022ba4:	d055      	beq.n	8022c52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022ba6:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8022baa:	f11e 0e01 	adds.w	lr, lr, #1
 8022bae:	d454      	bmi.n	8022c5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022bb0:	45f1      	cmp	r9, lr
 8022bb2:	dd52      	ble.n	8022c5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022bb4:	2e00      	cmp	r6, #0
 8022bb6:	d050      	beq.n	8022c5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022bb8:	2c00      	cmp	r4, #0
 8022bba:	db4c      	blt.n	8022c56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022bbc:	42a3      	cmp	r3, r4
 8022bbe:	dd4a      	ble.n	8022c56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022bc0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8022bc4:	3401      	adds	r4, #1
 8022bc6:	d405      	bmi.n	8022bd4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022bc8:	42a3      	cmp	r3, r4
 8022bca:	dd03      	ble.n	8022bd4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022bcc:	b115      	cbz	r5, 8022bd4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022bce:	3301      	adds	r3, #1
 8022bd0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8022bd4:	fb15 f406 	smulbb	r4, r5, r6
 8022bd8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022bdc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022be0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022be4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022be8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022bec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022bf0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022bf4:	ea43 0c0c 	orr.w	ip, r3, ip
 8022bf8:	f1c6 0310 	rsb	r3, r6, #16
 8022bfc:	ea4e 0707 	orr.w	r7, lr, r7
 8022c00:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022c04:	1b5b      	subs	r3, r3, r5
 8022c06:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8022c0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022c0e:	437d      	muls	r5, r7
 8022c10:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022c14:	0403      	lsls	r3, r0, #16
 8022c16:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022c1a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022c1e:	4318      	orrs	r0, r3
 8022c20:	0413      	lsls	r3, r2, #16
 8022c22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c26:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022c2a:	fb04 c000 	mla	r0, r4, r0, ip
 8022c2e:	4313      	orrs	r3, r2
 8022c30:	fb06 0003 	mla	r0, r6, r3, r0
 8022c34:	0d43      	lsrs	r3, r0, #21
 8022c36:	0940      	lsrs	r0, r0, #5
 8022c38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c3c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022c40:	4318      	orrs	r0, r3
 8022c42:	8008      	strh	r0, [r1, #0]
 8022c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022c48:	4684      	mov	ip, r0
 8022c4a:	e7a6      	b.n	8022b9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8022c4c:	4607      	mov	r7, r0
 8022c4e:	4684      	mov	ip, r0
 8022c50:	e7ab      	b.n	8022baa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022c52:	4607      	mov	r7, r0
 8022c54:	e7a9      	b.n	8022baa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8022c56:	4602      	mov	r2, r0
 8022c58:	e7b4      	b.n	8022bc4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8022c5a:	4602      	mov	r2, r0
 8022c5c:	e7ba      	b.n	8022bd4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08022c5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c62:	b08f      	sub	sp, #60	; 0x3c
 8022c64:	461d      	mov	r5, r3
 8022c66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022c68:	9107      	str	r1, [sp, #28]
 8022c6a:	920c      	str	r2, [sp, #48]	; 0x30
 8022c6c:	6859      	ldr	r1, [r3, #4]
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	900d      	str	r0, [sp, #52]	; 0x34
 8022c72:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8022c76:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8022c7a:	fb01 2707 	mla	r7, r1, r7, r2
 8022c7e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8022c82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022c84:	f8d3 8000 	ldr.w	r8, [r3]
 8022c88:	9b07      	ldr	r3, [sp, #28]
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	dc03      	bgt.n	8022c96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	f340 8182 	ble.w	8022f9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8022c96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022c98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022ca0:	1e48      	subs	r0, r1, #1
 8022ca2:	f102 3cff 	add.w	ip, r2, #4294967295
 8022ca6:	2d00      	cmp	r5, #0
 8022ca8:	f340 809b 	ble.w	8022de2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8022cac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022cb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022cb4:	d406      	bmi.n	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022cb6:	4586      	cmp	lr, r0
 8022cb8:	da04      	bge.n	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	db02      	blt.n	8022cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022cbe:	4563      	cmp	r3, ip
 8022cc0:	f2c0 8090 	blt.w	8022de4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022cc4:	f11e 0e01 	adds.w	lr, lr, #1
 8022cc8:	f100 8084 	bmi.w	8022dd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022ccc:	4571      	cmp	r1, lr
 8022cce:	f2c0 8081 	blt.w	8022dd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022cd2:	3301      	adds	r3, #1
 8022cd4:	d47e      	bmi.n	8022dd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022cd6:	429a      	cmp	r2, r3
 8022cd8:	db7c      	blt.n	8022dd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022cda:	46aa      	mov	sl, r5
 8022cdc:	46b9      	mov	r9, r7
 8022cde:	f1ba 0f00 	cmp.w	sl, #0
 8022ce2:	f340 8099 	ble.w	8022e18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022ce6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ce8:	1421      	asrs	r1, r4, #16
 8022cea:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022cee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022cf2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022cf6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022cfa:	f100 80d1 	bmi.w	8022ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022cfe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022d02:	4559      	cmp	r1, fp
 8022d04:	f280 80cc 	bge.w	8022ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022d08:	2800      	cmp	r0, #0
 8022d0a:	f2c0 80c9 	blt.w	8022ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022d0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8022d12:	4558      	cmp	r0, fp
 8022d14:	f280 80c4 	bge.w	8022ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8022d18:	fa0f fe8e 	sxth.w	lr, lr
 8022d1c:	fb00 110e 	mla	r1, r0, lr, r1
 8022d20:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022d24:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8022d28:	8841      	ldrh	r1, [r0, #2]
 8022d2a:	f1bc 0f00 	cmp.w	ip, #0
 8022d2e:	d00b      	beq.n	8022d48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8022d30:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8022d34:	3b01      	subs	r3, #1
 8022d36:	005b      	lsls	r3, r3, #1
 8022d38:	3302      	adds	r3, #2
 8022d3a:	eb00 0e03 	add.w	lr, r0, r3
 8022d3e:	5ac3      	ldrh	r3, [r0, r3]
 8022d40:	9308      	str	r3, [sp, #32]
 8022d42:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022d46:	9309      	str	r3, [sp, #36]	; 0x24
 8022d48:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8022d4c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022d50:	fb12 f30c 	smulbb	r3, r2, ip
 8022d54:	f1cc 0e10 	rsb	lr, ip, #16
 8022d58:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d5c:	10db      	asrs	r3, r3, #3
 8022d5e:	ebae 0e02 	sub.w	lr, lr, r2
 8022d62:	ea40 000b 	orr.w	r0, r0, fp
 8022d66:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022d6a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022d6e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022d72:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022d76:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022d7a:	ea4b 0101 	orr.w	r1, fp, r1
 8022d7e:	4351      	muls	r1, r2
 8022d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d82:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022d86:	0410      	lsls	r0, r2, #16
 8022d88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d8c:	9908      	ldr	r1, [sp, #32]
 8022d8e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d92:	4310      	orrs	r0, r2
 8022d94:	9a08      	ldr	r2, [sp, #32]
 8022d96:	0412      	lsls	r2, r2, #16
 8022d98:	fb03 e000 	mla	r0, r3, r0, lr
 8022d9c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022da0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022da4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022da8:	ea42 020e 	orr.w	r2, r2, lr
 8022dac:	fb03 0302 	mla	r3, r3, r2, r0
 8022db0:	0d5a      	lsrs	r2, r3, #21
 8022db2:	095b      	lsrs	r3, r3, #5
 8022db4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022db8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022dbc:	4313      	orrs	r3, r2
 8022dbe:	f8a9 3000 	strh.w	r3, [r9]
 8022dc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022dc4:	f109 0902 	add.w	r9, r9, #2
 8022dc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022dcc:	441c      	add	r4, r3
 8022dce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022dd0:	441e      	add	r6, r3
 8022dd2:	e784      	b.n	8022cde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022dd6:	3d01      	subs	r5, #1
 8022dd8:	3702      	adds	r7, #2
 8022dda:	441c      	add	r4, r3
 8022ddc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022dde:	441e      	add	r6, r3
 8022de0:	e761      	b.n	8022ca6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022de2:	d01d      	beq.n	8022e20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022de4:	1e6b      	subs	r3, r5, #1
 8022de6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022de8:	fb00 4003 	mla	r0, r0, r3, r4
 8022dec:	1400      	asrs	r0, r0, #16
 8022dee:	f53f af74 	bmi.w	8022cda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022df2:	3901      	subs	r1, #1
 8022df4:	4288      	cmp	r0, r1
 8022df6:	f6bf af70 	bge.w	8022cda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022dfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022dfc:	fb01 6303 	mla	r3, r1, r3, r6
 8022e00:	141b      	asrs	r3, r3, #16
 8022e02:	f53f af6a 	bmi.w	8022cda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022e06:	3a01      	subs	r2, #1
 8022e08:	4293      	cmp	r3, r2
 8022e0a:	f6bf af66 	bge.w	8022cda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022e0e:	46a9      	mov	r9, r5
 8022e10:	46ba      	mov	sl, r7
 8022e12:	f1b9 0f00 	cmp.w	r9, #0
 8022e16:	dc5b      	bgt.n	8022ed0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022e18:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022e1c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022e20:	9b07      	ldr	r3, [sp, #28]
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	f340 80b9 	ble.w	8022f9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8022e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022e2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e36:	eef0 6a62 	vmov.f32	s13, s5
 8022e3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e46:	ee16 4a90 	vmov	r4, s13
 8022e4a:	eef0 6a43 	vmov.f32	s13, s6
 8022e4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e52:	ee16 6a90 	vmov	r6, s13
 8022e56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e6e:	ee12 2a90 	vmov	r2, s5
 8022e72:	eef0 2a47 	vmov.f32	s5, s14
 8022e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e7a:	ee13 2a10 	vmov	r2, s6
 8022e7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8022e80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022e82:	eeb0 3a67 	vmov.f32	s6, s15
 8022e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e8a:	931c      	str	r3, [sp, #112]	; 0x70
 8022e8c:	9b07      	ldr	r3, [sp, #28]
 8022e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022e90:	3b01      	subs	r3, #1
 8022e92:	9307      	str	r3, [sp, #28]
 8022e94:	bf08      	it	eq
 8022e96:	4615      	moveq	r5, r2
 8022e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022e9a:	bf18      	it	ne
 8022e9c:	461d      	movne	r5, r3
 8022e9e:	e6f3      	b.n	8022c88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022ea0:	f111 0b01 	adds.w	fp, r1, #1
 8022ea4:	d48d      	bmi.n	8022dc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022ea6:	45de      	cmp	lr, fp
 8022ea8:	db8b      	blt.n	8022dc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022eaa:	f110 0b01 	adds.w	fp, r0, #1
 8022eae:	d488      	bmi.n	8022dc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022eb0:	455b      	cmp	r3, fp
 8022eb2:	db86      	blt.n	8022dc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022eb4:	b21b      	sxth	r3, r3
 8022eb6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022eba:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8022ebe:	9300      	str	r3, [sp, #0]
 8022ec0:	4642      	mov	r2, r8
 8022ec2:	fa0f f38e 	sxth.w	r3, lr
 8022ec6:	4649      	mov	r1, r9
 8022ec8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022eca:	f7ff fe4c 	bl	8022b66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022ece:	e778      	b.n	8022dc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022ed0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ed2:	1420      	asrs	r0, r4, #16
 8022ed4:	1431      	asrs	r1, r6, #16
 8022ed6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022eda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022ede:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022ee2:	fb03 0101 	mla	r1, r3, r1, r0
 8022ee6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022eea:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022eee:	8841      	ldrh	r1, [r0, #2]
 8022ef0:	f1be 0f00 	cmp.w	lr, #0
 8022ef4:	d00b      	beq.n	8022f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022ef6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022efa:	3b01      	subs	r3, #1
 8022efc:	005b      	lsls	r3, r3, #1
 8022efe:	3302      	adds	r3, #2
 8022f00:	eb00 0b03 	add.w	fp, r0, r3
 8022f04:	5ac3      	ldrh	r3, [r0, r3]
 8022f06:	930a      	str	r3, [sp, #40]	; 0x28
 8022f08:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f0e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022f12:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022f16:	fb12 f30e 	smulbb	r3, r2, lr
 8022f1a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022f1e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022f22:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f26:	10db      	asrs	r3, r3, #3
 8022f28:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022f2c:	ea40 000c 	orr.w	r0, r0, ip
 8022f30:	f1ce 0c10 	rsb	ip, lr, #16
 8022f34:	ea4b 0101 	orr.w	r1, fp, r1
 8022f38:	f109 39ff 	add.w	r9, r9, #4294967295
 8022f3c:	ebac 0c02 	sub.w	ip, ip, r2
 8022f40:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022f44:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022f48:	4351      	muls	r1, r2
 8022f4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022f4c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022f50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022f52:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022f56:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8022f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f5c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022f60:	0412      	lsls	r2, r2, #16
 8022f62:	ea4b 0000 	orr.w	r0, fp, r0
 8022f66:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8022f6a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022f6e:	fb03 c000 	mla	r0, r3, r0, ip
 8022f72:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022f76:	ea42 0b0b 	orr.w	fp, r2, fp
 8022f7a:	fb03 000b 	mla	r0, r3, fp, r0
 8022f7e:	0d43      	lsrs	r3, r0, #21
 8022f80:	0940      	lsrs	r0, r0, #5
 8022f82:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022f86:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022f8a:	4318      	orrs	r0, r3
 8022f8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022f8e:	441c      	add	r4, r3
 8022f90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022f92:	f82a 0b02 	strh.w	r0, [sl], #2
 8022f96:	441e      	add	r6, r3
 8022f98:	e73b      	b.n	8022e12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022f9a:	b00f      	add	sp, #60	; 0x3c
 8022f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022fa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8022fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fa4:	b085      	sub	sp, #20
 8022fa6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8022faa:	9102      	str	r1, [sp, #8]
 8022fac:	2c00      	cmp	r4, #0
 8022fae:	fb04 7103 	mla	r1, r4, r3, r7
 8022fb2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022fb6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8022fba:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022fbe:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022fc2:	f2c0 811b 	blt.w	80231fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022fc6:	45a6      	cmp	lr, r4
 8022fc8:	f340 8118 	ble.w	80231fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022fcc:	2f00      	cmp	r7, #0
 8022fce:	f2c0 8113 	blt.w	80231f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022fd2:	42bb      	cmp	r3, r7
 8022fd4:	f340 8110 	ble.w	80231f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022fd8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022fdc:	1c7a      	adds	r2, r7, #1
 8022fde:	f100 8110 	bmi.w	8023202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022fe2:	4293      	cmp	r3, r2
 8022fe4:	f340 810d 	ble.w	8023202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022fe8:	2e00      	cmp	r6, #0
 8022fea:	f000 810c 	beq.w	8023206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8022fee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022ff2:	3401      	adds	r4, #1
 8022ff4:	f100 810b 	bmi.w	802320e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022ff8:	45a6      	cmp	lr, r4
 8022ffa:	f340 8108 	ble.w	802320e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022ffe:	2800      	cmp	r0, #0
 8023000:	f000 8108 	beq.w	8023214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8023004:	2f00      	cmp	r7, #0
 8023006:	f2c0 8100 	blt.w	802320a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802300a:	42bb      	cmp	r3, r7
 802300c:	f340 80fd 	ble.w	802320a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023010:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023014:	3701      	adds	r7, #1
 8023016:	f100 8100 	bmi.w	802321a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802301a:	42bb      	cmp	r3, r7
 802301c:	f340 80fd 	ble.w	802321a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023020:	2e00      	cmp	r6, #0
 8023022:	f000 80fc 	beq.w	802321e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8023026:	3301      	adds	r3, #1
 8023028:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802302c:	b2b6      	uxth	r6, r6
 802302e:	b280      	uxth	r0, r0
 8023030:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023034:	fb00 fe06 	mul.w	lr, r0, r6
 8023038:	0136      	lsls	r6, r6, #4
 802303a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802303e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023042:	eba6 070e 	sub.w	r7, r6, lr
 8023046:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802304a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802304e:	b280      	uxth	r0, r0
 8023050:	b2bf      	uxth	r7, r7
 8023052:	1a1b      	subs	r3, r3, r0
 8023054:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023058:	fb0a f607 	mul.w	r6, sl, r7
 802305c:	b29b      	uxth	r3, r3
 802305e:	fb0b 6603 	mla	r6, fp, r3, r6
 8023062:	fb00 6609 	mla	r6, r0, r9, r6
 8023066:	fb0e 6608 	mla	r6, lr, r8, r6
 802306a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802306e:	9600      	str	r6, [sp, #0]
 8023070:	2e00      	cmp	r6, #0
 8023072:	f000 80be 	beq.w	80231f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8023076:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802307a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802307e:	9e02      	ldr	r6, [sp, #8]
 8023080:	fb0b fc0c 	mul.w	ip, fp, ip
 8023084:	fb0b f505 	mul.w	r5, fp, r5
 8023088:	8836      	ldrh	r6, [r6, #0]
 802308a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802308e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023092:	9501      	str	r5, [sp, #4]
 8023094:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023098:	44dc      	add	ip, fp
 802309a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802309e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80230a2:	9503      	str	r5, [sp, #12]
 80230a4:	9d01      	ldr	r5, [sp, #4]
 80230a6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80230aa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80230ae:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80230b2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80230b6:	fb0a fc0c 	mul.w	ip, sl, ip
 80230ba:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80230be:	fb0a fa01 	mul.w	sl, sl, r1
 80230c2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80230c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80230ca:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80230ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80230d2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80230d6:	4465      	add	r5, ip
 80230d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80230dc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230e4:	fb09 fc0c 	mul.w	ip, r9, ip
 80230e8:	0a2d      	lsrs	r5, r5, #8
 80230ea:	fb09 f904 	mul.w	r9, r9, r4
 80230ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230f2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80230f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80230fa:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80230fe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023102:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023106:	437d      	muls	r5, r7
 8023108:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802310c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023110:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023114:	4461      	add	r1, ip
 8023116:	fb08 f404 	mul.w	r4, r8, r4
 802311a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802311e:	fb08 f802 	mul.w	r8, r8, r2
 8023122:	0a09      	lsrs	r1, r1, #8
 8023124:	0a22      	lsrs	r2, r4, #8
 8023126:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802312a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802312e:	fb07 f70a 	mul.w	r7, r7, sl
 8023132:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023136:	4414      	add	r4, r2
 8023138:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802313c:	0a24      	lsrs	r4, r4, #8
 802313e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023142:	9a03      	ldr	r2, [sp, #12]
 8023144:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023148:	fb02 5503 	mla	r5, r2, r3, r5
 802314c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023150:	9a00      	ldr	r2, [sp, #0]
 8023152:	fb04 540e 	mla	r4, r4, lr, r5
 8023156:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802315a:	1235      	asrs	r5, r6, #8
 802315c:	fb01 4100 	mla	r1, r1, r0, r4
 8023160:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023164:	0a09      	lsrs	r1, r1, #8
 8023166:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802316a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802316e:	fb03 7101 	mla	r1, r3, r1, r7
 8023172:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023176:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802317a:	fb00 e101 	mla	r1, r0, r1, lr
 802317e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023182:	b287      	uxth	r7, r0
 8023184:	0a09      	lsrs	r1, r1, #8
 8023186:	437a      	muls	r2, r7
 8023188:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802318c:	1c53      	adds	r3, r2, #1
 802318e:	4321      	orrs	r1, r4
 8023190:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023194:	0c0a      	lsrs	r2, r1, #16
 8023196:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802319a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802319e:	b2c8      	uxtb	r0, r1
 80231a0:	fb12 f207 	smulbb	r2, r2, r7
 80231a4:	fb14 f407 	smulbb	r4, r4, r7
 80231a8:	b2db      	uxtb	r3, r3
 80231aa:	fb10 f007 	smulbb	r0, r0, r7
 80231ae:	fb05 2503 	mla	r5, r5, r3, r2
 80231b2:	10f2      	asrs	r2, r6, #3
 80231b4:	00f6      	lsls	r6, r6, #3
 80231b6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80231ba:	b2ad      	uxth	r5, r5
 80231bc:	b2f6      	uxtb	r6, r6
 80231be:	fb02 4203 	mla	r2, r2, r3, r4
 80231c2:	fb06 0303 	mla	r3, r6, r3, r0
 80231c6:	b294      	uxth	r4, r2
 80231c8:	b299      	uxth	r1, r3
 80231ca:	1c6b      	adds	r3, r5, #1
 80231cc:	1c62      	adds	r2, r4, #1
 80231ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80231d2:	1c4b      	adds	r3, r1, #1
 80231d4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80231d8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80231dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80231e0:	0952      	lsrs	r2, r2, #5
 80231e2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80231e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80231ea:	432b      	orrs	r3, r5
 80231ec:	4313      	orrs	r3, r2
 80231ee:	9a02      	ldr	r2, [sp, #8]
 80231f0:	8013      	strh	r3, [r2, #0]
 80231f2:	b005      	add	sp, #20
 80231f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f8:	2500      	movs	r5, #0
 80231fa:	e6ef      	b.n	8022fdc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80231fc:	2100      	movs	r1, #0
 80231fe:	460d      	mov	r5, r1
 8023200:	e6f7      	b.n	8022ff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023202:	2100      	movs	r1, #0
 8023204:	e6f5      	b.n	8022ff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023206:	4631      	mov	r1, r6
 8023208:	e6f3      	b.n	8022ff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802320a:	2400      	movs	r4, #0
 802320c:	e702      	b.n	8023014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802320e:	2200      	movs	r2, #0
 8023210:	4614      	mov	r4, r2
 8023212:	e70b      	b.n	802302c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023214:	4602      	mov	r2, r0
 8023216:	4604      	mov	r4, r0
 8023218:	e708      	b.n	802302c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802321a:	2200      	movs	r2, #0
 802321c:	e706      	b.n	802302c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802321e:	4632      	mov	r2, r6
 8023220:	e704      	b.n	802302c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023222 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023226:	b09d      	sub	sp, #116	; 0x74
 8023228:	9219      	str	r2, [sp, #100]	; 0x64
 802322a:	9307      	str	r3, [sp, #28]
 802322c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802322e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023232:	901b      	str	r0, [sp, #108]	; 0x6c
 8023234:	931a      	str	r3, [sp, #104]	; 0x68
 8023236:	6850      	ldr	r0, [r2, #4]
 8023238:	9117      	str	r1, [sp, #92]	; 0x5c
 802323a:	6812      	ldr	r2, [r2, #0]
 802323c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023240:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023244:	fb00 1303 	mla	r3, r0, r3, r1
 8023248:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802324c:	930a      	str	r3, [sp, #40]	; 0x28
 802324e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023250:	681b      	ldr	r3, [r3, #0]
 8023252:	9310      	str	r3, [sp, #64]	; 0x40
 8023254:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023258:	930b      	str	r3, [sp, #44]	; 0x2c
 802325a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802325c:	2b00      	cmp	r3, #0
 802325e:	dc03      	bgt.n	8023268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023262:	2b00      	cmp	r3, #0
 8023264:	f340 8375 	ble.w	8023952 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023268:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802326a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802326e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023272:	1e48      	subs	r0, r1, #1
 8023274:	1e57      	subs	r7, r2, #1
 8023276:	9b07      	ldr	r3, [sp, #28]
 8023278:	2b00      	cmp	r3, #0
 802327a:	f340 818e 	ble.w	802359a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802327e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023282:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023286:	d406      	bmi.n	8023296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023288:	4584      	cmp	ip, r0
 802328a:	da04      	bge.n	8023296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802328c:	2b00      	cmp	r3, #0
 802328e:	db02      	blt.n	8023296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023290:	42bb      	cmp	r3, r7
 8023292:	f2c0 8183 	blt.w	802359c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023296:	f11c 0c01 	adds.w	ip, ip, #1
 802329a:	f100 8173 	bmi.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802329e:	4561      	cmp	r1, ip
 80232a0:	f2c0 8170 	blt.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80232a4:	3301      	adds	r3, #1
 80232a6:	f100 816d 	bmi.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80232aa:	429a      	cmp	r2, r3
 80232ac:	f2c0 816a 	blt.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80232b0:	9b07      	ldr	r3, [sp, #28]
 80232b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80232b4:	9318      	str	r3, [sp, #96]	; 0x60
 80232b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80232b8:	2b00      	cmp	r3, #0
 80232ba:	f340 818c 	ble.w	80235d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80232be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80232c0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80232c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232c6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80232ca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80232ce:	1422      	asrs	r2, r4, #16
 80232d0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80232d4:	689b      	ldr	r3, [r3, #8]
 80232d6:	f100 81cd 	bmi.w	8023674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80232da:	f103 38ff 	add.w	r8, r3, #4294967295
 80232de:	4542      	cmp	r2, r8
 80232e0:	f280 81c8 	bge.w	8023674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80232e4:	f1bc 0f00 	cmp.w	ip, #0
 80232e8:	f2c0 81c4 	blt.w	8023674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80232ec:	f10e 38ff 	add.w	r8, lr, #4294967295
 80232f0:	45c4      	cmp	ip, r8
 80232f2:	f280 81bf 	bge.w	8023674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80232f6:	b21b      	sxth	r3, r3
 80232f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80232fa:	fb0c 2203 	mla	r2, ip, r3, r2
 80232fe:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023302:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023306:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802330a:	2800      	cmp	r0, #0
 802330c:	f000 81a9 	beq.w	8023662 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8023310:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023314:	950c      	str	r5, [sp, #48]	; 0x30
 8023316:	0e2d      	lsrs	r5, r5, #24
 8023318:	9513      	str	r5, [sp, #76]	; 0x4c
 802331a:	b181      	cbz	r1, 802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802331c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023320:	3b01      	subs	r3, #1
 8023322:	009b      	lsls	r3, r3, #2
 8023324:	3304      	adds	r3, #4
 8023326:	eb08 0c03 	add.w	ip, r8, r3
 802332a:	f858 3003 	ldr.w	r3, [r8, r3]
 802332e:	9308      	str	r3, [sp, #32]
 8023330:	0e1b      	lsrs	r3, r3, #24
 8023332:	9311      	str	r3, [sp, #68]	; 0x44
 8023334:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023338:	930d      	str	r3, [sp, #52]	; 0x34
 802333a:	0e1b      	lsrs	r3, r3, #24
 802333c:	9314      	str	r3, [sp, #80]	; 0x50
 802333e:	b280      	uxth	r0, r0
 8023340:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023342:	b289      	uxth	r1, r1
 8023344:	fb00 f901 	mul.w	r9, r0, r1
 8023348:	0100      	lsls	r0, r0, #4
 802334a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802334e:	eba0 0809 	sub.w	r8, r0, r9
 8023352:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023356:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023358:	b289      	uxth	r1, r1
 802335a:	fa1f f888 	uxth.w	r8, r8
 802335e:	1a5b      	subs	r3, r3, r1
 8023360:	fb08 f000 	mul.w	r0, r8, r0
 8023364:	b29b      	uxth	r3, r3
 8023366:	fb03 000e 	mla	r0, r3, lr, r0
 802336a:	fb01 0005 	mla	r0, r1, r5, r0
 802336e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023370:	fb09 0005 	mla	r0, r9, r5, r0
 8023374:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023378:	2800      	cmp	r0, #0
 802337a:	f000 80fa 	beq.w	8023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802337e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023382:	d01b      	beq.n	80233bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023384:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023388:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802338c:	fb0e fa0a 	mul.w	sl, lr, sl
 8023390:	fb0e fe02 	mul.w	lr, lr, r2
 8023394:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023398:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802339c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80233a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80233a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80233a8:	4452      	add	r2, sl
 80233aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233ae:	0a12      	lsrs	r2, r2, #8
 80233b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80233b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80233b8:	ea42 020c 	orr.w	r2, r2, ip
 80233bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80233be:	2dff      	cmp	r5, #255	; 0xff
 80233c0:	d021      	beq.n	8023406 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80233c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80233c4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80233c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80233ca:	fb05 fb0b 	mul.w	fp, r5, fp
 80233ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80233d0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80233d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80233d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80233de:	fb05 fa0a 	mul.w	sl, r5, sl
 80233e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80233ea:	44de      	add	lr, fp
 80233ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023400:	ea4e 050a 	orr.w	r5, lr, sl
 8023404:	950c      	str	r5, [sp, #48]	; 0x30
 8023406:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023408:	2dff      	cmp	r5, #255	; 0xff
 802340a:	d021      	beq.n	8023450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802340c:	9d08      	ldr	r5, [sp, #32]
 802340e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023412:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023414:	fb05 fb0b 	mul.w	fp, r5, fp
 8023418:	9d08      	ldr	r5, [sp, #32]
 802341a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802341e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023420:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023424:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023428:	fb05 fa0a 	mul.w	sl, r5, sl
 802342c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023430:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023434:	44de      	add	lr, fp
 8023436:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802343a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802343e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023442:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023446:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802344a:	ea4e 050a 	orr.w	r5, lr, sl
 802344e:	9508      	str	r5, [sp, #32]
 8023450:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023452:	2dff      	cmp	r5, #255	; 0xff
 8023454:	d021      	beq.n	802349a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023456:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023458:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802345c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802345e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023462:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023464:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023468:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802346a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802346e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023472:	fb05 fa0a 	mul.w	sl, r5, sl
 8023476:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802347a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802347e:	44de      	add	lr, fp
 8023480:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023484:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023488:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802348c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023490:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023494:	ea4e 050a 	orr.w	r5, lr, sl
 8023498:	950d      	str	r5, [sp, #52]	; 0x34
 802349a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802349c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80234a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80234a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80234a8:	9d08      	ldr	r5, [sp, #32]
 80234aa:	fb08 fc0c 	mul.w	ip, r8, ip
 80234ae:	fb03 cc0e 	mla	ip, r3, lr, ip
 80234b2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80234b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80234b8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80234bc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80234c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80234c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80234c6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80234ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80234cc:	fb08 f80e 	mul.w	r8, r8, lr
 80234d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234d4:	fb03 8202 	mla	r2, r3, r2, r8
 80234d8:	9b08      	ldr	r3, [sp, #32]
 80234da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234de:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80234e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234e4:	fb01 220a 	mla	r2, r1, sl, r2
 80234e8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80234ec:	883b      	ldrh	r3, [r7, #0]
 80234ee:	fb09 2901 	mla	r9, r9, r1, r2
 80234f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80234f4:	1219      	asrs	r1, r3, #8
 80234f6:	4342      	muls	r2, r0
 80234f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80234fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023500:	1c50      	adds	r0, r2, #1
 8023502:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023506:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802350a:	ea4c 0c09 	orr.w	ip, ip, r9
 802350e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023512:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023516:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802351a:	fa5f fc8c 	uxtb.w	ip, ip
 802351e:	fb12 f205 	smulbb	r2, r2, r5
 8023522:	b2c0      	uxtb	r0, r0
 8023524:	fb1c fc05 	smulbb	ip, ip, r5
 8023528:	fb01 2100 	mla	r1, r1, r0, r2
 802352c:	10da      	asrs	r2, r3, #3
 802352e:	fb1e fe05 	smulbb	lr, lr, r5
 8023532:	00db      	lsls	r3, r3, #3
 8023534:	b289      	uxth	r1, r1
 8023536:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802353a:	b2db      	uxtb	r3, r3
 802353c:	fb02 e200 	mla	r2, r2, r0, lr
 8023540:	fb03 c300 	mla	r3, r3, r0, ip
 8023544:	b292      	uxth	r2, r2
 8023546:	fa1f fc83 	uxth.w	ip, r3
 802354a:	1c4b      	adds	r3, r1, #1
 802354c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023550:	f10c 0301 	add.w	r3, ip, #1
 8023554:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023558:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802355c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023560:	430b      	orrs	r3, r1
 8023562:	1c51      	adds	r1, r2, #1
 8023564:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023568:	0952      	lsrs	r2, r2, #5
 802356a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802356e:	4313      	orrs	r3, r2
 8023570:	803b      	strh	r3, [r7, #0]
 8023572:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023574:	3702      	adds	r7, #2
 8023576:	441c      	add	r4, r3
 8023578:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802357a:	441e      	add	r6, r3
 802357c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802357e:	3b01      	subs	r3, #1
 8023580:	9318      	str	r3, [sp, #96]	; 0x60
 8023582:	e698      	b.n	80232b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023584:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023586:	441c      	add	r4, r3
 8023588:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802358a:	441e      	add	r6, r3
 802358c:	9b07      	ldr	r3, [sp, #28]
 802358e:	3b01      	subs	r3, #1
 8023590:	9307      	str	r3, [sp, #28]
 8023592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023594:	3302      	adds	r3, #2
 8023596:	930a      	str	r3, [sp, #40]	; 0x28
 8023598:	e66d      	b.n	8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802359a:	d023      	beq.n	80235e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802359c:	9b07      	ldr	r3, [sp, #28]
 802359e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80235a0:	3b01      	subs	r3, #1
 80235a2:	fb00 4003 	mla	r0, r0, r3, r4
 80235a6:	1400      	asrs	r0, r0, #16
 80235a8:	f53f ae82 	bmi.w	80232b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80235ac:	3901      	subs	r1, #1
 80235ae:	4288      	cmp	r0, r1
 80235b0:	f6bf ae7e 	bge.w	80232b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80235b4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80235b6:	fb01 6303 	mla	r3, r1, r3, r6
 80235ba:	141b      	asrs	r3, r3, #16
 80235bc:	f53f ae78 	bmi.w	80232b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80235c0:	3a01      	subs	r2, #1
 80235c2:	4293      	cmp	r3, r2
 80235c4:	f6bf ae74 	bge.w	80232b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80235c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80235cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80235d0:	f1bb 0f00 	cmp.w	fp, #0
 80235d4:	dc6c      	bgt.n	80236b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80235d6:	9b07      	ldr	r3, [sp, #28]
 80235d8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80235dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235de:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80235e2:	930a      	str	r3, [sp, #40]	; 0x28
 80235e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	f340 81b3 	ble.w	8023952 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80235ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80235f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80235f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80235f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80235fa:	eef0 6a62 	vmov.f32	s13, s5
 80235fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023602:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802360a:	ee16 4a90 	vmov	r4, s13
 802360e:	eef0 6a43 	vmov.f32	s13, s6
 8023612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023616:	ee16 6a90 	vmov	r6, s13
 802361a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802361e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023622:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023626:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802362a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802362e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023632:	ee12 2a90 	vmov	r2, s5
 8023636:	eef0 2a47 	vmov.f32	s5, s14
 802363a:	fb92 f3f3 	sdiv	r3, r2, r3
 802363e:	ee13 2a10 	vmov	r2, s6
 8023642:	9329      	str	r3, [sp, #164]	; 0xa4
 8023644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023646:	eeb0 3a67 	vmov.f32	s6, s15
 802364a:	fb92 f3f3 	sdiv	r3, r2, r3
 802364e:	932a      	str	r3, [sp, #168]	; 0xa8
 8023650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023652:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023654:	3b01      	subs	r3, #1
 8023656:	9317      	str	r3, [sp, #92]	; 0x5c
 8023658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802365a:	bf08      	it	eq
 802365c:	4613      	moveq	r3, r2
 802365e:	9307      	str	r3, [sp, #28]
 8023660:	e5fb      	b.n	802325a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023662:	2900      	cmp	r1, #0
 8023664:	f43f ae6b 	beq.w	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023668:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802366c:	9308      	str	r3, [sp, #32]
 802366e:	0e1b      	lsrs	r3, r3, #24
 8023670:	9311      	str	r3, [sp, #68]	; 0x44
 8023672:	e664      	b.n	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023674:	f112 0801 	adds.w	r8, r2, #1
 8023678:	f53f af7b 	bmi.w	8023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802367c:	4543      	cmp	r3, r8
 802367e:	f6ff af78 	blt.w	8023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023682:	f11c 0801 	adds.w	r8, ip, #1
 8023686:	f53f af74 	bmi.w	8023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802368a:	45c6      	cmp	lr, r8
 802368c:	f6ff af71 	blt.w	8023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023690:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023692:	b21b      	sxth	r3, r3
 8023694:	9201      	str	r2, [sp, #4]
 8023696:	fa0f f28e 	sxth.w	r2, lr
 802369a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802369e:	e9cd c002 	strd	ip, r0, [sp, #8]
 80236a2:	9200      	str	r2, [sp, #0]
 80236a4:	4639      	mov	r1, r7
 80236a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80236aa:	f7ff fc79 	bl	8022fa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80236ae:	e760      	b.n	8023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80236b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236b2:	1427      	asrs	r7, r4, #16
 80236b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80236b6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80236ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80236be:	1433      	asrs	r3, r6, #16
 80236c0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80236c4:	fb01 7303 	mla	r3, r1, r3, r7
 80236c8:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80236cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80236d0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80236d4:	2a00      	cmp	r2, #0
 80236d6:	f000 8133 	beq.w	8023940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80236da:	687d      	ldr	r5, [r7, #4]
 80236dc:	950e      	str	r5, [sp, #56]	; 0x38
 80236de:	0e2d      	lsrs	r5, r5, #24
 80236e0:	9515      	str	r5, [sp, #84]	; 0x54
 80236e2:	b178      	cbz	r0, 8023704 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80236e4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80236e8:	3901      	subs	r1, #1
 80236ea:	0089      	lsls	r1, r1, #2
 80236ec:	3104      	adds	r1, #4
 80236ee:	eb07 0e01 	add.w	lr, r7, r1
 80236f2:	5879      	ldr	r1, [r7, r1]
 80236f4:	9109      	str	r1, [sp, #36]	; 0x24
 80236f6:	0e09      	lsrs	r1, r1, #24
 80236f8:	9112      	str	r1, [sp, #72]	; 0x48
 80236fa:	f8de 1004 	ldr.w	r1, [lr, #4]
 80236fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8023700:	0e09      	lsrs	r1, r1, #24
 8023702:	9116      	str	r1, [sp, #88]	; 0x58
 8023704:	b292      	uxth	r2, r2
 8023706:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023708:	b280      	uxth	r0, r0
 802370a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802370c:	fb02 f800 	mul.w	r8, r2, r0
 8023710:	0112      	lsls	r2, r2, #4
 8023712:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023716:	eba2 0e08 	sub.w	lr, r2, r8
 802371a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802371e:	b280      	uxth	r0, r0
 8023720:	fa1f fe8e 	uxth.w	lr, lr
 8023724:	1a12      	subs	r2, r2, r0
 8023726:	fb0e f101 	mul.w	r1, lr, r1
 802372a:	b292      	uxth	r2, r2
 802372c:	fb02 110c 	mla	r1, r2, ip, r1
 8023730:	fb00 1105 	mla	r1, r0, r5, r1
 8023734:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023736:	fb08 1105 	mla	r1, r8, r5, r1
 802373a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802373e:	2900      	cmp	r1, #0
 8023740:	f000 80f5 	beq.w	802392e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023744:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023748:	d019      	beq.n	802377e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802374a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802374e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023752:	fb0c fa0a 	mul.w	sl, ip, sl
 8023756:	fb0c fc03 	mul.w	ip, ip, r3
 802375a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802375e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023762:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023766:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802376a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802376e:	4453      	add	r3, sl
 8023770:	0a3f      	lsrs	r7, r7, #8
 8023772:	0a1b      	lsrs	r3, r3, #8
 8023774:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023778:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802377c:	433b      	orrs	r3, r7
 802377e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023780:	2dff      	cmp	r5, #255	; 0xff
 8023782:	d020      	beq.n	80237c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8023784:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023786:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802378a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802378c:	436f      	muls	r7, r5
 802378e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023790:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023794:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023798:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802379a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802379e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237a2:	fb05 fa0a 	mul.w	sl, r5, sl
 80237a6:	44bc      	add	ip, r7
 80237a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80237ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80237c0:	ea4c 050a 	orr.w	r5, ip, sl
 80237c4:	950e      	str	r5, [sp, #56]	; 0x38
 80237c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80237c8:	2dff      	cmp	r5, #255	; 0xff
 80237ca:	d020      	beq.n	802380e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80237cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80237ce:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80237d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80237d4:	436f      	muls	r7, r5
 80237d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80237d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80237dc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80237e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80237e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80237e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237ea:	fb05 fa0a 	mul.w	sl, r5, sl
 80237ee:	44bc      	add	ip, r7
 80237f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80237f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023804:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023808:	ea4c 050a 	orr.w	r5, ip, sl
 802380c:	9509      	str	r5, [sp, #36]	; 0x24
 802380e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023810:	2dff      	cmp	r5, #255	; 0xff
 8023812:	d020      	beq.n	8023856 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8023814:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023816:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802381a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802381c:	436f      	muls	r7, r5
 802381e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023820:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023824:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023828:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802382a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802382e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023832:	fb05 fa0a 	mul.w	sl, r5, sl
 8023836:	44bc      	add	ip, r7
 8023838:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802383c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023840:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023844:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023848:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802384c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023850:	ea4c 050a 	orr.w	r5, ip, sl
 8023854:	950f      	str	r5, [sp, #60]	; 0x3c
 8023856:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023858:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802385c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023860:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023864:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023866:	fb0e f707 	mul.w	r7, lr, r7
 802386a:	fb02 770c 	mla	r7, r2, ip, r7
 802386e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023874:	fb00 770c 	mla	r7, r0, ip, r7
 8023878:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802387c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802387e:	fb08 770c 	mla	r7, r8, ip, r7
 8023882:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023886:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023888:	fb0e fe0c 	mul.w	lr, lr, ip
 802388c:	0a3f      	lsrs	r7, r7, #8
 802388e:	fb02 e303 	mla	r3, r2, r3, lr
 8023892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023894:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023898:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802389c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802389e:	fb00 330a 	mla	r3, r0, sl, r3
 80238a2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80238a6:	f8b9 0000 	ldrh.w	r0, [r9]
 80238aa:	fb08 3c0c 	mla	ip, r8, ip, r3
 80238ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80238b0:	1202      	asrs	r2, r0, #8
 80238b2:	4359      	muls	r1, r3
 80238b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238b8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80238bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238c0:	1c4b      	adds	r3, r1, #1
 80238c2:	ea47 070c 	orr.w	r7, r7, ip
 80238c6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80238ca:	0c3b      	lsrs	r3, r7, #16
 80238cc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80238d0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80238d4:	b2ff      	uxtb	r7, r7
 80238d6:	fb13 f305 	smulbb	r3, r3, r5
 80238da:	b2c9      	uxtb	r1, r1
 80238dc:	fb17 f705 	smulbb	r7, r7, r5
 80238e0:	fb02 3201 	mla	r2, r2, r1, r3
 80238e4:	10c3      	asrs	r3, r0, #3
 80238e6:	fb1c fc05 	smulbb	ip, ip, r5
 80238ea:	00c0      	lsls	r0, r0, #3
 80238ec:	b292      	uxth	r2, r2
 80238ee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80238f2:	b2c0      	uxtb	r0, r0
 80238f4:	fb03 c301 	mla	r3, r3, r1, ip
 80238f8:	fb00 7001 	mla	r0, r0, r1, r7
 80238fc:	1c51      	adds	r1, r2, #1
 80238fe:	b29b      	uxth	r3, r3
 8023900:	b280      	uxth	r0, r0
 8023902:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023906:	f100 0c01 	add.w	ip, r0, #1
 802390a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802390e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8023912:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023916:	ea4c 0202 	orr.w	r2, ip, r2
 802391a:	f103 0c01 	add.w	ip, r3, #1
 802391e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023922:	095b      	lsrs	r3, r3, #5
 8023924:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023928:	431a      	orrs	r2, r3
 802392a:	f8a9 2000 	strh.w	r2, [r9]
 802392e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023930:	f109 0902 	add.w	r9, r9, #2
 8023934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023938:	441c      	add	r4, r3
 802393a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802393c:	441e      	add	r6, r3
 802393e:	e647      	b.n	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023940:	2800      	cmp	r0, #0
 8023942:	f43f aedf 	beq.w	8023704 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023946:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802394a:	9109      	str	r1, [sp, #36]	; 0x24
 802394c:	0e09      	lsrs	r1, r1, #24
 802394e:	9112      	str	r1, [sp, #72]	; 0x48
 8023950:	e6d8      	b.n	8023704 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023952:	b01d      	add	sp, #116	; 0x74
 8023954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023958 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802395c:	b085      	sub	sp, #20
 802395e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023962:	9102      	str	r1, [sp, #8]
 8023964:	2c00      	cmp	r4, #0
 8023966:	fb04 7103 	mla	r1, r4, r3, r7
 802396a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802396e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023972:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023976:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802397a:	f2c0 810c 	blt.w	8023b96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802397e:	45a6      	cmp	lr, r4
 8023980:	f340 8109 	ble.w	8023b96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023984:	2f00      	cmp	r7, #0
 8023986:	f2c0 8104 	blt.w	8023b92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802398a:	42bb      	cmp	r3, r7
 802398c:	f340 8101 	ble.w	8023b92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023990:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023994:	1c7a      	adds	r2, r7, #1
 8023996:	f100 8101 	bmi.w	8023b9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802399a:	4293      	cmp	r3, r2
 802399c:	f340 80fe 	ble.w	8023b9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80239a0:	2e00      	cmp	r6, #0
 80239a2:	f000 80fd 	beq.w	8023ba0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80239a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80239aa:	3401      	adds	r4, #1
 80239ac:	f100 80fc 	bmi.w	8023ba8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80239b0:	45a6      	cmp	lr, r4
 80239b2:	f340 80f9 	ble.w	8023ba8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80239b6:	2800      	cmp	r0, #0
 80239b8:	f000 80f9 	beq.w	8023bae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80239bc:	2f00      	cmp	r7, #0
 80239be:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80239c2:	f2c0 80ef 	blt.w	8023ba4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80239c6:	42bb      	cmp	r3, r7
 80239c8:	f340 80ec 	ble.w	8023ba4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80239cc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80239d0:	3701      	adds	r7, #1
 80239d2:	f100 80ef 	bmi.w	8023bb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80239d6:	42bb      	cmp	r3, r7
 80239d8:	f340 80ec 	ble.w	8023bb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80239dc:	2e00      	cmp	r6, #0
 80239de:	f000 80eb 	beq.w	8023bb8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80239e2:	6852      	ldr	r2, [r2, #4]
 80239e4:	b2b6      	uxth	r6, r6
 80239e6:	b280      	uxth	r0, r0
 80239e8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80239ec:	fb00 fe06 	mul.w	lr, r0, r6
 80239f0:	0136      	lsls	r6, r6, #4
 80239f2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80239f6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80239fa:	eba6 070e 	sub.w	r7, r6, lr
 80239fe:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023a02:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023a06:	b280      	uxth	r0, r0
 8023a08:	b2bf      	uxth	r7, r7
 8023a0a:	1a1b      	subs	r3, r3, r0
 8023a0c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023a10:	fb07 f60a 	mul.w	r6, r7, sl
 8023a14:	b29b      	uxth	r3, r3
 8023a16:	fb0b 6603 	mla	r6, fp, r3, r6
 8023a1a:	fb00 6609 	mla	r6, r0, r9, r6
 8023a1e:	fb0e 6608 	mla	r6, lr, r8, r6
 8023a22:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023a26:	9600      	str	r6, [sp, #0]
 8023a28:	2e00      	cmp	r6, #0
 8023a2a:	f000 80af 	beq.w	8023b8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8023a2e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023a32:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023a36:	9e02      	ldr	r6, [sp, #8]
 8023a38:	fb0b fc0c 	mul.w	ip, fp, ip
 8023a3c:	fb0b f505 	mul.w	r5, fp, r5
 8023a40:	8836      	ldrh	r6, [r6, #0]
 8023a42:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023a46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a4a:	9501      	str	r5, [sp, #4]
 8023a4c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023a50:	44dc      	add	ip, fp
 8023a52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a56:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023a5a:	9503      	str	r5, [sp, #12]
 8023a5c:	9d01      	ldr	r5, [sp, #4]
 8023a5e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023a62:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023a66:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023a6a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023a6e:	fb0a fc0c 	mul.w	ip, sl, ip
 8023a72:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023a76:	fb0a fa01 	mul.w	sl, sl, r1
 8023a7a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023a7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a82:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023a86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023a8a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023a8e:	4465      	add	r5, ip
 8023a90:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023a94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023a98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a9c:	fb09 fc0c 	mul.w	ip, r9, ip
 8023aa0:	0a2d      	lsrs	r5, r5, #8
 8023aa2:	fb09 f904 	mul.w	r9, r9, r4
 8023aa6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023aaa:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023aae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023ab2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023ab6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023aba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023abe:	437d      	muls	r5, r7
 8023ac0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023ac4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023ac8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023acc:	4461      	add	r1, ip
 8023ace:	fb08 f404 	mul.w	r4, r8, r4
 8023ad2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023ad6:	fb08 f802 	mul.w	r8, r8, r2
 8023ada:	0a09      	lsrs	r1, r1, #8
 8023adc:	0a22      	lsrs	r2, r4, #8
 8023ade:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023ae2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023ae6:	fb07 f70a 	mul.w	r7, r7, sl
 8023aea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023aee:	4414      	add	r4, r2
 8023af0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023af4:	0a24      	lsrs	r4, r4, #8
 8023af6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023afa:	9a03      	ldr	r2, [sp, #12]
 8023afc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023b00:	fb02 5503 	mla	r5, r2, r3, r5
 8023b04:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023b08:	fb04 540e 	mla	r4, r4, lr, r5
 8023b0c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023b10:	fb01 4100 	mla	r1, r1, r0, r4
 8023b14:	0a09      	lsrs	r1, r1, #8
 8023b16:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023b1a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023b1e:	fb03 7101 	mla	r1, r3, r1, r7
 8023b22:	9b00      	ldr	r3, [sp, #0]
 8023b24:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023b28:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023b2c:	43da      	mvns	r2, r3
 8023b2e:	1233      	asrs	r3, r6, #8
 8023b30:	fb00 e101 	mla	r1, r0, r1, lr
 8023b34:	10f0      	asrs	r0, r6, #3
 8023b36:	b2d2      	uxtb	r2, r2
 8023b38:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023b3c:	0a09      	lsrs	r1, r1, #8
 8023b3e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023b42:	00f6      	lsls	r6, r6, #3
 8023b44:	4353      	muls	r3, r2
 8023b46:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023b4a:	4350      	muls	r0, r2
 8023b4c:	b2f6      	uxtb	r6, r6
 8023b4e:	4321      	orrs	r1, r4
 8023b50:	4356      	muls	r6, r2
 8023b52:	1c5a      	adds	r2, r3, #1
 8023b54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023b58:	0c0b      	lsrs	r3, r1, #16
 8023b5a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023b5e:	1c42      	adds	r2, r0, #1
 8023b60:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023b64:	0a0a      	lsrs	r2, r1, #8
 8023b66:	021b      	lsls	r3, r3, #8
 8023b68:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023b6c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023b70:	00d2      	lsls	r2, r2, #3
 8023b72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023b76:	4313      	orrs	r3, r2
 8023b78:	1c72      	adds	r2, r6, #1
 8023b7a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023b7e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023b82:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023b86:	4319      	orrs	r1, r3
 8023b88:	9b02      	ldr	r3, [sp, #8]
 8023b8a:	8019      	strh	r1, [r3, #0]
 8023b8c:	b005      	add	sp, #20
 8023b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b92:	2500      	movs	r5, #0
 8023b94:	e6fe      	b.n	8023994 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8023b96:	2100      	movs	r1, #0
 8023b98:	460d      	mov	r5, r1
 8023b9a:	e706      	b.n	80239aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023b9c:	2100      	movs	r1, #0
 8023b9e:	e704      	b.n	80239aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023ba0:	4631      	mov	r1, r6
 8023ba2:	e702      	b.n	80239aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023ba4:	2400      	movs	r4, #0
 8023ba6:	e713      	b.n	80239d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8023ba8:	2200      	movs	r2, #0
 8023baa:	4614      	mov	r4, r2
 8023bac:	e71a      	b.n	80239e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023bae:	4602      	mov	r2, r0
 8023bb0:	4604      	mov	r4, r0
 8023bb2:	e717      	b.n	80239e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023bb4:	2200      	movs	r2, #0
 8023bb6:	e715      	b.n	80239e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023bb8:	4632      	mov	r2, r6
 8023bba:	e713      	b.n	80239e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08023bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bc0:	b09b      	sub	sp, #108	; 0x6c
 8023bc2:	9218      	str	r2, [sp, #96]	; 0x60
 8023bc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023bc6:	9019      	str	r0, [sp, #100]	; 0x64
 8023bc8:	9116      	str	r1, [sp, #88]	; 0x58
 8023bca:	6850      	ldr	r0, [r2, #4]
 8023bcc:	9307      	str	r3, [sp, #28]
 8023bce:	6812      	ldr	r2, [r2, #0]
 8023bd0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023bd4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8023bd8:	fb00 1303 	mla	r3, r0, r3, r1
 8023bdc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023be0:	930a      	str	r3, [sp, #40]	; 0x28
 8023be2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023be4:	681b      	ldr	r3, [r3, #0]
 8023be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8023be8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023bea:	2b00      	cmp	r3, #0
 8023bec:	dc03      	bgt.n	8023bf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023bee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	f340 8387 	ble.w	8024304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023bf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023bf8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023bfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c00:	1e48      	subs	r0, r1, #1
 8023c02:	1e57      	subs	r7, r2, #1
 8023c04:	9b07      	ldr	r3, [sp, #28]
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	f340 8166 	ble.w	8023ed8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023c0c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023c10:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023c14:	d406      	bmi.n	8023c24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023c16:	4584      	cmp	ip, r0
 8023c18:	da04      	bge.n	8023c24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023c1a:	2b00      	cmp	r3, #0
 8023c1c:	db02      	blt.n	8023c24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023c1e:	42bb      	cmp	r3, r7
 8023c20:	f2c0 815b 	blt.w	8023eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023c24:	f11c 0c01 	adds.w	ip, ip, #1
 8023c28:	f100 814b 	bmi.w	8023ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023c2c:	4561      	cmp	r1, ip
 8023c2e:	f2c0 8148 	blt.w	8023ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023c32:	3301      	adds	r3, #1
 8023c34:	f100 8145 	bmi.w	8023ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023c38:	429a      	cmp	r2, r3
 8023c3a:	f2c0 8142 	blt.w	8023ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023c3e:	9b07      	ldr	r3, [sp, #28]
 8023c40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023c42:	9317      	str	r3, [sp, #92]	; 0x5c
 8023c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	f340 8165 	ble.w	8023f16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023c4c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023c4e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023c52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c54:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023c58:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023c5c:	1422      	asrs	r2, r4, #16
 8023c5e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c62:	689b      	ldr	r3, [r3, #8]
 8023c64:	f100 81d5 	bmi.w	8024012 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023c68:	f103 38ff 	add.w	r8, r3, #4294967295
 8023c6c:	4542      	cmp	r2, r8
 8023c6e:	f280 81d0 	bge.w	8024012 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023c72:	f1bc 0f00 	cmp.w	ip, #0
 8023c76:	f2c0 81cc 	blt.w	8024012 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023c7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023c7e:	45c4      	cmp	ip, r8
 8023c80:	f280 81c7 	bge.w	8024012 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023c84:	b21b      	sxth	r3, r3
 8023c86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023c88:	fb0c 2203 	mla	r2, ip, r3, r2
 8023c8c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023c90:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023c94:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023c98:	2900      	cmp	r1, #0
 8023c9a:	f000 8182 	beq.w	8023fa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023c9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023ca2:	950b      	str	r5, [sp, #44]	; 0x2c
 8023ca4:	0e2d      	lsrs	r5, r5, #24
 8023ca6:	9512      	str	r5, [sp, #72]	; 0x48
 8023ca8:	b180      	cbz	r0, 8023ccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023caa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023cae:	3b01      	subs	r3, #1
 8023cb0:	009b      	lsls	r3, r3, #2
 8023cb2:	3304      	adds	r3, #4
 8023cb4:	eb08 0c03 	add.w	ip, r8, r3
 8023cb8:	f858 3003 	ldr.w	r3, [r8, r3]
 8023cbc:	9308      	str	r3, [sp, #32]
 8023cbe:	0e1b      	lsrs	r3, r3, #24
 8023cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8023cc2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8023cc8:	0e1b      	lsrs	r3, r3, #24
 8023cca:	9313      	str	r3, [sp, #76]	; 0x4c
 8023ccc:	b289      	uxth	r1, r1
 8023cce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023cd0:	b280      	uxth	r0, r0
 8023cd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023cd4:	fb01 f900 	mul.w	r9, r1, r0
 8023cd8:	0109      	lsls	r1, r1, #4
 8023cda:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023cde:	eba1 0809 	sub.w	r8, r1, r9
 8023ce2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023ce6:	b280      	uxth	r0, r0
 8023ce8:	fa1f f888 	uxth.w	r8, r8
 8023cec:	1a09      	subs	r1, r1, r0
 8023cee:	fb08 f303 	mul.w	r3, r8, r3
 8023cf2:	b289      	uxth	r1, r1
 8023cf4:	fb01 330e 	mla	r3, r1, lr, r3
 8023cf8:	fb00 3305 	mla	r3, r0, r5, r3
 8023cfc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cfe:	fb09 3305 	mla	r3, r9, r5, r3
 8023d02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	f000 80d2 	beq.w	8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023d0c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023d10:	d01b      	beq.n	8023d4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8023d12:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023d16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d1a:	fb0e fa0a 	mul.w	sl, lr, sl
 8023d1e:	fb0e fe02 	mul.w	lr, lr, r2
 8023d22:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023d26:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023d2a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023d2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023d32:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023d36:	4452      	add	r2, sl
 8023d38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d3c:	0a12      	lsrs	r2, r2, #8
 8023d3e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023d42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023d46:	ea42 020c 	orr.w	r2, r2, ip
 8023d4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023d4c:	2dff      	cmp	r5, #255	; 0xff
 8023d4e:	d021      	beq.n	8023d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023d50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d52:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023d56:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023d58:	fb05 fb0b 	mul.w	fp, r5, fp
 8023d5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d5e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023d64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023d6c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d74:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023d78:	44de      	add	lr, fp
 8023d7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d8e:	ea4e 050a 	orr.w	r5, lr, sl
 8023d92:	950b      	str	r5, [sp, #44]	; 0x2c
 8023d94:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023d96:	2dff      	cmp	r5, #255	; 0xff
 8023d98:	d021      	beq.n	8023dde <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023d9a:	9d08      	ldr	r5, [sp, #32]
 8023d9c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023da0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023da2:	fb05 fb0b 	mul.w	fp, r5, fp
 8023da6:	9d08      	ldr	r5, [sp, #32]
 8023da8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023dac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023dae:	fb05 fa0e 	mul.w	sl, r5, lr
 8023db2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023db6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023dba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023dbe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023dc2:	44de      	add	lr, fp
 8023dc4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023dc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023dcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023dd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023dd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023dd8:	ea4e 050a 	orr.w	r5, lr, sl
 8023ddc:	9508      	str	r5, [sp, #32]
 8023dde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023de0:	2dff      	cmp	r5, #255	; 0xff
 8023de2:	d021      	beq.n	8023e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8023de4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023de6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023dea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023dec:	fb05 fb0b 	mul.w	fp, r5, fp
 8023df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023df2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023df6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023df8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023dfc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e00:	fb05 fa0a 	mul.w	sl, r5, sl
 8023e04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e0c:	44de      	add	lr, fp
 8023e0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e22:	ea4e 050a 	orr.w	r5, lr, sl
 8023e26:	950c      	str	r5, [sp, #48]	; 0x30
 8023e28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023e2a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023e2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e32:	2bff      	cmp	r3, #255	; 0xff
 8023e34:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023e38:	9d08      	ldr	r5, [sp, #32]
 8023e3a:	fb08 fc0c 	mul.w	ip, r8, ip
 8023e3e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023e42:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023e48:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023e4c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023e50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023e52:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023e56:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023e5a:	fb08 f80e 	mul.w	r8, r8, lr
 8023e5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e62:	fb01 8202 	mla	r2, r1, r2, r8
 8023e66:	9908      	ldr	r1, [sp, #32]
 8023e68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e6c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023e70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023e72:	fb00 220a 	mla	r2, r0, sl, r2
 8023e76:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023e7a:	fb09 2900 	mla	r9, r9, r0, r2
 8023e7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023e82:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023e86:	ea4c 0c09 	orr.w	ip, ip, r9
 8023e8a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8023e8e:	f040 8091 	bne.w	8023fb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023e92:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023e96:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023e9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023e9e:	f022 0207 	bic.w	r2, r2, #7
 8023ea2:	431a      	orrs	r2, r3
 8023ea4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023ea8:	ea4c 0c02 	orr.w	ip, ip, r2
 8023eac:	f8a7 c000 	strh.w	ip, [r7]
 8023eb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023eb2:	3702      	adds	r7, #2
 8023eb4:	441c      	add	r4, r3
 8023eb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023eb8:	441e      	add	r6, r3
 8023eba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ebc:	3b01      	subs	r3, #1
 8023ebe:	9317      	str	r3, [sp, #92]	; 0x5c
 8023ec0:	e6c0      	b.n	8023c44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023ec2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023ec4:	441c      	add	r4, r3
 8023ec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ec8:	441e      	add	r6, r3
 8023eca:	9b07      	ldr	r3, [sp, #28]
 8023ecc:	3b01      	subs	r3, #1
 8023ece:	9307      	str	r3, [sp, #28]
 8023ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ed2:	3302      	adds	r3, #2
 8023ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8023ed6:	e695      	b.n	8023c04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023ed8:	d024      	beq.n	8023f24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023eda:	9b07      	ldr	r3, [sp, #28]
 8023edc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023ede:	3b01      	subs	r3, #1
 8023ee0:	fb00 4003 	mla	r0, r0, r3, r4
 8023ee4:	1400      	asrs	r0, r0, #16
 8023ee6:	f53f aeaa 	bmi.w	8023c3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023eea:	3901      	subs	r1, #1
 8023eec:	4288      	cmp	r0, r1
 8023eee:	f6bf aea6 	bge.w	8023c3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023ef2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023ef4:	fb01 6303 	mla	r3, r1, r3, r6
 8023ef8:	141b      	asrs	r3, r3, #16
 8023efa:	f53f aea0 	bmi.w	8023c3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023efe:	3a01      	subs	r2, #1
 8023f00:	4293      	cmp	r3, r2
 8023f02:	f6bf ae9c 	bge.w	8023c3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023f06:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023f0a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8023f0e:	f1bb 0f00 	cmp.w	fp, #0
 8023f12:	f300 809a 	bgt.w	802404a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023f16:	9b07      	ldr	r3, [sp, #28]
 8023f18:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f1e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023f22:	930a      	str	r3, [sp, #40]	; 0x28
 8023f24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	f340 81ec 	ble.w	8024304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023f3a:	eef0 6a62 	vmov.f32	s13, s5
 8023f3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023f42:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023f46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f4a:	ee16 4a90 	vmov	r4, s13
 8023f4e:	eef0 6a43 	vmov.f32	s13, s6
 8023f52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f56:	ee16 6a90 	vmov	r6, s13
 8023f5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023f5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023f62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023f66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023f6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023f6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023f72:	ee12 2a90 	vmov	r2, s5
 8023f76:	eef0 2a47 	vmov.f32	s5, s14
 8023f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f7e:	ee13 2a10 	vmov	r2, s6
 8023f82:	9327      	str	r3, [sp, #156]	; 0x9c
 8023f84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f86:	eeb0 3a67 	vmov.f32	s6, s15
 8023f8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f8e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023f90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023f92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023f94:	3b01      	subs	r3, #1
 8023f96:	9316      	str	r3, [sp, #88]	; 0x58
 8023f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f9a:	bf08      	it	eq
 8023f9c:	4613      	moveq	r3, r2
 8023f9e:	9307      	str	r3, [sp, #28]
 8023fa0:	e622      	b.n	8023be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8023fa2:	2800      	cmp	r0, #0
 8023fa4:	f43f ae92 	beq.w	8023ccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023fa8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023fac:	9308      	str	r3, [sp, #32]
 8023fae:	0e1b      	lsrs	r3, r3, #24
 8023fb0:	9310      	str	r3, [sp, #64]	; 0x40
 8023fb2:	e68b      	b.n	8023ccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023fb4:	8839      	ldrh	r1, [r7, #0]
 8023fb6:	43db      	mvns	r3, r3
 8023fb8:	4dd4      	ldr	r5, [pc, #848]	; (802430c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023fba:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8023fbe:	fa5f f883 	uxtb.w	r8, r3
 8023fc2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023fc6:	10c8      	asrs	r0, r1, #3
 8023fc8:	00cb      	lsls	r3, r1, #3
 8023fca:	fb0e fe08 	mul.w	lr, lr, r8
 8023fce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023fd2:	b2db      	uxtb	r3, r3
 8023fd4:	f10e 0101 	add.w	r1, lr, #1
 8023fd8:	fb00 f008 	mul.w	r0, r0, r8
 8023fdc:	fb03 f308 	mul.w	r3, r3, r8
 8023fe0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023fe4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023fe8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8023fec:	f100 0e01 	add.w	lr, r0, #1
 8023ff0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8023ff4:	b2c9      	uxtb	r1, r1
 8023ff6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023ffa:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8023ffe:	00d2      	lsls	r2, r2, #3
 8024000:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024004:	430a      	orrs	r2, r1
 8024006:	1c59      	adds	r1, r3, #1
 8024008:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802400c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024010:	e748      	b.n	8023ea4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024012:	f112 0801 	adds.w	r8, r2, #1
 8024016:	f53f af4b 	bmi.w	8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802401a:	4543      	cmp	r3, r8
 802401c:	f6ff af48 	blt.w	8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024020:	f11c 0801 	adds.w	r8, ip, #1
 8024024:	f53f af44 	bmi.w	8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024028:	45c6      	cmp	lr, r8
 802402a:	f6ff af41 	blt.w	8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802402e:	b21b      	sxth	r3, r3
 8024030:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8024034:	fa0f f28e 	sxth.w	r2, lr
 8024038:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802403c:	9200      	str	r2, [sp, #0]
 802403e:	4639      	mov	r1, r7
 8024040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024042:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024044:	f7ff fc88 	bl	8023958 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024048:	e732      	b.n	8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802404a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802404c:	1421      	asrs	r1, r4, #16
 802404e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024050:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024054:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8024058:	1433      	asrs	r3, r6, #16
 802405a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802405e:	fb07 1303 	mla	r3, r7, r3, r1
 8024062:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024064:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024068:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802406c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024070:	2a00      	cmp	r2, #0
 8024072:	f000 8108 	beq.w	8024286 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024076:	684d      	ldr	r5, [r1, #4]
 8024078:	950d      	str	r5, [sp, #52]	; 0x34
 802407a:	0e2d      	lsrs	r5, r5, #24
 802407c:	9514      	str	r5, [sp, #80]	; 0x50
 802407e:	b178      	cbz	r0, 80240a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024080:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8024084:	3f01      	subs	r7, #1
 8024086:	00bf      	lsls	r7, r7, #2
 8024088:	3704      	adds	r7, #4
 802408a:	eb01 0e07 	add.w	lr, r1, r7
 802408e:	59c9      	ldr	r1, [r1, r7]
 8024090:	9109      	str	r1, [sp, #36]	; 0x24
 8024092:	0e09      	lsrs	r1, r1, #24
 8024094:	9111      	str	r1, [sp, #68]	; 0x44
 8024096:	f8de 1004 	ldr.w	r1, [lr, #4]
 802409a:	910e      	str	r1, [sp, #56]	; 0x38
 802409c:	0e09      	lsrs	r1, r1, #24
 802409e:	9115      	str	r1, [sp, #84]	; 0x54
 80240a0:	b292      	uxth	r2, r2
 80240a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80240a4:	b280      	uxth	r0, r0
 80240a6:	fb02 f900 	mul.w	r9, r2, r0
 80240aa:	0112      	lsls	r2, r2, #4
 80240ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80240b0:	eba2 0e09 	sub.w	lr, r2, r9
 80240b4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80240b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80240ba:	b280      	uxth	r0, r0
 80240bc:	fa1f fe8e 	uxth.w	lr, lr
 80240c0:	1a09      	subs	r1, r1, r0
 80240c2:	fb0e f202 	mul.w	r2, lr, r2
 80240c6:	b289      	uxth	r1, r1
 80240c8:	fb01 220c 	mla	r2, r1, ip, r2
 80240cc:	fb00 2205 	mla	r2, r0, r5, r2
 80240d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80240d2:	fb09 2205 	mla	r2, r9, r5, r2
 80240d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80240da:	2a00      	cmp	r2, #0
 80240dc:	f000 80ca 	beq.w	8024274 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80240e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80240e4:	d019      	beq.n	802411a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80240e6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80240ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240ee:	fb0c fa0a 	mul.w	sl, ip, sl
 80240f2:	fb0c fc03 	mul.w	ip, ip, r3
 80240f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80240fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80240fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024106:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802410a:	4453      	add	r3, sl
 802410c:	0a3f      	lsrs	r7, r7, #8
 802410e:	0a1b      	lsrs	r3, r3, #8
 8024110:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024114:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024118:	433b      	orrs	r3, r7
 802411a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802411c:	2dff      	cmp	r5, #255	; 0xff
 802411e:	d020      	beq.n	8024162 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024120:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024122:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024126:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024128:	436f      	muls	r7, r5
 802412a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802412c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024130:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024134:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024136:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802413a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802413e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024142:	44bc      	add	ip, r7
 8024144:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024148:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802414c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024150:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024154:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024158:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802415c:	ea4c 050a 	orr.w	r5, ip, sl
 8024160:	950d      	str	r5, [sp, #52]	; 0x34
 8024162:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024164:	2dff      	cmp	r5, #255	; 0xff
 8024166:	d020      	beq.n	80241aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024168:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802416a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802416e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024170:	436f      	muls	r7, r5
 8024172:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024174:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024178:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802417a:	fb05 fa0c 	mul.w	sl, r5, ip
 802417e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024182:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024186:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802418a:	44bc      	add	ip, r7
 802418c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024190:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024198:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802419c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241a4:	ea4c 050a 	orr.w	r5, ip, sl
 80241a8:	9509      	str	r5, [sp, #36]	; 0x24
 80241aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80241ac:	2dff      	cmp	r5, #255	; 0xff
 80241ae:	d020      	beq.n	80241f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80241b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80241b2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80241b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80241b8:	436f      	muls	r7, r5
 80241ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80241bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80241c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80241c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80241c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80241ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241ce:	fb05 fa0a 	mul.w	sl, r5, sl
 80241d2:	44bc      	add	ip, r7
 80241d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80241d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80241dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80241e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241ec:	ea4c 050a 	orr.w	r5, ip, sl
 80241f0:	950e      	str	r5, [sp, #56]	; 0x38
 80241f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80241f4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80241f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241fc:	2aff      	cmp	r2, #255	; 0xff
 80241fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024202:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024204:	fb0e f707 	mul.w	r7, lr, r7
 8024208:	fb01 770c 	mla	r7, r1, ip, r7
 802420c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024210:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024212:	fb00 770c 	mla	r7, r0, ip, r7
 8024216:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802421a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802421c:	fb09 770c 	mla	r7, r9, ip, r7
 8024220:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024224:	fb0e fe0c 	mul.w	lr, lr, ip
 8024228:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802422c:	fb01 e303 	mla	r3, r1, r3, lr
 8024230:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024232:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024236:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802423a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802423c:	fb00 330a 	mla	r3, r0, sl, r3
 8024240:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024244:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802424c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024250:	ea47 070c 	orr.w	r7, r7, ip
 8024254:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024258:	d11e      	bne.n	8024298 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802425a:	097a      	lsrs	r2, r7, #5
 802425c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024260:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024264:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024268:	f023 0307 	bic.w	r3, r3, #7
 802426c:	4313      	orrs	r3, r2
 802426e:	431f      	orrs	r7, r3
 8024270:	f8a8 7000 	strh.w	r7, [r8]
 8024274:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024276:	f108 0802 	add.w	r8, r8, #2
 802427a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802427e:	441c      	add	r4, r3
 8024280:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024282:	441e      	add	r6, r3
 8024284:	e643      	b.n	8023f0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024286:	2800      	cmp	r0, #0
 8024288:	f43f af0a 	beq.w	80240a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802428c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024290:	9109      	str	r1, [sp, #36]	; 0x24
 8024292:	0e09      	lsrs	r1, r1, #24
 8024294:	9111      	str	r1, [sp, #68]	; 0x44
 8024296:	e703      	b.n	80240a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024298:	f8b8 1000 	ldrh.w	r1, [r8]
 802429c:	43d2      	mvns	r2, r2
 802429e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80242a2:	fa5f fe82 	uxtb.w	lr, r2
 80242a6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80242aa:	10c8      	asrs	r0, r1, #3
 80242ac:	00ca      	lsls	r2, r1, #3
 80242ae:	fb0c fc0e 	mul.w	ip, ip, lr
 80242b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80242b6:	b2d2      	uxtb	r2, r2
 80242b8:	f10c 0101 	add.w	r1, ip, #1
 80242bc:	fb00 f00e 	mul.w	r0, r0, lr
 80242c0:	fb02 f20e 	mul.w	r2, r2, lr
 80242c4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80242c8:	0c39      	lsrs	r1, r7, #16
 80242ca:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80242ce:	490f      	ldr	r1, [pc, #60]	; (802430c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80242d0:	fa5f fc8c 	uxtb.w	ip, ip
 80242d4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80242d8:	1c41      	adds	r1, r0, #1
 80242da:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80242de:	1c51      	adds	r1, r2, #1
 80242e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80242e4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80242e8:	00c0      	lsls	r0, r0, #3
 80242ea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80242ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80242f2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80242f6:	ea4c 0c00 	orr.w	ip, ip, r0
 80242fa:	ea47 0c0c 	orr.w	ip, r7, ip
 80242fe:	f8a8 c000 	strh.w	ip, [r8]
 8024302:	e7b7      	b.n	8024274 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024304:	b01b      	add	sp, #108	; 0x6c
 8024306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802430a:	bf00      	nop
 802430c:	fffff800 	.word	0xfffff800

08024310 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024314:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024318:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802431c:	2d00      	cmp	r5, #0
 802431e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024322:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024326:	fb05 0e03 	mla	lr, r5, r3, r0
 802432a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802432e:	f2c0 808c 	blt.w	802444a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024332:	45a9      	cmp	r9, r5
 8024334:	f340 8089 	ble.w	802444a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024338:	2800      	cmp	r0, #0
 802433a:	f2c0 8084 	blt.w	8024446 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802433e:	4580      	cmp	r8, r0
 8024340:	f340 8081 	ble.w	8024446 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024344:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024348:	f01e 0f01 	tst.w	lr, #1
 802434c:	5d16      	ldrb	r6, [r2, r4]
 802434e:	bf0c      	ite	eq
 8024350:	f006 060f 	andeq.w	r6, r6, #15
 8024354:	1136      	asrne	r6, r6, #4
 8024356:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802435a:	b2f6      	uxtb	r6, r6
 802435c:	1c44      	adds	r4, r0, #1
 802435e:	d477      	bmi.n	8024450 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024360:	45a0      	cmp	r8, r4
 8024362:	dd75      	ble.n	8024450 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024364:	2f00      	cmp	r7, #0
 8024366:	d075      	beq.n	8024454 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024368:	f10e 0a01 	add.w	sl, lr, #1
 802436c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024370:	f01a 0f01 	tst.w	sl, #1
 8024374:	5d14      	ldrb	r4, [r2, r4]
 8024376:	bf0c      	ite	eq
 8024378:	f004 040f 	andeq.w	r4, r4, #15
 802437c:	1124      	asrne	r4, r4, #4
 802437e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024382:	b2e4      	uxtb	r4, r4
 8024384:	3501      	adds	r5, #1
 8024386:	d469      	bmi.n	802445c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024388:	45a9      	cmp	r9, r5
 802438a:	dd67      	ble.n	802445c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802438c:	f1bc 0f00 	cmp.w	ip, #0
 8024390:	d067      	beq.n	8024462 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024392:	2800      	cmp	r0, #0
 8024394:	db60      	blt.n	8024458 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024396:	4580      	cmp	r8, r0
 8024398:	dd5e      	ble.n	8024458 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802439a:	eb03 090e 	add.w	r9, r3, lr
 802439e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80243a2:	f019 0f01 	tst.w	r9, #1
 80243a6:	5d55      	ldrb	r5, [r2, r5]
 80243a8:	bf0c      	ite	eq
 80243aa:	f005 050f 	andeq.w	r5, r5, #15
 80243ae:	112d      	asrne	r5, r5, #4
 80243b0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80243b4:	b2ed      	uxtb	r5, r5
 80243b6:	3001      	adds	r0, #1
 80243b8:	d456      	bmi.n	8024468 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80243ba:	4580      	cmp	r8, r0
 80243bc:	dd54      	ble.n	8024468 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80243be:	2f00      	cmp	r7, #0
 80243c0:	d054      	beq.n	802446c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80243c2:	3301      	adds	r3, #1
 80243c4:	449e      	add	lr, r3
 80243c6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80243ca:	f01e 0f01 	tst.w	lr, #1
 80243ce:	5cd0      	ldrb	r0, [r2, r3]
 80243d0:	bf0c      	ite	eq
 80243d2:	f000 000f 	andeq.w	r0, r0, #15
 80243d6:	1100      	asrne	r0, r0, #4
 80243d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80243dc:	b2c3      	uxtb	r3, r0
 80243de:	b2ba      	uxth	r2, r7
 80243e0:	fa1f fc8c 	uxth.w	ip, ip
 80243e4:	fb02 f00c 	mul.w	r0, r2, ip
 80243e8:	0112      	lsls	r2, r2, #4
 80243ea:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80243ee:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80243f2:	1a12      	subs	r2, r2, r0
 80243f4:	fa1f fc8c 	uxth.w	ip, ip
 80243f8:	b292      	uxth	r2, r2
 80243fa:	eba7 070c 	sub.w	r7, r7, ip
 80243fe:	4362      	muls	r2, r4
 8024400:	b2bf      	uxth	r7, r7
 8024402:	fb06 2207 	mla	r2, r6, r7, r2
 8024406:	fb0c 2505 	mla	r5, ip, r5, r2
 802440a:	fb00 5303 	mla	r3, r0, r3, r5
 802440e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024412:	b1b3      	cbz	r3, 8024442 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024414:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024418:	435a      	muls	r2, r3
 802441a:	1c53      	adds	r3, r2, #1
 802441c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024420:	4a2d      	ldr	r2, [pc, #180]	; (80244d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024422:	121b      	asrs	r3, r3, #8
 8024424:	6812      	ldr	r2, [r2, #0]
 8024426:	2bff      	cmp	r3, #255	; 0xff
 8024428:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802442c:	d120      	bne.n	8024470 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802442e:	0950      	lsrs	r0, r2, #5
 8024430:	4b2a      	ldr	r3, [pc, #168]	; (80244dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024432:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024436:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802443a:	4033      	ands	r3, r6
 802443c:	4318      	orrs	r0, r3
 802443e:	4302      	orrs	r2, r0
 8024440:	800a      	strh	r2, [r1, #0]
 8024442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024446:	2600      	movs	r6, #0
 8024448:	e788      	b.n	802435c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802444a:	2400      	movs	r4, #0
 802444c:	4626      	mov	r6, r4
 802444e:	e799      	b.n	8024384 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024450:	2400      	movs	r4, #0
 8024452:	e797      	b.n	8024384 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024454:	463c      	mov	r4, r7
 8024456:	e795      	b.n	8024384 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024458:	2500      	movs	r5, #0
 802445a:	e7ac      	b.n	80243b6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802445c:	2300      	movs	r3, #0
 802445e:	461d      	mov	r5, r3
 8024460:	e7bd      	b.n	80243de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024462:	4663      	mov	r3, ip
 8024464:	4665      	mov	r5, ip
 8024466:	e7ba      	b.n	80243de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024468:	2300      	movs	r3, #0
 802446a:	e7b8      	b.n	80243de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802446c:	463b      	mov	r3, r7
 802446e:	e7b6      	b.n	80243de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024470:	880d      	ldrh	r5, [r1, #0]
 8024472:	b29f      	uxth	r7, r3
 8024474:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024478:	43db      	mvns	r3, r3
 802447a:	122c      	asrs	r4, r5, #8
 802447c:	fb10 f007 	smulbb	r0, r0, r7
 8024480:	b2db      	uxtb	r3, r3
 8024482:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024486:	b2f6      	uxtb	r6, r6
 8024488:	b2d2      	uxtb	r2, r2
 802448a:	fb04 0403 	mla	r4, r4, r3, r0
 802448e:	10e8      	asrs	r0, r5, #3
 8024490:	fb12 f207 	smulbb	r2, r2, r7
 8024494:	00ed      	lsls	r5, r5, #3
 8024496:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802449a:	b2a4      	uxth	r4, r4
 802449c:	fb16 f607 	smulbb	r6, r6, r7
 80244a0:	b2ed      	uxtb	r5, r5
 80244a2:	fb00 6603 	mla	r6, r0, r3, r6
 80244a6:	fb05 2303 	mla	r3, r5, r3, r2
 80244aa:	b2b0      	uxth	r0, r6
 80244ac:	b29a      	uxth	r2, r3
 80244ae:	1c63      	adds	r3, r4, #1
 80244b0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80244b4:	1c53      	adds	r3, r2, #1
 80244b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80244ba:	1c42      	adds	r2, r0, #1
 80244bc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80244c0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80244c4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80244c8:	0940      	lsrs	r0, r0, #5
 80244ca:	4323      	orrs	r3, r4
 80244cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80244d0:	4303      	orrs	r3, r0
 80244d2:	800b      	strh	r3, [r1, #0]
 80244d4:	e7b5      	b.n	8024442 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80244d6:	bf00      	nop
 80244d8:	20027bb0 	.word	0x20027bb0
 80244dc:	00fff800 	.word	0x00fff800

080244e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80244e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244e4:	b097      	sub	sp, #92	; 0x5c
 80244e6:	9214      	str	r2, [sp, #80]	; 0x50
 80244e8:	9309      	str	r3, [sp, #36]	; 0x24
 80244ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80244ec:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80244f0:	9015      	str	r0, [sp, #84]	; 0x54
 80244f2:	910d      	str	r1, [sp, #52]	; 0x34
 80244f4:	6850      	ldr	r0, [r2, #4]
 80244f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80244f8:	6812      	ldr	r2, [r2, #0]
 80244fa:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80244fe:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024502:	fb00 1303 	mla	r3, r0, r3, r1
 8024506:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802450a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802450c:	689b      	ldr	r3, [r3, #8]
 802450e:	3301      	adds	r3, #1
 8024510:	f023 0301 	bic.w	r3, r3, #1
 8024514:	930a      	str	r3, [sp, #40]	; 0x28
 8024516:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024518:	681f      	ldr	r7, [r3, #0]
 802451a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802451c:	2b00      	cmp	r3, #0
 802451e:	dc03      	bgt.n	8024528 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024520:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024522:	2b00      	cmp	r3, #0
 8024524:	f340 8289 	ble.w	8024a3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8024528:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802452a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802452e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024532:	1e48      	subs	r0, r1, #1
 8024534:	f102 3cff 	add.w	ip, r2, #4294967295
 8024538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802453a:	2b00      	cmp	r3, #0
 802453c:	f340 80c5 	ble.w	80246ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024540:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024544:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024548:	d406      	bmi.n	8024558 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802454a:	4586      	cmp	lr, r0
 802454c:	da04      	bge.n	8024558 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802454e:	2b00      	cmp	r3, #0
 8024550:	db02      	blt.n	8024558 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024552:	4563      	cmp	r3, ip
 8024554:	f2c0 80ba 	blt.w	80246cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8024558:	f11e 0e01 	adds.w	lr, lr, #1
 802455c:	f100 80ab 	bmi.w	80246b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024560:	4571      	cmp	r1, lr
 8024562:	f2c0 80a8 	blt.w	80246b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024566:	3301      	adds	r3, #1
 8024568:	f100 80a5 	bmi.w	80246b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802456c:	429a      	cmp	r2, r3
 802456e:	f2c0 80a2 	blt.w	80246b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024574:	46c8      	mov	r8, r9
 8024576:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802457a:	930e      	str	r3, [sp, #56]	; 0x38
 802457c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802457e:	2b00      	cmp	r3, #0
 8024580:	f340 80c4 	ble.w	802470c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8024584:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024586:	1430      	asrs	r0, r6, #16
 8024588:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802458c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024590:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024594:	1423      	asrs	r3, r4, #16
 8024596:	f100 814f 	bmi.w	8024838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802459a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802459e:	455b      	cmp	r3, fp
 80245a0:	f280 814a 	bge.w	8024838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80245a4:	2800      	cmp	r0, #0
 80245a6:	f2c0 8147 	blt.w	8024838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80245aa:	f10e 3bff 	add.w	fp, lr, #4294967295
 80245ae:	4558      	cmp	r0, fp
 80245b0:	f280 8142 	bge.w	8024838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80245b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80245b6:	fb00 3305 	mla	r3, r0, r5, r3
 80245ba:	0858      	lsrs	r0, r3, #1
 80245bc:	07dd      	lsls	r5, r3, #31
 80245be:	f817 c000 	ldrb.w	ip, [r7, r0]
 80245c2:	bf54      	ite	pl
 80245c4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80245c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80245cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80245d0:	fa5f fc8c 	uxtb.w	ip, ip
 80245d4:	2a00      	cmp	r2, #0
 80245d6:	f000 80dd 	beq.w	8024794 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80245da:	1c58      	adds	r0, r3, #1
 80245dc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80245e0:	07c0      	lsls	r0, r0, #31
 80245e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80245e6:	bf54      	ite	pl
 80245e8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80245ec:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80245f0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80245f4:	fa5f f08e 	uxtb.w	r0, lr
 80245f8:	9010      	str	r0, [sp, #64]	; 0x40
 80245fa:	b1d9      	cbz	r1, 8024634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80245fc:	4453      	add	r3, sl
 80245fe:	0858      	lsrs	r0, r3, #1
 8024600:	07dd      	lsls	r5, r3, #31
 8024602:	f103 0301 	add.w	r3, r3, #1
 8024606:	5c38      	ldrb	r0, [r7, r0]
 8024608:	bf54      	ite	pl
 802460a:	f000 000f 	andpl.w	r0, r0, #15
 802460e:	1100      	asrmi	r0, r0, #4
 8024610:	07dd      	lsls	r5, r3, #31
 8024612:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024616:	b2c0      	uxtb	r0, r0
 8024618:	900b      	str	r0, [sp, #44]	; 0x2c
 802461a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802461e:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024622:	bf54      	ite	pl
 8024624:	f00e 030f 	andpl.w	r3, lr, #15
 8024628:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802462c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024630:	b2db      	uxtb	r3, r3
 8024632:	9311      	str	r3, [sp, #68]	; 0x44
 8024634:	b292      	uxth	r2, r2
 8024636:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024638:	b289      	uxth	r1, r1
 802463a:	fb02 f301 	mul.w	r3, r2, r1
 802463e:	0112      	lsls	r2, r2, #4
 8024640:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024644:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024648:	1ad2      	subs	r2, r2, r3
 802464a:	b289      	uxth	r1, r1
 802464c:	b292      	uxth	r2, r2
 802464e:	1a40      	subs	r0, r0, r1
 8024650:	436a      	muls	r2, r5
 8024652:	b280      	uxth	r0, r0
 8024654:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802465a:	fb01 c102 	mla	r1, r1, r2, ip
 802465e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024660:	fb03 1302 	mla	r3, r3, r2, r1
 8024664:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024668:	b1db      	cbz	r3, 80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802466a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802466c:	4353      	muls	r3, r2
 802466e:	1c5a      	adds	r2, r3, #1
 8024670:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024674:	4ac6      	ldr	r2, [pc, #792]	; (8024990 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024676:	121b      	asrs	r3, r3, #8
 8024678:	6812      	ldr	r2, [r2, #0]
 802467a:	2bff      	cmp	r3, #255	; 0xff
 802467c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024680:	f040 8099 	bne.w	80247b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8024684:	0953      	lsrs	r3, r2, #5
 8024686:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802468a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802468e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024692:	f02c 0c07 	bic.w	ip, ip, #7
 8024696:	ea43 0c0c 	orr.w	ip, r3, ip
 802469a:	ea4c 0202 	orr.w	r2, ip, r2
 802469e:	f8a8 2000 	strh.w	r2, [r8]
 80246a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80246a4:	f108 0802 	add.w	r8, r8, #2
 80246a8:	441c      	add	r4, r3
 80246aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80246ac:	441e      	add	r6, r3
 80246ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80246b0:	3b01      	subs	r3, #1
 80246b2:	930e      	str	r3, [sp, #56]	; 0x38
 80246b4:	e762      	b.n	802457c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80246b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80246b8:	f109 0902 	add.w	r9, r9, #2
 80246bc:	441c      	add	r4, r3
 80246be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80246c0:	441e      	add	r6, r3
 80246c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246c4:	3b01      	subs	r3, #1
 80246c6:	9309      	str	r3, [sp, #36]	; 0x24
 80246c8:	e736      	b.n	8024538 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80246ca:	d024      	beq.n	8024716 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80246cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246ce:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80246d0:	3b01      	subs	r3, #1
 80246d2:	fb00 4003 	mla	r0, r0, r3, r4
 80246d6:	1400      	asrs	r0, r0, #16
 80246d8:	f53f af4b 	bmi.w	8024572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80246dc:	3901      	subs	r1, #1
 80246de:	4288      	cmp	r0, r1
 80246e0:	f6bf af47 	bge.w	8024572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80246e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80246e6:	fb01 6303 	mla	r3, r1, r3, r6
 80246ea:	141b      	asrs	r3, r3, #16
 80246ec:	f53f af41 	bmi.w	8024572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80246f0:	3a01      	subs	r2, #1
 80246f2:	4293      	cmp	r3, r2
 80246f4:	f6bf af3d 	bge.w	8024572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80246f8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80246fc:	46c8      	mov	r8, r9
 80246fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024702:	930e      	str	r3, [sp, #56]	; 0x38
 8024704:	f1bb 0f00 	cmp.w	fp, #0
 8024708:	f300 80b7 	bgt.w	802487a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802470c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802470e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024712:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024718:	2b00      	cmp	r3, #0
 802471a:	f340 818e 	ble.w	8024a3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802471e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024722:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024724:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024728:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802472c:	eef0 6a62 	vmov.f32	s13, s5
 8024730:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024734:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024738:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802473c:	ee16 4a90 	vmov	r4, s13
 8024740:	eef0 6a43 	vmov.f32	s13, s6
 8024744:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024748:	ee16 6a90 	vmov	r6, s13
 802474c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024750:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024754:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024758:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802475c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024760:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024764:	ee12 2a90 	vmov	r2, s5
 8024768:	eef0 2a47 	vmov.f32	s5, s14
 802476c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024770:	ee13 2a10 	vmov	r2, s6
 8024774:	9323      	str	r3, [sp, #140]	; 0x8c
 8024776:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024778:	eeb0 3a67 	vmov.f32	s6, s15
 802477c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024780:	9324      	str	r3, [sp, #144]	; 0x90
 8024782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024784:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024786:	3b01      	subs	r3, #1
 8024788:	930d      	str	r3, [sp, #52]	; 0x34
 802478a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802478c:	bf08      	it	eq
 802478e:	4613      	moveq	r3, r2
 8024790:	9309      	str	r3, [sp, #36]	; 0x24
 8024792:	e6c2      	b.n	802451a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024794:	2900      	cmp	r1, #0
 8024796:	f43f af4d 	beq.w	8024634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802479a:	eb0a 0003 	add.w	r0, sl, r3
 802479e:	0843      	lsrs	r3, r0, #1
 80247a0:	07c0      	lsls	r0, r0, #31
 80247a2:	5cfb      	ldrb	r3, [r7, r3]
 80247a4:	bf54      	ite	pl
 80247a6:	f003 030f 	andpl.w	r3, r3, #15
 80247aa:	111b      	asrmi	r3, r3, #4
 80247ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80247b0:	b2db      	uxtb	r3, r3
 80247b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80247b4:	e73e      	b.n	8024634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80247b6:	f8b8 e000 	ldrh.w	lr, [r8]
 80247ba:	fa1f fb83 	uxth.w	fp, r3
 80247be:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80247c2:	43db      	mvns	r3, r3
 80247c4:	ea4f 202e 	mov.w	r0, lr, asr #8
 80247c8:	fb11 f10b 	smulbb	r1, r1, fp
 80247cc:	b2db      	uxtb	r3, r3
 80247ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80247d2:	fa5f fc8c 	uxtb.w	ip, ip
 80247d6:	b2d2      	uxtb	r2, r2
 80247d8:	fb00 1003 	mla	r0, r0, r3, r1
 80247dc:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80247e0:	fb1c fc0b 	smulbb	ip, ip, fp
 80247e4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80247e8:	b280      	uxth	r0, r0
 80247ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80247ee:	fb12 fb0b 	smulbb	fp, r2, fp
 80247f2:	fa5f fe8e 	uxtb.w	lr, lr
 80247f6:	fb01 cc03 	mla	ip, r1, r3, ip
 80247fa:	fb0e bb03 	mla	fp, lr, r3, fp
 80247fe:	1c43      	adds	r3, r0, #1
 8024800:	fa1f fc8c 	uxth.w	ip, ip
 8024804:	fa1f fb8b 	uxth.w	fp, fp
 8024808:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802480c:	f10c 0101 	add.w	r1, ip, #1
 8024810:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8024814:	f10b 0001 	add.w	r0, fp, #1
 8024818:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802481c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024820:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024824:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024828:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802482c:	4318      	orrs	r0, r3
 802482e:	ea40 000c 	orr.w	r0, r0, ip
 8024832:	f8a8 0000 	strh.w	r0, [r8]
 8024836:	e734      	b.n	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024838:	f113 0b01 	adds.w	fp, r3, #1
 802483c:	f53f af31 	bmi.w	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024840:	45dc      	cmp	ip, fp
 8024842:	f6ff af2e 	blt.w	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024846:	f110 0b01 	adds.w	fp, r0, #1
 802484a:	f53f af2a 	bmi.w	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802484e:	45de      	cmp	lr, fp
 8024850:	f6ff af27 	blt.w	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024854:	9302      	str	r3, [sp, #8]
 8024856:	fa0f f38e 	sxth.w	r3, lr
 802485a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802485c:	9301      	str	r3, [sp, #4]
 802485e:	fa0f f38c 	sxth.w	r3, ip
 8024862:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024866:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802486a:	9300      	str	r3, [sp, #0]
 802486c:	463a      	mov	r2, r7
 802486e:	4653      	mov	r3, sl
 8024870:	4641      	mov	r1, r8
 8024872:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024874:	f7ff fd4c 	bl	8024310 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8024878:	e713      	b.n	80246a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802487a:	1422      	asrs	r2, r4, #16
 802487c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802487e:	1433      	asrs	r3, r6, #16
 8024880:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024884:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024888:	fb05 2303 	mla	r3, r5, r3, r2
 802488c:	085a      	lsrs	r2, r3, #1
 802488e:	07dd      	lsls	r5, r3, #31
 8024890:	5cba      	ldrb	r2, [r7, r2]
 8024892:	bf54      	ite	pl
 8024894:	f002 020f 	andpl.w	r2, r2, #15
 8024898:	1112      	asrmi	r2, r2, #4
 802489a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802489e:	b2d2      	uxtb	r2, r2
 80248a0:	2900      	cmp	r1, #0
 80248a2:	d077      	beq.n	8024994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80248a4:	f103 0e01 	add.w	lr, r3, #1
 80248a8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80248ac:	f01e 0f01 	tst.w	lr, #1
 80248b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248b4:	bf0c      	ite	eq
 80248b6:	f00c 0c0f 	andeq.w	ip, ip, #15
 80248ba:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80248be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248c2:	fa5f f58c 	uxtb.w	r5, ip
 80248c6:	9512      	str	r5, [sp, #72]	; 0x48
 80248c8:	b308      	cbz	r0, 802490e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80248ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80248cc:	442b      	add	r3, r5
 80248ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80248d2:	07dd      	lsls	r5, r3, #31
 80248d4:	f103 0301 	add.w	r3, r3, #1
 80248d8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248dc:	bf54      	ite	pl
 80248de:	f00c 0c0f 	andpl.w	ip, ip, #15
 80248e2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80248e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248ea:	fa5f f58c 	uxtb.w	r5, ip
 80248ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80248f2:	950c      	str	r5, [sp, #48]	; 0x30
 80248f4:	07dd      	lsls	r5, r3, #31
 80248f6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248fa:	bf54      	ite	pl
 80248fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024900:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024904:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024908:	fa5f f38c 	uxtb.w	r3, ip
 802490c:	9313      	str	r3, [sp, #76]	; 0x4c
 802490e:	b289      	uxth	r1, r1
 8024910:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024912:	b280      	uxth	r0, r0
 8024914:	fb01 f300 	mul.w	r3, r1, r0
 8024918:	0109      	lsls	r1, r1, #4
 802491a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802491e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024922:	1ac9      	subs	r1, r1, r3
 8024924:	b280      	uxth	r0, r0
 8024926:	b289      	uxth	r1, r1
 8024928:	ebac 0c00 	sub.w	ip, ip, r0
 802492c:	4369      	muls	r1, r5
 802492e:	fa1f fc8c 	uxth.w	ip, ip
 8024932:	fb02 120c 	mla	r2, r2, ip, r1
 8024936:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024938:	fb00 2001 	mla	r0, r0, r1, r2
 802493c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802493e:	fb03 0302 	mla	r3, r3, r2, r0
 8024942:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024946:	b1d3      	cbz	r3, 802497e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802494a:	4353      	muls	r3, r2
 802494c:	1c5a      	adds	r2, r3, #1
 802494e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024952:	4a0f      	ldr	r2, [pc, #60]	; (8024990 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024954:	121b      	asrs	r3, r3, #8
 8024956:	6812      	ldr	r2, [r2, #0]
 8024958:	2bff      	cmp	r3, #255	; 0xff
 802495a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802495e:	d12d      	bne.n	80249bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024960:	0953      	lsrs	r3, r2, #5
 8024962:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024966:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802496a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802496e:	f02c 0c07 	bic.w	ip, ip, #7
 8024972:	ea43 0c0c 	orr.w	ip, r3, ip
 8024976:	ea4c 0202 	orr.w	r2, ip, r2
 802497a:	f8a8 2000 	strh.w	r2, [r8]
 802497e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024980:	f108 0802 	add.w	r8, r8, #2
 8024984:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024988:	441c      	add	r4, r3
 802498a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802498c:	441e      	add	r6, r3
 802498e:	e6b9      	b.n	8024704 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024990:	20027bb0 	.word	0x20027bb0
 8024994:	2800      	cmp	r0, #0
 8024996:	d0ba      	beq.n	802490e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024998:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802499a:	442b      	add	r3, r5
 802499c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249a0:	07db      	lsls	r3, r3, #31
 80249a2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249a6:	bf54      	ite	pl
 80249a8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80249ac:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80249b0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80249b4:	fa5f f38c 	uxtb.w	r3, ip
 80249b8:	930c      	str	r3, [sp, #48]	; 0x30
 80249ba:	e7a8      	b.n	802490e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80249bc:	f8b8 e000 	ldrh.w	lr, [r8]
 80249c0:	fa1f fa83 	uxth.w	sl, r3
 80249c4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80249c8:	43db      	mvns	r3, r3
 80249ca:	ea4f 202e 	mov.w	r0, lr, asr #8
 80249ce:	fb11 f10a 	smulbb	r1, r1, sl
 80249d2:	b2db      	uxtb	r3, r3
 80249d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80249d8:	b2d2      	uxtb	r2, r2
 80249da:	fa5f fc8c 	uxtb.w	ip, ip
 80249de:	fb00 1003 	mla	r0, r0, r3, r1
 80249e2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80249e6:	fb12 f20a 	smulbb	r2, r2, sl
 80249ea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80249ee:	b280      	uxth	r0, r0
 80249f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80249f4:	fb1c fc0a 	smulbb	ip, ip, sl
 80249f8:	fa5f fe8e 	uxtb.w	lr, lr
 80249fc:	fb0e 2203 	mla	r2, lr, r3, r2
 8024a00:	fb01 cc03 	mla	ip, r1, r3, ip
 8024a04:	1c43      	adds	r3, r0, #1
 8024a06:	b292      	uxth	r2, r2
 8024a08:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024a0c:	1c51      	adds	r1, r2, #1
 8024a0e:	fa1f fc8c 	uxth.w	ip, ip
 8024a12:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024a16:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024a1a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024a1e:	4308      	orrs	r0, r1
 8024a20:	f10c 0101 	add.w	r1, ip, #1
 8024a24:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024a28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024a2c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024a30:	ea40 000c 	orr.w	r0, r0, ip
 8024a34:	f8a8 0000 	strh.w	r0, [r8]
 8024a38:	e7a1      	b.n	802497e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024a3a:	b017      	add	sp, #92	; 0x5c
 8024a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a40 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8024a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a44:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024a48:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024a4c:	2d00      	cmp	r5, #0
 8024a4e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024a52:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024a56:	fb05 0e03 	mla	lr, r5, r3, r0
 8024a5a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024a5e:	f2c0 80b0 	blt.w	8024bc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024a62:	45a9      	cmp	r9, r5
 8024a64:	f340 80ad 	ble.w	8024bc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024a68:	2800      	cmp	r0, #0
 8024a6a:	f2c0 80a8 	blt.w	8024bbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024a6e:	4580      	cmp	r8, r0
 8024a70:	f340 80a5 	ble.w	8024bbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024a74:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024a78:	f01e 0f01 	tst.w	lr, #1
 8024a7c:	5d16      	ldrb	r6, [r2, r4]
 8024a7e:	bf0c      	ite	eq
 8024a80:	f006 060f 	andeq.w	r6, r6, #15
 8024a84:	1136      	asrne	r6, r6, #4
 8024a86:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024a8a:	b2f6      	uxtb	r6, r6
 8024a8c:	1c44      	adds	r4, r0, #1
 8024a8e:	f100 809b 	bmi.w	8024bc8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024a92:	45a0      	cmp	r8, r4
 8024a94:	f340 8098 	ble.w	8024bc8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024a98:	2f00      	cmp	r7, #0
 8024a9a:	f000 8097 	beq.w	8024bcc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8024a9e:	f10e 0a01 	add.w	sl, lr, #1
 8024aa2:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024aa6:	f01a 0f01 	tst.w	sl, #1
 8024aaa:	5d14      	ldrb	r4, [r2, r4]
 8024aac:	bf0c      	ite	eq
 8024aae:	f004 040f 	andeq.w	r4, r4, #15
 8024ab2:	1124      	asrne	r4, r4, #4
 8024ab4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024ab8:	b2e4      	uxtb	r4, r4
 8024aba:	3501      	adds	r5, #1
 8024abc:	f100 808a 	bmi.w	8024bd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024ac0:	45a9      	cmp	r9, r5
 8024ac2:	f340 8087 	ble.w	8024bd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024ac6:	f1bc 0f00 	cmp.w	ip, #0
 8024aca:	f000 8086 	beq.w	8024bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8024ace:	2800      	cmp	r0, #0
 8024ad0:	db7e      	blt.n	8024bd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024ad2:	4580      	cmp	r8, r0
 8024ad4:	dd7c      	ble.n	8024bd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024ad6:	eb03 090e 	add.w	r9, r3, lr
 8024ada:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024ade:	f019 0f01 	tst.w	r9, #1
 8024ae2:	5d55      	ldrb	r5, [r2, r5]
 8024ae4:	bf0c      	ite	eq
 8024ae6:	f005 050f 	andeq.w	r5, r5, #15
 8024aea:	112d      	asrne	r5, r5, #4
 8024aec:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024af0:	b2ed      	uxtb	r5, r5
 8024af2:	3001      	adds	r0, #1
 8024af4:	d474      	bmi.n	8024be0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8024af6:	4580      	cmp	r8, r0
 8024af8:	dd72      	ble.n	8024be0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8024afa:	2f00      	cmp	r7, #0
 8024afc:	d072      	beq.n	8024be4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8024afe:	3301      	adds	r3, #1
 8024b00:	449e      	add	lr, r3
 8024b02:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024b06:	f01e 0f01 	tst.w	lr, #1
 8024b0a:	5cd0      	ldrb	r0, [r2, r3]
 8024b0c:	bf0c      	ite	eq
 8024b0e:	f000 000f 	andeq.w	r0, r0, #15
 8024b12:	1100      	asrne	r0, r0, #4
 8024b14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024b18:	b2c3      	uxtb	r3, r0
 8024b1a:	b2ba      	uxth	r2, r7
 8024b1c:	fa1f fc8c 	uxth.w	ip, ip
 8024b20:	fb02 f00c 	mul.w	r0, r2, ip
 8024b24:	0112      	lsls	r2, r2, #4
 8024b26:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024b2a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024b2e:	1a12      	subs	r2, r2, r0
 8024b30:	fa1f fc8c 	uxth.w	ip, ip
 8024b34:	b292      	uxth	r2, r2
 8024b36:	eba7 070c 	sub.w	r7, r7, ip
 8024b3a:	4362      	muls	r2, r4
 8024b3c:	b2bf      	uxth	r7, r7
 8024b3e:	fb06 2207 	mla	r2, r6, r7, r2
 8024b42:	fb0c 2505 	mla	r5, ip, r5, r2
 8024b46:	fb00 5303 	mla	r3, r0, r3, r5
 8024b4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024b4e:	b3a3      	cbz	r3, 8024bba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8024b50:	4a25      	ldr	r2, [pc, #148]	; (8024be8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8024b52:	880e      	ldrh	r6, [r1, #0]
 8024b54:	6815      	ldr	r5, [r2, #0]
 8024b56:	b29a      	uxth	r2, r3
 8024b58:	1234      	asrs	r4, r6, #8
 8024b5a:	43db      	mvns	r3, r3
 8024b5c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8024b60:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8024b64:	b2db      	uxtb	r3, r3
 8024b66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024b6a:	fb10 f002 	smulbb	r0, r0, r2
 8024b6e:	b2ed      	uxtb	r5, r5
 8024b70:	fb17 f702 	smulbb	r7, r7, r2
 8024b74:	fb04 0403 	mla	r4, r4, r3, r0
 8024b78:	10f0      	asrs	r0, r6, #3
 8024b7a:	fb15 f202 	smulbb	r2, r5, r2
 8024b7e:	00f6      	lsls	r6, r6, #3
 8024b80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b84:	b2a4      	uxth	r4, r4
 8024b86:	b2f6      	uxtb	r6, r6
 8024b88:	fb00 7003 	mla	r0, r0, r3, r7
 8024b8c:	fb06 2303 	mla	r3, r6, r3, r2
 8024b90:	b280      	uxth	r0, r0
 8024b92:	b29a      	uxth	r2, r3
 8024b94:	1c63      	adds	r3, r4, #1
 8024b96:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024b9a:	1c53      	adds	r3, r2, #1
 8024b9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ba0:	1c42      	adds	r2, r0, #1
 8024ba2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024ba6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024baa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024bae:	0940      	lsrs	r0, r0, #5
 8024bb0:	4323      	orrs	r3, r4
 8024bb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bb6:	4303      	orrs	r3, r0
 8024bb8:	800b      	strh	r3, [r1, #0]
 8024bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024bbe:	2600      	movs	r6, #0
 8024bc0:	e764      	b.n	8024a8c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8024bc2:	2400      	movs	r4, #0
 8024bc4:	4626      	mov	r6, r4
 8024bc6:	e778      	b.n	8024aba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024bc8:	2400      	movs	r4, #0
 8024bca:	e776      	b.n	8024aba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024bcc:	463c      	mov	r4, r7
 8024bce:	e774      	b.n	8024aba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024bd0:	2500      	movs	r5, #0
 8024bd2:	e78e      	b.n	8024af2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8024bd4:	2300      	movs	r3, #0
 8024bd6:	461d      	mov	r5, r3
 8024bd8:	e79f      	b.n	8024b1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024bda:	4663      	mov	r3, ip
 8024bdc:	4665      	mov	r5, ip
 8024bde:	e79c      	b.n	8024b1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024be0:	2300      	movs	r3, #0
 8024be2:	e79a      	b.n	8024b1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024be4:	463b      	mov	r3, r7
 8024be6:	e798      	b.n	8024b1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024be8:	20027bb0 	.word	0x20027bb0

08024bec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bf0:	b093      	sub	sp, #76	; 0x4c
 8024bf2:	461d      	mov	r5, r3
 8024bf4:	920c      	str	r2, [sp, #48]	; 0x30
 8024bf6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024bf8:	9011      	str	r0, [sp, #68]	; 0x44
 8024bfa:	9107      	str	r1, [sp, #28]
 8024bfc:	6850      	ldr	r0, [r2, #4]
 8024bfe:	6812      	ldr	r2, [r2, #0]
 8024c00:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024c04:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024c08:	fb00 1303 	mla	r3, r0, r3, r1
 8024c0c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024c10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c12:	689b      	ldr	r3, [r3, #8]
 8024c14:	3301      	adds	r3, #1
 8024c16:	f023 0301 	bic.w	r3, r3, #1
 8024c1a:	9306      	str	r3, [sp, #24]
 8024c1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c1e:	681f      	ldr	r7, [r3, #0]
 8024c20:	9b07      	ldr	r3, [sp, #28]
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	dc03      	bgt.n	8024c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	f340 8267 	ble.w	80250fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c38:	1e48      	subs	r0, r1, #1
 8024c3a:	f102 3cff 	add.w	ip, r2, #4294967295
 8024c3e:	2d00      	cmp	r5, #0
 8024c40:	f340 80b7 	ble.w	8024db2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024c44:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024c48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024c4c:	d406      	bmi.n	8024c5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024c4e:	4586      	cmp	lr, r0
 8024c50:	da04      	bge.n	8024c5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024c52:	2b00      	cmp	r3, #0
 8024c54:	db02      	blt.n	8024c5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024c56:	4563      	cmp	r3, ip
 8024c58:	f2c0 80ac 	blt.w	8024db4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024c5c:	f11e 0e01 	adds.w	lr, lr, #1
 8024c60:	f100 809f 	bmi.w	8024da2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024c64:	4571      	cmp	r1, lr
 8024c66:	f2c0 809c 	blt.w	8024da2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024c6a:	3301      	adds	r3, #1
 8024c6c:	f100 8099 	bmi.w	8024da2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024c70:	429a      	cmp	r2, r3
 8024c72:	f2c0 8096 	blt.w	8024da2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024c76:	46c8      	mov	r8, r9
 8024c78:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8024c7c:	9509      	str	r5, [sp, #36]	; 0x24
 8024c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c80:	2b00      	cmp	r3, #0
 8024c82:	f340 80b5 	ble.w	8024df0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024c86:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024c8a:	1430      	asrs	r0, r6, #16
 8024c8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024c90:	9308      	str	r3, [sp, #32]
 8024c92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c94:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024c98:	1423      	asrs	r3, r4, #16
 8024c9a:	f100 813f 	bmi.w	8024f1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c9e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024ca2:	455b      	cmp	r3, fp
 8024ca4:	f280 813a 	bge.w	8024f1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024ca8:	2800      	cmp	r0, #0
 8024caa:	f2c0 8137 	blt.w	8024f1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024cae:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024cb2:	4558      	cmp	r0, fp
 8024cb4:	f280 8132 	bge.w	8024f1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024cb8:	9a06      	ldr	r2, [sp, #24]
 8024cba:	fb00 3302 	mla	r3, r0, r2, r3
 8024cbe:	0858      	lsrs	r0, r3, #1
 8024cc0:	07da      	lsls	r2, r3, #31
 8024cc2:	9a08      	ldr	r2, [sp, #32]
 8024cc4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024cc8:	bf54      	ite	pl
 8024cca:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024cce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024cd2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024cd6:	fa5f fc8c 	uxtb.w	ip, ip
 8024cda:	2a00      	cmp	r2, #0
 8024cdc:	f000 80cc 	beq.w	8024e78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024ce0:	1c58      	adds	r0, r3, #1
 8024ce2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024ce6:	07c0      	lsls	r0, r0, #31
 8024ce8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024cec:	bf54      	ite	pl
 8024cee:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024cf2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024cf6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024cfa:	fa5f fe8e 	uxtb.w	lr, lr
 8024cfe:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024d02:	b1b9      	cbz	r1, 8024d34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024d04:	4453      	add	r3, sl
 8024d06:	0858      	lsrs	r0, r3, #1
 8024d08:	07da      	lsls	r2, r3, #31
 8024d0a:	5c38      	ldrb	r0, [r7, r0]
 8024d0c:	bf54      	ite	pl
 8024d0e:	f000 000f 	andpl.w	r0, r0, #15
 8024d12:	1100      	asrmi	r0, r0, #4
 8024d14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024d18:	b2c0      	uxtb	r0, r0
 8024d1a:	900a      	str	r0, [sp, #40]	; 0x28
 8024d1c:	1c58      	adds	r0, r3, #1
 8024d1e:	0843      	lsrs	r3, r0, #1
 8024d20:	07c2      	lsls	r2, r0, #31
 8024d22:	5cfb      	ldrb	r3, [r7, r3]
 8024d24:	bf54      	ite	pl
 8024d26:	f003 030f 	andpl.w	r3, r3, #15
 8024d2a:	111b      	asrmi	r3, r3, #4
 8024d2c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024d30:	b2db      	uxtb	r3, r3
 8024d32:	930e      	str	r3, [sp, #56]	; 0x38
 8024d34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024d38:	b289      	uxth	r1, r1
 8024d3a:	fb02 f301 	mul.w	r3, r2, r1
 8024d3e:	0112      	lsls	r2, r2, #4
 8024d40:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024d44:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024d48:	1ad2      	subs	r2, r2, r3
 8024d4a:	b289      	uxth	r1, r1
 8024d4c:	b292      	uxth	r2, r2
 8024d4e:	1a40      	subs	r0, r0, r1
 8024d50:	fa1f fe80 	uxth.w	lr, r0
 8024d54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024d56:	4342      	muls	r2, r0
 8024d58:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d5e:	fb01 c102 	mla	r1, r1, r2, ip
 8024d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024d64:	fb03 1302 	mla	r3, r3, r2, r1
 8024d68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024d6c:	2bff      	cmp	r3, #255	; 0xff
 8024d6e:	f040 8094 	bne.w	8024e9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024d72:	4bbf      	ldr	r3, [pc, #764]	; (8025070 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024d74:	681a      	ldr	r2, [r3, #0]
 8024d76:	4bbf      	ldr	r3, [pc, #764]	; (8025074 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8024d78:	0951      	lsrs	r1, r2, #5
 8024d7a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024d7e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024d82:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024d86:	430b      	orrs	r3, r1
 8024d88:	4313      	orrs	r3, r2
 8024d8a:	f8a8 3000 	strh.w	r3, [r8]
 8024d8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024d90:	f108 0802 	add.w	r8, r8, #2
 8024d94:	441c      	add	r4, r3
 8024d96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d98:	441e      	add	r6, r3
 8024d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d9c:	3b01      	subs	r3, #1
 8024d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8024da0:	e76d      	b.n	8024c7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024da2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024da4:	3d01      	subs	r5, #1
 8024da6:	f109 0902 	add.w	r9, r9, #2
 8024daa:	441c      	add	r4, r3
 8024dac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024dae:	441e      	add	r6, r3
 8024db0:	e745      	b.n	8024c3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024db2:	d021      	beq.n	8024df8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024db4:	1e6b      	subs	r3, r5, #1
 8024db6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024db8:	fb00 4003 	mla	r0, r0, r3, r4
 8024dbc:	1400      	asrs	r0, r0, #16
 8024dbe:	f53f af5a 	bmi.w	8024c76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024dc2:	3901      	subs	r1, #1
 8024dc4:	4288      	cmp	r0, r1
 8024dc6:	f6bf af56 	bge.w	8024c76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024dca:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024dcc:	fb01 6303 	mla	r3, r1, r3, r6
 8024dd0:	141b      	asrs	r3, r3, #16
 8024dd2:	f53f af50 	bmi.w	8024c76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024dd6:	3a01      	subs	r2, #1
 8024dd8:	4293      	cmp	r3, r2
 8024dda:	f6bf af4c 	bge.w	8024c76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024dde:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024de2:	46a8      	mov	r8, r5
 8024de4:	46ce      	mov	lr, r9
 8024de6:	9308      	str	r3, [sp, #32]
 8024de8:	f1b8 0f00 	cmp.w	r8, #0
 8024dec:	f300 80b6 	bgt.w	8024f5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024df0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024df4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024df8:	9b07      	ldr	r3, [sp, #28]
 8024dfa:	2b00      	cmp	r3, #0
 8024dfc:	f340 817e 	ble.w	80250fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024e0e:	eef0 6a62 	vmov.f32	s13, s5
 8024e12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024e1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e1e:	ee16 4a90 	vmov	r4, s13
 8024e22:	eef0 6a43 	vmov.f32	s13, s6
 8024e26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e2a:	ee16 6a90 	vmov	r6, s13
 8024e2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024e32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024e36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024e3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024e3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024e42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024e46:	ee12 2a90 	vmov	r2, s5
 8024e4a:	eef0 2a47 	vmov.f32	s5, s14
 8024e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e52:	ee13 2a10 	vmov	r2, s6
 8024e56:	931f      	str	r3, [sp, #124]	; 0x7c
 8024e58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e5a:	eeb0 3a67 	vmov.f32	s6, s15
 8024e5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e62:	9320      	str	r3, [sp, #128]	; 0x80
 8024e64:	9b07      	ldr	r3, [sp, #28]
 8024e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024e68:	3b01      	subs	r3, #1
 8024e6a:	9307      	str	r3, [sp, #28]
 8024e6c:	bf08      	it	eq
 8024e6e:	4615      	moveq	r5, r2
 8024e70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e72:	bf18      	it	ne
 8024e74:	461d      	movne	r5, r3
 8024e76:	e6d3      	b.n	8024c20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024e78:	2900      	cmp	r1, #0
 8024e7a:	f43f af5b 	beq.w	8024d34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024e7e:	eb0a 0003 	add.w	r0, sl, r3
 8024e82:	0843      	lsrs	r3, r0, #1
 8024e84:	07c0      	lsls	r0, r0, #31
 8024e86:	5cfb      	ldrb	r3, [r7, r3]
 8024e88:	bf54      	ite	pl
 8024e8a:	f003 030f 	andpl.w	r3, r3, #15
 8024e8e:	111b      	asrmi	r3, r3, #4
 8024e90:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024e94:	b2db      	uxtb	r3, r3
 8024e96:	930a      	str	r3, [sp, #40]	; 0x28
 8024e98:	e74c      	b.n	8024d34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	f43f af77 	beq.w	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ea0:	4a73      	ldr	r2, [pc, #460]	; (8025070 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024ea2:	fa1f fe83 	uxth.w	lr, r3
 8024ea6:	f8b8 c000 	ldrh.w	ip, [r8]
 8024eaa:	43db      	mvns	r3, r3
 8024eac:	6810      	ldr	r0, [r2, #0]
 8024eae:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024eb2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024eb6:	b2db      	uxtb	r3, r3
 8024eb8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024ebc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024ec0:	fb12 f20e 	smulbb	r2, r2, lr
 8024ec4:	b2c0      	uxtb	r0, r0
 8024ec6:	fb1b fb0e 	smulbb	fp, fp, lr
 8024eca:	fb01 2103 	mla	r1, r1, r3, r2
 8024ece:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024ed2:	fb10 fe0e 	smulbb	lr, r0, lr
 8024ed6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024eda:	b289      	uxth	r1, r1
 8024edc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024ee0:	fa5f fc8c 	uxtb.w	ip, ip
 8024ee4:	fb02 b203 	mla	r2, r2, r3, fp
 8024ee8:	1c48      	adds	r0, r1, #1
 8024eea:	fb0c e303 	mla	r3, ip, r3, lr
 8024eee:	b292      	uxth	r2, r2
 8024ef0:	b29b      	uxth	r3, r3
 8024ef2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024ef6:	f102 0b01 	add.w	fp, r2, #1
 8024efa:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8024efe:	1c59      	adds	r1, r3, #1
 8024f00:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024f04:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024f08:	0952      	lsrs	r2, r2, #5
 8024f0a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024f0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024f12:	4301      	orrs	r1, r0
 8024f14:	4311      	orrs	r1, r2
 8024f16:	f8a8 1000 	strh.w	r1, [r8]
 8024f1a:	e738      	b.n	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f1c:	f113 0b01 	adds.w	fp, r3, #1
 8024f20:	f53f af35 	bmi.w	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f24:	45dc      	cmp	ip, fp
 8024f26:	f6ff af32 	blt.w	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f2a:	f110 0b01 	adds.w	fp, r0, #1
 8024f2e:	f53f af2e 	bmi.w	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f32:	45de      	cmp	lr, fp
 8024f34:	f6ff af2b 	blt.w	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f38:	9302      	str	r3, [sp, #8]
 8024f3a:	fa0f f38e 	sxth.w	r3, lr
 8024f3e:	9a08      	ldr	r2, [sp, #32]
 8024f40:	9301      	str	r3, [sp, #4]
 8024f42:	fa0f f38c 	sxth.w	r3, ip
 8024f46:	9105      	str	r1, [sp, #20]
 8024f48:	4641      	mov	r1, r8
 8024f4a:	9300      	str	r3, [sp, #0]
 8024f4c:	4653      	mov	r3, sl
 8024f4e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024f52:	463a      	mov	r2, r7
 8024f54:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024f56:	f7ff fd73 	bl	8024a40 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024f5a:	e718      	b.n	8024d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024f5c:	1422      	asrs	r2, r4, #16
 8024f5e:	9906      	ldr	r1, [sp, #24]
 8024f60:	1433      	asrs	r3, r6, #16
 8024f62:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024f66:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024f6a:	fb01 2303 	mla	r3, r1, r3, r2
 8024f6e:	085a      	lsrs	r2, r3, #1
 8024f70:	07d9      	lsls	r1, r3, #31
 8024f72:	5cba      	ldrb	r2, [r7, r2]
 8024f74:	bf54      	ite	pl
 8024f76:	f002 020f 	andpl.w	r2, r2, #15
 8024f7a:	1112      	asrmi	r2, r2, #4
 8024f7c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024f80:	b2d2      	uxtb	r2, r2
 8024f82:	2800      	cmp	r0, #0
 8024f84:	d063      	beq.n	802504e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8024f86:	f103 0a01 	add.w	sl, r3, #1
 8024f8a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024f8e:	f01a 0f01 	tst.w	sl, #1
 8024f92:	5c79      	ldrb	r1, [r7, r1]
 8024f94:	bf0c      	ite	eq
 8024f96:	f001 010f 	andeq.w	r1, r1, #15
 8024f9a:	1109      	asrne	r1, r1, #4
 8024f9c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024fa0:	b2c9      	uxtb	r1, r1
 8024fa2:	910f      	str	r1, [sp, #60]	; 0x3c
 8024fa4:	f1bc 0f00 	cmp.w	ip, #0
 8024fa8:	d01a      	beq.n	8024fe0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024faa:	9908      	ldr	r1, [sp, #32]
 8024fac:	440b      	add	r3, r1
 8024fae:	0859      	lsrs	r1, r3, #1
 8024fb0:	f013 0f01 	tst.w	r3, #1
 8024fb4:	f103 0301 	add.w	r3, r3, #1
 8024fb8:	5c79      	ldrb	r1, [r7, r1]
 8024fba:	bf0c      	ite	eq
 8024fbc:	f001 010f 	andeq.w	r1, r1, #15
 8024fc0:	1109      	asrne	r1, r1, #4
 8024fc2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024fc6:	b2c9      	uxtb	r1, r1
 8024fc8:	910b      	str	r1, [sp, #44]	; 0x2c
 8024fca:	0859      	lsrs	r1, r3, #1
 8024fcc:	07db      	lsls	r3, r3, #31
 8024fce:	5c79      	ldrb	r1, [r7, r1]
 8024fd0:	bf54      	ite	pl
 8024fd2:	f001 010f 	andpl.w	r1, r1, #15
 8024fd6:	1109      	asrmi	r1, r1, #4
 8024fd8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024fdc:	b2c9      	uxtb	r1, r1
 8024fde:	9110      	str	r1, [sp, #64]	; 0x40
 8024fe0:	b280      	uxth	r0, r0
 8024fe2:	fa1f fc8c 	uxth.w	ip, ip
 8024fe6:	fb00 f30c 	mul.w	r3, r0, ip
 8024fea:	0100      	lsls	r0, r0, #4
 8024fec:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024ff0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024ff4:	1ac0      	subs	r0, r0, r3
 8024ff6:	fa1f fc8c 	uxth.w	ip, ip
 8024ffa:	b280      	uxth	r0, r0
 8024ffc:	eba1 010c 	sub.w	r1, r1, ip
 8025000:	fa1f fa81 	uxth.w	sl, r1
 8025004:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025006:	4348      	muls	r0, r1
 8025008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802500a:	fb02 020a 	mla	r2, r2, sl, r0
 802500e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025012:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025014:	fb03 c302 	mla	r3, r3, r2, ip
 8025018:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802501c:	2bff      	cmp	r3, #255	; 0xff
 802501e:	d12b      	bne.n	8025078 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025020:	4b13      	ldr	r3, [pc, #76]	; (8025070 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025022:	681a      	ldr	r2, [r3, #0]
 8025024:	4b13      	ldr	r3, [pc, #76]	; (8025074 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8025026:	0951      	lsrs	r1, r2, #5
 8025028:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802502c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025030:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025034:	430b      	orrs	r3, r1
 8025036:	4313      	orrs	r3, r2
 8025038:	f8ae 3000 	strh.w	r3, [lr]
 802503c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802503e:	f10e 0e02 	add.w	lr, lr, #2
 8025042:	f108 38ff 	add.w	r8, r8, #4294967295
 8025046:	441c      	add	r4, r3
 8025048:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802504a:	441e      	add	r6, r3
 802504c:	e6cc      	b.n	8024de8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802504e:	f1bc 0f00 	cmp.w	ip, #0
 8025052:	d0c5      	beq.n	8024fe0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025054:	9908      	ldr	r1, [sp, #32]
 8025056:	440b      	add	r3, r1
 8025058:	0859      	lsrs	r1, r3, #1
 802505a:	07db      	lsls	r3, r3, #31
 802505c:	5c79      	ldrb	r1, [r7, r1]
 802505e:	bf54      	ite	pl
 8025060:	f001 010f 	andpl.w	r1, r1, #15
 8025064:	1109      	asrmi	r1, r1, #4
 8025066:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802506a:	b2c9      	uxtb	r1, r1
 802506c:	910b      	str	r1, [sp, #44]	; 0x2c
 802506e:	e7b7      	b.n	8024fe0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025070:	20027bb0 	.word	0x20027bb0
 8025074:	fffff800 	.word	0xfffff800
 8025078:	2b00      	cmp	r3, #0
 802507a:	d0df      	beq.n	802503c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802507c:	4a21      	ldr	r2, [pc, #132]	; (8025104 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802507e:	fa1f fa83 	uxth.w	sl, r3
 8025082:	f8be c000 	ldrh.w	ip, [lr]
 8025086:	43db      	mvns	r3, r3
 8025088:	6810      	ldr	r0, [r2, #0]
 802508a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802508e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025092:	b2db      	uxtb	r3, r3
 8025094:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025098:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802509c:	fb12 f20a 	smulbb	r2, r2, sl
 80250a0:	b2c0      	uxtb	r0, r0
 80250a2:	fb1b fb0a 	smulbb	fp, fp, sl
 80250a6:	fb01 2103 	mla	r1, r1, r3, r2
 80250aa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80250ae:	fb10 f00a 	smulbb	r0, r0, sl
 80250b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80250b6:	b289      	uxth	r1, r1
 80250b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80250bc:	fa5f fc8c 	uxtb.w	ip, ip
 80250c0:	fb02 b203 	mla	r2, r2, r3, fp
 80250c4:	fb0c 0003 	mla	r0, ip, r3, r0
 80250c8:	1c4b      	adds	r3, r1, #1
 80250ca:	b292      	uxth	r2, r2
 80250cc:	b280      	uxth	r0, r0
 80250ce:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80250d2:	f100 0b01 	add.w	fp, r0, #1
 80250d6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80250da:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80250de:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80250e2:	ea4b 0101 	orr.w	r1, fp, r1
 80250e6:	f102 0b01 	add.w	fp, r2, #1
 80250ea:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80250ee:	0952      	lsrs	r2, r2, #5
 80250f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80250f4:	4311      	orrs	r1, r2
 80250f6:	f8ae 1000 	strh.w	r1, [lr]
 80250fa:	e79f      	b.n	802503c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80250fc:	b013      	add	sp, #76	; 0x4c
 80250fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025102:	bf00      	nop
 8025104:	20027bb0 	.word	0x20027bb0

08025108 <CRC_Lock>:
 8025108:	4a20      	ldr	r2, [pc, #128]	; (802518c <CRC_Lock+0x84>)
 802510a:	b530      	push	{r4, r5, lr}
 802510c:	6813      	ldr	r3, [r2, #0]
 802510e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025112:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025116:	f023 0301 	bic.w	r3, r3, #1
 802511a:	6013      	str	r3, [r2, #0]
 802511c:	4b1c      	ldr	r3, [pc, #112]	; (8025190 <CRC_Lock+0x88>)
 802511e:	681a      	ldr	r2, [r3, #0]
 8025120:	4022      	ands	r2, r4
 8025122:	42aa      	cmp	r2, r5
 8025124:	d005      	beq.n	8025132 <CRC_Lock+0x2a>
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	f24c 2270 	movw	r2, #49776	; 0xc270
 802512c:	4023      	ands	r3, r4
 802512e:	4293      	cmp	r3, r2
 8025130:	d124      	bne.n	802517c <CRC_Lock+0x74>
 8025132:	4b18      	ldr	r3, [pc, #96]	; (8025194 <CRC_Lock+0x8c>)
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	bb0b      	cbnz	r3, 802517c <CRC_Lock+0x74>
 8025138:	4b17      	ldr	r3, [pc, #92]	; (8025198 <CRC_Lock+0x90>)
 802513a:	681a      	ldr	r2, [r3, #0]
 802513c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025140:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025144:	d00d      	beq.n	8025162 <CRC_Lock+0x5a>
 8025146:	681a      	ldr	r2, [r3, #0]
 8025148:	f240 4483 	movw	r4, #1155	; 0x483
 802514c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025150:	42a2      	cmp	r2, r4
 8025152:	d006      	beq.n	8025162 <CRC_Lock+0x5a>
 8025154:	681b      	ldr	r3, [r3, #0]
 8025156:	f240 4285 	movw	r2, #1157	; 0x485
 802515a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802515e:	4293      	cmp	r3, r2
 8025160:	d10c      	bne.n	802517c <CRC_Lock+0x74>
 8025162:	4b0e      	ldr	r3, [pc, #56]	; (802519c <CRC_Lock+0x94>)
 8025164:	2201      	movs	r2, #1
 8025166:	601a      	str	r2, [r3, #0]
 8025168:	681a      	ldr	r2, [r3, #0]
 802516a:	2a00      	cmp	r2, #0
 802516c:	d1fc      	bne.n	8025168 <CRC_Lock+0x60>
 802516e:	4b0c      	ldr	r3, [pc, #48]	; (80251a0 <CRC_Lock+0x98>)
 8025170:	6018      	str	r0, [r3, #0]
 8025172:	6818      	ldr	r0, [r3, #0]
 8025174:	1a43      	subs	r3, r0, r1
 8025176:	4258      	negs	r0, r3
 8025178:	4158      	adcs	r0, r3
 802517a:	bd30      	pop	{r4, r5, pc}
 802517c:	4b09      	ldr	r3, [pc, #36]	; (80251a4 <CRC_Lock+0x9c>)
 802517e:	2201      	movs	r2, #1
 8025180:	601a      	str	r2, [r3, #0]
 8025182:	681a      	ldr	r2, [r3, #0]
 8025184:	2a00      	cmp	r2, #0
 8025186:	d1fc      	bne.n	8025182 <CRC_Lock+0x7a>
 8025188:	4b07      	ldr	r3, [pc, #28]	; (80251a8 <CRC_Lock+0xa0>)
 802518a:	e7f1      	b.n	8025170 <CRC_Lock+0x68>
 802518c:	e0002000 	.word	0xe0002000
 8025190:	e000ed00 	.word	0xe000ed00
 8025194:	e0042000 	.word	0xe0042000
 8025198:	5c001000 	.word	0x5c001000
 802519c:	58024c08 	.word	0x58024c08
 80251a0:	58024c00 	.word	0x58024c00
 80251a4:	40023008 	.word	0x40023008
 80251a8:	40023000 	.word	0x40023000

080251ac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80251ac:	6101      	str	r1, [r0, #16]
 80251ae:	4770      	bx	lr

080251b0 <_ZN8touchgfx8Gestures4tickEv>:
 80251b0:	7b83      	ldrb	r3, [r0, #14]
 80251b2:	b14b      	cbz	r3, 80251c8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80251b4:	8903      	ldrh	r3, [r0, #8]
 80251b6:	3301      	adds	r3, #1
 80251b8:	b29b      	uxth	r3, r3
 80251ba:	2b07      	cmp	r3, #7
 80251bc:	8103      	strh	r3, [r0, #8]
 80251be:	bf81      	itttt	hi
 80251c0:	2300      	movhi	r3, #0
 80251c2:	8143      	strhhi	r3, [r0, #10]
 80251c4:	8183      	strhhi	r3, [r0, #12]
 80251c6:	7383      	strbhi	r3, [r0, #14]
 80251c8:	4770      	bx	lr
	...

080251cc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80251cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80251d0:	4698      	mov	r8, r3
 80251d2:	8883      	ldrh	r3, [r0, #4]
 80251d4:	4604      	mov	r4, r0
 80251d6:	4617      	mov	r7, r2
 80251d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80251dc:	eba8 0303 	sub.w	r3, r8, r3
 80251e0:	4a19      	ldr	r2, [pc, #100]	; (8025248 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80251e2:	460e      	mov	r6, r1
 80251e4:	b21b      	sxth	r3, r3
 80251e6:	88c1      	ldrh	r1, [r0, #6]
 80251e8:	9200      	str	r2, [sp, #0]
 80251ea:	2000      	movs	r0, #0
 80251ec:	2b00      	cmp	r3, #0
 80251ee:	8aa2      	ldrh	r2, [r4, #20]
 80251f0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80251f4:	bfb8      	it	lt
 80251f6:	425b      	neglt	r3, r3
 80251f8:	f88d 0004 	strb.w	r0, [sp, #4]
 80251fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025200:	b21b      	sxth	r3, r3
 8025202:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025206:	f8ad 500c 	strh.w	r5, [sp, #12]
 802520a:	4293      	cmp	r3, r2
 802520c:	dc07      	bgt.n	802521e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802520e:	1a69      	subs	r1, r5, r1
 8025210:	b209      	sxth	r1, r1
 8025212:	2900      	cmp	r1, #0
 8025214:	bfb8      	it	lt
 8025216:	4249      	neglt	r1, r1
 8025218:	b209      	sxth	r1, r1
 802521a:	428a      	cmp	r2, r1
 802521c:	da10      	bge.n	8025240 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802521e:	6920      	ldr	r0, [r4, #16]
 8025220:	4669      	mov	r1, sp
 8025222:	eba8 0606 	sub.w	r6, r8, r6
 8025226:	1bef      	subs	r7, r5, r7
 8025228:	6803      	ldr	r3, [r0, #0]
 802522a:	685b      	ldr	r3, [r3, #4]
 802522c:	4798      	blx	r3
 802522e:	2300      	movs	r3, #0
 8025230:	2001      	movs	r0, #1
 8025232:	8166      	strh	r6, [r4, #10]
 8025234:	8123      	strh	r3, [r4, #8]
 8025236:	81a7      	strh	r7, [r4, #12]
 8025238:	f8a4 8004 	strh.w	r8, [r4, #4]
 802523c:	80e5      	strh	r5, [r4, #6]
 802523e:	73a0      	strb	r0, [r4, #14]
 8025240:	b004      	add	sp, #16
 8025242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025246:	bf00      	nop
 8025248:	0802b2ac 	.word	0x0802b2ac

0802524c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802524c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802524e:	461e      	mov	r6, r3
 8025250:	1e4b      	subs	r3, r1, #1
 8025252:	b085      	sub	sp, #20
 8025254:	4604      	mov	r4, r0
 8025256:	2b01      	cmp	r3, #1
 8025258:	460d      	mov	r5, r1
 802525a:	4617      	mov	r7, r2
 802525c:	d84b      	bhi.n	80252f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802525e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025262:	1cd3      	adds	r3, r2, #3
 8025264:	b29b      	uxth	r3, r3
 8025266:	2b06      	cmp	r3, #6
 8025268:	d916      	bls.n	8025298 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802526a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802530c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802526e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025272:	f8cd c004 	str.w	ip, [sp, #4]
 8025276:	f04f 0c00 	mov.w	ip, #0
 802527a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802527e:	6900      	ldr	r0, [r0, #16]
 8025280:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025284:	a901      	add	r1, sp, #4
 8025286:	f88d c008 	strb.w	ip, [sp, #8]
 802528a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802528e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025292:	6803      	ldr	r3, [r0, #0]
 8025294:	689b      	ldr	r3, [r3, #8]
 8025296:	4798      	blx	r3
 8025298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802529c:	1cd3      	adds	r3, r2, #3
 802529e:	b29b      	uxth	r3, r3
 80252a0:	2b06      	cmp	r3, #6
 80252a2:	d916      	bls.n	80252d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80252a4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802530c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80252a8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80252ac:	f8cd c004 	str.w	ip, [sp, #4]
 80252b0:	f04f 0c01 	mov.w	ip, #1
 80252b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80252b8:	6920      	ldr	r0, [r4, #16]
 80252ba:	f8ad 100c 	strh.w	r1, [sp, #12]
 80252be:	a901      	add	r1, sp, #4
 80252c0:	f88d c008 	strb.w	ip, [sp, #8]
 80252c4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80252c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80252cc:	6803      	ldr	r3, [r0, #0]
 80252ce:	689b      	ldr	r3, [r3, #8]
 80252d0:	4798      	blx	r3
 80252d2:	4b0d      	ldr	r3, [pc, #52]	; (8025308 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80252d4:	a901      	add	r1, sp, #4
 80252d6:	6920      	ldr	r0, [r4, #16]
 80252d8:	9301      	str	r3, [sp, #4]
 80252da:	2300      	movs	r3, #0
 80252dc:	f88d 5008 	strb.w	r5, [sp, #8]
 80252e0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80252e4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80252e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80252ec:	6803      	ldr	r3, [r0, #0]
 80252ee:	681b      	ldr	r3, [r3, #0]
 80252f0:	4798      	blx	r3
 80252f2:	b005      	add	sp, #20
 80252f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252f6:	2900      	cmp	r1, #0
 80252f8:	d1eb      	bne.n	80252d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80252fa:	80a2      	strh	r2, [r4, #4]
 80252fc:	80c6      	strh	r6, [r0, #6]
 80252fe:	60a1      	str	r1, [r4, #8]
 8025300:	81a1      	strh	r1, [r4, #12]
 8025302:	73a1      	strb	r1, [r4, #14]
 8025304:	e7e5      	b.n	80252d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025306:	bf00      	nop
 8025308:	0802b298 	.word	0x0802b298
 802530c:	0802b2c0 	.word	0x0802b2c0

08025310 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8025310:	10c9      	asrs	r1, r1, #3
 8025312:	2900      	cmp	r1, #0
 8025314:	bfb8      	it	lt
 8025316:	4249      	neglt	r1, r1
 8025318:	2801      	cmp	r0, #1
 802531a:	d108      	bne.n	802532e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802531c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025320:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025324:	4601      	mov	r1, r0
 8025326:	dd02      	ble.n	802532e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025328:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802532c:	4770      	bx	lr
 802532e:	29ff      	cmp	r1, #255	; 0xff
 8025330:	bfa8      	it	ge
 8025332:	21ff      	movge	r1, #255	; 0xff
 8025334:	4608      	mov	r0, r1
 8025336:	4770      	bx	lr

08025338 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025338:	b410      	push	{r4}
 802533a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802533e:	429c      	cmp	r4, r3
 8025340:	d803      	bhi.n	802534a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025346:	f7ef b871 	b.w	801442c <_ZN8touchgfx7Outline6lineToEii>
 802534a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802534e:	4770      	bx	lr

08025350 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025354:	b08b      	sub	sp, #44	; 0x2c
 8025356:	4606      	mov	r6, r0
 8025358:	468a      	mov	sl, r1
 802535a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802535e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025362:	9308      	str	r3, [sp, #32]
 8025364:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8025368:	9309      	str	r3, [sp, #36]	; 0x24
 802536a:	f7ef f9ca 	bl	8014702 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802536e:	68b5      	ldr	r5, [r6, #8]
 8025370:	4604      	mov	r4, r0
 8025372:	2d00      	cmp	r5, #0
 8025374:	d044      	beq.n	8025400 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025376:	6873      	ldr	r3, [r6, #4]
 8025378:	42ab      	cmp	r3, r5
 802537a:	d33d      	bcc.n	80253f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802537c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025380:	f04f 0800 	mov.w	r8, #0
 8025384:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8025388:	eb02 0b03 	add.w	fp, r2, r3
 802538c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025390:	fb02 1203 	mla	r2, r2, r3, r1
 8025394:	9205      	str	r2, [sp, #20]
 8025396:	1e6a      	subs	r2, r5, #1
 8025398:	9204      	str	r2, [sp, #16]
 802539a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802539e:	f9b4 7000 	ldrsh.w	r7, [r4]
 80253a2:	454b      	cmp	r3, r9
 80253a4:	463a      	mov	r2, r7
 80253a6:	d008      	beq.n	80253ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80253a8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 80253ac:	eb03 0b09 	add.w	fp, r3, r9
 80253b0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80253b4:	fb03 1309 	mla	r3, r3, r9, r1
 80253b8:	9305      	str	r3, [sp, #20]
 80253ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80253be:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80253c2:	4498      	add	r8, r3
 80253c4:	9b04      	ldr	r3, [sp, #16]
 80253c6:	3b01      	subs	r3, #1
 80253c8:	9304      	str	r3, [sp, #16]
 80253ca:	9b04      	ldr	r3, [sp, #16]
 80253cc:	3301      	adds	r3, #1
 80253ce:	d015      	beq.n	80253fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80253d0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80253d4:	42bb      	cmp	r3, r7
 80253d6:	d117      	bne.n	8025408 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80253d8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80253dc:	9b04      	ldr	r3, [sp, #16]
 80253de:	4548      	cmp	r0, r9
 80253e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80253e4:	d17d      	bne.n	80254e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80253e6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80253ea:	4401      	add	r1, r0
 80253ec:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80253f0:	4480      	add	r8, r0
 80253f2:	e7e9      	b.n	80253c8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80253f4:	461f      	mov	r7, r3
 80253f6:	e042      	b.n	802547e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80253f8:	2000      	movs	r0, #0
 80253fa:	e002      	b.n	8025402 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80253fc:	2900      	cmp	r1, #0
 80253fe:	d16d      	bne.n	80254dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8025400:	2001      	movs	r0, #1
 8025402:	b00b      	add	sp, #44	; 0x2c
 8025404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025408:	b379      	cbz	r1, 802546a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802540a:	2f00      	cmp	r7, #0
 802540c:	db29      	blt.n	8025462 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802540e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025412:	42bb      	cmp	r3, r7
 8025414:	dd25      	ble.n	8025462 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025416:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802541a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802541e:	f7ff ff77 	bl	8025310 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025424:	fb10 f003 	smulbb	r0, r0, r3
 8025428:	b280      	uxth	r0, r0
 802542a:	1c41      	adds	r1, r0, #1
 802542c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025430:	1209      	asrs	r1, r1, #8
 8025432:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025436:	d014      	beq.n	8025462 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025438:	b2c9      	uxtb	r1, r1
 802543a:	9808      	ldr	r0, [sp, #32]
 802543c:	b2ba      	uxth	r2, r7
 802543e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025440:	9102      	str	r1, [sp, #8]
 8025442:	2101      	movs	r1, #1
 8025444:	4413      	add	r3, r2
 8025446:	4402      	add	r2, r0
 8025448:	9101      	str	r1, [sp, #4]
 802544a:	fa0f f18b 	sxth.w	r1, fp
 802544e:	f8da 0000 	ldr.w	r0, [sl]
 8025452:	b21b      	sxth	r3, r3
 8025454:	9100      	str	r1, [sp, #0]
 8025456:	b212      	sxth	r2, r2
 8025458:	6941      	ldr	r1, [r0, #20]
 802545a:	4650      	mov	r0, sl
 802545c:	460d      	mov	r5, r1
 802545e:	9905      	ldr	r1, [sp, #20]
 8025460:	47a8      	blx	r5
 8025462:	9b04      	ldr	r3, [sp, #16]
 8025464:	1c7a      	adds	r2, r7, #1
 8025466:	3301      	adds	r3, #1
 8025468:	d0ca      	beq.n	8025400 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802546a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802546e:	1abb      	subs	r3, r7, r2
 8025470:	2b00      	cmp	r3, #0
 8025472:	dd31      	ble.n	80254d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025474:	2a00      	cmp	r2, #0
 8025476:	dabd      	bge.n	80253f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8025478:	2f00      	cmp	r7, #0
 802547a:	dd2d      	ble.n	80254d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802547c:	2200      	movs	r2, #0
 802547e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025482:	19d1      	adds	r1, r2, r7
 8025484:	4299      	cmp	r1, r3
 8025486:	db02      	blt.n	802548e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8025488:	1a9f      	subs	r7, r3, r2
 802548a:	2f00      	cmp	r7, #0
 802548c:	dd24      	ble.n	80254d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802548e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8025492:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025496:	f7ff ff3b 	bl	8025310 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802549a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802549c:	fb10 f003 	smulbb	r0, r0, r3
 80254a0:	b280      	uxth	r0, r0
 80254a2:	1c41      	adds	r1, r0, #1
 80254a4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80254a8:	1209      	asrs	r1, r1, #8
 80254aa:	f011 0fff 	tst.w	r1, #255	; 0xff
 80254ae:	d013      	beq.n	80254d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80254b0:	b292      	uxth	r2, r2
 80254b2:	9808      	ldr	r0, [sp, #32]
 80254b4:	b2c9      	uxtb	r1, r1
 80254b6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80254b8:	b23f      	sxth	r7, r7
 80254ba:	4413      	add	r3, r2
 80254bc:	9102      	str	r1, [sp, #8]
 80254be:	4402      	add	r2, r0
 80254c0:	fa0f f18b 	sxth.w	r1, fp
 80254c4:	f8da 0000 	ldr.w	r0, [sl]
 80254c8:	b21b      	sxth	r3, r3
 80254ca:	9100      	str	r1, [sp, #0]
 80254cc:	b212      	sxth	r2, r2
 80254ce:	9701      	str	r7, [sp, #4]
 80254d0:	9905      	ldr	r1, [sp, #20]
 80254d2:	6947      	ldr	r7, [r0, #20]
 80254d4:	4650      	mov	r0, sl
 80254d6:	47b8      	blx	r7
 80254d8:	464b      	mov	r3, r9
 80254da:	e75e      	b.n	802539a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80254dc:	2f00      	cmp	r7, #0
 80254de:	da96      	bge.n	802540e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80254e0:	e78e      	b.n	8025400 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80254e2:	2900      	cmp	r1, #0
 80254e4:	d0f8      	beq.n	80254d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80254e6:	e790      	b.n	802540a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080254e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80254e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80254ec:	4b4a      	ldr	r3, [pc, #296]	; (8025618 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 80254ee:	2500      	movs	r5, #0
 80254f0:	f100 0620 	add.w	r6, r0, #32
 80254f4:	4604      	mov	r4, r0
 80254f6:	4690      	mov	r8, r2
 80254f8:	f100 0718 	add.w	r7, r0, #24
 80254fc:	e9c0 3100 	strd	r3, r1, [r0]
 8025500:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8025504:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8025508:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802550c:	4630      	mov	r0, r6
 802550e:	f7ee fad3 	bl	8013ab8 <_ZN8touchgfx7OutlineC1Ev>
 8025512:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8025516:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802551a:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802551e:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8025522:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8025526:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802552a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802552e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025532:	9500      	str	r5, [sp, #0]
 8025534:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8025538:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802553c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025540:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025544:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025548:	4410      	add	r0, r2
 802554a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802554e:	b280      	uxth	r0, r0
 8025550:	fa0f fa80 	sxth.w	sl, r0
 8025554:	45aa      	cmp	sl, r5
 8025556:	dd5c      	ble.n	8025612 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8025558:	4591      	cmp	r9, r2
 802555a:	dd5a      	ble.n	8025612 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802555c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025560:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025564:	440b      	add	r3, r1
 8025566:	b29b      	uxth	r3, r3
 8025568:	b21d      	sxth	r5, r3
 802556a:	2d00      	cmp	r5, #0
 802556c:	dd51      	ble.n	8025612 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802556e:	458e      	cmp	lr, r1
 8025570:	dd4f      	ble.n	8025612 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8025572:	45d1      	cmp	r9, sl
 8025574:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025578:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802557c:	bfb8      	it	lt
 802557e:	fa1f f089 	uxthlt.w	r0, r9
 8025582:	45ae      	cmp	lr, r5
 8025584:	f8ad 2000 	strh.w	r2, [sp]
 8025588:	bfb8      	it	lt
 802558a:	fa1f f38e 	uxthlt.w	r3, lr
 802558e:	1a80      	subs	r0, r0, r2
 8025590:	f8ad 1002 	strh.w	r1, [sp, #2]
 8025594:	1a5b      	subs	r3, r3, r1
 8025596:	f8ad 0004 	strh.w	r0, [sp, #4]
 802559a:	f8ad 3006 	strh.w	r3, [sp, #6]
 802559e:	466d      	mov	r5, sp
 80255a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80255a4:	e887 0003 	stmia.w	r7, {r0, r1}
 80255a8:	f8dc 3000 	ldr.w	r3, [ip]
 80255ac:	4660      	mov	r0, ip
 80255ae:	4639      	mov	r1, r7
 80255b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80255b2:	4798      	blx	r3
 80255b4:	6861      	ldr	r1, [r4, #4]
 80255b6:	4628      	mov	r0, r5
 80255b8:	3104      	adds	r1, #4
 80255ba:	f7f0 fc4d 	bl	8015e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80255be:	4638      	mov	r0, r7
 80255c0:	f7f0 fc22 	bl	8015e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80255c4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80255c8:	f8bd 2000 	ldrh.w	r2, [sp]
 80255cc:	4630      	mov	r0, r6
 80255ce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80255d2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80255d6:	f7ee fa53 	bl	8013a80 <_ZN8touchgfx7Outline5resetEv>
 80255da:	f9bd 3000 	ldrsh.w	r3, [sp]
 80255de:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80255e2:	4620      	mov	r0, r4
 80255e4:	015b      	lsls	r3, r3, #5
 80255e6:	60a3      	str	r3, [r4, #8]
 80255e8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80255ec:	015b      	lsls	r3, r3, #5
 80255ee:	60e3      	str	r3, [r4, #12]
 80255f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80255f4:	015b      	lsls	r3, r3, #5
 80255f6:	6123      	str	r3, [r4, #16]
 80255f8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80255fc:	015b      	lsls	r3, r3, #5
 80255fe:	6163      	str	r3, [r4, #20]
 8025600:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8025604:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8025608:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802560c:	b002      	add	sp, #8
 802560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025612:	2300      	movs	r3, #0
 8025614:	9301      	str	r3, [sp, #4]
 8025616:	e7c2      	b.n	802559e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8025618:	0802b590 	.word	0x0802b590

0802561c <_ZN8touchgfx6Canvas5closeEv>:
 802561c:	b538      	push	{r3, r4, r5, lr}
 802561e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8025622:	4604      	mov	r4, r0
 8025624:	b193      	cbz	r3, 802564c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025626:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802562a:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802562e:	4213      	tst	r3, r2
 8025630:	d10c      	bne.n	802564c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025632:	f100 0520 	add.w	r5, r0, #32
 8025636:	b123      	cbz	r3, 8025642 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025638:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802563c:	4628      	mov	r0, r5
 802563e:	f7ff fe7b 	bl	8025338 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025642:	4628      	mov	r0, r5
 8025644:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8025648:	f7ff fe76 	bl	8025338 <_ZN8touchgfx10Rasterizer6lineToEii>
 802564c:	2300      	movs	r3, #0
 802564e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025652:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8025656:	4298      	cmp	r0, r3
 8025658:	bf34      	ite	cc
 802565a:	2000      	movcc	r0, #0
 802565c:	2001      	movcs	r0, #1
 802565e:	bd38      	pop	{r3, r4, r5, pc}

08025660 <_ZN8touchgfx6Canvas6renderEh>:
 8025660:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025664:	4604      	mov	r4, r0
 8025666:	6840      	ldr	r0, [r0, #4]
 8025668:	460d      	mov	r5, r1
 802566a:	6803      	ldr	r3, [r0, #0]
 802566c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802566e:	4798      	blx	r3
 8025670:	fb10 f105 	smulbb	r1, r0, r5
 8025674:	b289      	uxth	r1, r1
 8025676:	1c4d      	adds	r5, r1, #1
 8025678:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802567c:	122d      	asrs	r5, r5, #8
 802567e:	f000 8097 	beq.w	80257b0 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025682:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8025686:	2b00      	cmp	r3, #0
 8025688:	f000 8092 	beq.w	80257b0 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802568c:	4620      	mov	r0, r4
 802568e:	f7ff ffc5 	bl	802561c <_ZN8touchgfx6Canvas5closeEv>
 8025692:	4607      	mov	r7, r0
 8025694:	2800      	cmp	r0, #0
 8025696:	d043      	beq.n	8025720 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025698:	6863      	ldr	r3, [r4, #4]
 802569a:	4e46      	ldr	r6, [pc, #280]	; (80257b4 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802569c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802569e:	6837      	ldr	r7, [r6, #0]
 80256a0:	6803      	ldr	r3, [r0, #0]
 80256a2:	689b      	ldr	r3, [r3, #8]
 80256a4:	4798      	blx	r3
 80256a6:	4601      	mov	r1, r0
 80256a8:	4638      	mov	r0, r7
 80256aa:	f7eb fc9f 	bl	8010fec <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80256ae:	4607      	mov	r7, r0
 80256b0:	f7eb f860 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 80256b4:	6803      	ldr	r3, [r0, #0]
 80256b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80256b8:	4798      	blx	r3
 80256ba:	4680      	mov	r8, r0
 80256bc:	f7eb f85a 	bl	8010774 <_ZN8touchgfx3HAL3lcdEv>
 80256c0:	6803      	ldr	r3, [r0, #0]
 80256c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80256c4:	4798      	blx	r3
 80256c6:	280b      	cmp	r0, #11
 80256c8:	d857      	bhi.n	802577a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 80256ca:	e8df f000 	tbb	[pc, r0]
 80256ce:	584d      	.short	0x584d
 80256d0:	2d560668 	.word	0x2d560668
 80256d4:	6161613d 	.word	0x6161613d
 80256d8:	6161      	.short	0x6161
 80256da:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80256de:	2208      	movs	r2, #8
 80256e0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80256e4:	fb91 f2f2 	sdiv	r2, r1, r2
 80256e8:	fb08 2303 	mla	r3, r8, r3, r2
 80256ec:	441f      	add	r7, r3
 80256ee:	424b      	negs	r3, r1
 80256f0:	f001 0107 	and.w	r1, r1, #7
 80256f4:	f003 0307 	and.w	r3, r3, #7
 80256f8:	bf58      	it	pl
 80256fa:	4259      	negpl	r1, r3
 80256fc:	b2c9      	uxtb	r1, r1
 80256fe:	6860      	ldr	r0, [r4, #4]
 8025700:	b2ed      	uxtb	r5, r5
 8025702:	fa0f f388 	sxth.w	r3, r8
 8025706:	463a      	mov	r2, r7
 8025708:	e9cd 1500 	strd	r1, r5, [sp]
 802570c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802570e:	f104 0020 	add.w	r0, r4, #32
 8025712:	f7ff fe1d 	bl	8025350 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8025716:	4607      	mov	r7, r0
 8025718:	6830      	ldr	r0, [r6, #0]
 802571a:	6803      	ldr	r3, [r0, #0]
 802571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802571e:	4798      	blx	r3
 8025720:	4638      	mov	r0, r7
 8025722:	b002      	add	sp, #8
 8025724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025728:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802572c:	2204      	movs	r2, #4
 802572e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025732:	fb91 f2f2 	sdiv	r2, r1, r2
 8025736:	fb08 2303 	mla	r3, r8, r3, r2
 802573a:	441f      	add	r7, r3
 802573c:	424b      	negs	r3, r1
 802573e:	f001 0103 	and.w	r1, r1, #3
 8025742:	f003 0303 	and.w	r3, r3, #3
 8025746:	e7d7      	b.n	80256f8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8025748:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802574c:	2202      	movs	r2, #2
 802574e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025752:	2900      	cmp	r1, #0
 8025754:	fb91 f2f2 	sdiv	r2, r1, r2
 8025758:	f001 0101 	and.w	r1, r1, #1
 802575c:	fb08 2303 	mla	r3, r8, r3, r2
 8025760:	bfb8      	it	lt
 8025762:	4249      	neglt	r1, r1
 8025764:	441f      	add	r7, r3
 8025766:	e7c9      	b.n	80256fc <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8025768:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802576c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025770:	fb08 f303 	mul.w	r3, r8, r3
 8025774:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8025778:	441f      	add	r7, r3
 802577a:	2100      	movs	r1, #0
 802577c:	e7bf      	b.n	80256fe <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802577e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025782:	2103      	movs	r1, #3
 8025784:	fb08 f203 	mul.w	r2, r8, r3
 8025788:	8b23      	ldrh	r3, [r4, #24]
 802578a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802578e:	e7f3      	b.n	8025778 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8025790:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025794:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025798:	fb08 2303 	mla	r3, r8, r3, r2
 802579c:	e7ec      	b.n	8025778 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802579e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80257a2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80257a6:	fb08 f303 	mul.w	r3, r8, r3
 80257aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80257ae:	e7e3      	b.n	8025778 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80257b0:	2701      	movs	r7, #1
 80257b2:	e7b5      	b.n	8025720 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80257b4:	20027ba0 	.word	0x20027ba0

080257b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80257b8:	4b07      	ldr	r3, [pc, #28]	; (80257d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80257ba:	b510      	push	{r4, lr}
 80257bc:	781b      	ldrb	r3, [r3, #0]
 80257be:	2b01      	cmp	r3, #1
 80257c0:	d108      	bne.n	80257d4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80257c2:	6843      	ldr	r3, [r0, #4]
 80257c4:	6814      	ldr	r4, [r2, #0]
 80257c6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80257ca:	680b      	ldr	r3, [r1, #0]
 80257cc:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80257d0:	6013      	str	r3, [r2, #0]
 80257d2:	600c      	str	r4, [r1, #0]
 80257d4:	bd10      	pop	{r4, pc}
 80257d6:	bf00      	nop
 80257d8:	20027b98 	.word	0x20027b98

080257dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80257dc:	b513      	push	{r0, r1, r4, lr}
 80257de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80257e2:	4604      	mov	r4, r0
 80257e4:	e9cd 2100 	strd	r2, r1, [sp]
 80257e8:	b9a3      	cbnz	r3, 8025814 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80257ea:	466a      	mov	r2, sp
 80257ec:	a901      	add	r1, sp, #4
 80257ee:	4620      	mov	r0, r4
 80257f0:	f7ff ffe2 	bl	80257b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80257f4:	68a3      	ldr	r3, [r4, #8]
 80257f6:	9901      	ldr	r1, [sp, #4]
 80257f8:	9a00      	ldr	r2, [sp, #0]
 80257fa:	1ac9      	subs	r1, r1, r3
 80257fc:	68e3      	ldr	r3, [r4, #12]
 80257fe:	1ad2      	subs	r2, r2, r3
 8025800:	9101      	str	r1, [sp, #4]
 8025802:	2a00      	cmp	r2, #0
 8025804:	9200      	str	r2, [sp, #0]
 8025806:	da0b      	bge.n	8025820 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8025808:	2301      	movs	r3, #1
 802580a:	2900      	cmp	r1, #0
 802580c:	da0e      	bge.n	802582c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802580e:	f043 0304 	orr.w	r3, r3, #4
 8025812:	e013      	b.n	802583c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8025814:	f7ff ff02 	bl	802561c <_ZN8touchgfx6Canvas5closeEv>
 8025818:	2800      	cmp	r0, #0
 802581a:	d1e6      	bne.n	80257ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802581c:	b002      	add	sp, #8
 802581e:	bd10      	pop	{r4, pc}
 8025820:	6963      	ldr	r3, [r4, #20]
 8025822:	429a      	cmp	r2, r3
 8025824:	bfac      	ite	ge
 8025826:	2302      	movge	r3, #2
 8025828:	2300      	movlt	r3, #0
 802582a:	e7ee      	b.n	802580a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802582c:	6920      	ldr	r0, [r4, #16]
 802582e:	4281      	cmp	r1, r0
 8025830:	bfac      	ite	ge
 8025832:	2008      	movge	r0, #8
 8025834:	2000      	movlt	r0, #0
 8025836:	4318      	orrs	r0, r3
 8025838:	b2c3      	uxtb	r3, r0
 802583a:	b158      	cbz	r0, 8025854 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802583c:	2200      	movs	r2, #0
 802583e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8025842:	9901      	ldr	r1, [sp, #4]
 8025844:	9a00      	ldr	r2, [sp, #0]
 8025846:	66a1      	str	r1, [r4, #104]	; 0x68
 8025848:	66e2      	str	r2, [r4, #108]	; 0x6c
 802584a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802584e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8025852:	e7e3      	b.n	802581c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8025854:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8025858:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802585c:	4298      	cmp	r0, r3
 802585e:	d803      	bhi.n	8025868 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8025860:	f104 0020 	add.w	r0, r4, #32
 8025864:	f7ee fdfc 	bl	8014460 <_ZN8touchgfx7Outline6moveToEii>
 8025868:	2301      	movs	r3, #1
 802586a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802586e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8025872:	2300      	movs	r3, #0
 8025874:	e7e5      	b.n	8025842 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08025876 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025878:	ab02      	add	r3, sp, #8
 802587a:	4604      	mov	r4, r0
 802587c:	9101      	str	r1, [sp, #4]
 802587e:	a901      	add	r1, sp, #4
 8025880:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025884:	461a      	mov	r2, r3
 8025886:	f7ff ff97 	bl	80257b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802588a:	68a3      	ldr	r3, [r4, #8]
 802588c:	9901      	ldr	r1, [sp, #4]
 802588e:	9a00      	ldr	r2, [sp, #0]
 8025890:	1ac9      	subs	r1, r1, r3
 8025892:	68e3      	ldr	r3, [r4, #12]
 8025894:	1ad2      	subs	r2, r2, r3
 8025896:	9101      	str	r1, [sp, #4]
 8025898:	2a00      	cmp	r2, #0
 802589a:	9200      	str	r2, [sp, #0]
 802589c:	db1c      	blt.n	80258d8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802589e:	6963      	ldr	r3, [r4, #20]
 80258a0:	429a      	cmp	r2, r3
 80258a2:	bfac      	ite	ge
 80258a4:	2002      	movge	r0, #2
 80258a6:	2000      	movlt	r0, #0
 80258a8:	2900      	cmp	r1, #0
 80258aa:	db17      	blt.n	80258dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80258ac:	6923      	ldr	r3, [r4, #16]
 80258ae:	4299      	cmp	r1, r3
 80258b0:	bfac      	ite	ge
 80258b2:	2308      	movge	r3, #8
 80258b4:	2300      	movlt	r3, #0
 80258b6:	4303      	orrs	r3, r0
 80258b8:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80258bc:	b2dd      	uxtb	r5, r3
 80258be:	b978      	cbnz	r0, 80258e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80258c0:	f104 0020 	add.w	r0, r4, #32
 80258c4:	f7ff fd38 	bl	8025338 <_ZN8touchgfx10Rasterizer6lineToEii>
 80258c8:	9b01      	ldr	r3, [sp, #4]
 80258ca:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 80258ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80258d0:	9b00      	ldr	r3, [sp, #0]
 80258d2:	6623      	str	r3, [r4, #96]	; 0x60
 80258d4:	b002      	add	sp, #8
 80258d6:	bd70      	pop	{r4, r5, r6, pc}
 80258d8:	2001      	movs	r0, #1
 80258da:	e7e5      	b.n	80258a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80258dc:	2304      	movs	r3, #4
 80258de:	e7ea      	b.n	80258b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80258e0:	b113      	cbz	r3, 80258e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80258e2:	ea10 0305 	ands.w	r3, r0, r5
 80258e6:	d11c      	bne.n	8025922 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80258e8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80258ec:	f104 0620 	add.w	r6, r4, #32
 80258f0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 80258f4:	b98b      	cbnz	r3, 802591a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80258f6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80258fa:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80258fe:	4298      	cmp	r0, r3
 8025900:	d802      	bhi.n	8025908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8025902:	4630      	mov	r0, r6
 8025904:	f7ee fdac 	bl	8014460 <_ZN8touchgfx7Outline6moveToEii>
 8025908:	2301      	movs	r3, #1
 802590a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802590e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8025912:	4630      	mov	r0, r6
 8025914:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025918:	e7d4      	b.n	80258c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802591a:	4630      	mov	r0, r6
 802591c:	f7ff fd0c 	bl	8025338 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025920:	e7f7      	b.n	8025912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8025922:	461d      	mov	r5, r3
 8025924:	e7d0      	b.n	80258c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08025928 <_ZN8touchgfx6CanvasD1Ev>:
 8025928:	4b04      	ldr	r3, [pc, #16]	; (802593c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802592a:	b510      	push	{r4, lr}
 802592c:	4604      	mov	r4, r0
 802592e:	f840 3b20 	str.w	r3, [r0], #32
 8025932:	f7ee f89d 	bl	8013a70 <_ZN8touchgfx7OutlineD1Ev>
 8025936:	4620      	mov	r0, r4
 8025938:	bd10      	pop	{r4, pc}
 802593a:	bf00      	nop
 802593c:	0802b590 	.word	0x0802b590

08025940 <_ZN8touchgfx6CanvasD0Ev>:
 8025940:	b510      	push	{r4, lr}
 8025942:	4604      	mov	r4, r0
 8025944:	f7ff fff0 	bl	8025928 <_ZN8touchgfx6CanvasD1Ev>
 8025948:	2170      	movs	r1, #112	; 0x70
 802594a:	4620      	mov	r0, r4
 802594c:	f000 f8d1 	bl	8025af2 <_ZdlPvj>
 8025950:	4620      	mov	r0, r4
 8025952:	bd10      	pop	{r4, pc}

08025954 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8025954:	790b      	ldrb	r3, [r1, #4]
 8025956:	2b00      	cmp	r3, #0
 8025958:	bf0c      	ite	eq
 802595a:	2301      	moveq	r3, #1
 802595c:	2300      	movne	r3, #0
 802595e:	b570      	push	{r4, r5, r6, lr}
 8025960:	4604      	mov	r4, r0
 8025962:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8025966:	460e      	mov	r6, r1
 8025968:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 802596c:	d109      	bne.n	8025982 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802596e:	b14d      	cbz	r5, 8025984 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8025970:	7933      	ldrb	r3, [r6, #4]
 8025972:	2b01      	cmp	r3, #1
 8025974:	d10c      	bne.n	8025990 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8025976:	6823      	ldr	r3, [r4, #0]
 8025978:	4620      	mov	r0, r4
 802597a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802597c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025980:	4718      	bx	r3
 8025982:	b12d      	cbz	r5, 8025990 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8025984:	6823      	ldr	r3, [r4, #0]
 8025986:	4620      	mov	r0, r4
 8025988:	695b      	ldr	r3, [r3, #20]
 802598a:	4798      	blx	r3
 802598c:	2d00      	cmp	r5, #0
 802598e:	d1ef      	bne.n	8025970 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8025990:	bd70      	pop	{r4, r5, r6, pc}

08025992 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8025992:	b570      	push	{r4, r5, r6, lr}
 8025994:	880b      	ldrh	r3, [r1, #0]
 8025996:	4605      	mov	r5, r0
 8025998:	4604      	mov	r4, r0
 802599a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 802599c:	8813      	ldrh	r3, [r2, #0]
 802599e:	f825 3f30 	strh.w	r3, [r5, #48]!
 80259a2:	4628      	mov	r0, r5
 80259a4:	f7f3 fed6 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80259a8:	4606      	mov	r6, r0
 80259aa:	4628      	mov	r0, r5
 80259ac:	f7f3 ff06 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80259b0:	6823      	ldr	r3, [r4, #0]
 80259b2:	4605      	mov	r5, r0
 80259b4:	4631      	mov	r1, r6
 80259b6:	4620      	mov	r0, r4
 80259b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80259ba:	4798      	blx	r3
 80259bc:	6823      	ldr	r3, [r4, #0]
 80259be:	4629      	mov	r1, r5
 80259c0:	4620      	mov	r0, r4
 80259c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80259c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80259c8:	4718      	bx	r3

080259ca <_ZNK8touchgfx6Button12getSolidRectEv>:
 80259ca:	b510      	push	{r4, lr}
 80259cc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80259d0:	4604      	mov	r4, r0
 80259d2:	2bff      	cmp	r3, #255	; 0xff
 80259d4:	d006      	beq.n	80259e4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80259d6:	2300      	movs	r3, #0
 80259d8:	8003      	strh	r3, [r0, #0]
 80259da:	8043      	strh	r3, [r0, #2]
 80259dc:	8083      	strh	r3, [r0, #4]
 80259de:	80c3      	strh	r3, [r0, #6]
 80259e0:	4620      	mov	r0, r4
 80259e2:	bd10      	pop	{r4, pc}
 80259e4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80259e8:	b11b      	cbz	r3, 80259f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80259ea:	3130      	adds	r1, #48	; 0x30
 80259ec:	f7f3 ff1a 	bl	8019824 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80259f0:	e7f6      	b.n	80259e0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80259f2:	312e      	adds	r1, #46	; 0x2e
 80259f4:	e7fa      	b.n	80259ec <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

080259f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80259f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8025a00:	b08a      	sub	sp, #40	; 0x28
 8025a02:	4604      	mov	r4, r0
 8025a04:	4688      	mov	r8, r1
 8025a06:	2b00      	cmp	r3, #0
 8025a08:	d066      	beq.n	8025ad8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8025a0a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025a0c:	a805      	add	r0, sp, #20
 8025a0e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025a12:	f7f3 fe9f 	bl	8019754 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025a16:	4607      	mov	r7, r0
 8025a18:	a805      	add	r0, sp, #20
 8025a1a:	f7f3 fecf 	bl	80197bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8025a1e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8025a22:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8025a26:	2300      	movs	r3, #0
 8025a28:	4432      	add	r2, r6
 8025a2a:	9306      	str	r3, [sp, #24]
 8025a2c:	b292      	uxth	r2, r2
 8025a2e:	fa0f fc82 	sxth.w	ip, r2
 8025a32:	459c      	cmp	ip, r3
 8025a34:	dd52      	ble.n	8025adc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025a36:	42b7      	cmp	r7, r6
 8025a38:	dd50      	ble.n	8025adc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025a3a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8025a3e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025a42:	442b      	add	r3, r5
 8025a44:	b29b      	uxth	r3, r3
 8025a46:	b219      	sxth	r1, r3
 8025a48:	2900      	cmp	r1, #0
 8025a4a:	dd47      	ble.n	8025adc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025a4c:	42a8      	cmp	r0, r5
 8025a4e:	dd45      	ble.n	8025adc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8025a50:	4567      	cmp	r7, ip
 8025a52:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8025a56:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025a5a:	bfb8      	it	lt
 8025a5c:	b2ba      	uxthlt	r2, r7
 8025a5e:	4288      	cmp	r0, r1
 8025a60:	f8ad 6018 	strh.w	r6, [sp, #24]
 8025a64:	bfb8      	it	lt
 8025a66:	b283      	uxthlt	r3, r0
 8025a68:	1b92      	subs	r2, r2, r6
 8025a6a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8025a6e:	1b5b      	subs	r3, r3, r5
 8025a70:	f8ad 201c 	strh.w	r2, [sp, #28]
 8025a74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025a78:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8025a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025a80:	429a      	cmp	r2, r3
 8025a82:	d026      	beq.n	8025ad2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8025a84:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8025a88:	2b00      	cmp	r3, #0
 8025a8a:	dd22      	ble.n	8025ad2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8025a8c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	dd1e      	ble.n	8025ad2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8025a94:	2300      	movs	r3, #0
 8025a96:	a908      	add	r1, sp, #32
 8025a98:	4620      	mov	r0, r4
 8025a9a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8025a9e:	6823      	ldr	r3, [r4, #0]
 8025aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025aa2:	4798      	blx	r3
 8025aa4:	4b0f      	ldr	r3, [pc, #60]	; (8025ae4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8025aa6:	681b      	ldr	r3, [r3, #0]
 8025aa8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8025aac:	b10a      	cbz	r2, 8025ab2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8025aae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8025ab0:	b900      	cbnz	r0, 8025ab4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8025ab2:	6898      	ldr	r0, [r3, #8]
 8025ab4:	2501      	movs	r5, #1
 8025ab6:	6801      	ldr	r1, [r0, #0]
 8025ab8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8025abc:	9502      	str	r5, [sp, #8]
 8025abe:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8025ac2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8025ac6:	9401      	str	r4, [sp, #4]
 8025ac8:	ac06      	add	r4, sp, #24
 8025aca:	9400      	str	r4, [sp, #0]
 8025acc:	688c      	ldr	r4, [r1, #8]
 8025ace:	a905      	add	r1, sp, #20
 8025ad0:	47a0      	blx	r4
 8025ad2:	b00a      	add	sp, #40	; 0x28
 8025ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ad8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8025ada:	e797      	b.n	8025a0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8025adc:	2300      	movs	r3, #0
 8025ade:	9307      	str	r3, [sp, #28]
 8025ae0:	e7ca      	b.n	8025a78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8025ae2:	bf00      	nop
 8025ae4:	20027ba0 	.word	0x20027ba0

08025ae8 <__aeabi_atexit>:
 8025ae8:	460b      	mov	r3, r1
 8025aea:	4601      	mov	r1, r0
 8025aec:	4618      	mov	r0, r3
 8025aee:	f000 b853 	b.w	8025b98 <__cxa_atexit>

08025af2 <_ZdlPvj>:
 8025af2:	f000 b812 	b.w	8025b1a <_ZdlPv>

08025af6 <__cxa_guard_acquire>:
 8025af6:	6803      	ldr	r3, [r0, #0]
 8025af8:	07db      	lsls	r3, r3, #31
 8025afa:	d406      	bmi.n	8025b0a <__cxa_guard_acquire+0x14>
 8025afc:	7843      	ldrb	r3, [r0, #1]
 8025afe:	b103      	cbz	r3, 8025b02 <__cxa_guard_acquire+0xc>
 8025b00:	deff      	udf	#255	; 0xff
 8025b02:	2301      	movs	r3, #1
 8025b04:	7043      	strb	r3, [r0, #1]
 8025b06:	4618      	mov	r0, r3
 8025b08:	4770      	bx	lr
 8025b0a:	2000      	movs	r0, #0
 8025b0c:	4770      	bx	lr

08025b0e <__cxa_guard_release>:
 8025b0e:	2301      	movs	r3, #1
 8025b10:	6003      	str	r3, [r0, #0]
 8025b12:	4770      	bx	lr

08025b14 <__cxa_pure_virtual>:
 8025b14:	b508      	push	{r3, lr}
 8025b16:	f000 f80f 	bl	8025b38 <_ZSt9terminatev>

08025b1a <_ZdlPv>:
 8025b1a:	f000 b989 	b.w	8025e30 <free>

08025b1e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025b1e:	b508      	push	{r3, lr}
 8025b20:	4780      	blx	r0
 8025b22:	f000 f80e 	bl	8025b42 <abort>
	...

08025b28 <_ZSt13get_terminatev>:
 8025b28:	4b02      	ldr	r3, [pc, #8]	; (8025b34 <_ZSt13get_terminatev+0xc>)
 8025b2a:	6818      	ldr	r0, [r3, #0]
 8025b2c:	f3bf 8f5b 	dmb	ish
 8025b30:	4770      	bx	lr
 8025b32:	bf00      	nop
 8025b34:	200000e4 	.word	0x200000e4

08025b38 <_ZSt9terminatev>:
 8025b38:	b508      	push	{r3, lr}
 8025b3a:	f7ff fff5 	bl	8025b28 <_ZSt13get_terminatev>
 8025b3e:	f7ff ffee 	bl	8025b1e <_ZN10__cxxabiv111__terminateEPFvvE>

08025b42 <abort>:
 8025b42:	b508      	push	{r3, lr}
 8025b44:	2006      	movs	r0, #6
 8025b46:	f000 fe01 	bl	802674c <raise>
 8025b4a:	2001      	movs	r0, #1
 8025b4c:	f7df fb7e 	bl	800524c <_exit>

08025b50 <__assert_func>:
 8025b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025b52:	4614      	mov	r4, r2
 8025b54:	461a      	mov	r2, r3
 8025b56:	4b09      	ldr	r3, [pc, #36]	; (8025b7c <__assert_func+0x2c>)
 8025b58:	681b      	ldr	r3, [r3, #0]
 8025b5a:	4605      	mov	r5, r0
 8025b5c:	68d8      	ldr	r0, [r3, #12]
 8025b5e:	b14c      	cbz	r4, 8025b74 <__assert_func+0x24>
 8025b60:	4b07      	ldr	r3, [pc, #28]	; (8025b80 <__assert_func+0x30>)
 8025b62:	9100      	str	r1, [sp, #0]
 8025b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025b68:	4906      	ldr	r1, [pc, #24]	; (8025b84 <__assert_func+0x34>)
 8025b6a:	462b      	mov	r3, r5
 8025b6c:	f000 f8fe 	bl	8025d6c <fiprintf>
 8025b70:	f7ff ffe7 	bl	8025b42 <abort>
 8025b74:	4b04      	ldr	r3, [pc, #16]	; (8025b88 <__assert_func+0x38>)
 8025b76:	461c      	mov	r4, r3
 8025b78:	e7f3      	b.n	8025b62 <__assert_func+0x12>
 8025b7a:	bf00      	nop
 8025b7c:	200000e8 	.word	0x200000e8
 8025b80:	0802b59c 	.word	0x0802b59c
 8025b84:	0802b5a9 	.word	0x0802b5a9
 8025b88:	0802b5d7 	.word	0x0802b5d7

08025b8c <atexit>:
 8025b8c:	2300      	movs	r3, #0
 8025b8e:	4601      	mov	r1, r0
 8025b90:	461a      	mov	r2, r3
 8025b92:	4618      	mov	r0, r3
 8025b94:	f000 bf20 	b.w	80269d8 <__register_exitproc>

08025b98 <__cxa_atexit>:
 8025b98:	b510      	push	{r4, lr}
 8025b9a:	4c05      	ldr	r4, [pc, #20]	; (8025bb0 <__cxa_atexit+0x18>)
 8025b9c:	4613      	mov	r3, r2
 8025b9e:	b12c      	cbz	r4, 8025bac <__cxa_atexit+0x14>
 8025ba0:	460a      	mov	r2, r1
 8025ba2:	4601      	mov	r1, r0
 8025ba4:	2002      	movs	r0, #2
 8025ba6:	f000 ff17 	bl	80269d8 <__register_exitproc>
 8025baa:	bd10      	pop	{r4, pc}
 8025bac:	4620      	mov	r0, r4
 8025bae:	e7fc      	b.n	8025baa <__cxa_atexit+0x12>
 8025bb0:	080269d9 	.word	0x080269d9

08025bb4 <__errno>:
 8025bb4:	4b01      	ldr	r3, [pc, #4]	; (8025bbc <__errno+0x8>)
 8025bb6:	6818      	ldr	r0, [r3, #0]
 8025bb8:	4770      	bx	lr
 8025bba:	bf00      	nop
 8025bbc:	200000e8 	.word	0x200000e8

08025bc0 <std>:
 8025bc0:	2300      	movs	r3, #0
 8025bc2:	b510      	push	{r4, lr}
 8025bc4:	4604      	mov	r4, r0
 8025bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8025bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025bce:	6083      	str	r3, [r0, #8]
 8025bd0:	8181      	strh	r1, [r0, #12]
 8025bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8025bd4:	81c2      	strh	r2, [r0, #14]
 8025bd6:	6183      	str	r3, [r0, #24]
 8025bd8:	4619      	mov	r1, r3
 8025bda:	2208      	movs	r2, #8
 8025bdc:	305c      	adds	r0, #92	; 0x5c
 8025bde:	f000 f93d 	bl	8025e5c <memset>
 8025be2:	4b05      	ldr	r3, [pc, #20]	; (8025bf8 <std+0x38>)
 8025be4:	6263      	str	r3, [r4, #36]	; 0x24
 8025be6:	4b05      	ldr	r3, [pc, #20]	; (8025bfc <std+0x3c>)
 8025be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8025bea:	4b05      	ldr	r3, [pc, #20]	; (8025c00 <std+0x40>)
 8025bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025bee:	4b05      	ldr	r3, [pc, #20]	; (8025c04 <std+0x44>)
 8025bf0:	6224      	str	r4, [r4, #32]
 8025bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8025bf4:	bd10      	pop	{r4, pc}
 8025bf6:	bf00      	nop
 8025bf8:	08026785 	.word	0x08026785
 8025bfc:	080267a7 	.word	0x080267a7
 8025c00:	080267df 	.word	0x080267df
 8025c04:	08026803 	.word	0x08026803

08025c08 <_cleanup_r>:
 8025c08:	4901      	ldr	r1, [pc, #4]	; (8025c10 <_cleanup_r+0x8>)
 8025c0a:	f000 b8c1 	b.w	8025d90 <_fwalk_reent>
 8025c0e:	bf00      	nop
 8025c10:	08026bc9 	.word	0x08026bc9

08025c14 <__sfmoreglue>:
 8025c14:	b570      	push	{r4, r5, r6, lr}
 8025c16:	2268      	movs	r2, #104	; 0x68
 8025c18:	1e4d      	subs	r5, r1, #1
 8025c1a:	4355      	muls	r5, r2
 8025c1c:	460e      	mov	r6, r1
 8025c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025c22:	f000 f98f 	bl	8025f44 <_malloc_r>
 8025c26:	4604      	mov	r4, r0
 8025c28:	b140      	cbz	r0, 8025c3c <__sfmoreglue+0x28>
 8025c2a:	2100      	movs	r1, #0
 8025c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8025c30:	300c      	adds	r0, #12
 8025c32:	60a0      	str	r0, [r4, #8]
 8025c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025c38:	f000 f910 	bl	8025e5c <memset>
 8025c3c:	4620      	mov	r0, r4
 8025c3e:	bd70      	pop	{r4, r5, r6, pc}

08025c40 <__sfp_lock_acquire>:
 8025c40:	4801      	ldr	r0, [pc, #4]	; (8025c48 <__sfp_lock_acquire+0x8>)
 8025c42:	f000 b8ea 	b.w	8025e1a <__retarget_lock_acquire_recursive>
 8025c46:	bf00      	nop
 8025c48:	20027ca6 	.word	0x20027ca6

08025c4c <__sfp_lock_release>:
 8025c4c:	4801      	ldr	r0, [pc, #4]	; (8025c54 <__sfp_lock_release+0x8>)
 8025c4e:	f000 b8e6 	b.w	8025e1e <__retarget_lock_release_recursive>
 8025c52:	bf00      	nop
 8025c54:	20027ca6 	.word	0x20027ca6

08025c58 <__sinit_lock_acquire>:
 8025c58:	4801      	ldr	r0, [pc, #4]	; (8025c60 <__sinit_lock_acquire+0x8>)
 8025c5a:	f000 b8de 	b.w	8025e1a <__retarget_lock_acquire_recursive>
 8025c5e:	bf00      	nop
 8025c60:	20027ca7 	.word	0x20027ca7

08025c64 <__sinit_lock_release>:
 8025c64:	4801      	ldr	r0, [pc, #4]	; (8025c6c <__sinit_lock_release+0x8>)
 8025c66:	f000 b8da 	b.w	8025e1e <__retarget_lock_release_recursive>
 8025c6a:	bf00      	nop
 8025c6c:	20027ca7 	.word	0x20027ca7

08025c70 <__sinit>:
 8025c70:	b510      	push	{r4, lr}
 8025c72:	4604      	mov	r4, r0
 8025c74:	f7ff fff0 	bl	8025c58 <__sinit_lock_acquire>
 8025c78:	69a3      	ldr	r3, [r4, #24]
 8025c7a:	b11b      	cbz	r3, 8025c84 <__sinit+0x14>
 8025c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c80:	f7ff bff0 	b.w	8025c64 <__sinit_lock_release>
 8025c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025c88:	6523      	str	r3, [r4, #80]	; 0x50
 8025c8a:	4b13      	ldr	r3, [pc, #76]	; (8025cd8 <__sinit+0x68>)
 8025c8c:	4a13      	ldr	r2, [pc, #76]	; (8025cdc <__sinit+0x6c>)
 8025c8e:	681b      	ldr	r3, [r3, #0]
 8025c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8025c92:	42a3      	cmp	r3, r4
 8025c94:	bf04      	itt	eq
 8025c96:	2301      	moveq	r3, #1
 8025c98:	61a3      	streq	r3, [r4, #24]
 8025c9a:	4620      	mov	r0, r4
 8025c9c:	f000 f820 	bl	8025ce0 <__sfp>
 8025ca0:	6060      	str	r0, [r4, #4]
 8025ca2:	4620      	mov	r0, r4
 8025ca4:	f000 f81c 	bl	8025ce0 <__sfp>
 8025ca8:	60a0      	str	r0, [r4, #8]
 8025caa:	4620      	mov	r0, r4
 8025cac:	f000 f818 	bl	8025ce0 <__sfp>
 8025cb0:	2200      	movs	r2, #0
 8025cb2:	60e0      	str	r0, [r4, #12]
 8025cb4:	2104      	movs	r1, #4
 8025cb6:	6860      	ldr	r0, [r4, #4]
 8025cb8:	f7ff ff82 	bl	8025bc0 <std>
 8025cbc:	68a0      	ldr	r0, [r4, #8]
 8025cbe:	2201      	movs	r2, #1
 8025cc0:	2109      	movs	r1, #9
 8025cc2:	f7ff ff7d 	bl	8025bc0 <std>
 8025cc6:	68e0      	ldr	r0, [r4, #12]
 8025cc8:	2202      	movs	r2, #2
 8025cca:	2112      	movs	r1, #18
 8025ccc:	f7ff ff78 	bl	8025bc0 <std>
 8025cd0:	2301      	movs	r3, #1
 8025cd2:	61a3      	str	r3, [r4, #24]
 8025cd4:	e7d2      	b.n	8025c7c <__sinit+0xc>
 8025cd6:	bf00      	nop
 8025cd8:	0802b638 	.word	0x0802b638
 8025cdc:	08025c09 	.word	0x08025c09

08025ce0 <__sfp>:
 8025ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ce2:	4607      	mov	r7, r0
 8025ce4:	f7ff ffac 	bl	8025c40 <__sfp_lock_acquire>
 8025ce8:	4b1e      	ldr	r3, [pc, #120]	; (8025d64 <__sfp+0x84>)
 8025cea:	681e      	ldr	r6, [r3, #0]
 8025cec:	69b3      	ldr	r3, [r6, #24]
 8025cee:	b913      	cbnz	r3, 8025cf6 <__sfp+0x16>
 8025cf0:	4630      	mov	r0, r6
 8025cf2:	f7ff ffbd 	bl	8025c70 <__sinit>
 8025cf6:	3648      	adds	r6, #72	; 0x48
 8025cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025cfc:	3b01      	subs	r3, #1
 8025cfe:	d503      	bpl.n	8025d08 <__sfp+0x28>
 8025d00:	6833      	ldr	r3, [r6, #0]
 8025d02:	b30b      	cbz	r3, 8025d48 <__sfp+0x68>
 8025d04:	6836      	ldr	r6, [r6, #0]
 8025d06:	e7f7      	b.n	8025cf8 <__sfp+0x18>
 8025d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025d0c:	b9d5      	cbnz	r5, 8025d44 <__sfp+0x64>
 8025d0e:	4b16      	ldr	r3, [pc, #88]	; (8025d68 <__sfp+0x88>)
 8025d10:	60e3      	str	r3, [r4, #12]
 8025d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025d16:	6665      	str	r5, [r4, #100]	; 0x64
 8025d18:	f000 f87e 	bl	8025e18 <__retarget_lock_init_recursive>
 8025d1c:	f7ff ff96 	bl	8025c4c <__sfp_lock_release>
 8025d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025d28:	6025      	str	r5, [r4, #0]
 8025d2a:	61a5      	str	r5, [r4, #24]
 8025d2c:	2208      	movs	r2, #8
 8025d2e:	4629      	mov	r1, r5
 8025d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025d34:	f000 f892 	bl	8025e5c <memset>
 8025d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025d40:	4620      	mov	r0, r4
 8025d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d44:	3468      	adds	r4, #104	; 0x68
 8025d46:	e7d9      	b.n	8025cfc <__sfp+0x1c>
 8025d48:	2104      	movs	r1, #4
 8025d4a:	4638      	mov	r0, r7
 8025d4c:	f7ff ff62 	bl	8025c14 <__sfmoreglue>
 8025d50:	4604      	mov	r4, r0
 8025d52:	6030      	str	r0, [r6, #0]
 8025d54:	2800      	cmp	r0, #0
 8025d56:	d1d5      	bne.n	8025d04 <__sfp+0x24>
 8025d58:	f7ff ff78 	bl	8025c4c <__sfp_lock_release>
 8025d5c:	230c      	movs	r3, #12
 8025d5e:	603b      	str	r3, [r7, #0]
 8025d60:	e7ee      	b.n	8025d40 <__sfp+0x60>
 8025d62:	bf00      	nop
 8025d64:	0802b638 	.word	0x0802b638
 8025d68:	ffff0001 	.word	0xffff0001

08025d6c <fiprintf>:
 8025d6c:	b40e      	push	{r1, r2, r3}
 8025d6e:	b503      	push	{r0, r1, lr}
 8025d70:	4601      	mov	r1, r0
 8025d72:	ab03      	add	r3, sp, #12
 8025d74:	4805      	ldr	r0, [pc, #20]	; (8025d8c <fiprintf+0x20>)
 8025d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8025d7a:	6800      	ldr	r0, [r0, #0]
 8025d7c:	9301      	str	r3, [sp, #4]
 8025d7e:	f000 f97f 	bl	8026080 <_vfiprintf_r>
 8025d82:	b002      	add	sp, #8
 8025d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8025d88:	b003      	add	sp, #12
 8025d8a:	4770      	bx	lr
 8025d8c:	200000e8 	.word	0x200000e8

08025d90 <_fwalk_reent>:
 8025d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d94:	4606      	mov	r6, r0
 8025d96:	4688      	mov	r8, r1
 8025d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025d9c:	2700      	movs	r7, #0
 8025d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025da2:	f1b9 0901 	subs.w	r9, r9, #1
 8025da6:	d505      	bpl.n	8025db4 <_fwalk_reent+0x24>
 8025da8:	6824      	ldr	r4, [r4, #0]
 8025daa:	2c00      	cmp	r4, #0
 8025dac:	d1f7      	bne.n	8025d9e <_fwalk_reent+0xe>
 8025dae:	4638      	mov	r0, r7
 8025db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025db4:	89ab      	ldrh	r3, [r5, #12]
 8025db6:	2b01      	cmp	r3, #1
 8025db8:	d907      	bls.n	8025dca <_fwalk_reent+0x3a>
 8025dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025dbe:	3301      	adds	r3, #1
 8025dc0:	d003      	beq.n	8025dca <_fwalk_reent+0x3a>
 8025dc2:	4629      	mov	r1, r5
 8025dc4:	4630      	mov	r0, r6
 8025dc6:	47c0      	blx	r8
 8025dc8:	4307      	orrs	r7, r0
 8025dca:	3568      	adds	r5, #104	; 0x68
 8025dcc:	e7e9      	b.n	8025da2 <_fwalk_reent+0x12>
	...

08025dd0 <__libc_init_array>:
 8025dd0:	b570      	push	{r4, r5, r6, lr}
 8025dd2:	4d0d      	ldr	r5, [pc, #52]	; (8025e08 <__libc_init_array+0x38>)
 8025dd4:	4c0d      	ldr	r4, [pc, #52]	; (8025e0c <__libc_init_array+0x3c>)
 8025dd6:	1b64      	subs	r4, r4, r5
 8025dd8:	10a4      	asrs	r4, r4, #2
 8025dda:	2600      	movs	r6, #0
 8025ddc:	42a6      	cmp	r6, r4
 8025dde:	d109      	bne.n	8025df4 <__libc_init_array+0x24>
 8025de0:	4d0b      	ldr	r5, [pc, #44]	; (8025e10 <__libc_init_array+0x40>)
 8025de2:	4c0c      	ldr	r4, [pc, #48]	; (8025e14 <__libc_init_array+0x44>)
 8025de4:	f000 ffe4 	bl	8026db0 <_init>
 8025de8:	1b64      	subs	r4, r4, r5
 8025dea:	10a4      	asrs	r4, r4, #2
 8025dec:	2600      	movs	r6, #0
 8025dee:	42a6      	cmp	r6, r4
 8025df0:	d105      	bne.n	8025dfe <__libc_init_array+0x2e>
 8025df2:	bd70      	pop	{r4, r5, r6, pc}
 8025df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8025df8:	4798      	blx	r3
 8025dfa:	3601      	adds	r6, #1
 8025dfc:	e7ee      	b.n	8025ddc <__libc_init_array+0xc>
 8025dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8025e02:	4798      	blx	r3
 8025e04:	3601      	adds	r6, #1
 8025e06:	e7f2      	b.n	8025dee <__libc_init_array+0x1e>
 8025e08:	0802b760 	.word	0x0802b760
 8025e0c:	0802b760 	.word	0x0802b760
 8025e10:	0802b760 	.word	0x0802b760
 8025e14:	0802b77c 	.word	0x0802b77c

08025e18 <__retarget_lock_init_recursive>:
 8025e18:	4770      	bx	lr

08025e1a <__retarget_lock_acquire_recursive>:
 8025e1a:	4770      	bx	lr

08025e1c <__retarget_lock_release>:
 8025e1c:	4770      	bx	lr

08025e1e <__retarget_lock_release_recursive>:
 8025e1e:	4770      	bx	lr

08025e20 <malloc>:
 8025e20:	4b02      	ldr	r3, [pc, #8]	; (8025e2c <malloc+0xc>)
 8025e22:	4601      	mov	r1, r0
 8025e24:	6818      	ldr	r0, [r3, #0]
 8025e26:	f000 b88d 	b.w	8025f44 <_malloc_r>
 8025e2a:	bf00      	nop
 8025e2c:	200000e8 	.word	0x200000e8

08025e30 <free>:
 8025e30:	4b02      	ldr	r3, [pc, #8]	; (8025e3c <free+0xc>)
 8025e32:	4601      	mov	r1, r0
 8025e34:	6818      	ldr	r0, [r3, #0]
 8025e36:	f000 b819 	b.w	8025e6c <_free_r>
 8025e3a:	bf00      	nop
 8025e3c:	200000e8 	.word	0x200000e8

08025e40 <memcpy>:
 8025e40:	440a      	add	r2, r1
 8025e42:	4291      	cmp	r1, r2
 8025e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8025e48:	d100      	bne.n	8025e4c <memcpy+0xc>
 8025e4a:	4770      	bx	lr
 8025e4c:	b510      	push	{r4, lr}
 8025e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025e56:	4291      	cmp	r1, r2
 8025e58:	d1f9      	bne.n	8025e4e <memcpy+0xe>
 8025e5a:	bd10      	pop	{r4, pc}

08025e5c <memset>:
 8025e5c:	4402      	add	r2, r0
 8025e5e:	4603      	mov	r3, r0
 8025e60:	4293      	cmp	r3, r2
 8025e62:	d100      	bne.n	8025e66 <memset+0xa>
 8025e64:	4770      	bx	lr
 8025e66:	f803 1b01 	strb.w	r1, [r3], #1
 8025e6a:	e7f9      	b.n	8025e60 <memset+0x4>

08025e6c <_free_r>:
 8025e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025e6e:	2900      	cmp	r1, #0
 8025e70:	d044      	beq.n	8025efc <_free_r+0x90>
 8025e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025e76:	9001      	str	r0, [sp, #4]
 8025e78:	2b00      	cmp	r3, #0
 8025e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8025e7e:	bfb8      	it	lt
 8025e80:	18e4      	addlt	r4, r4, r3
 8025e82:	f000 ff55 	bl	8026d30 <__malloc_lock>
 8025e86:	4a1e      	ldr	r2, [pc, #120]	; (8025f00 <_free_r+0x94>)
 8025e88:	9801      	ldr	r0, [sp, #4]
 8025e8a:	6813      	ldr	r3, [r2, #0]
 8025e8c:	b933      	cbnz	r3, 8025e9c <_free_r+0x30>
 8025e8e:	6063      	str	r3, [r4, #4]
 8025e90:	6014      	str	r4, [r2, #0]
 8025e92:	b003      	add	sp, #12
 8025e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025e98:	f000 bf50 	b.w	8026d3c <__malloc_unlock>
 8025e9c:	42a3      	cmp	r3, r4
 8025e9e:	d908      	bls.n	8025eb2 <_free_r+0x46>
 8025ea0:	6825      	ldr	r5, [r4, #0]
 8025ea2:	1961      	adds	r1, r4, r5
 8025ea4:	428b      	cmp	r3, r1
 8025ea6:	bf01      	itttt	eq
 8025ea8:	6819      	ldreq	r1, [r3, #0]
 8025eaa:	685b      	ldreq	r3, [r3, #4]
 8025eac:	1949      	addeq	r1, r1, r5
 8025eae:	6021      	streq	r1, [r4, #0]
 8025eb0:	e7ed      	b.n	8025e8e <_free_r+0x22>
 8025eb2:	461a      	mov	r2, r3
 8025eb4:	685b      	ldr	r3, [r3, #4]
 8025eb6:	b10b      	cbz	r3, 8025ebc <_free_r+0x50>
 8025eb8:	42a3      	cmp	r3, r4
 8025eba:	d9fa      	bls.n	8025eb2 <_free_r+0x46>
 8025ebc:	6811      	ldr	r1, [r2, #0]
 8025ebe:	1855      	adds	r5, r2, r1
 8025ec0:	42a5      	cmp	r5, r4
 8025ec2:	d10b      	bne.n	8025edc <_free_r+0x70>
 8025ec4:	6824      	ldr	r4, [r4, #0]
 8025ec6:	4421      	add	r1, r4
 8025ec8:	1854      	adds	r4, r2, r1
 8025eca:	42a3      	cmp	r3, r4
 8025ecc:	6011      	str	r1, [r2, #0]
 8025ece:	d1e0      	bne.n	8025e92 <_free_r+0x26>
 8025ed0:	681c      	ldr	r4, [r3, #0]
 8025ed2:	685b      	ldr	r3, [r3, #4]
 8025ed4:	6053      	str	r3, [r2, #4]
 8025ed6:	4421      	add	r1, r4
 8025ed8:	6011      	str	r1, [r2, #0]
 8025eda:	e7da      	b.n	8025e92 <_free_r+0x26>
 8025edc:	d902      	bls.n	8025ee4 <_free_r+0x78>
 8025ede:	230c      	movs	r3, #12
 8025ee0:	6003      	str	r3, [r0, #0]
 8025ee2:	e7d6      	b.n	8025e92 <_free_r+0x26>
 8025ee4:	6825      	ldr	r5, [r4, #0]
 8025ee6:	1961      	adds	r1, r4, r5
 8025ee8:	428b      	cmp	r3, r1
 8025eea:	bf04      	itt	eq
 8025eec:	6819      	ldreq	r1, [r3, #0]
 8025eee:	685b      	ldreq	r3, [r3, #4]
 8025ef0:	6063      	str	r3, [r4, #4]
 8025ef2:	bf04      	itt	eq
 8025ef4:	1949      	addeq	r1, r1, r5
 8025ef6:	6021      	streq	r1, [r4, #0]
 8025ef8:	6054      	str	r4, [r2, #4]
 8025efa:	e7ca      	b.n	8025e92 <_free_r+0x26>
 8025efc:	b003      	add	sp, #12
 8025efe:	bd30      	pop	{r4, r5, pc}
 8025f00:	20027ca8 	.word	0x20027ca8

08025f04 <sbrk_aligned>:
 8025f04:	b570      	push	{r4, r5, r6, lr}
 8025f06:	4e0e      	ldr	r6, [pc, #56]	; (8025f40 <sbrk_aligned+0x3c>)
 8025f08:	460c      	mov	r4, r1
 8025f0a:	6831      	ldr	r1, [r6, #0]
 8025f0c:	4605      	mov	r5, r0
 8025f0e:	b911      	cbnz	r1, 8025f16 <sbrk_aligned+0x12>
 8025f10:	f000 fbe4 	bl	80266dc <_sbrk_r>
 8025f14:	6030      	str	r0, [r6, #0]
 8025f16:	4621      	mov	r1, r4
 8025f18:	4628      	mov	r0, r5
 8025f1a:	f000 fbdf 	bl	80266dc <_sbrk_r>
 8025f1e:	1c43      	adds	r3, r0, #1
 8025f20:	d00a      	beq.n	8025f38 <sbrk_aligned+0x34>
 8025f22:	1cc4      	adds	r4, r0, #3
 8025f24:	f024 0403 	bic.w	r4, r4, #3
 8025f28:	42a0      	cmp	r0, r4
 8025f2a:	d007      	beq.n	8025f3c <sbrk_aligned+0x38>
 8025f2c:	1a21      	subs	r1, r4, r0
 8025f2e:	4628      	mov	r0, r5
 8025f30:	f000 fbd4 	bl	80266dc <_sbrk_r>
 8025f34:	3001      	adds	r0, #1
 8025f36:	d101      	bne.n	8025f3c <sbrk_aligned+0x38>
 8025f38:	f04f 34ff 	mov.w	r4, #4294967295
 8025f3c:	4620      	mov	r0, r4
 8025f3e:	bd70      	pop	{r4, r5, r6, pc}
 8025f40:	20027cac 	.word	0x20027cac

08025f44 <_malloc_r>:
 8025f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f48:	1ccd      	adds	r5, r1, #3
 8025f4a:	f025 0503 	bic.w	r5, r5, #3
 8025f4e:	3508      	adds	r5, #8
 8025f50:	2d0c      	cmp	r5, #12
 8025f52:	bf38      	it	cc
 8025f54:	250c      	movcc	r5, #12
 8025f56:	2d00      	cmp	r5, #0
 8025f58:	4607      	mov	r7, r0
 8025f5a:	db01      	blt.n	8025f60 <_malloc_r+0x1c>
 8025f5c:	42a9      	cmp	r1, r5
 8025f5e:	d905      	bls.n	8025f6c <_malloc_r+0x28>
 8025f60:	230c      	movs	r3, #12
 8025f62:	603b      	str	r3, [r7, #0]
 8025f64:	2600      	movs	r6, #0
 8025f66:	4630      	mov	r0, r6
 8025f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f6c:	4e2e      	ldr	r6, [pc, #184]	; (8026028 <_malloc_r+0xe4>)
 8025f6e:	f000 fedf 	bl	8026d30 <__malloc_lock>
 8025f72:	6833      	ldr	r3, [r6, #0]
 8025f74:	461c      	mov	r4, r3
 8025f76:	bb34      	cbnz	r4, 8025fc6 <_malloc_r+0x82>
 8025f78:	4629      	mov	r1, r5
 8025f7a:	4638      	mov	r0, r7
 8025f7c:	f7ff ffc2 	bl	8025f04 <sbrk_aligned>
 8025f80:	1c43      	adds	r3, r0, #1
 8025f82:	4604      	mov	r4, r0
 8025f84:	d14d      	bne.n	8026022 <_malloc_r+0xde>
 8025f86:	6834      	ldr	r4, [r6, #0]
 8025f88:	4626      	mov	r6, r4
 8025f8a:	2e00      	cmp	r6, #0
 8025f8c:	d140      	bne.n	8026010 <_malloc_r+0xcc>
 8025f8e:	6823      	ldr	r3, [r4, #0]
 8025f90:	4631      	mov	r1, r6
 8025f92:	4638      	mov	r0, r7
 8025f94:	eb04 0803 	add.w	r8, r4, r3
 8025f98:	f000 fba0 	bl	80266dc <_sbrk_r>
 8025f9c:	4580      	cmp	r8, r0
 8025f9e:	d13a      	bne.n	8026016 <_malloc_r+0xd2>
 8025fa0:	6821      	ldr	r1, [r4, #0]
 8025fa2:	3503      	adds	r5, #3
 8025fa4:	1a6d      	subs	r5, r5, r1
 8025fa6:	f025 0503 	bic.w	r5, r5, #3
 8025faa:	3508      	adds	r5, #8
 8025fac:	2d0c      	cmp	r5, #12
 8025fae:	bf38      	it	cc
 8025fb0:	250c      	movcc	r5, #12
 8025fb2:	4629      	mov	r1, r5
 8025fb4:	4638      	mov	r0, r7
 8025fb6:	f7ff ffa5 	bl	8025f04 <sbrk_aligned>
 8025fba:	3001      	adds	r0, #1
 8025fbc:	d02b      	beq.n	8026016 <_malloc_r+0xd2>
 8025fbe:	6823      	ldr	r3, [r4, #0]
 8025fc0:	442b      	add	r3, r5
 8025fc2:	6023      	str	r3, [r4, #0]
 8025fc4:	e00e      	b.n	8025fe4 <_malloc_r+0xa0>
 8025fc6:	6822      	ldr	r2, [r4, #0]
 8025fc8:	1b52      	subs	r2, r2, r5
 8025fca:	d41e      	bmi.n	802600a <_malloc_r+0xc6>
 8025fcc:	2a0b      	cmp	r2, #11
 8025fce:	d916      	bls.n	8025ffe <_malloc_r+0xba>
 8025fd0:	1961      	adds	r1, r4, r5
 8025fd2:	42a3      	cmp	r3, r4
 8025fd4:	6025      	str	r5, [r4, #0]
 8025fd6:	bf18      	it	ne
 8025fd8:	6059      	strne	r1, [r3, #4]
 8025fda:	6863      	ldr	r3, [r4, #4]
 8025fdc:	bf08      	it	eq
 8025fde:	6031      	streq	r1, [r6, #0]
 8025fe0:	5162      	str	r2, [r4, r5]
 8025fe2:	604b      	str	r3, [r1, #4]
 8025fe4:	4638      	mov	r0, r7
 8025fe6:	f104 060b 	add.w	r6, r4, #11
 8025fea:	f000 fea7 	bl	8026d3c <__malloc_unlock>
 8025fee:	f026 0607 	bic.w	r6, r6, #7
 8025ff2:	1d23      	adds	r3, r4, #4
 8025ff4:	1af2      	subs	r2, r6, r3
 8025ff6:	d0b6      	beq.n	8025f66 <_malloc_r+0x22>
 8025ff8:	1b9b      	subs	r3, r3, r6
 8025ffa:	50a3      	str	r3, [r4, r2]
 8025ffc:	e7b3      	b.n	8025f66 <_malloc_r+0x22>
 8025ffe:	6862      	ldr	r2, [r4, #4]
 8026000:	42a3      	cmp	r3, r4
 8026002:	bf0c      	ite	eq
 8026004:	6032      	streq	r2, [r6, #0]
 8026006:	605a      	strne	r2, [r3, #4]
 8026008:	e7ec      	b.n	8025fe4 <_malloc_r+0xa0>
 802600a:	4623      	mov	r3, r4
 802600c:	6864      	ldr	r4, [r4, #4]
 802600e:	e7b2      	b.n	8025f76 <_malloc_r+0x32>
 8026010:	4634      	mov	r4, r6
 8026012:	6876      	ldr	r6, [r6, #4]
 8026014:	e7b9      	b.n	8025f8a <_malloc_r+0x46>
 8026016:	230c      	movs	r3, #12
 8026018:	603b      	str	r3, [r7, #0]
 802601a:	4638      	mov	r0, r7
 802601c:	f000 fe8e 	bl	8026d3c <__malloc_unlock>
 8026020:	e7a1      	b.n	8025f66 <_malloc_r+0x22>
 8026022:	6025      	str	r5, [r4, #0]
 8026024:	e7de      	b.n	8025fe4 <_malloc_r+0xa0>
 8026026:	bf00      	nop
 8026028:	20027ca8 	.word	0x20027ca8

0802602c <__sfputc_r>:
 802602c:	6893      	ldr	r3, [r2, #8]
 802602e:	3b01      	subs	r3, #1
 8026030:	2b00      	cmp	r3, #0
 8026032:	b410      	push	{r4}
 8026034:	6093      	str	r3, [r2, #8]
 8026036:	da08      	bge.n	802604a <__sfputc_r+0x1e>
 8026038:	6994      	ldr	r4, [r2, #24]
 802603a:	42a3      	cmp	r3, r4
 802603c:	db01      	blt.n	8026042 <__sfputc_r+0x16>
 802603e:	290a      	cmp	r1, #10
 8026040:	d103      	bne.n	802604a <__sfputc_r+0x1e>
 8026042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026046:	f000 bbf5 	b.w	8026834 <__swbuf_r>
 802604a:	6813      	ldr	r3, [r2, #0]
 802604c:	1c58      	adds	r0, r3, #1
 802604e:	6010      	str	r0, [r2, #0]
 8026050:	7019      	strb	r1, [r3, #0]
 8026052:	4608      	mov	r0, r1
 8026054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026058:	4770      	bx	lr

0802605a <__sfputs_r>:
 802605a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802605c:	4606      	mov	r6, r0
 802605e:	460f      	mov	r7, r1
 8026060:	4614      	mov	r4, r2
 8026062:	18d5      	adds	r5, r2, r3
 8026064:	42ac      	cmp	r4, r5
 8026066:	d101      	bne.n	802606c <__sfputs_r+0x12>
 8026068:	2000      	movs	r0, #0
 802606a:	e007      	b.n	802607c <__sfputs_r+0x22>
 802606c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026070:	463a      	mov	r2, r7
 8026072:	4630      	mov	r0, r6
 8026074:	f7ff ffda 	bl	802602c <__sfputc_r>
 8026078:	1c43      	adds	r3, r0, #1
 802607a:	d1f3      	bne.n	8026064 <__sfputs_r+0xa>
 802607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026080 <_vfiprintf_r>:
 8026080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026084:	460d      	mov	r5, r1
 8026086:	b09d      	sub	sp, #116	; 0x74
 8026088:	4614      	mov	r4, r2
 802608a:	4698      	mov	r8, r3
 802608c:	4606      	mov	r6, r0
 802608e:	b118      	cbz	r0, 8026098 <_vfiprintf_r+0x18>
 8026090:	6983      	ldr	r3, [r0, #24]
 8026092:	b90b      	cbnz	r3, 8026098 <_vfiprintf_r+0x18>
 8026094:	f7ff fdec 	bl	8025c70 <__sinit>
 8026098:	4b89      	ldr	r3, [pc, #548]	; (80262c0 <_vfiprintf_r+0x240>)
 802609a:	429d      	cmp	r5, r3
 802609c:	d11b      	bne.n	80260d6 <_vfiprintf_r+0x56>
 802609e:	6875      	ldr	r5, [r6, #4]
 80260a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80260a2:	07d9      	lsls	r1, r3, #31
 80260a4:	d405      	bmi.n	80260b2 <_vfiprintf_r+0x32>
 80260a6:	89ab      	ldrh	r3, [r5, #12]
 80260a8:	059a      	lsls	r2, r3, #22
 80260aa:	d402      	bmi.n	80260b2 <_vfiprintf_r+0x32>
 80260ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80260ae:	f7ff feb4 	bl	8025e1a <__retarget_lock_acquire_recursive>
 80260b2:	89ab      	ldrh	r3, [r5, #12]
 80260b4:	071b      	lsls	r3, r3, #28
 80260b6:	d501      	bpl.n	80260bc <_vfiprintf_r+0x3c>
 80260b8:	692b      	ldr	r3, [r5, #16]
 80260ba:	b9eb      	cbnz	r3, 80260f8 <_vfiprintf_r+0x78>
 80260bc:	4629      	mov	r1, r5
 80260be:	4630      	mov	r0, r6
 80260c0:	f000 fc1c 	bl	80268fc <__swsetup_r>
 80260c4:	b1c0      	cbz	r0, 80260f8 <_vfiprintf_r+0x78>
 80260c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80260c8:	07dc      	lsls	r4, r3, #31
 80260ca:	d50e      	bpl.n	80260ea <_vfiprintf_r+0x6a>
 80260cc:	f04f 30ff 	mov.w	r0, #4294967295
 80260d0:	b01d      	add	sp, #116	; 0x74
 80260d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260d6:	4b7b      	ldr	r3, [pc, #492]	; (80262c4 <_vfiprintf_r+0x244>)
 80260d8:	429d      	cmp	r5, r3
 80260da:	d101      	bne.n	80260e0 <_vfiprintf_r+0x60>
 80260dc:	68b5      	ldr	r5, [r6, #8]
 80260de:	e7df      	b.n	80260a0 <_vfiprintf_r+0x20>
 80260e0:	4b79      	ldr	r3, [pc, #484]	; (80262c8 <_vfiprintf_r+0x248>)
 80260e2:	429d      	cmp	r5, r3
 80260e4:	bf08      	it	eq
 80260e6:	68f5      	ldreq	r5, [r6, #12]
 80260e8:	e7da      	b.n	80260a0 <_vfiprintf_r+0x20>
 80260ea:	89ab      	ldrh	r3, [r5, #12]
 80260ec:	0598      	lsls	r0, r3, #22
 80260ee:	d4ed      	bmi.n	80260cc <_vfiprintf_r+0x4c>
 80260f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80260f2:	f7ff fe94 	bl	8025e1e <__retarget_lock_release_recursive>
 80260f6:	e7e9      	b.n	80260cc <_vfiprintf_r+0x4c>
 80260f8:	2300      	movs	r3, #0
 80260fa:	9309      	str	r3, [sp, #36]	; 0x24
 80260fc:	2320      	movs	r3, #32
 80260fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026102:	f8cd 800c 	str.w	r8, [sp, #12]
 8026106:	2330      	movs	r3, #48	; 0x30
 8026108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80262cc <_vfiprintf_r+0x24c>
 802610c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026110:	f04f 0901 	mov.w	r9, #1
 8026114:	4623      	mov	r3, r4
 8026116:	469a      	mov	sl, r3
 8026118:	f813 2b01 	ldrb.w	r2, [r3], #1
 802611c:	b10a      	cbz	r2, 8026122 <_vfiprintf_r+0xa2>
 802611e:	2a25      	cmp	r2, #37	; 0x25
 8026120:	d1f9      	bne.n	8026116 <_vfiprintf_r+0x96>
 8026122:	ebba 0b04 	subs.w	fp, sl, r4
 8026126:	d00b      	beq.n	8026140 <_vfiprintf_r+0xc0>
 8026128:	465b      	mov	r3, fp
 802612a:	4622      	mov	r2, r4
 802612c:	4629      	mov	r1, r5
 802612e:	4630      	mov	r0, r6
 8026130:	f7ff ff93 	bl	802605a <__sfputs_r>
 8026134:	3001      	adds	r0, #1
 8026136:	f000 80aa 	beq.w	802628e <_vfiprintf_r+0x20e>
 802613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802613c:	445a      	add	r2, fp
 802613e:	9209      	str	r2, [sp, #36]	; 0x24
 8026140:	f89a 3000 	ldrb.w	r3, [sl]
 8026144:	2b00      	cmp	r3, #0
 8026146:	f000 80a2 	beq.w	802628e <_vfiprintf_r+0x20e>
 802614a:	2300      	movs	r3, #0
 802614c:	f04f 32ff 	mov.w	r2, #4294967295
 8026150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026154:	f10a 0a01 	add.w	sl, sl, #1
 8026158:	9304      	str	r3, [sp, #16]
 802615a:	9307      	str	r3, [sp, #28]
 802615c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026160:	931a      	str	r3, [sp, #104]	; 0x68
 8026162:	4654      	mov	r4, sl
 8026164:	2205      	movs	r2, #5
 8026166:	f814 1b01 	ldrb.w	r1, [r4], #1
 802616a:	4858      	ldr	r0, [pc, #352]	; (80262cc <_vfiprintf_r+0x24c>)
 802616c:	f7da f868 	bl	8000240 <memchr>
 8026170:	9a04      	ldr	r2, [sp, #16]
 8026172:	b9d8      	cbnz	r0, 80261ac <_vfiprintf_r+0x12c>
 8026174:	06d1      	lsls	r1, r2, #27
 8026176:	bf44      	itt	mi
 8026178:	2320      	movmi	r3, #32
 802617a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802617e:	0713      	lsls	r3, r2, #28
 8026180:	bf44      	itt	mi
 8026182:	232b      	movmi	r3, #43	; 0x2b
 8026184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026188:	f89a 3000 	ldrb.w	r3, [sl]
 802618c:	2b2a      	cmp	r3, #42	; 0x2a
 802618e:	d015      	beq.n	80261bc <_vfiprintf_r+0x13c>
 8026190:	9a07      	ldr	r2, [sp, #28]
 8026192:	4654      	mov	r4, sl
 8026194:	2000      	movs	r0, #0
 8026196:	f04f 0c0a 	mov.w	ip, #10
 802619a:	4621      	mov	r1, r4
 802619c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80261a0:	3b30      	subs	r3, #48	; 0x30
 80261a2:	2b09      	cmp	r3, #9
 80261a4:	d94e      	bls.n	8026244 <_vfiprintf_r+0x1c4>
 80261a6:	b1b0      	cbz	r0, 80261d6 <_vfiprintf_r+0x156>
 80261a8:	9207      	str	r2, [sp, #28]
 80261aa:	e014      	b.n	80261d6 <_vfiprintf_r+0x156>
 80261ac:	eba0 0308 	sub.w	r3, r0, r8
 80261b0:	fa09 f303 	lsl.w	r3, r9, r3
 80261b4:	4313      	orrs	r3, r2
 80261b6:	9304      	str	r3, [sp, #16]
 80261b8:	46a2      	mov	sl, r4
 80261ba:	e7d2      	b.n	8026162 <_vfiprintf_r+0xe2>
 80261bc:	9b03      	ldr	r3, [sp, #12]
 80261be:	1d19      	adds	r1, r3, #4
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	9103      	str	r1, [sp, #12]
 80261c4:	2b00      	cmp	r3, #0
 80261c6:	bfbb      	ittet	lt
 80261c8:	425b      	neglt	r3, r3
 80261ca:	f042 0202 	orrlt.w	r2, r2, #2
 80261ce:	9307      	strge	r3, [sp, #28]
 80261d0:	9307      	strlt	r3, [sp, #28]
 80261d2:	bfb8      	it	lt
 80261d4:	9204      	strlt	r2, [sp, #16]
 80261d6:	7823      	ldrb	r3, [r4, #0]
 80261d8:	2b2e      	cmp	r3, #46	; 0x2e
 80261da:	d10c      	bne.n	80261f6 <_vfiprintf_r+0x176>
 80261dc:	7863      	ldrb	r3, [r4, #1]
 80261de:	2b2a      	cmp	r3, #42	; 0x2a
 80261e0:	d135      	bne.n	802624e <_vfiprintf_r+0x1ce>
 80261e2:	9b03      	ldr	r3, [sp, #12]
 80261e4:	1d1a      	adds	r2, r3, #4
 80261e6:	681b      	ldr	r3, [r3, #0]
 80261e8:	9203      	str	r2, [sp, #12]
 80261ea:	2b00      	cmp	r3, #0
 80261ec:	bfb8      	it	lt
 80261ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80261f2:	3402      	adds	r4, #2
 80261f4:	9305      	str	r3, [sp, #20]
 80261f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80262dc <_vfiprintf_r+0x25c>
 80261fa:	7821      	ldrb	r1, [r4, #0]
 80261fc:	2203      	movs	r2, #3
 80261fe:	4650      	mov	r0, sl
 8026200:	f7da f81e 	bl	8000240 <memchr>
 8026204:	b140      	cbz	r0, 8026218 <_vfiprintf_r+0x198>
 8026206:	2340      	movs	r3, #64	; 0x40
 8026208:	eba0 000a 	sub.w	r0, r0, sl
 802620c:	fa03 f000 	lsl.w	r0, r3, r0
 8026210:	9b04      	ldr	r3, [sp, #16]
 8026212:	4303      	orrs	r3, r0
 8026214:	3401      	adds	r4, #1
 8026216:	9304      	str	r3, [sp, #16]
 8026218:	f814 1b01 	ldrb.w	r1, [r4], #1
 802621c:	482c      	ldr	r0, [pc, #176]	; (80262d0 <_vfiprintf_r+0x250>)
 802621e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026222:	2206      	movs	r2, #6
 8026224:	f7da f80c 	bl	8000240 <memchr>
 8026228:	2800      	cmp	r0, #0
 802622a:	d03f      	beq.n	80262ac <_vfiprintf_r+0x22c>
 802622c:	4b29      	ldr	r3, [pc, #164]	; (80262d4 <_vfiprintf_r+0x254>)
 802622e:	bb1b      	cbnz	r3, 8026278 <_vfiprintf_r+0x1f8>
 8026230:	9b03      	ldr	r3, [sp, #12]
 8026232:	3307      	adds	r3, #7
 8026234:	f023 0307 	bic.w	r3, r3, #7
 8026238:	3308      	adds	r3, #8
 802623a:	9303      	str	r3, [sp, #12]
 802623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802623e:	443b      	add	r3, r7
 8026240:	9309      	str	r3, [sp, #36]	; 0x24
 8026242:	e767      	b.n	8026114 <_vfiprintf_r+0x94>
 8026244:	fb0c 3202 	mla	r2, ip, r2, r3
 8026248:	460c      	mov	r4, r1
 802624a:	2001      	movs	r0, #1
 802624c:	e7a5      	b.n	802619a <_vfiprintf_r+0x11a>
 802624e:	2300      	movs	r3, #0
 8026250:	3401      	adds	r4, #1
 8026252:	9305      	str	r3, [sp, #20]
 8026254:	4619      	mov	r1, r3
 8026256:	f04f 0c0a 	mov.w	ip, #10
 802625a:	4620      	mov	r0, r4
 802625c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026260:	3a30      	subs	r2, #48	; 0x30
 8026262:	2a09      	cmp	r2, #9
 8026264:	d903      	bls.n	802626e <_vfiprintf_r+0x1ee>
 8026266:	2b00      	cmp	r3, #0
 8026268:	d0c5      	beq.n	80261f6 <_vfiprintf_r+0x176>
 802626a:	9105      	str	r1, [sp, #20]
 802626c:	e7c3      	b.n	80261f6 <_vfiprintf_r+0x176>
 802626e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026272:	4604      	mov	r4, r0
 8026274:	2301      	movs	r3, #1
 8026276:	e7f0      	b.n	802625a <_vfiprintf_r+0x1da>
 8026278:	ab03      	add	r3, sp, #12
 802627a:	9300      	str	r3, [sp, #0]
 802627c:	462a      	mov	r2, r5
 802627e:	4b16      	ldr	r3, [pc, #88]	; (80262d8 <_vfiprintf_r+0x258>)
 8026280:	a904      	add	r1, sp, #16
 8026282:	4630      	mov	r0, r6
 8026284:	f3af 8000 	nop.w
 8026288:	4607      	mov	r7, r0
 802628a:	1c78      	adds	r0, r7, #1
 802628c:	d1d6      	bne.n	802623c <_vfiprintf_r+0x1bc>
 802628e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026290:	07d9      	lsls	r1, r3, #31
 8026292:	d405      	bmi.n	80262a0 <_vfiprintf_r+0x220>
 8026294:	89ab      	ldrh	r3, [r5, #12]
 8026296:	059a      	lsls	r2, r3, #22
 8026298:	d402      	bmi.n	80262a0 <_vfiprintf_r+0x220>
 802629a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802629c:	f7ff fdbf 	bl	8025e1e <__retarget_lock_release_recursive>
 80262a0:	89ab      	ldrh	r3, [r5, #12]
 80262a2:	065b      	lsls	r3, r3, #25
 80262a4:	f53f af12 	bmi.w	80260cc <_vfiprintf_r+0x4c>
 80262a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80262aa:	e711      	b.n	80260d0 <_vfiprintf_r+0x50>
 80262ac:	ab03      	add	r3, sp, #12
 80262ae:	9300      	str	r3, [sp, #0]
 80262b0:	462a      	mov	r2, r5
 80262b2:	4b09      	ldr	r3, [pc, #36]	; (80262d8 <_vfiprintf_r+0x258>)
 80262b4:	a904      	add	r1, sp, #16
 80262b6:	4630      	mov	r0, r6
 80262b8:	f000 f880 	bl	80263bc <_printf_i>
 80262bc:	e7e4      	b.n	8026288 <_vfiprintf_r+0x208>
 80262be:	bf00      	nop
 80262c0:	0802b5f8 	.word	0x0802b5f8
 80262c4:	0802b618 	.word	0x0802b618
 80262c8:	0802b5d8 	.word	0x0802b5d8
 80262cc:	0802b63c 	.word	0x0802b63c
 80262d0:	0802b646 	.word	0x0802b646
 80262d4:	00000000 	.word	0x00000000
 80262d8:	0802605b 	.word	0x0802605b
 80262dc:	0802b642 	.word	0x0802b642

080262e0 <_printf_common>:
 80262e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80262e4:	4616      	mov	r6, r2
 80262e6:	4699      	mov	r9, r3
 80262e8:	688a      	ldr	r2, [r1, #8]
 80262ea:	690b      	ldr	r3, [r1, #16]
 80262ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80262f0:	4293      	cmp	r3, r2
 80262f2:	bfb8      	it	lt
 80262f4:	4613      	movlt	r3, r2
 80262f6:	6033      	str	r3, [r6, #0]
 80262f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80262fc:	4607      	mov	r7, r0
 80262fe:	460c      	mov	r4, r1
 8026300:	b10a      	cbz	r2, 8026306 <_printf_common+0x26>
 8026302:	3301      	adds	r3, #1
 8026304:	6033      	str	r3, [r6, #0]
 8026306:	6823      	ldr	r3, [r4, #0]
 8026308:	0699      	lsls	r1, r3, #26
 802630a:	bf42      	ittt	mi
 802630c:	6833      	ldrmi	r3, [r6, #0]
 802630e:	3302      	addmi	r3, #2
 8026310:	6033      	strmi	r3, [r6, #0]
 8026312:	6825      	ldr	r5, [r4, #0]
 8026314:	f015 0506 	ands.w	r5, r5, #6
 8026318:	d106      	bne.n	8026328 <_printf_common+0x48>
 802631a:	f104 0a19 	add.w	sl, r4, #25
 802631e:	68e3      	ldr	r3, [r4, #12]
 8026320:	6832      	ldr	r2, [r6, #0]
 8026322:	1a9b      	subs	r3, r3, r2
 8026324:	42ab      	cmp	r3, r5
 8026326:	dc26      	bgt.n	8026376 <_printf_common+0x96>
 8026328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802632c:	1e13      	subs	r3, r2, #0
 802632e:	6822      	ldr	r2, [r4, #0]
 8026330:	bf18      	it	ne
 8026332:	2301      	movne	r3, #1
 8026334:	0692      	lsls	r2, r2, #26
 8026336:	d42b      	bmi.n	8026390 <_printf_common+0xb0>
 8026338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802633c:	4649      	mov	r1, r9
 802633e:	4638      	mov	r0, r7
 8026340:	47c0      	blx	r8
 8026342:	3001      	adds	r0, #1
 8026344:	d01e      	beq.n	8026384 <_printf_common+0xa4>
 8026346:	6823      	ldr	r3, [r4, #0]
 8026348:	68e5      	ldr	r5, [r4, #12]
 802634a:	6832      	ldr	r2, [r6, #0]
 802634c:	f003 0306 	and.w	r3, r3, #6
 8026350:	2b04      	cmp	r3, #4
 8026352:	bf08      	it	eq
 8026354:	1aad      	subeq	r5, r5, r2
 8026356:	68a3      	ldr	r3, [r4, #8]
 8026358:	6922      	ldr	r2, [r4, #16]
 802635a:	bf0c      	ite	eq
 802635c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026360:	2500      	movne	r5, #0
 8026362:	4293      	cmp	r3, r2
 8026364:	bfc4      	itt	gt
 8026366:	1a9b      	subgt	r3, r3, r2
 8026368:	18ed      	addgt	r5, r5, r3
 802636a:	2600      	movs	r6, #0
 802636c:	341a      	adds	r4, #26
 802636e:	42b5      	cmp	r5, r6
 8026370:	d11a      	bne.n	80263a8 <_printf_common+0xc8>
 8026372:	2000      	movs	r0, #0
 8026374:	e008      	b.n	8026388 <_printf_common+0xa8>
 8026376:	2301      	movs	r3, #1
 8026378:	4652      	mov	r2, sl
 802637a:	4649      	mov	r1, r9
 802637c:	4638      	mov	r0, r7
 802637e:	47c0      	blx	r8
 8026380:	3001      	adds	r0, #1
 8026382:	d103      	bne.n	802638c <_printf_common+0xac>
 8026384:	f04f 30ff 	mov.w	r0, #4294967295
 8026388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802638c:	3501      	adds	r5, #1
 802638e:	e7c6      	b.n	802631e <_printf_common+0x3e>
 8026390:	18e1      	adds	r1, r4, r3
 8026392:	1c5a      	adds	r2, r3, #1
 8026394:	2030      	movs	r0, #48	; 0x30
 8026396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802639a:	4422      	add	r2, r4
 802639c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80263a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80263a4:	3302      	adds	r3, #2
 80263a6:	e7c7      	b.n	8026338 <_printf_common+0x58>
 80263a8:	2301      	movs	r3, #1
 80263aa:	4622      	mov	r2, r4
 80263ac:	4649      	mov	r1, r9
 80263ae:	4638      	mov	r0, r7
 80263b0:	47c0      	blx	r8
 80263b2:	3001      	adds	r0, #1
 80263b4:	d0e6      	beq.n	8026384 <_printf_common+0xa4>
 80263b6:	3601      	adds	r6, #1
 80263b8:	e7d9      	b.n	802636e <_printf_common+0x8e>
	...

080263bc <_printf_i>:
 80263bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80263c0:	7e0f      	ldrb	r7, [r1, #24]
 80263c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80263c4:	2f78      	cmp	r7, #120	; 0x78
 80263c6:	4691      	mov	r9, r2
 80263c8:	4680      	mov	r8, r0
 80263ca:	460c      	mov	r4, r1
 80263cc:	469a      	mov	sl, r3
 80263ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80263d2:	d807      	bhi.n	80263e4 <_printf_i+0x28>
 80263d4:	2f62      	cmp	r7, #98	; 0x62
 80263d6:	d80a      	bhi.n	80263ee <_printf_i+0x32>
 80263d8:	2f00      	cmp	r7, #0
 80263da:	f000 80d8 	beq.w	802658e <_printf_i+0x1d2>
 80263de:	2f58      	cmp	r7, #88	; 0x58
 80263e0:	f000 80a3 	beq.w	802652a <_printf_i+0x16e>
 80263e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80263e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80263ec:	e03a      	b.n	8026464 <_printf_i+0xa8>
 80263ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80263f2:	2b15      	cmp	r3, #21
 80263f4:	d8f6      	bhi.n	80263e4 <_printf_i+0x28>
 80263f6:	a101      	add	r1, pc, #4	; (adr r1, 80263fc <_printf_i+0x40>)
 80263f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80263fc:	08026455 	.word	0x08026455
 8026400:	08026469 	.word	0x08026469
 8026404:	080263e5 	.word	0x080263e5
 8026408:	080263e5 	.word	0x080263e5
 802640c:	080263e5 	.word	0x080263e5
 8026410:	080263e5 	.word	0x080263e5
 8026414:	08026469 	.word	0x08026469
 8026418:	080263e5 	.word	0x080263e5
 802641c:	080263e5 	.word	0x080263e5
 8026420:	080263e5 	.word	0x080263e5
 8026424:	080263e5 	.word	0x080263e5
 8026428:	08026575 	.word	0x08026575
 802642c:	08026499 	.word	0x08026499
 8026430:	08026557 	.word	0x08026557
 8026434:	080263e5 	.word	0x080263e5
 8026438:	080263e5 	.word	0x080263e5
 802643c:	08026597 	.word	0x08026597
 8026440:	080263e5 	.word	0x080263e5
 8026444:	08026499 	.word	0x08026499
 8026448:	080263e5 	.word	0x080263e5
 802644c:	080263e5 	.word	0x080263e5
 8026450:	0802655f 	.word	0x0802655f
 8026454:	682b      	ldr	r3, [r5, #0]
 8026456:	1d1a      	adds	r2, r3, #4
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	602a      	str	r2, [r5, #0]
 802645c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026464:	2301      	movs	r3, #1
 8026466:	e0a3      	b.n	80265b0 <_printf_i+0x1f4>
 8026468:	6820      	ldr	r0, [r4, #0]
 802646a:	6829      	ldr	r1, [r5, #0]
 802646c:	0606      	lsls	r6, r0, #24
 802646e:	f101 0304 	add.w	r3, r1, #4
 8026472:	d50a      	bpl.n	802648a <_printf_i+0xce>
 8026474:	680e      	ldr	r6, [r1, #0]
 8026476:	602b      	str	r3, [r5, #0]
 8026478:	2e00      	cmp	r6, #0
 802647a:	da03      	bge.n	8026484 <_printf_i+0xc8>
 802647c:	232d      	movs	r3, #45	; 0x2d
 802647e:	4276      	negs	r6, r6
 8026480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026484:	485e      	ldr	r0, [pc, #376]	; (8026600 <_printf_i+0x244>)
 8026486:	230a      	movs	r3, #10
 8026488:	e019      	b.n	80264be <_printf_i+0x102>
 802648a:	680e      	ldr	r6, [r1, #0]
 802648c:	602b      	str	r3, [r5, #0]
 802648e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026492:	bf18      	it	ne
 8026494:	b236      	sxthne	r6, r6
 8026496:	e7ef      	b.n	8026478 <_printf_i+0xbc>
 8026498:	682b      	ldr	r3, [r5, #0]
 802649a:	6820      	ldr	r0, [r4, #0]
 802649c:	1d19      	adds	r1, r3, #4
 802649e:	6029      	str	r1, [r5, #0]
 80264a0:	0601      	lsls	r1, r0, #24
 80264a2:	d501      	bpl.n	80264a8 <_printf_i+0xec>
 80264a4:	681e      	ldr	r6, [r3, #0]
 80264a6:	e002      	b.n	80264ae <_printf_i+0xf2>
 80264a8:	0646      	lsls	r6, r0, #25
 80264aa:	d5fb      	bpl.n	80264a4 <_printf_i+0xe8>
 80264ac:	881e      	ldrh	r6, [r3, #0]
 80264ae:	4854      	ldr	r0, [pc, #336]	; (8026600 <_printf_i+0x244>)
 80264b0:	2f6f      	cmp	r7, #111	; 0x6f
 80264b2:	bf0c      	ite	eq
 80264b4:	2308      	moveq	r3, #8
 80264b6:	230a      	movne	r3, #10
 80264b8:	2100      	movs	r1, #0
 80264ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80264be:	6865      	ldr	r5, [r4, #4]
 80264c0:	60a5      	str	r5, [r4, #8]
 80264c2:	2d00      	cmp	r5, #0
 80264c4:	bfa2      	ittt	ge
 80264c6:	6821      	ldrge	r1, [r4, #0]
 80264c8:	f021 0104 	bicge.w	r1, r1, #4
 80264cc:	6021      	strge	r1, [r4, #0]
 80264ce:	b90e      	cbnz	r6, 80264d4 <_printf_i+0x118>
 80264d0:	2d00      	cmp	r5, #0
 80264d2:	d04d      	beq.n	8026570 <_printf_i+0x1b4>
 80264d4:	4615      	mov	r5, r2
 80264d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80264da:	fb03 6711 	mls	r7, r3, r1, r6
 80264de:	5dc7      	ldrb	r7, [r0, r7]
 80264e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80264e4:	4637      	mov	r7, r6
 80264e6:	42bb      	cmp	r3, r7
 80264e8:	460e      	mov	r6, r1
 80264ea:	d9f4      	bls.n	80264d6 <_printf_i+0x11a>
 80264ec:	2b08      	cmp	r3, #8
 80264ee:	d10b      	bne.n	8026508 <_printf_i+0x14c>
 80264f0:	6823      	ldr	r3, [r4, #0]
 80264f2:	07de      	lsls	r6, r3, #31
 80264f4:	d508      	bpl.n	8026508 <_printf_i+0x14c>
 80264f6:	6923      	ldr	r3, [r4, #16]
 80264f8:	6861      	ldr	r1, [r4, #4]
 80264fa:	4299      	cmp	r1, r3
 80264fc:	bfde      	ittt	le
 80264fe:	2330      	movle	r3, #48	; 0x30
 8026500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026504:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026508:	1b52      	subs	r2, r2, r5
 802650a:	6122      	str	r2, [r4, #16]
 802650c:	f8cd a000 	str.w	sl, [sp]
 8026510:	464b      	mov	r3, r9
 8026512:	aa03      	add	r2, sp, #12
 8026514:	4621      	mov	r1, r4
 8026516:	4640      	mov	r0, r8
 8026518:	f7ff fee2 	bl	80262e0 <_printf_common>
 802651c:	3001      	adds	r0, #1
 802651e:	d14c      	bne.n	80265ba <_printf_i+0x1fe>
 8026520:	f04f 30ff 	mov.w	r0, #4294967295
 8026524:	b004      	add	sp, #16
 8026526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802652a:	4835      	ldr	r0, [pc, #212]	; (8026600 <_printf_i+0x244>)
 802652c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026530:	6829      	ldr	r1, [r5, #0]
 8026532:	6823      	ldr	r3, [r4, #0]
 8026534:	f851 6b04 	ldr.w	r6, [r1], #4
 8026538:	6029      	str	r1, [r5, #0]
 802653a:	061d      	lsls	r5, r3, #24
 802653c:	d514      	bpl.n	8026568 <_printf_i+0x1ac>
 802653e:	07df      	lsls	r7, r3, #31
 8026540:	bf44      	itt	mi
 8026542:	f043 0320 	orrmi.w	r3, r3, #32
 8026546:	6023      	strmi	r3, [r4, #0]
 8026548:	b91e      	cbnz	r6, 8026552 <_printf_i+0x196>
 802654a:	6823      	ldr	r3, [r4, #0]
 802654c:	f023 0320 	bic.w	r3, r3, #32
 8026550:	6023      	str	r3, [r4, #0]
 8026552:	2310      	movs	r3, #16
 8026554:	e7b0      	b.n	80264b8 <_printf_i+0xfc>
 8026556:	6823      	ldr	r3, [r4, #0]
 8026558:	f043 0320 	orr.w	r3, r3, #32
 802655c:	6023      	str	r3, [r4, #0]
 802655e:	2378      	movs	r3, #120	; 0x78
 8026560:	4828      	ldr	r0, [pc, #160]	; (8026604 <_printf_i+0x248>)
 8026562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026566:	e7e3      	b.n	8026530 <_printf_i+0x174>
 8026568:	0659      	lsls	r1, r3, #25
 802656a:	bf48      	it	mi
 802656c:	b2b6      	uxthmi	r6, r6
 802656e:	e7e6      	b.n	802653e <_printf_i+0x182>
 8026570:	4615      	mov	r5, r2
 8026572:	e7bb      	b.n	80264ec <_printf_i+0x130>
 8026574:	682b      	ldr	r3, [r5, #0]
 8026576:	6826      	ldr	r6, [r4, #0]
 8026578:	6961      	ldr	r1, [r4, #20]
 802657a:	1d18      	adds	r0, r3, #4
 802657c:	6028      	str	r0, [r5, #0]
 802657e:	0635      	lsls	r5, r6, #24
 8026580:	681b      	ldr	r3, [r3, #0]
 8026582:	d501      	bpl.n	8026588 <_printf_i+0x1cc>
 8026584:	6019      	str	r1, [r3, #0]
 8026586:	e002      	b.n	802658e <_printf_i+0x1d2>
 8026588:	0670      	lsls	r0, r6, #25
 802658a:	d5fb      	bpl.n	8026584 <_printf_i+0x1c8>
 802658c:	8019      	strh	r1, [r3, #0]
 802658e:	2300      	movs	r3, #0
 8026590:	6123      	str	r3, [r4, #16]
 8026592:	4615      	mov	r5, r2
 8026594:	e7ba      	b.n	802650c <_printf_i+0x150>
 8026596:	682b      	ldr	r3, [r5, #0]
 8026598:	1d1a      	adds	r2, r3, #4
 802659a:	602a      	str	r2, [r5, #0]
 802659c:	681d      	ldr	r5, [r3, #0]
 802659e:	6862      	ldr	r2, [r4, #4]
 80265a0:	2100      	movs	r1, #0
 80265a2:	4628      	mov	r0, r5
 80265a4:	f7d9 fe4c 	bl	8000240 <memchr>
 80265a8:	b108      	cbz	r0, 80265ae <_printf_i+0x1f2>
 80265aa:	1b40      	subs	r0, r0, r5
 80265ac:	6060      	str	r0, [r4, #4]
 80265ae:	6863      	ldr	r3, [r4, #4]
 80265b0:	6123      	str	r3, [r4, #16]
 80265b2:	2300      	movs	r3, #0
 80265b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80265b8:	e7a8      	b.n	802650c <_printf_i+0x150>
 80265ba:	6923      	ldr	r3, [r4, #16]
 80265bc:	462a      	mov	r2, r5
 80265be:	4649      	mov	r1, r9
 80265c0:	4640      	mov	r0, r8
 80265c2:	47d0      	blx	sl
 80265c4:	3001      	adds	r0, #1
 80265c6:	d0ab      	beq.n	8026520 <_printf_i+0x164>
 80265c8:	6823      	ldr	r3, [r4, #0]
 80265ca:	079b      	lsls	r3, r3, #30
 80265cc:	d413      	bmi.n	80265f6 <_printf_i+0x23a>
 80265ce:	68e0      	ldr	r0, [r4, #12]
 80265d0:	9b03      	ldr	r3, [sp, #12]
 80265d2:	4298      	cmp	r0, r3
 80265d4:	bfb8      	it	lt
 80265d6:	4618      	movlt	r0, r3
 80265d8:	e7a4      	b.n	8026524 <_printf_i+0x168>
 80265da:	2301      	movs	r3, #1
 80265dc:	4632      	mov	r2, r6
 80265de:	4649      	mov	r1, r9
 80265e0:	4640      	mov	r0, r8
 80265e2:	47d0      	blx	sl
 80265e4:	3001      	adds	r0, #1
 80265e6:	d09b      	beq.n	8026520 <_printf_i+0x164>
 80265e8:	3501      	adds	r5, #1
 80265ea:	68e3      	ldr	r3, [r4, #12]
 80265ec:	9903      	ldr	r1, [sp, #12]
 80265ee:	1a5b      	subs	r3, r3, r1
 80265f0:	42ab      	cmp	r3, r5
 80265f2:	dcf2      	bgt.n	80265da <_printf_i+0x21e>
 80265f4:	e7eb      	b.n	80265ce <_printf_i+0x212>
 80265f6:	2500      	movs	r5, #0
 80265f8:	f104 0619 	add.w	r6, r4, #25
 80265fc:	e7f5      	b.n	80265ea <_printf_i+0x22e>
 80265fe:	bf00      	nop
 8026600:	0802b64d 	.word	0x0802b64d
 8026604:	0802b65e 	.word	0x0802b65e

08026608 <cleanup_glue>:
 8026608:	b538      	push	{r3, r4, r5, lr}
 802660a:	460c      	mov	r4, r1
 802660c:	6809      	ldr	r1, [r1, #0]
 802660e:	4605      	mov	r5, r0
 8026610:	b109      	cbz	r1, 8026616 <cleanup_glue+0xe>
 8026612:	f7ff fff9 	bl	8026608 <cleanup_glue>
 8026616:	4621      	mov	r1, r4
 8026618:	4628      	mov	r0, r5
 802661a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802661e:	f7ff bc25 	b.w	8025e6c <_free_r>
	...

08026624 <_reclaim_reent>:
 8026624:	4b2c      	ldr	r3, [pc, #176]	; (80266d8 <_reclaim_reent+0xb4>)
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	4283      	cmp	r3, r0
 802662a:	b570      	push	{r4, r5, r6, lr}
 802662c:	4604      	mov	r4, r0
 802662e:	d051      	beq.n	80266d4 <_reclaim_reent+0xb0>
 8026630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026632:	b143      	cbz	r3, 8026646 <_reclaim_reent+0x22>
 8026634:	68db      	ldr	r3, [r3, #12]
 8026636:	2b00      	cmp	r3, #0
 8026638:	d14a      	bne.n	80266d0 <_reclaim_reent+0xac>
 802663a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802663c:	6819      	ldr	r1, [r3, #0]
 802663e:	b111      	cbz	r1, 8026646 <_reclaim_reent+0x22>
 8026640:	4620      	mov	r0, r4
 8026642:	f7ff fc13 	bl	8025e6c <_free_r>
 8026646:	6961      	ldr	r1, [r4, #20]
 8026648:	b111      	cbz	r1, 8026650 <_reclaim_reent+0x2c>
 802664a:	4620      	mov	r0, r4
 802664c:	f7ff fc0e 	bl	8025e6c <_free_r>
 8026650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026652:	b111      	cbz	r1, 802665a <_reclaim_reent+0x36>
 8026654:	4620      	mov	r0, r4
 8026656:	f7ff fc09 	bl	8025e6c <_free_r>
 802665a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802665c:	b111      	cbz	r1, 8026664 <_reclaim_reent+0x40>
 802665e:	4620      	mov	r0, r4
 8026660:	f7ff fc04 	bl	8025e6c <_free_r>
 8026664:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8026666:	b111      	cbz	r1, 802666e <_reclaim_reent+0x4a>
 8026668:	4620      	mov	r0, r4
 802666a:	f7ff fbff 	bl	8025e6c <_free_r>
 802666e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026670:	b111      	cbz	r1, 8026678 <_reclaim_reent+0x54>
 8026672:	4620      	mov	r0, r4
 8026674:	f7ff fbfa 	bl	8025e6c <_free_r>
 8026678:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802667a:	b111      	cbz	r1, 8026682 <_reclaim_reent+0x5e>
 802667c:	4620      	mov	r0, r4
 802667e:	f7ff fbf5 	bl	8025e6c <_free_r>
 8026682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026684:	b111      	cbz	r1, 802668c <_reclaim_reent+0x68>
 8026686:	4620      	mov	r0, r4
 8026688:	f7ff fbf0 	bl	8025e6c <_free_r>
 802668c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802668e:	b111      	cbz	r1, 8026696 <_reclaim_reent+0x72>
 8026690:	4620      	mov	r0, r4
 8026692:	f7ff fbeb 	bl	8025e6c <_free_r>
 8026696:	69a3      	ldr	r3, [r4, #24]
 8026698:	b1e3      	cbz	r3, 80266d4 <_reclaim_reent+0xb0>
 802669a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802669c:	4620      	mov	r0, r4
 802669e:	4798      	blx	r3
 80266a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80266a2:	b1b9      	cbz	r1, 80266d4 <_reclaim_reent+0xb0>
 80266a4:	4620      	mov	r0, r4
 80266a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80266aa:	f7ff bfad 	b.w	8026608 <cleanup_glue>
 80266ae:	5949      	ldr	r1, [r1, r5]
 80266b0:	b941      	cbnz	r1, 80266c4 <_reclaim_reent+0xa0>
 80266b2:	3504      	adds	r5, #4
 80266b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80266b6:	2d80      	cmp	r5, #128	; 0x80
 80266b8:	68d9      	ldr	r1, [r3, #12]
 80266ba:	d1f8      	bne.n	80266ae <_reclaim_reent+0x8a>
 80266bc:	4620      	mov	r0, r4
 80266be:	f7ff fbd5 	bl	8025e6c <_free_r>
 80266c2:	e7ba      	b.n	802663a <_reclaim_reent+0x16>
 80266c4:	680e      	ldr	r6, [r1, #0]
 80266c6:	4620      	mov	r0, r4
 80266c8:	f7ff fbd0 	bl	8025e6c <_free_r>
 80266cc:	4631      	mov	r1, r6
 80266ce:	e7ef      	b.n	80266b0 <_reclaim_reent+0x8c>
 80266d0:	2500      	movs	r5, #0
 80266d2:	e7ef      	b.n	80266b4 <_reclaim_reent+0x90>
 80266d4:	bd70      	pop	{r4, r5, r6, pc}
 80266d6:	bf00      	nop
 80266d8:	200000e8 	.word	0x200000e8

080266dc <_sbrk_r>:
 80266dc:	b538      	push	{r3, r4, r5, lr}
 80266de:	4d06      	ldr	r5, [pc, #24]	; (80266f8 <_sbrk_r+0x1c>)
 80266e0:	2300      	movs	r3, #0
 80266e2:	4604      	mov	r4, r0
 80266e4:	4608      	mov	r0, r1
 80266e6:	602b      	str	r3, [r5, #0]
 80266e8:	f7de fdde 	bl	80052a8 <_sbrk>
 80266ec:	1c43      	adds	r3, r0, #1
 80266ee:	d102      	bne.n	80266f6 <_sbrk_r+0x1a>
 80266f0:	682b      	ldr	r3, [r5, #0]
 80266f2:	b103      	cbz	r3, 80266f6 <_sbrk_r+0x1a>
 80266f4:	6023      	str	r3, [r4, #0]
 80266f6:	bd38      	pop	{r3, r4, r5, pc}
 80266f8:	20027db8 	.word	0x20027db8

080266fc <_raise_r>:
 80266fc:	291f      	cmp	r1, #31
 80266fe:	b538      	push	{r3, r4, r5, lr}
 8026700:	4604      	mov	r4, r0
 8026702:	460d      	mov	r5, r1
 8026704:	d904      	bls.n	8026710 <_raise_r+0x14>
 8026706:	2316      	movs	r3, #22
 8026708:	6003      	str	r3, [r0, #0]
 802670a:	f04f 30ff 	mov.w	r0, #4294967295
 802670e:	bd38      	pop	{r3, r4, r5, pc}
 8026710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026712:	b112      	cbz	r2, 802671a <_raise_r+0x1e>
 8026714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026718:	b94b      	cbnz	r3, 802672e <_raise_r+0x32>
 802671a:	4620      	mov	r0, r4
 802671c:	f000 f830 	bl	8026780 <_getpid_r>
 8026720:	462a      	mov	r2, r5
 8026722:	4601      	mov	r1, r0
 8026724:	4620      	mov	r0, r4
 8026726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802672a:	f000 b817 	b.w	802675c <_kill_r>
 802672e:	2b01      	cmp	r3, #1
 8026730:	d00a      	beq.n	8026748 <_raise_r+0x4c>
 8026732:	1c59      	adds	r1, r3, #1
 8026734:	d103      	bne.n	802673e <_raise_r+0x42>
 8026736:	2316      	movs	r3, #22
 8026738:	6003      	str	r3, [r0, #0]
 802673a:	2001      	movs	r0, #1
 802673c:	e7e7      	b.n	802670e <_raise_r+0x12>
 802673e:	2400      	movs	r4, #0
 8026740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026744:	4628      	mov	r0, r5
 8026746:	4798      	blx	r3
 8026748:	2000      	movs	r0, #0
 802674a:	e7e0      	b.n	802670e <_raise_r+0x12>

0802674c <raise>:
 802674c:	4b02      	ldr	r3, [pc, #8]	; (8026758 <raise+0xc>)
 802674e:	4601      	mov	r1, r0
 8026750:	6818      	ldr	r0, [r3, #0]
 8026752:	f7ff bfd3 	b.w	80266fc <_raise_r>
 8026756:	bf00      	nop
 8026758:	200000e8 	.word	0x200000e8

0802675c <_kill_r>:
 802675c:	b538      	push	{r3, r4, r5, lr}
 802675e:	4d07      	ldr	r5, [pc, #28]	; (802677c <_kill_r+0x20>)
 8026760:	2300      	movs	r3, #0
 8026762:	4604      	mov	r4, r0
 8026764:	4608      	mov	r0, r1
 8026766:	4611      	mov	r1, r2
 8026768:	602b      	str	r3, [r5, #0]
 802676a:	f7de fd67 	bl	800523c <_kill>
 802676e:	1c43      	adds	r3, r0, #1
 8026770:	d102      	bne.n	8026778 <_kill_r+0x1c>
 8026772:	682b      	ldr	r3, [r5, #0]
 8026774:	b103      	cbz	r3, 8026778 <_kill_r+0x1c>
 8026776:	6023      	str	r3, [r4, #0]
 8026778:	bd38      	pop	{r3, r4, r5, pc}
 802677a:	bf00      	nop
 802677c:	20027db8 	.word	0x20027db8

08026780 <_getpid_r>:
 8026780:	f7de bd5a 	b.w	8005238 <_getpid>

08026784 <__sread>:
 8026784:	b510      	push	{r4, lr}
 8026786:	460c      	mov	r4, r1
 8026788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802678c:	f000 fadc 	bl	8026d48 <_read_r>
 8026790:	2800      	cmp	r0, #0
 8026792:	bfab      	itete	ge
 8026794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026796:	89a3      	ldrhlt	r3, [r4, #12]
 8026798:	181b      	addge	r3, r3, r0
 802679a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802679e:	bfac      	ite	ge
 80267a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80267a2:	81a3      	strhlt	r3, [r4, #12]
 80267a4:	bd10      	pop	{r4, pc}

080267a6 <__swrite>:
 80267a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267aa:	461f      	mov	r7, r3
 80267ac:	898b      	ldrh	r3, [r1, #12]
 80267ae:	05db      	lsls	r3, r3, #23
 80267b0:	4605      	mov	r5, r0
 80267b2:	460c      	mov	r4, r1
 80267b4:	4616      	mov	r6, r2
 80267b6:	d505      	bpl.n	80267c4 <__swrite+0x1e>
 80267b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267bc:	2302      	movs	r3, #2
 80267be:	2200      	movs	r2, #0
 80267c0:	f000 fa3e 	bl	8026c40 <_lseek_r>
 80267c4:	89a3      	ldrh	r3, [r4, #12]
 80267c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80267ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80267ce:	81a3      	strh	r3, [r4, #12]
 80267d0:	4632      	mov	r2, r6
 80267d2:	463b      	mov	r3, r7
 80267d4:	4628      	mov	r0, r5
 80267d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80267da:	f000 b87d 	b.w	80268d8 <_write_r>

080267de <__sseek>:
 80267de:	b510      	push	{r4, lr}
 80267e0:	460c      	mov	r4, r1
 80267e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267e6:	f000 fa2b 	bl	8026c40 <_lseek_r>
 80267ea:	1c43      	adds	r3, r0, #1
 80267ec:	89a3      	ldrh	r3, [r4, #12]
 80267ee:	bf15      	itete	ne
 80267f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80267f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80267f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80267fa:	81a3      	strheq	r3, [r4, #12]
 80267fc:	bf18      	it	ne
 80267fe:	81a3      	strhne	r3, [r4, #12]
 8026800:	bd10      	pop	{r4, pc}

08026802 <__sclose>:
 8026802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026806:	f000 b949 	b.w	8026a9c <_close_r>

0802680a <strncmp>:
 802680a:	b510      	push	{r4, lr}
 802680c:	b17a      	cbz	r2, 802682e <strncmp+0x24>
 802680e:	4603      	mov	r3, r0
 8026810:	3901      	subs	r1, #1
 8026812:	1884      	adds	r4, r0, r2
 8026814:	f813 0b01 	ldrb.w	r0, [r3], #1
 8026818:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802681c:	4290      	cmp	r0, r2
 802681e:	d101      	bne.n	8026824 <strncmp+0x1a>
 8026820:	42a3      	cmp	r3, r4
 8026822:	d101      	bne.n	8026828 <strncmp+0x1e>
 8026824:	1a80      	subs	r0, r0, r2
 8026826:	bd10      	pop	{r4, pc}
 8026828:	2800      	cmp	r0, #0
 802682a:	d1f3      	bne.n	8026814 <strncmp+0xa>
 802682c:	e7fa      	b.n	8026824 <strncmp+0x1a>
 802682e:	4610      	mov	r0, r2
 8026830:	e7f9      	b.n	8026826 <strncmp+0x1c>
	...

08026834 <__swbuf_r>:
 8026834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026836:	460e      	mov	r6, r1
 8026838:	4614      	mov	r4, r2
 802683a:	4605      	mov	r5, r0
 802683c:	b118      	cbz	r0, 8026846 <__swbuf_r+0x12>
 802683e:	6983      	ldr	r3, [r0, #24]
 8026840:	b90b      	cbnz	r3, 8026846 <__swbuf_r+0x12>
 8026842:	f7ff fa15 	bl	8025c70 <__sinit>
 8026846:	4b21      	ldr	r3, [pc, #132]	; (80268cc <__swbuf_r+0x98>)
 8026848:	429c      	cmp	r4, r3
 802684a:	d12b      	bne.n	80268a4 <__swbuf_r+0x70>
 802684c:	686c      	ldr	r4, [r5, #4]
 802684e:	69a3      	ldr	r3, [r4, #24]
 8026850:	60a3      	str	r3, [r4, #8]
 8026852:	89a3      	ldrh	r3, [r4, #12]
 8026854:	071a      	lsls	r2, r3, #28
 8026856:	d52f      	bpl.n	80268b8 <__swbuf_r+0x84>
 8026858:	6923      	ldr	r3, [r4, #16]
 802685a:	b36b      	cbz	r3, 80268b8 <__swbuf_r+0x84>
 802685c:	6923      	ldr	r3, [r4, #16]
 802685e:	6820      	ldr	r0, [r4, #0]
 8026860:	1ac0      	subs	r0, r0, r3
 8026862:	6963      	ldr	r3, [r4, #20]
 8026864:	b2f6      	uxtb	r6, r6
 8026866:	4283      	cmp	r3, r0
 8026868:	4637      	mov	r7, r6
 802686a:	dc04      	bgt.n	8026876 <__swbuf_r+0x42>
 802686c:	4621      	mov	r1, r4
 802686e:	4628      	mov	r0, r5
 8026870:	f000 f9aa 	bl	8026bc8 <_fflush_r>
 8026874:	bb30      	cbnz	r0, 80268c4 <__swbuf_r+0x90>
 8026876:	68a3      	ldr	r3, [r4, #8]
 8026878:	3b01      	subs	r3, #1
 802687a:	60a3      	str	r3, [r4, #8]
 802687c:	6823      	ldr	r3, [r4, #0]
 802687e:	1c5a      	adds	r2, r3, #1
 8026880:	6022      	str	r2, [r4, #0]
 8026882:	701e      	strb	r6, [r3, #0]
 8026884:	6963      	ldr	r3, [r4, #20]
 8026886:	3001      	adds	r0, #1
 8026888:	4283      	cmp	r3, r0
 802688a:	d004      	beq.n	8026896 <__swbuf_r+0x62>
 802688c:	89a3      	ldrh	r3, [r4, #12]
 802688e:	07db      	lsls	r3, r3, #31
 8026890:	d506      	bpl.n	80268a0 <__swbuf_r+0x6c>
 8026892:	2e0a      	cmp	r6, #10
 8026894:	d104      	bne.n	80268a0 <__swbuf_r+0x6c>
 8026896:	4621      	mov	r1, r4
 8026898:	4628      	mov	r0, r5
 802689a:	f000 f995 	bl	8026bc8 <_fflush_r>
 802689e:	b988      	cbnz	r0, 80268c4 <__swbuf_r+0x90>
 80268a0:	4638      	mov	r0, r7
 80268a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80268a4:	4b0a      	ldr	r3, [pc, #40]	; (80268d0 <__swbuf_r+0x9c>)
 80268a6:	429c      	cmp	r4, r3
 80268a8:	d101      	bne.n	80268ae <__swbuf_r+0x7a>
 80268aa:	68ac      	ldr	r4, [r5, #8]
 80268ac:	e7cf      	b.n	802684e <__swbuf_r+0x1a>
 80268ae:	4b09      	ldr	r3, [pc, #36]	; (80268d4 <__swbuf_r+0xa0>)
 80268b0:	429c      	cmp	r4, r3
 80268b2:	bf08      	it	eq
 80268b4:	68ec      	ldreq	r4, [r5, #12]
 80268b6:	e7ca      	b.n	802684e <__swbuf_r+0x1a>
 80268b8:	4621      	mov	r1, r4
 80268ba:	4628      	mov	r0, r5
 80268bc:	f000 f81e 	bl	80268fc <__swsetup_r>
 80268c0:	2800      	cmp	r0, #0
 80268c2:	d0cb      	beq.n	802685c <__swbuf_r+0x28>
 80268c4:	f04f 37ff 	mov.w	r7, #4294967295
 80268c8:	e7ea      	b.n	80268a0 <__swbuf_r+0x6c>
 80268ca:	bf00      	nop
 80268cc:	0802b5f8 	.word	0x0802b5f8
 80268d0:	0802b618 	.word	0x0802b618
 80268d4:	0802b5d8 	.word	0x0802b5d8

080268d8 <_write_r>:
 80268d8:	b538      	push	{r3, r4, r5, lr}
 80268da:	4d07      	ldr	r5, [pc, #28]	; (80268f8 <_write_r+0x20>)
 80268dc:	4604      	mov	r4, r0
 80268de:	4608      	mov	r0, r1
 80268e0:	4611      	mov	r1, r2
 80268e2:	2200      	movs	r2, #0
 80268e4:	602a      	str	r2, [r5, #0]
 80268e6:	461a      	mov	r2, r3
 80268e8:	f7de fcc4 	bl	8005274 <_write>
 80268ec:	1c43      	adds	r3, r0, #1
 80268ee:	d102      	bne.n	80268f6 <_write_r+0x1e>
 80268f0:	682b      	ldr	r3, [r5, #0]
 80268f2:	b103      	cbz	r3, 80268f6 <_write_r+0x1e>
 80268f4:	6023      	str	r3, [r4, #0]
 80268f6:	bd38      	pop	{r3, r4, r5, pc}
 80268f8:	20027db8 	.word	0x20027db8

080268fc <__swsetup_r>:
 80268fc:	4b32      	ldr	r3, [pc, #200]	; (80269c8 <__swsetup_r+0xcc>)
 80268fe:	b570      	push	{r4, r5, r6, lr}
 8026900:	681d      	ldr	r5, [r3, #0]
 8026902:	4606      	mov	r6, r0
 8026904:	460c      	mov	r4, r1
 8026906:	b125      	cbz	r5, 8026912 <__swsetup_r+0x16>
 8026908:	69ab      	ldr	r3, [r5, #24]
 802690a:	b913      	cbnz	r3, 8026912 <__swsetup_r+0x16>
 802690c:	4628      	mov	r0, r5
 802690e:	f7ff f9af 	bl	8025c70 <__sinit>
 8026912:	4b2e      	ldr	r3, [pc, #184]	; (80269cc <__swsetup_r+0xd0>)
 8026914:	429c      	cmp	r4, r3
 8026916:	d10f      	bne.n	8026938 <__swsetup_r+0x3c>
 8026918:	686c      	ldr	r4, [r5, #4]
 802691a:	89a3      	ldrh	r3, [r4, #12]
 802691c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026920:	0719      	lsls	r1, r3, #28
 8026922:	d42c      	bmi.n	802697e <__swsetup_r+0x82>
 8026924:	06dd      	lsls	r5, r3, #27
 8026926:	d411      	bmi.n	802694c <__swsetup_r+0x50>
 8026928:	2309      	movs	r3, #9
 802692a:	6033      	str	r3, [r6, #0]
 802692c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026930:	81a3      	strh	r3, [r4, #12]
 8026932:	f04f 30ff 	mov.w	r0, #4294967295
 8026936:	e03e      	b.n	80269b6 <__swsetup_r+0xba>
 8026938:	4b25      	ldr	r3, [pc, #148]	; (80269d0 <__swsetup_r+0xd4>)
 802693a:	429c      	cmp	r4, r3
 802693c:	d101      	bne.n	8026942 <__swsetup_r+0x46>
 802693e:	68ac      	ldr	r4, [r5, #8]
 8026940:	e7eb      	b.n	802691a <__swsetup_r+0x1e>
 8026942:	4b24      	ldr	r3, [pc, #144]	; (80269d4 <__swsetup_r+0xd8>)
 8026944:	429c      	cmp	r4, r3
 8026946:	bf08      	it	eq
 8026948:	68ec      	ldreq	r4, [r5, #12]
 802694a:	e7e6      	b.n	802691a <__swsetup_r+0x1e>
 802694c:	0758      	lsls	r0, r3, #29
 802694e:	d512      	bpl.n	8026976 <__swsetup_r+0x7a>
 8026950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026952:	b141      	cbz	r1, 8026966 <__swsetup_r+0x6a>
 8026954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026958:	4299      	cmp	r1, r3
 802695a:	d002      	beq.n	8026962 <__swsetup_r+0x66>
 802695c:	4630      	mov	r0, r6
 802695e:	f7ff fa85 	bl	8025e6c <_free_r>
 8026962:	2300      	movs	r3, #0
 8026964:	6363      	str	r3, [r4, #52]	; 0x34
 8026966:	89a3      	ldrh	r3, [r4, #12]
 8026968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802696c:	81a3      	strh	r3, [r4, #12]
 802696e:	2300      	movs	r3, #0
 8026970:	6063      	str	r3, [r4, #4]
 8026972:	6923      	ldr	r3, [r4, #16]
 8026974:	6023      	str	r3, [r4, #0]
 8026976:	89a3      	ldrh	r3, [r4, #12]
 8026978:	f043 0308 	orr.w	r3, r3, #8
 802697c:	81a3      	strh	r3, [r4, #12]
 802697e:	6923      	ldr	r3, [r4, #16]
 8026980:	b94b      	cbnz	r3, 8026996 <__swsetup_r+0x9a>
 8026982:	89a3      	ldrh	r3, [r4, #12]
 8026984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802698c:	d003      	beq.n	8026996 <__swsetup_r+0x9a>
 802698e:	4621      	mov	r1, r4
 8026990:	4630      	mov	r0, r6
 8026992:	f000 f98d 	bl	8026cb0 <__smakebuf_r>
 8026996:	89a0      	ldrh	r0, [r4, #12]
 8026998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802699c:	f010 0301 	ands.w	r3, r0, #1
 80269a0:	d00a      	beq.n	80269b8 <__swsetup_r+0xbc>
 80269a2:	2300      	movs	r3, #0
 80269a4:	60a3      	str	r3, [r4, #8]
 80269a6:	6963      	ldr	r3, [r4, #20]
 80269a8:	425b      	negs	r3, r3
 80269aa:	61a3      	str	r3, [r4, #24]
 80269ac:	6923      	ldr	r3, [r4, #16]
 80269ae:	b943      	cbnz	r3, 80269c2 <__swsetup_r+0xc6>
 80269b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80269b4:	d1ba      	bne.n	802692c <__swsetup_r+0x30>
 80269b6:	bd70      	pop	{r4, r5, r6, pc}
 80269b8:	0781      	lsls	r1, r0, #30
 80269ba:	bf58      	it	pl
 80269bc:	6963      	ldrpl	r3, [r4, #20]
 80269be:	60a3      	str	r3, [r4, #8]
 80269c0:	e7f4      	b.n	80269ac <__swsetup_r+0xb0>
 80269c2:	2000      	movs	r0, #0
 80269c4:	e7f7      	b.n	80269b6 <__swsetup_r+0xba>
 80269c6:	bf00      	nop
 80269c8:	200000e8 	.word	0x200000e8
 80269cc:	0802b5f8 	.word	0x0802b5f8
 80269d0:	0802b618 	.word	0x0802b618
 80269d4:	0802b5d8 	.word	0x0802b5d8

080269d8 <__register_exitproc>:
 80269d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8026a98 <__register_exitproc+0xc0>
 80269e0:	4606      	mov	r6, r0
 80269e2:	f8d8 0000 	ldr.w	r0, [r8]
 80269e6:	461f      	mov	r7, r3
 80269e8:	460d      	mov	r5, r1
 80269ea:	4691      	mov	r9, r2
 80269ec:	f7ff fa15 	bl	8025e1a <__retarget_lock_acquire_recursive>
 80269f0:	4b25      	ldr	r3, [pc, #148]	; (8026a88 <__register_exitproc+0xb0>)
 80269f2:	681c      	ldr	r4, [r3, #0]
 80269f4:	b934      	cbnz	r4, 8026a04 <__register_exitproc+0x2c>
 80269f6:	4c25      	ldr	r4, [pc, #148]	; (8026a8c <__register_exitproc+0xb4>)
 80269f8:	601c      	str	r4, [r3, #0]
 80269fa:	4b25      	ldr	r3, [pc, #148]	; (8026a90 <__register_exitproc+0xb8>)
 80269fc:	b113      	cbz	r3, 8026a04 <__register_exitproc+0x2c>
 80269fe:	681b      	ldr	r3, [r3, #0]
 8026a00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026a04:	6863      	ldr	r3, [r4, #4]
 8026a06:	2b1f      	cmp	r3, #31
 8026a08:	dd07      	ble.n	8026a1a <__register_exitproc+0x42>
 8026a0a:	f8d8 0000 	ldr.w	r0, [r8]
 8026a0e:	f7ff fa06 	bl	8025e1e <__retarget_lock_release_recursive>
 8026a12:	f04f 30ff 	mov.w	r0, #4294967295
 8026a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a1a:	b34e      	cbz	r6, 8026a70 <__register_exitproc+0x98>
 8026a1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026a20:	b988      	cbnz	r0, 8026a46 <__register_exitproc+0x6e>
 8026a22:	4b1c      	ldr	r3, [pc, #112]	; (8026a94 <__register_exitproc+0xbc>)
 8026a24:	b923      	cbnz	r3, 8026a30 <__register_exitproc+0x58>
 8026a26:	f8d8 0000 	ldr.w	r0, [r8]
 8026a2a:	f7ff f9f7 	bl	8025e1c <__retarget_lock_release>
 8026a2e:	e7f0      	b.n	8026a12 <__register_exitproc+0x3a>
 8026a30:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026a34:	f7ff f9f4 	bl	8025e20 <malloc>
 8026a38:	2800      	cmp	r0, #0
 8026a3a:	d0f4      	beq.n	8026a26 <__register_exitproc+0x4e>
 8026a3c:	2300      	movs	r3, #0
 8026a3e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026a42:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026a46:	6863      	ldr	r3, [r4, #4]
 8026a48:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026a4c:	2201      	movs	r2, #1
 8026a4e:	409a      	lsls	r2, r3
 8026a50:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026a54:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026a58:	4313      	orrs	r3, r2
 8026a5a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026a5e:	2e02      	cmp	r6, #2
 8026a60:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026a64:	bf02      	ittt	eq
 8026a66:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026a6a:	4313      	orreq	r3, r2
 8026a6c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026a70:	6863      	ldr	r3, [r4, #4]
 8026a72:	f8d8 0000 	ldr.w	r0, [r8]
 8026a76:	1c5a      	adds	r2, r3, #1
 8026a78:	3302      	adds	r3, #2
 8026a7a:	6062      	str	r2, [r4, #4]
 8026a7c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026a80:	f7ff f9cd 	bl	8025e1e <__retarget_lock_release_recursive>
 8026a84:	2000      	movs	r0, #0
 8026a86:	e7c6      	b.n	8026a16 <__register_exitproc+0x3e>
 8026a88:	20027e48 	.word	0x20027e48
 8026a8c:	20027dbc 	.word	0x20027dbc
 8026a90:	0802b670 	.word	0x0802b670
 8026a94:	08025e21 	.word	0x08025e21
 8026a98:	2000014c 	.word	0x2000014c

08026a9c <_close_r>:
 8026a9c:	b538      	push	{r3, r4, r5, lr}
 8026a9e:	4d06      	ldr	r5, [pc, #24]	; (8026ab8 <_close_r+0x1c>)
 8026aa0:	2300      	movs	r3, #0
 8026aa2:	4604      	mov	r4, r0
 8026aa4:	4608      	mov	r0, r1
 8026aa6:	602b      	str	r3, [r5, #0]
 8026aa8:	f7de fbf2 	bl	8005290 <_close>
 8026aac:	1c43      	adds	r3, r0, #1
 8026aae:	d102      	bne.n	8026ab6 <_close_r+0x1a>
 8026ab0:	682b      	ldr	r3, [r5, #0]
 8026ab2:	b103      	cbz	r3, 8026ab6 <_close_r+0x1a>
 8026ab4:	6023      	str	r3, [r4, #0]
 8026ab6:	bd38      	pop	{r3, r4, r5, pc}
 8026ab8:	20027db8 	.word	0x20027db8

08026abc <__sflush_r>:
 8026abc:	898a      	ldrh	r2, [r1, #12]
 8026abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026ac2:	4605      	mov	r5, r0
 8026ac4:	0710      	lsls	r0, r2, #28
 8026ac6:	460c      	mov	r4, r1
 8026ac8:	d458      	bmi.n	8026b7c <__sflush_r+0xc0>
 8026aca:	684b      	ldr	r3, [r1, #4]
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	dc05      	bgt.n	8026adc <__sflush_r+0x20>
 8026ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026ad2:	2b00      	cmp	r3, #0
 8026ad4:	dc02      	bgt.n	8026adc <__sflush_r+0x20>
 8026ad6:	2000      	movs	r0, #0
 8026ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026ade:	2e00      	cmp	r6, #0
 8026ae0:	d0f9      	beq.n	8026ad6 <__sflush_r+0x1a>
 8026ae2:	2300      	movs	r3, #0
 8026ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026ae8:	682f      	ldr	r7, [r5, #0]
 8026aea:	602b      	str	r3, [r5, #0]
 8026aec:	d032      	beq.n	8026b54 <__sflush_r+0x98>
 8026aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026af0:	89a3      	ldrh	r3, [r4, #12]
 8026af2:	075a      	lsls	r2, r3, #29
 8026af4:	d505      	bpl.n	8026b02 <__sflush_r+0x46>
 8026af6:	6863      	ldr	r3, [r4, #4]
 8026af8:	1ac0      	subs	r0, r0, r3
 8026afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026afc:	b10b      	cbz	r3, 8026b02 <__sflush_r+0x46>
 8026afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026b00:	1ac0      	subs	r0, r0, r3
 8026b02:	2300      	movs	r3, #0
 8026b04:	4602      	mov	r2, r0
 8026b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026b08:	6a21      	ldr	r1, [r4, #32]
 8026b0a:	4628      	mov	r0, r5
 8026b0c:	47b0      	blx	r6
 8026b0e:	1c43      	adds	r3, r0, #1
 8026b10:	89a3      	ldrh	r3, [r4, #12]
 8026b12:	d106      	bne.n	8026b22 <__sflush_r+0x66>
 8026b14:	6829      	ldr	r1, [r5, #0]
 8026b16:	291d      	cmp	r1, #29
 8026b18:	d82c      	bhi.n	8026b74 <__sflush_r+0xb8>
 8026b1a:	4a2a      	ldr	r2, [pc, #168]	; (8026bc4 <__sflush_r+0x108>)
 8026b1c:	40ca      	lsrs	r2, r1
 8026b1e:	07d6      	lsls	r6, r2, #31
 8026b20:	d528      	bpl.n	8026b74 <__sflush_r+0xb8>
 8026b22:	2200      	movs	r2, #0
 8026b24:	6062      	str	r2, [r4, #4]
 8026b26:	04d9      	lsls	r1, r3, #19
 8026b28:	6922      	ldr	r2, [r4, #16]
 8026b2a:	6022      	str	r2, [r4, #0]
 8026b2c:	d504      	bpl.n	8026b38 <__sflush_r+0x7c>
 8026b2e:	1c42      	adds	r2, r0, #1
 8026b30:	d101      	bne.n	8026b36 <__sflush_r+0x7a>
 8026b32:	682b      	ldr	r3, [r5, #0]
 8026b34:	b903      	cbnz	r3, 8026b38 <__sflush_r+0x7c>
 8026b36:	6560      	str	r0, [r4, #84]	; 0x54
 8026b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026b3a:	602f      	str	r7, [r5, #0]
 8026b3c:	2900      	cmp	r1, #0
 8026b3e:	d0ca      	beq.n	8026ad6 <__sflush_r+0x1a>
 8026b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026b44:	4299      	cmp	r1, r3
 8026b46:	d002      	beq.n	8026b4e <__sflush_r+0x92>
 8026b48:	4628      	mov	r0, r5
 8026b4a:	f7ff f98f 	bl	8025e6c <_free_r>
 8026b4e:	2000      	movs	r0, #0
 8026b50:	6360      	str	r0, [r4, #52]	; 0x34
 8026b52:	e7c1      	b.n	8026ad8 <__sflush_r+0x1c>
 8026b54:	6a21      	ldr	r1, [r4, #32]
 8026b56:	2301      	movs	r3, #1
 8026b58:	4628      	mov	r0, r5
 8026b5a:	47b0      	blx	r6
 8026b5c:	1c41      	adds	r1, r0, #1
 8026b5e:	d1c7      	bne.n	8026af0 <__sflush_r+0x34>
 8026b60:	682b      	ldr	r3, [r5, #0]
 8026b62:	2b00      	cmp	r3, #0
 8026b64:	d0c4      	beq.n	8026af0 <__sflush_r+0x34>
 8026b66:	2b1d      	cmp	r3, #29
 8026b68:	d001      	beq.n	8026b6e <__sflush_r+0xb2>
 8026b6a:	2b16      	cmp	r3, #22
 8026b6c:	d101      	bne.n	8026b72 <__sflush_r+0xb6>
 8026b6e:	602f      	str	r7, [r5, #0]
 8026b70:	e7b1      	b.n	8026ad6 <__sflush_r+0x1a>
 8026b72:	89a3      	ldrh	r3, [r4, #12]
 8026b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b78:	81a3      	strh	r3, [r4, #12]
 8026b7a:	e7ad      	b.n	8026ad8 <__sflush_r+0x1c>
 8026b7c:	690f      	ldr	r7, [r1, #16]
 8026b7e:	2f00      	cmp	r7, #0
 8026b80:	d0a9      	beq.n	8026ad6 <__sflush_r+0x1a>
 8026b82:	0793      	lsls	r3, r2, #30
 8026b84:	680e      	ldr	r6, [r1, #0]
 8026b86:	bf08      	it	eq
 8026b88:	694b      	ldreq	r3, [r1, #20]
 8026b8a:	600f      	str	r7, [r1, #0]
 8026b8c:	bf18      	it	ne
 8026b8e:	2300      	movne	r3, #0
 8026b90:	eba6 0807 	sub.w	r8, r6, r7
 8026b94:	608b      	str	r3, [r1, #8]
 8026b96:	f1b8 0f00 	cmp.w	r8, #0
 8026b9a:	dd9c      	ble.n	8026ad6 <__sflush_r+0x1a>
 8026b9c:	6a21      	ldr	r1, [r4, #32]
 8026b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026ba0:	4643      	mov	r3, r8
 8026ba2:	463a      	mov	r2, r7
 8026ba4:	4628      	mov	r0, r5
 8026ba6:	47b0      	blx	r6
 8026ba8:	2800      	cmp	r0, #0
 8026baa:	dc06      	bgt.n	8026bba <__sflush_r+0xfe>
 8026bac:	89a3      	ldrh	r3, [r4, #12]
 8026bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026bb2:	81a3      	strh	r3, [r4, #12]
 8026bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8026bb8:	e78e      	b.n	8026ad8 <__sflush_r+0x1c>
 8026bba:	4407      	add	r7, r0
 8026bbc:	eba8 0800 	sub.w	r8, r8, r0
 8026bc0:	e7e9      	b.n	8026b96 <__sflush_r+0xda>
 8026bc2:	bf00      	nop
 8026bc4:	20400001 	.word	0x20400001

08026bc8 <_fflush_r>:
 8026bc8:	b538      	push	{r3, r4, r5, lr}
 8026bca:	690b      	ldr	r3, [r1, #16]
 8026bcc:	4605      	mov	r5, r0
 8026bce:	460c      	mov	r4, r1
 8026bd0:	b913      	cbnz	r3, 8026bd8 <_fflush_r+0x10>
 8026bd2:	2500      	movs	r5, #0
 8026bd4:	4628      	mov	r0, r5
 8026bd6:	bd38      	pop	{r3, r4, r5, pc}
 8026bd8:	b118      	cbz	r0, 8026be2 <_fflush_r+0x1a>
 8026bda:	6983      	ldr	r3, [r0, #24]
 8026bdc:	b90b      	cbnz	r3, 8026be2 <_fflush_r+0x1a>
 8026bde:	f7ff f847 	bl	8025c70 <__sinit>
 8026be2:	4b14      	ldr	r3, [pc, #80]	; (8026c34 <_fflush_r+0x6c>)
 8026be4:	429c      	cmp	r4, r3
 8026be6:	d11b      	bne.n	8026c20 <_fflush_r+0x58>
 8026be8:	686c      	ldr	r4, [r5, #4]
 8026bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026bee:	2b00      	cmp	r3, #0
 8026bf0:	d0ef      	beq.n	8026bd2 <_fflush_r+0xa>
 8026bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026bf4:	07d0      	lsls	r0, r2, #31
 8026bf6:	d404      	bmi.n	8026c02 <_fflush_r+0x3a>
 8026bf8:	0599      	lsls	r1, r3, #22
 8026bfa:	d402      	bmi.n	8026c02 <_fflush_r+0x3a>
 8026bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026bfe:	f7ff f90c 	bl	8025e1a <__retarget_lock_acquire_recursive>
 8026c02:	4628      	mov	r0, r5
 8026c04:	4621      	mov	r1, r4
 8026c06:	f7ff ff59 	bl	8026abc <__sflush_r>
 8026c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026c0c:	07da      	lsls	r2, r3, #31
 8026c0e:	4605      	mov	r5, r0
 8026c10:	d4e0      	bmi.n	8026bd4 <_fflush_r+0xc>
 8026c12:	89a3      	ldrh	r3, [r4, #12]
 8026c14:	059b      	lsls	r3, r3, #22
 8026c16:	d4dd      	bmi.n	8026bd4 <_fflush_r+0xc>
 8026c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026c1a:	f7ff f900 	bl	8025e1e <__retarget_lock_release_recursive>
 8026c1e:	e7d9      	b.n	8026bd4 <_fflush_r+0xc>
 8026c20:	4b05      	ldr	r3, [pc, #20]	; (8026c38 <_fflush_r+0x70>)
 8026c22:	429c      	cmp	r4, r3
 8026c24:	d101      	bne.n	8026c2a <_fflush_r+0x62>
 8026c26:	68ac      	ldr	r4, [r5, #8]
 8026c28:	e7df      	b.n	8026bea <_fflush_r+0x22>
 8026c2a:	4b04      	ldr	r3, [pc, #16]	; (8026c3c <_fflush_r+0x74>)
 8026c2c:	429c      	cmp	r4, r3
 8026c2e:	bf08      	it	eq
 8026c30:	68ec      	ldreq	r4, [r5, #12]
 8026c32:	e7da      	b.n	8026bea <_fflush_r+0x22>
 8026c34:	0802b5f8 	.word	0x0802b5f8
 8026c38:	0802b618 	.word	0x0802b618
 8026c3c:	0802b5d8 	.word	0x0802b5d8

08026c40 <_lseek_r>:
 8026c40:	b538      	push	{r3, r4, r5, lr}
 8026c42:	4d07      	ldr	r5, [pc, #28]	; (8026c60 <_lseek_r+0x20>)
 8026c44:	4604      	mov	r4, r0
 8026c46:	4608      	mov	r0, r1
 8026c48:	4611      	mov	r1, r2
 8026c4a:	2200      	movs	r2, #0
 8026c4c:	602a      	str	r2, [r5, #0]
 8026c4e:	461a      	mov	r2, r3
 8026c50:	f7de fb28 	bl	80052a4 <_lseek>
 8026c54:	1c43      	adds	r3, r0, #1
 8026c56:	d102      	bne.n	8026c5e <_lseek_r+0x1e>
 8026c58:	682b      	ldr	r3, [r5, #0]
 8026c5a:	b103      	cbz	r3, 8026c5e <_lseek_r+0x1e>
 8026c5c:	6023      	str	r3, [r4, #0]
 8026c5e:	bd38      	pop	{r3, r4, r5, pc}
 8026c60:	20027db8 	.word	0x20027db8

08026c64 <__swhatbuf_r>:
 8026c64:	b570      	push	{r4, r5, r6, lr}
 8026c66:	460e      	mov	r6, r1
 8026c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c6c:	2900      	cmp	r1, #0
 8026c6e:	b096      	sub	sp, #88	; 0x58
 8026c70:	4614      	mov	r4, r2
 8026c72:	461d      	mov	r5, r3
 8026c74:	da08      	bge.n	8026c88 <__swhatbuf_r+0x24>
 8026c76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026c7a:	2200      	movs	r2, #0
 8026c7c:	602a      	str	r2, [r5, #0]
 8026c7e:	061a      	lsls	r2, r3, #24
 8026c80:	d410      	bmi.n	8026ca4 <__swhatbuf_r+0x40>
 8026c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026c86:	e00e      	b.n	8026ca6 <__swhatbuf_r+0x42>
 8026c88:	466a      	mov	r2, sp
 8026c8a:	f000 f86f 	bl	8026d6c <_fstat_r>
 8026c8e:	2800      	cmp	r0, #0
 8026c90:	dbf1      	blt.n	8026c76 <__swhatbuf_r+0x12>
 8026c92:	9a01      	ldr	r2, [sp, #4]
 8026c94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026c98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026c9c:	425a      	negs	r2, r3
 8026c9e:	415a      	adcs	r2, r3
 8026ca0:	602a      	str	r2, [r5, #0]
 8026ca2:	e7ee      	b.n	8026c82 <__swhatbuf_r+0x1e>
 8026ca4:	2340      	movs	r3, #64	; 0x40
 8026ca6:	2000      	movs	r0, #0
 8026ca8:	6023      	str	r3, [r4, #0]
 8026caa:	b016      	add	sp, #88	; 0x58
 8026cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08026cb0 <__smakebuf_r>:
 8026cb0:	898b      	ldrh	r3, [r1, #12]
 8026cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026cb4:	079d      	lsls	r5, r3, #30
 8026cb6:	4606      	mov	r6, r0
 8026cb8:	460c      	mov	r4, r1
 8026cba:	d507      	bpl.n	8026ccc <__smakebuf_r+0x1c>
 8026cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026cc0:	6023      	str	r3, [r4, #0]
 8026cc2:	6123      	str	r3, [r4, #16]
 8026cc4:	2301      	movs	r3, #1
 8026cc6:	6163      	str	r3, [r4, #20]
 8026cc8:	b002      	add	sp, #8
 8026cca:	bd70      	pop	{r4, r5, r6, pc}
 8026ccc:	ab01      	add	r3, sp, #4
 8026cce:	466a      	mov	r2, sp
 8026cd0:	f7ff ffc8 	bl	8026c64 <__swhatbuf_r>
 8026cd4:	9900      	ldr	r1, [sp, #0]
 8026cd6:	4605      	mov	r5, r0
 8026cd8:	4630      	mov	r0, r6
 8026cda:	f7ff f933 	bl	8025f44 <_malloc_r>
 8026cde:	b948      	cbnz	r0, 8026cf4 <__smakebuf_r+0x44>
 8026ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ce4:	059a      	lsls	r2, r3, #22
 8026ce6:	d4ef      	bmi.n	8026cc8 <__smakebuf_r+0x18>
 8026ce8:	f023 0303 	bic.w	r3, r3, #3
 8026cec:	f043 0302 	orr.w	r3, r3, #2
 8026cf0:	81a3      	strh	r3, [r4, #12]
 8026cf2:	e7e3      	b.n	8026cbc <__smakebuf_r+0xc>
 8026cf4:	4b0d      	ldr	r3, [pc, #52]	; (8026d2c <__smakebuf_r+0x7c>)
 8026cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8026cf8:	89a3      	ldrh	r3, [r4, #12]
 8026cfa:	6020      	str	r0, [r4, #0]
 8026cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026d00:	81a3      	strh	r3, [r4, #12]
 8026d02:	9b00      	ldr	r3, [sp, #0]
 8026d04:	6163      	str	r3, [r4, #20]
 8026d06:	9b01      	ldr	r3, [sp, #4]
 8026d08:	6120      	str	r0, [r4, #16]
 8026d0a:	b15b      	cbz	r3, 8026d24 <__smakebuf_r+0x74>
 8026d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026d10:	4630      	mov	r0, r6
 8026d12:	f000 f83d 	bl	8026d90 <_isatty_r>
 8026d16:	b128      	cbz	r0, 8026d24 <__smakebuf_r+0x74>
 8026d18:	89a3      	ldrh	r3, [r4, #12]
 8026d1a:	f023 0303 	bic.w	r3, r3, #3
 8026d1e:	f043 0301 	orr.w	r3, r3, #1
 8026d22:	81a3      	strh	r3, [r4, #12]
 8026d24:	89a0      	ldrh	r0, [r4, #12]
 8026d26:	4305      	orrs	r5, r0
 8026d28:	81a5      	strh	r5, [r4, #12]
 8026d2a:	e7cd      	b.n	8026cc8 <__smakebuf_r+0x18>
 8026d2c:	08025c09 	.word	0x08025c09

08026d30 <__malloc_lock>:
 8026d30:	4801      	ldr	r0, [pc, #4]	; (8026d38 <__malloc_lock+0x8>)
 8026d32:	f7ff b872 	b.w	8025e1a <__retarget_lock_acquire_recursive>
 8026d36:	bf00      	nop
 8026d38:	20027ca5 	.word	0x20027ca5

08026d3c <__malloc_unlock>:
 8026d3c:	4801      	ldr	r0, [pc, #4]	; (8026d44 <__malloc_unlock+0x8>)
 8026d3e:	f7ff b86e 	b.w	8025e1e <__retarget_lock_release_recursive>
 8026d42:	bf00      	nop
 8026d44:	20027ca5 	.word	0x20027ca5

08026d48 <_read_r>:
 8026d48:	b538      	push	{r3, r4, r5, lr}
 8026d4a:	4d07      	ldr	r5, [pc, #28]	; (8026d68 <_read_r+0x20>)
 8026d4c:	4604      	mov	r4, r0
 8026d4e:	4608      	mov	r0, r1
 8026d50:	4611      	mov	r1, r2
 8026d52:	2200      	movs	r2, #0
 8026d54:	602a      	str	r2, [r5, #0]
 8026d56:	461a      	mov	r2, r3
 8026d58:	f7de fa7e 	bl	8005258 <_read>
 8026d5c:	1c43      	adds	r3, r0, #1
 8026d5e:	d102      	bne.n	8026d66 <_read_r+0x1e>
 8026d60:	682b      	ldr	r3, [r5, #0]
 8026d62:	b103      	cbz	r3, 8026d66 <_read_r+0x1e>
 8026d64:	6023      	str	r3, [r4, #0]
 8026d66:	bd38      	pop	{r3, r4, r5, pc}
 8026d68:	20027db8 	.word	0x20027db8

08026d6c <_fstat_r>:
 8026d6c:	b538      	push	{r3, r4, r5, lr}
 8026d6e:	4d07      	ldr	r5, [pc, #28]	; (8026d8c <_fstat_r+0x20>)
 8026d70:	2300      	movs	r3, #0
 8026d72:	4604      	mov	r4, r0
 8026d74:	4608      	mov	r0, r1
 8026d76:	4611      	mov	r1, r2
 8026d78:	602b      	str	r3, [r5, #0]
 8026d7a:	f7de fa8c 	bl	8005296 <_fstat>
 8026d7e:	1c43      	adds	r3, r0, #1
 8026d80:	d102      	bne.n	8026d88 <_fstat_r+0x1c>
 8026d82:	682b      	ldr	r3, [r5, #0]
 8026d84:	b103      	cbz	r3, 8026d88 <_fstat_r+0x1c>
 8026d86:	6023      	str	r3, [r4, #0]
 8026d88:	bd38      	pop	{r3, r4, r5, pc}
 8026d8a:	bf00      	nop
 8026d8c:	20027db8 	.word	0x20027db8

08026d90 <_isatty_r>:
 8026d90:	b538      	push	{r3, r4, r5, lr}
 8026d92:	4d06      	ldr	r5, [pc, #24]	; (8026dac <_isatty_r+0x1c>)
 8026d94:	2300      	movs	r3, #0
 8026d96:	4604      	mov	r4, r0
 8026d98:	4608      	mov	r0, r1
 8026d9a:	602b      	str	r3, [r5, #0]
 8026d9c:	f7de fa80 	bl	80052a0 <_isatty>
 8026da0:	1c43      	adds	r3, r0, #1
 8026da2:	d102      	bne.n	8026daa <_isatty_r+0x1a>
 8026da4:	682b      	ldr	r3, [r5, #0]
 8026da6:	b103      	cbz	r3, 8026daa <_isatty_r+0x1a>
 8026da8:	6023      	str	r3, [r4, #0]
 8026daa:	bd38      	pop	{r3, r4, r5, pc}
 8026dac:	20027db8 	.word	0x20027db8

08026db0 <_init>:
 8026db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026db2:	bf00      	nop
 8026db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026db6:	bc08      	pop	{r3}
 8026db8:	469e      	mov	lr, r3
 8026dba:	4770      	bx	lr

08026dbc <_fini>:
 8026dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026dbe:	bf00      	nop
 8026dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026dc2:	bc08      	pop	{r3}
 8026dc4:	469e      	mov	lr, r3
 8026dc6:	4770      	bx	lr
