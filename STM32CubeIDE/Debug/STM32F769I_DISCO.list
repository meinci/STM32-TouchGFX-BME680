
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029b4c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000488c  08029d4c  08029d4c  0002ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000000d4  0802e5d8  0802e5d8  0002f5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802e6ac  0802e6ac  00711290  2**0
                  CONTENTS
  5 .ARM          00000008  0802e6ac  0802e6ac  0002f6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802e6b4  0802e6b4  00711290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802e6b4  0802e6b4  0002f6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802e6d0  0802e6d0  0002f6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0802e6d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferA 00000100  20000160  0802e828  00030160  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_ScratchbufferB 00000100  20000260  0802e928  00030260  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000287a4  20000360  0802ea28  00030360  2**2
                  ALLOC
 13 ._user_heap_stack 00002004  20028b04  0802ea28  00030b04  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00711290  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 006dc354  90000000  90000000  00031000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 FontFlashSection 00003e6c  906dc354  906dc354  0070d354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 TextFlashSection 000000d0  906e01c0  906e01c0  007111c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 00177000  c0000000  c0000000  00712000  2**2
                  ALLOC
 19 .debug_line   00067e9b  00000000  00000000  007112be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000068  00000000  00000000  00779159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_info   000f44d6  00000000  00000000  007791c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00018257  00000000  00000000  0086d697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003ca0  00000000  00000000  008858f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00165c13  00000000  00000000  00889590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 000049e2  00000000  00000000  009ef1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  0003fc10  00000000  00000000  009f3b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000c2  00000000  00000000  00a33795  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000a918  00000000  00000000  00a33858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loclists 00026a8e  00000000  00000000  00a3e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000360 	.word	0x20000360
 800021c:	00000000 	.word	0x00000000
 8000220:	08029d34 	.word	0x08029d34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000364 	.word	0x20000364
 800023c:	08029d34 	.word	0x08029d34

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9b5 	b.w	800066c <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000676:	e003      	b.n	8000680 <LoopCopyDataInit>

08000678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800067a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800067c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800067e:	3104      	adds	r1, #4

08000680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000688:	d3f6      	bcc.n	8000678 <CopyDataInit>
  ldr  r2, =_sbss
 800068a:	4a0b      	ldr	r2, [pc, #44]	@ (80006b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800068c:	e002      	b.n	8000694 <LoopFillZerobss>

0800068e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800068e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000690:	f842 3b04 	str.w	r3, [r2], #4

08000694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000698:	d3f9      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800069a:	f007 fba3 	bl	8007de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069e:	f028 fe5f 	bl	8029360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006a2:	f003 fbd3 	bl	8003e4c <main>
  bx  lr    
 80006a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80006ac:	0802e6d8 	.word	0x0802e6d8
  ldr  r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006b4:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 80006b8:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 80006bc:	20028b04 	.word	0x20028b04

080006c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <CAN1_RX0_IRQHandler>

080006c2 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80006c2:	4770      	bx	lr

080006c4 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80006c4:	4770      	bx	lr

080006c6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80006c6:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 80006c8:	f001 fd94 	bl	80021f4 <touchgfx_components_init>
    touchgfx_init();
}
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 80006d0:	f001 bd1c 	b.w	800210c <touchgfx_init>

080006d4 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80006d4:	f001 bd90 	b.w	80021f8 <touchgfx_taskEntry>

080006d8 <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <BSP_PB_Init+0x60>)
 80006da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006dc:	f042 0201 	orr.w	r2, r2, #1
    {
 80006e0:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
    {
 80006e4:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 80006f0:	b959      	cbnz	r1, 800070a <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80006f2:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 80006f4:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006f6:	4811      	ldr	r0, [pc, #68]	@ (800073c <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80006f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80006fc:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006fe:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000700:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000702:	f008 fdc7 	bl	8009294 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 8000706:	b006      	add	sp, #24
 8000708:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 800070a:	2901      	cmp	r1, #1
 800070c:	d1fb      	bne.n	8000706 <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800070e:	2400      	movs	r4, #0
 8000710:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000712:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000714:	a901      	add	r1, sp, #4
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000718:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800071c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000720:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000722:	f008 fdb7 	bl	8009294 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000726:	4622      	mov	r2, r4
 8000728:	210f      	movs	r1, #15
 800072a:	2006      	movs	r0, #6
 800072c:	f007 fe30 	bl	8008390 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000730:	2006      	movs	r0, #6
 8000732:	f007 fe5f 	bl	80083f4 <HAL_NVIC_EnableIRQ>
    }
 8000736:	e7e6      	b.n	8000706 <BSP_PB_Init+0x2e>
 8000738:	40023800 	.word	0x40023800
 800073c:	40020000 	.word	0x40020000

08000740 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000740:	2100      	movs	r1, #0
{
 8000742:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000744:	4608      	mov	r0, r1
 8000746:	f7ff ffc7 	bl	80006d8 <BSP_PB_Init>
}
 800074a:	bd08      	pop	{r3, pc}

0800074c <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800074c:	2101      	movs	r1, #1
 800074e:	4802      	ldr	r0, [pc, #8]	@ (8000758 <BSP_PB_GetState+0xc>)
    {
 8000750:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000752:	f008 ff1d 	bl	8009590 <HAL_GPIO_ReadPin>
    }
 8000756:	bd08      	pop	{r3, pc}
 8000758:	40020000 	.word	0x40020000

0800075c <_ZN8touchgfx7Buttons6sampleEv>:
{
 800075c:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fff4 	bl	800074c <BSP_PB_GetState>
}
 8000764:	bd08      	pop	{r3, pc}

08000766 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000766:	6840      	ldr	r0, [r0, #4]
    }
 8000768:	4770      	bx	lr

0800076a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800076a:	6041      	str	r1, [r0, #4]
    }
 800076c:	4770      	bx	lr
	...

08000770 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000770:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000774:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800077c:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000784:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 8000788:	430a      	orrs	r2, r1
 800078a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	f042 0201 	orr.w	r2, r2, #1
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	4770      	bx	lr
 8000798:	e0001000 	.word	0xe0001000
 800079c:	c5acce55 	.word	0xc5acce55

080007a0 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80007a0:	1a52      	subs	r2, r2, r1
 80007a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80007a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80007aa:	4770      	bx	lr

080007ac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80007ac:	4b01      	ldr	r3, [pc, #4]	@ (80007b4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80007ae:	6858      	ldr	r0, [r3, #4]
}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e0001000 	.word	0xe0001000

080007b8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80007b8:	4770      	bx	lr

080007ba <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80007ba:	b510      	push	{r4, lr}
 80007bc:	4604      	mov	r4, r0
 80007be:	210c      	movs	r1, #12
 80007c0:	f028 f9f3 	bl	8028baa <_ZdlPvj>
 80007c4:	4620      	mov	r0, r4
 80007c6:	bd10      	pop	{r4, pc}

080007c8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007c8:	6803      	ldr	r3, [r0, #0]
{
 80007ca:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007cc:	691b      	ldr	r3, [r3, #16]
{
 80007ce:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80007d0:	b131      	cbz	r1, 80007e0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80007d2:	4798      	blx	r3
 80007d4:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80007d6:	6863      	ldr	r3, [r4, #4]
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	4403      	add	r3, r0
 80007dc:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80007de:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80007e0:	4798      	blx	r3
 80007e2:	60a0      	str	r0, [r4, #8]
}
 80007e4:	e7fb      	b.n	80007de <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080007e6 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80007e6:	4770      	bx	lr

080007e8 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 80007e8:	4770      	bx	lr
	...

080007ec <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 80007ec:	b508      	push	{r3, lr}
    Buttons::init();
 80007ee:	f7ff ffa7 	bl	8000740 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 80007f2:	4b02      	ldr	r3, [pc, #8]	@ (80007fc <_ZN8touchgfx10KeySampler4initEv+0x10>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	bd08      	pop	{r3, pc}
 80007fa:	bf00      	nop
 80007fc:	2000037c 	.word	0x2000037c

08000800 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000804:	f7ff ffaa 	bl	800075c <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000808:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 800080a:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 800080c:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 800080e:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000810:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000812:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000816:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000818:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 800081a:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 800081c:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 800081e:	d00a      	beq.n	8000836 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000820:	f016 0001 	ands.w	r0, r6, #1
 8000824:	d007      	beq.n	8000836 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000826:	f011 0001 	ands.w	r0, r1, #1
 800082a:	d004      	beq.n	8000836 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 800082c:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 800082e:	bf56      	itet	pl
 8000830:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000832:	2000      	movmi	r0, #0
        key = 1;
 8000834:	7028      	strbpl	r0, [r5, #0]
}
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	2000037c 	.word	0x2000037c

0800083c <_ZN8touchgfx10KeySamplerD0Ev>:
 800083c:	b510      	push	{r4, lr}
 800083e:	4604      	mov	r4, r0
 8000840:	2104      	movs	r1, #4
 8000842:	f028 f9b2 	bl	8028baa <_ZdlPvj>
 8000846:	4620      	mov	r0, r4
 8000848:	bd10      	pop	{r4, pc}

0800084a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800084a:	4770      	bx	lr

0800084c <_ZN20STM32TouchControllerD0Ev>:
 800084c:	b510      	push	{r4, lr}
 800084e:	4604      	mov	r4, r0
 8000850:	2104      	movs	r1, #4
 8000852:	f028 f9aa 	bl	8028baa <_ZdlPvj>
 8000856:	4620      	mov	r0, r4
 8000858:	bd10      	pop	{r4, pc}

0800085a <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 800085a:	4770      	bx	lr

0800085c <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 800085c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800085e:	2301      	movs	r3, #1
    {
 8000860:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000868:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800086c:	f10d 0217 	add.w	r2, sp, #23
 8000870:	9200      	str	r2, [sp, #0]
 8000872:	460a      	mov	r2, r1
 8000874:	4601      	mov	r1, r0
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <TS_IO_Write+0x34>)
 8000878:	f009 f996 	bl	8009ba8 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 800087c:	b120      	cbz	r0, 8000888 <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <TS_IO_Write+0x34>)
 8000880:	f009 f84b 	bl	800991a <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000884:	f003 fac0 	bl	8003e08 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000888:	b007      	add	sp, #28
 800088a:	f85d fb04 	ldr.w	pc, [sp], #4
 800088e:	bf00      	nop
 8000890:	20012478 	.word	0x20012478

08000894 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000896:	2300      	movs	r3, #0
    {
 8000898:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800089a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
        uint8_t read_value = 0;
 800089e:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008a2:	2301      	movs	r3, #1
 80008a4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80008a8:	f10d 0117 	add.w	r1, sp, #23
 80008ac:	9100      	str	r1, [sp, #0]
 80008ae:	4601      	mov	r1, r0
 80008b0:	4806      	ldr	r0, [pc, #24]	@ (80008cc <TS_IO_Read+0x38>)
 80008b2:	f009 fa53 	bl	8009d5c <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008b6:	b120      	cbz	r0, 80008c2 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <TS_IO_Read+0x38>)
 80008ba:	f009 f82e 	bl	800991a <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80008be:	f003 faa3 	bl	8003e08 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 80008c2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80008c6:	b007      	add	sp, #28
 80008c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80008cc:	20012478 	.word	0x20012478

080008d0 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 80008d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008d2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80008d6:	9200      	str	r2, [sp, #0]
 80008d8:	460a      	mov	r2, r1
 80008da:	4601      	mov	r1, r0
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <TS_IO_ReadMultiple+0x2c>)
 80008de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80008e2:	2301      	movs	r3, #1
 80008e4:	f009 fa3a 	bl	8009d5c <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 80008e8:	4604      	mov	r4, r0
 80008ea:	b120      	cbz	r0, 80008f6 <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 80008ec:	4803      	ldr	r0, [pc, #12]	@ (80008fc <TS_IO_ReadMultiple+0x2c>)
 80008ee:	f009 f814 	bl	800991a <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80008f2:	f003 fa89 	bl	8003e08 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 80008f6:	4620      	mov	r0, r4
 80008f8:	b004      	add	sp, #16
 80008fa:	bd10      	pop	{r4, pc}
 80008fc:	20012478 	.word	0x20012478

08000900 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000902:	4d13      	ldr	r5, [pc, #76]	@ (8000950 <BSP_TS_Init+0x50>)
    {
 8000904:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000906:	4c13      	ldr	r4, [pc, #76]	@ (8000954 <BSP_TS_Init+0x54>)
    {
 8000908:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	7820      	ldrb	r0, [r4, #0]
 800090e:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000910:	686b      	ldr	r3, [r5, #4]
 8000912:	2054      	movs	r0, #84	@ 0x54
 8000914:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000916:	b2c0      	uxtb	r0, r0
 8000918:	2811      	cmp	r0, #17
 800091a:	d009      	beq.n	8000930 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800091c:	686b      	ldr	r3, [r5, #4]
 800091e:	2070      	movs	r0, #112	@ 0x70
 8000920:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000922:	2370      	movs	r3, #112	@ 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000924:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000926:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000928:	2811      	cmp	r0, #17
 800092a:	d003      	beq.n	8000934 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 800092c:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 800092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000930:	2354      	movs	r3, #84	@ 0x54
 8000932:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_NONE;
 8000936:	42be      	cmp	r6, r7
 8000938:	bf2c      	ite	cs
 800093a:	260c      	movcs	r6, #12
 800093c:	2601      	movcc	r6, #1
                ft6x06_ts_drv.Reset(I2C_Address);
 800093e:	7820      	ldrb	r0, [r4, #0]
 8000940:	701e      	strb	r6, [r3, #0]
 8000942:	68ab      	ldr	r3, [r5, #8]
 8000944:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000946:	7820      	ldrb	r0, [r4, #0]
 8000948:	68eb      	ldr	r3, [r5, #12]
 800094a:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 800094c:	2000      	movs	r0, #0
 800094e:	e7ee      	b.n	800092e <BSP_TS_Init+0x2e>
 8000950:	20000038 	.word	0x20000038
 8000954:	20000391 	.word	0x20000391
 8000958:	20000392 	.word	0x20000392

0800095c <_ZN20STM32TouchController4initEv>:
{
 800095c:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 800095e:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000962:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000966:	f7ff ffcb 	bl	8000900 <BSP_TS_Init>
 800096a:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <_ZN20STM32TouchController4initEv+0x2c>)
 800096c:	b910      	cbnz	r0, 8000974 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1fb      	bne.n	8000972 <_ZN20STM32TouchController4initEv+0x16>
 800097a:	4b04      	ldr	r3, [pc, #16]	@ (800098c <_ZN20STM32TouchController4initEv+0x30>)
 800097c:	216a      	movs	r1, #106	@ 0x6a
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <_ZN20STM32TouchController4initEv+0x34>)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <_ZN20STM32TouchController4initEv+0x38>)
 8000982:	f028 f941 	bl	8028c08 <__assert_func>
 8000986:	bf00      	nop
 8000988:	20000390 	.word	0x20000390
 800098c:	08029e58 	.word	0x08029e58
 8000990:	08029e6b 	.word	0x08029e6b
 8000994:	08029e95 	.word	0x08029e95

08000998 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 800099c:	4a34      	ldr	r2, [pc, #208]	@ (8000a70 <BSP_TS_GetState+0xd8>)
{
 800099e:	4605      	mov	r5, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009a0:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8000a80 <BSP_TS_GetState+0xe8>
{
 80009a4:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 80009a6:	7810      	ldrb	r0, [r2, #0]
 80009a8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80009ac:	4798      	blx	r3
 80009ae:	7028      	strb	r0, [r5, #0]
    if (TS_State->touchDetected)
 80009b0:	b150      	cbz	r0, 80009c8 <BSP_TS_GetState+0x30>
 80009b2:	4e30      	ldr	r6, [pc, #192]	@ (8000a74 <BSP_TS_GetState+0xdc>)
 80009b4:	46a9      	mov	r9, r5
 80009b6:	4f30      	ldr	r7, [pc, #192]	@ (8000a78 <BSP_TS_GetState+0xe0>)
 80009b8:	f10d 0b0c 	add.w	fp, sp, #12
 80009bc:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 80009be:	f04f 0800 	mov.w	r8, #0
 80009c2:	782b      	ldrb	r3, [r5, #0]
 80009c4:	4598      	cmp	r8, r3
 80009c6:	d303      	bcc.n	80009d0 <BSP_TS_GetState+0x38>
            TS_State->touchY[index] = _y[index];
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 80009c8:	2000      	movs	r0, #0
 80009ca:	b005      	add	sp, #20
 80009cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009d0:	4827      	ldr	r0, [pc, #156]	@ (8000a70 <BSP_TS_GetState+0xd8>)
 80009d2:	465a      	mov	r2, fp
 80009d4:	4621      	mov	r1, r4
 80009d6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80009da:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 80009dc:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80009e0:	4798      	blx	r3
            if (ts_orientation & TS_SWAP_XY)
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <BSP_TS_GetState+0xe4>)
 80009e4:	46b4      	mov	ip, r6
 80009e6:	46be      	mov	lr, r7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3604      	adds	r6, #4
 80009ec:	3704      	adds	r7, #4
 80009ee:	0719      	lsls	r1, r3, #28
                tmp = Raw_x[index];
 80009f0:	bf41      	itttt	mi
 80009f2:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 80009f4:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 80009f8:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 80009fc:	8021      	strhmi	r1, [r4, #0]
            if (ts_orientation & TS_SWAP_X)
 80009fe:	079a      	lsls	r2, r3, #30
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000a00:	bf41      	itttt	mi
 8000a02:	8822      	ldrhmi	r2, [r4, #0]
 8000a04:	f5c2 7247 	rsbmi	r2, r2, #796	@ 0x31c
 8000a08:	3203      	addmi	r2, #3
 8000a0a:	8022      	strhmi	r2, [r4, #0]
            if (ts_orientation & TS_SWAP_Y)
 8000a0c:	075b      	lsls	r3, r3, #29
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a0e:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a12:	bf48      	it	mi
 8000a14:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a18:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000a1c:	bf42      	ittt	mi
 8000a1e:	f5c3 73ef 	rsbmi	r3, r3, #478	@ 0x1de
 8000a22:	3301      	addmi	r3, #1
 8000a24:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a28:	b293      	uxth	r3, r2
 8000a2a:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a2c:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000a30:	bf8c      	ite	hi
 8000a32:	1ac3      	subhi	r3, r0, r3
 8000a34:	1a1b      	subls	r3, r3, r0
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a3a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4299      	cmp	r1, r3
            if ((xDiff + yDiff) > 5)
 8000a42:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000a44:	bf8c      	ite	hi
 8000a46:	1a8a      	subhi	r2, r1, r2
 8000a48:	1a52      	subls	r2, r2, r1
 8000a4a:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2b05      	cmp	r3, #5
                _x[index] = Raw_x[index];
 8000a50:	bfc8      	it	gt
 8000a52:	f846 0c04 	strgt.w	r0, [r6, #-4]
            TS_State->touchX[index] = _x[index];
 8000a56:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000a5a:	bfc8      	it	gt
 8000a5c:	f847 1c04 	strgt.w	r1, [r7, #-4]
            TS_State->touchX[index] = _x[index];
 8000a60:	f829 3f02 	strh.w	r3, [r9, #2]!
            TS_State->touchY[index] = _y[index];
 8000a64:	f8de 3000 	ldr.w	r3, [lr]
 8000a68:	f8a9 3004 	strh.w	r3, [r9, #4]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000a6c:	e7a9      	b.n	80009c2 <BSP_TS_GetState+0x2a>
 8000a6e:	bf00      	nop
 8000a70:	20000391 	.word	0x20000391
 8000a74:	20000388 	.word	0x20000388
 8000a78:	20000380 	.word	0x20000380
 8000a7c:	20000392 	.word	0x20000392
 8000a80:	20000038 	.word	0x20000038

08000a84 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000a84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000a88:	460e      	mov	r6, r1
 8000a8a:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000a8c:	781c      	ldrb	r4, [r3, #0]
 8000a8e:	b91c      	cbnz	r4, 8000a98 <_ZN20STM32TouchController11sampleTouchERlS0_+0x14>
    return false;
 8000a90:	2400      	movs	r4, #0
}
 8000a92:	4620      	mov	r0, r4
 8000a94:	b004      	add	sp, #16
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
        BSP_TS_GetState(&state);
 8000a98:	a801      	add	r0, sp, #4
 8000a9a:	f7ff ff7d 	bl	8000998 <BSP_TS_GetState>
        if (state.touchDetected)
 8000a9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f4      	beq.n	8000a90 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = state.touchX[0];
 8000aa6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000aaa:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000aac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000ab0:	602b      	str	r3, [r5, #0]
            return true;
 8000ab2:	e7ee      	b.n	8000a92 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8000ab4:	20000390 	.word	0x20000390

08000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d823      	bhi.n	8000b04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000abc:	e8df f000 	tbb	[pc, r0]
 8000ac0:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ac6:	2140      	movs	r1, #64	@ 0x40
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000ad0:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000ad2:	f008 bd63 	b.w	800959c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	0952      	lsrs	r2, r2, #5
 8000ae2:	e7f5      	b.n	8000ad0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	0952      	lsrs	r2, r2, #5
 8000af2:	e7ee      	b.n	8000ad2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000af6:	2140      	movs	r1, #64	@ 0x40
 8000af8:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	0952      	lsrs	r2, r2, #5
 8000b02:	e7e6      	b.n	8000ad2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000394 	.word	0x20000394
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40022400 	.word	0x40022400
 8000b14:	40021400 	.word	0x40021400

08000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000b18:	2803      	cmp	r0, #3
 8000b1a:	d823      	bhi.n	8000b64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000b1c:	e8df f000 	tbb	[pc, r0]
 8000b20:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b26:	2140      	movs	r1, #64	@ 0x40
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	3a00      	subs	r2, #0
 8000b2c:	bf18      	it	ne
 8000b2e:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b30:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b32:	f008 bd33 	b.w	800959c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	3a00      	subs	r2, #0
 8000b3e:	bf18      	it	ne
 8000b40:	2201      	movne	r2, #1
 8000b42:	e7f5      	b.n	8000b30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b46:	2102      	movs	r1, #2
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	3a00      	subs	r2, #0
 8000b4e:	bf18      	it	ne
 8000b50:	2201      	movne	r2, #1
 8000b52:	e7ee      	b.n	8000b32 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	3a00      	subs	r2, #0
 8000b5e:	bf18      	it	ne
 8000b60:	2201      	movne	r2, #1
 8000b62:	e7e6      	b.n	8000b32 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000394 	.word	0x20000394
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40022400 	.word	0x40022400
 8000b74:	40021400 	.word	0x40021400

08000b78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000b78:	2803      	cmp	r0, #3
 8000b7a:	d80f      	bhi.n	8000b9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000b7c:	e8df f000 	tbb	[pc, r0]
 8000b80:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000b84:	2140      	movs	r1, #64	@ 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b88:	f008 bd0d 	b.w	80095a6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	e7fa      	b.n	8000b86 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000b90:	2102      	movs	r1, #2
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000b94:	e7f8      	b.n	8000b88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b96:	2140      	movs	r1, #64	@ 0x40
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000b9a:	e7f5      	b.n	8000b88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40022400 	.word	0x40022400
 8000ba8:	40021400 	.word	0x40021400

08000bac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000bac:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000bae:	2803      	cmp	r0, #3
 8000bb0:	d813      	bhi.n	8000bda <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000bb2:	e8df f000 	tbb	[pc, r0]
 8000bb6:	0a02      	.short	0x0a02
 8000bb8:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000bba:	2140      	movs	r1, #64	@ 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000bbc:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bbe:	f008 fce7 	bl	8009590 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000bc2:	1e43      	subs	r3, r0, #1
 8000bc4:	4258      	negs	r0, r3
 8000bc6:	4158      	adcs	r0, r3
 8000bc8:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	e7f6      	b.n	8000bbc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000bd2:	e7f4      	b.n	8000bbe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000bd8:	e7f1      	b.n	8000bbe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e7f1      	b.n	8000bc2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000bde:	bf00      	nop
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40022400 	.word	0x40022400
 8000be8:	40021400 	.word	0x40021400

08000bec <_ZN8touchgfx4GPIO4initEv>:
{
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4d08      	ldr	r5, [pc, #32]	@ (8000c10 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000bf0:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000bf2:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000bf4:	b2e0      	uxtb	r0, r4
 8000bf6:	f7ff ffd9 	bl	8000bac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000bfa:	b118      	cbz	r0, 8000c04 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000c00:	bf18      	it	ne
 8000c02:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000c04:	3401      	adds	r4, #1
 8000c06:	3504      	adds	r5, #4
 8000c08:	2c05      	cmp	r4, #5
 8000c0a:	d1f3      	bne.n	8000bf4 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000394 	.word	0x20000394

08000c14 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000c14:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000c16:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8000c1a:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8000c1e:	4770      	bx	lr

08000c20 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000c20:	2000      	movs	r0, #0
 8000c22:	4770      	bx	lr

08000c24 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000c24:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000c26:	3900      	subs	r1, #0
 8000c28:	4b02      	ldr	r3, [pc, #8]	@ (8000c34 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000c2a:	bf18      	it	ne
 8000c2c:	2101      	movne	r1, #1
 8000c2e:	7019      	strb	r1, [r3, #0]
    }
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20027dbf 	.word	0x20027dbf

08000c38 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000c38:	2000      	movs	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000c3c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000c3e:	b10b      	cbz	r3, 8000c44 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000c40:	4608      	mov	r0, r1
 8000c42:	4718      	bx	r3
        }
    }
 8000c44:	4770      	bx	lr

08000c46 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000c46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c4a:	4770      	bx	lr

08000c4c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000c4c:	6840      	ldr	r0, [r0, #4]
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4718      	bx	r3

08000c54 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000c54:	4b01      	ldr	r3, [pc, #4]	@ (8000c5c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200003b8 	.word	0x200003b8

08000c60 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000c64:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c66:	2300      	movs	r3, #0
 8000c68:	4c10      	ldr	r4, [pc, #64]	@ (8000cac <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000c6a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c6e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c72:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c76:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c7a:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c7e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c82:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c84:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c88:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c8a:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c8e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c90:	f8c4 7274 	str.w	r7, [r4, #628]	@ 0x274
      } while (ways-- != 0U);
 8000c94:	d2f9      	bcs.n	8000c8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000c96:	3b20      	subs	r3, #32
 8000c98:	f113 0f20 	cmn.w	r3, #32
 8000c9c:	d1f2      	bne.n	8000c84 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ca2:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000ca6:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000ca8:	f001 bb90 	b.w	80023cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000cb0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000cb2:	f001 fb1d 	bl	80022f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000cb8:	2204      	movs	r2, #4
 8000cba:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000cbc:	bd08      	pop	{r3, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000cc8:	f001 fc90 	bl	80025ec <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000ccc:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8000cd0:	b113      	cbz	r3, 8000cd8 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	@ (8000cdc <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
    }
}
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000014 	.word	0x20000014

08000ce0 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000ce0:	f001 bb0f 	b.w	8002302 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000ce4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000ce8:	f010 f946 	bl	8010f78 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000cf8:	4718      	bx	r3

08000cfa <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000cfa:	f00f bba9 	b.w	8010450 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000cfe <_ZN11TouchGFXHALD0Ev>:
 8000cfe:	b510      	push	{r4, lr}
 8000d00:	4604      	mov	r4, r0
 8000d02:	217c      	movs	r1, #124	@ 0x7c
 8000d04:	f027 ff51 	bl	8028baa <_ZdlPvj>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	bd10      	pop	{r4, pc}

08000d0c <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000d0c:	4b02      	ldr	r3, [pc, #8]	@ (8000d18 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000d12:	f00f bbd9 	b.w	80104c8 <_ZN8touchgfx3HAL10beginFrameEv>
 8000d16:	bf00      	nop
 8000d18:	20000014 	.word	0x20000014

08000d1c <_ZN11TouchGFXHAL10initializeEv>:
{
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4604      	mov	r4, r0
    GPIO::init();
 8000d20:	f7ff ff64 	bl	8000bec <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000d24:	4d08      	ldr	r5, [pc, #32]	@ (8000d48 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000d26:	4620      	mov	r0, r4
 8000d28:	f001 fb2a 	bl	8002380 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000d2c:	2300      	movs	r3, #0
    instrumentation.init();
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8000d34:	f7ff fd1c 	bl	8000770 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000d38:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000d3a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000d3c:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
        buttonController = btnCtrl;
 8000d40:	4b02      	ldr	r3, [pc, #8]	@ (8000d4c <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000d42:	6163      	str	r3, [r4, #20]
}
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop
 8000d48:	200003ac 	.word	0x200003ac
 8000d4c:	200003a8 	.word	0x200003a8

08000d50 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000d50:	6803      	ldr	r3, [r0, #0]
{
 8000d52:	4604      	mov	r4, r0
 8000d54:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5a:	4798      	blx	r3
    enableInterrupts();
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	4620      	mov	r0, r4
 8000d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000d62:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000d64:	f000 ff04 	bl	8001b70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d6e:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000d70:	2100      	movs	r1, #0
 8000d72:	2329      	movs	r3, #41	@ 0x29
 8000d74:	2215      	movs	r2, #21
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000d78:	9100      	str	r1, [sp, #0]
 8000d7a:	f008 fa04 	bl	8009186 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000d7e:	f000 fef7 	bl	8001b70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	4620      	mov	r0, r4
 8000d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d88:	4798      	blx	r3
    for (;;)
 8000d8a:	e7f8      	b.n	8000d7e <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000d8c:	20012520 	.word	0x20012520

08000d90 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000d90:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000d92:	f001 faa5 	bl	80022e0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2107      	movs	r1, #7
 8000d9a:	205a      	movs	r0, #90	@ 0x5a
 8000d9c:	f007 faf8 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2107      	movs	r1, #7
 8000da4:	2062      	movs	r0, #98	@ 0x62
}
 8000da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000daa:	f007 baf1 	b.w	8008390 <HAL_NVIC_SetPriority>
	...

08000db0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000db0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000db6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000db8:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8000dbc:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000dbe:	428c      	cmp	r4, r1
 8000dc0:	d009      	beq.n	8000dd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000dc2:	b93a      	cbnz	r2, 8000dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000dc4:	490a      	ldr	r1, [pc, #40]	@ (8000df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000dc8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dca:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000dcc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000dce:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dd0:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000dd2:	701a      	strb	r2, [r3, #0]
        }
    }
 8000dd4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d0fc      	beq.n	8000dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000ddc:	4904      	ldr	r1, [pc, #16]	@ (8000df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000dde:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000de0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000de2:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000de4:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000de6:	2200      	movs	r2, #0
 8000de8:	e7f3      	b.n	8000dd2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000dea:	bf00      	nop
 8000dec:	20027db8 	.word	0x20027db8
 8000df0:	20027db6 	.word	0x20027db6
 8000df4:	20027db4 	.word	0x20027db4

08000df8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000df8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d803      	bhi.n	8000e0a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d905      	bls.n	8000e16 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000e0c:	219e      	movs	r1, #158	@ 0x9e
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000e12:	f027 fef9 	bl	8028c08 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000e18:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000e1c:	801a      	strh	r2, [r3, #0]
    }
 8000e1e:	bd08      	pop	{r3, pc}
 8000e20:	20027db4 	.word	0x20027db4
 8000e24:	20027db6 	.word	0x20027db6
 8000e28:	08029efc 	.word	0x08029efc
 8000e2c:	08029f5f 	.word	0x08029f5f
 8000e30:	08029fa2 	.word	0x08029fa2
 8000e34:	20027dba 	.word	0x20027dba
 8000e38:	20027dbc 	.word	0x20027dbc

08000e3c <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8000e3c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8000e3e:	f001 fc0d 	bl	800265c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e4e:	f3bf 8f6f 	isb	sy
}
 8000e52:	bd08      	pop	{r3, pc}
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000e58:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000e5a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000e5e:	b118      	cbz	r0, 8000e68 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000e60:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000e62:	6803      	ldr	r3, [r0, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4718      	bx	r3
    }
 8000e68:	4770      	bx	lr
	...

08000e6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	460d      	mov	r5, r1
 8000e70:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000e74:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000e76:	b935      	cbnz	r5, 8000e86 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000e7a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000e80:	480a      	ldr	r0, [pc, #40]	@ (8000eac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000e82:	f027 fec1 	bl	8028c08 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000e86:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000e8a:	3a00      	subs	r2, #0
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000e8e:	bf18      	it	ne
 8000e90:	2201      	movne	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000e94:	6803      	ldr	r3, [r0, #0]
}
 8000e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9e:	4718      	bx	r3
 8000ea0:	200003b8 	.word	0x200003b8
 8000ea4:	08029fe7 	.word	0x08029fe7
 8000ea8:	0802a01f 	.word	0x0802a01f
 8000eac:	08029fa2 	.word	0x08029fa2
 8000eb0:	20027dbe 	.word	0x20027dbe

08000eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8000eb4:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8000eb8:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8000eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8000ebe:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8000ec0:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8000ec6:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8000ec8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000ecc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8000ece:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8000ed0:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8000ed4:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8000ed6:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8000eda:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000edc:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8000ede:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8000ee2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000ee8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8000eec:	3520      	adds	r5, #32
          buttonController(0),
 8000eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8000ef2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8000ef6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8000efa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8000efe:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000f02:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8000f06:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8000f0a:	6782      	str	r2, [r0, #120]	@ 0x78
 8000f0c:	b2ad      	uxth	r5, r5
        instance = this;
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f10:	42b5      	cmp	r5, r6
        instance = this;
 8000f12:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000f14:	4a0c      	ldr	r2, [pc, #48]	@ (8000f48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8000f16:	8015      	strh	r5, [r2, #0]
 8000f18:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8000f1a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f1c:	bf28      	it	cs
 8000f1e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f22:	bf38      	it	cc
 8000f24:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f26:	8016      	strh	r6, [r2, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000f2a:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000f2e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8000f30:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8000f32:	7013      	strb	r3, [r2, #0]
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8000f36:	6003      	str	r3, [r0, #0]
}
 8000f38:	bd70      	pop	{r4, r5, r6, pc}
 8000f3a:	bf00      	nop
 8000f3c:	01000001 	.word	0x01000001
 8000f40:	01010000 	.word	0x01010000
 8000f44:	20027dc0 	.word	0x20027dc0
 8000f48:	20027db4 	.word	0x20027db4
 8000f4c:	20027dba 	.word	0x20027dba
 8000f50:	20027db6 	.word	0x20027db6
 8000f54:	20027dbc 	.word	0x20027dbc
 8000f58:	20027db8 	.word	0x20027db8
 8000f5c:	0802a078 	.word	0x0802a078

08000f60 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8000f60:	f006 bf8a 	b.w	8007e78 <HAL_Delay>

08000f64 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000f64:	2801      	cmp	r0, #1
    {
 8000f66:	4603      	mov	r3, r0
 8000f68:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8000f6a:	d80a      	bhi.n	8000f82 <DSI_IO_WriteCmd+0x1e>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000f6c:	784b      	ldrb	r3, [r1, #1]
 8000f6e:	2215      	movs	r2, #21
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <DSI_IO_WriteCmd+0x30>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	780b      	ldrb	r3, [r1, #0]
 8000f76:	2100      	movs	r1, #0
 8000f78:	f008 f905 	bl	8009186 <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000f7c:	b003      	add	sp, #12
 8000f7e:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000f82:	9101      	str	r1, [sp, #4]
 8000f84:	5c0a      	ldrb	r2, [r1, r0]
 8000f86:	2100      	movs	r1, #0
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <DSI_IO_WriteCmd+0x30>)
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	2239      	movs	r2, #57	@ 0x39
 8000f8e:	f008 f90b 	bl	80091a8 <HAL_DSI_LongWrite>
    }
 8000f92:	e7f3      	b.n	8000f7c <DSI_IO_WriteCmd+0x18>
 8000f94:	20012520 	.word	0x20012520

08000f98 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8000f9e:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000fa2:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fa4:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8000fa6:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000fa8:	4620      	mov	r0, r4
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	2244      	movs	r2, #68	@ 0x44
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	2239      	movs	r2, #57	@ 0x39
 8000fb2:	f008 f8f9 	bl	80091a8 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2335      	movs	r3, #53	@ 0x35
 8000fba:	462a      	mov	r2, r5
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	9100      	str	r1, [sp, #0]
 8000fc0:	f008 f8e1 	bl	8009186 <HAL_DSI_ShortWrite>
    }
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd30      	pop	{r4, r5, pc}
 8000fc8:	200003a4 	.word	0x200003a4
 8000fcc:	20012520 	.word	0x20012520

08000fd0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
    LCD_ReqTear();
 8000fd4:	f7ff ffe0 	bl	8000f98 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 8000fda:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000fdc:	4620      	mov	r0, r4
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8000fea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8000ff6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8000ffa:	f042 0202 	orr.w	r2, r2, #2
 8000ffe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001008:	f043 0303 	orr.w	r3, r3, #3
}
 800100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001010:	6353      	str	r3, [r2, #52]	@ 0x34
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001012:	f001 b975 	b.w	8002300 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 8001016:	bf00      	nop
 8001018:	20012520 	.word	0x20012520
 800101c:	200122b8 	.word	0x200122b8

08001020 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <LCD_SetUpdateRegion+0x20>)
 8001022:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    {
 8001026:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	232a      	movs	r3, #42	@ 0x2a
 800102c:	2239      	movs	r2, #57	@ 0x39
 800102e:	2100      	movs	r1, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2304      	movs	r3, #4
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <LCD_SetUpdateRegion+0x24>)
 8001036:	f008 f8b7 	bl	80091a8 <HAL_DSI_LongWrite>
    }
 800103a:	b003      	add	sp, #12
 800103c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001040:	20000004 	.word	0x20000004
 8001044:	20012520 	.word	0x20012520

08001048 <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001048:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800104a:	4d15      	ldr	r5, [pc, #84]	@ (80010a0 <HAL_DSI_TearingEffectCallback+0x58>)
 800104c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fd32 	bl	8000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001054:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001056:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800105a:	3301      	adds	r3, #1
 800105c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001060:	f000 fd7a 	bl	8001b58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8001066:	6828      	ldr	r0, [r5, #0]
 8001068:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800106a:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 800106c:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a
 8001070:	b123      	cbz	r3, 800107c <HAL_DSI_TearingEffectCallback+0x34>
 8001072:	4d0d      	ldr	r5, [pc, #52]	@ (80010a8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001074:	782b      	ldrb	r3, [r5, #0]
 8001076:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800107a:	b123      	cbz	r3, 8001086 <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 800107c:	2000      	movs	r0, #0
        }
    }
 800107e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001082:	f7ff bd49 	b.w	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8001086:	f00f ff77 	bl	8010f78 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 800108c:	4630      	mov	r0, r6
            updateRegion = 0;
 800108e:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001090:	f7ff ffc6 	bl	8001020 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001094:	4620      	mov	r0, r4
 8001096:	f008 f866 	bl	8009166 <HAL_DSI_Refresh>
            displayRefreshing = true;
 800109a:	2301      	movs	r3, #1
 800109c:	702b      	strb	r3, [r5, #0]
    }
 800109e:	bd70      	pop	{r4, r5, r6, pc}
 80010a0:	20027dc0 	.word	0x20027dc0
 80010a4:	20000014 	.word	0x20000014
 80010a8:	200003c0 	.word	0x200003c0
 80010ac:	200003bc 	.word	0x200003bc

080010b0 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <HAL_DSI_EndOfRefreshCallback+0xc4>)
    {
 80010b2:	b570      	push	{r4, r5, r6, lr}
 80010b4:	4c30      	ldr	r4, [pc, #192]	@ (8001178 <HAL_DSI_EndOfRefreshCallback+0xc8>)
 80010b6:	4605      	mov	r5, r0
        updateRegion++;
 80010b8:	6818      	ldr	r0, [r3, #0]
        if (updateRegion < 4)
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010ba:	f8d4 1404 	ldr.w	r1, [r4, #1028]	@ 0x404
        updateRegion++;
 80010be:	3001      	adds	r0, #1
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010c0:	f021 0108 	bic.w	r1, r1, #8
        updateRegion++;
 80010c4:	6018      	str	r0, [r3, #0]
        if (updateRegion < 4)
 80010c6:	2803      	cmp	r0, #3
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <HAL_DSI_EndOfRefreshCallback+0xcc>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <HAL_DSI_EndOfRefreshCallback+0xd0>)
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010ce:	f8c4 1404 	str.w	r1, [r4, #1028]	@ 0x404
        if (updateRegion < 4)
 80010d2:	dc27      	bgt.n	8001124 <HAL_DSI_EndOfRefreshCallback+0x74>
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80010d4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80010d8:	fb01 2200 	mla	r2, r1, r0, r2
 80010dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

            uint16_t REAL_WIDTH = 200;
            uint16_t ADJUSTED_WIDTH = 200;
            if (updateRegion == 3)
            {
                ADJUSTED_WIDTH += 32;
 80010e0:	bf0c      	ite	eq
 80010e2:	23e8      	moveq	r3, #232	@ 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80010e4:	23c8      	movne	r3, #200	@ 0xc8
            }

            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80010e6:	4a26      	ldr	r2, [pc, #152]	@ (8001180 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 80010e8:	3302      	adds	r3, #2
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	f443 73f1 	orr.w	r3, r3, #482	@ 0x1e2
 80010f0:	6113      	str	r3, [r2, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_DSI_EndOfRefreshCallback+0xd4>)
 80010f4:	6153      	str	r3, [r2, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80010f6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80010fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 8001100:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001104:	2301      	movs	r3, #1
 8001106:	6253      	str	r3, [r2, #36]	@ 0x24
            LCD_SetUpdateRegion(updateRegion);
 8001108:	f7ff ff8a 	bl	8001020 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 800110c:	4a1a      	ldr	r2, [pc, #104]	@ (8001178 <HAL_DSI_EndOfRefreshCallback+0xc8>)
            HAL_DSI_Refresh(hdsi);
 800110e:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8001110:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 8001114:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 8001118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 800111c:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
            HAL_DSI_Refresh(hdsi);
 8001120:	f008 b821 	b.w	8009166 <HAL_DSI_Refresh>
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8001124:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            LCD_SetUpdateRegion(0);
 8001128:	2000      	movs	r0, #0
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <HAL_DSI_EndOfRefreshCallback+0xdc>)
 800112c:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 800112e:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8001132:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001134:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 8001136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 800113a:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 800113c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001140:	2201      	movs	r2, #1
 8001142:	625a      	str	r2, [r3, #36]	@ 0x24
            LCD_SetUpdateRegion(0);
 8001144:	f7ff ff6c 	bl	8001020 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 8001148:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800114c:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001156:	f7ff fcdf 	bl	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
        return instance;
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <HAL_DSI_EndOfRefreshCallback+0xe8>)
 8001162:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001164:	b120      	cbz	r0, 8001170 <HAL_DSI_EndOfRefreshCallback+0xc0>
        allowDMATransfers();
 8001166:	6803      	ldr	r3, [r0, #0]
    }
 8001168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4718      	bx	r3
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	bf00      	nop
 8001174:	200003bc 	.word	0x200003bc
 8001178:	40016c00 	.word	0x40016c00
 800117c:	200003b8 	.word	0x200003b8
 8001180:	40016800 	.word	0x40016800
 8001184:	00ca01e3 	.word	0x00ca01e3
 8001188:	06800193 	.word	0x06800193
 800118c:	00ca01e2 	.word	0x00ca01e2
 8001190:	00ca0003 	.word	0x00ca0003
 8001194:	200003c0 	.word	0x200003c0
 8001198:	20027dc0 	.word	0x20027dc0

0800119c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800119c:	4601      	mov	r1, r0
 800119e:	b508      	push	{r3, lr}
        return instance;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <IdleTaskHook+0x14>)
 80011a2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80011a4:	b101      	cbz	r1, 80011a8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80011a6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80011a8:	f00f ff00 	bl	8010fac <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80011ac:	2001      	movs	r0, #1
 80011ae:	bd08      	pop	{r3, pc}
 80011b0:	20027dc0 	.word	0x20027dc0

080011b4 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80011b6:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80011ba:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80011c4:	6003      	str	r3, [r0, #0]
        init();
 80011c6:	f7ff bb11 	b.w	80007ec <_ZN8touchgfx10KeySampler4initEv>
 80011ca:	bf00      	nop
 80011cc:	200003ac 	.word	0x200003ac
 80011d0:	200003a8 	.word	0x200003a8
 80011d4:	08029e1c 	.word	0x08029e1c
 80011d8:	08029e44 	.word	0x08029e44

080011dc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80011dc:	6940      	ldr	r0, [r0, #20]
 80011de:	4770      	bx	lr

080011e0 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80011e0:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80011e4:	4770      	bx	lr

080011e6 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80011e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80011e8:	b923      	cbnz	r3, 80011f4 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80011ea:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80011ec:	3800      	subs	r0, #0
 80011ee:	bf18      	it	ne
 80011f0:	2001      	movne	r0, #1
 80011f2:	4770      	bx	lr
 80011f4:	2001      	movs	r0, #1
}
 80011f6:	4770      	bx	lr

080011f8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80011f8:	6880      	ldr	r0, [r0, #8]
 80011fa:	4770      	bx	lr

080011fc <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80011fc:	4770      	bx	lr

080011fe <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80011fe:	3004      	adds	r0, #4
{
 8001200:	b510      	push	{r4, lr}
 8001202:	460c      	mov	r4, r1
    *data = videoInfo;
 8001204:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800120a:	bd10      	pop	{r4, pc}

0800120c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800120c:	4770      	bx	lr
	...

08001210 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001210:	b508      	push	{r3, lr}
    assert(0);
 8001212:	4a03      	ldr	r2, [pc, #12]	@ (8001220 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001214:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8001218:	4b02      	ldr	r3, [pc, #8]	@ (8001224 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800121c:	f027 fcf4 	bl	8028c08 <__assert_func>
 8001220:	0802a148 	.word	0x0802a148
 8001224:	0802cab3 	.word	0x0802cab3
 8001228:	0802a1a3 	.word	0x0802a1a3

0800122c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800122c:	b510      	push	{r4, lr}
 800122e:	4604      	mov	r4, r0
 8001230:	2144      	movs	r1, #68	@ 0x44
 8001232:	f027 fcba 	bl	8028baa <_ZdlPvj>
 8001236:	4620      	mov	r0, r4
 8001238:	bd10      	pop	{r4, pc}
	...

0800123c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800123c:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800123e:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001242:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001244:	6003      	str	r3, [r0, #0]
 8001246:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8001248:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800124c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8001250:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8001254:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001258:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
 800125c:	e9c0 550d 	strd	r5, r5, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8001260:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001264:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 8001268:	f001 fe1c 	bl	8002ea4 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 800126c:	462a      	mov	r2, r5
 800126e:	4629      	mov	r1, r5
 8001270:	2001      	movs	r0, #1
 8001272:	f00b fea7 	bl	800cfc4 <osSemaphoreNew>
 8001276:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 8001278:	6018      	str	r0, [r3, #0]
}
 800127a:	4620      	mov	r0, r4
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	bf00      	nop
 8001280:	0802a42c 	.word	0x0802a42c
 8001284:	200003d8 	.word	0x200003d8

08001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8001288:	b410      	push	{r4}
 800128a:	460c      	mov	r4, r1
 800128c:	4611      	mov	r1, r2
 800128e:	461a      	mov	r2, r3
    if (reader != 0)
 8001290:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001292:	b13b      	cbz	r3, 80012a4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001294:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001296:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001298:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800129a:	4420      	add	r0, r4
}
 800129c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80012a0:	f027 bf56 	b.w	8029150 <strncmp>
        src = (const char*)movieData + offset;
 80012a4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80012a6:	e7f8      	b.n	800129a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80012a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 80012aa:	b510      	push	{r4, lr}
    if (reader != 0)
 80012ac:	b173      	cbz	r3, 80012cc <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80012ae:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80012b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80012b2:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80012b4:	1853      	adds	r3, r2, r1
 80012b6:	5c52      	ldrb	r2, [r2, r1]
 80012b8:	7898      	ldrb	r0, [r3, #2]
 80012ba:	785c      	ldrb	r4, [r3, #1]
 80012bc:	0400      	lsls	r0, r0, #16
 80012be:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 80012c2:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 80012c4:	78db      	ldrb	r3, [r3, #3]
 80012c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80012ca:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 80012cc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80012ce:	1853      	adds	r3, r2, r1
        val |= d[0];
 80012d0:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 80012d2:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 80012d4:	7898      	ldrb	r0, [r3, #2]
 80012d6:	0400      	lsls	r0, r0, #16
 80012d8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80012dc:	e7f1      	b.n	80012c2 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

080012de <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80012de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80012e0:	b143      	cbz	r3, 80012f4 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80012e2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80012e4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80012e6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80012e8:	185a      	adds	r2, r3, r1
 80012ea:	5c58      	ldrb	r0, [r3, r1]
 80012ec:	7852      	ldrb	r2, [r2, #1]
 80012ee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80012f2:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80012f4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80012f6:	185a      	adds	r2, r3, r1
        val |= d[0];
 80012f8:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80012fa:	7853      	ldrb	r3, [r2, #1]
 80012fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8001300:	4770      	bx	lr
	...

08001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	4604      	mov	r4, r0
    if (reader != 0)
 8001308:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800130a:	460d      	mov	r5, r1
 800130c:	4616      	mov	r6, r2
    if (reader != 0)
 800130e:	b1d8      	cbz	r0, 8001348 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8001310:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001312:	4293      	cmp	r3, r2
 8001314:	d208      	bcs.n	8001328 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001316:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800131a:	21ab      	movs	r1, #171	@ 0xab
 800131c:	480d      	ldr	r0, [pc, #52]	@ (8001354 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800131e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001324:	f027 fc70 	bl	8028c08 <__assert_func>
        reader->seek(offset);
 8001328:	6803      	ldr	r3, [r0, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800132e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001330:	4632      	mov	r2, r6
 8001332:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	4798      	blx	r3
 800133a:	b910      	cbnz	r0, 8001342 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 800133c:	230d      	movs	r3, #13
 800133e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8001342:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8001344:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8001346:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001348:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800134a:	4408      	add	r0, r1
 800134c:	e7fb      	b.n	8001346 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800134e:	bf00      	nop
 8001350:	0802a20f 	.word	0x0802a20f
 8001354:	0802a1a3 	.word	0x0802a1a3
 8001358:	0802a1fc 	.word	0x0802a1fc

0800135c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 800135c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001360:	6943      	ldr	r3, [r0, #20]
{
 8001362:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001364:	b92b      	cbnz	r3, 8001372 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8001366:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8001368:	21f1      	movs	r1, #241	@ 0xf1
 800136a:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 800136c:	4822      	ldr	r0, [pc, #136]	@ (80013f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800136e:	f027 fc4b 	bl	8028c08 <__assert_func>
    readData(currentMovieOffset, 8);
 8001372:	2208      	movs	r2, #8
 8001374:	6981      	ldr	r1, [r0, #24]
 8001376:	f7ff ffc5 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800137a:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800137c:	f243 0630 	movw	r6, #12336	@ 0x3030
 8001380:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001384:	3104      	adds	r1, #4
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff ff8e 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800138c:	69a3      	ldr	r3, [r4, #24]
 800138e:	4418      	add	r0, r3
 8001390:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001392:	f100 0208 	add.w	r2, r0, #8
 8001396:	429a      	cmp	r2, r3
 8001398:	d306      	bcc.n	80013a8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800139a:	2301      	movs	r3, #1
    return false;
 800139c:	2000      	movs	r0, #0
    frameNumber = 1;
 800139e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80013a0:	6a23      	ldr	r3, [r4, #32]
 80013a2:	61a3      	str	r3, [r4, #24]
}
 80013a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 80013a8:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80013aa:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 80013ae:	2208      	movs	r2, #8
 80013b0:	4620      	mov	r0, r4
        frameNumber++;
 80013b2:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80013b4:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 80013b8:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80013ba:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80013bc:	f7ff ffa2 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80013c0:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80013c4:	4620      	mov	r0, r4
 80013c6:	4649      	mov	r1, r9
 80013c8:	f7ff ff89 	bl	80012de <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013cc:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80013d0:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff ff83 	bl	80012de <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80013d8:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80013dc:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ff62 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80013e4:	45b0      	cmp	r8, r6
 80013e6:	d1d1      	bne.n	800138c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80013e8:	42bd      	cmp	r5, r7
 80013ea:	d1cf      	bne.n	800138c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80013ec:	2001      	movs	r0, #1
 80013ee:	e7d9      	b.n	80013a4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80013f0:	0802a251 	.word	0x0802a251
 80013f4:	0802a29a 	.word	0x0802a29a
 80013f8:	0802a1a3 	.word	0x0802a1a3

080013fc <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80013fc:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80013fe:	6803      	ldr	r3, [r0, #0]
 8001400:	bf38      	it	cc
 8001402:	2101      	movcc	r1, #1
 8001404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8001406:	b570      	push	{r4, r5, r6, lr}
 8001408:	460d      	mov	r5, r1
 800140a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800140c:	4798      	blx	r3
 800140e:	42a8      	cmp	r0, r5
 8001410:	d204      	bcs.n	800141c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	4620      	mov	r0, r4
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	4798      	blx	r3
 800141a:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800141c:	1e6b      	subs	r3, r5, #1
 800141e:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8001420:	2210      	movs	r2, #16
 8001422:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001424:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001428:	f106 0108 	add.w	r1, r6, #8
 800142c:	f7ff ff6a 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001430:	f106 0110 	add.w	r1, r6, #16
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff ff37 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800143a:	6a23      	ldr	r3, [r4, #32]
 800143c:	3b04      	subs	r3, #4
 800143e:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8001440:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8001444:	bd70      	pop	{r4, r5, r6, pc}
	...

08001448 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8001448:	2100      	movs	r1, #0
    readData(0, 72);
 800144a:	2248      	movs	r2, #72	@ 0x48
{
 800144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001450:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8001452:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8001454:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8001458:	f7ff ff54 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 800145c:	69a6      	ldr	r6, [r4, #24]
 800145e:	2304      	movs	r3, #4
 8001460:	4a63      	ldr	r2, [pc, #396]	@ (80015f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8001462:	4631      	mov	r1, r6
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff ff0f 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800146a:	b148      	cbz	r0, 8001480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 800146c:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800146e:	4a61      	ldr	r2, [pc, #388]	@ (80015f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8001470:	f240 1139 	movw	r1, #313	@ 0x139
        lastError = AVI_ERROR_NOT_RIFF;
 8001474:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8001478:	4b5f      	ldr	r3, [pc, #380]	@ (80015f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800147a:	4860      	ldr	r0, [pc, #384]	@ (80015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800147c:	f027 fbc4 	bl	8028c08 <__assert_func>
    currentMovieOffset += 8;
 8001480:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8001484:	2304      	movs	r3, #4
 8001486:	4a5e      	ldr	r2, [pc, #376]	@ (8001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8001488:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800148a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800148c:	f7ff fefc 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001490:	b138      	cbz	r0, 80014a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001492:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8001494:	4a57      	ldr	r2, [pc, #348]	@ (80015f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8001496:	f240 1141 	movw	r1, #321	@ 0x141
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800149a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800149e:	4b59      	ldr	r3, [pc, #356]	@ (8001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80014a0:	e7eb      	b.n	800147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80014a2:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80014a6:	2304      	movs	r3, #4
 80014a8:	4a57      	ldr	r2, [pc, #348]	@ (8001608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80014aa:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80014ac:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80014ae:	f7ff feeb 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014b2:	4607      	mov	r7, r0
 80014b4:	b138      	cbz	r0, 80014c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014b6:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80014b8:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80014ba:	f44f 71a4 	mov.w	r1, #328	@ 0x148
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80014be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 80014c2:	4b52      	ldr	r3, [pc, #328]	@ (800160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80014c4:	e7d9      	b.n	800147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80014c6:	f106 0110 	add.w	r1, r6, #16
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff feec 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80014d0:	4605      	mov	r5, r0
 80014d2:	b920      	cbnz	r0, 80014de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80014d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001610 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80014d6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80014da:	4a46      	ldr	r2, [pc, #280]	@ (80015f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80014dc:	e7cd      	b.n	800147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80014de:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80014e2:	2304      	movs	r3, #4
 80014e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80014e6:	4620      	mov	r0, r4
 80014e8:	4641      	mov	r1, r8
 80014ea:	f7ff fecd 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d049      	beq.n	8001586 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80014f2:	2306      	movs	r3, #6
 80014f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80014f8:	2304      	movs	r3, #4
 80014fa:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80014fc:	f106 0118 	add.w	r1, r6, #24
 8001500:	4620      	mov	r0, r4
 8001502:	f7ff fec1 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001506:	2800      	cmp	r0, #0
 8001508:	d03f      	beq.n	800158a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800150a:	2307      	movs	r3, #7
 800150c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001510:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001512:	4f42      	ldr	r7, [pc, #264]	@ (800161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8001514:	220c      	movs	r2, #12
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7ff fef3 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800151e:	f105 0608 	add.w	r6, r5, #8
 8001522:	2304      	movs	r3, #4
 8001524:	463a      	mov	r2, r7
 8001526:	4620      	mov	r0, r4
 8001528:	4631      	mov	r1, r6
 800152a:	f7ff fead 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800152e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001532:	2800      	cmp	r0, #0
 8001534:	d048      	beq.n	80015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8001536:	2b00      	cmp	r3, #0
 8001538:	d148      	bne.n	80015cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800153a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800153c:	42ab      	cmp	r3, r5
 800153e:	d849      	bhi.n	80015d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8001540:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001544:	3504      	adds	r5, #4
 8001546:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8001548:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800154a:	4629      	mov	r1, r5
 800154c:	f7ff feac 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001550:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001552:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001554:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fea6 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800155c:	4406      	add	r6, r0
    readData(listOffset, 4);
 800155e:	2204      	movs	r2, #4
 8001560:	4620      	mov	r0, r4
 8001562:	4631      	mov	r1, r6
 8001564:	f7ff fece 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001568:	2304      	movs	r3, #4
 800156a:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800156c:	4631      	mov	r1, r6
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff fe8a 	bl	8001288 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001574:	2800      	cmp	r0, #0
 8001576:	d138      	bne.n	80015ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8001578:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800157a:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 800157c:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800157e:	69a3      	ldr	r3, [r4, #24]
 8001580:	6223      	str	r3, [r4, #32]
}
 8001582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8001586:	2701      	movs	r7, #1
 8001588:	e7b6      	b.n	80014f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800158a:	2f00      	cmp	r7, #0
 800158c:	d0c0      	beq.n	8001510 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800158e:	f106 0120 	add.w	r1, r6, #32
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fe88 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800159c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80015a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80015a4:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fe7e 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80015ac:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80015b0:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80015b2:	4620      	mov	r0, r4
 80015b4:	f7ff fe78 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80015b8:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80015bc:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fe72 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015c4:	6120      	str	r0, [r4, #16]
 80015c6:	e7a3      	b.n	8001510 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0b9      	beq.n	8001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80015cc:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80015d2:	e7d6      	b.n	8001582 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80015d4:	1d29      	adds	r1, r5, #4
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fe66 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80015dc:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80015de:	220c      	movs	r2, #12
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7ff fe8e 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80015e8:	e799      	b.n	800151e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80015ea:	230b      	movs	r3, #11
 80015ec:	e7ef      	b.n	80015ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80015ee:	bf00      	nop
 80015f0:	0802a2cd 	.word	0x0802a2cd
 80015f4:	0802a2eb 	.word	0x0802a2eb
 80015f8:	0802a2d2 	.word	0x0802a2d2
 80015fc:	0802a1a3 	.word	0x0802a1a3
 8001600:	0802a318 	.word	0x0802a318
 8001604:	0802a31d 	.word	0x0802a31d
 8001608:	0802a335 	.word	0x0802a335
 800160c:	0802a33a 	.word	0x0802a33a
 8001610:	0802a350 	.word	0x0802a350
 8001614:	0802a35c 	.word	0x0802a35c
 8001618:	0802a361 	.word	0x0802a361
 800161c:	0802a366 	.word	0x0802a366
 8001620:	0802a36b 	.word	0x0802a36b

08001624 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001624:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8001628:	2200      	movs	r2, #0
 800162a:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 800162c:	f7ff bf0c 	b.w	8001448 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08001630 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8001630:	b510      	push	{r4, lr}
    movieData = 0;
 8001632:	2300      	movs	r3, #0
{
 8001634:	4604      	mov	r4, r0
 8001636:	4608      	mov	r0, r1
    movieData = 0;
 8001638:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 800163a:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 800163c:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4798      	blx	r3
 8001642:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8001644:	4620      	mov	r0, r4
}
 8001646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800164a:	f7ff befd 	b.w	8001448 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08001650 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8001650:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 8001652:	4c14      	ldr	r4, [pc, #80]	@ (80016a4 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8001654:	4d14      	ldr	r5, [pc, #80]	@ (80016a8 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 8001656:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8001658:	2400      	movs	r4, #0
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <JPEG_Decode_DMA+0x5c>)
 800165c:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <JPEG_Decode_DMA+0x60>)
        JPEG_OUT_Write_BufferIndex = 0;
 8001660:	602c      	str	r4, [r5, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8001662:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <JPEG_Decode_DMA+0x64>)
 8001666:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <JPEG_Decode_DMA+0x68>)
 800166a:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <JPEG_Decode_DMA+0x6c>)
 800166e:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <JPEG_Decode_DMA+0x70>)
 8001672:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001676:	682a      	ldr	r2, [r5, #0]
 8001678:	250c      	movs	r5, #12
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800167a:	701c      	strb	r4, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 800167c:	609c      	str	r4, [r3, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800167e:	731c      	strb	r4, [r3, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001680:	615c      	str	r4, [r3, #20]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001682:	fb05 3302 	mla	r3, r5, r2, r3
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <JPEG_Decode_DMA+0x78>)
 8001688:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 800168c:	68d2      	ldr	r2, [r2, #12]
 800168e:	436a      	muls	r2, r5
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f008 ffd2 	bl	800a640 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800169c:	4620      	mov	r0, r4
 800169e:	b003      	add	sp, #12
 80016a0:	bd30      	pop	{r4, r5, pc}
 80016a2:	bf00      	nop
 80016a4:	20009a08 	.word	0x20009a08
 80016a8:	200099e0 	.word	0x200099e0
 80016ac:	200099f4 	.word	0x200099f4
 80016b0:	200099e8 	.word	0x200099e8
 80016b4:	20009a04 	.word	0x20009a04
 80016b8:	200099fc 	.word	0x200099fc
 80016bc:	20009a00 	.word	0x20009a00
 80016c0:	200003dc 	.word	0x200003dc
 80016c4:	20000018 	.word	0x20000018
 80016c8:	200003c4 	.word	0x200003c4

080016cc <HAL_JPEG_InfoReadyCallback>:
     * @param hjpeg: JPEG handle pointer
     * @param pInfo: JPEG Info Struct pointer
     * @retval None
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 80016cc:	b508      	push	{r3, lr}
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016ce:	684b      	ldr	r3, [r1, #4]
    {
 80016d0:	4608      	mov	r0, r1
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d119      	bne.n	800170a <HAL_JPEG_InfoReadyCallback+0x3e>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 80016d6:	68cb      	ldr	r3, [r1, #12]
 80016d8:	071a      	lsls	r2, r3, #28
            if ((pInfo->ImageHeight % 16) != 0)
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_JPEG_InfoReadyCallback+0x88>)
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80016dc:	bf1e      	ittt	ne
 80016de:	f023 030f 	bicne.w	r3, r3, #15
 80016e2:	3310      	addne	r3, #16
 80016e4:	60cb      	strne	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
 80016e6:	688b      	ldr	r3, [r1, #8]
 80016e8:	0719      	lsls	r1, r3, #28
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016ea:	491b      	ldr	r1, [pc, #108]	@ (8001758 <HAL_JPEG_InfoReadyCallback+0x8c>)
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80016ec:	bf1e      	ittt	ne
 80016ee:	f023 030f 	bicne.w	r3, r3, #15
 80016f2:	3310      	addne	r3, #16
 80016f4:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80016f6:	f001 fb73 	bl	8002de0 <TGFX_JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 80016fa:	b348      	cbz	r0, 8001750 <HAL_JPEG_InfoReadyCallback+0x84>
            {
                assert(status == HAL_OK);
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_JPEG_InfoReadyCallback+0x90>)
 80016fe:	f240 2131 	movw	r1, #561	@ 0x231
 8001702:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_JPEG_InfoReadyCallback+0x94>)
                }
            }
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
            if (status != HAL_OK)
            {
                assert(status == HAL_OK);
 8001704:	4817      	ldr	r0, [pc, #92]	@ (8001764 <HAL_JPEG_InfoReadyCallback+0x98>)
 8001706:	f027 fa7f 	bl	8028c08 <__assert_func>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800170a:	2b02      	cmp	r3, #2
 800170c:	d117      	bne.n	800173e <HAL_JPEG_InfoReadyCallback+0x72>
                if ((pInfo->ImageWidth % 16) != 0)
 800170e:	68cb      	ldr	r3, [r1, #12]
 8001710:	071a      	lsls	r2, r3, #28
 8001712:	d003      	beq.n	800171c <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001714:	f023 030f 	bic.w	r3, r3, #15
 8001718:	3310      	adds	r3, #16
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800171a:	60c3      	str	r3, [r0, #12]
                if ((pInfo->ImageHeight % 8) != 0)
 800171c:	6883      	ldr	r3, [r0, #8]
 800171e:	075a      	lsls	r2, r3, #29
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001720:	bf1e      	ittt	ne
 8001722:	f023 0307 	bicne.w	r3, r3, #7
 8001726:	3308      	addne	r3, #8
 8001728:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <HAL_JPEG_InfoReadyCallback+0x88>)
 800172c:	490a      	ldr	r1, [pc, #40]	@ (8001758 <HAL_JPEG_InfoReadyCallback+0x8c>)
 800172e:	f00e f8cf 	bl	800f8d0 <JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 8001732:	b168      	cbz	r0, 8001750 <HAL_JPEG_InfoReadyCallback+0x84>
                assert(status == HAL_OK);
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_JPEG_InfoReadyCallback+0x90>)
 8001736:	f240 2152 	movw	r1, #594	@ 0x252
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <HAL_JPEG_InfoReadyCallback+0x94>)
 800173c:	e7e2      	b.n	8001704 <HAL_JPEG_InfoReadyCallback+0x38>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f3      	bne.n	800172a <HAL_JPEG_InfoReadyCallback+0x5e>
                if ((pInfo->ImageWidth % 8) != 0)
 8001742:	68cb      	ldr	r3, [r1, #12]
 8001744:	0759      	lsls	r1, r3, #29
 8001746:	d0e9      	beq.n	800171c <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001748:	f023 0307 	bic.w	r3, r3, #7
 800174c:	3308      	adds	r3, #8
 800174e:	e7e4      	b.n	800171a <HAL_JPEG_InfoReadyCallback+0x4e>
            }
        }
    }
 8001750:	bd08      	pop	{r3, pc}
 8001752:	bf00      	nop
 8001754:	200099ec 	.word	0x200099ec
 8001758:	200099e4 	.word	0x200099e4
 800175c:	0802a370 	.word	0x0802a370
 8001760:	0802a381 	.word	0x0802a381
 8001764:	0802a1a3 	.word	0x0802a1a3

08001768 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8001768:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_JPEG_GetDataCallback+0x30>)
 800176a:	6813      	ldr	r3, [r2, #0]
 800176c:	440b      	add	r3, r1
    {
 800176e:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8001770:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_JPEG_GetDataCallback+0x34>)
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	4293      	cmp	r3, r2
 8001778:	d20c      	bcs.n	8001794 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800177a:	4c09      	ldr	r4, [pc, #36]	@ (80017a0 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 800177c:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800177e:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001780:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001784:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001786:	bf28      	it	cs
 8001788:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800178c:	6021      	str	r1, [r4, #0]
        }
    }
 800178e:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001790:	f008 bfbd 	b.w	800a70e <HAL_JPEG_ConfigInputBuffer>
    }
 8001794:	bc30      	pop	{r4, r5}
 8001796:	4770      	bx	lr
 8001798:	20009a04 	.word	0x20009a04
 800179c:	20009a00 	.word	0x20009a00
 80017a0:	200099fc 	.word	0x200099fc

080017a4 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80017a4:	b570      	push	{r4, r5, r6, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017a6:	4c19      	ldr	r4, [pc, #100]	@ (800180c <HAL_JPEG_DataReadyCallback+0x68>)
 80017a8:	210c      	movs	r1, #12
 80017aa:	4d19      	ldr	r5, [pc, #100]	@ (8001810 <HAL_JPEG_DataReadyCallback+0x6c>)
    {
 80017ac:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	2001      	movs	r0, #1
 80017b2:	434b      	muls	r3, r1
 80017b4:	54e8      	strb	r0, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	fb01 5303 	mla	r3, r1, r3, r5
 80017bc:	609a      	str	r2, [r3, #8]

        JPEG_OUT_Write_BufferIndex++;
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	4403      	add	r3, r0
 80017c2:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	4283      	cmp	r3, r0
 80017c8:	d901      	bls.n	80017ce <HAL_JPEG_DataReadyCallback+0x2a>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	220c      	movs	r2, #12
 80017d2:	4353      	muls	r3, r2
 80017d4:	5ceb      	ldrb	r3, [r5, r3]
 80017d6:	b133      	cbz	r3, 80017e6 <HAL_JPEG_DataReadyCallback+0x42>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80017d8:	2102      	movs	r1, #2
 80017da:	4630      	mov	r0, r6
 80017dc:	f008 ff64 	bl	800a6a8 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_JPEG_DataReadyCallback+0x70>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	210c      	movs	r1, #12
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_JPEG_DataReadyCallback+0x74>)
 80017ec:	4630      	mov	r0, r6
 80017ee:	fb01 5502 	mla	r5, r1, r2, r5
 80017f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	6869      	ldr	r1, [r5, #4]
 80017fa:	435a      	muls	r2, r3
 80017fc:	f008 ff8a 	bl	800a714 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        SEM_POST(semDecodingDone);
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_JPEG_DataReadyCallback+0x78>)
    }
 8001802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SEM_POST(semDecodingDone);
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f00b bc70 	b.w	800d0ec <osSemaphoreRelease>
 800180c:	200099e0 	.word	0x200099e0
 8001810:	20000018 	.word	0x20000018
 8001814:	200099f4 	.word	0x200099f4
 8001818:	200003c4 	.word	0x200003c4
 800181c:	200003d8 	.word	0x200003d8

08001820 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8001822:	e7fe      	b.n	8001822 <HAL_JPEG_ErrorCallback+0x2>

08001824 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8001824:	4b01      	ldr	r3, [pc, #4]	@ (800182c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
    }
 800182a:	4770      	bx	lr
 800182c:	200099f8 	.word	0x200099f8

08001830 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8001830:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t ConvertedDataCount;

    if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001834:	4d38      	ldr	r5, [pc, #224]	@ (8001918 <JPEG_OutputHandler+0xe8>)
 8001836:	260c      	movs	r6, #12
 8001838:	4c38      	ldr	r4, [pc, #224]	@ (800191c <JPEG_OutputHandler+0xec>)
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	4373      	muls	r3, r6
 800183e:	5ce3      	ldrb	r3, [r4, r3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d149      	bne.n	80018d8 <JPEG_OutputHandler+0xa8>
    {
        /* Invalidate DCache prior to YCbCr/RGB software conversion. */
        if (SCB->CCR & SCB_CCR_DC_Msk)
 8001844:	4a36      	ldr	r2, [pc, #216]	@ (8001920 <JPEG_OutputHandler+0xf0>)
 8001846:	6953      	ldr	r3, [r2, #20]
 8001848:	03db      	lsls	r3, r3, #15
 800184a:	d51e      	bpl.n	800188a <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800184c:	2300      	movs	r3, #0
 800184e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001852:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001856:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800185a:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800185e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001862:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001866:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001868:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800186c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800186e:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001872:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001874:	f8c2 7274 	str.w	r7, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8001878:	d2f9      	bcs.n	800186e <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 800187a:	3b20      	subs	r3, #32
 800187c:	f113 0f20 	cmn.w	r3, #32
 8001880:	d1f2      	bne.n	8001868 <JPEG_OutputHandler+0x38>
 8001882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001886:	f3bf 8f6f 	isb	sy
        {
            SCB_CleanInvalidateDCache();
        }

        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800188a:	270c      	movs	r7, #12
 800188c:	4e25      	ldr	r6, [pc, #148]	@ (8001924 <JPEG_OutputHandler+0xf4>)
 800188e:	6828      	ldr	r0, [r5, #0]
 8001890:	eb0d 0307 	add.w	r3, sp, r7
 8001894:	6832      	ldr	r2, [r6, #0]
 8001896:	fb07 4000 	mla	r0, r7, r0, r4
 800189a:	4923      	ldr	r1, [pc, #140]	@ (8001928 <JPEG_OutputHandler+0xf8>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <JPEG_OutputHandler+0xfc>)
 80018a0:	6809      	ldr	r1, [r1, #0]
 80018a2:	f8d3 8000 	ldr.w	r8, [r3]
 80018a6:	6883      	ldr	r3, [r0, #8]
 80018a8:	6840      	ldr	r0, [r0, #4]
 80018aa:	47c0      	blx	r8
 80018ac:	6833      	ldr	r3, [r6, #0]

        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018ae:	2100      	movs	r1, #0
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80018b0:	4403      	add	r3, r0
 80018b2:	6033      	str	r3, [r6, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018b4:	682b      	ldr	r3, [r5, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

        JPEG_OUT_Read_BufferIndex++;
 80018b6:	1c5a      	adds	r2, r3, #1
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80018b8:	437b      	muls	r3, r7
 80018ba:	2a02      	cmp	r2, #2
 80018bc:	eb04 0003 	add.w	r0, r4, r3
 80018c0:	54e1      	strb	r1, [r4, r3]
 80018c2:	bf28      	it	cs
 80018c4:	2200      	movcs	r2, #0
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
        {
            JPEG_OUT_Read_BufferIndex = 0;
        }

        if (MCU_BlockIndex == MCU_TotalNb)
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <JPEG_OutputHandler+0x100>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 80018c8:	6081      	str	r1, [r0, #8]
        if (MCU_BlockIndex == MCU_TotalNb)
 80018ca:	681b      	ldr	r3, [r3, #0]
        JPEG_OUT_Read_BufferIndex++;
 80018cc:	602a      	str	r2, [r5, #0]
        if (MCU_BlockIndex == MCU_TotalNb)
 80018ce:	6832      	ldr	r2, [r6, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10f      	bne.n	80018f4 <JPEG_OutputHandler+0xc4>
        {
            return 1;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e018      	b.n	800190a <JPEG_OutputHandler+0xda>
        }
    }
    else if ((JPEG_output_is_paused == 1) && \
 80018d8:	4916      	ldr	r1, [pc, #88]	@ (8001934 <JPEG_OutputHandler+0x104>)
 80018da:	680a      	ldr	r2, [r1, #0]
             (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 80018dc:	2a01      	cmp	r2, #1
 80018de:	d117      	bne.n	8001910 <JPEG_OutputHandler+0xe0>
 80018e0:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <JPEG_OutputHandler+0x108>)
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4372      	muls	r2, r6
    else if ((JPEG_output_is_paused == 1) && \
 80018e6:	5ca2      	ldrb	r2, [r4, r2]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	d111      	bne.n	8001910 <JPEG_OutputHandler+0xe0>
             (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
    {
        JPEG_output_is_paused = 0;
 80018ec:	600b      	str	r3, [r1, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80018ee:	2102      	movs	r1, #2
 80018f0:	f009 f948 	bl	800ab84 <HAL_JPEG_Resume>
    {
        return 2;
    }

    /* decode completed */
    if ((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <JPEG_OutputHandler+0xf4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <JPEG_OutputHandler+0x100>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d109      	bne.n	8001914 <JPEG_OutputHandler+0xe4>
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <JPEG_OutputHandler+0x10c>)
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	3800      	subs	r0, #0
 8001906:	bf18      	it	ne
 8001908:	2001      	movne	r0, #1
    {
        return 1;
    }

    return 0;
}
 800190a:	b004      	add	sp, #16
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8001910:	2002      	movs	r0, #2
 8001912:	e7fa      	b.n	800190a <JPEG_OutputHandler+0xda>
    return 0;
 8001914:	2000      	movs	r0, #0
 8001916:	e7f8      	b.n	800190a <JPEG_OutputHandler+0xda>
 8001918:	200099e8 	.word	0x200099e8
 800191c:	20000018 	.word	0x20000018
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	200003dc 	.word	0x200003dc
 8001928:	20009a08 	.word	0x20009a08
 800192c:	200099e4 	.word	0x200099e4
 8001930:	200099ec 	.word	0x200099ec
 8001934:	200099f4 	.word	0x200099f4
 8001938:	200099e0 	.word	0x200099e0
 800193c:	200099f8 	.word	0x200099f8

08001940 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8001940:	b570      	push	{r4, r5, r6, lr}
    if (length == 0)
 8001942:	2a00      	cmp	r2, #0
 8001944:	d030      	beq.n	80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8001946:	2b00      	cmp	r3, #0
 8001948:	d02e      	beq.n	80019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
 800194a:	4d18      	ldr	r5, [pc, #96]	@ (80019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 800194c:	2402      	movs	r4, #2
 800194e:	612c      	str	r4, [r5, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001950:	68c4      	ldr	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001952:	6900      	ldr	r0, [r0, #16]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001954:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001956:	f44f 66c8 	mov.w	r6, #1600	@ 0x640
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800195a:	bf18      	it	ne
 800195c:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001960:	606e      	str	r6, [r5, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001962:	bf18      	it	ne
 8001964:	3410      	addne	r4, #16
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001966:	f010 000f 	ands.w	r0, r0, #15
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800196a:	602c      	str	r4, [r5, #0]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800196c:	bf18      	it	ne
 800196e:	f1c0 0010 	rsbne	r0, r0, #16
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001972:	0924      	lsrs	r4, r4, #4
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001974:	60a8      	str	r0, [r5, #8]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001976:	60ec      	str	r4, [r5, #12]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001978:	4d0d      	ldr	r5, [pc, #52]	@ (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 800197a:	4c0e      	ldr	r4, [pc, #56]	@ (80019b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 800197e:	f7ff fe67 	bl	8001650 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001982:	4628      	mov	r0, r5
 8001984:	f7ff ff54 	bl	8001830 <JPEG_OutputHandler>
 8001988:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d105      	bne.n	800199c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5c>
                SEM_WAIT(semDecodingDone);
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8001992:	f04f 31ff 	mov.w	r1, #4294967295
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f00b fb6c 	bl	800d074 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d1ef      	bne.n	8001982 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        Jpeg_HWDecodingEnd = 0;
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	bf00      	nop
 80019ac:	200003c4 	.word	0x200003c4
 80019b0:	20012420 	.word	0x20012420
 80019b4:	200099f0 	.word	0x200099f0
 80019b8:	200003d8 	.word	0x200003d8
 80019bc:	200099f8 	.word	0x200099f8

080019c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80019c6:	6943      	ldr	r3, [r0, #20]
{
 80019c8:	b085      	sub	sp, #20
 80019ca:	4604      	mov	r4, r0
 80019cc:	460f      	mov	r7, r1
 80019ce:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80019d0:	b92b      	cbnz	r3, 80019de <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80019d4:	21bd      	movs	r1, #189	@ 0xbd
 80019d6:	4a29      	ldr	r2, [pc, #164]	@ (8001a7c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80019d8:	4829      	ldr	r0, [pc, #164]	@ (8001a80 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80019da:	f027 f915 	bl	8028c08 <__assert_func>
    readData(currentMovieOffset, 8);
 80019de:	2208      	movs	r2, #8
 80019e0:	6981      	ldr	r1, [r0, #24]
 80019e2:	f7ff fc8f 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019e6:	69a6      	ldr	r6, [r4, #24]
 80019e8:	4620      	mov	r0, r4
 80019ea:	4631      	mov	r1, r6
 80019ec:	f7ff fc77 	bl	80012de <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80019f0:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80019f2:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fc72 	bl	80012de <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019fa:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80019fc:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff fc52 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001a04:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001a08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001a0a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001a0c:	1842      	adds	r2, r0, r1
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d226      	bcs.n	8001a60 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001a12:	f243 0330 	movw	r3, #12336	@ 0x3030
 8001a16:	459b      	cmp	fp, r3
 8001a18:	d117      	bne.n	8001a4a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001a1a:	f246 3364 	movw	r3, #25444	@ 0x6364
 8001a1e:	459a      	cmp	sl, r3
 8001a20:	d113      	bne.n	8001a4a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001a22:	b190      	cbz	r0, 8001a4a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a24:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8001a26:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff fc6b 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001a30:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001a32:	462a      	mov	r2, r5
 8001a34:	4620      	mov	r0, r4
 8001a36:	f8cd 8000 	str.w	r8, [sp]
 8001a3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001a3e:	463b      	mov	r3, r7
 8001a40:	f7ff ff7e 	bl	8001940 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001a44:	6963      	ldr	r3, [r4, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001a4a:	69a3      	ldr	r3, [r4, #24]
 8001a4c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8001a4e:	b905      	cbnz	r5, 8001a52 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8001a50:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001a52:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001a54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001a56:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001a5a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001a5c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001a5e:	d109      	bne.n	8001a74 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8001a60:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8001a62:	2001      	movs	r0, #1
        frameNumber = 1;
 8001a64:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8001a66:	6a23      	ldr	r3, [r4, #32]
 8001a68:	61a3      	str	r3, [r4, #24]
}
 8001a6a:	f080 0001 	eor.w	r0, r0, #1
 8001a6e:	b005      	add	sp, #20
 8001a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8001a74:	2000      	movs	r0, #0
 8001a76:	e7f8      	b.n	8001a6a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001a78:	0802a251 	.word	0x0802a251
 8001a7c:	0802a3c9 	.word	0x0802a3c9
 8001a80:	0802a1a3 	.word	0x0802a1a3

08001a84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001a88:	6981      	ldr	r1, [r0, #24]
{
 8001a8a:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	f7ff fc39 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001a92:	69a7      	ldr	r7, [r4, #24]
 8001a94:	4620      	mov	r0, r4
 8001a96:	1d39      	adds	r1, r7, #4
 8001a98:	f7ff fc06 	bl	80012a8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001a9c:	f107 0108 	add.w	r1, r7, #8
 8001aa0:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001aa2:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fc2d 	bl	8001304 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001aaa:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8001aac:	b16e      	cbz	r6, 8001aca <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001aae:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001ab0:	4c07      	ldr	r4, [pc, #28]	@ (8001ad0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001ab2:	4d08      	ldr	r5, [pc, #32]	@ (8001ad4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001ab4:	4633      	mov	r3, r6
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001ab8:	f7ff fdca 	bl	8001650 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7ff feb7 	bl	8001830 <JPEG_OutputHandler>
 8001ac2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f8      	beq.n	8001abc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001aca:	2001      	movs	r0, #1
 8001acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200099f0 	.word	0x200099f0
 8001ad4:	20012420 	.word	0x20012420

08001ad8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ad8:	2101      	movs	r1, #1
 8001ada:	2200      	movs	r2, #0
{
 8001adc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ade:	4608      	mov	r0, r1
 8001ae0:	f00b fa70 	bl	800cfc4 <osSemaphoreNew>
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001ae6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ae8:	b928      	cbnz	r0, 8001af6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001aec:	2128      	movs	r1, #40	@ 0x28
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001af0:	480a      	ldr	r0, [pc, #40]	@ (8001b1c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001af2:	f027 f889 	bl	8028c08 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2104      	movs	r1, #4
 8001afa:	2001      	movs	r0, #1
 8001afc:	f00b fb2c 	bl	800d158 <osMessageQueueNew>
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001b02:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001b04:	b918      	cbnz	r0, 8001b0e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001b08:	212c      	movs	r1, #44	@ 0x2c
 8001b0a:	4a03      	ldr	r2, [pc, #12]	@ (8001b18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001b0c:	e7f0      	b.n	8001af0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001b0e:	bd08      	pop	{r3, pc}
 8001b10:	20009a10 	.word	0x20009a10
 8001b14:	0802a468 	.word	0x0802a468
 8001b18:	0802a4b1 	.word	0x0802a4b1
 8001b1c:	0802a4e0 	.word	0x0802a4e0
 8001b20:	20009a0c 	.word	0x20009a0c
 8001b24:	0802a52f 	.word	0x0802a52f

08001b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	f00b baa0 	b.w	800d074 <osSemaphoreAcquire>
 8001b34:	20009a10 	.word	0x20009a10

08001b38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001b38:	4b01      	ldr	r3, [pc, #4]	@ (8001b40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	f00b bad6 	b.w	800d0ec <osSemaphoreRelease>
 8001b40:	20009a10 	.word	0x20009a10

08001b44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001b44:	4b02      	ldr	r3, [pc, #8]	@ (8001b50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	f00b ba93 	b.w	800d074 <osSemaphoreAcquire>
 8001b4e:	bf00      	nop
 8001b50:	20009a10 	.word	0x20009a10

08001b54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001b54:	f7ff bff0 	b.w	8001b38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001b58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001b5c:	4903      	ldr	r1, [pc, #12]	@ (8001b6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6800      	ldr	r0, [r0, #0]
 8001b62:	f00b bb3f 	b.w	800d1e4 <osMessageQueuePut>
 8001b66:	bf00      	nop
 8001b68:	20009a0c 	.word	0x20009a0c
 8001b6c:	20000030 	.word	0x20000030

08001b70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001b70:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001b72:	2300      	movs	r3, #0
 8001b74:	4c07      	ldr	r4, [pc, #28]	@ (8001b94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001b76:	a901      	add	r1, sp, #4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6820      	ldr	r0, [r4, #0]
 8001b7c:	f00b fb74 	bl	800d268 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	2200      	movs	r2, #0
 8001b86:	a901      	add	r1, sp, #4
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	f00b fb6d 	bl	800d268 <osMessageQueueGet>
}
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	bf00      	nop
 8001b94:	20009a0c 	.word	0x20009a0c

08001b98 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	4718      	bx	r3

08001b9e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	4770      	bx	lr

08001ba2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001ba2:	6803      	ldr	r3, [r0, #0]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	4718      	bx	r3

08001ba8 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <DMA2D_XferErrorCallback>
	...

08001bac <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <_ZN8STM32DMA10initializeEv+0x3c>)
{
 8001bae:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bb2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bba:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001bc8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001bd0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <_ZN8STM32DMA10initializeEv+0x40>)
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <_ZN8STM32DMA10initializeEv+0x44>)
 8001bd6:	619a      	str	r2, [r3, #24]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <_ZN8STM32DMA10initializeEv+0x48>)
 8001bda:	61da      	str	r2, [r3, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bdc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001be2:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001be4:	b002      	add	sp, #8
 8001be6:	4770      	bx	lr
 8001be8:	40023800 	.word	0x40023800
 8001bec:	2001253c 	.word	0x2001253c
 8001bf0:	08001e85 	.word	0x08001e85
 8001bf4:	08001ba9 	.word	0x08001ba9
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001bfc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001c00:	4770      	bx	lr
	...

08001c04 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c0a:	6003      	str	r3, [r0, #0]
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <_ZN8STM32DMAD1Ev+0x1c>)
 8001c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c16:	f3bf 8f6f 	isb	sy
}
 8001c1a:	4770      	bx	lr
 8001c1c:	0802a6d0 	.word	0x0802a6d0
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001c24:	b510      	push	{r4, lr}
 8001c26:	4604      	mov	r4, r0
}
 8001c28:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001c2c:	f7ff ffea 	bl	8001c04 <_ZN8STM32DMAD1Ev>
 8001c30:	4620      	mov	r0, r4
 8001c32:	f026 ffba 	bl	8028baa <_ZdlPvj>
 8001c36:	4620      	mov	r0, r4
 8001c38:	bd10      	pop	{r4, pc}
	...

08001c3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001c3c:	b508      	push	{r3, lr}
    switch (format)
 8001c3e:	280a      	cmp	r0, #10
 8001c40:	d809      	bhi.n	8001c56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001c42:	e8df f000 	tbb	[pc, r0]
 8001c46:	1006      	.short	0x1006
 8001c48:	0808080e 	.word	0x0808080e
 8001c4c:	10101008 	.word	0x10101008
 8001c50:	10          	.byte	0x10
 8001c51:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001c52:	2002      	movs	r0, #2
}
 8001c54:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001c58:	2190      	movs	r1, #144	@ 0x90
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001c5e:	f026 ffd3 	bl	8028c08 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c62:	2000      	movs	r0, #0
 8001c64:	e7f6      	b.n	8001c54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001c66:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001c68:	e7f4      	b.n	8001c54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001c6a:	bf00      	nop
 8001c6c:	0802a571 	.word	0x0802a571
 8001c70:	0802a58c 	.word	0x0802a58c
 8001c74:	0802a5d7 	.word	0x0802a5d7

08001c78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c7c:	7f88      	ldrb	r0, [r1, #30]
 8001c7e:	f7ff ffdd 	bl	8001c3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c84:	8aa5      	ldrh	r5, [r4, #20]
 8001c86:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c88:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c8a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c8e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c92:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c94:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c96:	1b52      	subs	r2, r2, r5
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001c9a:	6825      	ldr	r5, [r4, #0]
 8001c9c:	2d08      	cmp	r5, #8
 8001c9e:	d10e      	bne.n	8001cbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ca0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ca2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ca4:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001ca8:	7f20      	ldrb	r0, [r4, #28]
 8001caa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001cae:	61da      	str	r2, [r3, #28]
        return color;
 8001cb0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001cb2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cb6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cb8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8001cba:	601a      	str	r2, [r3, #0]
    }
}
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001cbe:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001cc0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001cc2:	611a      	str	r2, [r3, #16]
 8001cc4:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001cc6:	0a0a      	lsrs	r2, r1, #8
 8001cc8:	0948      	lsrs	r0, r1, #5
 8001cca:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001cce:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8001cd2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8001cdc:	4a03      	ldr	r2, [pc, #12]	@ (8001cec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001cde:	e7ec      	b.n	8001cba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001ce0:	4002b000 	.word	0x4002b000
 8001ce4:	00010009 	.word	0x00010009
 8001ce8:	00022301 	.word	0x00022301
 8001cec:	00032301 	.word	0x00032301

08001cf0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001cf0:	b508      	push	{r3, lr}
    switch (format)
 8001cf2:	280b      	cmp	r0, #11
 8001cf4:	d80b      	bhi.n	8001d0e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001cf6:	e8df f000 	tbb	[pc, r0]
 8001cfa:	1206      	.short	0x1206
 8001cfc:	0a0a0a10 	.word	0x0a0a0a10
 8001d00:	0808080a 	.word	0x0808080a
 8001d04:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001d06:	2002      	movs	r0, #2
}
 8001d08:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001d0a:	2005      	movs	r0, #5
        break;
 8001d0c:	e7fc      	b.n	8001d08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001d10:	216f      	movs	r1, #111	@ 0x6f
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001d16:	f026 ff77 	bl	8028c08 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e7f4      	b.n	8001d08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001d1e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001d20:	e7f2      	b.n	8001d08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001d22:	bf00      	nop
 8001d24:	0802a571 	.word	0x0802a571
 8001d28:	0802a624 	.word	0x0802a624
 8001d2c:	0802a5d7 	.word	0x0802a5d7

08001d30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8001d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d34:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001d38:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d3a:	4640      	mov	r0, r8
 8001d3c:	f7ff ffd8 	bl	8001cf0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d40:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d42:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d44:	4638      	mov	r0, r7
 8001d46:	f7ff ffd3 	bl	8001cf0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001d4a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	f7ff ff75 	bl	8001c3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d52:	8aa1      	ldrh	r1, [r4, #20]
 8001d54:	8b62      	ldrh	r2, [r4, #26]
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8001d58:	1a52      	subs	r2, r2, r1
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d5c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001d5e:	8b22      	ldrh	r2, [r4, #24]
 8001d60:	1a52      	subs	r2, r2, r1
 8001d62:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d64:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001d66:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d6c:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d6e:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d70:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d72:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d74:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	2880      	cmp	r0, #128	@ 0x80
 8001d7a:	d028      	beq.n	8001dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8001d7c:	7f22      	ldrb	r2, [r4, #28]
 8001d7e:	d80f      	bhi.n	8001da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8001d80:	2820      	cmp	r0, #32
 8001d82:	d066      	beq.n	8001e52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
 8001d84:	2840      	cmp	r0, #64	@ 0x40
 8001d86:	d064      	beq.n	8001e52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
 8001d88:	2804      	cmp	r0, #4
 8001d8a:	d01a      	beq.n	8001dc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d8c:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8001d90:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d92:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d94:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8001d98:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d9a:	d060      	beq.n	8001e5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001d9c:	4a32      	ldr	r2, [pc, #200]	@ (8001e68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d9e:	e044      	b.n	8001e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8001da0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8001da4:	d004      	beq.n	8001db0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8001da6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001daa:	d1ef      	bne.n	8001d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001dac:	482f      	ldr	r0, [pc, #188]	@ (8001e6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001dae:	e000      	b.n	8001db2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001db0:	482f      	ldr	r0, [pc, #188]	@ (8001e70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001db2:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8001db6:	61da      	str	r2, [r3, #28]
 8001db8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001dba:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001dbc:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dbe:	6159      	str	r1, [r3, #20]
 8001dc0:	e032      	b.n	8001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001dc2:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8001dc6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001dca:	61da      	str	r2, [r3, #28]
 8001dcc:	e7f6      	b.n	8001dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001dce:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001dd0:	1d02      	adds	r2, r0, #4
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001dd4:	7f22      	ldrb	r2, [r4, #28]
 8001dd6:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8001dda:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8001dde:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001de0:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001de2:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001de4:	7801      	ldrb	r1, [r0, #0]
 8001de6:	b141      	cbz	r1, 8001dfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8001de8:	2901      	cmp	r1, #1
 8001dea:	d021      	beq.n	8001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8001dec:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001dee:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001df2:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001df4:	4821      	ldr	r0, [pc, #132]	@ (8001e7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8001df6:	f026 ff07 	bl	8028c08 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	8841      	ldrh	r1, [r0, #2]
 8001dfe:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001e02:	3901      	subs	r1, #1
 8001e04:	f022 0210 	bic.w	r2, r2, #16
 8001e08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 8001e0c:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e0e:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001e10:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	0692      	lsls	r2, r2, #26
 8001e1e:	d4fc      	bmi.n	8001e1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001e20:	2210      	movs	r2, #16
 8001e22:	609a      	str	r2, [r3, #8]
            if (blend)
 8001e24:	2900      	cmp	r1, #0
 8001e26:	d0b9      	beq.n	8001d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001e28:	4a15      	ldr	r2, [pc, #84]	@ (8001e80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8001e30:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	8840      	ldrh	r0, [r0, #2]
 8001e38:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8001e3c:	bf18      	it	ne
 8001e3e:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e40:	3801      	subs	r0, #1
 8001e42:	f022 0210 	bic.w	r2, r2, #16
 8001e46:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e4a:	f042 0210 	orr.w	r2, r2, #16
 8001e4e:	61da      	str	r2, [r3, #28]
                break;
 8001e50:	e7de      	b.n	8001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001e52:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8001e56:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8001e58:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001e5c:	e7b5      	b.n	8001dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8001e5e:	f242 3201 	movw	r2, #8961	@ 0x2301
 8001e62:	e7e2      	b.n	8001e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8001e64:	4002b000 	.word	0x4002b000
 8001e68:	00012301 	.word	0x00012301
 8001e6c:	00020009 	.word	0x00020009
 8001e70:	0002000a 	.word	0x0002000a
 8001e74:	0802a66e 	.word	0x0802a66e
 8001e78:	0802a688 	.word	0x0802a688
 8001e7c:	0802a5d7 	.word	0x0802a5d7
 8001e80:	00022301 	.word	0x00022301

08001e84 <DMA2D_XferCpltCallback>:
 8001e84:	4b02      	ldr	r3, [pc, #8]	@ (8001e90 <DMA2D_XferCpltCallback+0xc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001e8a:	6803      	ldr	r3, [r0, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4718      	bx	r3
 8001e90:	20027dc0 	.word	0x20027dc0

08001e94 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <_ZN8STM32DMAC1Ev+0x30>)
 8001e9a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001e9c:	2600      	movs	r6, #0
 8001e9e:	4625      	mov	r5, r4
 8001ea0:	2260      	movs	r2, #96	@ 0x60
 8001ea2:	6060      	str	r0, [r4, #4]
 8001ea4:	7226      	strb	r6, [r4, #8]
 8001ea6:	7266      	strb	r6, [r4, #9]
 8001ea8:	f845 3b20 	str.w	r3, [r5], #32
 8001eac:	4629      	mov	r1, r5
 8001eae:	f00f f9d3 	bl	8011258 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001eb2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8001eb6:	60ee      	str	r6, [r5, #12]
 8001eb8:	3524      	adds	r5, #36	@ 0x24
 8001eba:	429d      	cmp	r5, r3
 8001ebc:	d1fb      	bne.n	8001eb6 <_ZN8STM32DMAC1Ev+0x22>
}
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	bf00      	nop
 8001ec4:	0802a6d0 	.word	0x0802a6d0

08001ec8 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	07d2      	lsls	r2, r2, #31
 8001ece:	d4fc      	bmi.n	8001eca <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ed0:	2223      	movs	r2, #35	@ 0x23
 8001ed2:	609a      	str	r2, [r3, #8]
}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	4002b000 	.word	0x4002b000

08001edc <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <_ZN8touchgfx5paint9flushLineEPmi+0x28>)
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	03d2      	lsls	r2, r2, #15
 8001ee2:	d50a      	bpl.n	8001efa <_ZN8touchgfx5paint9flushLineEPmi+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	4408      	add	r0, r1
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8001eea:	2900      	cmp	r1, #0
 8001eec:	eba0 0201 	sub.w	r2, r0, r1
 8001ef0:	dc04      	bgt.n	8001efc <_ZN8touchgfx5paint9flushLineEPmi+0x20>
 8001ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ef6:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8001efa:	4770      	bx	lr
      SCB->DCCMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 8001efc:	3920      	subs	r1, #32
      SCB->DCCMVAC = op_addr;
 8001efe:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
      op_size -=           linesize;
 8001f02:	e7f2      	b.n	8001eea <_ZN8touchgfx5paint9flushLineEPmi+0xe>
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8001f08:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f0a:	4c10      	ldr	r4, [pc, #64]	@ (8001f4c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8001f0c:	6825      	ldr	r5, [r4, #0]
 8001f0e:	07ed      	lsls	r5, r5, #31
 8001f10:	d4fc      	bmi.n	8001f0c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f12:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f14:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001f16:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f18:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f1a:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f1e:	f04f 0502 	mov.w	r5, #2
 8001f22:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f24:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f26:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8001f28:	d00a      	beq.n	8001f40 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001f2a:	4909      	ldr	r1, [pc, #36]	@ (8001f50 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f2c:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001f2e:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001f32:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 8001f36:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001f38:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001f3a:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f3c:	6023      	str	r3, [r4, #0]
    }
}
 8001f3e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001f40:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8001f42:	9b03      	ldr	r3, [sp, #12]
 8001f44:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 8001f48:	e7f8      	b.n	8001f3c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 8001f4a:	bf00      	nop
 8001f4c:	4002b000 	.word	0x4002b000
 8001f50:	00010009 	.word	0x00010009
 8001f54:	00020001 	.word	0x00020001
 8001f58:	00030001 	.word	0x00030001

08001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8001f5c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001f5e:	4c0f      	ldr	r4, [pc, #60]	@ (8001f9c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x40>)
 8001f60:	6825      	ldr	r5, [r4, #0]
 8001f62:	07ed      	lsls	r5, r5, #31
 8001f64:	d4fc      	bmi.n	8001f60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f66:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f68:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8001f6a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f6c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001f72:	f04f 0502 	mov.w	r5, #2
 8001f76:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001f78:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001f7a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001f7c:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8001f7e:	d008      	beq.n	8001f92 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x36>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8001f86:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x44>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f8a:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001f8c:	6160      	str	r0, [r4, #20]
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f8e:	6023      	str	r3, [r4, #0]
    }
}
 8001f90:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001f92:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x48>)
 8001f94:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8001f96:	2301      	movs	r3, #1
 8001f98:	e7f9      	b.n	8001f8e <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x32>
 8001f9a:	bf00      	nop
 8001f9c:	4002b000 	.word	0x4002b000
 8001fa0:	00020001 	.word	0x00020001
 8001fa4:	ff020002 	.word	0xff020002

08001fa8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8001fa8:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001faa:	4c0b      	ldr	r4, [pc, #44]	@ (8001fd8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x30>)
 8001fac:	6825      	ldr	r5, [r4, #0]
 8001fae:	07ed      	lsls	r5, r5, #31
 8001fb0:	d4fc      	bmi.n	8001fac <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fb2:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001fb4:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001fb6:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fb8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001fba:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001fbe:	2502      	movs	r5, #2
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8001fc4:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001fc6:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001fc8:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8001fca:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8001fcc:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001fce:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001fd0:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8001fd2:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8001fd4:	6023      	str	r3, [r4, #0]
}
 8001fd6:	bd30      	pop	{r4, r5, pc}
 8001fd8:	4002b000 	.word	0x4002b000
 8001fdc:	00020001 	.word	0x00020001

08001fe0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001fe4:	2038      	movs	r0, #56	@ 0x38
 8001fe6:	4770      	bx	lr

08001fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001fe8:	2338      	movs	r3, #56	@ 0x38
 8001fea:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001fee:	3008      	adds	r0, #8
 8001ff0:	4770      	bx	lr

08001ff2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001ff2:	2338      	movs	r3, #56	@ 0x38
 8001ff4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001ff8:	3008      	adds	r0, #8
 8001ffa:	4770      	bx	lr

08001ffc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	4770      	bx	lr

08002000 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002000:	f243 50f4 	movw	r0, #13812	@ 0x35f4
 8002004:	4770      	bx	lr

08002006 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002006:	f243 53f4 	movw	r3, #13812	@ 0x35f4
 800200a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800200e:	3008      	adds	r0, #8
 8002010:	4770      	bx	lr

08002012 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002012:	f243 53f4 	movw	r3, #13812	@ 0x35f4
 8002016:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800201a:	3008      	adds	r0, #8
 800201c:	4770      	bx	lr

0800201e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800201e:	2001      	movs	r0, #1
 8002020:	4770      	bx	lr

08002022 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002022:	2010      	movs	r0, #16
 8002024:	4770      	bx	lr

08002026 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002026:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800202a:	3008      	adds	r0, #8
 800202c:	4770      	bx	lr

0800202e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800202e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002032:	3008      	adds	r0, #8
 8002034:	4770      	bx	lr

08002036 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen2ScreenNoTransition();
 8002036:	4608      	mov	r0, r1
 8002038:	f003 bdfc 	b.w	8005c34 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>

0800203c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 800203e:	b510      	push	{r4, lr}
 8002040:	4604      	mov	r4, r0
 8002042:	6003      	str	r3, [r0, #0]
 8002044:	f00d fcc9 	bl	800f9da <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002048:	4620      	mov	r0, r4
 800204a:	bd10      	pop	{r4, pc}
 800204c:	0802a788 	.word	0x0802a788

08002050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
 8002054:	f7ff fff2 	bl	800203c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002058:	2140      	movs	r1, #64	@ 0x40
 800205a:	4620      	mov	r0, r4
 800205c:	f026 fda5 	bl	8028baa <_ZdlPvj>
 8002060:	4620      	mov	r0, r4
 8002062:	bd10      	pop	{r4, pc}

08002064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002066:	b510      	push	{r4, lr}
 8002068:	4604      	mov	r4, r0
 800206a:	6003      	str	r3, [r0, #0]
 800206c:	f00d fcb5 	bl	800f9da <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}
 8002074:	0802a754 	.word	0x0802a754

08002078 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002078:	b510      	push	{r4, lr}
 800207a:	4604      	mov	r4, r0
 800207c:	f7ff fff2 	bl	8002064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002080:	f243 51fc 	movw	r1, #13820	@ 0x35fc
 8002084:	4620      	mov	r0, r4
 8002086:	f026 fd90 	bl	8028baa <_ZdlPvj>
 800208a:	4620      	mov	r0, r4
 800208c:	bd10      	pop	{r4, pc}
	...

08002090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002092:	b510      	push	{r4, lr}
 8002094:	4604      	mov	r4, r0
 8002096:	6003      	str	r3, [r0, #0]
 8002098:	f00d fc9f 	bl	800f9da <_ZN8touchgfx17AbstractPartitionD1Ev>
 800209c:	4620      	mov	r0, r4
 800209e:	bd10      	pop	{r4, pc}
 80020a0:	0802a720 	.word	0x0802a720

080020a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80020a4:	b510      	push	{r4, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	f7ff fff2 	bl	8002090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020ac:	2118      	movs	r1, #24
 80020ae:	4620      	mov	r0, r4
 80020b0:	f026 fd7b 	bl	8028baa <_ZdlPvj>
 80020b4:	4620      	mov	r0, r4
 80020b6:	bd10      	pop	{r4, pc}

080020b8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <_ZN12FrontendHeapD1Ev+0x28>)
 80020ba:	b510      	push	{r4, lr}
 80020bc:	4604      	mov	r4, r0
 80020be:	6003      	str	r3, [r0, #0]
 80020c0:	f500 5058 	add.w	r0, r0, #13824	@ 0x3600
 80020c4:	3028      	adds	r0, #40	@ 0x28
 80020c6:	f7ff ffb9 	bl	800203c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80020ca:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80020ce:	f7ff ffc9 	bl	8002064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020d2:	f104 0014 	add.w	r0, r4, #20
 80020d6:	f7ff ffdb 	bl	8002090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020da:	4620      	mov	r0, r4
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	0802a7bc 	.word	0x0802a7bc

080020e4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80020e4:	b508      	push	{r3, lr}
 80020e6:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <__tcf_0+0xc>)
 80020e8:	f7ff ffe6 	bl	80020b8 <_ZN12FrontendHeapD1Ev>
 80020ec:	bd08      	pop	{r3, pc}
 80020ee:	bf00      	nop
 80020f0:	2000a8c8 	.word	0x2000a8c8

080020f4 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	f7ff ffde 	bl	80020b8 <_ZN12FrontendHeapD1Ev>
 80020fc:	f243 71c8 	movw	r1, #14280	@ 0x37c8
 8002100:	4620      	mov	r0, r4
 8002102:	f026 fd52 	bl	8028baa <_ZdlPvj>
 8002106:	4620      	mov	r0, r4
 8002108:	bd10      	pop	{r4, pc}
	...

0800210c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 800210c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002110:	f003 f92c 	bl	800536c <_ZN14BitmapDatabase11getInstanceEv>
 8002114:	2400      	movs	r4, #0
 8002116:	4605      	mov	r5, r0
 8002118:	f003 f92c 	bl	8005374 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800211c:	4623      	mov	r3, r4
 800211e:	4601      	mov	r1, r0
 8002120:	4622      	mov	r2, r4
 8002122:	4628      	mov	r0, r5
 8002124:	9400      	str	r4, [sp, #0]
 8002126:	f017 fe7d 	bl	8019e24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <touchgfx_init+0xb8>)
 800212c:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800212e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002130:	4d26      	ldr	r5, [pc, #152]	@ (80021cc <touchgfx_init+0xc0>)
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f005 f9a6 	bl	8007484 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002138:	4825      	ldr	r0, [pc, #148]	@ (80021d0 <touchgfx_init+0xc4>)
 800213a:	f017 fddb 	bl	8019cf4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	f3bf 8f5b 	dmb	ish
 8002144:	07db      	lsls	r3, r3, #31
 8002146:	d436      	bmi.n	80021b6 <touchgfx_init+0xaa>
 8002148:	4628      	mov	r0, r5
 800214a:	f026 fd30 	bl	8028bae <__cxa_guard_acquire>
 800214e:	b390      	cbz	r0, 80021b6 <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002150:	4c20      	ldr	r4, [pc, #128]	@ (80021d4 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
 8002152:	4f21      	ldr	r7, [pc, #132]	@ (80021d8 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <touchgfx_init+0xd0>)
        : presenterStorage(pres),
 8002156:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 800215a:	f107 0644 	add.w	r6, r7, #68	@ 0x44
          screenStorage(scr),
 800215e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8002162:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8002164:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002166:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800216a:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800216c:	6126      	str	r6, [r4, #16]
 800216e:	f00d fc35 	bl	800f9dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002172:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <touchgfx_init+0xd4>)
 8002174:	4640      	mov	r0, r8
 8002176:	6163      	str	r3, [r4, #20]
 8002178:	f00d fc30 	bl	800f9dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <touchgfx_init+0xd8>)
 800217e:	4638      	mov	r0, r7
 8002180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002182:	f00d fc2b 	bl	800f9dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002186:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <touchgfx_init+0xdc>)
 800218c:	f503 60cd 	add.w	r0, r3, #1640	@ 0x668
 8002190:	f8c3 2628 	str.w	r2, [r3, #1576]	@ 0x628
 8002194:	f005 f9f2 	bl	800757c <_ZN5ModelC1Ev>
 8002198:	4622      	mov	r2, r4
 800219a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800219e:	4630      	mov	r0, r6
 80021a0:	f005 f9e2 	bl	8007568 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80021a4:	4630      	mov	r0, r6
 80021a6:	f003 fd45 	bl	8005c34 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        static FrontendHeap instance;
 80021aa:	4810      	ldr	r0, [pc, #64]	@ (80021ec <touchgfx_init+0xe0>)
 80021ac:	f026 fd4a 	bl	8028c44 <atexit>
 80021b0:	4628      	mov	r0, r5
 80021b2:	f026 fd08 	bl	8028bc6 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80021b6:	480e      	ldr	r0, [pc, #56]	@ (80021f0 <touchgfx_init+0xe4>)
}
 80021b8:	b002      	add	sp, #8
 80021ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80021be:	f7fe bdad 	b.w	8000d1c <_ZN11TouchGFXHAL10initializeEv>
 80021c2:	bf00      	nop
 80021c4:	20027e24 	.word	0x20027e24
 80021c8:	20009a90 	.word	0x20009a90
 80021cc:	2000a8c4 	.word	0x2000a8c4
 80021d0:	20000034 	.word	0x20000034
 80021d4:	2000a8c8 	.word	0x2000a8c8
 80021d8:	2000def0 	.word	0x2000def0
 80021dc:	0802a7bc 	.word	0x0802a7bc
 80021e0:	0802a720 	.word	0x0802a720
 80021e4:	0802a754 	.word	0x0802a754
 80021e8:	0802a788 	.word	0x0802a788
 80021ec:	080020e5 	.word	0x080020e5
 80021f0:	20009a14 	.word	0x20009a14

080021f4 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80021f4:	4770      	bx	lr
	...

080021f8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80021f8:	4801      	ldr	r0, [pc, #4]	@ (8002200 <touchgfx_taskEntry+0x8>)
 80021fa:	f7fe bda9 	b.w	8000d50 <_ZN11TouchGFXHAL9taskEntryEv>
 80021fe:	bf00      	nop
 8002200:	20009a14 	.word	0x20009a14

08002204 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002204:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8002206:	4c0c      	ldr	r4, [pc, #48]	@ (8002238 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <_GLOBAL__sub_I_touchgfx_init+0x38>)
 800220a:	4e0d      	ldr	r6, [pc, #52]	@ (8002240 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 800220c:	4620      	mov	r0, r4
static LCD16bpp display;
 800220e:	4d0d      	ldr	r5, [pc, #52]	@ (8002244 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002210:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8002212:	f7ff fe3f 	bl	8001e94 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002216:	4628      	mov	r0, r5
 8002218:	f01c ff16 	bl	801f048 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800221c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002220:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002224:	4621      	mov	r1, r4
 8002226:	4808      	ldr	r0, [pc, #32]	@ (8002248 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002228:	e9cd 3200 	strd	r3, r2, [sp]
 800222c:	4633      	mov	r3, r6
 800222e:	462a      	mov	r2, r5
 8002230:	f7fe fe40 	bl	8000eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8002234:	b002      	add	sp, #8
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	20009b20 	.word	0x20009b20
 800223c:	08029eec 	.word	0x08029eec
 8002240:	2000a8c0 	.word	0x2000a8c0
 8002244:	20009a94 	.word	0x20009a94
 8002248:	20009a14 	.word	0x20009a14

0800224c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800224c:	4801      	ldr	r0, [pc, #4]	@ (8002254 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800224e:	f7ff bcd9 	b.w	8001c04 <_ZN8STM32DMAD1Ev>
 8002252:	bf00      	nop
 8002254:	20009b20 	.word	0x20009b20

08002258 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002258:	2000      	movs	r0, #0
 800225a:	4770      	bx	lr

0800225c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800225c:	8081      	strh	r1, [r0, #4]
    }
 800225e:	4770      	bx	lr

08002260 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002260:	80c1      	strh	r1, [r0, #6]
    }
 8002262:	4770      	bx	lr

08002264 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002264:	8101      	strh	r1, [r0, #8]
    }
 8002266:	4770      	bx	lr

08002268 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002268:	8141      	strh	r1, [r0, #10]
    }
 800226a:	4770      	bx	lr

0800226c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800226c:	4770      	bx	lr

0800226e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800226e:	4770      	bx	lr

08002270 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002270:	4770      	bx	lr

08002272 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002272:	4770      	bx	lr

08002274 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002274:	4770      	bx	lr

08002276 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002276:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002278:	88c4      	ldrh	r4, [r0, #6]
 800227a:	6803      	ldr	r3, [r0, #0]
 800227c:	1b12      	subs	r2, r2, r4
 800227e:	8884      	ldrh	r4, [r0, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	1b09      	subs	r1, r1, r4
 8002284:	b212      	sxth	r2, r2
    }
 8002286:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800228a:	b209      	sxth	r1, r1
 800228c:	4718      	bx	r3

0800228e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800228e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002292:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800229e:	6010      	str	r0, [r2, #0]
    }
 80022a0:	4770      	bx	lr

080022a2 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80022a2:	2000      	movs	r0, #0
 80022a4:	4770      	bx	lr

080022a6 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80022a6:	888b      	ldrh	r3, [r1, #4]
 80022a8:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80022aa:	2001      	movs	r0, #1
 80022ac:	4770      	bx	lr

080022ae <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80022ae:	4770      	bx	lr

080022b0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80022b0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80022b4:	4770      	bx	lr

080022b6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80022b6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80022ba:	4770      	bx	lr

080022bc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80022bc:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80022be:	b510      	push	{r4, lr}
        return rect.width;
 80022c0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80022c4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80022c8:	8002      	strh	r2, [r0, #0]
 80022ca:	8042      	strh	r2, [r0, #2]
 80022cc:	8084      	strh	r4, [r0, #4]
 80022ce:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80022d0:	bd10      	pop	{r4, pc}

080022d2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80022d2:	2200      	movs	r2, #0
 80022d4:	8002      	strh	r2, [r0, #0]
 80022d6:	8042      	strh	r2, [r0, #2]
 80022d8:	8082      	strh	r2, [r0, #4]
 80022da:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80022dc:	4770      	bx	lr
	...

080022e0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	4b02      	ldr	r3, [pc, #8]	@ (80022ec <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80022e2:	2290      	movs	r2, #144	@ 0x90
 80022e4:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f0:	4b02      	ldr	r3, [pc, #8]	@ (80022fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80022f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022f6:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 8002300:	4770      	bx	lr

08002302 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8002302:	4770      	bx	lr

08002304 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002306:	6953      	ldr	r3, [r2, #20]
 8002308:	03db      	lsls	r3, r3, #15
{
 800230a:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800230c:	d51e      	bpl.n	800234c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800230e:	2300      	movs	r3, #0
 8002310:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002314:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002318:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800231c:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002320:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002324:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002328:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800232a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800232e:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002330:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002334:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002336:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800233a:	d2f9      	bcs.n	8002330 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 800233c:	3b20      	subs	r3, #32
 800233e:	f113 0f20 	cmn.w	r3, #32
 8002342:	d1f2      	bne.n	800232a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002348:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8002354:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8002356:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 800235a:	4770      	bx	lr

0800235c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800235c:	4770      	bx	lr

0800235e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 800235e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002362:	4611      	mov	r1, r2
 8002364:	6840      	ldr	r0, [r0, #4]
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4718      	bx	r3

0800236c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 800236c:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8002370:	4770      	bx	lr

08002372 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002372:	b510      	push	{r4, lr}
 8002374:	4604      	mov	r4, r0
 8002376:	2148      	movs	r1, #72	@ 0x48
 8002378:	f026 fc17 	bl	8028baa <_ZdlPvj>
 800237c:	4620      	mov	r0, r4
 800237e:	bd10      	pop	{r4, pc}

08002380 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4604      	mov	r4, r0
    HAL::initialize();
 8002384:	f00e f8b9 	bl	80104fa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800238c:	f014 f922 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 8002390:	4601      	mov	r1, r0
 8002392:	4620      	mov	r0, r4
 8002394:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	4907      	ldr	r1, [pc, #28]	@ (80023b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 800239a:	4620      	mov	r0, r4
 800239c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80023a0:	2300      	movs	r3, #0
 80023a2:	461a      	mov	r2, r3
 80023a4:	47a8      	blx	r5
        mjpegDecoders[index] = &decoder;
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80023a8:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80023aa:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80023ac:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80023b0:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80023b2:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023b6:	bd38      	pop	{r3, r4, r5, pc}
 80023b8:	c00bb800 	.word	0xc00bb800
 80023bc:	2000e090 	.word	0x2000e090
 80023c0:	2000e0d8 	.word	0x2000e0d8
 80023c4:	c0000000 	.word	0xc0000000
 80023c8:	000bb800 	.word	0x000bb800

080023cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 80023cc:	f00e b846 	b.w	801045c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080023d0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 80023d0:	f00e b9a7 	b.w	8010722 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080023d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80023d4:	b538      	push	{r3, r4, r5, lr}
 80023d6:	4604      	mov	r4, r0
 80023d8:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80023da:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	f00a fd94 	bl	800cf0c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80023e4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80023e6:	f00a fdc1 	bl	800cf6c <osMutexRelease>
        streams[handle].isActive = false;
 80023ea:	2324      	movs	r3, #36	@ 0x24
 80023ec:	fb03 4505 	mla	r5, r3, r5, r4
 80023f0:	2300      	movs	r3, #0
 80023f2:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80023f6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80023fa:	b90b      	cbnz	r3, 8002400 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80023fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023fe:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8002400:	bd38      	pop	{r3, r4, r5, pc}

08002402 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002402:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002406:	b112      	cbz	r2, 800240e <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002408:	6803      	ldr	r3, [r0, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	4718      	bx	r3
    }
 800240e:	4770      	bx	lr

08002410 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8002410:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002412:	b131      	cbz	r1, 8002422 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002414:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002416:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800241a:	4a04      	ldr	r2, [pc, #16]	@ (800242c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 800241e:	f026 fbf3 	bl	8028c08 <__assert_func>
    }
 8002422:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8002426:	bd08      	pop	{r3, pc}
 8002428:	0802a7c8 	.word	0x0802a7c8
 800242c:	0802a7dc 	.word	0x0802a7dc
 8002430:	0802a966 	.word	0x0802a966

08002434 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002434:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002436:	b131      	cbz	r1, 8002446 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800243a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800243e:	4a06      	ldr	r2, [pc, #24]	@ (8002458 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002440:	4806      	ldr	r0, [pc, #24]	@ (800245c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002442:	f026 fbe1 	bl	8028c08 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002446:	6840      	ldr	r0, [r0, #4]
 8002448:	4611      	mov	r1, r2
 800244a:	6803      	ldr	r3, [r0, #0]
    }
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4718      	bx	r3
 8002454:	0802a7c8 	.word	0x0802a7c8
 8002458:	0802a9a9 	.word	0x0802a9a9
 800245c:	0802a966 	.word	0x0802a966

08002460 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002460:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002462:	b129      	cbz	r1, 8002470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002466:	2179      	movs	r1, #121	@ 0x79
 8002468:	4a03      	ldr	r2, [pc, #12]	@ (8002478 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 800246a:	4804      	ldr	r0, [pc, #16]	@ (800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 800246c:	f026 fbcc 	bl	8028c08 <__assert_func>
    }
 8002470:	68c0      	ldr	r0, [r0, #12]
 8002472:	bd08      	pop	{r3, pc}
 8002474:	0802a7c8 	.word	0x0802a7c8
 8002478:	0802ab57 	.word	0x0802ab57
 800247c:	0802a966 	.word	0x0802a966

08002480 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002480:	b510      	push	{r4, lr}
 8002482:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002484:	b129      	cbz	r1, 8002492 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002488:	21a2      	movs	r1, #162	@ 0xa2
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 800248c:	4819      	ldr	r0, [pc, #100]	@ (80024f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800248e:	f026 fbbb 	bl	8028c08 <__assert_func>
        switch (cmd)
 8002492:	2a05      	cmp	r2, #5
 8002494:	d815      	bhi.n	80024c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002496:	e8df f002 	tbb	[pc, r2]
 800249a:	1103      	.short	0x1103
 800249c:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80024a0:	6840      	ldr	r0, [r0, #4]
 80024a2:	6803      	ldr	r3, [r0, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	4798      	blx	r3
 80024a8:	b158      	cbz	r0, 80024c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80024b0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80024b4:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80024b6:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80024ba:	e002      	b.n	80024c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80024bc:	2300      	movs	r3, #0
 80024be:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80024c2:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80024c4:	6203      	str	r3, [r0, #32]
 80024c6:	e7f5      	b.n	80024b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80024c8:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80024d0:	e7f0      	b.n	80024b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	6203      	str	r3, [r0, #32]
            break;
 80024dc:	e7f1      	b.n	80024c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80024de:	3b00      	subs	r3, #0
 80024e0:	bf18      	it	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80024e8:	e7eb      	b.n	80024c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80024ea:	bf00      	nop
 80024ec:	0802a7c8 	.word	0x0802a7c8
 80024f0:	0802ad0c 	.word	0x0802ad0c
 80024f4:	0802a966 	.word	0x0802a966

080024f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80024f8:	b510      	push	{r4, lr}
 80024fa:	460c      	mov	r4, r1
 80024fc:	4611      	mov	r1, r2
 80024fe:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002500:	b12c      	cbz	r4, 800250e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 8002504:	2190      	movs	r1, #144	@ 0x90
 8002506:	4a06      	ldr	r2, [pc, #24]	@ (8002520 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 8002508:	4806      	ldr	r0, [pc, #24]	@ (8002524 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 800250a:	f026 fb7d 	bl	8028c08 <__assert_func>
        stream.frameNumber = 0;
 800250e:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002510:	6840      	ldr	r0, [r0, #4]
 8002512:	6803      	ldr	r3, [r0, #0]
    }
 8002514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4718      	bx	r3
 800251c:	0802a7c8 	.word	0x0802a7c8
 8002520:	0802aee0 	.word	0x0802aee0
 8002524:	0802a966 	.word	0x0802a966

08002528 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002528:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800252a:	b129      	cbz	r1, 8002538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 800252e:	2182      	movs	r1, #130	@ 0x82
 8002530:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002532:	4806      	ldr	r0, [pc, #24]	@ (800254c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002534:	f026 fb68 	bl	8028c08 <__assert_func>
        stream.tickCount = 0;
 8002538:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 800253c:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002540:	bd08      	pop	{r3, pc}
 8002542:	bf00      	nop
 8002544:	0802a7c8 	.word	0x0802a7c8
 8002548:	0802b0bb 	.word	0x0802b0bb
 800254c:	0802a966 	.word	0x0802a966

08002550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002550:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002554:	b510      	push	{r4, lr}
 8002556:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002558:	b153      	cbz	r3, 8002570 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800255a:	f04f 31ff 	mov.w	r1, #4294967295
 800255e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8002560:	f00a fcd4 	bl	800cf0c <osMutexAcquire>
            firstDrawThisFrame = false;
 8002564:	2300      	movs	r3, #0
 8002566:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800256a:	2301      	movs	r3, #1
 800256c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8002570:	bd10      	pop	{r4, pc}

08002572 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002572:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002576:	b11a      	cbz	r2, 8002580 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002578:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800257c:	b102      	cbz	r2, 8002580 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800257e:	6018      	str	r0, [r3, #0]
        }
    }
 8002580:	4770      	bx	lr
	...

08002584 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002584:	b510      	push	{r4, lr}
 8002586:	4604      	mov	r4, r0
 8002588:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800258a:	b129      	cbz	r1, 8002598 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800258e:	21d0      	movs	r1, #208	@ 0xd0
 8002590:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8002592:	4814      	ldr	r0, [pc, #80]	@ (80025e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8002594:	f026 fb38 	bl	8028c08 <__assert_func>
        if (stream.isPlaying)
 8002598:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 800259c:	b133      	cbz	r3, 80025ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80025a6:	6963      	ldr	r3, [r4, #20]
 80025a8:	4413      	add	r3, r2
 80025aa:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80025ac:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80025b0:	b90b      	cbnz	r3, 80025b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80025b2:	2001      	movs	r0, #1
    }
 80025b4:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80025ba:	6803      	ldr	r3, [r0, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80025c0:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80025c2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80025c6:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d1f1      	bne.n	80025b2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80025ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ee      	bne.n	80025b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80025d6:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80025da:	e7eb      	b.n	80025b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80025dc:	0802a7c8 	.word	0x0802a7c8
 80025e0:	0802b277 	.word	0x0802b277
 80025e4:	0802a966 	.word	0x0802a966
 80025e8:	20027dc0 	.word	0x20027dc0

080025ec <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80025ec:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80025ee:	4c1a      	ldr	r4, [pc, #104]	@ (8002658 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80025f0:	4605      	mov	r5, r0
    HAL::endFrame();
 80025f2:	f00d ff75 	bl	80104e0 <_ZN8touchgfx3HAL8endFrameEv>
 80025f6:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80025fa:	b913      	cbnz	r3, 8002602 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 80025fc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8002600:	b1ab      	cbz	r3, 800262e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002602:	69e1      	ldr	r1, [r4, #28]
 8002604:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002608:	4353      	muls	r3, r2
 800260a:	6922      	ldr	r2, [r4, #16]
 800260c:	434a      	muls	r2, r1
 800260e:	4293      	cmp	r3, r2
 8002610:	d30d      	bcc.n	800262e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8002612:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8002616:	b138      	cbz	r0, 8002628 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800261e:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002620:	bf98      	it	ls
 8002622:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002626:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8002628:	2301      	movs	r3, #1
 800262a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800262e:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8002630:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8002632:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8002636:	f00a fd59 	bl	800d0ec <osSemaphoreRelease>
        if (uiHasMutex)
 800263a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800263e:	b12b      	cbz	r3, 800264c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8002640:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002642:	f00a fc93 	bl	800cf6c <osMutexRelease>
            uiHasMutex = false;
 8002646:	2300      	movs	r3, #0
 8002648:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 800264c:	6868      	ldr	r0, [r5, #4]
 800264e:	6803      	ldr	r3, [r0, #0]
}
 8002650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4718      	bx	r3
 8002658:	2000e090 	.word	0x2000e090

0800265c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265c:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800265e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002666:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800266a:	f3bf 8f6f 	isb	sy
}
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100

08002674 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002674:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002676:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800267a:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 800267c:	b9d8      	cbnz	r0, 80026b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
        streams[handle].isActive = true;
 800267e:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002680:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002682:	60d8      	str	r0, [r3, #12]
        streams[handle].isActive = true;
 8002684:	629a      	str	r2, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8002686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800268a:	6118      	str	r0, [r3, #16]
 800268c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800268e:	f505 223b 	add.w	r2, r5, #765952	@ 0xbb000
                streams[i] = Stream();
 8002692:	6158      	str	r0, [r3, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
                streams[i] = Stream();
 8002698:	6198      	str	r0, [r3, #24]
 800269a:	61d8      	str	r0, [r3, #28]
 800269c:	6218      	str	r0, [r3, #32]
 800269e:	6258      	str	r0, [r3, #36]	@ 0x24
 80026a0:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80026a4:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	@ 0x30
 80026a8:	4434      	add	r4, r6
 80026aa:	42a2      	cmp	r2, r4
 80026ac:	d90a      	bls.n	80026c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80026b0:	2152      	movs	r1, #82	@ 0x52
 80026b2:	4a0b      	ldr	r2, [pc, #44]	@ (80026e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80026b4:	e003      	b.n	80026be <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80026b6:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80026b8:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80026be:	480b      	ldr	r0, [pc, #44]	@ (80026ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80026c0:	f026 faa2 	bl	8028c08 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80026c4:	609d      	str	r5, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80026c8:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80026cc:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
        bufferWidth = width;
 80026d0:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80026d2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80026d6:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80026d8:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	0802b5cf 	.word	0x0802b5cf
 80026e0:	0802b60a 	.word	0x0802b60a
 80026e4:	0802b418 	.word	0x0802b418
 80026e8:	0802b448 	.word	0x0802b448
 80026ec:	0802a966 	.word	0x0802a966

080026f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 80026f0:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 80026f2:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80026f4:	4e12      	ldr	r6, [pc, #72]	@ (8002740 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 80026f6:	4605      	mov	r5, r0
 80026f8:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 80026fc:	6003      	str	r3, [r0, #0]
 80026fe:	6833      	ldr	r3, [r6, #0]
 8002700:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002704:	b10a      	cbz	r2, 800270a <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 8002706:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002708:	b900      	cbnz	r0, 800270c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 800270a:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	4798      	blx	r3
        return auxiliaryLCD;
 8002712:	6833      	ldr	r3, [r6, #0]
 8002714:	fab0 f480 	clz	r4, r0
 8002718:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800271a:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 800271c:	b130      	cbz	r0, 800272c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800271e:	6803      	ldr	r3, [r0, #0]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	4798      	blx	r3
 8002724:	2800      	cmp	r0, #0
 8002726:	bf08      	it	eq
 8002728:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800272c:	b92c      	cbnz	r4, 800273a <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8002730:	212c      	movs	r1, #44	@ 0x2c
 8002732:	4a06      	ldr	r2, [pc, #24]	@ (800274c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8002734:	4806      	ldr	r0, [pc, #24]	@ (8002750 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 8002736:	f026 fa67 	bl	8028c08 <__assert_func>
    }
 800273a:	4628      	mov	r0, r5
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	bf00      	nop
 8002740:	20027dc0 	.word	0x20027dc0
 8002744:	0802b8b0 	.word	0x0802b8b0
 8002748:	0802b7ad 	.word	0x0802b7ad
 800274c:	0802b80b 	.word	0x0802b80b
 8002750:	0802b844 	.word	0x0802b844

08002754 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002758:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800275a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800275c:	f44f 67c8 	mov.w	r7, #1600	@ 0x640
            SEM_WAIT(semDecode);
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002766:	f00a fc85 	bl	800d074 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800276a:	f04f 31ff 	mov.w	r1, #4294967295
 800276e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002770:	f00a fbcc 	bl	800cf0c <osMutexAcquire>
                if (stream.doDecode)
 8002774:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002778:	b343      	cbz	r3, 80027cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800277a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 800277c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8002780:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8002782:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8002786:	f1b8 0f00 	cmp.w	r8, #0
 800278a:	d023      	beq.n	80027d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	4641      	mov	r1, r8
 8002790:	4628      	mov	r0, r5
 8002792:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800279e:	9700      	str	r7, [sp, #0]
 80027a0:	4628      	mov	r0, r5
 80027a2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80027a6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027aa:	68a1      	ldr	r1, [r4, #8]
 80027ac:	47c0      	blx	r8
                    stream.frameCount++;
 80027ae:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80027b0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 80027b4:	3301      	adds	r3, #1
 80027b6:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80027b8:	b1f0      	cbz	r0, 80027f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80027ba:	682b      	ldr	r3, [r5, #0]
 80027bc:	4628      	mov	r0, r5
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	4798      	blx	r3
 80027c2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80027c4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80027c6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80027c8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80027cc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80027ce:	f00a fbcd 	bl	800cf6c <osMutexRelease>
        while (1)
 80027d2:	e7c5      	b.n	8002760 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80027d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d0de      	beq.n	8002798 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80027da:	4628      	mov	r0, r5
 80027dc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80027e0:	4798      	blx	r3
 80027e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80027e4:	4401      	add	r1, r0
 80027e6:	4628      	mov	r0, r5
 80027e8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80027ee:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80027f2:	4413      	add	r3, r2
 80027f4:	6123      	str	r3, [r4, #16]
 80027f6:	e7cf      	b.n	8002798 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
 80027f8:	2001      	movs	r0, #1
 80027fa:	e7e3      	b.n	80027c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x70>

080027fc <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80027fc:	4801      	ldr	r0, [pc, #4]	@ (8002804 <videoTaskFunc+0x8>)
{
 80027fe:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002800:	f7ff ffa8 	bl	8002754 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002804:	2000e090 	.word	0x2000e090

08002808 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8002808:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 800280a:	4814      	ldr	r0, [pc, #80]	@ (800285c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800280c:	2500      	movs	r5, #0
 800280e:	f7fe fd15 	bl	800123c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002812:	4c13      	ldr	r4, [pc, #76]	@ (8002860 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8002814:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8002816:	462a      	mov	r2, r5
 8002818:	4629      	mov	r1, r5
 800281a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800281c:	6023      	str	r3, [r4, #0]
 800281e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002822:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002824:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002826:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002828:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 800282c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002830:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002834:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8002838:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800283c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8002840:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8002844:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002848:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 800284c:	f00a fbba 	bl	800cfc4 <osSemaphoreNew>
 8002850:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8002852:	4628      	mov	r0, r5
 8002854:	f00a fb18 	bl	800ce88 <osMutexNew>
 8002858:	6460      	str	r0, [r4, #68]	@ 0x44
}
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	2000e0d8 	.word	0x2000e0d8
 8002860:	2000e090 	.word	0x2000e090
 8002864:	0802b8d0 	.word	0x0802b8d0

08002868 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                          uint8_t* pOutBuffer,
                                                          uint32_t BlockIndex,
                                                          uint32_t DataCount,
                                                          uint32_t* ConvertedDataCount)
{
 8002868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286c:	b08d      	sub	sp, #52	@ 0x34
 800286e:	9207      	str	r2, [sp, #28]
    int32_t c_red, c_blue, c_green;

    uint8_t* pOutAddr, *pOutAddr2;
    uint8_t* pChrom, *pLum;

    numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002870:	f44f 72c0 	mov.w	r2, #384	@ 0x180
    currentMCU = BlockIndex;
 8002874:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 8002878:	9001      	str	r0, [sp, #4]
 800287a:	910b      	str	r1, [sp, #44]	@ 0x2c
    numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800287c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002880:	9306      	str	r3, [sp, #24]

    while (currentMCU < (numberMCU + BlockIndex))
    {
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 16;
 8002882:	4b6c      	ldr	r3, [pc, #432]	@ (8002a34 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	9305      	str	r3, [sp, #20]
    while (currentMCU < (numberMCU + BlockIndex))
 8002888:	2300      	movs	r3, #0
 800288a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 800288e:	440a      	add	r2, r1
 8002890:	4542      	cmp	r2, r8
 8002892:	d808      	bhi.n	80028a6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
 8002894:	b11b      	cbz	r3, 800289e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x36>
 8002896:	4b67      	ldr	r3, [pc, #412]	@ (8002a34 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002898:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pInBuffer +=  YCBCR_420_BLOCK_SIZE;
    }
    return numberMCU;
}
 800289e:	9806      	ldr	r0, [sp, #24]
 80028a0:	b00d      	add	sp, #52	@ 0x34
 80028a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 16;
 80028a6:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80028aa:	9a05      	ldr	r2, [sp, #20]
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 80028ac:	9905      	ldr	r1, [sp, #20]
        currentMCU++;
 80028ae:	f108 0801 	add.w	r8, r8, #1
        for (i = 0; i < 16; i += 2)
 80028b2:	f04f 0b00 	mov.w	fp, #0
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 16;
 80028b6:	fbb3 f2f2 	udiv	r2, r3, r2
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 80028ba:	fb01 3312 	mls	r3, r1, r2, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 80028be:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fb01 3302 	mla	r3, r1, r2, r3
 80028c8:	9302      	str	r3, [sp, #8]
        pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
        pLum = pInBuffer;
 80028d0:	4699      	mov	r9, r3
            if (refline < JPEG_ConvertorParams.ScaledWidth * 480)
 80028d2:	9b02      	ldr	r3, [sp, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	@ (8002a38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f200 8099 	bhi.w	8002a0e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a6>
                pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80028dc:	f503 65c8 	add.w	r5, r3, #1600	@ 0x640
 80028e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80028e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80028e6:	441d      	add	r5, r3
                for (k = 0; k < 2; k++)
 80028e8:	f10c 0308 	add.w	r3, ip, #8
 80028ec:	930a      	str	r3, [sp, #40]	@ 0x28
                    for (j = 0; j < 8; j += 2)
 80028ee:	f10c 33ff 	add.w	r3, ip, #4294967295
 80028f2:	9f03      	ldr	r7, [sp, #12]
        for (i = 0; i < 16; i += 2)
 80028f4:	2600      	movs	r6, #0
 80028f6:	9304      	str	r3, [sp, #16]
 80028f8:	f5a5 63c8 	sub.w	r3, r5, #1600	@ 0x640
 80028fc:	9308      	str	r3, [sp, #32]
 80028fe:	9b08      	ldr	r3, [sp, #32]
                    for (j = 0; j < 8; j += 2)
 8002900:	3702      	adds	r7, #2
                        c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002902:	484e      	ldr	r0, [pc, #312]	@ (8002a3c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 8002904:	4433      	add	r3, r6
                        ycomp = (int32_t)(*(pLum + j));
 8002906:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800290a:	9309      	str	r3, [sp, #36]	@ 0x24
                        c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800290c:	9b04      	ldr	r3, [sp, #16]
 800290e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002912:	9304      	str	r3, [sp, #16]
 8002914:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 8002916:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                        c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800291a:	9b04      	ldr	r3, [sp, #16]
 800291c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002920:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
                        c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002924:	4847      	ldr	r0, [pc, #284]	@ (8002a44 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 8002926:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800292a:	4847      	ldr	r0, [pc, #284]	@ (8002a48 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 800292c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002930:	4413      	add	r3, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002932:	4a46      	ldr	r2, [pc, #280]	@ (8002a4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 8002934:	4610      	mov	r0, r2
 8002936:	4414      	add	r4, r2
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002938:	eb00 4323 	add.w	r3, r0, r3, asr #16
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800293c:	eb04 020e 	add.w	r2, r4, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002940:	4401      	add	r1, r0
                        *(__IO uint16_t*)pOutAddr =
 8002942:	9808      	ldr	r0, [sp, #32]
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002944:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002948:	eb03 020e 	add.w	r2, r3, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800294c:	448e      	add	lr, r1
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800294e:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002952:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002956:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 800295a:	0892      	lsrs	r2, r2, #2
 800295c:	0152      	lsls	r2, r2, #5
 800295e:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002962:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                        *(__IO uint16_t*)pOutAddr =
 8002966:	5382      	strh	r2, [r0, r6]
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002968:	f817 ec01 	ldrb.w	lr, [r7, #-1]
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 800296c:	9809      	ldr	r0, [sp, #36]	@ 0x24
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800296e:	eb04 020e 	add.w	r2, r4, lr
 8002972:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002976:	eb03 020e 	add.w	r2, r3, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800297a:	448e      	add	lr, r1
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800297c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002980:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002984:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 8002988:	0892      	lsrs	r2, r2, #2
 800298a:	0152      	lsls	r2, r2, #5
 800298c:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002990:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002994:	8042      	strh	r2, [r0, #2]
                        ycomp = (int32_t)(*(pLum + j + 8));
 8002996:	f897 e006 	ldrb.w	lr, [r7, #6]
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800299a:	eb04 020e 	add.w	r2, r4, lr
 800299e:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029a2:	eb03 020e 	add.w	r2, r3, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80029a6:	448e      	add	lr, r1
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029a8:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029ac:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029b0:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 80029b4:	0892      	lsrs	r2, r2, #2
 80029b6:	0152      	lsls	r2, r2, #5
 80029b8:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 80029bc:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                        *(__IO uint16_t*)pOutAddr2 =
 80029c0:	53aa      	strh	r2, [r5, r6]
                        ycomp = (int32_t)(*(pLum + j + 8 + 1));
 80029c2:	79fa      	ldrb	r2, [r7, #7]
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029c4:	4413      	add	r3, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029c6:	4414      	add	r4, r2
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80029c8:	4411      	add	r1, r2
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029ca:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029ce:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	f891 2100 	ldrb.w	r2, [r1, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029d8:	08e4      	lsrs	r4, r4, #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 80029e0:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
                        *((__IO uint16_t*)(pOutAddr2 + 2)) =
 80029e4:	19aa      	adds	r2, r5, r6
                    for (j = 0; j < 8; j += 2)
 80029e6:	3604      	adds	r6, #4
                        *((__IO uint16_t*)(pOutAddr2 + 2)) =
 80029e8:	8053      	strh	r3, [r2, #2]
                    for (j = 0; j < 8; j += 2)
 80029ea:	2e10      	cmp	r6, #16
 80029ec:	d187      	bne.n	80028fe <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
                    pLum += 64;
 80029ee:	9b03      	ldr	r3, [sp, #12]
                        pChrom++;
 80029f0:	f10c 0c04 	add.w	ip, ip, #4
                        pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 80029f4:	3510      	adds	r5, #16
                    pLum += 64;
 80029f6:	3340      	adds	r3, #64	@ 0x40
 80029f8:	9303      	str	r3, [sp, #12]
                for (k = 0; k < 2; k++)
 80029fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80029fc:	4563      	cmp	r3, ip
 80029fe:	f47f af76 	bne.w	80028ee <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
                refline += 2 * JPEG_ConvertorParams.ScaledWidth;
 8002a02:	9b02      	ldr	r3, [sp, #8]
                pLum = pLum - 128 + 16;
 8002a04:	f109 0910 	add.w	r9, r9, #16
                refline += 2 * JPEG_ConvertorParams.ScaledWidth;
 8002a08:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8002a0c:	9302      	str	r3, [sp, #8]
        for (i = 0; i < 16; i += 2)
 8002a0e:	f10b 0b02 	add.w	fp, fp, #2
 8002a12:	f1bb 0f10 	cmp.w	fp, #16
 8002a16:	d105      	bne.n	8002a24 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1bc>
        pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8002a18:	9b01      	ldr	r3, [sp, #4]
 8002a1a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	2301      	movs	r3, #1
 8002a22:	e732      	b.n	800288a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22>
            if (i == 8)
 8002a24:	f1bb 0f08 	cmp.w	fp, #8
                pLum = pInBuffer + 128;
 8002a28:	bf04      	itt	eq
 8002a2a:	9b01      	ldreq	r3, [sp, #4]
 8002a2c:	f103 0980 	addeq.w	r9, r3, #128	@ 0x80
 8002a30:	e74f      	b.n	80028d2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 8002a32:	bf00      	nop
 8002a34:	2001211c 	.word	0x2001211c
 8002a38:	000bb7ff 	.word	0x000bb7ff
 8002a3c:	20011d1c 	.word	0x20011d1c
 8002a40:	2001191c 	.word	0x2001191c
 8002a44:	2001151c 	.word	0x2001151c
 8002a48:	2001111c 	.word	0x2001111c
 8002a4c:	0802b90c 	.word	0x0802b90c

08002a50 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                     uint8_t* pOutBuffer,
                                                     uint32_t BlockIndex,
                                                     uint32_t DataCount,
                                                     uint32_t* ConvertedDataCount)
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t c_red, c_blue, c_green;

    uint8_t* pOutAddr;
    uint8_t* pChrom, *pLum;

    numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a54:	0a1b      	lsrs	r3, r3, #8
{
 8002a56:	b08d      	sub	sp, #52	@ 0x34
    numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a58:	9305      	str	r3, [sp, #20]
    currentMCU = BlockIndex;

    while (currentMCU < (numberMCU + BlockIndex))
    {
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b98 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002a5c:	9206      	str	r2, [sp, #24]
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    currentMCU = BlockIndex;
 8002a60:	f8dd e018 	ldr.w	lr, [sp, #24]
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002a64:	9202      	str	r2, [sp, #8]

        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);

        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

        pLum = pInBuffer;

        for (i = 0; i < 8; i++)
        {
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a68:	691b      	ldr	r3, [r3, #16]
{
 8002a6a:	910a      	str	r1, [sp, #40]	@ 0x28
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002a6c:	9203      	str	r2, [sp, #12]
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a6e:	9307      	str	r3, [sp, #28]
    while (currentMCU < (numberMCU + BlockIndex))
 8002a70:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002a74:	4413      	add	r3, r2
 8002a76:	4573      	cmp	r3, lr
 8002a78:	d803      	bhi.n	8002a82 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
        }

        pInBuffer +=  YCBCR_422_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002a7a:	9805      	ldr	r0, [sp, #20]
 8002a7c:	b00d      	add	sp, #52	@ 0x34
 8002a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002a82:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8002a86:	9a02      	ldr	r2, [sp, #8]
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 8002a88:	9c02      	ldr	r4, [sp, #8]
        currentMCU++;
 8002a8a:	f10e 0e01 	add.w	lr, lr, #1
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002a8e:	9903      	ldr	r1, [sp, #12]
        pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002a90:	f100 0780 	add.w	r7, r0, #128	@ 0x80
        pLum = pInBuffer;
 8002a94:	4682      	mov	sl, r0
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002a96:	fbb3 f2f2 	udiv	r2, r3, r2
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 8002a9a:	fb04 3312 	mls	r3, r4, r2, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002a9e:	4351      	muls	r1, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002aa6:	9300      	str	r3, [sp, #0]
        pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	9304      	str	r3, [sp, #16]
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002aac:	9b07      	ldr	r3, [sp, #28]
 8002aae:	9a00      	ldr	r2, [sp, #0]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d969      	bls.n	8002b88 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
                pOutAddr = pOutBuffer + refline;
 8002ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ab6:	46d0      	mov	r8, sl
 8002ab8:	eb03 0902 	add.w	r9, r3, r2
                for (k = 0; k < 2; k++)
 8002abc:	f107 0308 	add.w	r3, r7, #8
 8002ac0:	9308      	str	r3, [sp, #32]
                    for (j = 0; j < 8; j += 2)
 8002ac2:	1e7b      	subs	r3, r7, #1
        pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002ac4:	2400      	movs	r4, #0
 8002ac6:	9301      	str	r3, [sp, #4]
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002ac8:	f108 0301 	add.w	r3, r8, #1
 8002acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ace:	eb09 0384 	add.w	r3, r9, r4, lsl #2
                        ycomp = (int32_t)(*(pLum + j));
 8002ad2:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002ad6:	9309      	str	r3, [sp, #36]	@ 0x24
                        c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002ad8:	9b01      	ldr	r3, [sp, #4]
 8002ada:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b9c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002ae2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                        c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
 8002aec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002aee:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
                        c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002af2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002af4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002afa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002afe:	4411      	add	r1, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b00:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	4416      	add	r6, r2
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b06:	eb03 4121 	add.w	r1, r3, r1, asr #16
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b0a:	eb06 020c 	add.w	r2, r6, ip
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b0e:	441d      	add	r5, r3
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002b10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b12:	f892 b100 	ldrb.w	fp, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b16:	eb01 020c 	add.w	r2, r1, ip
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b1a:	44ac      	add	ip, r5
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b1c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b20:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b24:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 8002b28:	0892      	lsrs	r2, r2, #2
 8002b2a:	0152      	lsls	r2, r2, #5
 8002b2c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002b30:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
                        *(__IO uint16_t*)pOutAddr =
 8002b34:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002b38:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
                    for (j = 0; j < 8; j += 2)
 8002b3c:	3401      	adds	r4, #1
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b40:	4411      	add	r1, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b42:	4416      	add	r6, r2
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b44:	4415      	add	r5, r2
                    for (j = 0; j < 8; j += 2)
 8002b46:	2c04      	cmp	r4, #4
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b48:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b4c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b50:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8002b54:	f895 2100 	ldrb.w	r2, [r5, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b58:	ea4f 06d6 	mov.w	r6, r6, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b5c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002b60:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002b64:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002b68:	8059      	strh	r1, [r3, #2]
                    for (j = 0; j < 8; j += 2)
 8002b6a:	d1b0      	bne.n	8002ace <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
                        pChrom++;
 8002b6c:	3704      	adds	r7, #4
                for (k = 0; k < 2; k++)
 8002b6e:	9b08      	ldr	r3, [sp, #32]
                        pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002b70:	f109 0910 	add.w	r9, r9, #16
                    pLum += 64;
 8002b74:	f108 0840 	add.w	r8, r8, #64	@ 0x40
                for (k = 0; k < 2; k++)
 8002b78:	42bb      	cmp	r3, r7
 8002b7a:	d1a2      	bne.n	8002ac2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002b7c:	9a00      	ldr	r2, [sp, #0]
                pLum = pLum - 128 + 8;
 8002b7e:	f10a 0a08 	add.w	sl, sl, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	441a      	add	r2, r3
 8002b86:	9200      	str	r2, [sp, #0]
        for (i = 0; i < 8; i++)
 8002b88:	9b04      	ldr	r3, [sp, #16]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	d18d      	bne.n	8002aac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
        pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002b90:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8002b94:	e76c      	b.n	8002a70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002b96:	bf00      	nop
 8002b98:	2001211c 	.word	0x2001211c
 8002b9c:	2001191c 	.word	0x2001191c
 8002ba0:	20011d1c 	.word	0x20011d1c
 8002ba4:	2001151c 	.word	0x2001151c
 8002ba8:	2001111c 	.word	0x2001111c
 8002bac:	0802b90c 	.word	0x0802b90c

08002bb0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                     uint8_t* pOutBuffer,
                                                     uint32_t BlockIndex,
                                                     uint32_t DataCount,
                                                     uint32_t* ConvertedDataCount)
{
 8002bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb4:	4692      	mov	sl, r2
    int32_t c_red, c_blue, c_green;

    uint8_t* pOutAddr;
    uint8_t* pChrom, *pLum;

    numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002bb6:	22c0      	movs	r2, #192	@ 0xc0
{
 8002bb8:	b089      	sub	sp, #36	@ 0x24
    numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bbe:	9304      	str	r3, [sp, #16]
    currentMCU = BlockIndex;

    while (currentMCU < (numberMCU + BlockIndex))
    {

        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002bc0:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{
 8002bc2:	9107      	str	r1, [sp, #28]
    currentMCU = BlockIndex;
 8002bc4:	4651      	mov	r1, sl
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002bc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc8:	9200      	str	r2, [sp, #0]

        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);

        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

        pLum = pInBuffer;

        for (i = 0; i < 8; i++)
        {
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002bcc:	691b      	ldr	r3, [r3, #16]
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002bce:	9201      	str	r2, [sp, #4]
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002bd0:	9305      	str	r3, [sp, #20]
    while (currentMCU < (numberMCU + BlockIndex))
 8002bd2:	9b04      	ldr	r3, [sp, #16]
 8002bd4:	4453      	add	r3, sl
 8002bd6:	428b      	cmp	r3, r1
 8002bd8:	d803      	bhi.n	8002be2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x32>
        }

        pInBuffer +=  YCBCR_444_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002bda:	9804      	ldr	r0, [sp, #16]
 8002bdc:	b009      	add	sp, #36	@ 0x24
 8002bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002be2:	00cb      	lsls	r3, r1, #3
 8002be4:	9a00      	ldr	r2, [sp, #0]
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 8002be6:	9d00      	ldr	r5, [sp, #0]
        currentMCU++;
 8002be8:	3101      	adds	r1, #1
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002bea:	9c01      	ldr	r4, [sp, #4]
        pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002bec:	f100 0640 	add.w	r6, r0, #64	@ 0x40
        pLum = pInBuffer;
 8002bf0:	4684      	mov	ip, r0
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002bf2:	fbb3 f2f2 	udiv	r2, r3, r2
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 8002bf6:	fb05 3312 	mls	r3, r5, r2, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002bfa:	4354      	muls	r4, r2
        pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002bfc:	2208      	movs	r2, #8
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002bfe:	005b      	lsls	r3, r3, #1
        pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002c00:	9203      	str	r2, [sp, #12]
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c06:	9a05      	ldr	r2, [sp, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d93c      	bls.n	8002c86 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd6>
                pOutAddr = pOutBuffer + refline;
 8002c0c:	9a07      	ldr	r2, [sp, #28]
 8002c0e:	f106 3eff 	add.w	lr, r6, #4294967295
 8002c12:	18d4      	adds	r4, r2, r3
                for (j = 0; j < 8; j++)
 8002c14:	f10c 32ff 	add.w	r2, ip, #4294967295
 8002c18:	9202      	str	r2, [sp, #8]
 8002c1a:	f104 0210 	add.w	r2, r4, #16
 8002c1e:	9206      	str	r2, [sp, #24]
                    ycomp = (int32_t)(*(pLum + j));
 8002c20:	9f02      	ldr	r7, [sp, #8]
                    c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002c22:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
                    ycomp = (int32_t)(*(pLum + j));
 8002c26:	f817 2f01 	ldrb.w	r2, [r7, #1]!
                    c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002c2a:	f89e 9040 	ldrb.w	r9, [lr, #64]	@ 0x40
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c2e:	4d1a      	ldr	r5, [pc, #104]	@ (8002c98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
                    ycomp = (int32_t)(*(pLum + j));
 8002c30:	9702      	str	r7, [sp, #8]
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c32:	4f1a      	ldr	r7, [pc, #104]	@ (8002c9c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 8002c34:	442a      	add	r2, r5
                        ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c36:	4d1a      	ldr	r5, [pc, #104]	@ (8002ca0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c38:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002c3c:	4417      	add	r7, r2
 8002c3e:	f897 b100 	ldrb.w	fp, [r7, #256]	@ 0x100
                        ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c42:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c46:	4d17      	ldr	r5, [pc, #92]	@ (8002ca4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c48:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
                        ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c4c:	4417      	add	r7, r2
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c4e:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 8002c52:	4d15      	ldr	r5, [pc, #84]	@ (8002ca8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
                        ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c54:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c58:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
                        ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c5c:	08ff      	lsrs	r7, r7, #3
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c5e:	44c1      	add	r9, r8
                        ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c60:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002c64:	eb02 4229 	add.w	r2, r2, r9, asr #16
 8002c68:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
 8002c6c:	0892      	lsrs	r2, r2, #2
 8002c6e:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
                for (j = 0; j < 8; j++)
 8002c72:	9a06      	ldr	r2, [sp, #24]
                    *(__IO uint16_t*)pOutAddr =
 8002c74:	f824 7b02 	strh.w	r7, [r4], #2
                for (j = 0; j < 8; j++)
 8002c78:	4294      	cmp	r4, r2
 8002c7a:	d1d1      	bne.n	8002c20 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002c7c:	9a01      	ldr	r2, [sp, #4]
                    pChrom++;
 8002c7e:	3608      	adds	r6, #8
                pLum += 8;
 8002c80:	f10c 0c08 	add.w	ip, ip, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002c84:	4413      	add	r3, r2
        for (i = 0; i < 8; i++)
 8002c86:	9a03      	ldr	r2, [sp, #12]
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	9203      	str	r2, [sp, #12]
 8002c8c:	d1bb      	bne.n	8002c06 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>
        pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002c8e:	30c0      	adds	r0, #192	@ 0xc0
 8002c90:	e79f      	b.n	8002bd2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002c92:	bf00      	nop
 8002c94:	2001211c 	.word	0x2001211c
 8002c98:	0802b90c 	.word	0x0802b90c
 8002c9c:	20011d1c 	.word	0x20011d1c
 8002ca0:	2001191c 	.word	0x2001191c
 8002ca4:	2001151c 	.word	0x2001151c
 8002ca8:	2001111c 	.word	0x2001111c

08002cac <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                 uint8_t* pOutBuffer,
                                                 uint32_t BlockIndex,
                                                 uint32_t DataCount,
                                                 uint32_t* ConvertedDataCount)
{
 8002cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	4604      	mov	r4, r0
    uint32_t refline;

    uint32_t i, j, ySample;
    uint8_t* pOutAddr,  *pLum;

    numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002cb4:	0998      	lsrs	r0, r3, #6
{
 8002cb6:	9102      	str	r1, [sp, #8]
    currentMCU = BlockIndex;

    while (currentMCU < (numberMCU + BlockIndex))
 8002cb8:	eb02 1393 	add.w	r3, r2, r3, lsr #6
    {
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002cbc:	491a      	ldr	r1, [pc, #104]	@ (8002d28 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
    while (currentMCU < (numberMCU + BlockIndex))
 8002cbe:	9303      	str	r3, [sp, #12]

        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);

        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002cc0:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	@ 0x24
        pLum = pInBuffer;

        for (i = 0; i < 8; i++)
        {
            pOutAddr = pOutBuffer + refline;
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cc4:	6909      	ldr	r1, [r1, #16]
 8002cc6:	9101      	str	r1, [sp, #4]
    while (currentMCU < (numberMCU + BlockIndex))
 8002cc8:	9b03      	ldr	r3, [sp, #12]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d802      	bhi.n	8002cd4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
        }

        pInBuffer +=  GRAY_444_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002cce:	b005      	add	sp, #20
 8002cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002cd4:	00d3      	lsls	r3, r2, #3
        pLum = pInBuffer;
 8002cd6:	46a4      	mov	ip, r4
        currentMCU++;
 8002cd8:	3201      	adds	r2, #1
 8002cda:	2708      	movs	r7, #8
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002cdc:	fbb3 f1f8 	udiv	r1, r3, r8
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 8002ce0:	fb08 3311 	mls	r3, r8, r1, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002ce4:	fb09 f501 	mul.w	r5, r9, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cee:	9901      	ldr	r1, [sp, #4]
 8002cf0:	4299      	cmp	r1, r3
 8002cf2:	d915      	bls.n	8002d20 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
            pOutAddr = pOutBuffer + refline;
 8002cf4:	9902      	ldr	r1, [sp, #8]
 8002cf6:	46e2      	mov	sl, ip
 8002cf8:	4419      	add	r1, r3
                for (j = 0; j < 8; j++)
 8002cfa:	f101 0b10 	add.w	fp, r1, #16
                    ySample = (uint32_t)(*pLum);
 8002cfe:	f81a 6b01 	ldrb.w	r6, [sl], #1
                    *(__IO uint16_t*)pOutAddr = ((ySample >> 3) << 11) | ((ySample >> 2) << 5) | (ySample >> 3);
 8002d02:	08f5      	lsrs	r5, r6, #3
 8002d04:	08b6      	lsrs	r6, r6, #2
 8002d06:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002d0a:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 8002d0e:	ea45 050e 	orr.w	r5, r5, lr
 8002d12:	f821 5b02 	strh.w	r5, [r1], #2
                for (j = 0; j < 8; j++)
 8002d16:	4559      	cmp	r1, fp
 8002d18:	d1f1      	bne.n	8002cfe <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
                    pLum++;
 8002d1a:	f10c 0c08 	add.w	ip, ip, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002d1e:	444b      	add	r3, r9
        for (i = 0; i < 8; i++)
 8002d20:	3f01      	subs	r7, #1
 8002d22:	d1e4      	bne.n	8002cee <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
        pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002d24:	3440      	adds	r4, #64	@ 0x40
 8002d26:	e7cf      	b.n	8002cc8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002d28:	2001211c 	.word	0x2001211c

08002d2c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                 uint8_t* pOutBuffer,
                                                 uint32_t BlockIndex,
                                                 uint32_t DataCount,
                                                 uint32_t* ConvertedDataCount)
{
 8002d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d30:	b085      	sub	sp, #20
 8002d32:	4605      	mov	r5, r0
                pOutAddr = pOutBuffer + refline;

                for (j = 0; j < 8; j++)
                {
                    color_k = (int32_t)(*(pChrom + 192));
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 8002d34:	27ff      	movs	r7, #255	@ 0xff
    numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002d36:	0a18      	lsrs	r0, r3, #8
{
 8002d38:	9102      	str	r1, [sp, #8]
    while (currentMCU < (numberMCU + BlockIndex))
 8002d3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002d3e:	4927      	ldr	r1, [pc, #156]	@ (8002ddc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
    while (currentMCU < (numberMCU + BlockIndex))
 8002d40:	9303      	str	r3, [sp, #12]
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002d42:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	@ 0x24
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d46:	6909      	ldr	r1, [r1, #16]
 8002d48:	9100      	str	r1, [sp, #0]
    while (currentMCU < (numberMCU + BlockIndex))
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d802      	bhi.n	8002d56 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
        }

        pInBuffer +=  CMYK_444_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002d50:	b005      	add	sp, #20
 8002d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002d56:	00d1      	lsls	r1, r2, #3
        pChrom = pInBuffer;
 8002d58:	46ae      	mov	lr, r5
        currentMCU++;
 8002d5a:	3201      	adds	r2, #1
 8002d5c:	f04f 0c08 	mov.w	ip, #8
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002d60:	fbb1 f3f9 	udiv	r3, r1, r9
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 8002d64:	fb09 1113 	mls	r1, r9, r3, r1
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002d68:	fb0a f403 	mul.w	r4, sl, r3
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d72:	9b00      	ldr	r3, [sp, #0]
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d92b      	bls.n	8002dd0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
                pOutAddr = pOutBuffer + refline;
 8002d78:	9b02      	ldr	r3, [sp, #8]
 8002d7a:	4674      	mov	r4, lr
 8002d7c:	185e      	adds	r6, r3, r1
                for (j = 0; j < 8; j++)
 8002d7e:	f106 0310 	add.w	r3, r6, #16
 8002d82:	9301      	str	r3, [sp, #4]
                    color_k = (int32_t)(*(pChrom + 192));
 8002d84:	f894 80c0 	ldrb.w	r8, [r4, #192]	@ 0xc0
                    pChrom++;
 8002d88:	3401      	adds	r4, #1
                    c_green = (color_k * (int32_t)(*(pChrom + 64))) / 255;
 8002d8a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 8002d8e:	f814 bc01 	ldrb.w	fp, [r4, #-1]
                    c_green = (color_k * (int32_t)(*(pChrom + 64))) / 255;
 8002d92:	fb13 f308 	smulbb	r3, r3, r8
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 8002d96:	fb1b fb08 	smulbb	fp, fp, r8
                    c_green = (color_k * (int32_t)(*(pChrom + 64))) / 255;
 8002d9a:	fbb3 f3f7 	udiv	r3, r3, r7
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 8002d9e:	fbbb fbf7 	udiv	fp, fp, r7
                        ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002da2:	109b      	asrs	r3, r3, #2
                        ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002da4:	ea4f 0beb 	mov.w	fp, fp, asr #3
                        ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002da8:	015b      	lsls	r3, r3, #5
                        ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002daa:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                    c_blue = (color_k * (int32_t)(*(pChrom + 128))) / 255;
 8002dae:	f894 b07f 	ldrb.w	fp, [r4, #127]	@ 0x7f
 8002db2:	fb1b fb08 	smulbb	fp, fp, r8
 8002db6:	fbbb fbf7 	udiv	fp, fp, r7
                        ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002dba:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 8002dbe:	b29b      	uxth	r3, r3
                    *(__IO uint16_t*)pOutAddr =
 8002dc0:	f826 3b02 	strh.w	r3, [r6], #2
                for (j = 0; j < 8; j++)
 8002dc4:	9b01      	ldr	r3, [sp, #4]
 8002dc6:	429e      	cmp	r6, r3
 8002dc8:	d1dc      	bne.n	8002d84 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
                    pChrom++;
 8002dca:	f10e 0e08 	add.w	lr, lr, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002dce:	4451      	add	r1, sl
        for (i = 0; i < 8; i++)
 8002dd0:	f1bc 0c01 	subs.w	ip, ip, #1
 8002dd4:	d1cd      	bne.n	8002d72 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
        pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002dd6:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8002dda:	e7b6      	b.n	8002d4a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002ddc:	2001211c 	.word	0x2001211c

08002de0 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef* pJpegInfo, JPEG_YCbCrToRGB_Convert_Function* pFunction, uint32_t* ImageNbMCUs)
{
 8002de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t hMCU, vMCU;

    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
    JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002de2:	68c3      	ldr	r3, [r0, #12]
    JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002de4:	6886      	ldr	r6, [r0, #8]
    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002de6:	6805      	ldr	r5, [r0, #0]
    JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002de8:	fb06 f703 	mul.w	r7, r6, r3
    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002dec:	4c27      	ldr	r4, [pc, #156]	@ (8002e8c <TGFX_JPEG_GetDecodeColorConvertFunc+0xac>)

    JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002dee:	6840      	ldr	r0, [r0, #4]
    if (JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002df0:	2d10      	cmp	r5, #16
    JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002df2:	ea4f 0747 	mov.w	r7, r7, lsl #1
    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002df6:	6025      	str	r5, [r4, #0]
    JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002df8:	60a3      	str	r3, [r4, #8]
    JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002dfa:	60e6      	str	r6, [r4, #12]
    JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002dfc:	6127      	str	r7, [r4, #16]
    JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002dfe:	6060      	str	r0, [r4, #4]
    if (JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002e00:	d13a      	bne.n	8002e78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    {
        if (JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002e02:	2801      	cmp	r0, #1
 8002e04:	d120      	bne.n	8002e48 <TGFX_JPEG_GetDecodeColorConvertFunc+0x68>
        {
            *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;

            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

            if (JPEG_ConvertorParams.LineOffset != 0)
 8002e06:	f013 000f 	ands.w	r0, r3, #15
            *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002e0a:	4f21      	ldr	r7, [pc, #132]	@ (8002e90 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)
            {
                JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002e0c:	bf18      	it	ne
 8002e0e:	f1c0 0010 	rsbne	r0, r0, #16
            *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002e12:	600f      	str	r7, [r1, #0]
            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8002e14:	6160      	str	r0, [r4, #20]
            }
            JPEG_ConvertorParams.H_factor = 16;
            JPEG_ConvertorParams.V_factor  = 16;
 8002e16:	2010      	movs	r0, #16
    else
    {
        return HAL_ERROR; /* Color space Not supported*/
    }

    JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002e18:	6961      	ldr	r1, [r4, #20]
 8002e1a:	4419      	add	r1, r3
 8002e1c:	6261      	str	r1, [r4, #36]	@ 0x24
    JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002e1e:	0059      	lsls	r1, r3, #1
 8002e20:	62a1      	str	r1, [r4, #40]	@ 0x28

    hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002e22:	fbb3 f1f5 	udiv	r1, r3, r5
    if ((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002e26:	fb05 3311 	mls	r3, r5, r1, r3
            JPEG_ConvertorParams.V_factor  = 8;
 8002e2a:	e9c4 5007 	strd	r5, r0, [r4, #28]
    if ((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002e2e:	b103      	cbz	r3, 8002e32 <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
    {
        hMCU++; /*+1 for horizenatl incomplete MCU */
 8002e30:	3101      	adds	r1, #1
    }

    vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002e32:	fbb6 f3f0 	udiv	r3, r6, r0
    if ((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002e36:	fb00 6613 	mls	r6, r0, r3, r6
 8002e3a:	b106      	cbz	r6, 8002e3e <TGFX_JPEG_GetDecodeColorConvertFunc+0x5e>
    {
        vMCU++; /*+1 for vertical incomplete MCU */
 8002e3c:	3301      	adds	r3, #1
    }
    JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002e3e:	4359      	muls	r1, r3
    *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

    return HAL_OK;
 8002e40:	2000      	movs	r0, #0
    JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002e42:	62e1      	str	r1, [r4, #44]	@ 0x2c
    *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002e44:	6011      	str	r1, [r2, #0]
}
 8002e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	d109      	bne.n	8002e60 <TGFX_JPEG_GetDecodeColorConvertFunc+0x80>
            if (JPEG_ConvertorParams.LineOffset != 0)
 8002e4c:	f013 000f 	ands.w	r0, r3, #15
            *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002e50:	4f10      	ldr	r7, [pc, #64]	@ (8002e94 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
                JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002e52:	bf18      	it	ne
 8002e54:	f1c0 0010 	rsbne	r0, r0, #16
            *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002e58:	600f      	str	r7, [r1, #0]
            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8002e5a:	6160      	str	r0, [r4, #20]
            JPEG_ConvertorParams.V_factor  = 8;
 8002e5c:	2008      	movs	r0, #8
 8002e5e:	e7db      	b.n	8002e18 <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
            *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002e60:	480d      	ldr	r0, [pc, #52]	@ (8002e98 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
        *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002e62:	6008      	str	r0, [r1, #0]
        if (JPEG_ConvertorParams.LineOffset != 0)
 8002e64:	f013 0107 	ands.w	r1, r3, #7
 8002e68:	d002      	beq.n	8002e70 <TGFX_JPEG_GetDecodeColorConvertFunc+0x90>
                JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002e6a:	f1c1 0108 	rsb	r1, r1, #8
 8002e6e:	e000      	b.n	8002e72 <TGFX_JPEG_GetDecodeColorConvertFunc+0x92>
            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8002e70:	2100      	movs	r1, #0
 8002e72:	2508      	movs	r5, #8
                JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002e74:	6161      	str	r1, [r4, #20]
            JPEG_ConvertorParams.V_factor  = 8;
 8002e76:	e7f1      	b.n	8002e5c <TGFX_JPEG_GetDecodeColorConvertFunc+0x7c>
    else if (JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002e78:	b90d      	cbnz	r5, 8002e7e <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
        *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e7a:	4808      	ldr	r0, [pc, #32]	@ (8002e9c <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
 8002e7c:	e7f1      	b.n	8002e62 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    else if (JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002e7e:	2d30      	cmp	r5, #48	@ 0x30
 8002e80:	d101      	bne.n	8002e86 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa6>
        *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002e82:	4807      	ldr	r0, [pc, #28]	@ (8002ea0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002e84:	e7ed      	b.n	8002e62 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
        return HAL_ERROR; /* Color space Not supported*/
 8002e86:	2001      	movs	r0, #1
 8002e88:	e7dd      	b.n	8002e46 <TGFX_JPEG_GetDecodeColorConvertFunc+0x66>
 8002e8a:	bf00      	nop
 8002e8c:	2001211c 	.word	0x2001211c
 8002e90:	08002869 	.word	0x08002869
 8002e94:	08002a51 	.word	0x08002a51
 8002e98:	08002bb1 	.word	0x08002bb1
 8002e9c:	08002cad 	.word	0x08002cad
 8002ea0:	08002d2d 	.word	0x08002d2d

08002ea4 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea8:	f8df c250 	ldr.w	ip, [pc, #592]	@ 80030fc <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
    int32_t i;

    for (i = 0; i <= 255; i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8df 8250 	ldr.w	r8, [pc, #592]	@ 8003100 <TGFX_JPEG_InitColorTables+0x25c>
    {
        RED_Y_LUT[i]           = ((((int32_t)((0.299)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eb2:	f644 4b8b 	movw	fp, #19595	@ 0x4c8b
 8002eb6:	4f7e      	ldr	r7, [pc, #504]	@ (80030b0 <TGFX_JPEG_InitColorTables+0x20c>)
        GREEN_Y_LUT[i]         = ((((int32_t)((0.587)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eb8:	f249 6a45 	movw	sl, #38469	@ 0x9645
 8002ebc:	4e7d      	ldr	r6, [pc, #500]	@ (80030b4 <TGFX_JPEG_InitColorTables+0x210>)
        BLUE_Y_LUT[i]          = ((((int32_t)((0.114)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ebe:	f641 592f 	movw	r9, #7471	@ 0x1d2f
 8002ec2:	4d7d      	ldr	r5, [pc, #500]	@ (80030b8 <TGFX_JPEG_InitColorTables+0x214>)
 8002ec4:	4c7d      	ldr	r4, [pc, #500]	@ (80030bc <TGFX_JPEG_InitColorTables+0x218>)
 8002ec6:	487e      	ldr	r0, [pc, #504]	@ (80030c0 <TGFX_JPEG_InitColorTables+0x21c>)
 8002ec8:	497e      	ldr	r1, [pc, #504]	@ (80030c4 <TGFX_JPEG_InitColorTables+0x220>)
        RED_Y_LUT[i]           = ((((int32_t)((0.299)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eca:	fb0b f203 	mul.w	r2, fp, r3
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

        /* BLUE_CB_LUT and RED_CR_LUT are identical */
        BLUE_CB_RED_CR_LUT[i]  = ((((int32_t)((0.5)    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

        GREEN_CR_LUT[i]        = (((-((int32_t)((0.4187) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ece:	f64e 3e2f 	movw	lr, #60207	@ 0xeb2f
        RED_Y_LUT[i]           = ((((int32_t)((0.299)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ed2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002ed6:	1412      	asrs	r2, r2, #16
 8002ed8:	f848 2b04 	str.w	r2, [r8], #4
        GREEN_Y_LUT[i]         = ((((int32_t)((0.587)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002edc:	fb0a f203 	mul.w	r2, sl, r3
 8002ee0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002ee4:	1412      	asrs	r2, r2, #16
 8002ee6:	f84c 2b04 	str.w	r2, [ip], #4
        BLUE_Y_LUT[i]          = ((((int32_t)((0.114)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eea:	fb09 f203 	mul.w	r2, r9, r3
 8002eee:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002ef2:	1412      	asrs	r2, r2, #16
 8002ef4:	f847 2b04 	str.w	r2, [r7], #4
        RED_CB_LUT[i]          = (((-((int32_t)((0.1687) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ef8:	4a73      	ldr	r2, [pc, #460]	@ (80030c8 <TGFX_JPEG_InitColorTables+0x224>)
 8002efa:	435a      	muls	r2, r3
 8002efc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8002f00:	1412      	asrs	r2, r2, #16
 8002f02:	f846 2b04 	str.w	r2, [r6], #4
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f06:	4a71      	ldr	r2, [pc, #452]	@ (80030cc <TGFX_JPEG_InitColorTables+0x228>)
 8002f08:	435a      	muls	r2, r3
        BLUE_CB_RED_CR_LUT[i]  = ((((int32_t)((0.5)    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f0a:	3301      	adds	r3, #1
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f0c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    for (i = 0; i <= 255; i++)
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f14:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002f18:	f845 2b04 	str.w	r2, [r5], #4
        BLUE_CB_RED_CR_LUT[i]  = ((((int32_t)((0.5)    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f1c:	f343 024f 	sbfx	r2, r3, #1, #16
 8002f20:	f844 2b04 	str.w	r2, [r4], #4
        GREEN_CR_LUT[i]        = (((-((int32_t)((0.4187) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f24:	4a6a      	ldr	r2, [pc, #424]	@ (80030d0 <TGFX_JPEG_InitColorTables+0x22c>)
 8002f26:	fb02 e203 	mla	r2, r2, r3, lr
        BLUE_CR_LUT[i]         = (((-((int32_t)((0.0813) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f2a:	f249 4ed0 	movw	lr, #38096	@ 0x94d0
        GREEN_CR_LUT[i]        = (((-((int32_t)((0.4187) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f2e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002f32:	f840 2b04 	str.w	r2, [r0], #4
        BLUE_CR_LUT[i]         = (((-((int32_t)((0.0813) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f36:	4a67      	ldr	r2, [pc, #412]	@ (80030d4 <TGFX_JPEG_InitColorTables+0x230>)
 8002f38:	fb02 e203 	mla	r2, r2, r3, lr
 8002f3c:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002f40:	f841 2b04 	str.w	r2, [r1], #4
    for (i = 0; i <= 255; i++)
 8002f44:	d1c1      	bne.n	8002eca <TGFX_JPEG_InitColorTables+0x26>
 8002f46:	4c64      	ldr	r4, [pc, #400]	@ (80030d8 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
    uint32_t i, j, offset;

    /*Y LUT */
    for (i = 0; i < 16; i++)
 8002f48:	2200      	movs	r2, #0
    {
        for (j = 0; j < 16; j++)
 8002f4a:	00d3      	lsls	r3, r2, #3
    for (i = 0; i <= 255; i++)
 8002f4c:	4625      	mov	r5, r4
        for (j = 0; j < 16; j++)
 8002f4e:	2100      	movs	r1, #0
        {
            offset =  j + (i * 8);
            if ((j >= 8) && (i >= 8))
 8002f50:	2907      	cmp	r1, #7
 8002f52:	f240 80a6 	bls.w	80030a2 <TGFX_JPEG_InitColorTables+0x1fe>
 8002f56:	2a07      	cmp	r2, #7
            {
                offset += 120;
 8002f58:	bf8c      	ite	hi
 8002f5a:	f103 0078 	addhi.w	r0, r3, #120	@ 0x78
            }
            else  if ((j >= 8) && (i < 8))
            {
                offset += 56;
 8002f5e:	f103 0038 	addls.w	r0, r3, #56	@ 0x38
        for (j = 0; j < 16; j++)
 8002f62:	3101      	adds	r1, #1
 8002f64:	3301      	adds	r3, #1
            else  if ((j < 8) && (i >= 8))
            {
                offset += 64;
            }

            JPEG_Y_MCU_LUT[i * 16 + j] = offset;
 8002f66:	f825 0b02 	strh.w	r0, [r5], #2
        for (j = 0; j < 16; j++)
 8002f6a:	2910      	cmp	r1, #16
 8002f6c:	d1f0      	bne.n	8002f50 <TGFX_JPEG_InitColorTables+0xac>
    for (i = 0; i < 16; i++)
 8002f6e:	3201      	adds	r2, #1
 8002f70:	3420      	adds	r4, #32
 8002f72:	2a10      	cmp	r2, #16
 8002f74:	d1e9      	bne.n	8002f4a <TGFX_JPEG_InitColorTables+0xa6>
        }
    }

    /*Cb Cr K LUT*/
    for (i = 0; i < 16; i++)
 8002f76:	2000      	movs	r0, #0
            offset = i * 16 + j;

            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;

            JPEG_Cr_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 320;
 8002f78:	f8df e188 	ldr.w	lr, [pc, #392]	@ 8003104 <TGFX_JPEG_InitColorTables+0x260>
            JPEG_Cr_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 192;
 8002f7c:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 8003108 <TGFX_JPEG_InitColorTables+0x264>

            JPEG_K_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 384;
 8002f80:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 800310c <TGFX_JPEG_InitColorTables+0x268>
            JPEG_K_MCU_422_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002f84:	f8df a188 	ldr.w	sl, [pc, #392]	@ 8003110 <TGFX_JPEG_InitColorTables+0x26c>
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002f88:	0844      	lsrs	r4, r0, #1
        for (j = 0; j < 16; j++)
 8002f8a:	2500      	movs	r5, #0
 8002f8c:	00c3      	lsls	r3, r0, #3
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002f8e:	00e4      	lsls	r4, r4, #3
 8002f90:	fa1f fc83 	uxth.w	ip, r3
 8002f94:	b2a4      	uxth	r4, r4
 8002f96:	0142      	lsls	r2, r0, #5
 8002f98:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002f9c:	4f4f      	ldr	r7, [pc, #316]	@ (80030dc <TGFX_JPEG_InitColorTables+0x238>)
        for (j = 0; j < 16; j++)
 8002f9e:	3501      	adds	r5, #1
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002fa0:	1919      	adds	r1, r3, r4
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8002fa2:	4463      	add	r3, ip
        for (j = 0; j < 16; j++)
 8002fa4:	2d10      	cmp	r5, #16
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002fa6:	b289      	uxth	r1, r1
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8002fa8:	b29b      	uxth	r3, r3
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002faa:	f501 7680 	add.w	r6, r1, #256	@ 0x100
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8002fae:	f103 0b80 	add.w	fp, r3, #128	@ 0x80
            JPEG_Cr_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 192;
 8002fb2:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002fb6:	b2b6      	uxth	r6, r6
            JPEG_Cr_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 192;
 8002fb8:	f828 3002 	strh.w	r3, [r8, r2]
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002fbc:	52be      	strh	r6, [r7, r2]
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8002fbe:	4f48      	ldr	r7, [pc, #288]	@ (80030e0 <TGFX_JPEG_InitColorTables+0x23c>)
            JPEG_K_MCU_422_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8002fc0:	f82a 6002 	strh.w	r6, [sl, r2]
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8002fc4:	f827 b002 	strh.w	fp, [r7, r2]
            JPEG_Cr_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 320;
 8002fc8:	f501 7ba0 	add.w	fp, r1, #320	@ 0x140
            JPEG_K_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 384;
 8002fcc:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
            JPEG_Cr_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 320;
 8002fd0:	f82e b002 	strh.w	fp, [lr, r2]
            JPEG_K_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 384;
 8002fd4:	f829 1002 	strh.w	r1, [r9, r2]
        for (j = 0; j < 16; j++)
 8002fd8:	f102 0202 	add.w	r2, r2, #2
 8002fdc:	d1dc      	bne.n	8002f98 <TGFX_JPEG_InitColorTables+0xf4>
    for (i = 0; i < 16; i++)
 8002fde:	3001      	adds	r0, #1
 8002fe0:	2810      	cmp	r0, #16
 8002fe2:	d1d1      	bne.n	8002f88 <TGFX_JPEG_InitColorTables+0xe4>
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8003114 <TGFX_JPEG_InitColorTables+0x270>
 8002fea:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8003118 <TGFX_JPEG_InitColorTables+0x274>
 8002fee:	4608      	mov	r0, r1
 8002ff0:	f8df e128 	ldr.w	lr, [pc, #296]	@ 800311c <TGFX_JPEG_InitColorTables+0x278>
 8002ff4:	f8df c128 	ldr.w	ip, [pc, #296]	@ 8003120 <TGFX_JPEG_InitColorTables+0x27c>
 8002ff8:	b283      	uxth	r3, r0
 8002ffa:	eb01 0709 	add.w	r7, r1, r9
 8002ffe:	eb01 0608 	add.w	r6, r1, r8
 8003002:	eb01 050e 	add.w	r5, r1, lr
        }
    }

    for (i = 0; i < 8; i++)
    {
        for (j = 0; j < 8; j++)
 8003006:	f103 0208 	add.w	r2, r3, #8
 800300a:	eb01 040c 	add.w	r4, r1, ip
 800300e:	b292      	uxth	r2, r2
        {
            offset = i * 8 + j;

            JPEG_Y_MCU_444_LUT[offset]  = offset;
            JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8003010:	f103 0a40 	add.w	sl, r3, #64	@ 0x40
            JPEG_Y_MCU_444_LUT[offset]  = offset;
 8003014:	f827 3b02 	strh.w	r3, [r7], #2
            JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8003018:	f826 ab02 	strh.w	sl, [r6], #2
            JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800301c:	f103 0a80 	add.w	sl, r3, #128	@ 0x80
 8003020:	f825 ab02 	strh.w	sl, [r5], #2
            JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8003024:	f103 0ac0 	add.w	sl, r3, #192	@ 0xc0
        for (j = 0; j < 8; j++)
 8003028:	3301      	adds	r3, #1
            JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800302a:	f824 ab02 	strh.w	sl, [r4], #2
        for (j = 0; j < 8; j++)
 800302e:	b29b      	uxth	r3, r3
 8003030:	4293      	cmp	r3, r2
 8003032:	d1ed      	bne.n	8003010 <TGFX_JPEG_InitColorTables+0x16c>
    for (i = 0; i < 8; i++)
 8003034:	3008      	adds	r0, #8
 8003036:	3110      	adds	r1, #16
 8003038:	2840      	cmp	r0, #64	@ 0x40
 800303a:	d1dd      	bne.n	8002ff8 <TGFX_JPEG_InitColorTables+0x154>
 800303c:	4d29      	ldr	r5, [pc, #164]	@ (80030e4 <TGFX_JPEG_InitColorTables+0x240>)
    for (i = 0; i <= 255; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	4c29      	ldr	r4, [pc, #164]	@ (80030e8 <TGFX_JPEG_InitColorTables+0x244>)
 8003042:	482a      	ldr	r0, [pc, #168]	@ (80030ec <TGFX_JPEG_InitColorTables+0x248>)
 8003044:	492a      	ldr	r1, [pc, #168]	@ (80030f0 <TGFX_JPEG_InitColorTables+0x24c>)
        CR_RED_LUT[i] = ((((int32_t)((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003046:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8003124 <TGFX_JPEG_InitColorTables+0x280>
        CB_BLUE_LUT[i] = ((((int32_t)((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800304a:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003128 <TGFX_JPEG_InitColorTables+0x284>
        CR_GREEN_LUT[i] = (-((int32_t)((0.71414 / 2) * (1L << 16)))) * index;
 800304e:	4f29      	ldr	r7, [pc, #164]	@ (80030f4 <TGFX_JPEG_InitColorTables+0x250>)
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 8003050:	4e29      	ldr	r6, [pc, #164]	@ (80030f8 <TGFX_JPEG_InitColorTables+0x254>)
        CR_RED_LUT[i] = ((((int32_t)((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003052:	fb0e f203 	mul.w	r2, lr, r3
 8003056:	f5a2 0232 	sub.w	r2, r2, #11665408	@ 0xb20000
 800305a:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 800305e:	1412      	asrs	r2, r2, #16
 8003060:	f845 2b04 	str.w	r2, [r5], #4
        CB_BLUE_LUT[i] = ((((int32_t)((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003064:	fb0c f203 	mul.w	r2, ip, r3
 8003068:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 800306c:	f5a2 42a0 	sub.w	r2, r2, #20480	@ 0x5000
 8003070:	1412      	asrs	r2, r2, #16
 8003072:	f844 2b04 	str.w	r2, [r4], #4
        CR_GREEN_LUT[i] = (-((int32_t)((0.71414 / 2) * (1L << 16)))) * index;
 8003076:	fb07 f203 	mul.w	r2, r7, r3
 800307a:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 800307e:	f502 42d0 	add.w	r2, r2, #26624	@ 0x6800
 8003082:	f840 2b04 	str.w	r2, [r0], #4
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 8003086:	fb06 f203 	mul.w	r2, r6, r3
    for (i = 0; i <= 255; i++)
 800308a:	3301      	adds	r3, #1
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 800308c:	f502 1230 	add.w	r2, r2, #2883584	@ 0x2c0000
    for (i = 0; i <= 255; i++)
 8003090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 8003094:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003098:	f841 2b04 	str.w	r2, [r1], #4
    for (i = 0; i <= 255; i++)
 800309c:	d1d9      	bne.n	8003052 <TGFX_JPEG_InitColorTables+0x1ae>
}
 800309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else  if ((j < 8) && (i >= 8))
 80030a2:	2a07      	cmp	r2, #7
                offset += 64;
 80030a4:	bf8c      	ite	hi
 80030a6:	f103 0040 	addhi.w	r0, r3, #64	@ 0x40
            offset =  j + (i * 8);
 80030aa:	4618      	movls	r0, r3
 80030ac:	e759      	b.n	8002f62 <TGFX_JPEG_InitColorTables+0xbe>
 80030ae:	bf00      	nop
 80030b0:	2000f51c 	.word	0x2000f51c
 80030b4:	2001091c 	.word	0x2001091c
 80030b8:	2000f91c 	.word	0x2000f91c
 80030bc:	2001051c 	.word	0x2001051c
 80030c0:	2000fd1c 	.word	0x2000fd1c
 80030c4:	2000f11c 	.word	0x2000f11c
 80030c8:	ffffd4d1 	.word	0xffffd4d1
 80030cc:	ffffab30 	.word	0xffffab30
 80030d0:	ffff94d1 	.word	0xffff94d1
 80030d4:	ffffeb30 	.word	0xffffeb30
 80030d8:	2000ef1c 	.word	0x2000ef1c
 80030dc:	2000ec9c 	.word	0x2000ec9c
 80030e0:	2000ea9c 	.word	0x2000ea9c
 80030e4:	20011d1c 	.word	0x20011d1c
 80030e8:	2001191c 	.word	0x2001191c
 80030ec:	2001151c 	.word	0x2001151c
 80030f0:	2001111c 	.word	0x2001111c
 80030f4:	ffff4930 	.word	0xffff4930
 80030f8:	ffffa7e8 	.word	0xffffa7e8
 80030fc:	2001011c 	.word	0x2001011c
 8003100:	20010d1c 	.word	0x20010d1c
 8003104:	2000e81c 	.word	0x2000e81c
 8003108:	2000e61c 	.word	0x2000e61c
 800310c:	2000e39c 	.word	0x2000e39c
 8003110:	2000e19c 	.word	0x2000e19c
 8003114:	2000ee9c 	.word	0x2000ee9c
 8003118:	2000ea1c 	.word	0x2000ea1c
 800311c:	2000e59c 	.word	0x2000e59c
 8003120:	2000e11c 	.word	0x2000e11c
 8003124:	000166e8 	.word	0x000166e8
 8003128:	0001c5a0 	.word	0x0001c5a0

0800312c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800312c:	b148      	cbz	r0, 8003142 <null_ptr_check+0x16>
 800312e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003130:	b13b      	cbz	r3, 8003142 <null_ptr_check+0x16>
 8003132:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003134:	b12b      	cbz	r3, 8003142 <null_ptr_check+0x16>
 8003136:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8003138:	fab0 f080 	clz	r0, r0
 800313c:	0940      	lsrs	r0, r0, #5
 800313e:	4240      	negs	r0, r0
 8003140:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8003142:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 8003146:	4770      	bx	lr

08003148 <set_mem_page>:
{
 8003148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800314a:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 800314c:	4608      	mov	r0, r1
 800314e:	f7ff ffed 	bl	800312c <null_ptr_check>
{
 8003152:	460c      	mov	r4, r1
	if (rslt == BME680_OK) {
 8003154:	4605      	mov	r5, r0
 8003156:	b9a8      	cbnz	r0, 8003184 <set_mem_page+0x3c>
		if (reg_addr > 0x7f)
 8003158:	43d3      	mvns	r3, r2
		if (mem_page != dev->mem_page) {
 800315a:	78c9      	ldrb	r1, [r1, #3]
		if (reg_addr > 0x7f)
 800315c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		if (mem_page != dev->mem_page) {
 8003160:	ebb1 1f03 	cmp.w	r1, r3, lsl #4
		if (reg_addr > 0x7f)
 8003164:	ea4f 1203 	mov.w	r2, r3, lsl #4
		if (mem_page != dev->mem_page) {
 8003168:	d00c      	beq.n	8003184 <set_mem_page+0x3c>
			dev->mem_page = mem_page;
 800316a:	70e2      	strb	r2, [r4, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800316c:	2301      	movs	r3, #1
 800316e:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 8003170:	f10d 0207 	add.w	r2, sp, #7
 8003174:	21f3      	movs	r1, #243	@ 0xf3
 8003176:	7860      	ldrb	r0, [r4, #1]
 8003178:	47b0      	blx	r6
 800317a:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
			if (dev->com_rslt != 0)
 800317e:	b120      	cbz	r0, 800318a <set_mem_page+0x42>
				rslt = BME680_E_COM_FAIL;
 8003180:	f06f 0501 	mvn.w	r5, #1
}
 8003184:	4628      	mov	r0, r5
 8003186:	b002      	add	sp, #8
 8003188:	bd70      	pop	{r4, r5, r6, pc}
				reg = reg & (~BME680_MEM_PAGE_MSK);
 800318a:	f89d 3007 	ldrb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800318e:	2173      	movs	r1, #115	@ 0x73
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003190:	78e2      	ldrb	r2, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8003192:	f023 0310 	bic.w	r3, r3, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003196:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003198:	f002 0210 	and.w	r2, r2, #16
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800319c:	7860      	ldrb	r0, [r4, #1]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800319e:	4313      	orrs	r3, r2
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80031a0:	f10d 0207 	add.w	r2, sp, #7
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80031a4:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80031a8:	2301      	movs	r3, #1
 80031aa:	47b0      	blx	r6
 80031ac:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
				if (dev->com_rslt != 0)
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d0e7      	beq.n	8003184 <set_mem_page+0x3c>
 80031b4:	e7e4      	b.n	8003180 <set_mem_page+0x38>

080031b6 <get_mem_page>:
{
 80031b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031b8:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 80031ba:	f7ff ffb7 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 80031be:	b970      	cbnz	r0, 80031de <get_mem_page+0x28>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80031c0:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80031c2:	2301      	movs	r3, #1
 80031c4:	f10d 0207 	add.w	r2, sp, #7
 80031c8:	21f3      	movs	r1, #243	@ 0xf3
 80031ca:	7860      	ldrb	r0, [r4, #1]
 80031cc:	47a8      	blx	r5
 80031ce:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
		if (dev->com_rslt != 0)
 80031d2:	b930      	cbnz	r0, 80031e2 <get_mem_page+0x2c>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 80031d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	70e3      	strb	r3, [r4, #3]
}
 80031de:	b003      	add	sp, #12
 80031e0:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 80031e2:	f06f 0001 	mvn.w	r0, #1
	return rslt;
 80031e6:	e7fa      	b.n	80031de <get_mem_page+0x28>

080031e8 <boundary_check.constprop.0>:
		if (*value > max) {
 80031e8:	7803      	ldrb	r3, [r0, #0]
 80031ea:	428b      	cmp	r3, r1
			*value = max;
 80031ec:	bf88      	it	hi
 80031ee:	7001      	strbhi	r1, [r0, #0]
}
 80031f0:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80031f4:	bf82      	ittt	hi
 80031f6:	f892 3046 	ldrbhi.w	r3, [r2, #70]	@ 0x46
 80031fa:	f043 0302 	orrhi.w	r3, r3, #2
 80031fe:	f882 3046 	strbhi.w	r3, [r2, #70]	@ 0x46
}
 8003202:	4770      	bx	lr

08003204 <bme680_get_regs>:
{
 8003204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003208:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 800320a:	4618      	mov	r0, r3
{
 800320c:	461d      	mov	r5, r3
 800320e:	4688      	mov	r8, r1
	rslt = null_ptr_check(dev);
 8003210:	f7ff ff8c 	bl	800312c <null_ptr_check>
{
 8003214:	4691      	mov	r9, r2
	if (rslt == BME680_OK) {
 8003216:	4604      	mov	r4, r0
 8003218:	b9a8      	cbnz	r0, 8003246 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 800321a:	78ab      	ldrb	r3, [r5, #2]
 800321c:	b93b      	cbnz	r3, 800322e <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 800321e:	4629      	mov	r1, r5
 8003220:	4630      	mov	r0, r6
 8003222:	f7ff ff91 	bl	8003148 <set_mem_page>
			if (rslt == BME680_OK)
 8003226:	4604      	mov	r4, r0
 8003228:	b908      	cbnz	r0, 800322e <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 800322a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800322e:	6caf      	ldr	r7, [r5, #72]	@ 0x48
 8003230:	464b      	mov	r3, r9
 8003232:	4642      	mov	r2, r8
 8003234:	4631      	mov	r1, r6
 8003236:	7868      	ldrb	r0, [r5, #1]
 8003238:	47b8      	blx	r7
			rslt = BME680_E_COM_FAIL;
 800323a:	2800      	cmp	r0, #0
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800323c:	f885 0054 	strb.w	r0, [r5, #84]	@ 0x54
			rslt = BME680_E_COM_FAIL;
 8003240:	bf18      	it	ne
 8003242:	f06f 0401 	mvnne.w	r4, #1
}
 8003246:	4620      	mov	r0, r4
 8003248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800324c <bme680_set_regs>:
{
 800324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003250:	b08b      	sub	sp, #44	@ 0x2c
 8003252:	461d      	mov	r5, r3
 8003254:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8003256:	2100      	movs	r1, #0
{
 8003258:	4606      	mov	r6, r0
 800325a:	4614      	mov	r4, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800325c:	a801      	add	r0, sp, #4
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	9100      	str	r1, [sp, #0]
 8003262:	f025 ff6d 	bl	8029140 <memset>
	rslt = null_ptr_check(dev);
 8003266:	4628      	mov	r0, r5
 8003268:	f7ff ff60 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 800326c:	bb78      	cbnz	r0, 80032ce <bme680_set_regs+0x82>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 800326e:	1e63      	subs	r3, r4, #1
 8003270:	2b12      	cmp	r3, #18
 8003272:	d82f      	bhi.n	80032d4 <bme680_set_regs+0x88>
			for (index = 0; index < len; index++) {
 8003274:	3e01      	subs	r6, #1
 8003276:	46e9      	mov	r9, sp
 8003278:	4680      	mov	r8, r0
				if (dev->intf == BME680_SPI_INTF) {
 800327a:	78aa      	ldrb	r2, [r5, #2]
					rslt = set_mem_page(reg_addr[index], dev);
 800327c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
				if (dev->intf == BME680_SPI_INTF) {
 8003280:	b932      	cbnz	r2, 8003290 <bme680_set_regs+0x44>
					rslt = set_mem_page(reg_addr[index], dev);
 8003282:	4618      	mov	r0, r3
 8003284:	4629      	mov	r1, r5
 8003286:	f7ff ff5f 	bl	8003148 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 800328a:	7833      	ldrb	r3, [r6, #0]
 800328c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003290:	f889 3000 	strb.w	r3, [r9]
			for (index = 0; index < len; index++) {
 8003294:	f109 0902 	add.w	r9, r9, #2
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003298:	f817 3008 	ldrb.w	r3, [r7, r8]
			for (index = 0; index < len; index++) {
 800329c:	f108 0801 	add.w	r8, r8, #1
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80032a0:	f809 3c01 	strb.w	r3, [r9, #-1]
			for (index = 0; index < len; index++) {
 80032a4:	fa1f f388 	uxth.w	r3, r8
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	d3e6      	bcc.n	800327a <bme680_set_regs+0x2e>
			if (rslt == BME680_OK) {
 80032ac:	b978      	cbnz	r0, 80032ce <bme680_set_regs+0x82>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80032ae:	0064      	lsls	r4, r4, #1
 80032b0:	6cee      	ldr	r6, [r5, #76]	@ 0x4c
 80032b2:	f10d 0201 	add.w	r2, sp, #1
 80032b6:	f89d 1000 	ldrb.w	r1, [sp]
 80032ba:	3c01      	subs	r4, #1
 80032bc:	7868      	ldrb	r0, [r5, #1]
 80032be:	b2a3      	uxth	r3, r4
 80032c0:	47b0      	blx	r6
					rslt = BME680_E_COM_FAIL;
 80032c2:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80032c4:	f885 0054 	strb.w	r0, [r5, #84]	@ 0x54
					rslt = BME680_E_COM_FAIL;
 80032c8:	bf18      	it	ne
 80032ca:	f06f 0001 	mvnne.w	r0, #1
}
 80032ce:	b00b      	add	sp, #44	@ 0x2c
 80032d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			rslt = BME680_E_INVALID_LENGTH;
 80032d4:	f06f 0003 	mvn.w	r0, #3
 80032d8:	e7f9      	b.n	80032ce <bme680_set_regs+0x82>

080032da <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80032da:	23e0      	movs	r3, #224	@ 0xe0
{
 80032dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80032de:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80032e2:	23b6      	movs	r3, #182	@ 0xb6
{
 80032e4:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80032e6:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 80032ea:	f7ff ff1f 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 80032ee:	4604      	mov	r4, r0
 80032f0:	b970      	cbnz	r0, 8003310 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 80032f2:	78ab      	ldrb	r3, [r5, #2]
 80032f4:	b17b      	cbz	r3, 8003316 <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80032f6:	462b      	mov	r3, r5
 80032f8:	2201      	movs	r2, #1
 80032fa:	f10d 0107 	add.w	r1, sp, #7
 80032fe:	f10d 0006 	add.w	r0, sp, #6
 8003302:	f7ff ffa3 	bl	800324c <bme680_set_regs>
 8003306:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 8003308:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800330a:	200a      	movs	r0, #10
 800330c:	4798      	blx	r3
			if (rslt == BME680_OK) {
 800330e:	b14c      	cbz	r4, 8003324 <bme680_soft_reset+0x4a>
}
 8003310:	4620      	mov	r0, r4
 8003312:	b003      	add	sp, #12
 8003314:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 8003316:	4628      	mov	r0, r5
 8003318:	f7ff ff4d 	bl	80031b6 <get_mem_page>
		if (rslt == BME680_OK) {
 800331c:	4604      	mov	r4, r0
 800331e:	2800      	cmp	r0, #0
 8003320:	d1f6      	bne.n	8003310 <bme680_soft_reset+0x36>
 8003322:	e7e8      	b.n	80032f6 <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 8003324:	78ab      	ldrb	r3, [r5, #2]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f2      	bne.n	8003310 <bme680_soft_reset+0x36>
					rslt = get_mem_page(dev);
 800332a:	4628      	mov	r0, r5
}
 800332c:	b003      	add	sp, #12
 800332e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
					rslt = get_mem_page(dev);
 8003332:	f7ff bf40 	b.w	80031b6 <get_mem_page>

08003336 <bme680_init>:
{
 8003336:	b530      	push	{r4, r5, lr}
 8003338:	b08d      	sub	sp, #52	@ 0x34
 800333a:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 800333c:	f7ff fef6 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003340:	4604      	mov	r4, r0
 8003342:	2800      	cmp	r0, #0
 8003344:	f040 80a5 	bne.w	8003492 <bme680_init+0x15c>
		rslt = bme680_soft_reset(dev);
 8003348:	4628      	mov	r0, r5
 800334a:	f7ff ffc6 	bl	80032da <bme680_soft_reset>
		if (rslt == BME680_OK) {
 800334e:	4604      	mov	r4, r0
 8003350:	2800      	cmp	r0, #0
 8003352:	f040 809e 	bne.w	8003492 <bme680_init+0x15c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003356:	462b      	mov	r3, r5
 8003358:	2201      	movs	r2, #1
 800335a:	4629      	mov	r1, r5
 800335c:	20d0      	movs	r0, #208	@ 0xd0
 800335e:	f7ff ff51 	bl	8003204 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8003362:	4604      	mov	r4, r0
 8003364:	2800      	cmp	r0, #0
 8003366:	f040 8094 	bne.w	8003492 <bme680_init+0x15c>
				if (dev->chip_id == BME680_CHIP_ID) {
 800336a:	782b      	ldrb	r3, [r5, #0]
 800336c:	2b61      	cmp	r3, #97	@ 0x61
 800336e:	f040 8093 	bne.w	8003498 <bme680_init+0x162>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8003372:	4601      	mov	r1, r0
 8003374:	9001      	str	r0, [sp, #4]
 8003376:	2225      	movs	r2, #37	@ 0x25
 8003378:	a802      	add	r0, sp, #8
 800337a:	f025 fee1 	bl	8029140 <memset>
	rslt = null_ptr_check(dev);
 800337e:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 8003380:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 8003384:	f7ff fed2 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003388:	4604      	mov	r4, r0
 800338a:	2800      	cmp	r0, #0
 800338c:	f040 8081 	bne.w	8003492 <bme680_init+0x15c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8003390:	462b      	mov	r3, r5
 8003392:	2219      	movs	r2, #25
 8003394:	a901      	add	r1, sp, #4
 8003396:	2089      	movs	r0, #137	@ 0x89
 8003398:	f7ff ff34 	bl	8003204 <bme680_get_regs>
		if (rslt == BME680_OK)
 800339c:	4604      	mov	r4, r0
 800339e:	b938      	cbnz	r0, 80033b0 <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80033a0:	462b      	mov	r3, r5
 80033a2:	2210      	movs	r2, #16
 80033a4:	f10d 011d 	add.w	r1, sp, #29
 80033a8:	20e1      	movs	r0, #225	@ 0xe1
 80033aa:	f7ff ff2b 	bl	8003204 <bme680_get_regs>
 80033ae:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80033b0:	f8bd 3025 	ldrh.w	r3, [sp, #37]	@ 0x25
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033b4:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80033b8:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80033ba:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 80033be:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80033c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033c4:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80033c6:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 80033ca:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80033cc:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 80033d0:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80033d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80033d6:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80033da:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 80033de:	846b      	strh	r3, [r5, #34]	@ 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80033e0:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 80033e4:	84ab      	strh	r3, [r5, #36]	@ 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80033e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80033ea:	f885 3026 	strb.w	r3, [r5, #38]	@ 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80033ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80033f2:	f885 3027 	strb.w	r3, [r5, #39]	@ 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80033f6:	f8bd 3017 	ldrh.w	r3, [sp, #23]
 80033fa:	852b      	strh	r3, [r5, #40]	@ 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80033fc:	f8bd 3019 	ldrh.w	r3, [sp, #25]
 8003400:	856b      	strh	r3, [r5, #42]	@ 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003402:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003406:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 800340a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800340e:	f003 020f 	and.w	r2, r3, #15
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003412:	091b      	lsrs	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003414:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003418:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800341a:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 800341e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003422:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8003424:	9b08      	ldr	r3, [sp, #32]
 8003426:	60eb      	str	r3, [r5, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8003428:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800342c:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 800342e:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8003432:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003434:	f8bd 3027 	ldrh.w	r3, [sp, #39]	@ 0x27
 8003438:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 800343a:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 800343e:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 8003440:	bb14      	cbnz	r4, 8003488 <bme680_init+0x152>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8003442:	462b      	mov	r3, r5
 8003444:	2201      	movs	r2, #1
 8003446:	f10d 0103 	add.w	r1, sp, #3
 800344a:	2002      	movs	r0, #2
 800344c:	f7ff feda 	bl	8003204 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003450:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 8003454:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003456:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800345a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
			if (rslt == BME680_OK) {
 800345e:	b998      	cbnz	r0, 8003488 <bme680_init+0x152>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8003460:	462b      	mov	r3, r5
 8003462:	2201      	movs	r2, #1
 8003464:	f10d 0103 	add.w	r1, sp, #3
 8003468:	f7ff fecc 	bl	8003204 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 800346c:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8003470:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8003472:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
				if (rslt == BME680_OK)
 8003476:	b938      	cbnz	r0, 8003488 <bme680_init+0x152>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003478:	462b      	mov	r3, r5
 800347a:	2201      	movs	r2, #1
 800347c:	f10d 0103 	add.w	r1, sp, #3
 8003480:	2004      	movs	r0, #4
 8003482:	f7ff febf 	bl	8003204 <bme680_get_regs>
 8003486:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003488:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 800348c:	111b      	asrs	r3, r3, #4
 800348e:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
}
 8003492:	4620      	mov	r0, r4
 8003494:	b00d      	add	sp, #52	@ 0x34
 8003496:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 8003498:	f06f 0402 	mvn.w	r4, #2
 800349c:	e7f9      	b.n	8003492 <bme680_init+0x15c>

0800349e <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800349e:	2374      	movs	r3, #116	@ 0x74
{
 80034a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034a2:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80034a4:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 80034a8:	f7ff fe40 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 80034ac:	bba0      	cbnz	r0, 8003518 <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 80034ae:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80034b0:	4623      	mov	r3, r4
 80034b2:	2201      	movs	r2, #1
 80034b4:	f10d 0106 	add.w	r1, sp, #6
 80034b8:	2074      	movs	r0, #116	@ 0x74
 80034ba:	f7ff fea3 	bl	8003204 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80034be:	b9a0      	cbnz	r0, 80034ea <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80034c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 80034c4:	f013 0503 	ands.w	r5, r3, #3
 80034c8:	d011      	beq.n	80034ee <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80034ca:	f023 0303 	bic.w	r3, r3, #3
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80034ce:	2201      	movs	r2, #1
 80034d0:	f10d 0106 	add.w	r1, sp, #6
 80034d4:	f10d 0007 	add.w	r0, sp, #7
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80034d8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80034dc:	4623      	mov	r3, r4
 80034de:	f7ff feb5 	bl	800324c <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80034e2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80034e4:	200a      	movs	r0, #10
 80034e6:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80034e8:	e7e2      	b.n	80034b0 <bme680_set_sensor_mode+0x12>
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	d1e0      	bne.n	80034b0 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80034ee:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80034f2:	b18a      	cbz	r2, 8003518 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80034f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80034f8:	f002 0203 	and.w	r2, r2, #3
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	4313      	orrs	r3, r2
 8003502:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 8003506:	b938      	cbnz	r0, 8003518 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003508:	4623      	mov	r3, r4
 800350a:	2201      	movs	r2, #1
 800350c:	f10d 0106 	add.w	r1, sp, #6
 8003510:	f10d 0007 	add.w	r0, sp, #7
 8003514:	f7ff fe9a 	bl	800324c <bme680_set_regs>
}
 8003518:	b003      	add	sp, #12
 800351a:	bd30      	pop	{r4, r5, pc}

0800351c <bme680_set_sensor_settings>:
{
 800351c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t data = 0;
 800351e:	2300      	movs	r3, #0
{
 8003520:	b089      	sub	sp, #36	@ 0x24
 8003522:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 8003524:	4608      	mov	r0, r1
{
 8003526:	460c      	mov	r4, r1
	uint8_t data = 0;
 8003528:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800352c:	9304      	str	r3, [sp, #16]
 800352e:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003532:	9306      	str	r3, [sp, #24]
 8003534:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 8003538:	f7ff fdf8 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 800353c:	2800      	cmp	r0, #0
 800353e:	f040 80fc 	bne.w	800373a <bme680_set_sensor_settings+0x21e>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003542:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003546:	f891 7044 	ldrb.w	r7, [r1, #68]	@ 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 800354a:	d105      	bne.n	8003558 <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 800354c:	f881 3044 	strb.w	r3, [r1, #68]	@ 0x44
			rslt = bme680_set_sensor_mode(dev);
 8003550:	4620      	mov	r0, r4
 8003552:	f7ff ffa4 	bl	800349e <bme680_set_sensor_mode>
 8003556:	e007      	b.n	8003568 <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 8003558:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 800355a:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 800355e:	f000 80ee 	beq.w	800373e <bme680_set_sensor_settings+0x222>
		dev->power_mode = BME680_SLEEP_MODE;
 8003562:	f881 0044 	strb.w	r0, [r1, #68]	@ 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 8003566:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 8003568:	f016 0510 	ands.w	r5, r6, #16
 800356c:	d01e      	beq.n	80035ac <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800356e:	4622      	mov	r2, r4
 8003570:	2107      	movs	r1, #7
 8003572:	f104 003b 	add.w	r0, r4, #59	@ 0x3b
 8003576:	f7ff fe37 	bl	80031e8 <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 800357a:	b928      	cbnz	r0, 8003588 <bme680_set_sensor_settings+0x6c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800357c:	4623      	mov	r3, r4
 800357e:	2201      	movs	r2, #1
 8003580:	4469      	add	r1, sp
 8003582:	2075      	movs	r0, #117	@ 0x75
 8003584:	f7ff fe3e 	bl	8003204 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003588:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
			count++;
 800358c:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800358e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	f022 021c 	bic.w	r2, r2, #28
 8003598:	f003 031c 	and.w	r3, r3, #28
 800359c:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 800359e:	2275      	movs	r2, #117	@ 0x75
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80035a0:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80035a4:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 80035a8:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 80035ac:	06b3      	lsls	r3, r6, #26
 80035ae:	d522      	bpl.n	80035f6 <bme680_set_sensor_settings+0xda>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80035b0:	4622      	mov	r2, r4
 80035b2:	2108      	movs	r1, #8
 80035b4:	f104 003d 	add.w	r0, r4, #61	@ 0x3d
 80035b8:	f7ff fe16 	bl	80031e8 <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80035bc:	b930      	cbnz	r0, 80035cc <bme680_set_sensor_settings+0xb0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80035be:	4623      	mov	r3, r4
 80035c0:	2201      	movs	r2, #1
 80035c2:	f10d 0107 	add.w	r1, sp, #7
 80035c6:	2070      	movs	r0, #112	@ 0x70
 80035c8:	f7ff fe1c 	bl	8003204 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80035cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80035d0:	2170      	movs	r1, #112	@ 0x70
 80035d2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80035d6:	f023 0308 	bic.w	r3, r3, #8
 80035da:	f002 0208 	and.w	r2, r2, #8
 80035de:	4313      	orrs	r3, r2
 80035e0:	f105 0220 	add.w	r2, r5, #32
			count++;
 80035e4:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 80035e6:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80035e8:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 80035ec:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80035ee:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80035f2:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80035f6:	07b1      	lsls	r1, r6, #30
 80035f8:	d033      	beq.n	8003662 <bme680_set_sensor_settings+0x146>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80035fa:	4622      	mov	r2, r4
 80035fc:	2105      	movs	r1, #5
 80035fe:	f104 0039 	add.w	r0, r4, #57	@ 0x39
 8003602:	f7ff fdf1 	bl	80031e8 <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003606:	b930      	cbnz	r0, 8003616 <bme680_set_sensor_settings+0xfa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003608:	4623      	mov	r3, r4
 800360a:	2201      	movs	r2, #1
 800360c:	f10d 0107 	add.w	r1, sp, #7
 8003610:	2074      	movs	r0, #116	@ 0x74
 8003612:	f7ff fdf7 	bl	8003204 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 8003616:	07f2      	lsls	r2, r6, #31
 8003618:	d509      	bpl.n	800362e <bme680_set_sensor_settings+0x112>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 800361a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800361e:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800362a:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 800362e:	07b3      	lsls	r3, r6, #30
 8003630:	d50b      	bpl.n	800364a <bme680_set_sensor_settings+0x12e>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003632:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8003636:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	f022 021c 	bic.w	r2, r2, #28
 8003640:	f003 031c 	and.w	r3, r3, #28
 8003644:	4313      	orrs	r3, r2
 8003646:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 800364a:	f105 0320 	add.w	r3, r5, #32
 800364e:	2274      	movs	r2, #116	@ 0x74
			count++;
 8003650:	3501      	adds	r5, #1
			reg_array[count] = reg_addr;
 8003652:	446b      	add	r3, sp
			count++;
 8003654:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr;
 8003656:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 800365a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800365e:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (desired_settings & BME680_OSH_SEL) {
 8003662:	0771      	lsls	r1, r6, #29
 8003664:	d522      	bpl.n	80036ac <bme680_set_sensor_settings+0x190>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8003666:	4622      	mov	r2, r4
 8003668:	2105      	movs	r1, #5
 800366a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800366e:	f7ff fdbb 	bl	80031e8 <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8003672:	b930      	cbnz	r0, 8003682 <bme680_set_sensor_settings+0x166>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003674:	4623      	mov	r3, r4
 8003676:	2201      	movs	r2, #1
 8003678:	f10d 0107 	add.w	r1, sp, #7
 800367c:	2072      	movs	r0, #114	@ 0x72
 800367e:	f7ff fdc1 	bl	8003204 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003682:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003686:	2172      	movs	r1, #114	@ 0x72
 8003688:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	f002 0207 	and.w	r2, r2, #7
 8003694:	4313      	orrs	r3, r2
 8003696:	f105 0220 	add.w	r2, r5, #32
			count++;
 800369a:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 800369c:	446a      	add	r2, sp
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800369e:	f88d 3007 	strb.w	r3, [sp, #7]
			count++;
 80036a2:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 80036a4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80036a8:	f802 3c08 	strb.w	r3, [r2, #-8]
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80036ac:	f016 0fc0 	tst.w	r6, #192	@ 0xc0
 80036b0:	d03a      	beq.n	8003728 <bme680_set_sensor_settings+0x20c>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80036b2:	4622      	mov	r2, r4
 80036b4:	2101      	movs	r1, #1
 80036b6:	f104 003e 	add.w	r0, r4, #62	@ 0x3e
 80036ba:	f7ff fd95 	bl	80031e8 <boundary_check.constprop.0>
			if (rslt == BME680_OK) {
 80036be:	b960      	cbnz	r0, 80036da <bme680_set_sensor_settings+0x1be>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80036c0:	210a      	movs	r1, #10
 80036c2:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80036c6:	f7ff fd8f 	bl	80031e8 <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80036ca:	b930      	cbnz	r0, 80036da <bme680_set_sensor_settings+0x1be>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80036cc:	4623      	mov	r3, r4
 80036ce:	2201      	movs	r2, #1
 80036d0:	f10d 0107 	add.w	r1, sp, #7
 80036d4:	2071      	movs	r0, #113	@ 0x71
 80036d6:	f7ff fd95 	bl	8003204 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80036da:	0672      	lsls	r2, r6, #25
 80036dc:	d50b      	bpl.n	80036f6 <bme680_set_sensor_settings+0x1da>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80036de:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80036e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	f022 0210 	bic.w	r2, r2, #16
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80036f6:	0633      	lsls	r3, r6, #24
 80036f8:	d50a      	bpl.n	8003710 <bme680_set_sensor_settings+0x1f4>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80036fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036fe:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 8003702:	f023 030f 	bic.w	r3, r3, #15
 8003706:	f002 020f 	and.w	r2, r2, #15
 800370a:	4313      	orrs	r3, r2
 800370c:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8003710:	f105 0320 	add.w	r3, r5, #32
 8003714:	2271      	movs	r2, #113	@ 0x71
			count++;
 8003716:	3501      	adds	r5, #1
			reg_array[count] = reg_addr; /* Append configuration */
 8003718:	446b      	add	r3, sp
			count++;
 800371a:	b2ed      	uxtb	r5, r5
			reg_array[count] = reg_addr; /* Append configuration */
 800371c:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8003720:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003724:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (rslt == BME680_OK)
 8003728:	b928      	cbnz	r0, 8003736 <bme680_set_sensor_settings+0x21a>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 800372a:	4623      	mov	r3, r4
 800372c:	462a      	mov	r2, r5
 800372e:	a906      	add	r1, sp, #24
 8003730:	a804      	add	r0, sp, #16
 8003732:	f7ff fd8b 	bl	800324c <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 8003736:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
}
 800373a:	b009      	add	sp, #36	@ 0x24
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (temp > 400) /* Cap temperature */
 800373e:	f8b1 2040 	ldrh.w	r2, [r1, #64]	@ 0x40
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003742:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8003746:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 800374a:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800374e:	bf28      	it	cs
 8003750:	f44f 72c8 	movcs.w	r2, #400	@ 0x190
 8003754:	f203 1399 	addw	r3, r3, #409	@ 0x199
 8003758:	435a      	muls	r2, r3
 800375a:	2314      	movs	r3, #20
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	230a      	movs	r3, #10
 8003762:	f502 1248 	add.w	r2, r2, #3276800	@ 0x320000
 8003766:	fbb2 f2f3 	udiv	r2, r2, r3
 800376a:	f991 3011 	ldrsb.w	r3, [r1, #17]
 800376e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8003772:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003774:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8003778:	f991 1014 	ldrsb.w	r1, [r1, #20]
 800377c:	fb13 f301 	smulbb	r3, r3, r1
 8003780:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003784:	fb93 f3f1 	sdiv	r3, r3, r1
 8003788:	021b      	lsls	r3, r3, #8
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800378a:	2183      	movs	r1, #131	@ 0x83
	var3 = var1 + (var2 / 2);
 800378c:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003790:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8003794:	3204      	adds	r2, #4
 8003796:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800379a:	f994 2035 	ldrsb.w	r2, [r4, #53]	@ 0x35
 800379e:	434a      	muls	r2, r1
 80037a0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80037a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a8:	2222      	movs	r2, #34	@ 0x22
 80037aa:	3bfa      	subs	r3, #250	@ 0xfa
 80037ac:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80037ae:	2264      	movs	r2, #100	@ 0x64
 80037b0:	3332      	adds	r3, #50	@ 0x32
 80037b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80037b6:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80037ba:	f246 435a 	movw	r3, #25690	@ 0x645a
 80037be:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80037c2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
	if (dur >= 0xfc0) {
 80037c6:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 80037ca:	d21a      	bcs.n	8003802 <bme680_set_sensor_settings+0x2e6>
		while (dur > 0x3F) {
 80037cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80037ce:	f100 0201 	add.w	r2, r0, #1
 80037d2:	d813      	bhi.n	80037fc <bme680_set_sensor_settings+0x2e0>
		durval = (uint8_t) (dur + (factor * 64));
 80037d4:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 80037d8:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80037da:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80037dc:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80037e0:	2202      	movs	r2, #2
 80037e2:	4623      	mov	r3, r4
 80037e4:	a903      	add	r1, sp, #12
 80037e6:	a802      	add	r0, sp, #8
			dev->gas_sett.nb_conv = 0;
 80037e8:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80037ec:	f7ff fd2e 	bl	800324c <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80037f0:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
		if (rslt == BME680_OK)
 80037f4:	2800      	cmp	r0, #0
 80037f6:	f47f aeb7 	bne.w	8003568 <bme680_set_sensor_settings+0x4c>
 80037fa:	e6a9      	b.n	8003550 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	4610      	mov	r0, r2
 8003800:	e7e4      	b.n	80037cc <bme680_set_sensor_settings+0x2b0>
		durval = 0xff; /* Max duration*/
 8003802:	23ff      	movs	r3, #255	@ 0xff
 8003804:	e7e9      	b.n	80037da <bme680_set_sensor_settings+0x2be>
	...

08003808 <bme680_get_profile_dur>:
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003808:	4b18      	ldr	r3, [pc, #96]	@ (800386c <bme680_get_profile_dur+0x64>)
{
 800380a:	4602      	mov	r2, r0
 800380c:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 800380e:	6818      	ldr	r0, [r3, #0]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003810:	f240 74ab 	movw	r4, #1963	@ 0x7ab
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003814:	889b      	ldrh	r3, [r3, #4]
 8003816:	9000      	str	r0, [sp, #0]
 8003818:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 800381c:	f891 3039 	ldrb.w	r3, [r1, #57]	@ 0x39
 8003820:	3308      	adds	r3, #8
 8003822:	446b      	add	r3, sp
 8003824:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003828:	f891 303a 	ldrb.w	r3, [r1, #58]	@ 0x3a
 800382c:	3308      	adds	r3, #8
 800382e:	446b      	add	r3, sp
 8003830:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003834:	4403      	add	r3, r0
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8003836:	f891 0038 	ldrb.w	r0, [r1, #56]	@ 0x38
 800383a:	3008      	adds	r0, #8
 800383c:	4468      	add	r0, sp
 800383e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
 8003842:	4418      	add	r0, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003844:	f241 23b9 	movw	r3, #4793	@ 0x12b9
 8003848:	fb04 3300 	mla	r3, r4, r0, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 800384c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003850:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8003854:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 800385a:	f891 003e 	ldrb.w	r0, [r1, #62]	@ 0x3e
 800385e:	b118      	cbz	r0, 8003868 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 8003860:	f8b1 1042 	ldrh.w	r1, [r1, #66]	@ 0x42
 8003864:	440b      	add	r3, r1
 8003866:	8013      	strh	r3, [r2, #0]
}
 8003868:	b002      	add	sp, #8
 800386a:	bd10      	pop	{r4, pc}
 800386c:	08029d4c 	.word	0x08029d4c

08003870 <bme680_get_sensor_data>:
{
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	4607      	mov	r7, r0
 8003876:	b0a7      	sub	sp, #156	@ 0x9c
	rslt = null_ptr_check(dev);
 8003878:	4608      	mov	r0, r1
{
 800387a:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 800387c:	f7ff fc56 	bl	800312c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003880:	4606      	mov	r6, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	f040 8185 	bne.w	8003b92 <bme680_get_sensor_data+0x322>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8003888:	f04f 080a 	mov.w	r8, #10
 800388c:	9004      	str	r0, [sp, #16]
 800388e:	f8cd 0013 	str.w	r0, [sp, #19]
 8003892:	e9cd 0002 	strd	r0, r0, [sp, #8]
		if (rslt == BME680_OK) {
 8003896:	2e00      	cmp	r6, #0
 8003898:	f040 8182 	bne.w	8003ba0 <bme680_get_sensor_data+0x330>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800389c:	4623      	mov	r3, r4
 800389e:	220f      	movs	r2, #15
 80038a0:	a902      	add	r1, sp, #8
 80038a2:	201d      	movs	r0, #29
 80038a4:	f7ff fcae 	bl	8003204 <bme680_get_regs>
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80038a8:	f89d 1011 	ldrb.w	r1, [sp, #17]
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80038ac:	4606      	mov	r6, r0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038ae:	f89d 5016 	ldrb.w	r5, [sp, #22]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80038b2:	f89d 0008 	ldrb.w	r0, [sp, #8]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80038b6:	9100      	str	r1, [sp, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038b8:	f89d 1015 	ldrb.w	r1, [sp, #21]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80038bc:	f000 030f 	and.w	r3, r0, #15
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80038c0:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038c4:	f89d e00a 	ldrb.w	lr, [sp, #10]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80038c8:	9101      	str	r1, [sp, #4]
 80038ca:	f005 0130 	and.w	r1, r5, #48	@ 0x30
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80038ce:	707b      	strb	r3, [r7, #1]
			data->meas_index = buff[1];
 80038d0:	4301      	orrs	r1, r0
 80038d2:	f89d 3009 	ldrb.w	r3, [sp, #9]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80038d6:	f89d 900b 	ldrb.w	r9, [sp, #11]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80038da:	7039      	strb	r1, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 80038dc:	0609      	lsls	r1, r1, #24
			data->meas_index = buff[1];
 80038de:	70bb      	strb	r3, [r7, #2]
				| ((uint32_t) buff[4] / 16));
 80038e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038e4:	f89d a00d 	ldrb.w	sl, [sp, #13]
 80038e8:	f89d b00e 	ldrb.w	fp, [sp, #14]
				| ((uint32_t) buff[7] / 16));
 80038ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80038f0:	f89d c010 	ldrb.w	ip, [sp, #16]
			if (data->status & BME680_NEW_DATA_MSK) {
 80038f4:	f140 8151 	bpl.w	8003b9a <bme680_get_sensor_data+0x32a>
				| ((uint32_t) buff[7] / 16));
 80038f8:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80038fa:	8ae0      	ldrh	r0, [r4, #22]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80038fc:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003900:	0040      	lsls	r0, r0, #1
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003902:	ea43 330a 	orr.w	r3, r3, sl, lsl #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003906:	f994 a01a 	ldrsb.w	sl, [r4, #26]
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 800390a:	ebc0 00d3 	rsb	r0, r0, r3, lsr #3
 800390e:	ea4f 78e0 	mov.w	r8, r0, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003912:	0843      	lsrs	r3, r0, #1
 8003914:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 8003918:	fb03 f808 	mul.w	r8, r3, r8
 800391c:	fba3 1303 	umull	r1, r3, r3, r3
 8003920:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8003924:	0b09      	lsrs	r1, r1, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003926:	ea4f 180a 	mov.w	r8, sl, lsl #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800392a:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800392e:	ea4f 7aea 	mov.w	sl, sl, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003932:	131b      	asrs	r3, r3, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003934:	fb01 fa0a 	mul.w	sl, r1, sl
 8003938:	fb08 aa03 	mla	sl, r8, r3, sl
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 800393c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003940:	fba1 8108 	umull	r8, r1, r1, r8
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003944:	fb83 3000 	smull	r3, r0, r3, r0
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003948:	4451      	add	r1, sl
 800394a:	ea4f 3898 	mov.w	r8, r8, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 800394e:	0adb      	lsrs	r3, r3, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003950:	ea48 4881 	orr.w	r8, r8, r1, lsl #18
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003954:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003958:	4443      	add	r3, r8
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 800395a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
	dev->calib.t_fine = (int32_t) (var2 + var3);
 800395e:	6323      	str	r3, [r4, #48]	@ 0x30
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003960:	105b      	asrs	r3, r3, #1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003962:	3180      	adds	r1, #128	@ 0x80
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003964:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003968:	ea4f 2821 	mov.w	r8, r1, asr #8
				data->temperature = calc_temperature(adc_temp, dev);
 800396c:	f341 210f 	sbfx	r1, r1, #8, #16
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003970:	1098      	asrs	r0, r3, #2
				data->temperature = calc_temperature(adc_temp, dev);
 8003972:	ee07 1a90 	vmov	s15, r1
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003976:	4340      	muls	r0, r0
				data->temperature = calc_temperature(adc_temp, dev);
 8003978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800397c:	ea4f 2ae0 	mov.w	sl, r0, asr #11
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003980:	1340      	asrs	r0, r0, #13
				data->temperature = calc_temperature(adc_temp, dev);
 8003982:	edc7 7a01 	vstr	s15, [r7, #4]
		(int32_t)dev->calib.par_p6) >> 2;
 8003986:	f994 1026 	ldrsb.w	r1, [r4, #38]	@ 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800398a:	fb01 fa0a 	mul.w	sl, r1, sl
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 800398e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	@ 0x24
 8003992:	4359      	muls	r1, r3
 8003994:	0049      	lsls	r1, r1, #1
 8003996:	eb01 01aa 	add.w	r1, r1, sl, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 800399a:	f9b4 a01e 	ldrsh.w	sl, [r4, #30]
 800399e:	fb03 fa0a 	mul.w	sl, r3, sl
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039a2:	f994 3020 	ldrsb.w	r3, [r4, #32]
 80039a6:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80039a8:	4358      	muls	r0, r3
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039aa:	8ba3      	ldrh	r3, [r4, #28]
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80039ac:	10c0      	asrs	r0, r0, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80039ae:	eb00 006a 	add.w	r0, r0, sl, asr #1
	var1 = var1 >> 18;
 80039b2:	1480      	asrs	r0, r0, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039b4:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 80039b8:	4358      	muls	r0, r3
				| ((uint32_t) buff[4] / 16));
 80039ba:	0913      	lsrs	r3, r2, #4
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80039bc:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	@ 0x22
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80039c0:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80039c4:	0412      	lsls	r2, r2, #16
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80039c6:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
		(int32_t)dev->calib.par_p8) >> 13;
 80039ca:	f9b4 e028 	ldrsh.w	lr, [r4, #40]	@ 0x28
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80039ce:	eb02 02a1 	add.w	r2, r2, r1, asr #2
	pressure_comp = 1048576 - pres_adc;
 80039d2:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80039d6:	13c0      	asrs	r0, r0, #15
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80039d8:	eba3 3322 	sub.w	r3, r3, r2, asr #12
 80039dc:	f640 4235 	movw	r2, #3125	@ 0xc35
 80039e0:	4353      	muls	r3, r2
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
		pressure_comp = ((pressure_comp / var1) << 1);
 80039e6:	bfab      	itete	ge
 80039e8:	fb93 f3f0 	sdivge	r3, r3, r0
		pressure_comp = ((pressure_comp << 1) / var1);
 80039ec:	005b      	lsllt	r3, r3, #1
		pressure_comp = ((pressure_comp / var1) << 1);
 80039ee:	005b      	lslge	r3, r3, #1
		pressure_comp = ((pressure_comp << 1) / var1);
 80039f0:	fb93 f3f0 	sdivlt	r3, r3, r0
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80039f4:	10da      	asrs	r2, r3, #3
 80039f6:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	@ 0x2a
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80039fa:	1219      	asrs	r1, r3, #8
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80039fc:	4352      	muls	r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 80039fe:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003a00:	4342      	muls	r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003a02:	1098      	asrs	r0, r3, #2
 8003a04:	fb0e f000 	mul.w	r0, lr, r0
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a08:	f10d 0e18 	add.w	lr, sp, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003a0c:	1340      	asrs	r0, r0, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a0e:	eb00 3222 	add.w	r2, r0, r2, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003a12:	fb01 f001 	mul.w	r0, r1, r1
 8003a16:	4341      	muls	r1, r0
		(int32_t)dev->calib.par_p10) >> 17;
 8003a18:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
		(int32_t)(pressure_comp >> 8) *
 8003a1c:	4341      	muls	r1, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a1e:	8920      	ldrh	r0, [r4, #8]
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a20:	eb02 4261 	add.w	r2, r2, r1, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003a24:	f994 1027 	ldrsb.w	r1, [r4, #39]	@ 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003a28:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8003a2c:	eb03 1322 	add.w	r3, r3, r2, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a30:	2264      	movs	r2, #100	@ 0x64
				data->pressure = calc_pressure(adc_pres, dev);
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	edc7 7a02 	vstr	s15, [r7, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a3e:	f994 300e 	ldrsb.w	r3, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a42:	f994 100d 	ldrsb.w	r1, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a46:	fb08 f303 	mul.w	r3, r8, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a4a:	fb08 f101 	mul.w	r1, r8, r1
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a52:	fb08 f303 	mul.w	r3, r8, r3
 8003a56:	119b      	asrs	r3, r3, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a58:	fb91 f1f2 	sdiv	r1, r1, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003a5c:	fb93 f3f2 	sdiv	r3, r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003a60:	440b      	add	r3, r1
	var2 = ((int32_t) dev->calib.par_h2
 8003a62:	8961      	ldrh	r1, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003a64:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003a68:	434b      	muls	r3, r1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a6a:	9900      	ldr	r1, [sp, #0]
 8003a6c:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003a70:	f8df c148 	ldr.w	ip, [pc, #328]	@ 8003bbc <bme680_get_sensor_data+0x34c>
	var2 = ((int32_t) dev->calib.par_h2
 8003a74:	129b      	asrs	r3, r3, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a76:	eba1 1100 	sub.w	r1, r1, r0, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8003a7a:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8003a7e:	fb08 f000 	mul.w	r0, r8, r0
 8003a82:	fb90 f0f2 	sdiv	r0, r0, r2
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003a86:	eba1 0160 	sub.w	r1, r1, r0, asr #1
	var3 = var1 * var2;
 8003a8a:	434b      	muls	r3, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a8c:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8003a90:	fb08 f101 	mul.w	r1, r8, r1
 8003a94:	fb91 f2f2 	sdiv	r2, r1, r2
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8003a98:	7be1      	ldrb	r1, [r4, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003a9a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003a9e:	1399      	asrs	r1, r3, #14
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003aa0:	1112      	asrs	r2, r2, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003aa2:	4349      	muls	r1, r1
 8003aa4:	1289      	asrs	r1, r1, #10
	var6 = (var4 * var5) >> 1;
 8003aa6:	4351      	muls	r1, r2
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003aa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003aac:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8003ab0:	129b      	asrs	r3, r3, #10
 8003ab2:	4353      	muls	r3, r2
				data->humidity = calc_humidity(adc_hum, dev);
 8003ab4:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <bme680_get_sensor_data+0x348>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003ab6:	131b      	asrs	r3, r3, #12
	else if (calc_hum < 0)
 8003ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bfa8      	it	ge
 8003ac0:	4613      	movge	r3, r2
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003aca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
				data->humidity = calc_humidity(adc_hum, dev);
 8003ace:	edc7 7a03 	vstr	s15, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003ad2:	f994 8036 	ldrsb.w	r8, [r4, #54]	@ 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003ad6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ade:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ae2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ae6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003aea:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003aee:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003af2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003af6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003afa:	f10d 0e58 	add.w	lr, sp, #88	@ 0x58
 8003afe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b12:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003b16:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	f240 503c 	movw	r0, #1340	@ 0x53c
 8003b20:	2200      	movs	r2, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003b22:	f005 0c0f 	and.w	ip, r5, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b26:	fbc3 0208 	smlal	r0, r2, r3, r8
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003b2a:	ab26      	add	r3, sp, #152	@ 0x98
 8003b2c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003b30:	f85c 1c80 	ldr.w	r1, [ip, #-128]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b34:	fba0 0301 	umull	r0, r3, r0, r1
 8003b38:	fb01 3302 	mla	r3, r1, r2, r3
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003b3c:	09aa      	lsrs	r2, r5, #6
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b3e:	9901      	ldr	r1, [sp, #4]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b40:	0c00      	lsrs	r0, r0, #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b42:	f85c 5c40 	ldr.w	r5, [ip, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b46:	ea4f 4e23 	mov.w	lr, r3, asr #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b4a:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003b4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003b52:	03d2      	lsls	r2, r2, #15
 8003b54:	f112 427f 	adds.w	r2, r2, #4278190080	@ 0xff000000
 8003b58:	eb61 0101 	sbc.w	r1, r1, r1
 8003b5c:	1812      	adds	r2, r2, r0
 8003b5e:	eb41 4323 	adc.w	r3, r1, r3, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b62:	fba5 0100 	umull	r0, r1, r5, r0
 8003b66:	fb05 110e 	mla	r1, r5, lr, r1
 8003b6a:	0a40      	lsrs	r0, r0, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003b6c:	0855      	lsrs	r5, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003b6e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003b72:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31
 8003b76:	ea4f 0c63 	mov.w	ip, r3, asr #1
 8003b7a:	1940      	adds	r0, r0, r5
 8003b7c:	eb4c 2161 	adc.w	r1, ip, r1, asr #9
 8003b80:	f7fc fbae 	bl	80002e0 <__aeabi_ldivmod>
 8003b84:	ee07 0a90 	vmov	s15, r0
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8c:	edc7 7a04 	vstr	s15, [r7, #16]
		if (rslt == BME680_OK) {
 8003b90:	b176      	cbz	r6, 8003bb0 <bme680_get_sensor_data+0x340>
}
 8003b92:	4630      	mov	r0, r6
 8003b94:	b027      	add	sp, #156	@ 0x9c
 8003b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003b9a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	4798      	blx	r3
	} while (tries);
 8003ba0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ba4:	f018 08ff 	ands.w	r8, r8, #255	@ 0xff
 8003ba8:	f47f ae75 	bne.w	8003896 <bme680_get_sensor_data+0x26>
		rslt = BME680_W_NO_NEW_DATA;
 8003bac:	2602      	movs	r6, #2
 8003bae:	e7f0      	b.n	8003b92 <bme680_get_sensor_data+0x322>
				dev->new_fields = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003bb6:	e7ec      	b.n	8003b92 <bme680_get_sensor_data+0x322>
 8003bb8:	000186a0 	.word	0x000186a0
 8003bbc:	08029d54 	.word	0x08029d54

08003bc0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8003bc0:	4901      	ldr	r1, [pc, #4]	@ (8003bc8 <vApplicationIdleHook+0x8>)
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f00a bf44 	b.w	800ea50 <vTaskSetApplicationTaskTag>
 8003bc8:	0800119d 	.word	0x0800119d

08003bcc <user_i2c_read>:
struct bme680_field_data data;
struct bme680_dev gas_sensor;


int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
    {
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}

      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bce:	0047      	lsls	r7, r0, #1
    {
 8003bd0:	b085      	sub	sp, #20
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bd2:	260a      	movs	r6, #10
    {
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	f88d 100f 	strb.w	r1, [sp, #15]
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f10d 020f 	add.w	r2, sp, #15
 8003be2:	4639      	mov	r1, r7
 8003be4:	480a      	ldr	r0, [pc, #40]	@ (8003c10 <user_i2c_read+0x44>)
 8003be6:	9600      	str	r6, [sp, #0]
 8003be8:	f005 feb0 	bl	800994c <HAL_I2C_Master_Transmit>
 8003bec:	b968      	cbnz	r0, 8003c0a <user_i2c_read+0x3e>
      if(HAL_I2C_Master_Receive(&hi2c1, (dev_id << 1) | 0x01, reg_data, len, 10) != HAL_OK) return -1;
 8003bee:	462b      	mov	r3, r5
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	f047 0101 	orr.w	r1, r7, #1
 8003bf6:	4806      	ldr	r0, [pc, #24]	@ (8003c10 <user_i2c_read+0x44>)
 8003bf8:	9600      	str	r6, [sp, #0]
 8003bfa:	f005 ff3d 	bl	8009a78 <HAL_I2C_Master_Receive>
 8003bfe:	3800      	subs	r0, #0
 8003c00:	bf18      	it	ne
 8003c02:	2001      	movne	r0, #1
 8003c04:	4240      	negs	r0, r0
      return 0;
    }
 8003c06:	b005      	add	sp, #20
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0e:	e7fa      	b.n	8003c06 <user_i2c_read+0x3a>
 8003c10:	200124cc 	.word	0x200124cc

08003c14 <user_delay_ms>:
    void user_delay_ms(uint32_t period)
    {
      HAL_Delay(period);
 8003c14:	f004 b930 	b.w	8007e78 <HAL_Delay>

08003c18 <user_i2c_write>:
    }

    int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
    {
 8003c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

      int8_t *buf;
      buf = malloc(len +1);
 8003c1c:	f103 0901 	add.w	r9, r3, #1
    {
 8003c20:	461c      	mov	r4, r3
 8003c22:	4606      	mov	r6, r0
 8003c24:	4688      	mov	r8, r1
 8003c26:	4617      	mov	r7, r2
      buf = malloc(len +1);
 8003c28:	4648      	mov	r0, r9
 8003c2a:	f025 f811 	bl	8028c50 <malloc>
      buf[0] = reg_addr;
      memcpy(buf +1, reg_data, len);
 8003c2e:	4622      	mov	r2, r4
      buf = malloc(len +1);
 8003c30:	4605      	mov	r5, r0
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c32:	f04f 34ff 	mov.w	r4, #4294967295
      memcpy(buf +1, reg_data, len);
 8003c36:	4639      	mov	r1, r7
      buf[0] = reg_addr;
 8003c38:	f800 8b01 	strb.w	r8, [r0], #1
      memcpy(buf +1, reg_data, len);
 8003c3c:	f025 fbb7 	bl	80293ae <memcpy>
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c40:	462a      	mov	r2, r5
 8003c42:	0071      	lsls	r1, r6, #1
 8003c44:	4808      	ldr	r0, [pc, #32]	@ (8003c68 <user_i2c_write+0x50>)
 8003c46:	fa1f f389 	uxth.w	r3, r9
 8003c4a:	9400      	str	r4, [sp, #0]
 8003c4c:	f005 fe7e 	bl	800994c <HAL_I2C_Master_Transmit>
 8003c50:	4606      	mov	r6, r0
 8003c52:	b930      	cbnz	r0, 8003c62 <user_i2c_write+0x4a>
      free(buf);
 8003c54:	4628      	mov	r0, r5
 8003c56:	f025 f803 	bl	8028c60 <free>
      return 0;
 8003c5a:	4630      	mov	r0, r6
    }
 8003c5c:	b003      	add	sp, #12
 8003c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003c62:	4620      	mov	r0, r4
 8003c64:	e7fa      	b.n	8003c5c <user_i2c_write+0x44>
 8003c66:	bf00      	nop
 8003c68:	200124cc 	.word	0x200124cc

08003c6c <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
	for(;;)
	{
		rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003c6c:	4d1a      	ldr	r5, [pc, #104]	@ (8003cd8 <StartDefaultTask+0x6c>)
 8003c6e:	4e1b      	ldr	r6, [pc, #108]	@ (8003cdc <StartDefaultTask+0x70>)
{
 8003c70:	b508      	push	{r3, lr}
		rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003c72:	4c1b      	ldr	r4, [pc, #108]	@ (8003ce0 <StartDefaultTask+0x74>)
 8003c74:	4629      	mov	r1, r5
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff fdfa 	bl	8003870 <bme680_get_sensor_data>

		temperature = data.temperature/100;
 8003c7c:	edd4 6a01 	vldr	s13, [r4, #4]
 8003c80:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8003ce4 <StartDefaultTask+0x78>
 8003c84:	4b18      	ldr	r3, [pc, #96]	@ (8003ce8 <StartDefaultTask+0x7c>)
 8003c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		humidity = data.humidity/1000;
 8003c8a:	ed94 6a03 	vldr	s12, [r4, #12]
 8003c8e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8003cec <StartDefaultTask+0x80>
		rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003c92:	7030      	strb	r0, [r6, #0]
		temperature = data.temperature/100;
 8003c94:	ed83 7a00 	vstr	s14, [r3]
		humidity = data.humidity/1000;
 8003c98:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003c9c:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <StartDefaultTask+0x84>)
		pressure = data.pressure / 100;
 8003c9e:	edd4 6a02 	vldr	s13, [r4, #8]
		humidity = data.humidity/1000;
 8003ca2:	ed83 7a00 	vstr	s14, [r3]
		pressure = data.pressure / 100;
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <StartDefaultTask+0x88>)
 8003cac:	ed83 7a00 	vstr	s14, [r3]

		if(data.status & BME680_GASM_VALID_MSK)
 8003cb0:	7823      	ldrb	r3, [r4, #0]
 8003cb2:	069b      	lsls	r3, r3, #26
			gas_resistance = data.gas_resistance;
 8003cb4:	bf42      	ittt	mi
 8003cb6:	4b10      	ldrmi	r3, [pc, #64]	@ (8003cf8 <StartDefaultTask+0x8c>)
 8003cb8:	6922      	ldrmi	r2, [r4, #16]
 8003cba:	601a      	strmi	r2, [r3, #0]

		if (gas_sensor.power_mode == BME680_FORCED_MODE)
 8003cbc:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d103      	bne.n	8003ccc <StartDefaultTask+0x60>
		{
			rslt = bme680_set_sensor_mode(&gas_sensor);
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7ff fbea 	bl	800349e <bme680_set_sensor_mode>
 8003cca:	7030      	strb	r0, [r6, #0]
		}
		osDelay(1000);
 8003ccc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cd0:	f009 f8c2 	bl	800ce58 <osDelay>
		rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8003cd4:	e7cd      	b.n	8003c72 <StartDefaultTask+0x6>
 8003cd6:	bf00      	nop
 8003cd8:	2001215c 	.word	0x2001215c
 8003cdc:	200121c8 	.word	0x200121c8
 8003ce0:	200121b4 	.word	0x200121b4
 8003ce4:	42c80000 	.word	0x42c80000
 8003ce8:	200121d8 	.word	0x200121d8
 8003cec:	447a0000 	.word	0x447a0000
 8003cf0:	200121d4 	.word	0x200121d4
 8003cf4:	200121d0 	.word	0x200121d0
 8003cf8:	200121cc 	.word	0x200121cc

08003cfc <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003cfc:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003cfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003d02:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d08:	4817      	ldr	r0, [pc, #92]	@ (8003d68 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003d0a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d0c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d0e:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d10:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d12:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d14:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003d18:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8003d1a:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d1c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d1e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d22:	f007 fbb3 	bl	800b48c <HAL_QSPI_Command>
 8003d26:	b9e0      	cbnz	r0, 8003d62 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8003d28:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003d2a:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d30:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d32:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003d34:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003d38:	2310      	movs	r3, #16
 8003d3a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d3e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d40:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d42:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003d46:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d4a:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003d4c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d52:	f007 fc9c 	bl	800b68e <HAL_QSPI_AutoPolling>
 8003d56:	3800      	subs	r0, #0
 8003d58:	bf18      	it	ne
 8003d5a:	2001      	movne	r0, #1
}
 8003d5c:	b015      	add	sp, #84	@ 0x54
 8003d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003d62:	2001      	movs	r0, #1
 8003d64:	e7fa      	b.n	8003d5c <QSPI_WriteEnable.constprop.0+0x60>
 8003d66:	bf00      	nop
 8003d68:	2001226c 	.word	0x2001226c

08003d6c <SystemClock_Config>:
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d70:	2210      	movs	r2, #16
 8003d72:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d74:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d76:	a809      	add	r0, sp, #36	@ 0x24
 8003d78:	f025 f9e2 	bl	8029140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d7c:	2214      	movs	r2, #20
 8003d7e:	2100      	movs	r1, #0
 8003d80:	a802      	add	r0, sp, #8
 8003d82:	f025 f9dd 	bl	8029140 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003d88:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d8a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d9e:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <SystemClock_Config+0x98>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003da6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003da8:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003db8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003dc0:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003dc4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003dc8:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003dcc:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003dce:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003dd2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dd4:	f007 fcee 	bl	800b7b4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003dd8:	f007 f9ec 	bl	800b1b4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ddc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dde:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003de0:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003de2:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003de6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003dea:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003df2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003df4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003df6:	f007 fecf 	bl	800bb98 <HAL_RCC_ClockConfig>
}
 8003dfa:	b014      	add	sp, #80	@ 0x50
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000

08003e08 <MX_I2C4_Init>:
{
 8003e08:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e0c:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8003e0e:	4c0d      	ldr	r4, [pc, #52]	@ (8003e44 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003e10:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003e12:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e14:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003e16:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e1a:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8003e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e20:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e24:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003e28:	f005 fd26 	bl	8009878 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f006 f879 	bl	8009f26 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003e34:	4629      	mov	r1, r5
 8003e36:	4620      	mov	r0, r4
}
 8003e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003e3c:	f006 b899 	b.w	8009f72 <HAL_I2CEx_ConfigDigitalFilter>
 8003e40:	40006000 	.word	0x40006000
 8003e44:	20012478 	.word	0x20012478
 8003e48:	00c0eaff 	.word	0x00c0eaff

08003e4c <main>:
{
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	b0bd      	sub	sp, #244	@ 0xf4

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003e52:	2210      	movs	r2, #16
 8003e54:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003e56:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003e58:	a82e      	add	r0, sp, #184	@ 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e5a:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003e5c:	f025 f970 	bl	8029140 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003e60:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003e62:	f004 fae7 	bl	8008434 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003e66:	f04f 5e00 	mov.w	lr, #536870912	@ 0x20000000
 8003e6a:	4bcb      	ldr	r3, [pc, #812]	@ (8004198 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e6c:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003e6e:	f8ad 40b8 	strh.w	r4, [sp, #184]	@ 0xb8
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003e72:	f240 1701 	movw	r7, #257	@ 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003e76:	e9cd e32f 	strd	lr, r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003e7a:	4bc8      	ldr	r3, [pc, #800]	@ (800419c <main+0x350>)
 8003e7c:	9331      	str	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e7e:	f004 faf7 	bl	8008470 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003e82:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003e86:	f88d 40b9 	strb.w	r4, [sp, #185]	@ 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e8a:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e8c:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003e8e:	932f      	str	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003e90:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003e94:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003e98:	f8ad 40c6 	strh.w	r4, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003e9c:	f004 fae8 	bl	8008470 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003ea0:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003ea2:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003ea4:	f88d 50c3 	strb.w	r5, [sp, #195]	@ 0xc3
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003ea8:	f88d 30b9 	strb.w	r3, [sp, #185]	@ 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003eac:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003eae:	f8ad 70c6 	strh.w	r7, [sp, #198]	@ 0xc6
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003eb2:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003eb6:	f004 fadb 	bl	8008470 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003eba:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003ebe:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003ec0:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003ec4:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003ec6:	932f      	str	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003ec8:	f88d 50b9 	strb.w	r5, [sp, #185]	@ 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003ecc:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003ed0:	f8ad 40c6 	strh.w	r4, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003ed4:	f004 facc 	bl	8008470 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003ed8:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003eda:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003edc:	f88d 60b9 	strb.w	r6, [sp, #185]	@ 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003ee0:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003ee4:	f88d 50c3 	strb.w	r5, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003ee8:	f8ad 70c6 	strh.w	r7, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003eec:	f004 fac0 	bl	8008470 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f004 faad 	bl	8008450 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003efa:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003efe:	4aa8      	ldr	r2, [pc, #672]	@ (80041a0 <main+0x354>)
 8003f00:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f08:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003f0c:	6953      	ldr	r3, [r2, #20]
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f18:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003f1c:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003f20:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003f24:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f28:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f2c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003f30:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003f34:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f36:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f3a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f3c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003f40:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f42:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8003f46:	d2f9      	bcs.n	8003f3c <main+0xf0>
    } while(sets-- != 0U);
 8003f48:	3b20      	subs	r3, #32
 8003f4a:	f113 0f20 	cmn.w	r3, #32
 8003f4e:	d1f2      	bne.n	8003f36 <main+0xea>
 8003f50:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003f54:	6953      	ldr	r3, [r2, #20]
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5a:	6153      	str	r3, [r2, #20]
 8003f5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f60:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f64:	4e8f      	ldr	r6, [pc, #572]	@ (80041a4 <main+0x358>)
  HAL_Init();
 8003f66:	f003 ff63 	bl	8007e30 <HAL_Init>
  SystemClock_Config();
 8003f6a:	f7ff feff 	bl	8003d6c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6e:	2214      	movs	r2, #20
 8003f70:	2100      	movs	r1, #0
 8003f72:	a82e      	add	r0, sp, #184	@ 0xb8
 8003f74:	f025 f8e4 	bl	8029140 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f78:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f80:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003f84:	4888      	ldr	r0, [pc, #544]	@ (80041a8 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f86:	2501      	movs	r5, #1
 8003f88:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f8c:	6333      	str	r3, [r6, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f90:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f92:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8003f96:	f04f 0802 	mov.w	r8, #2
  hdsi.Init.TXEscapeCkdiv = 4;
 8003f9a:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f9e:	f003 0310 	and.w	r3, r3, #16
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003fa2:	f44f 7980 	mov.w	r9, #256	@ 0x100
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003faa:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6333      	str	r3, [r6, #48]	@ 0x30
 8003fb2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	9305      	str	r3, [sp, #20]
 8003fba:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fbc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc2:	6333      	str	r3, [r6, #48]	@ 0x30
 8003fc4:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	9306      	str	r3, [sp, #24]
 8003fcc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fce:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6333      	str	r3, [r6, #48]	@ 0x30
 8003fd6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6333      	str	r3, [r6, #48]	@ 0x30
 8003fe8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	9308      	str	r3, [sp, #32]
 8003ff0:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ff2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff8:	6333      	str	r3, [r6, #48]	@ 0x30
 8003ffa:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	9309      	str	r3, [sp, #36]	@ 0x24
 8004002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004004:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004006:	f043 0320 	orr.w	r3, r3, #32
 800400a:	6333      	str	r3, [r6, #48]	@ 0x30
 800400c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	930a      	str	r3, [sp, #40]	@ 0x28
 8004014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004016:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401c:	6333      	str	r3, [r6, #48]	@ 0x30
 800401e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004024:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004028:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800402a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402e:	6333      	str	r3, [r6, #48]	@ 0x30
 8004030:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	930c      	str	r3, [sp, #48]	@ 0x30
 8004038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6333      	str	r3, [r6, #48]	@ 0x30
 8004042:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	930d      	str	r3, [sp, #52]	@ 0x34
 800404a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800404c:	f005 faa6 	bl	800959c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	21c0      	movs	r1, #192	@ 0xc0
 8004054:	4855      	ldr	r0, [pc, #340]	@ (80041ac <main+0x360>)
 8004056:	f005 faa1 	bl	800959c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800405a:	2200      	movs	r2, #0
 800405c:	2140      	movs	r1, #64	@ 0x40
 800405e:	4854      	ldr	r0, [pc, #336]	@ (80041b0 <main+0x364>)
 8004060:	f005 fa9c 	bl	800959c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8004064:	2200      	movs	r2, #0
 8004066:	2102      	movs	r1, #2
 8004068:	484f      	ldr	r0, [pc, #316]	@ (80041a8 <main+0x35c>)
 800406a:	f005 fa97 	bl	800959c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800406e:	a92e      	add	r1, sp, #184	@ 0xb8
 8004070:	484d      	ldr	r0, [pc, #308]	@ (80041a8 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004072:	e9cd 752e 	strd	r7, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004076:	e9cd 5530 	strd	r5, r5, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800407a:	f005 f90b 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 800407e:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004080:	a92e      	add	r1, sp, #184	@ 0xb8
 8004082:	484a      	ldr	r0, [pc, #296]	@ (80041ac <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004084:	e9cd 352e 	strd	r3, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004088:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408c:	f005 f902 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8004090:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8004092:	a92e      	add	r1, sp, #184	@ 0xb8
 8004094:	4846      	ldr	r0, [pc, #280]	@ (80041b0 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004096:	e9cd 352e 	strd	r3, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409a:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800409e:	f005 f8f9 	bl	8009294 <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80040a2:	a92e      	add	r1, sp, #184	@ 0xb8
 80040a4:	4840      	ldr	r0, [pc, #256]	@ (80041a8 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a6:	e9cd 852e 	strd	r8, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040aa:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80040ae:	f005 f8f1 	bl	8009294 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040b2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80040b4:	4622      	mov	r2, r4
 80040b6:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80040bc:	2038      	movs	r0, #56	@ 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040be:	6333      	str	r3, [r6, #48]	@ 0x30
 80040c0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80040c2:	2664      	movs	r6, #100	@ 0x64
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80040cc:	f004 f960 	bl	8008390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80040d0:	2038      	movs	r0, #56	@ 0x38
 80040d2:	f004 f98f 	bl	80083f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80040d6:	4622      	mov	r2, r4
 80040d8:	2105      	movs	r1, #5
 80040da:	2039      	movs	r0, #57	@ 0x39
 80040dc:	f004 f958 	bl	8008390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80040e0:	2039      	movs	r0, #57	@ 0x39
 80040e2:	f004 f987 	bl	80083f4 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 80040e6:	4639      	mov	r1, r7
 80040e8:	4622      	mov	r2, r4
 80040ea:	482f      	ldr	r0, [pc, #188]	@ (80041a8 <main+0x35c>)
 80040ec:	f005 fa56 	bl	800959c <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 80040f0:	2014      	movs	r0, #20
 80040f2:	f003 fec1 	bl	8007e78 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80040f6:	4639      	mov	r1, r7
 80040f8:	462a      	mov	r2, r5
 80040fa:	482b      	ldr	r0, [pc, #172]	@ (80041a8 <main+0x35c>)
 80040fc:	f005 fa4e 	bl	800959c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004100:	200a      	movs	r0, #10
 8004102:	f003 feb9 	bl	8007e78 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8004106:	2224      	movs	r2, #36	@ 0x24
 8004108:	4621      	mov	r1, r4
 800410a:	a817      	add	r0, sp, #92	@ 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 800410c:	9410      	str	r4, [sp, #64]	@ 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800410e:	f025 f817 	bl	8029140 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8004112:	2218      	movs	r2, #24
 8004114:	4621      	mov	r1, r4
 8004116:	a811      	add	r0, sp, #68	@ 0x44
  hdsi.Instance = DSI;
 8004118:	4f26      	ldr	r7, [pc, #152]	@ (80041b4 <main+0x368>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800411a:	f025 f811 	bl	8029140 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800411e:	2234      	movs	r2, #52	@ 0x34
 8004120:	4621      	mov	r1, r4
 8004122:	a82e      	add	r0, sp, #184	@ 0xb8
 8004124:	f025 f80c 	bl	8029140 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8004128:	222c      	movs	r2, #44	@ 0x2c
 800412a:	4621      	mov	r1, r4
 800412c:	a820      	add	r0, sp, #128	@ 0x80
 800412e:	f025 f807 	bl	8029140 <memset>
  hdsi.Instance = DSI;
 8004132:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <main+0x36c>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8004134:	a90e      	add	r1, sp, #56	@ 0x38
 8004136:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8004138:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800413c:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800413e:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004142:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8004146:	f004 fd59 	bl	8008bfc <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800414a:	a917      	add	r1, sp, #92	@ 0x5c
 800414c:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 800414e:	941f      	str	r4, [sp, #124]	@ 0x7c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8004150:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8004154:	e9cd 5417 	strd	r5, r4, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8004158:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800415c:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8004160:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8004164:	f004 ff76 	bl	8009054 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8004168:	f04f 0c1c 	mov.w	ip, #28
 800416c:	2321      	movs	r3, #33	@ 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 800416e:	f04f 0e0f 	mov.w	lr, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8004172:	a911      	add	r1, sp, #68	@ 0x44
 8004174:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 8004176:	e9cd c311 	strd	ip, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 800417a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 800417c:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  PhyTimings.DataLaneLP2HSTime = 25;
 8004180:	e9cd e313 	strd	lr, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8004184:	f004 ff29 	bl	8008fda <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8004188:	4651      	mov	r1, sl
 800418a:	4638      	mov	r0, r7
 800418c:	f004 ff14 	bl	8008fb8 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8004190:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004194:	4638      	mov	r0, r7
 8004196:	e011      	b.n	80041bc <main+0x370>
 8004198:	03000012 	.word	0x03000012
 800419c:	01010001 	.word	0x01010001
 80041a0:	e000ed00 	.word	0xe000ed00
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40022400 	.word	0x40022400
 80041ac:	40020800 	.word	0x40020800
 80041b0:	40021400 	.word	0x40021400
 80041b4:	20012520 	.word	0x20012520
 80041b8:	40016c00 	.word	0x40016c00
 80041bc:	f005 f854 	bl	8009268 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 80041c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041c4:	4638      	mov	r0, r7
 80041c6:	f004 fcb6 	bl	8008b36 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80041ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80041ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80041d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80041d6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80041da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80041de:	f8cd 80e8 	str.w	r8, [sp, #232]	@ 0xe8
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80041e2:	e9cd 932e 	strd	r9, r3, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80041e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80041ea:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80041ee:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80041f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041f6:	e9cd 1332 	strd	r1, r3, [sp, #200]	@ 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80041fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80041fe:	a92e      	add	r1, sp, #184	@ 0xb8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004200:	e9cd 0334 	strd	r0, r3, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8004204:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004208:	4638      	mov	r0, r7
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800420a:	e9cd 6336 	strd	r6, r3, [sp, #216]	@ 0xd8
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800420e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  hltdc.Instance = LTDC;
 8004212:	4ec9      	ldr	r6, [pc, #804]	@ (8004538 <main+0x6ec>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8004214:	e9cd c338 	strd	ip, r3, [sp, #224]	@ 0xe0
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8004218:	f004 fe9a 	bl	8008f50 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800421c:	23c8      	movs	r3, #200	@ 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800421e:	a920      	add	r1, sp, #128	@ 0x80
 8004220:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8004222:	952a      	str	r5, [sp, #168]	@ 0xa8
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8004224:	e9cd 3922 	strd	r3, r9, [sp, #136]	@ 0x88
  CmdCfg.ColorCoding = DSI_RGB565;
 8004228:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800422c:	e9cd 4a24 	strd	r4, sl, [sp, #144]	@ 0x90
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004230:	e9cd 8426 	strd	r8, r4, [sp, #152]	@ 0x98
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8004234:	e9cd 4428 	strd	r4, r4, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8004238:	f004 fe18 	bl	8008e6c <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800423c:	4621      	mov	r1, r4
 800423e:	4638      	mov	r0, r7
 8004240:	f004 fe03 	bl	8008e4a <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004244:	4621      	mov	r1, r4
 8004246:	2234      	movs	r2, #52	@ 0x34
 8004248:	a820      	add	r0, sp, #128	@ 0x80
 800424a:	f024 ff79 	bl	8029140 <memset>
  hltdc.Instance = LTDC;
 800424e:	4abb      	ldr	r2, [pc, #748]	@ (800453c <main+0x6f0>)
  hltdc.Init.AccumulatedActiveH = 482;
 8004250:	f04f 0eca 	mov.w	lr, #202	@ 0xca
  hltdc.Init.TotalHeigh = 483;
 8004254:	23cb      	movs	r3, #203	@ 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004256:	4630      	mov	r0, r6
  hltdc.Init.AccumulatedVBP = 2;
 8004258:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Blue = 0;
 800425c:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 800425e:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004262:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 8004266:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800426a:	e9c6 e209 	strd	lr, r2, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 800426e:	f240 12e3 	movw	r2, #483	@ 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004272:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 8004276:	e9c6 320b 	strd	r3, r2, [r6, #44]	@ 0x2c
  hltdc.Init.HorizontalSync = 1;
 800427a:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 800427e:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004282:	f006 fe61 	bl	800af48 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8004286:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004288:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  pLayerCfg.WindowX1 = 200;
 800428c:	23c8      	movs	r3, #200	@ 0xc8
  pLayerCfg.WindowY1 = 480;
 800428e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  pLayerCfg.WindowX0 = 0;
 8004292:	9420      	str	r4, [sp, #128]	@ 0x80
  pLayerCfg.Backcolor.Blue = 0;
 8004294:	f8ad 40b0 	strh.w	r4, [sp, #176]	@ 0xb0
  pLayerCfg.ImageHeight = 480;
 8004298:	922b      	str	r2, [sp, #172]	@ 0xac
  pLayerCfg.Backcolor.Red = 0;
 800429a:	f88d 40b2 	strb.w	r4, [sp, #178]	@ 0xb2
  pLayerCfg.Alpha0 = 0;
 800429e:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80042a2:	2105      	movs	r1, #5
 80042a4:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xC0000000;
 80042a8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80042ac:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 80042ae:	e9cd 1329 	strd	r1, r3, [sp, #164]	@ 0xa4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80042b2:	e9cd 2823 	strd	r2, r8, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80042b6:	a920      	add	r1, sp, #128	@ 0x80
 80042b8:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 80042ba:	e9cd 3421 	strd	r3, r4, [sp, #132]	@ 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80042be:	f006 ff0f 	bl	800b0e0 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 80042c2:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 80042c4:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 80042c6:	6993      	ldr	r3, [r2, #24]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 80042ce:	f004 ff27 	bl	8009120 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 80042d2:	4629      	mov	r1, r5
 80042d4:	4640      	mov	r0, r8
 80042d6:	f003 fb39 	bl	800794c <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 80042da:	2328      	movs	r3, #40	@ 0x28
 80042dc:	2215      	movs	r2, #21
 80042de:	4621      	mov	r1, r4
 80042e0:	4638      	mov	r0, r7
 80042e2:	9400      	str	r4, [sp, #0]
 80042e4:	f004 ff4f 	bl	8009186 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80042e8:	a92e      	add	r1, sp, #184	@ 0xb8
 80042ea:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80042ec:	9438      	str	r4, [sp, #224]	@ 0xe0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042ee:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80042f0:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80042f4:	e9cd 4430 	strd	r4, r4, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80042f8:	e9cd 4432 	strd	r4, r4, [sp, #200]	@ 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80042fc:	e9cd 4434 	strd	r4, r4, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8004300:	e9cd 4436 	strd	r4, r4, [sp, #216]	@ 0xd8
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004304:	f004 fe24 	bl	8008f50 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8004308:	4622      	mov	r2, r4
 800430a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800430e:	4630      	mov	r0, r6
 8004310:	f006 ff14 	bl	800b13c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8004314:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004316:	4e8a      	ldr	r6, [pc, #552]	@ (8004540 <main+0x6f4>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004318:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 800431c:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800431e:	a92e      	add	r1, sp, #184	@ 0xb8
 8004320:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 8004322:	432b      	orrs	r3, r5
 8004324:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004326:	4b87      	ldr	r3, [pc, #540]	@ (8004544 <main+0x6f8>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004328:	62b4      	str	r4, [r6, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800432a:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800432e:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004332:	2340      	movs	r3, #64	@ 0x40
 8004334:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8004338:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800433c:	f44f 7740 	mov.w	r7, #768	@ 0x300
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004340:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004348:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800434c:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800434e:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 8004352:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  SdramTiming.WriteRecoveryTime = 2;
 8004356:	e9cd 3831 	strd	r3, r8, [sp, #196]	@ 0xc4
  SdramTiming.RCDDelay = 3;
 800435a:	e9cd 8b33 	strd	r8, fp, [sp, #204]	@ 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800435e:	f007 ff95 	bl	800c28c <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004366:	a920      	add	r1, sp, #128	@ 0x80
 8004368:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 800436a:	9411      	str	r4, [sp, #68]	@ 0x44
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800436c:	e9cd 5920 	strd	r5, r9, [sp, #128]	@ 0x80
    Command->ModeRegisterDefinition = 0;
 8004370:	e9cd 5422 	strd	r5, r4, [sp, #136]	@ 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004374:	f007 ffaa 	bl	800c2cc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8004378:	4628      	mov	r0, r5
 800437a:	f003 fd7d 	bl	8007e78 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800437e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004382:	a920      	add	r1, sp, #128	@ 0x80
 8004384:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004386:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
    Command->ModeRegisterDefinition = 0;
 800438a:	e9cd 5422 	strd	r5, r4, [sp, #136]	@ 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800438e:	f007 ff9d 	bl	800c2cc <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 8004392:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8004394:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004398:	a920      	add	r1, sp, #128	@ 0x80
 800439a:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 800439c:	e9cd 3422 	strd	r3, r4, [sp, #136]	@ 0x88
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043a0:	e9cd b920 	strd	fp, r9, [sp, #128]	@ 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80043a4:	f007 ff92 	bl	800c2cc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80043a8:	f44f 730c 	mov.w	r3, #560	@ 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80043ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043b0:	a920      	add	r1, sp, #128	@ 0x80
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80043b2:	9311      	str	r3, [sp, #68]	@ 0x44
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80043b4:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 80043b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    Command->AutoRefreshNumber      = 1;
 80043b8:	9522      	str	r5, [sp, #136]	@ 0x88
    Command->ModeRegisterDefinition = tmpmrd;
 80043ba:	9323      	str	r3, [sp, #140]	@ 0x8c
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043bc:	e9cd a920 	strd	sl, r9, [sp, #128]	@ 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80043c0:	f007 ff84 	bl	800c2cc <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80043c4:	f240 712a 	movw	r1, #1834	@ 0x72a
 80043c8:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 80043ca:	4e5f      	ldr	r6, [pc, #380]	@ (8004548 <main+0x6fc>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80043cc:	f007 ff9d 	bl	800c30a <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80043d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80043d4:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80043d8:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80043da:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 80043dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80043e0:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 80043e2:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80043e6:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80043e8:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80043ec:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80043f0:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80043f4:	f006 fff8 	bl	800b3e8 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80043f8:	9734      	str	r7, [sp, #208]	@ 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 80043fa:	2766      	movs	r7, #102	@ 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004400:	a92e      	add	r1, sp, #184	@ 0xb8
 8004402:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004404:	972e      	str	r7, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_NONE;
 8004406:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8004408:	9433      	str	r4, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800440a:	943b      	str	r4, [sp, #236]	@ 0xec
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800440c:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004410:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004414:	f007 f83a 	bl	800b48c <HAL_QSPI_Command>
 8004418:	2800      	cmp	r0, #0
 800441a:	f040 80ba 	bne.w	8004592 <main+0x746>
  s_command.Instruction = RESET_MEMORY_CMD;
 800441e:	2499      	movs	r4, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004424:	a92e      	add	r1, sp, #184	@ 0xb8
 8004426:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8004428:	942e      	str	r4, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800442a:	f007 f82f 	bl	800b48c <HAL_QSPI_Command>
 800442e:	2800      	cmp	r0, #0
 8004430:	f040 80af 	bne.w	8004592 <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004434:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443c:	a92e      	add	r1, sp, #184	@ 0xb8
 800443e:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004440:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004442:	972e      	str	r7, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004444:	f007 f822 	bl	800b48c <HAL_QSPI_Command>
 8004448:	2800      	cmp	r0, #0
 800444a:	f040 80a2 	bne.w	8004592 <main+0x746>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004452:	a92e      	add	r1, sp, #184	@ 0xb8
 8004454:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8004456:	942e      	str	r4, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004458:	f007 f818 	bl	800b48c <HAL_QSPI_Command>
 800445c:	4604      	mov	r4, r0
 800445e:	2800      	cmp	r0, #0
 8004460:	f040 8097 	bne.w	8004592 <main+0x746>
  HAL_Delay( 1000 );
 8004464:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004468:	f003 fd06 	bl	8007e78 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800446c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004470:	aa20      	add	r2, sp, #128	@ 0x80
 8004472:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004474:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004476:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800447a:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 800447c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004480:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8004482:	2305      	movs	r3, #5
 8004484:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8004486:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800448a:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800448c:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 8004490:	e9cd 4520 	strd	r4, r5, [sp, #128]	@ 0x80
  s_config.StatusBytesSize = 1;
 8004494:	e9cd 5423 	strd	r5, r4, [sp, #140]	@ 0x8c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004498:	f007 f8f9 	bl	800b68e <HAL_QSPI_AutoPolling>
 800449c:	2800      	cmp	r0, #0
 800449e:	d178      	bne.n	8004592 <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DummyCycles       = 0;
 80044a4:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044ac:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80044ae:	2305      	movs	r3, #5
 80044b0:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80044b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044b6:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80044ba:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044be:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044c2:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80044c4:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044c6:	f006 ffe1 	bl	800b48c <HAL_QSPI_Command>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d161      	bne.n	8004592 <main+0x746>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d2:	a917      	add	r1, sp, #92	@ 0x5c
 80044d4:	4630      	mov	r0, r6
 80044d6:	f007 f87a 	bl	800b5ce <HAL_QSPI_Receive>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d159      	bne.n	8004592 <main+0x746>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044de:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 80044e2:	9037      	str	r0, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 80044e4:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044ea:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80044ec:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044ee:	903b      	str	r0, [sp, #236]	@ 0xec
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f0:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80044f2:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044f4:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80044f8:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044fc:	4630      	mov	r0, r6
 80044fe:	f006 ffc5 	bl	800b48c <HAL_QSPI_Command>
 8004502:	2800      	cmp	r0, #0
 8004504:	d145      	bne.n	8004592 <main+0x746>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004506:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8004508:	462c      	mov	r4, r5
 800450a:	9523      	str	r5, [sp, #140]	@ 0x8c
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800450c:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004510:	9324      	str	r3, [sp, #144]	@ 0x90
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004512:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004516:	aa20      	add	r2, sp, #128	@ 0x80
 8004518:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800451a:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800451c:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800451e:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8004520:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004524:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004526:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800452a:	9537      	str	r5, [sp, #220]	@ 0xdc
  s_config.Mask            = MX25L512_SR_WREN;
 800452c:	e9cd 8820 	strd	r8, r8, [sp, #128]	@ 0x80
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004530:	f007 f8ad 	bl	800b68e <HAL_QSPI_AutoPolling>
 8004534:	bb68      	cbnz	r0, 8004592 <main+0x746>
 8004536:	e009      	b.n	800454c <main+0x700>
 8004538:	200122b8 	.word	0x200122b8
 800453c:	40016800 	.word	0x40016800
 8004540:	200121ec 	.word	0x200121ec
 8004544:	a0000140 	.word	0xa0000140
 8004548:	2001226c 	.word	0x2001226c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800454c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DummyCycles       = 0;
 8004550:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004558:	9334      	str	r3, [sp, #208]	@ 0xd0
  reg |= MX25L512_SR_QUADEN;
 800455a:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800455e:	942e      	str	r4, [sp, #184]	@ 0xb8
  reg |= MX25L512_SR_QUADEN;
 8004560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004564:	9537      	str	r5, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004566:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800456a:	e9cd 4038 	strd	r4, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800456e:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004572:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 8004574:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004578:	f006 ff88 	bl	800b48c <HAL_QSPI_Command>
 800457c:	b948      	cbnz	r0, 8004592 <main+0x746>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800457e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004582:	a917      	add	r1, sp, #92	@ 0x5c
 8004584:	4630      	mov	r0, r6
 8004586:	f006 ffc6 	bl	800b516 <HAL_QSPI_Transmit>
 800458a:	b910      	cbnz	r0, 8004592 <main+0x746>
  HAL_Delay( 40 );
 800458c:	2028      	movs	r0, #40	@ 0x28
 800458e:	f003 fc73 	bl	8007e78 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004592:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	a92e      	add	r1, sp, #184	@ 0xb8
 800459c:	48b6      	ldr	r0, [pc, #728]	@ (8004878 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800459e:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = ENTER_QUAD_CMD;
 80045a0:	2335      	movs	r3, #53	@ 0x35
 80045a2:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045a4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045a6:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DataMode          = QSPI_DATA_NONE;
 80045aa:	9337      	str	r3, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 80045ac:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045ae:	933b      	str	r3, [sp, #236]	@ 0xec
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045b0:	e9cd 3339 	strd	r3, r3, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045b4:	f006 ff6a 	bl	800b48c <HAL_QSPI_Command>
 80045b8:	b9d0      	cbnz	r0, 80045f0 <main+0x7a4>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	2341      	movs	r3, #65	@ 0x41
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80045be:	9024      	str	r0, [sp, #144]	@ 0x90
  s_config.Interval        = 0x10;
 80045c0:	2001      	movs	r0, #1
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045c2:	aa20      	add	r2, sp, #128	@ 0x80
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80045c4:	e9cd 1320 	strd	r1, r3, [sp, #128]	@ 0x80
  s_config.Interval        = 0x10;
 80045c8:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045ca:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.Interval        = 0x10;
 80045cc:	e9cd 3022 	strd	r3, r0, [sp, #136]	@ 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045d4:	48a8      	ldr	r0, [pc, #672]	@ (8004878 <main+0xa2c>)
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80045d6:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80045dc:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80045de:	2305      	movs	r3, #5
 80045e0:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045e2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80045e6:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045ec:	f007 f84f 	bl	800b68e <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80045f0:	23b7      	movs	r3, #183	@ 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045f2:	f44f 7440 	mov.w	r4, #768	@ 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80045f6:	9320      	str	r3, [sp, #128]	@ 0x80
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045f8:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80045fa:	9426      	str	r4, [sp, #152]	@ 0x98
  s_command.DataMode          = QSPI_DATA_NONE;
 80045fc:	9329      	str	r3, [sp, #164]	@ 0xa4
  s_command.DummyCycles       = 0;
 80045fe:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004600:	932d      	str	r3, [sp, #180]	@ 0xb4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004602:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004606:	e9cd 332b 	strd	r3, r3, [sp, #172]	@ 0xac
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800460a:	f7ff fb77 	bl	8003cfc <QSPI_WriteEnable.constprop.0>
 800460e:	bb18      	cbnz	r0, 8004658 <main+0x80c>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004614:	a920      	add	r1, sp, #128	@ 0x80
 8004616:	4898      	ldr	r0, [pc, #608]	@ (8004878 <main+0xa2c>)
 8004618:	f006 ff38 	bl	800b48c <HAL_QSPI_Command>
 800461c:	b9e0      	cbnz	r0, 8004658 <main+0x80c>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800461e:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8004620:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004622:	903b      	str	r0, [sp, #236]	@ 0xec
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004624:	aa17      	add	r2, sp, #92	@ 0x5c
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004626:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004628:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  s_config.Match           = 0;
 800462c:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800462e:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004630:	9337      	str	r3, [sp, #220]	@ 0xdc
  s_config.Mask            = MX25L512_SR_WIP;
 8004632:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004634:	9434      	str	r4, [sp, #208]	@ 0xd0
  s_config.Mask            = MX25L512_SR_WIP;
 8004636:	9318      	str	r3, [sp, #96]	@ 0x60
  s_config.StatusBytesSize = 1;
 8004638:	e9cd 301a 	strd	r3, r0, [sp, #104]	@ 0x68
  s_config.Interval        = 0x10;
 800463c:	2310      	movs	r3, #16
 800463e:	9319      	str	r3, [sp, #100]	@ 0x64
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004640:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004644:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004648:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800464c:	931c      	str	r3, [sp, #112]	@ 0x70
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800464e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004652:	4889      	ldr	r0, [pc, #548]	@ (8004878 <main+0xa2c>)
 8004654:	f007 f81b 	bl	800b68e <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004658:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800465a:	f44f 7640 	mov.w	r6, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800465e:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.NbData            = 1;
 8004662:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004664:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004666:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466c:	a92e      	add	r1, sp, #184	@ 0xb8
 800466e:	4882      	ldr	r0, [pc, #520]	@ (8004878 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004670:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004672:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8004674:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004676:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800467a:	e9cd 5338 	strd	r5, r3, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800467e:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004682:	f006 ff03 	bl	800b48c <HAL_QSPI_Command>
 8004686:	2800      	cmp	r0, #0
 8004688:	d14f      	bne.n	800472a <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800468a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468e:	a920      	add	r1, sp, #128	@ 0x80
 8004690:	4879      	ldr	r0, [pc, #484]	@ (8004878 <main+0xa2c>)
 8004692:	f006 ff9c 	bl	800b5ce <HAL_QSPI_Receive>
 8004696:	2800      	cmp	r0, #0
 8004698:	d147      	bne.n	800472a <main+0x8de>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800469a:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 800469c:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046a4:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 80046a6:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046a8:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046aa:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046ae:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046b2:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046b6:	4870      	ldr	r0, [pc, #448]	@ (8004878 <main+0xa2c>)
 80046b8:	f006 fee8 	bl	800b48c <HAL_QSPI_Command>
 80046bc:	bba8      	cbnz	r0, 800472a <main+0x8de>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	f10d 0181 	add.w	r1, sp, #129	@ 0x81
 80046c6:	486c      	ldr	r0, [pc, #432]	@ (8004878 <main+0xa2c>)
 80046c8:	f006 ff81 	bl	800b5ce <HAL_QSPI_Receive>
 80046cc:	bb68      	cbnz	r0, 800472a <main+0x8de>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80046ce:	f7ff fb15 	bl	8003cfc <QSPI_WriteEnable.constprop.0>
 80046d2:	bb50      	cbnz	r0, 800472a <main+0x8de>
  s_command.NbData            = 2;
 80046d4:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	22c0      	movs	r2, #192	@ 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046d8:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80046da:	952e      	str	r5, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046dc:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 80046de:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046e0:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80046e4:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046e8:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
 80046ec:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80046f0:	2103      	movs	r1, #3
 80046f2:	f89d 3081 	ldrb.w	r3, [sp, #129]	@ 0x81
 80046f6:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046fa:	485f      	ldr	r0, [pc, #380]	@ (8004878 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80046fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004700:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004704:	a92e      	add	r1, sp, #184	@ 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8004706:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004708:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800470c:	f88d 3081 	strb.w	r3, [sp, #129]	@ 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004710:	f006 febc 	bl	800b48c <HAL_QSPI_Command>
 8004714:	b948      	cbnz	r0, 800472a <main+0x8de>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471a:	a920      	add	r1, sp, #128	@ 0x80
 800471c:	4856      	ldr	r0, [pc, #344]	@ (8004878 <main+0xa2c>)
 800471e:	f006 fefa 	bl	800b516 <HAL_QSPI_Transmit>
 8004722:	b910      	cbnz	r0, 800472a <main+0x8de>
  HAL_Delay( 40 );
 8004724:	2028      	movs	r0, #40	@ 0x28
 8004726:	f003 fba7 	bl	8007e78 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800472a:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800472c:	f44f 7640 	mov.w	r6, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004730:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.NbData            = 1;
 8004734:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004736:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004738:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800473a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473e:	a92e      	add	r1, sp, #184	@ 0xb8
 8004740:	484d      	ldr	r0, [pc, #308]	@ (8004878 <main+0xa2c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004742:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004744:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8004746:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004748:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800474c:	e9cd 5338 	strd	r5, r3, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004750:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004754:	f006 fe9a 	bl	800b48c <HAL_QSPI_Command>
 8004758:	2800      	cmp	r0, #0
 800475a:	d14b      	bne.n	80047f4 <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800475c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004760:	a920      	add	r1, sp, #128	@ 0x80
 8004762:	4845      	ldr	r0, [pc, #276]	@ (8004878 <main+0xa2c>)
 8004764:	f006 ff33 	bl	800b5ce <HAL_QSPI_Receive>
 8004768:	2800      	cmp	r0, #0
 800476a:	d143      	bne.n	80047f4 <main+0x9a8>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800476c:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 800476e:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004774:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004776:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 8004778:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800477a:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800477c:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004780:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004784:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004788:	483b      	ldr	r0, [pc, #236]	@ (8004878 <main+0xa2c>)
 800478a:	f006 fe7f 	bl	800b48c <HAL_QSPI_Command>
 800478e:	bb88      	cbnz	r0, 80047f4 <main+0x9a8>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004794:	f10d 0181 	add.w	r1, sp, #129	@ 0x81
 8004798:	4837      	ldr	r0, [pc, #220]	@ (8004878 <main+0xa2c>)
 800479a:	f006 ff18 	bl	800b5ce <HAL_QSPI_Receive>
 800479e:	bb48      	cbnz	r0, 80047f4 <main+0x9a8>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80047a0:	f7ff faac 	bl	8003cfc <QSPI_WriteEnable.constprop.0>
 80047a4:	bb30      	cbnz	r0, 80047f4 <main+0x9a8>
  s_command.NbData            = 2;
 80047a6:	2302      	movs	r3, #2
 80047a8:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80047aa:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80047ac:	952e      	str	r5, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80047ae:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 80047b0:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047b2:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80047b6:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047ba:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
 80047be:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80047c2:	2106      	movs	r1, #6
 80047c4:	f89d 3081 	ldrb.w	r3, [sp, #129]	@ 0x81
 80047c8:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047cc:	482a      	ldr	r0, [pc, #168]	@ (8004878 <main+0xa2c>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047d6:	a92e      	add	r1, sp, #184	@ 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80047d8:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80047de:	f88d 3081 	strb.w	r3, [sp, #129]	@ 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047e2:	f006 fe53 	bl	800b48c <HAL_QSPI_Command>
 80047e6:	b928      	cbnz	r0, 80047f4 <main+0x9a8>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ec:	a920      	add	r1, sp, #128	@ 0x80
 80047ee:	4822      	ldr	r0, [pc, #136]	@ (8004878 <main+0xa2c>)
 80047f0:	f006 fe91 	bl	800b516 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80047f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80047f8:	2400      	movs	r4, #0
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80047fa:	aa20      	add	r2, sp, #128	@ 0x80
  hdma2d.Instance = DMA2D;
 80047fc:	4d1f      	ldr	r5, [pc, #124]	@ (800487c <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80047fe:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004800:	23ec      	movs	r3, #236	@ 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004802:	a92e      	add	r1, sp, #184	@ 0xb8
 8004804:	481c      	ldr	r0, [pc, #112]	@ (8004878 <main+0xa2c>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004806:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004808:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800480c:	943b      	str	r4, [sp, #236]	@ 0xec
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800480e:	2601      	movs	r6, #1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004810:	9335      	str	r3, [sp, #212]	@ 0xd4
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004812:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004816:	4f1a      	ldr	r7, [pc, #104]	@ (8004880 <main+0xa34>)
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004818:	9331      	str	r3, [sp, #196]	@ 0xc4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800481a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  hi2c1.Init.Timing = 0x00C0EAFF;
 800481e:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8004894 <main+0xa48>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004822:	e9cd 4336 	strd	r4, r3, [sp, #216]	@ 0xd8
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8004826:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004828:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800482c:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800482e:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004832:	f006 ff7d 	bl	800b730 <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 8004836:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <main+0xa38>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004838:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 800483a:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 800483e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8004842:	e9c5 440e 	strd	r4, r4, [r5, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8004846:	e9c5 4410 	strd	r4, r4, [r5, #64]	@ 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800484a:	e9c5 4412 	strd	r4, r4, [r5, #72]	@ 0x48
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800484e:	f004 f83f 	bl	80088d0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004852:	2101      	movs	r1, #1
 8004854:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8004856:	4d0c      	ldr	r5, [pc, #48]	@ (8004888 <main+0xa3c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004858:	f004 f8fc 	bl	8008a54 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 800485c:	f7ff fad4 	bl	8003e08 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 8004860:	f7fb ff2f 	bl	80006c2 <MX_LIBJPEG_Init>
  hcrc.Instance = CRC;
 8004864:	4809      	ldr	r0, [pc, #36]	@ (800488c <main+0xa40>)
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <main+0xa44>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004868:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 800486a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800486c:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800486e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004872:	f003 fe29 	bl	80084c8 <HAL_CRC_Init>
 8004876:	e00f      	b.n	8004898 <main+0xa4c>
 8004878:	2001226c 	.word	0x2001226c
 800487c:	2001253c 	.word	0x2001253c
 8004880:	40012000 	.word	0x40012000
 8004884:	4002b000 	.word	0x4002b000
 8004888:	200125b8 	.word	0x200125b8
 800488c:	20012594 	.word	0x20012594
 8004890:	40023000 	.word	0x40023000
 8004894:	40005400 	.word	0x40005400
  hjpeg.Instance = JPEG;
 8004898:	4b66      	ldr	r3, [pc, #408]	@ (8004a34 <main+0xbe8>)
 800489a:	4867      	ldr	r0, [pc, #412]	@ (8004a38 <main+0xbec>)
 800489c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800489e:	f005 fd1d 	bl	800a2dc <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80048a2:	2210      	movs	r2, #16
 80048a4:	4621      	mov	r1, r4
 80048a6:	a82e      	add	r0, sp, #184	@ 0xb8
 80048a8:	f024 fc4a 	bl	8029140 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048b0:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048b2:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80048b4:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80048b6:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048b8:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048bc:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80048be:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80048c0:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048c4:	616e      	str	r6, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048c6:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80048ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80048ce:	e9c5 430a 	strd	r4, r3, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048d2:	f003 fae3 	bl	8007e9c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 80048d6:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048d8:	a92e      	add	r1, sp, #184	@ 0xb8
 80048da:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80048dc:	9430      	str	r4, [sp, #192]	@ 0xc0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048de:	e9cd 362e 	strd	r3, r6, [sp, #184]	@ 0xb8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048e2:	f003 fc93 	bl	800820c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_IT(&hadc1);
 80048e6:	4628      	mov	r0, r5
 80048e8:	f003 fb7e 	bl	8007fe8 <HAL_ADC_Start_IT>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048ec:	221c      	movs	r2, #28
 80048ee:	4621      	mov	r1, r4
 80048f0:	a820      	add	r0, sp, #128	@ 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f2:	9419      	str	r4, [sp, #100]	@ 0x64
  htim1.Instance = TIM1;
 80048f4:	4d51      	ldr	r5, [pc, #324]	@ (8004a3c <main+0xbf0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f6:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048fa:	f024 fc21 	bl	8029140 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048fe:	222c      	movs	r2, #44	@ 0x2c
 8004900:	4621      	mov	r1, r4
 8004902:	a82e      	add	r0, sp, #184	@ 0xb8
 8004904:	f024 fc1c 	bl	8029140 <memset>
  htim1.Init.Prescaler = 100-1;
 8004908:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8004a84 <main+0xc38>
 800490c:	2363      	movs	r3, #99	@ 0x63
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800490e:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004910:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 100-1;
 8004912:	e9c5 c300 	strd	ip, r3, [r5]
  htim1.Init.Period = 16000-1;
 8004916:	f643 637f 	movw	r3, #15999	@ 0x3e7f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800491a:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800491e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004922:	f007 ff79 	bl	800c818 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004926:	a917      	add	r1, sp, #92	@ 0x5c
 8004928:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800492a:	9419      	str	r4, [sp, #100]	@ 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800492c:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004930:	f008 f8ea 	bl	800cb08 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 16000/2;
 8004934:	f04f 0e60 	mov.w	lr, #96	@ 0x60
 8004938:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800493c:	4622      	mov	r2, r4
 800493e:	a920      	add	r1, sp, #128	@ 0x80
 8004940:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004942:	9426      	str	r4, [sp, #152]	@ 0x98
  sConfigOC.Pulse = 16000/2;
 8004944:	e9cd e320 	strd	lr, r3, [sp, #128]	@ 0x80
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004948:	e9cd 4422 	strd	r4, r4, [sp, #136]	@ 0x88
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800494c:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004950:	f007 ffca 	bl	800c8e8 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004958:	a92e      	add	r1, sp, #184	@ 0xb8
 800495a:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800495c:	9432      	str	r4, [sp, #200]	@ 0xc8
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800495e:	9435      	str	r4, [sp, #212]	@ 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004960:	9438      	str	r4, [sp, #224]	@ 0xe0
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004962:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800496a:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  sBreakDeadTimeConfig.Break2Filter = 0;
 800496e:	e9cd 3436 	strd	r3, r4, [sp, #216]	@ 0xd8
  sBreakDeadTimeConfig.DeadTime = 0;
 8004972:	e9cd 4430 	strd	r4, r4, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004976:	f008 f911 	bl	800cb9c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800497a:	4621      	mov	r1, r4
 800497c:	4628      	mov	r0, r5
 800497e:	f008 f8c1 	bl	800cb04 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim1);
 8004982:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8004984:	4d2e      	ldr	r5, [pc, #184]	@ (8004a40 <main+0xbf4>)
  HAL_TIM_MspPostInit(&htim1);
 8004986:	f000 fb71 	bl	800506c <HAL_TIM_MspPostInit>
  hi2c1.Init.Timing = 0x00C0EAFF;
 800498a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a44 <main+0xbf8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800498c:	4628      	mov	r0, r5
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800498e:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8004990:	e9c5 8300 	strd	r8, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004994:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8004998:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800499c:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049a0:	f004 ff6a 	bl	8009878 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049a4:	4621      	mov	r1, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	f005 fabd 	bl	8009f26 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049ac:	4621      	mov	r1, r4
 80049ae:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 80049b0:	4d25      	ldr	r5, [pc, #148]	@ (8004a48 <main+0xbfc>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049b2:	f005 fade 	bl	8009f72 <HAL_I2CEx_ConfigDigitalFilter>
  MX_TouchGFX_Init();
 80049b6:	f7fb fe86 	bl	80006c6 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80049ba:	f7fb fe83 	bl	80006c4 <MX_TouchGFX_PreOSInit>
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 80049be:	2376      	movs	r3, #118	@ 0x76
    rslt = bme680_init(&gas_sensor);
 80049c0:	4628      	mov	r0, r5
    gas_sensor.power_mode = BME680_FORCED_MODE;
 80049c2:	f885 6044 	strb.w	r6, [r5, #68]	@ 0x44
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 80049c6:	706b      	strb	r3, [r5, #1]
    gas_sensor.read = user_i2c_read;
 80049c8:	4b20      	ldr	r3, [pc, #128]	@ (8004a4c <main+0xc00>)
    gas_sensor.intf = BME680_I2C_INTF;
 80049ca:	70ae      	strb	r6, [r5, #2]
    gas_sensor.read = user_i2c_read;
 80049cc:	64ab      	str	r3, [r5, #72]	@ 0x48
    gas_sensor.write = user_i2c_write;
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <main+0xc04>)
 80049d0:	64eb      	str	r3, [r5, #76]	@ 0x4c
    gas_sensor.delay_ms = user_delay_ms;
 80049d2:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <main+0xc08>)
 80049d4:	652b      	str	r3, [r5, #80]	@ 0x50
    gas_sensor.amb_temp = 25;
 80049d6:	2319      	movs	r3, #25
 80049d8:	712b      	strb	r3, [r5, #4]
    rslt = bme680_init(&gas_sensor);
 80049da:	f7fe fcac 	bl	8003336 <bme680_init>
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 80049de:	4b1e      	ldr	r3, [pc, #120]	@ (8004a58 <main+0xc0c>)
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 80049e0:	4629      	mov	r1, r5
 80049e2:	20df      	movs	r0, #223	@ 0xdf
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80049e4:	f885 603e 	strb.w	r6, [r5, #62]	@ 0x3e
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 80049e8:	63ab      	str	r3, [r5, #56]	@ 0x38
    gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 80049ea:	4b1c      	ldr	r3, [pc, #112]	@ (8004a5c <main+0xc10>)
 80049ec:	642b      	str	r3, [r5, #64]	@ 0x40
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 80049ee:	f7fe fd95 	bl	800351c <bme680_set_sensor_settings>
    rslt = bme680_set_sensor_mode(&gas_sensor);
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7fe fd53 	bl	800349e <bme680_set_sensor_mode>
    bme680_get_profile_dur(&meas_period, &gas_sensor);
 80049f8:	4629      	mov	r1, r5
 80049fa:	a82e      	add	r0, sp, #184	@ 0xb8
 80049fc:	f7fe ff04 	bl	8003808 <bme680_get_profile_dur>
  osKernelInitialize();
 8004a00:	f008 f99c 	bl	800cd3c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004a04:	4a16      	ldr	r2, [pc, #88]	@ (8004a60 <main+0xc14>)
 8004a06:	4621      	mov	r1, r4
 8004a08:	4816      	ldr	r0, [pc, #88]	@ (8004a64 <main+0xc18>)
 8004a0a:	f008 f9d1 	bl	800cdb0 <osThreadNew>
 8004a0e:	4b16      	ldr	r3, [pc, #88]	@ (8004a68 <main+0xc1c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004a10:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <main+0xc20>)
 8004a12:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004a14:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004a16:	4816      	ldr	r0, [pc, #88]	@ (8004a70 <main+0xc24>)
 8004a18:	f008 f9ca 	bl	800cdb0 <osThreadNew>
 8004a1c:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <main+0xc28>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8004a1e:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <main+0xc2c>)
 8004a20:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8004a22:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8004a24:	4815      	ldr	r0, [pc, #84]	@ (8004a7c <main+0xc30>)
 8004a26:	f008 f9c3 	bl	800cdb0 <osThreadNew>
 8004a2a:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <main+0xc34>)
 8004a2c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004a2e:	f008 f99f 	bl	800cd70 <osKernelStart>
  while (1)
 8004a32:	e7fe      	b.n	8004a32 <main+0xbe6>
 8004a34:	50051000 	.word	0x50051000
 8004a38:	20012420 	.word	0x20012420
 8004a3c:	20012220 	.word	0x20012220
 8004a40:	200124cc 	.word	0x200124cc
 8004a44:	00c0eaff 	.word	0x00c0eaff
 8004a48:	2001215c 	.word	0x2001215c
 8004a4c:	08003bcd 	.word	0x08003bcd
 8004a50:	08003c19 	.word	0x08003c19
 8004a54:	08003c15 	.word	0x08003c15
 8004a58:	02030402 	.word	0x02030402
 8004a5c:	00960140 	.word	0x00960140
 8004a60:	0802bc78 	.word	0x0802bc78
 8004a64:	08003c6d 	.word	0x08003c6d
 8004a68:	200121e8 	.word	0x200121e8
 8004a6c:	0802bc54 	.word	0x0802bc54
 8004a70:	080006d5 	.word	0x080006d5
 8004a74:	200121e4 	.word	0x200121e4
 8004a78:	0802bc30 	.word	0x0802bc30
 8004a7c:	080027fd 	.word	0x080027fd
 8004a80:	200121e0 	.word	0x200121e0
 8004a84:	40010000 	.word	0x40010000

08004a88 <HAL_ADC_ConvCpltCallback>:
{
 8004a88:	b508      	push	{r3, lr}
   uhADCxConvertedData = HAL_ADC_GetValue(hadc);
 8004a8a:	f003 fb2b 	bl	80080e4 <HAL_ADC_GetValue>
 8004a8e:	4b02      	ldr	r3, [pc, #8]	@ (8004a98 <HAL_ADC_ConvCpltCallback+0x10>)
 8004a90:	b280      	uxth	r0, r0
 8004a92:	8018      	strh	r0, [r3, #0]
}
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop
 8004a98:	200121dc 	.word	0x200121dc

08004a9c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a9c:	6802      	ldr	r2, [r0, #0]
 8004a9e:	4b03      	ldr	r3, [pc, #12]	@ (8004aac <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004aa4:	f003 b9d6 	b.w	8007e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40001000 	.word	0x40001000

08004ab0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_MspInit+0x38>)
{
 8004ab6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ab8:	210f      	movs	r1, #15
 8004aba:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ad8:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ae4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ae6:	f003 bc53 	b.w	8008390 <HAL_NVIC_SetPriority>
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800

08004af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004af0:	b510      	push	{r4, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af6:	2214      	movs	r2, #20
 8004af8:	2100      	movs	r1, #0
 8004afa:	a803      	add	r0, sp, #12
 8004afc:	f024 fb20 	bl	8029140 <memset>
  if(hadc->Instance==ADC1)
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <HAL_ADC_MspInit+0x64>)
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d123      	bne.n	8004b50 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b08:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0c:	a903      	add	r1, sp, #12
 8004b0e:	4812      	ldr	r0, [pc, #72]	@ (8004b58 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8004b1e:	9201      	str	r2, [sp, #4]
 8004b20:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b2a:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3c:	f004 fbaa 	bl	8009294 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004b40:	2012      	movs	r0, #18
 8004b42:	2200      	movs	r2, #0
 8004b44:	2105      	movs	r1, #5
 8004b46:	f003 fc23 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004b4a:	2012      	movs	r0, #18
 8004b4c:	f003 fc52 	bl	80083f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b50:	b008      	add	sp, #32
 8004b52:	bd10      	pop	{r4, pc}
 8004b54:	40012000 	.word	0x40012000
 8004b58:	40020000 	.word	0x40020000

08004b5c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004b5c:	6802      	ldr	r2, [r0, #0]
{
 8004b5e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8004b60:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <HAL_CRC_MspInit+0x28>)
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d10b      	bne.n	8004b7e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004b66:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b7e:	b002      	add	sp, #8
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023000 	.word	0x40023000

08004b88 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8004b88:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc4 <HAL_DMA2D_MspInit+0x3c>)
{
 8004b8a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8004b8c:	6802      	ldr	r2, [r0, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d115      	bne.n	8004bbe <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b92:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b96:	2105      	movs	r1, #5
 8004b98:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004ba2:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004bae:	f003 fbef 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004bb2:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004bb4:	b003      	add	sp, #12
 8004bb6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004bba:	f003 bc1b 	b.w	80083f4 <HAL_NVIC_EnableIRQ>
}
 8004bbe:	b003      	add	sp, #12
 8004bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bc4:	4002b000 	.word	0x4002b000

08004bc8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bce:	2214      	movs	r2, #20
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	a803      	add	r0, sp, #12
 8004bd4:	f024 fab4 	bl	8029140 <memset>
  if(hdsi->Instance==DSI)
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <HAL_DSI_MspInit+0x68>)
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d125      	bne.n	8004c2c <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8004be0:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004be4:	a903      	add	r1, sp, #12
 8004be6:	4813      	ldr	r0, [pc, #76]	@ (8004c34 <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bea:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004bf6:	9201      	str	r2, [sp, #4]
 8004bf8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004bfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c00:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c02:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8004c14:	230d      	movs	r3, #13
 8004c16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004c18:	f004 fb3c 	bl	8009294 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8004c1c:	2062      	movs	r0, #98	@ 0x62
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2105      	movs	r1, #5
 8004c22:	f003 fbb5 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004c26:	2062      	movs	r0, #98	@ 0x62
 8004c28:	f003 fbe4 	bl	80083f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8004c2c:	b008      	add	sp, #32
 8004c2e:	bd10      	pop	{r4, pc}
 8004c30:	40016c00 	.word	0x40016c00
 8004c34:	40022400 	.word	0x40022400

08004c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3a:	2214      	movs	r2, #20
{
 8004c3c:	b0af      	sub	sp, #188	@ 0xbc
 8004c3e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	2100      	movs	r1, #0
 8004c42:	eb0d 0002 	add.w	r0, sp, r2
 8004c46:	f024 fa7b 	bl	8029140 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c4a:	2290      	movs	r2, #144	@ 0x90
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	a80a      	add	r0, sp, #40	@ 0x28
 8004c50:	f024 fa76 	bl	8029140 <memset>
  if(hi2c->Instance==I2C1)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	4a3d      	ldr	r2, [pc, #244]	@ (8004d4c <HAL_I2C_MspInit+0x114>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d12c      	bne.n	8004cb6 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c60:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c62:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c64:	f007 f864 	bl	800bd30 <HAL_RCCEx_PeriphCLKConfig>
 8004c68:	b108      	cbz	r0, 8004c6e <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 8004c6a:	f7ff ff21 	bl	8004ab0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6e:	4c38      	ldr	r4, [pc, #224]	@ (8004d50 <HAL_I2C_MspInit+0x118>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c70:	f44f 7240 	mov.w	r2, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c74:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c76:	4837      	ldr	r0, [pc, #220]	@ (8004d54 <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c7a:	f043 0302 	orr.w	r3, r3, #2
 8004c7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c8a:	2312      	movs	r3, #18
 8004c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c96:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c98:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c9a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9c:	f004 fafa 	bl	8009294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ca0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ca2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ca6:	6423      	str	r3, [r4, #64]	@ 0x40
 8004ca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004cb2:	b02f      	add	sp, #188	@ 0xbc
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C4)
 8004cb6:	4a28      	ldr	r2, [pc, #160]	@ (8004d58 <HAL_I2C_MspInit+0x120>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d1fa      	bne.n	8004cb2 <HAL_I2C_MspInit+0x7a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cc0:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004cc2:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cc4:	f007 f834 	bl	800bd30 <HAL_RCCEx_PeriphCLKConfig>
 8004cc8:	b108      	cbz	r0, 8004cce <HAL_I2C_MspInit+0x96>
      Error_Handler();
 8004cca:	f7ff fef1 	bl	8004ab0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cce:	4c20      	ldr	r4, [pc, #128]	@ (8004d50 <HAL_I2C_MspInit+0x118>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cd0:	2712      	movs	r7, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd2:	2601      	movs	r6, #1
 8004cd4:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd8:	a905      	add	r1, sp, #20
 8004cda:	481e      	ldr	r0, [pc, #120]	@ (8004d54 <HAL_I2C_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cdc:	f043 0302 	orr.w	r3, r3, #2
 8004ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ce2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004cee:	f043 0308 	orr.w	r3, r3, #8
 8004cf2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cf4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	9303      	str	r3, [sp, #12]
 8004cfc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004d04:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d06:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004d0a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0c:	f004 fac2 	bl	8009294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d14:	a905      	add	r1, sp, #20
 8004d16:	4811      	ldr	r0, [pc, #68]	@ (8004d5c <HAL_I2C_MspInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d18:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004d1c:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004d22:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d24:	f004 fab6 	bl	8009294 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2105      	movs	r1, #5
 8004d2e:	205f      	movs	r0, #95	@ 0x5f
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d34:	6423      	str	r3, [r4, #64]	@ 0x40
 8004d36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004d40:	f003 fb26 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8004d44:	205f      	movs	r0, #95	@ 0x5f
 8004d46:	f003 fb55 	bl	80083f4 <HAL_NVIC_EnableIRQ>
}
 8004d4a:	e7b2      	b.n	8004cb2 <HAL_I2C_MspInit+0x7a>
 8004d4c:	40005400 	.word	0x40005400
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40020400 	.word	0x40020400
 8004d58:	40006000 	.word	0x40006000
 8004d5c:	40020c00 	.word	0x40020c00

08004d60 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8004d60:	4a17      	ldr	r2, [pc, #92]	@ (8004dc0 <HAL_I2C_MspDeInit+0x60>)
{
 8004d62:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8004d64:	6803      	ldr	r3, [r0, #0]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d111      	bne.n	8004d8e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004d6a:	f502 32f2 	add.w	r2, r2, #123904	@ 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d72:	4814      	ldr	r0, [pc, #80]	@ (8004dc4 <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004d74:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004d76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d7a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004d7c:	f004 fb6e 	bl	800945c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d84:	480f      	ldr	r0, [pc, #60]	@ (8004dc4 <HAL_I2C_MspDeInit+0x64>)
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8004d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004d8a:	f004 bb67 	b.w	800945c <HAL_GPIO_DeInit>
  else if(hi2c->Instance==I2C4)
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc8 <HAL_I2C_MspDeInit+0x68>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d113      	bne.n	8004dbc <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d94:	f502 32ec 	add.w	r2, r2, #120832	@ 0x1d800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004d98:	2180      	movs	r1, #128	@ 0x80
 8004d9a:	480a      	ldr	r0, [pc, #40]	@ (8004dc4 <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004d9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004da4:	f004 fb5a 	bl	800945c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004da8:	4808      	ldr	r0, [pc, #32]	@ (8004dcc <HAL_I2C_MspDeInit+0x6c>)
 8004daa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004dae:	f004 fb55 	bl	800945c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004db2:	205f      	movs	r0, #95	@ 0x5f
}
 8004db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004db8:	f003 bb2a 	b.w	8008410 <HAL_NVIC_DisableIRQ>
}
 8004dbc:	bd08      	pop	{r3, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40005400 	.word	0x40005400
 8004dc4:	40020400 	.word	0x40020400
 8004dc8:	40006000 	.word	0x40006000
 8004dcc:	40020c00 	.word	0x40020c00

08004dd0 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8004dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8004dd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_JPEG_MspInit+0xd8>)
{
 8004dd4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8004dd6:	6802      	ldr	r2, [r0, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d162      	bne.n	8004ea2 <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004ddc:	4b33      	ldr	r3, [pc, #204]	@ (8004eac <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8004de2:	4c33      	ldr	r4, [pc, #204]	@ (8004eb0 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004de4:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004de8:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004dec:	f8df e0cc 	ldr.w	lr, [pc, #204]	@ 8004ebc <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004df0:	f042 0202 	orr.w	r2, r2, #2
 8004df4:	635a      	str	r2, [r3, #52]	@ 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004df6:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004e02:	f04f 5390 	mov.w	r3, #301989888	@ 0x12000000
 8004e06:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8004e14:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e16:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8004e1e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e9c4 0309 	strd	r0, r3, [r4, #36]	@ 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004e28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004e2c:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004e2e:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004e32:	f003 fbbf 	bl	80085b4 <HAL_DMA_Init>
 8004e36:	b108      	cbz	r0, 8004e3c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8004e38:	f7ff fe3a 	bl	8004ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004e3c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004e3e:	f04f 5390 	mov.w	r3, #301989888	@ 0x12000000
 8004e42:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004e48:	63a5      	str	r5, [r4, #56]	@ 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004e4a:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8004e4c:	4c1a      	ldr	r4, [pc, #104]	@ (8004eb8 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004e52:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e5a:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e5c:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8004e64:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e66:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8004e6a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e9c4 0309 	strd	r0, r3, [r4, #36]	@ 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004e74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004e78:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004e7a:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004e7e:	f003 fb99 	bl	80085b4 <HAL_DMA_Init>
 8004e82:	b108      	cbz	r0, 8004e88 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8004e84:	f7ff fe14 	bl	8004ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e88:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2105      	movs	r1, #5
 8004e8e:	206c      	movs	r0, #108	@ 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004e90:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004e92:	f003 fa7d 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e96:	206c      	movs	r0, #108	@ 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8004e98:	b003      	add	sp, #12
 8004e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004e9e:	f003 baa9 	b.w	80083f4 <HAL_NVIC_EnableIRQ>
}
 8004ea2:	b003      	add	sp, #12
 8004ea4:	bd30      	pop	{r4, r5, pc}
 8004ea6:	bf00      	nop
 8004ea8:	50051000 	.word	0x50051000
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	200123c0 	.word	0x200123c0
 8004eb4:	40026428 	.word	0x40026428
 8004eb8:	20012360 	.word	0x20012360
 8004ebc:	40026410 	.word	0x40026410

08004ec0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	b0a6      	sub	sp, #152	@ 0x98
 8004ec4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ec6:	2290      	movs	r2, #144	@ 0x90
 8004ec8:	2100      	movs	r1, #0
 8004eca:	a802      	add	r0, sp, #8
 8004ecc:	f024 f938 	bl	8029140 <memset>
  if(hltdc->Instance==LTDC)
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <HAL_LTDC_MspInit+0x64>)
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d122      	bne.n	8004f1e <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004ed8:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004eda:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004edc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004ede:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004ee2:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004eea:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004eec:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004eee:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ef0:	f006 ff1e 	bl	800bd30 <HAL_RCCEx_PeriphCLKConfig>
 8004ef4:	b108      	cbz	r0, 8004efa <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8004ef6:	f7ff fddb 	bl	8004ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004efc:	2058      	movs	r0, #88	@ 0x58
 8004efe:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f02:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004f08:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004f14:	f003 fa3c 	bl	8008390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004f18:	2058      	movs	r0, #88	@ 0x58
 8004f1a:	f003 fa6b 	bl	80083f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004f1e:	b026      	add	sp, #152	@ 0x98
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	bf00      	nop
 8004f24:	40016800 	.word	0x40016800
 8004f28:	40023800 	.word	0x40023800

08004f2c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	2214      	movs	r2, #20
 8004f2e:	2100      	movs	r1, #0
{
 8004f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f34:	b08a      	sub	sp, #40	@ 0x28
 8004f36:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f38:	eb0d 0002 	add.w	r0, sp, r2
 8004f3c:	f024 f900 	bl	8029140 <memset>
  if(hqspi->Instance==QUADSPI)
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <HAL_QSPI_MspInit+0x100>)
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d16e      	bne.n	8005026 <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8004f48:	4b39      	ldr	r3, [pc, #228]	@ (8005030 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f4c:	2403      	movs	r4, #3
 8004f4e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8004f50:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f52:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f56:	a905      	add	r1, sp, #20
 8004f58:	4836      	ldr	r0, [pc, #216]	@ (8005034 <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8004f5a:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8004f60:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	f022 0202 	bic.w	r2, r2, #2
 8004f68:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f6c:	f042 0202 	orr.w	r2, r2, #2
 8004f70:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f74:	f002 0202 	and.w	r2, r2, #2
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f7e:	f042 0210 	orr.w	r2, r2, #16
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f86:	f002 0210 	and.w	r2, r2, #16
 8004f8a:	9201      	str	r2, [sp, #4]
 8004f8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f90:	f042 0202 	orr.w	r2, r2, #2
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f98:	f002 0202 	and.w	r2, r2, #2
 8004f9c:	9202      	str	r2, [sp, #8]
 8004f9e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa2:	f042 0204 	orr.w	r2, r2, #4
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004faa:	f002 0204 	and.w	r2, r2, #4
 8004fae:	9203      	str	r2, [sp, #12]
 8004fb0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb4:	f042 0208 	orr.w	r2, r2, #8
 8004fb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc4:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fc8:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fcc:	f004 f962 	bl	8009294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fd0:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd2:	a905      	add	r1, sp, #20
 8004fd4:	4818      	ldr	r0, [pc, #96]	@ (8005038 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fda:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fdc:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004fe0:	230a      	movs	r3, #10
 8004fe2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe4:	f004 f956 	bl	8009294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004fe8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fec:	a905      	add	r1, sp, #20
 8004fee:	4813      	ldr	r0, [pc, #76]	@ (800503c <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ff0:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff6:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ffa:	f004 f94b 	bl	8009294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffe:	a905      	add	r1, sp, #20
 8005000:	480d      	ldr	r0, [pc, #52]	@ (8005038 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005002:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005004:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005008:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500c:	f004 f942 	bl	8009294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005014:	a905      	add	r1, sp, #20
 8005016:	480a      	ldr	r0, [pc, #40]	@ (8005040 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005018:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005022:	f004 f937 	bl	8009294 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005026:	b00a      	add	sp, #40	@ 0x28
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	a0001000 	.word	0xa0001000
 8005030:	40023800 	.word	0x40023800
 8005034:	40021000 	.word	0x40021000
 8005038:	40020400 	.word	0x40020400
 800503c:	40020800 	.word	0x40020800
 8005040:	40020c00 	.word	0x40020c00

08005044 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8005044:	6802      	ldr	r2, [r0, #0]
{
 8005046:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8005048:	4b07      	ldr	r3, [pc, #28]	@ (8005068 <HAL_TIM_PWM_MspInit+0x24>)
 800504a:	429a      	cmp	r2, r3
 800504c:	d10a      	bne.n	8005064 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800504e:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8005052:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
 800505a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005064:	b002      	add	sp, #8
 8005066:	4770      	bx	lr
 8005068:	40010000 	.word	0x40010000

0800506c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800506c:	b510      	push	{r4, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005072:	2214      	movs	r2, #20
 8005074:	2100      	movs	r1, #0
 8005076:	a801      	add	r0, sp, #4
 8005078:	f024 f862 	bl	8029140 <memset>
  if(htim->Instance==TIM1)
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <HAL_TIM_MspPostInit+0x48>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d115      	bne.n	80050b0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005084:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005088:	a901      	add	r1, sp, #4
 800508a:	480b      	ldr	r0, [pc, #44]	@ (80050b8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005094:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050a8:	2301      	movs	r3, #1
 80050aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ac:	f004 f8f2 	bl	8009294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80050b0:	b006      	add	sp, #24
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40020000 	.word	0x40020000

080050bc <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80050bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80050be:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80050c0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80050c2:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80050c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005170 <HAL_SDRAM_MspInit+0xb4>)
 80050c6:	681e      	ldr	r6, [r3, #0]
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	d14f      	bne.n	800516c <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 80050cc:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050d0:	2503      	movs	r5, #3
 80050d2:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80050d4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050d6:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80050d8:	4b26      	ldr	r3, [pc, #152]	@ (8005174 <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050da:	4827      	ldr	r0, [pc, #156]	@ (8005178 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80050dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ee:	f64f 7383 	movw	r3, #65411	@ 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050f2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050fa:	f004 f8cb 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80050fe:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005102:	a901      	add	r1, sp, #4
 8005104:	481d      	ldr	r0, [pc, #116]	@ (800517c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005106:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005110:	f004 f8c0 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8005114:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005118:	a901      	add	r1, sp, #4
 800511a:	4819      	ldr	r0, [pc, #100]	@ (8005180 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800511c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005122:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005126:	f004 f8b5 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800512a:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800512e:	a901      	add	r1, sp, #4
 8005130:	4814      	ldr	r0, [pc, #80]	@ (8005184 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005132:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005134:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005138:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800513c:	f004 f8aa 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005140:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005144:	a901      	add	r1, sp, #4
 8005146:	4810      	ldr	r0, [pc, #64]	@ (8005188 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005148:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005152:	f004 f89f 	bl	8009294 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8005156:	f64f 732c 	movw	r3, #65324	@ 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800515a:	a901      	add	r1, sp, #4
 800515c:	480b      	ldr	r0, [pc, #44]	@ (800518c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800515e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005160:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005164:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005168:	f004 f894 	bl	8009294 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800516c:	b007      	add	sp, #28
 800516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005170:	20012600 	.word	0x20012600
 8005174:	40023800 	.word	0x40023800
 8005178:	40021000 	.word	0x40021000
 800517c:	40021800 	.word	0x40021800
 8005180:	40020c00 	.word	0x40020c00
 8005184:	40022000 	.word	0x40022000
 8005188:	40021400 	.word	0x40021400
 800518c:	40021c00 	.word	0x40021c00

08005190 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005190:	4b21      	ldr	r3, [pc, #132]	@ (8005218 <HAL_InitTick+0x88>)
 8005192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005194:	f042 0210 	orr.w	r2, r2, #16
{
 8005198:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800519a:	641a      	str	r2, [r3, #64]	@ 0x40
{
 800519c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 80051a0:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80051a2:	a901      	add	r1, sp, #4
 80051a4:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	9302      	str	r3, [sp, #8]
 80051ac:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80051ae:	f006 fda1 	bl	800bcf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80051b2:	9b06      	ldr	r3, [sp, #24]
 80051b4:	bb4b      	cbnz	r3, 800520a <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80051b6:	f006 fd8d 	bl	800bcd4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80051ba:	4e18      	ldr	r6, [pc, #96]	@ (800521c <HAL_InitTick+0x8c>)
 80051bc:	4b18      	ldr	r3, [pc, #96]	@ (8005220 <HAL_InitTick+0x90>)
 80051be:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80051c0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80051c4:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80051c6:	4b17      	ldr	r3, [pc, #92]	@ (8005224 <HAL_InitTick+0x94>)
 80051c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051cc:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80051ce:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 80051d0:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d6:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051d8:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 80051da:	f007 faed 	bl	800c7b8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80051de:	4604      	mov	r4, r0
 80051e0:	b980      	cbnz	r0, 8005204 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80051e2:	4630      	mov	r0, r6
 80051e4:	f007 f990 	bl	800c508 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80051e8:	4604      	mov	r4, r0
 80051ea:	b958      	cbnz	r0, 8005204 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051ec:	2036      	movs	r0, #54	@ 0x36
 80051ee:	f003 f901 	bl	80083f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051f2:	2d0f      	cmp	r5, #15
 80051f4:	d80d      	bhi.n	8005212 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80051f6:	4622      	mov	r2, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	2036      	movs	r0, #54	@ 0x36
 80051fc:	f003 f8c8 	bl	8008390 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_InitTick+0x98>)
 8005202:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8005204:	4620      	mov	r0, r4
 8005206:	b008      	add	sp, #32
 8005208:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800520a:	f006 fd63 	bl	800bcd4 <HAL_RCC_GetPCLK1Freq>
 800520e:	0040      	lsls	r0, r0, #1
 8005210:	e7d3      	b.n	80051ba <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8005212:	2401      	movs	r4, #1
 8005214:	e7f6      	b.n	8005204 <HAL_InitTick+0x74>
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	20012604 	.word	0x20012604
 8005220:	40001000 	.word	0x40001000
 8005224:	000f4240 	.word	0x000f4240
 8005228:	20000068 	.word	0x20000068

0800522c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800522c:	4770      	bx	lr

0800522e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800522e:	e7fe      	b.n	800522e <HardFault_Handler>

08005230 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005230:	e7fe      	b.n	8005230 <MemManage_Handler>

08005232 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005232:	e7fe      	b.n	8005232 <BusFault_Handler>

08005234 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005234:	e7fe      	b.n	8005234 <UsageFault_Handler>

08005236 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8005236:	4770      	bx	lr

08005238 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <ADC_IRQHandler+0x8>)
 800523a:	f002 bf58 	b.w	80080ee <HAL_ADC_IRQHandler>
 800523e:	bf00      	nop
 8005240:	200125b8 	.word	0x200125b8

08005244 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005244:	4801      	ldr	r0, [pc, #4]	@ (800524c <TIM6_DAC_IRQHandler+0x8>)
 8005246:	f007 b9a1 	b.w	800c58c <HAL_TIM_IRQHandler>
 800524a:	bf00      	nop
 800524c:	20012604 	.word	0x20012604

08005250 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8005250:	4801      	ldr	r0, [pc, #4]	@ (8005258 <DMA2_Stream0_IRQHandler+0x8>)
 8005252:	f003 ba7d 	b.w	8008750 <HAL_DMA_IRQHandler>
 8005256:	bf00      	nop
 8005258:	200123c0 	.word	0x200123c0

0800525c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 800525c:	4801      	ldr	r0, [pc, #4]	@ (8005264 <DMA2_Stream1_IRQHandler+0x8>)
 800525e:	f003 ba77 	b.w	8008750 <HAL_DMA_IRQHandler>
 8005262:	bf00      	nop
 8005264:	20012360 	.word	0x20012360

08005268 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005268:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 800526a:	f002 fdff 	bl	8007e6c <HAL_GetTick>
  diff = last - now;
 800526e:	4a05      	ldr	r2, [pc, #20]	@ (8005284 <LTDC_IRQHandler+0x1c>)
 8005270:	4905      	ldr	r1, [pc, #20]	@ (8005288 <LTDC_IRQHandler+0x20>)
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	1a1b      	subs	r3, r3, r0
 8005276:	600b      	str	r3, [r1, #0]
  last = now;
 8005278:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800527a:	4804      	ldr	r0, [pc, #16]	@ (800528c <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800527c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 8005280:	f005 bed1 	b.w	800b026 <HAL_LTDC_IRQHandler>
 8005284:	20012654 	.word	0x20012654
 8005288:	20012650 	.word	0x20012650
 800528c:	200122b8 	.word	0x200122b8

08005290 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <DMA2D_IRQHandler+0x8>)
 8005292:	f003 bb55 	b.w	8008940 <HAL_DMA2D_IRQHandler>
 8005296:	bf00      	nop
 8005298:	2001253c 	.word	0x2001253c

0800529c <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800529c:	4801      	ldr	r0, [pc, #4]	@ (80052a4 <I2C4_EV_IRQHandler+0x8>)
 800529e:	f004 be3b 	b.w	8009f18 <HAL_I2C_EV_IRQHandler>
 80052a2:	bf00      	nop
 80052a4:	20012478 	.word	0x20012478

080052a8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80052a8:	4801      	ldr	r0, [pc, #4]	@ (80052b0 <DSI_IRQHandler+0x8>)
 80052aa:	f003 bd5c 	b.w	8008d66 <HAL_DSI_IRQHandler>
 80052ae:	bf00      	nop
 80052b0:	20012520 	.word	0x20012520

080052b4 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <JPEG_IRQHandler+0x8>)
 80052b6:	f005 bd63 	b.w	800ad80 <HAL_JPEG_IRQHandler>
 80052ba:	bf00      	nop
 80052bc:	20012420 	.word	0x20012420

080052c0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80052c0:	2001      	movs	r0, #1
 80052c2:	4770      	bx	lr

080052c4 <_kill>:

int _kill(int pid, int sig)
{
 80052c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80052c6:	f024 f845 	bl	8029354 <__errno>
 80052ca:	2316      	movs	r3, #22
 80052cc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	bd08      	pop	{r3, pc}

080052d4 <_exit>:

void _exit (int status)
{
 80052d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80052d6:	f024 f83d 	bl	8029354 <__errno>
 80052da:	2316      	movs	r3, #22
 80052dc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80052de:	e7fe      	b.n	80052de <_exit+0xa>

080052e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	460d      	mov	r5, r1
 80052e4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052e6:	460e      	mov	r6, r1
 80052e8:	1b73      	subs	r3, r6, r5
 80052ea:	429c      	cmp	r4, r3
 80052ec:	dc01      	bgt.n	80052f2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80052ee:	4620      	mov	r0, r4
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80052f2:	f3af 8000 	nop.w
 80052f6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052fa:	e7f5      	b.n	80052e8 <_read+0x8>

080052fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	460d      	mov	r5, r1
 8005300:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005302:	460e      	mov	r6, r1
 8005304:	1b73      	subs	r3, r6, r5
 8005306:	429c      	cmp	r4, r3
 8005308:	dc01      	bgt.n	800530e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800530a:	4620      	mov	r0, r4
 800530c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800530e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005312:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005316:	e7f5      	b.n	8005304 <_write+0x8>

08005318 <_close>:

int _close(int file)
{
	return -1;
}
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	4770      	bx	lr

0800531e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800531e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8005322:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005324:	604b      	str	r3, [r1, #4]
}
 8005326:	4770      	bx	lr

08005328 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005328:	2001      	movs	r0, #1
 800532a:	4770      	bx	lr

0800532c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800532c:	2000      	movs	r0, #0
 800532e:	4770      	bx	lr

08005330 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8005330:	4770      	bx	lr

08005332 <_ZN23ApplicationFontProviderD0Ev>:
 8005332:	b510      	push	{r4, lr}
 8005334:	4604      	mov	r4, r0
 8005336:	2104      	movs	r1, #4
 8005338:	f023 fc37 	bl	8028baa <_ZdlPvj>
 800533c:	4620      	mov	r0, r4
 800533e:	bd10      	pop	{r4, pc}

08005340 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005340:	b508      	push	{r3, lr}
    switch (typography)
 8005342:	2903      	cmp	r1, #3
 8005344:	d80f      	bhi.n	8005366 <_ZN23ApplicationFontProvider7getFontEt+0x26>
 8005346:	e8df f001 	tbb	[pc, r1]
 800534a:	020a      	.short	0x020a
 800534c:	0a06      	.short	0x0a06
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800534e:	f002 f8e5 	bl	800751c <_ZN17TypedTextDatabase8getFontsEv>
 8005352:	6840      	ldr	r0, [r0, #4]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8005354:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005356:	f002 f8e1 	bl	800751c <_ZN17TypedTextDatabase8getFontsEv>
 800535a:	6880      	ldr	r0, [r0, #8]
 800535c:	e7fa      	b.n	8005354 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800535e:	f002 f8dd 	bl	800751c <_ZN17TypedTextDatabase8getFontsEv>
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	e7f6      	b.n	8005354 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8005366:	2000      	movs	r0, #0
 8005368:	e7f4      	b.n	8005354 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

0800536c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800536c:	4800      	ldr	r0, [pc, #0]	@ (8005370 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800536e:	4770      	bx	lr
 8005370:	0802bcb0 	.word	0x0802bcb0

08005374 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8005374:	2009      	movs	r0, #9
 8005376:	4770      	bx	lr

08005378 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005378:	b513      	push	{r0, r1, r4, lr}
 800537a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800537c:	b151      	cbz	r1, 8005394 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800537e:	6803      	ldr	r3, [r0, #0]
 8005380:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8005382:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8005384:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005388:	689c      	ldr	r4, [r3, #8]
 800538a:	f10d 0303 	add.w	r3, sp, #3
 800538e:	47a0      	blx	r4
        return glyph;
    }
 8005390:	b002      	add	sp, #8
 8005392:	bd10      	pop	{r4, pc}
            return 0;
 8005394:	4608      	mov	r0, r1
 8005396:	e7fb      	b.n	8005390 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08005398 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8005398:	89c0      	ldrh	r0, [r0, #14]
 800539a:	4770      	bx	lr

0800539c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800539c:	8a00      	ldrh	r0, [r0, #16]
 800539e:	4770      	bx	lr

080053a0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80053a0:	88c0      	ldrh	r0, [r0, #6]
 80053a2:	4770      	bx	lr

080053a4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80053a4:	8880      	ldrh	r0, [r0, #4]
 80053a6:	4770      	bx	lr

080053a8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80053a8:	7a80      	ldrb	r0, [r0, #10]
    }
 80053aa:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80053ae:	4770      	bx	lr

080053b0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80053b0:	7a80      	ldrb	r0, [r0, #10]
    }
 80053b2:	09c0      	lsrs	r0, r0, #7
 80053b4:	4770      	bx	lr

080053b6 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80053b6:	2000      	movs	r0, #0
 80053b8:	4770      	bx	lr
	...

080053bc <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80053bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80053c4 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	00000000 	.word	0x00000000

080053c8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80053c8:	4770      	bx	lr

080053ca <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80053ca:	b510      	push	{r4, lr}
 80053cc:	4604      	mov	r4, r0
    }
 80053ce:	2108      	movs	r1, #8
 80053d0:	f023 fbeb 	bl	8028baa <_ZdlPvj>
 80053d4:	4620      	mov	r0, r4
 80053d6:	bd10      	pop	{r4, pc}

080053d8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80053d8:	4770      	bx	lr

080053da <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80053da:	4770      	bx	lr

080053dc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80053dc:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	6849      	ldr	r1, [r1, #4]
 80053e4:	c303      	stmia	r3!, {r0, r1}
    }
 80053e6:	4770      	bx	lr

080053e8 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80053e8:	4770      	bx	lr

080053ea <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80053ea:	4770      	bx	lr

080053ec <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80053ec:	6041      	str	r1, [r0, #4]
    }
 80053ee:	4770      	bx	lr

080053f0 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80053f0:	2200      	movs	r2, #0
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 80053f2:	b510      	push	{r4, lr}
        {
            return Rect(0, 0, rect.width, rect.height);
 80053f4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80053f8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80053fc:	8002      	strh	r2, [r0, #0]
 80053fe:	8042      	strh	r2, [r0, #2]
 8005400:	8084      	strh	r4, [r0, #4]
 8005402:	80c1      	strh	r1, [r0, #6]
        }
 8005404:	bd10      	pop	{r4, pc}

08005406 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8005406:	4770      	bx	lr

08005408 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8005408:	4770      	bx	lr
	...

0800540c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800540e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005412:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005416:	2300      	movs	r3, #0
 8005418:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800541c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005420:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen2ScreenNoTransition();
    }
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	080056d9 	.word	0x080056d9

0800542c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800542c:	2301      	movs	r3, #1
 800542e:	7203      	strb	r3, [r0, #8]
    }
 8005430:	4770      	bx	lr

08005432 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 8005432:	4770      	bx	lr

08005434 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 8005434:	4770      	bx	lr

08005436 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
 8005436:	4770      	bx	lr

08005438 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8005438:	4770      	bx	lr

0800543a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800543a:	4770      	bx	lr

0800543c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 800543c:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 800543e:	6840      	ldr	r0, [r0, #4]
 8005440:	6803      	ldr	r3, [r0, #0]
 8005442:	3110      	adds	r1, #16
 8005444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005446:	4718      	bx	r3

08005448 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv>:
    }

    virtual void init()
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800544c:	6840      	ldr	r0, [r0, #4]
 800544e:	6803      	ldr	r3, [r0, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4798      	blx	r3
 8005454:	4604      	mov	r4, r0
        while (d)
 8005456:	b93c      	cbnz	r4, 8005468 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 8005458:	6868      	ldr	r0, [r5, #4]
 800545a:	f105 0110 	add.w	r1, r5, #16
 800545e:	6803      	ldr	r3, [r0, #0]
    }
 8005460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8005464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005466:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8005468:	88a1      	ldrh	r1, [r4, #4]
 800546a:	4620      	mov	r0, r4
 800546c:	89ab      	ldrh	r3, [r5, #12]
 800546e:	1ac9      	subs	r1, r1, r3
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	b209      	sxth	r1, r1
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005476:	4798      	blx	r3
        return nextSibling;
 8005478:	69a4      	ldr	r4, [r4, #24]
 800547a:	e7ec      	b.n	8005456 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0xe>

0800547c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800547c:	4770      	bx	lr

0800547e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800547e:	4601      	mov	r1, r0
        screenContainer->remove(solid);
 8005480:	6840      	ldr	r0, [r0, #4]
 8005482:	6803      	ldr	r3, [r0, #0]
 8005484:	3110      	adds	r1, #16
 8005486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005488:	4718      	bx	r3

0800548a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800548a:	b570      	push	{r4, r5, r6, lr}
 800548c:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
 800548e:	6840      	ldr	r0, [r0, #4]
 8005490:	6803      	ldr	r3, [r0, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4798      	blx	r3
 8005496:	4604      	mov	r4, r0
        while (d)
 8005498:	b93c      	cbnz	r4, 80054aa <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
        screenContainer->add(solid);
 800549a:	6868      	ldr	r0, [r5, #4]
 800549c:	f105 0110 	add.w	r1, r5, #16
 80054a0:	6803      	ldr	r3, [r0, #0]
    }
 80054a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 80054a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a8:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 80054aa:	88a1      	ldrh	r1, [r4, #4]
 80054ac:	4620      	mov	r0, r4
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	1ac9      	subs	r1, r1, r3
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	b209      	sxth	r1, r1
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	4798      	blx	r3
 80054ba:	69a4      	ldr	r4, [r4, #24]
 80054bc:	e7ec      	b.n	8005498 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

080054be <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
    }
 80054be:	4770      	bx	lr

080054c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80054c0:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80054c2:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80054c4:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80054c6:	68c2      	ldr	r2, [r0, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	1054      	asrs	r4, r2, #1
 80054cc:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80054d0:	07d2      	lsls	r2, r2, #31
 80054d2:	bf48      	it	mi
 80054d4:	590a      	ldrmi	r2, [r1, r4]
    }
 80054d6:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80054da:	bf48      	it	mi
 80054dc:	58d3      	ldrmi	r3, [r2, r3]
 80054de:	4718      	bx	r3

080054e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80054e0:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80054e2:	6840      	ldr	r0, [r0, #4]
 80054e4:	b130      	cbz	r0, 80054f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	b91a      	cbnz	r2, 80054f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80054ea:	68d8      	ldr	r0, [r3, #12]
 80054ec:	f000 0001 	and.w	r0, r0, #1
 80054f0:	4770      	bx	lr
 80054f2:	2001      	movs	r0, #1
    }
 80054f4:	4770      	bx	lr

080054f6 <_ZN8touchgfx12NoTransitionD0Ev>:
 80054f6:	b510      	push	{r4, lr}
 80054f8:	4604      	mov	r4, r0
 80054fa:	210c      	movs	r1, #12
 80054fc:	f023 fb55 	bl	8028baa <_ZdlPvj>
 8005500:	4620      	mov	r0, r4
 8005502:	bd10      	pop	{r4, pc}

08005504 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005504:	b510      	push	{r4, lr}
 8005506:	4604      	mov	r4, r0
 8005508:	2110      	movs	r1, #16
 800550a:	f023 fb4e 	bl	8028baa <_ZdlPvj>
 800550e:	4620      	mov	r0, r4
 8005510:	bd10      	pop	{r4, pc}

08005512 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8005512:	b510      	push	{r4, lr}
 8005514:	4604      	mov	r4, r0
 8005516:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800551a:	f023 fb46 	bl	8028baa <_ZdlPvj>
 800551e:	4620      	mov	r0, r4
 8005520:	bd10      	pop	{r4, pc}

08005522 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED0Ev>:
class CoverTransition : public Transition
 8005522:	b510      	push	{r4, lr}
 8005524:	4604      	mov	r4, r0
 8005526:	2138      	movs	r1, #56	@ 0x38
 8005528:	f023 fb3f 	bl	8028baa <_ZdlPvj>
 800552c:	4620      	mov	r0, r4
 800552e:	bd10      	pop	{r4, pc}

08005530 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8005530:	b510      	push	{r4, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	2128      	movs	r1, #40	@ 0x28
 8005536:	f023 fb38 	bl	8028baa <_ZdlPvj>
 800553a:	4620      	mov	r0, r4
 800553c:	bd10      	pop	{r4, pc}

0800553e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800553e:	b510      	push	{r4, lr}
 8005540:	4604      	mov	r4, r0
 8005542:	2138      	movs	r1, #56	@ 0x38
 8005544:	f023 fb31 	bl	8028baa <_ZdlPvj>
 8005548:	4620      	mov	r0, r4
 800554a:	bd10      	pop	{r4, pc}

0800554c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800554c:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 800554e:	f011 f841 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 8005552:	6803      	ldr	r3, [r0, #0]
    }
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	4718      	bx	r3

0800555c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800555c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800555e:	4605      	mov	r5, r0
        animationCounter++;
 8005560:	7a80      	ldrb	r0, [r0, #10]
 8005562:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8005564:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 8005566:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8005568:	4298      	cmp	r0, r3
        animationCounter++;
 800556a:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 800556c:	d905      	bls.n	800557a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 800556e:	2301      	movs	r3, #1
 8005570:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	72ab      	strb	r3, [r5, #10]
    }
 8005576:	b003      	add	sp, #12
 8005578:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800557a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 800557e:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8005580:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005584:	f012 fe5a 	bl	801823c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8005588:	07c3      	lsls	r3, r0, #31
 800558a:	d506      	bpl.n	800559a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x3e>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800558c:	2800      	cmp	r0, #0
 800558e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005592:	bfc8      	it	gt
 8005594:	2301      	movgt	r3, #1
 8005596:	4418      	add	r0, r3
 8005598:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800559a:	7aab      	ldrb	r3, [r5, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 800559c:	1b04      	subs	r4, r0, r4
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800559e:	81e8      	strh	r0, [r5, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055a0:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80055a2:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055a4:	d106      	bne.n	80055b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
 80055a6:	4b14      	ldr	r3, [pc, #80]	@ (80055f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x9c>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b11b      	cbz	r3, 80055b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80055ac:	f011 f812 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 80055b0:	f011 f816 	bl	80165e0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        : x(0), y(0), width(0), height(0)
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
            rect.width = calculatedValue;
 80055b8:	89eb      	ldrh	r3, [r5, #14]
 80055ba:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 80055be:	4b0f      	ldr	r3, [pc, #60]	@ (80055fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa0>)
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 80055c6:	f011 f805 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 80055ca:	aa02      	add	r2, sp, #8
 80055cc:	6803      	ldr	r3, [r0, #0]
 80055ce:	e912 0006 	ldmdb	r2, {r1, r2}
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 80055d6:	6868      	ldr	r0, [r5, #4]
 80055d8:	6803      	ldr	r3, [r0, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4798      	blx	r3
 80055de:	4605      	mov	r5, r0
        while (d)
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	d0c8      	beq.n	8005576 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 80055e4:	88a9      	ldrh	r1, [r5, #4]
 80055e6:	4628      	mov	r0, r5
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	4421      	add	r1, r4
 80055ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ee:	b209      	sxth	r1, r1
 80055f0:	4798      	blx	r3
 80055f2:	69ad      	ldr	r5, [r5, #24]
 80055f4:	e7f4      	b.n	80055e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x84>
 80055f6:	bf00      	nop
 80055f8:	20027dbe 	.word	0x20027dbe
 80055fc:	20027db6 	.word	0x20027db6

08005600 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8005600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005602:	4605      	mov	r5, r0
        animationCounter++;
 8005604:	7a80      	ldrb	r0, [r0, #10]
 8005606:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8005608:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 800560a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 800560c:	4298      	cmp	r0, r3
        animationCounter++;
 800560e:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 8005610:	d905      	bls.n	800561e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8005612:	2301      	movs	r3, #1
 8005614:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	72ab      	strb	r3, [r5, #10]
    }
 800561a:	b003      	add	sp, #12
 800561c:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800561e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8005622:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8005624:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005628:	f012 fe08 	bl	801823c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 800562c:	07c3      	lsls	r3, r0, #31
 800562e:	d506      	bpl.n	800563e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3e>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005630:	2800      	cmp	r0, #0
 8005632:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005636:	bfc8      	it	gt
 8005638:	2301      	movgt	r3, #1
 800563a:	4418      	add	r0, r3
 800563c:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800563e:	7aab      	ldrb	r3, [r5, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 8005640:	1b04      	subs	r4, r0, r4
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005642:	81e8      	strh	r0, [r5, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005644:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 8005646:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005648:	d106      	bne.n	8005658 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
 800564a:	4b17      	ldr	r3, [pc, #92]	@ (80056a8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa8>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b11b      	cbz	r3, 8005658 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8005650:	f010 ffc0 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 8005654:	f010 ffc4 	bl	80165e0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8005658:	2300      	movs	r3, #0
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800565a:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 800565c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	89eb      	ldrh	r3, [r5, #14]
 8005664:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8005666:	425b      	negs	r3, r3
 8005668:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 800566c:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800566e:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8005678:	f010 ffac 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 800567c:	aa02      	add	r2, sp, #8
 800567e:	6803      	ldr	r3, [r0, #0]
 8005680:	e912 0006 	ldmdb	r2, {r1, r2}
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8005688:	6868      	ldr	r0, [r5, #4]
 800568a:	6803      	ldr	r3, [r0, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4798      	blx	r3
 8005690:	4605      	mov	r5, r0
        while (d)
 8005692:	2d00      	cmp	r5, #0
 8005694:	d0c1      	beq.n	800561a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8005696:	88a9      	ldrh	r1, [r5, #4]
 8005698:	4628      	mov	r0, r5
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	4421      	add	r1, r4
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	b209      	sxth	r1, r1
 80056a2:	4798      	blx	r3
 80056a4:	69ad      	ldr	r5, [r5, #24]
 80056a6:	e7f4      	b.n	8005692 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
 80056a8:	20027dbe 	.word	0x20027dbe
 80056ac:	20027db4 	.word	0x20027db4
 80056b0:	20027db6 	.word	0x20027db6

080056b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80056b8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80056bc:	b158      	cbz	r0, 80056d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80056be:	6803      	ldr	r3, [r0, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4798      	blx	r3
 80056c4:	b138      	cbz	r0, 80056d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80056c6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80056ca:	6803      	ldr	r3, [r0, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80056d6:	bd10      	pop	{r4, pc}

080056d8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 80056d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80056dc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80056e0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80056e2:	68b0      	ldr	r0, [r6, #8]
 80056e4:	6803      	ldr	r3, [r0, #0]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	4798      	blx	r3
 80056ea:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80056ee:	d205      	bcs.n	80056fc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 80056f0:	4b44      	ldr	r3, [pc, #272]	@ (8005804 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 80056f2:	21a3      	movs	r1, #163	@ 0xa3
 80056f4:	4a44      	ldr	r2, [pc, #272]	@ (8005808 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80056f6:	4845      	ldr	r0, [pc, #276]	@ (800580c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80056f8:	f023 fa86 	bl	8028c08 <__assert_func>
 80056fc:	6870      	ldr	r0, [r6, #4]
 80056fe:	6803      	ldr	r3, [r0, #0]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	4798      	blx	r3
 8005704:	280f      	cmp	r0, #15
 8005706:	d803      	bhi.n	8005710 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 8005708:	4b41      	ldr	r3, [pc, #260]	@ (8005810 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 800570a:	21a4      	movs	r1, #164	@ 0xa4
 800570c:	4a3e      	ldr	r2, [pc, #248]	@ (8005808 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800570e:	e7f2      	b.n	80056f6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005710:	68f0      	ldr	r0, [r6, #12]
 8005712:	6803      	ldr	r3, [r0, #0]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4798      	blx	r3
 8005718:	280b      	cmp	r0, #11
 800571a:	d803      	bhi.n	8005724 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 800571c:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 800571e:	21a5      	movs	r1, #165	@ 0xa5
 8005720:	4a39      	ldr	r2, [pc, #228]	@ (8005808 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8005722:	e7e8      	b.n	80056f6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8005724:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 800581c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8005728:	f010 ff54 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800572c:	3004      	adds	r0, #4
 800572e:	f010 ffb7 	bl	80166a0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005732:	f8d9 0000 	ldr.w	r0, [r9]
 8005736:	b110      	cbz	r0, 800573e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8005738:	6803      	ldr	r3, [r0, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4798      	blx	r3
    if (*currentTrans)
 800573e:	f8d9 0000 	ldr.w	r0, [r9]
 8005742:	b110      	cbz	r0, 800574a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8005744:	6803      	ldr	r3, [r0, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4798      	blx	r3
    if (*currentScreen)
 800574a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005820 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 800574e:	f8d8 0000 	ldr.w	r0, [r8]
 8005752:	b110      	cbz	r0, 800575a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8005754:	6803      	ldr	r3, [r0, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4798      	blx	r3
    if (*currentPresenter)
 800575a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800575e:	b110      	cbz	r0, 8005766 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4798      	blx	r3
    if (*currentScreen)
 8005766:	f8d8 0000 	ldr.w	r0, [r8]
 800576a:	b110      	cbz	r0, 8005772 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 800576c:	6803      	ldr	r3, [r0, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4798      	blx	r3
    if (*currentPresenter)
 8005772:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8005776:	b110      	cbz	r0, 800577e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8005778:	6803      	ldr	r3, [r0, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800577e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8005780:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8005782:	f04f 0b00 	mov.w	fp, #0
 8005786:	6803      	ldr	r3, [r0, #0]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	4798      	blx	r3
 800578c:	4b22      	ldr	r3, [pc, #136]	@ (8005818 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 800578e:	4604      	mov	r4, r0
 8005790:	f8c0 b004 	str.w	fp, [r0, #4]
 8005794:	f880 b008 	strb.w	fp, [r0, #8]
 8005798:	4659      	mov	r1, fp
 800579a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800579c:	68b0      	ldr	r0, [r6, #8]
 800579e:	6803      	ldr	r3, [r0, #0]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	4798      	blx	r3
 80057a4:	4605      	mov	r5, r0
 80057a6:	f001 fffb 	bl	80077a0 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80057aa:	6870      	ldr	r0, [r6, #4]
 80057ac:	4659      	mov	r1, fp
 80057ae:	6803      	ldr	r3, [r0, #0]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b2:	4798      	blx	r3
 80057b4:	4606      	mov	r6, r0
 80057b6:	4629      	mov	r1, r5
 80057b8:	f001 ffd0 	bl	800775c <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 80057bc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80057be:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80057c2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80057c4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80057c8:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80057cc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80057d0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80057d2:	f8c6 a008 	str.w	sl, [r6, #8]
 80057d6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80057d8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80057da:	4798      	blx	r3
    newPresenter->activate();
 80057dc:	6833      	ldr	r3, [r6, #0]
 80057de:	4630      	mov	r0, r6
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80057e4:	4621      	mov	r1, r4
 80057e6:	4628      	mov	r0, r5
 80057e8:	f012 fd22 	bl	8018230 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	4620      	mov	r0, r4
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	4798      	blx	r3
    newTransition->invalidate();
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	4620      	mov	r0, r4
 80057f8:	695b      	ldr	r3, [r3, #20]
}
 80057fa:	b001      	add	sp, #4
 80057fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4718      	bx	r3
 8005802:	bf00      	nop
 8005804:	0802bd74 	.word	0x0802bd74
 8005808:	0802be02 	.word	0x0802be02
 800580c:	0802bed4 	.word	0x0802bed4
 8005810:	0802bf1b 	.word	0x0802bf1b
 8005814:	0802bfbe 	.word	0x0802bfbe
 8005818:	0802c308 	.word	0x0802c308
 800581c:	20027e08 	.word	0x20027e08
 8005820:	20027e04 	.word	0x20027e04

08005824 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	461d      	mov	r5, r3
        setX(x);
 800582a:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800582c:	4604      	mov	r4, r0
 800582e:	4616      	mov	r6, r2
        setX(x);
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005832:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8005836:	4798      	blx	r3
        setY(y);
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	4631      	mov	r1, r6
 800583c:	4620      	mov	r0, r4
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	4798      	blx	r3
        setWidth(width);
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	4629      	mov	r1, r5
 8005846:	4620      	mov	r0, r4
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	4798      	blx	r3
        setHeight(height);
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	4639      	mov	r1, r7
 8005850:	4620      	mov	r0, r4
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8005854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8005858:	4718      	bx	r3
	...

0800585c <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv>:
{
 800585c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005860:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8005864:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005866:	f8db 0008 	ldr.w	r0, [fp, #8]
 800586a:	6803      	ldr	r3, [r0, #0]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4798      	blx	r3
 8005870:	f243 53f3 	movw	r3, #13811	@ 0x35f3
 8005874:	4298      	cmp	r0, r3
 8005876:	d805      	bhi.n	8005884 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x28>
 8005878:	4b54      	ldr	r3, [pc, #336]	@ (80059cc <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x170>)
 800587a:	21a3      	movs	r1, #163	@ 0xa3
 800587c:	4a54      	ldr	r2, [pc, #336]	@ (80059d0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800587e:	4855      	ldr	r0, [pc, #340]	@ (80059d4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x178>)
 8005880:	f023 f9c2 	bl	8028c08 <__assert_func>
 8005884:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005888:	6803      	ldr	r3, [r0, #0]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	4798      	blx	r3
 800588e:	280f      	cmp	r0, #15
 8005890:	d803      	bhi.n	800589a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x3e>
 8005892:	4b51      	ldr	r3, [pc, #324]	@ (80059d8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x17c>)
 8005894:	21a4      	movs	r1, #164	@ 0xa4
 8005896:	4a4e      	ldr	r2, [pc, #312]	@ (80059d0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
 8005898:	e7f1      	b.n	800587e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800589a:	f8db 000c 	ldr.w	r0, [fp, #12]
 800589e:	6803      	ldr	r3, [r0, #0]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4798      	blx	r3
 80058a4:	2837      	cmp	r0, #55	@ 0x37
 80058a6:	d803      	bhi.n	80058b0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x54>
 80058a8:	4b4c      	ldr	r3, [pc, #304]	@ (80059dc <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x180>)
 80058aa:	21a5      	movs	r1, #165	@ 0xa5
 80058ac:	4a48      	ldr	r2, [pc, #288]	@ (80059d0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x174>)
 80058ae:	e7e6      	b.n	800587e <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x22>
    if (*currentTrans)
 80058b0:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80059f0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x194>
    Application::getInstance()->clearAllTimerWidgets();
 80058b4:	f010 fe8e 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 80058b8:	3004      	adds	r0, #4
 80058ba:	f010 fef1 	bl	80166a0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80058be:	f8d9 0000 	ldr.w	r0, [r9]
 80058c2:	b110      	cbz	r0, 80058ca <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x6e>
        (*currentTrans)->tearDown();
 80058c4:	6803      	ldr	r3, [r0, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4798      	blx	r3
    if (*currentTrans)
 80058ca:	f8d9 0000 	ldr.w	r0, [r9]
 80058ce:	b110      	cbz	r0, 80058d6 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x7a>
        (*currentTrans)->~Transition();
 80058d0:	6803      	ldr	r3, [r0, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4798      	blx	r3
    if (*currentScreen)
 80058d6:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80059f4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x198>
 80058da:	f8d8 0000 	ldr.w	r0, [r8]
 80058de:	b110      	cbz	r0, 80058e6 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 80058e0:	6803      	ldr	r3, [r0, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	4798      	blx	r3
    if (*currentPresenter)
 80058e6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80058ea:	b110      	cbz	r0, 80058f2 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x96>
        (*currentPresenter)->deactivate();
 80058ec:	6803      	ldr	r3, [r0, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4798      	blx	r3
    if (*currentScreen)
 80058f2:	f8d8 0000 	ldr.w	r0, [r8]
 80058f6:	b110      	cbz	r0, 80058fe <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xa2>
        (*currentScreen)->~Screen();
 80058f8:	6803      	ldr	r3, [r0, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4798      	blx	r3
    if (*currentPresenter)
 80058fe:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8005902:	b110      	cbz	r0, 800590a <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8005904:	6803      	ldr	r3, [r0, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800590a:	f8db 000c 	ldr.w	r0, [fp, #12]
 800590e:	2100      	movs	r1, #0
 8005910:	2500      	movs	r5, #0
 8005912:	6803      	ldr	r3, [r0, #0]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	4798      	blx	r3
          solid()
 8005918:	4b31      	ldr	r3, [pc, #196]	@ (80059e0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x184>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800591a:	4a32      	ldr	r2, [pc, #200]	@ (80059e4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x188>)
 800591c:	4604      	mov	r4, r0
          solid()
 800591e:	6003      	str	r3, [r0, #0]
 8005920:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005924:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005928:	4629      	mov	r1, r5
 800592a:	8103      	strh	r3, [r0, #8]
          solid()
 800592c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005930:	6045      	str	r5, [r0, #4]
 8005932:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8005934:	4b2c      	ldr	r3, [pc, #176]	@ (80059e8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x18c>)
          animationCounter(0),
 8005936:	7285      	strb	r5, [r0, #10]
 8005938:	6103      	str	r3, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 800593a:	4b2c      	ldr	r3, [pc, #176]	@ (80059ec <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x190>)
          calculatedValue(0),
 800593c:	81c5      	strh	r5, [r0, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 800593e:	f9b3 3000 	ldrsh.w	r3, [r3]
          solid()
 8005942:	e9c0 5505 	strd	r5, r5, [r0, #20]
            targetValue = HAL::DISPLAY_WIDTH;
 8005946:	8183      	strh	r3, [r0, #12]
          solid()
 8005948:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800594c:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8005950:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005954:	9200      	str	r2, [sp, #0]
 8005956:	3010      	adds	r0, #16
 8005958:	462a      	mov	r2, r5
 800595a:	f7ff ff63 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800595e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005962:	4629      	mov	r1, r5
 8005964:	6803      	ldr	r3, [r0, #0]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	4798      	blx	r3
 800596a:	4606      	mov	r6, r0
 800596c:	f001 fe9a 	bl	80076a4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005970:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005974:	4629      	mov	r1, r5
 8005976:	6803      	ldr	r3, [r0, #0]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	4798      	blx	r3
 800597c:	4605      	mov	r5, r0
 800597e:	4631      	mov	r1, r6
 8005980:	f001 fe6e 	bl	8007660 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8005984:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8005986:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800598a:	4630      	mov	r0, r6
    *currentTrans = newTransition;
 800598c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8005990:	f8c8 6000 	str.w	r6, [r8]
 8005994:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005998:	6833      	ldr	r3, [r6, #0]
 800599a:	f8c5 a008 	str.w	sl, [r5, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	63f5      	str	r5, [r6, #60]	@ 0x3c
 80059a2:	4798      	blx	r3
    newPresenter->activate();
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	4628      	mov	r0, r5
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80059ac:	4621      	mov	r1, r4
 80059ae:	4630      	mov	r0, r6
 80059b0:	f012 fc3e 	bl	8018230 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	4620      	mov	r0, r4
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	4798      	blx	r3
    newTransition->invalidate();
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	4620      	mov	r0, r4
 80059c0:	695b      	ldr	r3, [r3, #20]
}
 80059c2:	b003      	add	sp, #12
 80059c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c8:	4718      	bx	r3
 80059ca:	bf00      	nop
 80059cc:	0802bd74 	.word	0x0802bd74
 80059d0:	0802c061 	.word	0x0802c061
 80059d4:	0802bed4 	.word	0x0802bed4
 80059d8:	0802bf1b 	.word	0x0802bf1b
 80059dc:	0802bfbe 	.word	0x0802bfbe
 80059e0:	0802c350 	.word	0x0802c350
 80059e4:	20027db6 	.word	0x20027db6
 80059e8:	0802c234 	.word	0x0802c234
 80059ec:	20027db4 	.word	0x20027db4
 80059f0:	20027e08 	.word	0x20027e08
 80059f4:	20027e04 	.word	0x20027e04

080059f8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 80059f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80059fc:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8005a00:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005a02:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005a06:	6803      	ldr	r3, [r0, #0]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	4798      	blx	r3
 8005a0c:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8005a10:	d205      	bcs.n	8005a1e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 8005a12:	4b55      	ldr	r3, [pc, #340]	@ (8005b68 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8005a14:	21a3      	movs	r1, #163	@ 0xa3
 8005a16:	4a55      	ldr	r2, [pc, #340]	@ (8005b6c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005a18:	4855      	ldr	r0, [pc, #340]	@ (8005b70 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8005a1a:	f023 f8f5 	bl	8028c08 <__assert_func>
 8005a1e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005a22:	6803      	ldr	r3, [r0, #0]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4798      	blx	r3
 8005a28:	280f      	cmp	r0, #15
 8005a2a:	d803      	bhi.n	8005a34 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 8005a2c:	4b51      	ldr	r3, [pc, #324]	@ (8005b74 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8005a2e:	21a4      	movs	r1, #164	@ 0xa4
 8005a30:	4a4e      	ldr	r2, [pc, #312]	@ (8005b6c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8005a32:	e7f1      	b.n	8005a18 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005a34:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005a38:	6803      	ldr	r3, [r0, #0]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	4798      	blx	r3
 8005a3e:	2837      	cmp	r0, #55	@ 0x37
 8005a40:	d803      	bhi.n	8005a4a <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 8005a42:	4b4d      	ldr	r3, [pc, #308]	@ (8005b78 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 8005a44:	21a5      	movs	r1, #165	@ 0xa5
 8005a46:	4a49      	ldr	r2, [pc, #292]	@ (8005b6c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8005a48:	e7e6      	b.n	8005a18 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 8005a4a:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8005b8c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
    Application::getInstance()->clearAllTimerWidgets();
 8005a4e:	f010 fdc1 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 8005a52:	3004      	adds	r0, #4
 8005a54:	f010 fe24 	bl	80166a0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005a58:	f8d9 0000 	ldr.w	r0, [r9]
 8005a5c:	b110      	cbz	r0, 8005a64 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8005a5e:	6803      	ldr	r3, [r0, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4798      	blx	r3
    if (*currentTrans)
 8005a64:	f8d9 0000 	ldr.w	r0, [r9]
 8005a68:	b110      	cbz	r0, 8005a70 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8005a6a:	6803      	ldr	r3, [r0, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4798      	blx	r3
    if (*currentScreen)
 8005a70:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8005b90 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 8005a74:	f8d8 0000 	ldr.w	r0, [r8]
 8005a78:	b110      	cbz	r0, 8005a80 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8005a7a:	6803      	ldr	r3, [r0, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4798      	blx	r3
    if (*currentPresenter)
 8005a80:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8005a84:	b110      	cbz	r0, 8005a8c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8005a86:	6803      	ldr	r3, [r0, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4798      	blx	r3
    if (*currentScreen)
 8005a8c:	f8d8 0000 	ldr.w	r0, [r8]
 8005a90:	b110      	cbz	r0, 8005a98 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8005a92:	6803      	ldr	r3, [r0, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4798      	blx	r3
    if (*currentPresenter)
 8005a98:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8005a9c:	b110      	cbz	r0, 8005aa4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8005a9e:	6803      	ldr	r3, [r0, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005aa4:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005aa8:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8005aaa:	2500      	movs	r5, #0
 8005aac:	6803      	ldr	r3, [r0, #0]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	4798      	blx	r3
          solid()
 8005ab2:	4b32      	ldr	r3, [pc, #200]	@ (8005b7c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	6045      	str	r5, [r0, #4]
 8005ab8:	6003      	str	r3, [r0, #0]
 8005aba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
          animationCounter(0),
 8005abe:	7285      	strb	r5, [r0, #10]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	8103      	strh	r3, [r0, #8]
          solid()
 8005ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
          calculatedValue(0),
 8005ac8:	81c5      	strh	r5, [r0, #14]
          solid()
 8005aca:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8005acc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8005ace:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8005ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b84 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	425a      	negs	r2, r3
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005ad6:	b21b      	sxth	r3, r3
            targetValue = -HAL::DISPLAY_WIDTH;
 8005ad8:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005ada:	4a2b      	ldr	r2, [pc, #172]	@ (8005b88 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
 8005adc:	f9b2 2000 	ldrsh.w	r2, [r2]
          solid()
 8005ae0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8005ae4:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8005ae8:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8005aec:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005af0:	9200      	str	r2, [sp, #0]
 8005af2:	3010      	adds	r0, #16
 8005af4:	462a      	mov	r2, r5
 8005af6:	f7ff fe95 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005afa:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005afe:	4629      	mov	r1, r5
 8005b00:	6803      	ldr	r3, [r0, #0]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	4798      	blx	r3
 8005b06:	4606      	mov	r6, r0
 8005b08:	f001 fe4a 	bl	80077a0 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005b0c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005b10:	4629      	mov	r1, r5
 8005b12:	6803      	ldr	r3, [r0, #0]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b16:	4798      	blx	r3
 8005b18:	4605      	mov	r5, r0
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	f001 fe1e 	bl	800775c <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8005b20:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8005b22:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8005b26:	4630      	mov	r0, r6
    *currentTrans = newTransition;
 8005b28:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8005b2c:	f8c8 6000 	str.w	r6, [r8]
 8005b30:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	f8c5 a008 	str.w	sl, [r5, #8]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	63f5      	str	r5, [r6, #60]	@ 0x3c
 8005b3e:	4798      	blx	r3
    newPresenter->activate();
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	4628      	mov	r0, r5
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f012 fb70 	bl	8018230 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	4620      	mov	r0, r4
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	4798      	blx	r3
    newTransition->invalidate();
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	695b      	ldr	r3, [r3, #20]
}
 8005b5e:	b003      	add	sp, #12
 8005b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	4718      	bx	r3
 8005b66:	bf00      	nop
 8005b68:	0802bd74 	.word	0x0802bd74
 8005b6c:	0802c146 	.word	0x0802c146
 8005b70:	0802bed4 	.word	0x0802bed4
 8005b74:	0802bf1b 	.word	0x0802bf1b
 8005b78:	0802bfbe 	.word	0x0802bfbe
 8005b7c:	0802c32c 	.word	0x0802c32c
 8005b80:	0802c234 	.word	0x0802c234
 8005b84:	20027db4 	.word	0x20027db4
 8005b88:	20027db6 	.word	0x20027db6
 8005b8c:	20027e08 	.word	0x20027e08
 8005b90:	20027e04 	.word	0x20027e04

08005b94 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8005b9e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005ba0:	b900      	cbnz	r0, 8005ba4 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8005ba2:	6898      	ldr	r0, [r3, #8]
    }
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20027dc0 	.word	0x20027dc0

08005bac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	4617      	mov	r7, r2
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8005bb4:	f010 fe46 	bl	8016844 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8005bb8:	4b12      	ldr	r3, [pc, #72]	@ (8005c04 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8005bba:	2500      	movs	r5, #0
        instance = this;
 8005bbc:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005bbe:	4629      	mov	r1, r5
      model(m)
 8005bc0:	4b11      	ldr	r3, [pc, #68]	@ (8005c08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8005bc2:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8005bc4:	4b11      	ldr	r3, [pc, #68]	@ (8005c0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8005bc6:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8005bca:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005bd2:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8005bd4:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8005bd8:	689b      	ldr	r3, [r3, #8]
      model(m)
 8005bda:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005bde:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8005be0:	4628      	mov	r0, r5
 8005be2:	f001 fc4f 	bl	8007484 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005be6:	f7ff ffd5 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8005bea:	f01b f880 	bl	8020cee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8005bee:	f7ff ffd1 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8005bf2:	f01b f8f7 	bl	8020de4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8005bf6:	f7ff ffcd 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8005bfa:	f01b f8ff 	bl	8020dfc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 8005bfe:	4620      	mov	r0, r4
 8005c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20027e14 	.word	0x20027e14
 8005c08:	0802c2b4 	.word	0x0802c2b4
 8005c0c:	0802c29c 	.word	0x0802c29c
 8005c10:	20027dc0 	.word	0x20027dc0

08005c14 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c14:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv+0x1c>)
 8005c16:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005c1a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005c24:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005c28:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	0800585d 	.word	0x0800585d

08005c34 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8005c34:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8005c36:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005c3a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005c44:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005c48:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	080056d9 	.word	0x080056d9

08005c54 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8005c56:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005c5a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005c64:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005c68:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	080059f9 	.word	0x080059f9

08005c74 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8005c74:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8005c76:	4770      	bx	lr

08005c78 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8005c78:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005c7a:	4770      	bx	lr

08005c7c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8005c7c:	4770      	bx	lr

08005c7e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005c7e:	888b      	ldrh	r3, [r1, #4]
 8005c80:	69c0      	ldr	r0, [r0, #28]
 8005c82:	0adb      	lsrs	r3, r3, #11
 8005c84:	680a      	ldr	r2, [r1, #0]
 8005c86:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8005c8a:	4410      	add	r0, r2
 8005c8c:	4770      	bx	lr

08005c8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8005c92:	b1ba      	cbz	r2, 8005cc4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8005c94:	7b10      	ldrb	r0, [r2, #12]
 8005c96:	b168      	cbz	r0, 8005cb4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005c98:	7b53      	ldrb	r3, [r2, #13]
 8005c9a:	7ad2      	ldrb	r2, [r2, #11]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6a23      	ldr	r3, [r4, #32]
 8005ca6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	428a      	cmp	r2, r1
 8005cae:	d102      	bne.n	8005cb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8005cb0:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8005cb4:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8005cb6:	d805      	bhi.n	8005cc4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005cb8:	3801      	subs	r0, #1
 8005cba:	3304      	adds	r3, #4
 8005cbc:	b280      	uxth	r0, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1f3      	bne.n	8005caa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005cc2:	e7f7      	b.n	8005cb4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e7f5      	b.n	8005cb4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08005cc8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	4604      	mov	r4, r0
 8005ccc:	212c      	movs	r1, #44	@ 0x2c
 8005cce:	f022 ff6c 	bl	8028baa <_ZdlPvj>
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	bd10      	pop	{r4, pc}
	...

08005cd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005cd8:	b530      	push	{r4, r5, lr}
 8005cda:	b08b      	sub	sp, #44	@ 0x2c
 8005cdc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8005cde:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8005ce2:	9508      	str	r5, [sp, #32]
 8005ce4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8005ce8:	9507      	str	r5, [sp, #28]
 8005cea:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8005cee:	9506      	str	r5, [sp, #24]
 8005cf0:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8005cf4:	9505      	str	r5, [sp, #20]
 8005cf6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8005cfa:	9504      	str	r5, [sp, #16]
 8005cfc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8005d00:	9503      	str	r5, [sp, #12]
 8005d02:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8005d06:	9502      	str	r5, [sp, #8]
 8005d08:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8005d0c:	9501      	str	r5, [sp, #4]
 8005d0e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8005d12:	9500      	str	r5, [sp, #0]
 8005d14:	f011 fdf6 	bl	8017904 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005d18:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8005d1a:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8005d1c:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8005d1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d20:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8005d22:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d24:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8005d26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d28:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8005d2a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005d2c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005d2e:	b00b      	add	sp, #44	@ 0x2c
 8005d30:	bd30      	pop	{r4, r5, pc}
 8005d32:	bf00      	nop
 8005d34:	0802c374 	.word	0x0802c374

08005d38 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8005d38:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005d3a:	4770      	bx	lr

08005d3c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8005d3c:	4770      	bx	lr

08005d3e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8005d3e:	4770      	bx	lr

08005d40 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8005d40:	4770      	bx	lr

08005d42 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8005d42:	4770      	bx	lr

08005d44 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8005d44:	4770      	bx	lr

08005d46 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005d46:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 8005d4a:	4770      	bx	lr

08005d4c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8005d4c:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005d4e:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8005d50:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005d52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d56:	4362      	muls	r2, r4
 8005d58:	4361      	muls	r1, r4
    }
 8005d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005d5e:	4718      	bx	r3

08005d60 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8005d60:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005d64:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8005d6a:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005d6c:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005d70:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 8005d74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	db1a      	blt.n	8005db4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 8005d7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d82:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005d86:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005d8a:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005d8e:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005d92:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9a:	db1e      	blt.n	8005dda <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8005d9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005da0:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005da4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005da8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005dac:	4623      	mov	r3, r4
    }
 8005dae:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005db2:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005db4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005db8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005dbc:	ee17 3a10 	vmov	r3, s14
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005dc6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005dca:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005dce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005dd2:	ee10 1a10 	vmov	r1, s0
 8005dd6:	4419      	add	r1, r3
 8005dd8:	e7d9      	b.n	8005d8e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8005dda:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005de2:	ee17 3a90 	vmov	r3, s15
 8005de6:	3b01      	subs	r3, #1
 8005de8:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005dec:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005df0:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005df4:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005df8:	ee10 2a90 	vmov	r2, s1
 8005dfc:	441a      	add	r2, r3
 8005dfe:	e7d5      	b.n	8005dac <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

08005e00 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8005e00:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005e02:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005e04:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e0a:	4362      	muls	r2, r4
    }
 8005e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005e10:	4718      	bx	r3

08005e12 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8005e12:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005e16:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8005e1c:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005e1e:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005e22:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8005e26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2e:	db0b      	blt.n	8005e48 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005e30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e3c:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005e40:	4623      	mov	r3, r4
    }
 8005e42:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005e46:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005e48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e50:	ee17 3a90 	vmov	r3, s15
 8005e54:	3b01      	subs	r3, #1
 8005e56:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005e5a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005e5e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e66:	ee10 2a10 	vmov	r2, s0
 8005e6a:	441a      	add	r2, r3
 8005e6c:	e7e8      	b.n	8005e40 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08005e6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8005e6e:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005e70:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8005e72:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005e74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005e78:	4362      	muls	r2, r4
 8005e7a:	4361      	muls	r1, r4
    }
 8005e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005e80:	4718      	bx	r3

08005e82 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8005e82:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e86:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8005e8c:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005e8e:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005e92:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8005e96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9e:	db1a      	blt.n	8005ed6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 8005ea0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ea4:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005ea8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005eac:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005eb0:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005eb4:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebc:	db1e      	blt.n	8005efc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8005ebe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005ec2:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005ec6:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005eca:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005ece:	4623      	mov	r3, r4
    }
 8005ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005ed4:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005ed6:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005eda:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ede:	ee17 3a10 	vmov	r3, s14
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005ee8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005eec:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005ef0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ef4:	ee10 1a10 	vmov	r1, s0
 8005ef8:	4419      	add	r1, r3
 8005efa:	e7d9      	b.n	8005eb0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8005efc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f04:	ee17 3a90 	vmov	r3, s15
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005f0e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005f12:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005f16:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005f1a:	ee10 2a90 	vmov	r2, s1
 8005f1e:	441a      	add	r2, r3
 8005f20:	e7d5      	b.n	8005ece <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

08005f22 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8005f22:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005f24:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005f26:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f2c:	4362      	muls	r2, r4
    }
 8005f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005f32:	4718      	bx	r3

08005f34 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8005f34:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005f38:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8005f3e:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005f40:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005f44:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 8005f48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f50:	db0b      	blt.n	8005f6a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005f52:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005f56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005f5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005f5e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005f62:	4623      	mov	r3, r4
    }
 8005f64:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005f68:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005f6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f72:	ee17 3a90 	vmov	r3, s15
 8005f76:	3b01      	subs	r3, #1
 8005f78:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005f7c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005f80:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005f84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f88:	ee10 2a10 	vmov	r2, s0
 8005f8c:	441a      	add	r2, r3
 8005f8e:	e7e8      	b.n	8005f62 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

08005f90 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8005f90:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8005f94:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	db07      	blt.n	8005faa <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f9a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005f9e:	fb90 f0f2 	sdiv	r0, r0, r2
 8005fa2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fa6:	1040      	asrs	r0, r0, #1
 8005fa8:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005faa:	f06f 0101 	mvn.w	r1, #1
 8005fae:	fb01 2003 	mla	r0, r1, r3, r2
 8005fb2:	3801      	subs	r0, #1
 8005fb4:	fb90 f0f2 	sdiv	r0, r0, r2
 8005fb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005fbc:	1040      	asrs	r0, r0, #1
 8005fbe:	4240      	negs	r0, r0
    }
 8005fc0:	4770      	bx	lr

08005fc2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8005fc2:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8005fc6:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005fd2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005fd6:	4770      	bx	lr

08005fd8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8005fd8:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8005fdc:	4770      	bx	lr

08005fde <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005fde:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 8005fe2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	db07      	blt.n	8005ff8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005fe8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005fec:	fb90 f0f2 	sdiv	r0, r0, r2
 8005ff0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005ff4:	1040      	asrs	r0, r0, #1
 8005ff6:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005ff8:	f06f 0101 	mvn.w	r1, #1
 8005ffc:	fb01 2003 	mla	r0, r1, r3, r2
 8006000:	3801      	subs	r0, #1
 8006002:	fb90 f0f2 	sdiv	r0, r0, r2
 8006006:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800600a:	1040      	asrs	r0, r0, #1
 800600c:	4240      	negs	r0, r0
    }
 800600e:	4770      	bx	lr

08006010 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8006010:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 8006014:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8006018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800601c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006020:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006024:	4770      	bx	lr

08006026 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8006026:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 800602a:	4770      	bx	lr

0800602c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 800602c:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 8006030:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8006032:	2b00      	cmp	r3, #0
 8006034:	db07      	blt.n	8006046 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8006036:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 800603a:	fb90 f0f2 	sdiv	r0, r0, r2
 800603e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006042:	1040      	asrs	r0, r0, #1
 8006044:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006046:	f06f 0101 	mvn.w	r1, #1
 800604a:	fb01 2003 	mla	r0, r1, r3, r2
 800604e:	3801      	subs	r0, #1
 8006050:	fb90 f0f2 	sdiv	r0, r0, r2
 8006054:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006058:	1040      	asrs	r0, r0, #1
 800605a:	4240      	negs	r0, r0
    }
 800605c:	4770      	bx	lr

0800605e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 800605e:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 8006062:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8006066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800606a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800606e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006072:	4770      	bx	lr

08006074 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8006074:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8006078:	4770      	bx	lr

0800607a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 800607a:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 800607e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8006080:	2b00      	cmp	r3, #0
 8006082:	db07      	blt.n	8006094 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8006084:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8006088:	fb90 f0f2 	sdiv	r0, r0, r2
 800608c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006090:	1040      	asrs	r0, r0, #1
 8006092:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006094:	f06f 0101 	mvn.w	r1, #1
 8006098:	fb01 2003 	mla	r0, r1, r3, r2
 800609c:	3801      	subs	r0, #1
 800609e:	fb90 f0f2 	sdiv	r0, r0, r2
 80060a2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80060a6:	1040      	asrs	r0, r0, #1
 80060a8:	4240      	negs	r0, r0
    }
 80060aa:	4770      	bx	lr

080060ac <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 80060ac:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 80060b0:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80060b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80060bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80060c0:	4770      	bx	lr

080060c2 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 80060c2:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 80060c6:	4770      	bx	lr

080060c8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 80060c8:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 80060d2:	460d      	mov	r5, r1
 80060d4:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 80060d6:	4798      	blx	r3
        setScaleY(scale, updateData);
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	4632      	mov	r2, r6
 80060dc:	4629      	mov	r1, r5
 80060de:	4620      	mov	r0, r4
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 80060e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 80060e8:	4718      	bx	r3

080060ea <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 80060ea:	6803      	ldr	r3, [r0, #0]
 80060ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f0:	4718      	bx	r3

080060f2 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 80060f2:	6803      	ldr	r3, [r0, #0]
 80060f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80060f8:	4718      	bx	r3

080060fa <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 80060fa:	6803      	ldr	r3, [r0, #0]
 80060fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006100:	4718      	bx	r3

08006102 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006102:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8006104:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8006106:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 800610c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 800610e:	db0e      	blt.n	800612e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8006110:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006114:	fb92 f1f4 	sdiv	r1, r2, r4
 8006118:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800611c:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800611e:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8006122:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8006126:	3a01      	subs	r2, #1
 8006128:	440a      	add	r2, r1
 800612a:	4249      	negs	r1, r1
 800612c:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800612e:	f06f 0101 	mvn.w	r1, #1
 8006132:	fb01 4102 	mla	r1, r1, r2, r4
 8006136:	3901      	subs	r1, #1
 8006138:	fb91 f1f4 	sdiv	r1, r1, r4
 800613c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006140:	1049      	asrs	r1, r1, #1
 8006142:	4249      	negs	r1, r1
 8006144:	e7eb      	b.n	800611e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08006146 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8006146:	6803      	ldr	r3, [r0, #0]
 8006148:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800614c:	4718      	bx	r3

0800614e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 800614e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8006150:	6803      	ldr	r3, [r0, #0]
 8006152:	4351      	muls	r1, r2
 8006154:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006158:	4718      	bx	r3

0800615a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 800615a:	6803      	ldr	r3, [r0, #0]
 800615c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8006160:	4718      	bx	r3

08006162 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8006162:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8006166:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8006168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800616c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 8006170:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8006174:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617c:	db08      	blt.n	8006190 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 800617e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006182:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006186:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800618a:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800618e:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006190:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006198:	ee17 3a90 	vmov	r3, s15
 800619c:	3b01      	subs	r3, #1
 800619e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061a2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80061a6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80061aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80061ae:	ee10 1a10 	vmov	r1, s0
 80061b2:	4419      	add	r1, r3
 80061b4:	e7eb      	b.n	800618e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

080061b6 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 80061b6:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 80061ba:	4770      	bx	lr

080061bc <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 80061bc:	6803      	ldr	r3, [r0, #0]
 80061be:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80061c2:	4718      	bx	r3

080061c4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 80061c4:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 80061c6:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 80061c8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 80061cc:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 80061ce:	4798      	blx	r3
        if (i >= 0)
 80061d0:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 80061d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 80061d4:	db07      	blt.n	80061e6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 80061d6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80061da:	fb90 f0f3 	sdiv	r0, r0, r3
 80061de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80061e2:	1040      	asrs	r0, r0, #1
    }
 80061e4:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80061e6:	f06f 0201 	mvn.w	r2, #1
 80061ea:	fb02 3000 	mla	r0, r2, r0, r3
 80061ee:	3801      	subs	r0, #1
 80061f0:	fb90 f0f3 	sdiv	r0, r0, r3
 80061f4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80061f8:	1040      	asrs	r0, r0, #1
 80061fa:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 80061fc:	e7f2      	b.n	80061e4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

080061fe <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 80061fe:	6803      	ldr	r3, [r0, #0]
 8006200:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006204:	4718      	bx	r3

08006206 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8006206:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8006208:	b510      	push	{r4, lr}
 800620a:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 800620c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8006210:	4798      	blx	r3
 8006212:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8006216:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800621a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006222:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006226:	bd10      	pop	{r4, pc}

08006228 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8006228:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 800622c:	4770      	bx	lr

0800622e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 800622e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	4351      	muls	r1, r2
 8006234:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006238:	4718      	bx	r3

0800623a <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 800623a:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800623e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8006240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8006244:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 8006248:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 800624c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006254:	db08      	blt.n	8006268 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8006256:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800625a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800625e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006262:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8006266:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006268:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800626c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006270:	ee17 3a90 	vmov	r3, s15
 8006274:	3b01      	subs	r3, #1
 8006276:	ee30 0a47 	vsub.f32	s0, s0, s14
 800627a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800627e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006282:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006286:	ee10 1a10 	vmov	r1, s0
 800628a:	4419      	add	r1, r3
 800628c:	e7eb      	b.n	8006266 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

0800628e <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 800628e:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 8006292:	4770      	bx	lr

08006294 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8006294:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8006296:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8006298:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 800629c:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 800629e:	4798      	blx	r3
        if (i >= 0)
 80062a0:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 80062a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 80062a4:	db07      	blt.n	80062b6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 80062a6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80062aa:	fb90 f0f3 	sdiv	r0, r0, r3
 80062ae:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80062b2:	1040      	asrs	r0, r0, #1
    }
 80062b4:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80062b6:	f06f 0201 	mvn.w	r2, #1
 80062ba:	fb02 3000 	mla	r0, r2, r0, r3
 80062be:	3801      	subs	r0, #1
 80062c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80062c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80062c8:	1040      	asrs	r0, r0, #1
 80062ca:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 80062cc:	e7f2      	b.n	80062b4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

080062ce <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 80062ce:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 80062d0:	b510      	push	{r4, lr}
 80062d2:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 80062d4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80062d8:	4798      	blx	r3
 80062da:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 80062de:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 80062e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80062ea:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 80062f0:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80062f4:	4770      	bx	lr

080062f6 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80062f6:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 80062f8:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 80062fa:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80062fc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8006300:	b510      	push	{r4, lr}
 8006302:	4604      	mov	r4, r0
        if (i >= 0)
 8006304:	db0e      	blt.n	8006324 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 8006306:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800630a:	fb91 f1f2 	sdiv	r1, r1, r2
 800630e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006312:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8006314:	b209      	sxth	r1, r1
 8006316:	4620      	mov	r0, r4
 8006318:	4798      	blx	r3
 800631a:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 800631e:	fb02 3000 	mla	r0, r2, r0, r3
 8006322:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006324:	f06f 0001 	mvn.w	r0, #1
 8006328:	fb00 2101 	mla	r1, r0, r1, r2
 800632c:	3901      	subs	r1, #1
 800632e:	fb91 f1f2 	sdiv	r1, r1, r2
 8006332:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006336:	1049      	asrs	r1, r1, #1
 8006338:	4249      	negs	r1, r1
 800633a:	e7eb      	b.n	8006314 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

0800633c <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 800633c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800633e:	4770      	bx	lr

08006340 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 8006340:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8006342:	4770      	bx	lr

08006344 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 8006344:	6803      	ldr	r3, [r0, #0]
 8006346:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800634a:	4718      	bx	r3

0800634c <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 800634c:	6803      	ldr	r3, [r0, #0]
 800634e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8006352:	4718      	bx	r3

08006354 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 8006354:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 8006356:	6803      	ldr	r3, [r0, #0]
 8006358:	4351      	muls	r1, r2
 800635a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800635e:	4718      	bx	r3

08006360 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006360:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8006362:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006364:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8006368:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800636a:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 800636e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006372:	4798      	blx	r3
 8006374:	462b      	mov	r3, r5
 8006376:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 800637a:	4620      	mov	r0, r4
    }
 800637c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006380:	4718      	bx	r3

08006382 <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual void beforeAddValue();

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
 8006382:	4603      	mov	r3, r0
 8006384:	4608      	mov	r0, r1
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 8006386:	f9b3 211c 	ldrsh.w	r2, [r3, #284]	@ 0x11c
 800638a:	f9b3 111e 	ldrsh.w	r1, [r3, #286]	@ 0x11e
 800638e:	4291      	cmp	r1, r2
 8006390:	db07      	blt.n	80063a2 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x20>
 8006392:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	@ 0x14c
 8006396:	1819      	adds	r1, r3, r0
 8006398:	fb91 f3f2 	sdiv	r3, r1, r2
 800639c:	fb02 1113 	mls	r1, r2, r3, r1
 80063a0:	b208      	sxth	r0, r1
    }
 80063a2:	4770      	bx	lr

080063a4 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 80063a4:	0148      	lsls	r0, r1, #5
 80063a6:	4770      	bx	lr

080063a8 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 80063a8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    }
 80063aa:	4770      	bx	lr

080063ac <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 80063ac:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80063ae:	4770      	bx	lr

080063b0 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 80063b0:	2001      	movs	r0, #1
 80063b2:	4770      	bx	lr

080063b4 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 80063b4:	4770      	bx	lr

080063b6 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 80063b6:	4770      	bx	lr

080063b8 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80063b8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80063ba:	b118      	cbz	r0, 80063c4 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 80063bc:	6803      	ldr	r3, [r0, #0]
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063c2:	4718      	bx	r3
    }
 80063c4:	4770      	bx	lr

080063c6 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80063c6:	f8b2 111a 	ldrh.w	r1, [r2, #282]	@ 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80063ca:	b530      	push	{r4, r5, lr}
        return topPadding;
 80063cc:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	@ 0x114
        return rect.width;
 80063d0:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	@ 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80063d4:	4421      	add	r1, r4
 80063d6:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80063da:	8044      	strh	r4, [r0, #2]
 80063dc:	1a52      	subs	r2, r2, r1
 80063de:	2100      	movs	r1, #0
 80063e0:	8085      	strh	r5, [r0, #4]
 80063e2:	8001      	strh	r1, [r0, #0]
 80063e4:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 80063e6:	bd30      	pop	{r4, r5, pc}

080063e8 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 80063e8:	b510      	push	{r4, lr}
 80063ea:	8042      	strh	r2, [r0, #2]
 80063ec:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80063f0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80063f4:	8004      	strh	r4, [r0, #0]
 80063f6:	8082      	strh	r2, [r0, #4]
 80063f8:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 80063fa:	bd10      	pop	{r4, pc}

080063fc <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 80063fc:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80063fe:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8006400:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006404:	4718      	bx	r3

08006406 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8006406:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8006408:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800640a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800640e:	4718      	bx	r3

08006410 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8006410:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	@ 0x114
 8006414:	4770      	bx	lr

08006416 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8006416:	f8b1 3114 	ldrh.w	r3, [r1, #276]	@ 0x114
 800641a:	f8b1 211a 	ldrh.w	r2, [r1, #282]	@ 0x11a
 800641e:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 8006422:	4413      	add	r3, r2
 8006424:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8006426:	b200      	sxth	r0, r0
 8006428:	4770      	bx	lr

0800642a <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800642a:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	@ 0x116
 800642e:	4770      	bx	lr

08006430 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8006430:	f8b1 3116 	ldrh.w	r3, [r1, #278]	@ 0x116
 8006434:	f8b1 2118 	ldrh.w	r2, [r1, #280]	@ 0x118
 8006438:	f8b1 0040 	ldrh.w	r0, [r1, #64]	@ 0x40
 800643c:	4413      	add	r3, r2
 800643e:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8006440:	b200      	sxth	r0, r0
 8006442:	4770      	bx	lr

08006444 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8006444:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8006446:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 8006448:	4611      	mov	r1, r2
 800644a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800644e:	4718      	bx	r3

08006450 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8006450:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8006452:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	@ 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8006456:	f8b2 4118 	ldrh.w	r4, [r2, #280]	@ 0x118
 800645a:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 800645e:	442c      	add	r4, r5
        return rect.height;
 8006460:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	@ 0x42
 8006464:	8005      	strh	r5, [r0, #0]
 8006466:	1b09      	subs	r1, r1, r4
 8006468:	2400      	movs	r4, #0
 800646a:	80c2      	strh	r2, [r0, #6]
 800646c:	8044      	strh	r4, [r0, #2]
 800646e:	8081      	strh	r1, [r0, #4]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 8006470:	bd30      	pop	{r4, r5, pc}

08006472 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 8006472:	8002      	strh	r2, [r0, #0]
 8006474:	8083      	strh	r3, [r0, #4]
 8006476:	f9bd 2000 	ldrsh.w	r2, [sp]
 800647a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800647e:	8042      	strh	r2, [r0, #2]
 8006480:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 8006482:	4770      	bx	lr

08006484 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 8006484:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8006486:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 8006488:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800648c:	4718      	bx	r3

0800648e <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 800648e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8006490:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 8006492:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006496:	4718      	bx	r3

08006498 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 8006498:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	@ 0x116
 800649c:	4770      	bx	lr

0800649e <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 800649e:	f8b1 3116 	ldrh.w	r3, [r1, #278]	@ 0x116
 80064a2:	f8b1 2118 	ldrh.w	r2, [r1, #280]	@ 0x118
 80064a6:	f8b1 0040 	ldrh.w	r0, [r1, #64]	@ 0x40
 80064aa:	4413      	add	r3, r2
 80064ac:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80064ae:	b200      	sxth	r0, r0
 80064b0:	4770      	bx	lr

080064b2 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80064b2:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	@ 0x114
 80064b6:	4770      	bx	lr

080064b8 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80064b8:	f8b1 3114 	ldrh.w	r3, [r1, #276]	@ 0x114
 80064bc:	f8b1 211a 	ldrh.w	r2, [r1, #282]	@ 0x11a
 80064c0:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 80064c4:	4413      	add	r3, r2
 80064c6:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80064c8:	b200      	sxth	r0, r0
 80064ca:	4770      	bx	lr

080064cc <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 80064cc:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80064ce:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 80064d0:	4611      	mov	r1, r2
 80064d2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80064d6:	4718      	bx	r3

080064d8 <_ZN8touchgfx21AbstractPainterBitmapD1Ev>:
    }

    /** Destructor */
    virtual ~AbstractPainterBitmap()
    {
    }
 80064d8:	4770      	bx	lr

080064da <_ZN8touchgfx21AbstractPainterBitmap8setTiledEb>:
     *
     * @see setOffset
     */
    virtual void setTiled(bool tiled)
    {
        isTiled = tiled;
 80064da:	7601      	strb	r1, [r0, #24]
    }
 80064dc:	4770      	bx	lr

080064de <_ZN8touchgfx21AbstractPainterBitmap9setOffsetEss>:
     *
     * @see setTiled
     */
    virtual void setOffset(int16_t x, int16_t y)
    {
        xOffset = x;
 80064de:	8281      	strh	r1, [r0, #20]
        yOffset = y;
 80064e0:	82c2      	strh	r2, [r0, #22]
    }
 80064e2:	4770      	bx	lr

080064e4 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80064e4:	b530      	push	{r4, r5, lr}
 80064e6:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80064e8:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80064ea:	4604      	mov	r4, r0
        rect.width = width;
 80064ec:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80064ee:	466d      	mov	r5, sp
 80064f0:	4601      	mov	r1, r0
 80064f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f6:	343c      	adds	r4, #60	@ 0x3c
 80064f8:	4628      	mov	r0, r5
 80064fa:	4798      	blx	r3
 80064fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8006504:	b005      	add	sp, #20
 8006506:	bd30      	pop	{r4, r5, pc}

08006508 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8006508:	b530      	push	{r4, r5, lr}
 800650a:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 800650c:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 800650e:	4604      	mov	r4, r0
        rect.height = height;
 8006510:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8006512:	466d      	mov	r5, sp
 8006514:	4601      	mov	r1, r0
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651a:	343c      	adds	r4, #60	@ 0x3c
 800651c:	4628      	mov	r0, r5
 800651e:	4798      	blx	r3
 8006520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8006528:	b005      	add	sp, #20
 800652a:	bd30      	pop	{r4, r5, pc}

0800652c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800652c:	2200      	movs	r2, #0
 800652e:	8002      	strh	r2, [r0, #0]
 8006530:	8042      	strh	r2, [r0, #2]
 8006532:	8082      	strh	r2, [r0, #4]
 8006534:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8006536:	4770      	bx	lr

08006538 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8006538:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 800653c:	4770      	bx	lr

0800653e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 800653e:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	4604      	mov	r4, r0
        setX(x);
 8006544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8006546:	4615      	mov	r5, r2
        setX(x);
 8006548:	4798      	blx	r3
        setBaselineY(baselineY);
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8006552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8006556:	4718      	bx	r3

08006558 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8006558:	2000      	movs	r0, #0
 800655a:	4770      	bx	lr

0800655c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800655c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800655e:	4770      	bx	lr

08006560 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8006560:	4770      	bx	lr

08006562 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006562:	4770      	bx	lr

08006564 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 8006564:	4770      	bx	lr

08006566 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006566:	4770      	bx	lr

08006568 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8006568:	4770      	bx	lr

0800656a <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800656a:	4770      	bx	lr

0800656c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800656c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800656e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006570:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006572:	68c2      	ldr	r2, [r0, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	1055      	asrs	r5, r2, #1
 8006578:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800657c:	07d2      	lsls	r2, r2, #31
 800657e:	bf48      	it	mi
 8006580:	5962      	ldrmi	r2, [r4, r5]
    }
 8006582:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006584:	bf48      	it	mi
 8006586:	58d3      	ldrmi	r3, [r2, r3]
 8006588:	4718      	bx	r3

0800658a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800658a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800658c:	6840      	ldr	r0, [r0, #4]
 800658e:	b130      	cbz	r0, 800659e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	b91a      	cbnz	r2, 800659c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006594:	68d8      	ldr	r0, [r3, #12]
 8006596:	f000 0001 	and.w	r0, r0, #1
 800659a:	4770      	bx	lr
 800659c:	2001      	movs	r0, #1
    }
 800659e:	4770      	bx	lr

080065a0 <_ZN8touchgfx21AbstractPainterBitmapD0Ev>:
    virtual ~AbstractPainterBitmap()
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4604      	mov	r4, r0
    }
 80065a4:	2120      	movs	r1, #32
 80065a6:	f022 fb00 	bl	8028baa <_ZdlPvj>
 80065aa:	4620      	mov	r0, r4
 80065ac:	bd10      	pop	{r4, pc}

080065ae <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4604      	mov	r4, r0
 80065b2:	214c      	movs	r1, #76	@ 0x4c
 80065b4:	f022 faf9 	bl	8028baa <_ZdlPvj>
 80065b8:	4620      	mov	r0, r4
 80065ba:	bd10      	pop	{r4, pc}

080065bc <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	2140      	movs	r1, #64	@ 0x40
 80065c2:	f022 faf2 	bl	8028baa <_ZdlPvj>
 80065c6:	4620      	mov	r0, r4
 80065c8:	bd10      	pop	{r4, pc}

080065ca <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80065ca:	b510      	push	{r4, lr}
 80065cc:	4604      	mov	r4, r0
 80065ce:	2140      	movs	r1, #64	@ 0x40
 80065d0:	f022 faeb 	bl	8028baa <_ZdlPvj>
 80065d4:	4620      	mov	r0, r4
 80065d6:	bd10      	pop	{r4, pc}

080065d8 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80065e0:	f022 fae3 	bl	8028baa <_ZdlPvj>
 80065e4:	4620      	mov	r0, r4
 80065e6:	bd10      	pop	{r4, pc}

080065e8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80065e8:	b510      	push	{r4, lr}
 80065ea:	4604      	mov	r4, r0
 80065ec:	2110      	movs	r1, #16
 80065ee:	f022 fadc 	bl	8028baa <_ZdlPvj>
 80065f2:	4620      	mov	r0, r4
 80065f4:	bd10      	pop	{r4, pc}

080065f6 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80065f6:	b538      	push	{r3, r4, r5, lr}
 80065f8:	4603      	mov	r3, r0
 80065fa:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80065fc:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006600:	680b      	ldr	r3, [r1, #0]
 8006602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006606:	4798      	blx	r3
 8006608:	4629      	mov	r1, r5
 800660a:	4602      	mov	r2, r0
 800660c:	4620      	mov	r0, r4
    }
 800660e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8006612:	f00c b81d 	b.w	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08006616 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8006616:	b538      	push	{r3, r4, r5, lr}
 8006618:	4603      	mov	r3, r0
 800661a:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800661c:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006626:	4798      	blx	r3
 8006628:	4629      	mov	r1, r5
 800662a:	4602      	mov	r2, r0
 800662c:	4620      	mov	r0, r4
    }
 800662e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8006632:	f00c b80d 	b.w	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08006636 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>:
    virtual void setBitmap(const Bitmap& bmp)
 8006636:	b570      	push	{r4, r5, r6, lr}
        bitmap = bmp;
 8006638:	880b      	ldrh	r3, [r1, #0]
 800663a:	4605      	mov	r5, r0
    virtual void setBitmap(const Bitmap& bmp)
 800663c:	4604      	mov	r4, r0
        bitmap = bmp;
 800663e:	f825 3f04 	strh.w	r3, [r5, #4]!
        bitmapFormat = bitmap.getFormat();
 8006642:	4628      	mov	r0, r5
 8006644:	f013 fd78 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8006648:	71a0      	strb	r0, [r4, #6]
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 800664a:	4628      	mov	r0, r5
 800664c:	f013 fbfe 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8006650:	4606      	mov	r6, r0
 8006652:	4628      	mov	r0, r5
 8006654:	f013 fc2e 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
        bitmapRect = bitmap.getRect();
 8006658:	2300      	movs	r3, #0
 800665a:	81e0      	strh	r0, [r4, #14]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 800665c:	f104 0008 	add.w	r0, r4, #8
        bitmapRect = bitmap.getRect();
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	81a6      	strh	r6, [r4, #12]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 8006664:	f00f fe48 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        bitmapData = bitmap.getData();
 8006668:	4628      	mov	r0, r5
 800666a:	f013 fce1 	bl	801a030 <_ZNK8touchgfx6Bitmap7getDataEv>
 800666e:	6120      	str	r0, [r4, #16]
    }
 8006670:	bd70      	pop	{r4, r5, r6, pc}
	...

08006674 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8006674:	4b03      	ldr	r3, [pc, #12]	@ (8006684 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 8006676:	b510      	push	{r4, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 800667c:	f00e fadc 	bl	8014c38 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006680:	4620      	mov	r0, r4
 8006682:	bd10      	pop	{r4, pc}
 8006684:	0802ca34 	.word	0x0802ca34

08006688 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8006688:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <_ZN15Screen1ViewBaseD0Ev+0x1c>)
 800668a:	b510      	push	{r4, lr}
 800668c:	4604      	mov	r4, r0
 800668e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8006690:	f00e fad2 	bl	8014c38 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006694:	f243 51f4 	movw	r1, #13812	@ 0x35f4
 8006698:	4620      	mov	r0, r4
 800669a:	f022 fa86 	bl	8028baa <_ZdlPvj>
 800669e:	4620      	mov	r0, r4
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	0802ca34 	.word	0x0802ca34

080066a8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80066a8:	b508      	push	{r3, lr}
        if (alpha > 0)
 80066aa:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80066ae:	b10b      	cbz	r3, 80066b4 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80066b0:	f7fb fea7 	bl	8002402 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80066b4:	bd08      	pop	{r3, pc}

080066b6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80066b6:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80066b8:	f7fb fea3 	bl	8002402 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80066bc:	bd08      	pop	{r3, pc}
	...

080066c0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80066c0:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80066c2:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80066c4:	db03      	blt.n	80066ce <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80066c6:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 80066ca:	4294      	cmp	r4, r2
 80066cc:	dc06      	bgt.n	80066dc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 80066ce:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80066d0:	f240 6139 	movw	r1, #1593	@ 0x639
 80066d4:	4a07      	ldr	r2, [pc, #28]	@ (80066f4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80066d6:	4808      	ldr	r0, [pc, #32]	@ (80066f8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80066d8:	f022 fa96 	bl	8028c08 <__assert_func>
        return yValues[dataIndex(index)];
 80066dc:	6803      	ldr	r3, [r0, #0]
 80066de:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 80066e2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80066e6:	4798      	blx	r3
    }
 80066e8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	bf00      	nop
 80066f0:	0802c3d4 	.word	0x0802c3d4
 80066f4:	0802c3f7 	.word	0x0802c3f7
 80066f8:	0802c446 	.word	0x0802c446

080066fc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80066fc:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 80066fe:	b510      	push	{r4, lr}
 8006700:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8006702:	db03      	blt.n	800670c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8006704:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8006708:	429a      	cmp	r2, r3
 800670a:	dc06      	bgt.n	800671a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 800670c:	4b07      	ldr	r3, [pc, #28]	@ (800672c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 800670e:	f240 6133 	movw	r1, #1587	@ 0x633
 8006712:	4a07      	ldr	r2, [pc, #28]	@ (8006730 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8006714:	4807      	ldr	r0, [pc, #28]	@ (8006734 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8006716:	f022 fa77 	bl	8028c08 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800671a:	6803      	ldr	r3, [r0, #0]
 800671c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006720:	4798      	blx	r3
 8006722:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8006726:	fb02 3000 	mla	r0, r2, r0, r3
 800672a:	bd10      	pop	{r4, pc}
 800672c:	0802c3d4 	.word	0x0802c3d4
 8006730:	0802c4a3 	.word	0x0802c4a3
 8006734:	0802c446 	.word	0x0802c446

08006738 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006738:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800673a:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800673c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 800673e:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006740:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006742:	b28d      	uxth	r5, r1
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	b92b      	cbnz	r3, 8006754 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8006748:	4b10      	ldr	r3, [pc, #64]	@ (800678c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800674a:	216c      	movs	r1, #108	@ 0x6c
 800674c:	4a10      	ldr	r2, [pc, #64]	@ (8006790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800674e:	4811      	ldr	r0, [pc, #68]	@ (8006794 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8006750:	f022 fa5a 	bl	8028c08 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8006754:	4910      	ldr	r1, [pc, #64]	@ (8006798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8006756:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006758:	8809      	ldrh	r1, [r1, #0]
 800675a:	4291      	cmp	r1, r2
 800675c:	d803      	bhi.n	8006766 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800675e:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8006760:	216d      	movs	r1, #109	@ 0x6d
 8006762:	4a0b      	ldr	r2, [pc, #44]	@ (8006790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8006764:	e7f3      	b.n	800674e <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8006766:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006772:	6803      	ldr	r3, [r0, #0]
 8006774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006776:	4798      	blx	r3
 8006778:	1a29      	subs	r1, r5, r0
 800677a:	4633      	mov	r3, r6
 800677c:	4620      	mov	r0, r4
 800677e:	b209      	sxth	r1, r1
    }
 8006780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006784:	4718      	bx	r3
 8006786:	bf00      	nop
 8006788:	20027e18 	.word	0x20027e18
 800678c:	0802c4f2 	.word	0x0802c4f2
 8006790:	0802c534 	.word	0x0802c534
 8006794:	0802c56f 	.word	0x0802c56f
 8006798:	20027e1c 	.word	0x20027e1c
 800679c:	0802c5b6 	.word	0x0802c5b6
 80067a0:	20027e20 	.word	0x20027e20

080067a4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc1_button)
 80067a4:	f500 60a1 	add.w	r0, r0, #1288	@ 0x508
 80067a8:	4288      	cmp	r0, r1
{
 80067aa:	b508      	push	{r3, lr}
    if (&src == &Sc1_button)
 80067ac:	d105      	bne.n	80067ba <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80067ae:	f00f ff11 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc1_button clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80067b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 80067b6:	f7ff ba4d 	b.w	8005c54 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 80067ba:	bd08      	pop	{r3, pc}

080067bc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80067bc:	2200      	movs	r2, #0
 80067be:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80067c2:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80067c4:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80067c8:	4770      	bx	lr

080067ca <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80067ca:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4604      	mov	r4, r0
        setX(x);
 80067d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80067d2:	4615      	mov	r5, r2
        setX(x);
 80067d4:	4798      	blx	r3
        setY(y);
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	4620      	mov	r0, r4
 80067da:	4629      	mov	r1, r5
 80067dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80067de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80067e2:	4718      	bx	r3

080067e4 <_ZN8touchgfx6WidgetC1Ev>:
 80067e4:	2200      	movs	r2, #0
 80067e6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80067ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80067ee:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80067f2:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80067f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067fa:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80067fc:	4a01      	ldr	r2, [pc, #4]	@ (8006804 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80067fe:	6002      	str	r2, [r0, #0]
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	0802c5fc 	.word	0x0802c5fc

08006808 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8006808:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800680a:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800680c:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800680e:	f011 f999 	bl	8017b44 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8006812:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006814:	462a      	mov	r2, r5
 8006816:	9901      	ldr	r1, [sp, #4]
 8006818:	ea4f 1440 	mov.w	r4, r0, lsl #5
 800681c:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8006820:	db04      	blt.n	800682c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006822:	f011 f9ae 	bl	8017b82 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8006826:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8006828:	b003      	add	sp, #12
 800682a:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800682c:	f011 f9a9 	bl	8017b82 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8006830:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 8006832:	e7f9      	b.n	8006828 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08006834 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8006834:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006836:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800683a:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800683c:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8006840:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8006844:	4423      	add	r3, r4
 8006846:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8006848:	b22d      	sxth	r5, r5
 800684a:	442c      	add	r4, r5
 800684c:	1e69      	subs	r1, r5, #1
 800684e:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 8006852:	3c01      	subs	r4, #1
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	1af0      	subs	r0, r6, r3
 8006858:	f7ff ffd6 	bl	8006808 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 800685c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006860:	bd70      	pop	{r4, r5, r6, pc}

08006862 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8006862:	b538      	push	{r3, r4, r5, lr}
 8006864:	4604      	mov	r4, r0
 8006866:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8006868:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 800686c:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 8006870:	440b      	add	r3, r1
 8006872:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8006876:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8006878:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 800687c:	b209      	sxth	r1, r1
 800687e:	1a12      	subs	r2, r2, r0
 8006880:	1a28      	subs	r0, r5, r0
 8006882:	3901      	subs	r1, #1
 8006884:	f7ff ffc0 	bl	8006808 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8006888:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 800688c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006890:	bd38      	pop	{r3, r4, r5, pc}
	...

08006894 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
    GraphElementGridBase()
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
        : CanvasWidget()
 8006898:	f00a ff0c 	bl	80116b4 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800689c:	4a06      	ldr	r2, [pc, #24]	@ (80068b8 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x24>)
        : color(col)
 800689e:	2300      	movs	r3, #0
 80068a0:	210a      	movs	r1, #10
    }
 80068a2:	4620      	mov	r0, r4
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	2201      	movs	r2, #1
 80068a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068aa:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 80068ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80068b0:	e9c4 210c 	strd	r2, r1, [r4, #48]	@ 0x30
    }
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	bf00      	nop
 80068b8:	0802dda4 	.word	0x0802dda4

080068bc <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	4604      	mov	r4, r0
 80068c2:	b097      	sub	sp, #92	@ 0x5c
        : presenter(0)
 80068c4:	2500      	movs	r5, #0
 80068c6:	f011 fb07 	bl	8017ed8 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80068ca:	46a1      	mov	r9, r4
 80068cc:	4be4      	ldr	r3, [pc, #912]	@ (8006c60 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80068ce:	4629      	mov	r1, r5
 80068d0:	2226      	movs	r2, #38	@ 0x26
 80068d2:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80068d4:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 80068d8:	f849 3b40 	str.w	r3, [r9], #64
 80068dc:	4648      	mov	r0, r9
 80068de:	f022 fc2f 	bl	8029140 <memset>
 80068e2:	4648      	mov	r0, r9
 80068e4:	f7ff ff7e 	bl	80067e4 <_ZN8touchgfx6WidgetC1Ev>
 80068e8:	26ff      	movs	r6, #255	@ 0xff
 80068ea:	4bde      	ldr	r3, [pc, #888]	@ (8006c64 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
        : bitmapId(id)
 80068ec:	f64f 7aff 	movw	sl, #65535	@ 0xffff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 80068f0:	2226      	movs	r2, #38	@ 0x26
 80068f2:	4629      	mov	r1, r5
 80068f4:	6423      	str	r3, [r4, #64]	@ 0x40
 80068f6:	4640      	mov	r0, r8
 80068f8:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 80068fc:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 8006900:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006902:	f8ad a050 	strh.w	sl, [sp, #80]	@ 0x50
 8006906:	f022 fc1b 	bl	8029140 <memset>
 800690a:	4640      	mov	r0, r8
class GraphElementGridY : public GraphElementGridBase
 800690c:	f8df b390 	ldr.w	fp, [pc, #912]	@ 8006ca0 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
 8006910:	f7ff ff68 	bl	80067e4 <_ZN8touchgfx6WidgetC1Ev>
 8006914:	4bd4      	ldr	r3, [pc, #848]	@ (8006c68 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
    {
        Image::setBitmap(bmp);
 8006916:	a914      	add	r1, sp, #80	@ 0x50
 8006918:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 800691a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800691c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8006920:	f884 6094 	strb.w	r6, [r4, #148]	@ 0x94
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006924:	2601      	movs	r6, #1
 8006926:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 800692a:	f00d fa8a 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800692e:	2164      	movs	r1, #100	@ 0x64
 8006930:	4638      	mov	r0, r7
 8006932:	f00b fe29 	bl	8012588 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8006936:	4bcd      	ldr	r3, [pc, #820]	@ (8006c6c <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006938:	4629      	mov	r1, r5
 800693a:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800693c:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 8006940:	f504 73f4 	add.w	r3, r4, #488	@ 0x1e8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006944:	4638      	mov	r0, r7
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006946:	e9c4 3577 	strd	r3, r5, [r4, #476]	@ 0x1dc
 800694a:	e9c4 6575 	strd	r6, r5, [r4, #468]	@ 0x1d4
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800694e:	f7ff f9fd 	bl	8005d4c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8006952:	4bc7      	ldr	r3, [pc, #796]	@ (8006c70 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
        : DynamicDataGraph(capacity, values), current(0)
 8006954:	f8a4 51e4 	strh.w	r5, [r4, #484]	@ 0x1e4
        : GraphScrollData(CAPACITY, y)
 8006958:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800695c:	f504 735e 	add.w	r3, r4, #888	@ 0x378
class GraphElementGridX : public GraphElementGridBase
 8006960:	4618      	mov	r0, r3
 8006962:	9307      	str	r3, [sp, #28]
 8006964:	f7ff ff96 	bl	8006894 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8006968:	f504 736e 	add.w	r3, r4, #952	@ 0x3b8
 800696c:	4ac1      	ldr	r2, [pc, #772]	@ (8006c74 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
class GraphElementGridY : public GraphElementGridBase
 800696e:	4618      	mov	r0, r3
 8006970:	9308      	str	r3, [sp, #32]
class GraphElementGridX : public GraphElementGridBase
 8006972:	f8c4 2378 	str.w	r2, [r4, #888]	@ 0x378
class GraphElementGridY : public GraphElementGridBase
 8006976:	f7ff ff8d 	bl	8006894 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800697a:	f504 737e 	add.w	r3, r4, #1016	@ 0x3f8
 800697e:	f8c4 b3b8 	str.w	fp, [r4, #952]	@ 0x3b8
class GraphElementGridX : public GraphElementGridBase
 8006982:	4618      	mov	r0, r3
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	f7ff ff85 	bl	8006894 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800698a:	f504 6387 	add.w	r3, r4, #1080	@ 0x438
 800698e:	4ab9      	ldr	r2, [pc, #740]	@ (8006c74 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
class GraphElementGridY : public GraphElementGridBase
 8006990:	4618      	mov	r0, r3
 8006992:	9305      	str	r3, [sp, #20]
class GraphElementGridX : public GraphElementGridBase
 8006994:	f8c4 23f8 	str.w	r2, [r4, #1016]	@ 0x3f8
class GraphElementGridY : public GraphElementGridBase
 8006998:	f7ff ff7c 	bl	8006894 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800699c:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 80069a0:	f8c4 b438 	str.w	fp, [r4, #1080]	@ 0x438
 80069a4:	f204 5b44 	addw	fp, r4, #1348	@ 0x544
        : CanvasWidget()
 80069a8:	4618      	mov	r0, r3
 80069aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ac:	f00a fe82 	bl	80116b4 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : typedTextId(id)
 80069b0:	4bb1      	ldr	r3, [pc, #708]	@ (8006c78 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 80069b2:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 80069b6:	f8a4 a4b4 	strh.w	sl, [r4, #1204]	@ 0x4b4
 80069ba:	f8c4 34b0 	str.w	r3, [r4, #1200]	@ 0x4b0
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80069be:	232e      	movs	r3, #46	@ 0x2e
 80069c0:	4610      	mov	r0, r2
 80069c2:	f8c4 54a4 	str.w	r5, [r4, #1188]	@ 0x4a4
 80069c6:	f8a4 34bc 	strh.w	r3, [r4, #1212]	@ 0x4bc

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 80069ca:	4bac      	ldr	r3, [pc, #688]	@ (8006c7c <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80069cc:	f8c4 64a8 	str.w	r6, [r4, #1192]	@ 0x4a8
class GraphLabelsY : public GraphLabelsBase
 80069d0:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80069d4:	f8c4 54ac 	str.w	r5, [r4, #1196]	@ 0x4ac
 80069d8:	f884 54b8 	strb.w	r5, [r4, #1208]	@ 0x4b8
 80069dc:	f8a4 54ba 	strh.w	r5, [r4, #1210]	@ 0x4ba
 80069e0:	f8c4 54c0 	str.w	r5, [r4, #1216]	@ 0x4c0
 80069e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80069e6:	f00a fe65 	bl	80116b4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 80069ea:	f04f 0202 	mov.w	r2, #2
 80069ee:	f204 41f4 	addw	r1, r4, #1268	@ 0x4f4
 80069f2:	4ba3      	ldr	r3, [pc, #652]	@ (8006c80 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 80069f4:	f884 24f0 	strb.w	r2, [r4, #1264]	@ 0x4f0
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 80069f8:	4608      	mov	r0, r1
 80069fa:	f8c4 34c4 	str.w	r3, [r4, #1220]	@ 0x4c4
 80069fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006a00:	f7fb fe76 	bl	80026f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8006a04:	4b9f      	ldr	r3, [pc, #636]	@ (8006c84 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 8006a06:	f504 61a1 	add.w	r1, r4, #1288	@ 0x508
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8006a0a:	f8c4 5500 	str.w	r5, [r4, #1280]	@ 0x500
 8006a0e:	f8c4 34f4 	str.w	r3, [r4, #1268]	@ 0x4f4
 8006a12:	3324      	adds	r3, #36	@ 0x24
 8006a14:	4608      	mov	r0, r1
 8006a16:	9103      	str	r1, [sp, #12]
 8006a18:	f8c4 34fc 	str.w	r3, [r4, #1276]	@ 0x4fc
 8006a1c:	f00d f9ea 	bl	8013df4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8006a20:	4658      	mov	r0, fp
 8006a22:	f009 f89b 	bl	800fb5c <_ZN8touchgfx12LineProgressC1Ev>
 8006a26:	f504 61cf 	add.w	r1, r4, #1656	@ 0x678
 8006a2a:	f8ad a050 	strh.w	sl, [sp, #80]	@ 0x50
     * Constructor.
     *
     * @param  bmp (Optional) The bitmap to use in the painter.
     */
    PainterRGB565Bitmap(const Bitmap& bmp = Bitmap(BITMAP_INVALID))
        : AbstractPainterRGB565(), AbstractPainterBitmap(bmp)
 8006a2e:	4608      	mov	r0, r1
 8006a30:	9106      	str	r1, [sp, #24]
 8006a32:	f7fb fe5d 	bl	80026f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8006a36:	4b94      	ldr	r3, [pc, #592]	@ (8006c88 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
        setBitmap(bmp);
 8006a38:	a914      	add	r1, sp, #80	@ 0x50
 8006a3a:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8006a3e:	f8c4 3680 	str.w	r3, [r4, #1664]	@ 0x680
 8006a42:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8006a46:	f884 5686 	strb.w	r5, [r4, #1670]	@ 0x686
 8006a4a:	f8a4 3684 	strh.w	r3, [r4, #1668]	@ 0x684
        : x(0), y(0), width(0), height(0)
 8006a4e:	f8c4 5688 	str.w	r5, [r4, #1672]	@ 0x688
 8006a52:	f8c4 568c 	str.w	r5, [r4, #1676]	@ 0x68c
 8006a56:	f8c4 5690 	str.w	r5, [r4, #1680]	@ 0x690
 8006a5a:	f8c4 5694 	str.w	r5, [r4, #1684]	@ 0x694
 8006a5e:	f884 5698 	strb.w	r5, [r4, #1688]	@ 0x698
        setBitmap(bmp);
 8006a62:	f7ff fde8 	bl	8006636 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>
 8006a66:	4b89      	ldr	r3, [pc, #548]	@ (8006c8c <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
 8006a68:	f204 61a4 	addw	r1, r4, #1700	@ 0x6a4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006a6c:	2226      	movs	r2, #38	@ 0x26
 8006a6e:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
 8006a72:	3324      	adds	r3, #36	@ 0x24
 8006a74:	9102      	str	r1, [sp, #8]
 8006a76:	4629      	mov	r1, r5
 8006a78:	f8c4 3680 	str.w	r3, [r4, #1664]	@ 0x680
 8006a7c:	9802      	ldr	r0, [sp, #8]
 8006a7e:	f022 fb5f 	bl	8029140 <memset>
 8006a82:	9802      	ldr	r0, [sp, #8]
 8006a84:	f7ff feae 	bl	80067e4 <_ZN8touchgfx6WidgetC1Ev>
 8006a88:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8006a8a:	4a81      	ldr	r2, [pc, #516]	@ (8006c90 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8006a8c:	f204 7004 	addw	r0, r4, #1796	@ 0x704
 8006a90:	f8c4 36cc 	str.w	r3, [r4, #1740]	@ 0x6cc
 8006a94:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8006a98:	f8a4 a6d0 	strh.w	sl, [r4, #1744]	@ 0x6d0
 8006a9c:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8006aa0:	f8c4 36d8 	str.w	r3, [r4, #1752]	@ 0x6d8
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8006aa4:	f104 0a04 	add.w	sl, r4, #4
        : TextAreaWithWildcardBase(), wc1(0)
 8006aa8:	4b7a      	ldr	r3, [pc, #488]	@ (8006c94 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
        : color(col)
 8006aaa:	f8c4 56d4 	str.w	r5, [r4, #1748]	@ 0x6d4
 8006aae:	f8c4 36a4 	str.w	r3, [r4, #1700]	@ 0x6a4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab6:	f8a4 56dc 	strh.w	r5, [r4, #1756]	@ 0x6dc
 8006aba:	f8c4 36e4 	str.w	r3, [r4, #1764]	@ 0x6e4
 8006abe:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8006ac2:	f8c4 56e0 	str.w	r5, [r4, #1760]	@ 0x6e0
              text(0)
 8006ac6:	f8c4 56e8 	str.w	r5, [r4, #1768]	@ 0x6e8
 8006aca:	f8c4 56ec 	str.w	r5, [r4, #1772]	@ 0x6ec
 8006ace:	f8c3 25e4 	str.w	r2, [r3, #1508]	@ 0x5e4
 8006ad2:	4a71      	ldr	r2, [pc, #452]	@ (8006c98 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 8006ad4:	f8c3 45e8 	str.w	r4, [r3, #1512]	@ 0x5e8
 8006ad8:	f8c3 25ec 	str.w	r2, [r3, #1516]	@ 0x5ec
 8006adc:	f8c3 55f0 	str.w	r5, [r3, #1520]	@ 0x5f0
 8006ae0:	f00e f8a0 	bl	8014c24 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8006ae4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4629      	mov	r1, r5
 8006aec:	4648      	mov	r0, r9
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006af4:	f7fe fe96 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8006af8:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 8006afc:	4650      	mov	r0, sl
 8006afe:	66a1      	str	r1, [r4, #104]	@ 0x68
 8006b00:	4649      	mov	r1, r9
 8006b02:	f009 fa11 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006b06:	462a      	mov	r2, r5
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fe5d 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_GRADIENT_LIGHT_ID));
 8006b10:	a914      	add	r1, sp, #80	@ 0x50
 8006b12:	4640      	mov	r0, r8
 8006b14:	f8ad 5050 	strh.w	r5, [sp, #80]	@ 0x50
 8006b18:	f00d f993 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	4650      	mov	r0, sl
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 8006b20:	f04f 081e 	mov.w	r8, #30
 8006b24:	f009 fa00 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(161, 135, 639, 345);
 8006b28:	f240 1359 	movw	r3, #345	@ 0x159
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	2287      	movs	r2, #135	@ 0x87
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	21a1      	movs	r1, #161	@ 0xa1
 8006b34:	f240 237f 	movw	r3, #639	@ 0x27f
        setIntervalScaled(abs(interval) * dataScale);
 8006b38:	f04f 090a 	mov.w	r9, #10
 8006b3c:	f7fe fe72 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8006b40:	462a      	mov	r2, r5
 8006b42:	4631      	mov	r1, r6
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff fabf 	bl	80060c8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 99);
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	2263      	movs	r2, #99	@ 0x63
 8006b50:	f7ff f8fc 	bl	8005d4c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setGraphAreaMargin(21, 92, 0, 30);
 8006b54:	462b      	mov	r3, r5
 8006b56:	4638      	mov	r0, r7
 8006b58:	f8cd 8000 	str.w	r8, [sp]
 8006b5c:	225c      	movs	r2, #92	@ 0x5c
 8006b5e:	2115      	movs	r1, #21
 8006b60:	f00b fcc3 	bl	80124ea <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8006b64:	462b      	mov	r3, r5
 8006b66:	462a      	mov	r2, r5
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	9500      	str	r5, [sp, #0]
 8006b6e:	f00b fbd1 	bl	8012314 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 3500);
 8006b72:	4629      	mov	r1, r5
 8006b74:	4638      	mov	r0, r7
 8006b76:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8006b7a:	f7ff f978 	bl	8005e6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8006b7e:	f8d4 13a8 	ldr.w	r1, [r4, #936]	@ 0x3a8
        color = newColor;
 8006b82:	4b46      	ldr	r3, [pc, #280]	@ (8006c9c <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b84:	4632      	mov	r2, r6
        setIntervalScaled(abs(interval) * dataScale);
 8006b86:	fb09 f001 	mul.w	r0, r9, r1
        color = newColor;
 8006b8a:	f8c4 33a4 	str.w	r3, [r4, #932]	@ 0x3a4
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8006b8e:	2800      	cmp	r0, #0
        lineWidth = width;
 8006b90:	f884 63b0 	strb.w	r6, [r4, #944]	@ 0x3b0
 8006b94:	bfb8      	it	lt
 8006b96:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006b98:	f8c4 03ac 	str.w	r0, [r4, #940]	@ 0x3ac
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006b9c:	f00b fd58 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8006ba0:	9a04      	ldr	r2, [sp, #16]
    dynamicGraph1.addGraphElement(dynamicGraph1MinorXAxisGrid);
 8006ba2:	9907      	ldr	r1, [sp, #28]
 8006ba4:	f8c4 23b4 	str.w	r2, [r4, #948]	@ 0x3b4
        dataScale = scale;
 8006ba8:	e9c4 60ea 	strd	r6, r0, [r4, #936]	@ 0x3a8
 8006bac:	4638      	mov	r0, r7
 8006bae:	f00b fbbc 	bl	801232a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8006c9c <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
        setIntervalScaled(abs(interval) * dataScale);
 8006bb4:	f8d4 13e8 	ldr.w	r1, [r4, #1000]	@ 0x3e8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006bb8:	4632      	mov	r2, r6
        color = newColor;
 8006bba:	f8c4 33e4 	str.w	r3, [r4, #996]	@ 0x3e4
        setIntervalScaled(abs(interval) * dataScale);
 8006bbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
        lineWidth = width;
 8006bc2:	f884 63f0 	strb.w	r6, [r4, #1008]	@ 0x3f0
        setIntervalScaled(abs(interval) * dataScale);
 8006bc6:	fb03 f001 	mul.w	r0, r3, r1
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	bfb8      	it	lt
 8006bce:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006bd0:	f8c4 03ec 	str.w	r0, [r4, #1004]	@ 0x3ec
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006bd4:	f00b fd3c 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8006bd8:	9a05      	ldr	r2, [sp, #20]
    dynamicGraph1.addGraphElement(dynamicGraph1MinorYAxisGrid);
 8006bda:	9908      	ldr	r1, [sp, #32]
 8006bdc:	f8c4 23f4 	str.w	r2, [r4, #1012]	@ 0x3f4
        dataScale = scale;
 8006be0:	e9c4 60fa 	strd	r6, r0, [r4, #1000]	@ 0x3e8
 8006be4:	4638      	mov	r0, r7
 8006be6:	f00b fba0 	bl	801232a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006bea:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006bee:	2032      	movs	r0, #50	@ 0x32
        lineWidth = width;
 8006bf0:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8006bf4:	f8c4 1424 	str.w	r1, [r4, #1060]	@ 0x424
        setIntervalScaled(abs(interval) * dataScale);
 8006bf8:	f8d4 1428 	ldr.w	r1, [r4, #1064]	@ 0x428
        lineWidth = width;
 8006bfc:	f884 2430 	strb.w	r2, [r4, #1072]	@ 0x430
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006c00:	4632      	mov	r2, r6
        setIntervalScaled(abs(interval) * dataScale);
 8006c02:	4348      	muls	r0, r1
 8006c04:	2800      	cmp	r0, #0
 8006c06:	bfb8      	it	lt
 8006c08:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006c0a:	f8c4 042c 	str.w	r0, [r4, #1068]	@ 0x42c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006c0e:	f00b fd1f 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8006c12:	9904      	ldr	r1, [sp, #16]
 8006c14:	f8c4 042c 	str.w	r0, [r4, #1068]	@ 0x42c
 8006c18:	4638      	mov	r0, r7
        dataScale = scale;
 8006c1a:	f8c4 6428 	str.w	r6, [r4, #1064]	@ 0x428
 8006c1e:	f00b fb84 	bl	801232a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 8006c22:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 8006c26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        lineWidth = width;
 8006c2a:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8006c2e:	f8c4 1464 	str.w	r1, [r4, #1124]	@ 0x464
        setIntervalScaled(abs(interval) * dataScale);
 8006c32:	f8d4 1468 	ldr.w	r1, [r4, #1128]	@ 0x468
        lineWidth = width;
 8006c36:	f884 2470 	strb.w	r2, [r4, #1136]	@ 0x470
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006c3a:	4632      	mov	r2, r6
        setIntervalScaled(abs(interval) * dataScale);
 8006c3c:	4348      	muls	r0, r1
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	bfb8      	it	lt
 8006c42:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8006c44:	f8c4 046c 	str.w	r0, [r4, #1132]	@ 0x46c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006c48:	f00b fd02 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8006c4c:	9905      	ldr	r1, [sp, #20]
 8006c4e:	f8c4 046c 	str.w	r0, [r4, #1132]	@ 0x46c
 8006c52:	4638      	mov	r0, r7
        dataScale = scale;
 8006c54:	f8c4 6468 	str.w	r6, [r4, #1128]	@ 0x468
 8006c58:	f00b fb67 	bl	801232a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006c5c:	e022      	b.n	8006ca4 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 8006c5e:	bf00      	nop
 8006c60:	0802ca34 	.word	0x0802ca34
 8006c64:	0802df74 	.word	0x0802df74
 8006c68:	0802e054 	.word	0x0802e054
 8006c6c:	0802da60 	.word	0x0802da60
 8006c70:	0802c880 	.word	0x0802c880
 8006c74:	0802c664 	.word	0x0802c664
 8006c78:	0802bd6c 	.word	0x0802bd6c
 8006c7c:	0802de60 	.word	0x0802de60
 8006c80:	0802dd28 	.word	0x0802dd28
 8006c84:	0802d824 	.word	0x0802d824
 8006c88:	0802c7d4 	.word	0x0802c7d4
 8006c8c:	0802d7e4 	.word	0x0802d7e4
 8006c90:	0802ca1c 	.word	0x0802ca1c
 8006c94:	0802c7f0 	.word	0x0802c7f0
 8006c98:	080067a5 	.word	0x080067a5
 8006c9c:	ff1e1e1e 	.word	0xff1e1e1e
 8006ca0:	0802c71c 	.word	0x0802c71c
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8006ca4:	f8d4 14a8 	ldr.w	r1, [r4, #1192]	@ 0x4a8
        return i * scale;
 8006ca8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
        color = newColor;
 8006cac:	f04f 4c7f 	mov.w	ip, #4278190080	@ 0xff000000
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	fb03 f001 	mul.w	r0, r3, r1
class TypedText
 8006cb6:	2306      	movs	r3, #6
 8006cb8:	f8c4 c4a4 	str.w	ip, [r4, #1188]	@ 0x4a4
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f8a4 34b4 	strh.w	r3, [r4, #1204]	@ 0x4b4
 8006cc2:	bfb8      	it	lt
 8006cc4:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006cc6:	f8c4 04ac 	str.w	r0, [r4, #1196]	@ 0x4ac
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006cca:	f00b fcc1 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8006cce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cd0:	f8c4 04ac 	str.w	r0, [r4, #1196]	@ 0x4ac
 8006cd4:	4638      	mov	r0, r7
        dataScale = scale;
 8006cd6:	f8c4 64a8 	str.w	r6, [r4, #1192]	@ 0x4a8
 8006cda:	f00b fb38 	bl	801234e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8006cde:	4a57      	ldr	r2, [pc, #348]	@ (8006e3c <_ZN15Screen1ViewBaseC1Ev+0x580>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8006ce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f8c4 2500 	str.w	r2, [r4, #1280]	@ 0x500
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8006ce8:	f24f 0227 	movw	r2, #61479	@ 0xf027
 8006cec:	f8a4 2504 	strh.w	r2, [r4, #1284]	@ 0x504
        canvasPainter = &painter;
 8006cf0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006cf2:	f8c4 24ec 	str.w	r2, [r4, #1260]	@ 0x4ec
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8006cf6:	f04f 0202 	mov.w	r2, #2
 8006cfa:	f884 24f0 	strb.w	r2, [r4, #1264]	@ 0x4f0
 8006cfe:	f00b fb14 	bl	801232a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006d02:	4639      	mov	r1, r7
 8006d04:	4650      	mov	r0, sl
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006d06:	f44f 7796 	mov.w	r7, #300	@ 0x12c
 8006d0a:	f009 f90d 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc1_button.setXY(37, 35);
 8006d0e:	9803      	ldr	r0, [sp, #12]
 8006d10:	2223      	movs	r2, #35	@ 0x23
 8006d12:	2125      	movs	r1, #37	@ 0x25
 8006d14:	f7ff fd59 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
 8006d18:	2203      	movs	r2, #3
 8006d1a:	2306      	movs	r3, #6
    Sc1_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID));
 8006d1c:	a911      	add	r1, sp, #68	@ 0x44
 8006d1e:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8006d22:	f04f 0202 	mov.w	r2, #2
 8006d26:	9803      	ldr	r0, [sp, #12]
 8006d28:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 8006d2c:	aa14      	add	r2, sp, #80	@ 0x50
 8006d2e:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8006d32:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 8006d36:	ab13      	add	r3, sp, #76	@ 0x4c
 8006d38:	9200      	str	r2, [sp, #0]
 8006d3a:	aa12      	add	r2, sp, #72	@ 0x48
 8006d3c:	f00c ffb5 	bl	8013caa <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Sc1_button.setAction(buttonCallback);
 8006d40:	f504 5357 	add.w	r3, r4, #13760	@ 0x35c0
 8006d44:	9903      	ldr	r1, [sp, #12]
 8006d46:	4650      	mov	r0, sl
 8006d48:	3324      	adds	r3, #36	@ 0x24
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8006d4a:	f8c4 8540 	str.w	r8, [r4, #1344]	@ 0x540
 8006d4e:	f04f 0805 	mov.w	r8, #5
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8006d52:	f8c4 3530 	str.w	r3, [r4, #1328]	@ 0x530
 8006d56:	f009 f8e7 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lineProgress1.setXY(87, 157);
 8006d5a:	4658      	mov	r0, fp
 8006d5c:	229d      	movs	r2, #157	@ 0x9d
 8006d5e:	2157      	movs	r1, #87	@ 0x57
 8006d60:	f7ff fd33 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 10, 300);
 8006d64:	464b      	mov	r3, r9
 8006d66:	462a      	mov	r2, r5
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	9700      	str	r7, [sp, #0]
 8006d6e:	f008 fedc 	bl	800fb2a <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 3500);
 8006d72:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8006d76:	462b      	mov	r3, r5
 8006d78:	4629      	mov	r1, r5
 8006d7a:	4658      	mov	r0, fp
 8006d7c:	9500      	str	r5, [sp, #0]
 8006d7e:	f008 ff1f 	bl	800fbc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
 8006d82:	2304      	movs	r3, #4
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_BACKGROUNDS_IMAGE_PLAIN_NORMAL_MEDIUM_90_ID));
 8006d84:	a914      	add	r1, sp, #80	@ 0x50
 8006d86:	4658      	mov	r0, fp
 8006d88:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 8006d8c:	f009 f85f 	bl	800fe4e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_NORMAL_MEDIUM_ACTION_90_ID));
 8006d90:	a914      	add	r1, sp, #80	@ 0x50
 8006d92:	9806      	ldr	r0, [sp, #24]
 8006d94:	f8ad 8050 	strh.w	r8, [sp, #80]	@ 0x50
 8006d98:	f00a fb92 	bl	80114c0 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    lineProgress1.setPainter(lineProgress1Painter);
 8006d9c:	9906      	ldr	r1, [sp, #24]
 8006d9e:	4658      	mov	r0, fp
 8006da0:	f008 fe24 	bl	800f9ec <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(5, 300);
 8006da4:	463a      	mov	r2, r7
 8006da6:	4641      	mov	r1, r8
 8006da8:	4658      	mov	r0, fp
 8006daa:	f008 fe4a 	bl	800fa42 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(5, 0);
 8006dae:	462a      	mov	r2, r5
 8006db0:	4641      	mov	r1, r8
 8006db2:	4658      	mov	r0, fp
 8006db4:	f008 fe2a 	bl	800fa0c <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(10);
 8006db8:	4649      	mov	r1, r9
 8006dba:	4658      	mov	r0, fp
 8006dbc:	f008 fe48 	bl	800fa50 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4658      	mov	r0, fp
 8006dc4:	f008 fe4f 	bl	800fa66 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(300);
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4658      	mov	r0, fp
        boundingArea = calculateBoundingArea();
 8006dcc:	af0c      	add	r7, sp, #48	@ 0x30
 8006dce:	f008 fe60 	bl	800fa92 <_ZN8touchgfx12LineProgress8setValueEi>
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	f009 f8a7 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea_Value.setPosition(7, 120, 149, 31);
 8006dda:	231f      	movs	r3, #31
 8006ddc:	9802      	ldr	r0, [sp, #8]
 8006dde:	2278      	movs	r2, #120	@ 0x78
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	2107      	movs	r1, #7
 8006de4:	2395      	movs	r3, #149	@ 0x95
 8006de6:	f7fe fd1d 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006dea:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8006dee:	f8d4 36a4 	ldr.w	r3, [r4, #1700]	@ 0x6a4
 8006df2:	4638      	mov	r0, r7
 8006df4:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 8006df6:	f8c4 26d4 	str.w	r2, [r4, #1748]	@ 0x6d4
        boundingArea = calculateBoundingArea();
 8006dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 8006dfe:	f8a4 56d8 	strh.w	r5, [r4, #1752]	@ 0x6d8
        boundingArea = calculateBoundingArea();
 8006e02:	4798      	blx	r3
 8006e04:	f504 63dc 	add.w	r3, r4, #1760	@ 0x6e0
 8006e08:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea_Value.setWildcard(textArea_ValueBuffer);
 8006e10:	f504 63de 	add.w	r3, r4, #1776	@ 0x6f0
    textArea_Value.setTypedText(touchgfx::TypedText(T_ADC_VALUE));
 8006e14:	a914      	add	r1, sp, #80	@ 0x50
 8006e16:	9802      	ldr	r0, [sp, #8]
        wc1 = value;
 8006e18:	f8c4 36ec 	str.w	r3, [r4, #1772]	@ 0x6ec
        : typedTextId(id)
 8006e1c:	4b08      	ldr	r3, [pc, #32]	@ (8006e40 <_ZN15Screen1ViewBaseC1Ev+0x584>)
    textArea_ValueBuffer[0] = 0;
 8006e1e:	f8a4 56f0 	strh.w	r5, [r4, #1776]	@ 0x6f0
 8006e22:	9314      	str	r3, [sp, #80]	@ 0x50
 8006e24:	f8ad 6054 	strh.w	r6, [sp, #84]	@ 0x54
    textArea_Value.setTypedText(touchgfx::TypedText(T_ADC_VALUE));
 8006e28:	f00c fe66 	bl	8013af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	9902      	ldr	r1, [sp, #8]
 8006e30:	f009 f87a 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006e34:	4620      	mov	r0, r4
 8006e36:	b017      	add	sp, #92	@ 0x5c
 8006e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3c:	fff20538 	.word	0xfff20538
 8006e40:	0802bd6c 	.word	0x0802bd6c

08006e44 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8006e44:	4770      	bx	lr

08006e46 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8006e46:	4770      	bx	lr

08006e48 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e48:	4770      	bx	lr

08006e4a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006e4a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006e4c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006e4e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006e50:	68c2      	ldr	r2, [r0, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	1055      	asrs	r5, r2, #1
 8006e56:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006e5a:	07d2      	lsls	r2, r2, #31
 8006e5c:	bf48      	it	mi
 8006e5e:	5962      	ldrmi	r2, [r4, r5]
    }
 8006e60:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006e62:	bf48      	it	mi
 8006e64:	58d3      	ldrmi	r3, [r2, r3]
 8006e66:	4718      	bx	r3

08006e68 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006e68:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8006e6a:	6840      	ldr	r0, [r0, #4]
 8006e6c:	b130      	cbz	r0, 8006e7c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	b91a      	cbnz	r2, 8006e7a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006e72:	68d8      	ldr	r0, [r3, #12]
 8006e74:	f000 0001 	and.w	r0, r0, #1
 8006e78:	4770      	bx	lr
 8006e7a:	2001      	movs	r0, #1
    }
 8006e7c:	4770      	bx	lr

08006e7e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	2110      	movs	r1, #16
 8006e84:	f021 fe91 	bl	8028baa <_ZdlPvj>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4604      	mov	r4, r0
}
 8006e90:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8006e94:	f021 fe89 	bl	8028baa <_ZdlPvj>
 8006e98:	4620      	mov	r0, r4
 8006e9a:	bd10      	pop	{r4, pc}

08006e9c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Sc2_button)
 8006e9c:	3098      	adds	r0, #152	@ 0x98
 8006e9e:	4288      	cmp	r0, r1
{
 8006ea0:	b508      	push	{r3, lr}
    if (&src == &Sc2_button)
 8006ea2:	d105      	bne.n	8006eb0 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006ea4:	f00f fb96 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When Sc2_button clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenCoverTransitionWest();
    }
}
 8006ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenCoverTransitionWest();
 8006eac:	f7fe beb2 	b.w	8005c14 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>
}
 8006eb0:	bd08      	pop	{r3, pc}
	...

08006eb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006eb8:	2226      	movs	r2, #38	@ 0x26
 8006eba:	2100      	movs	r1, #0
 8006ebc:	f022 f940 	bl	8029140 <memset>
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff fc8f 	bl	80067e4 <_ZN8touchgfx6WidgetC1Ev>
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 8006ec8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8006ecc:	4620      	mov	r0, r4
 8006ece:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ed0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ed4:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 8006edc:	4a05      	ldr	r2, [pc, #20]	@ (8006ef4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 8006ede:	8723      	strh	r3, [r4, #56]	@ 0x38
 8006ee0:	6022      	str	r2, [r4, #0]
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006ee8:	64a3      	str	r3, [r4, #72]	@ 0x48
              text(0)
 8006eea:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 8006eee:	bd10      	pop	{r4, pc}
 8006ef0:	0802bd6c 	.word	0x0802bd6c
 8006ef4:	0802c7f0 	.word	0x0802c7f0

08006ef8 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	4604      	mov	r4, r0
 8006efe:	b091      	sub	sp, #68	@ 0x44
 8006f00:	2500      	movs	r5, #0
 8006f02:	f010 ffe9 	bl	8017ed8 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006f06:	46a1      	mov	r9, r4
 8006f08:	4bbf      	ldr	r3, [pc, #764]	@ (8007208 <_ZN15Screen2ViewBaseC1Ev+0x310>)
        : Widget(), alpha(255), color(0)
 8006f0a:	f04f 0a26 	mov.w	sl, #38	@ 0x26
 8006f0e:	4629      	mov	r1, r5
 8006f10:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006f12:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8006f16:	f849 3b40 	str.w	r3, [r9], #64
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	4648      	mov	r0, r9
 8006f1e:	26ff      	movs	r6, #255	@ 0xff
 8006f20:	f022 f90e 	bl	8029140 <memset>
 8006f24:	4648      	mov	r0, r9
 8006f26:	f7ff fc5d 	bl	80067e4 <_ZN8touchgfx6WidgetC1Ev>
 8006f2a:	4bb8      	ldr	r3, [pc, #736]	@ (800720c <_ZN15Screen2ViewBaseC1Ev+0x314>)
 8006f2c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
        : Widget(), bitmap(bmp), alpha(255)
 8006f30:	4652      	mov	r2, sl
 8006f32:	4629      	mov	r1, r5
 8006f34:	6423      	str	r3, [r4, #64]	@ 0x40
 8006f36:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 8006f3a:	4640      	mov	r0, r8
        : color(col)
 8006f3c:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006f3e:	f104 0b98 	add.w	fp, r4, #152	@ 0x98
 8006f42:	f8ad 7038 	strh.w	r7, [sp, #56]	@ 0x38
 8006f46:	f022 f8fb 	bl	8029140 <memset>
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f104 0ad4 	add.w	sl, r4, #212	@ 0xd4
 8006f50:	f7ff fc48 	bl	80067e4 <_ZN8touchgfx6WidgetC1Ev>
 8006f54:	4bae      	ldr	r3, [pc, #696]	@ (8007210 <_ZN15Screen2ViewBaseC1Ev+0x318>)
 8006f56:	f884 6094 	strb.w	r6, [r4, #148]	@ 0x94
        Image::setBitmap(bmp);
 8006f5a:	ae0e      	add	r6, sp, #56	@ 0x38
        : Widget(), bitmap(bmp), alpha(255)
 8006f5c:	66e3      	str	r3, [r4, #108]	@ 0x6c
        Image::setBitmap(bmp);
 8006f5e:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8006f60:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
        Image::setBitmap(bmp);
 8006f64:	4631      	mov	r1, r6
        : Widget(), bitmap(bmp), alpha(255)
 8006f66:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 8006f6a:	f00c ff6a 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006f6e:	4658      	mov	r0, fp
 8006f70:	f00c ff40 	bl	8013df4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8006f74:	4650      	mov	r0, sl
 8006f76:	f7ff ff9d 	bl	8006eb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f7a:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8006f7e:	4618      	mov	r0, r3
 8006f80:	9302      	str	r3, [sp, #8]
 8006f82:	f7ff ff97 	bl	8006eb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f86:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	f7ff ff91 	bl	8006eb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f92:	f504 73dc 	add.w	r3, r4, #440	@ 0x1b8
 8006f96:	4618      	mov	r0, r3
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	f7ff ff8b 	bl	8006eb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006f9e:	f504 7301 	add.w	r3, r4, #516	@ 0x204
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	f8ad 7038 	strh.w	r7, [sp, #56]	@ 0x38
 8006fa8:	4618      	mov	r0, r3
 8006faa:	9305      	str	r3, [sp, #20]
 8006fac:	f00c fade 	bl	801356c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006fb0:	4b98      	ldr	r3, [pc, #608]	@ (8007214 <_ZN15Screen2ViewBaseC1Ev+0x31c>)
    __background.setPosition(0, 0, 800, 480);
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4648      	mov	r0, r9
 8006fb8:	1d27      	adds	r7, r4, #4
 8006fba:	e9c4 34a0 	strd	r3, r4, [r4, #640]	@ 0x280
 8006fbe:	4b96      	ldr	r3, [pc, #600]	@ (8007218 <_ZN15Screen2ViewBaseC1Ev+0x320>)
 8006fc0:	e9c4 35a2 	strd	r3, r5, [r4, #648]	@ 0x288
 8006fc4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006fce:	f7fe fc29 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006fd2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4638      	mov	r0, r7
 8006fda:	66a3      	str	r3, [r4, #104]	@ 0x68
 8006fdc:	f008 ffa4 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	f7ff fbf0 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
 8006fea:	2301      	movs	r3, #1
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_WAVES_ID));
 8006fec:	4631      	mov	r1, r6
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8006ff4:	f00c ff25 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f008 ff94 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Sc2_button.setXY(650, 35);
 8007000:	4658      	mov	r0, fp
 8007002:	2223      	movs	r2, #35	@ 0x23
 8007004:	f240 218a 	movw	r1, #650	@ 0x28a
 8007008:	f7ff fbdf 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
 800700c:	f04f 0303 	mov.w	r3, #3
 8007010:	f04f 0202 	mov.w	r2, #2
    Sc2_button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_E8F6FB_SVG_ID));
 8007014:	a90b      	add	r1, sp, #44	@ 0x2c
 8007016:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800701a:	2307      	movs	r3, #7
 800701c:	4658      	mov	r0, fp
 800701e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8007022:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007026:	aa0c      	add	r2, sp, #48	@ 0x30
 8007028:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800702c:	ab0d      	add	r3, sp, #52	@ 0x34
 800702e:	9600      	str	r6, [sp, #0]
        boundingArea = calculateBoundingArea();
 8007030:	f10d 0818 	add.w	r8, sp, #24
 8007034:	f00c fe39 	bl	8013caa <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8007038:	231e      	movs	r3, #30
 800703a:	4659      	mov	r1, fp
 800703c:	4638      	mov	r0, r7
 800703e:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    Sc2_button.setAction(buttonCallback);
 8007042:	f504 7320 	add.w	r3, r4, #640	@ 0x280
        color = newColor;
 8007046:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 800721c <_ZN15Screen2ViewBaseC1Ev+0x324>
 800704a:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 800704e:	f008 ff6b 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaTemp.setPosition(33, 132, 429, 73);
 8007052:	2349      	movs	r3, #73	@ 0x49
 8007054:	2284      	movs	r2, #132	@ 0x84
 8007056:	4650      	mov	r0, sl
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2121      	movs	r1, #33	@ 0x21
 800705c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8007060:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8007220 <_ZN15Screen2ViewBaseC1Ev+0x328>
 8007064:	f7fe fbde 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 8007068:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800706c:	4651      	mov	r1, sl
 800706e:	4640      	mov	r0, r8
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8007074:	f8c4 b104 	str.w	fp, [r4, #260]	@ 0x104
        linespace = space;
 8007078:	f8a4 5108 	strh.w	r5, [r4, #264]	@ 0x108
        boundingArea = calculateBoundingArea();
 800707c:	4798      	blx	r3
 800707e:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8007082:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007086:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaTemp.setWildcard(textAreaTempBuffer);
 800708a:	f504 730c 	add.w	r3, r4, #560	@ 0x230
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 800708e:	4631      	mov	r1, r6
 8007090:	4650      	mov	r0, sl
    textAreaTempBuffer[0] = 0;
 8007092:	f8a4 5230 	strh.w	r5, [r4, #560]	@ 0x230
        wc1 = value;
 8007096:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
 800709a:	2305      	movs	r3, #5
 800709c:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 80070a0:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    textAreaTemp.setTypedText(touchgfx::TypedText(T_TEMPERATUR_TEXT));
 80070a4:	f00c fd28 	bl	8013af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80070a8:	4651      	mov	r1, sl
    textAreaHumi.setPosition(33, 205, 429, 70);
 80070aa:	f04f 0a46 	mov.w	sl, #70	@ 0x46
 80070ae:	4638      	mov	r0, r7
 80070b0:	f008 ff3a 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80070b4:	22cd      	movs	r2, #205	@ 0xcd
 80070b6:	9802      	ldr	r0, [sp, #8]
 80070b8:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80070bc:	2121      	movs	r1, #33	@ 0x21
 80070be:	f8cd a000 	str.w	sl, [sp]
 80070c2:	f7fe fbaf 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 80070c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 80070ca:	9902      	ldr	r1, [sp, #8]
 80070cc:	4640      	mov	r0, r8
 80070ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 80070d2:	f8c4 b150 	str.w	fp, [r4, #336]	@ 0x150
        linespace = space;
 80070d6:	f8a4 5154 	strh.w	r5, [r4, #340]	@ 0x154
        boundingArea = calculateBoundingArea();
 80070da:	4798      	blx	r3
 80070dc:	f504 73ae 	add.w	r3, r4, #348	@ 0x15c
 80070e0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80070e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaHumi.setWildcard(textAreaHumiBuffer);
 80070e8:	f504 7311 	add.w	r3, r4, #580	@ 0x244
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 80070ec:	4631      	mov	r1, r6
 80070ee:	9802      	ldr	r0, [sp, #8]
 80070f0:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
 80070f4:	2304      	movs	r3, #4
    textAreaHumiBuffer[0] = 0;
 80070f6:	f8a4 5244 	strh.w	r5, [r4, #580]	@ 0x244
 80070fa:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 80070fe:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    textAreaHumi.setTypedText(touchgfx::TypedText(T_LUFTFEUCHTE_TEXT));
 8007102:	f00c fcf9 	bl	8013af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007106:	9902      	ldr	r1, [sp, #8]
 8007108:	4638      	mov	r0, r7
 800710a:	f008 ff0d 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaPres.setPosition(33, 275, 429, 70);
 800710e:	f240 1213 	movw	r2, #275	@ 0x113
 8007112:	9803      	ldr	r0, [sp, #12]
 8007114:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8007118:	2121      	movs	r1, #33	@ 0x21
 800711a:	f8cd a000 	str.w	sl, [sp]
 800711e:	f7fe fb81 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007122:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8007126:	9903      	ldr	r1, [sp, #12]
 8007128:	4640      	mov	r0, r8
 800712a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 800712e:	f8c4 b19c 	str.w	fp, [r4, #412]	@ 0x19c
        linespace = space;
 8007132:	f8a4 51a0 	strh.w	r5, [r4, #416]	@ 0x1a0
        boundingArea = calculateBoundingArea();
 8007136:	4798      	blx	r3
 8007138:	f504 73d4 	add.w	r3, r4, #424	@ 0x1a8
 800713c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007140:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaPres.setWildcard(textAreaPresBuffer);
 8007144:	f504 7316 	add.w	r3, r4, #600	@ 0x258
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 8007148:	4631      	mov	r1, r6
 800714a:	9803      	ldr	r0, [sp, #12]
 800714c:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
 8007150:	f04f 0303 	mov.w	r3, #3
    textAreaPresBuffer[0] = 0;
 8007154:	f8a4 5258 	strh.w	r5, [r4, #600]	@ 0x258
 8007158:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 800715c:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    textAreaPres.setTypedText(touchgfx::TypedText(T_LUFTDRUCK_TEXT));
 8007160:	f00c fcca 	bl	8013af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007164:	9903      	ldr	r1, [sp, #12]
 8007166:	4638      	mov	r0, r7
 8007168:	f008 fede 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaGas.setPosition(33, 345, 429, 70);
 800716c:	f240 1259 	movw	r2, #345	@ 0x159
 8007170:	9804      	ldr	r0, [sp, #16]
 8007172:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8007176:	2121      	movs	r1, #33	@ 0x21
 8007178:	f8cd a000 	str.w	sl, [sp]
 800717c:	f7fe fb52 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007180:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 8007184:	9904      	ldr	r1, [sp, #16]
 8007186:	4640      	mov	r0, r8
 8007188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 800718c:	f8c4 b1e8 	str.w	fp, [r4, #488]	@ 0x1e8
        linespace = space;
 8007190:	f8a4 51ec 	strh.w	r5, [r4, #492]	@ 0x1ec
        boundingArea = calculateBoundingArea();
 8007194:	4798      	blx	r3
 8007196:	f504 73fa 	add.w	r3, r4, #500	@ 0x1f4
 800719a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800719e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaGas.setWildcard(textAreaGasBuffer);
 80071a2:	f504 731b 	add.w	r3, r4, #620	@ 0x26c
 80071a6:	f04f 0202 	mov.w	r2, #2
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 80071aa:	4631      	mov	r1, r6
 80071ac:	9804      	ldr	r0, [sp, #16]
 80071ae:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
    textAreaGasBuffer[0] = 0;
 80071b2:	f8a4 526c 	strh.w	r5, [r4, #620]	@ 0x26c
 80071b6:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 80071ba:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    textAreaGas.setTypedText(touchgfx::TypedText(T_LUFTQUALITAET_TEXT));
 80071be:	f00c fc9b 	bl	8013af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80071c2:	9904      	ldr	r1, [sp, #16]
 80071c4:	4638      	mov	r0, r7
 80071c6:	f008 feaf 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80071ca:	2308      	movs	r3, #8
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_KAYRA_ID));
 80071cc:	4631      	mov	r1, r6
 80071ce:	9805      	ldr	r0, [sp, #20]
 80071d0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80071d4:	f00c fe35 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(496, 94, 287, 378);
 80071d8:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 80071dc:	225e      	movs	r2, #94	@ 0x5e
 80071de:	9805      	ldr	r0, [sp, #20]
 80071e0:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	f240 131f 	movw	r3, #287	@ 0x11f
 80071ea:	f7fe fb1b 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80071ee:	4629      	mov	r1, r5
 80071f0:	9805      	ldr	r0, [sp, #20]
 80071f2:	f00c f976 	bl	80134e2 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80071f6:	4638      	mov	r0, r7
 80071f8:	9905      	ldr	r1, [sp, #20]
 80071fa:	f008 fe95 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80071fe:	4620      	mov	r0, r4
 8007200:	b011      	add	sp, #68	@ 0x44
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	0802ca80 	.word	0x0802ca80
 800720c:	0802df74 	.word	0x0802df74
 8007210:	0802e054 	.word	0x0802e054
 8007214:	0802ca68 	.word	0x0802ca68
 8007218:	08006e9d 	.word	0x08006e9d
 800721c:	fff0f0f0 	.word	0xfff0f0f0
 8007220:	0802bd6c 	.word	0x0802bd6c

08007224 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007224:	4770      	bx	lr
	...

08007228 <_Z23getFont_verdana_20_4bppv>:
{
 8007228:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800722a:	4d17      	ldr	r5, [pc, #92]	@ (8007288 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 800722c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800722e:	682c      	ldr	r4, [r5, #0]
 8007230:	f3bf 8f5b 	dmb	ish
 8007234:	f014 0401 	ands.w	r4, r4, #1
 8007238:	d122      	bne.n	8007280 <_Z23getFont_verdana_20_4bppv+0x58>
 800723a:	4628      	mov	r0, r5
 800723c:	f021 fcb7 	bl	8028bae <__cxa_guard_acquire>
 8007240:	b1f0      	cbz	r0, 8007280 <_Z23getFont_verdana_20_4bppv+0x58>
 8007242:	233f      	movs	r3, #63	@ 0x3f
 8007244:	2217      	movs	r2, #23
 8007246:	4911      	ldr	r1, [pc, #68]	@ (800728c <_Z23getFont_verdana_20_4bppv+0x64>)
 8007248:	9309      	str	r3, [sp, #36]	@ 0x24
 800724a:	4b11      	ldr	r3, [pc, #68]	@ (8007290 <_Z23getFont_verdana_20_4bppv+0x68>)
 800724c:	4811      	ldr	r0, [pc, #68]	@ (8007294 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800724e:	9308      	str	r3, [sp, #32]
 8007250:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <_Z23getFont_verdana_20_4bppv+0x70>)
 8007252:	940a      	str	r4, [sp, #40]	@ 0x28
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	2301      	movs	r3, #1
 8007258:	9401      	str	r4, [sp, #4]
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8007260:	2304      	movs	r3, #4
 8007262:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007266:	2314      	movs	r3, #20
 8007268:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2318      	movs	r3, #24
 8007270:	f7fe fd32 	bl	8005cd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007274:	4809      	ldr	r0, [pc, #36]	@ (800729c <_Z23getFont_verdana_20_4bppv+0x74>)
 8007276:	f021 fce5 	bl	8028c44 <atexit>
 800727a:	4628      	mov	r0, r5
 800727c:	f021 fca3 	bl	8028bc6 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8007280:	4804      	ldr	r0, [pc, #16]	@ (8007294 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007282:	b00f      	add	sp, #60	@ 0x3c
 8007284:	bd30      	pop	{r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	20012658 	.word	0x20012658
 800728c:	906dfda0 	.word	0x906dfda0
 8007290:	0802e5d8 	.word	0x0802e5d8
 8007294:	2001265c 	.word	0x2001265c
 8007298:	0802e6a0 	.word	0x0802e6a0
 800729c:	08007225 	.word	0x08007225

080072a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 37, 36, 30, 0, 0, 4, 1, 0, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80072a0:	4770      	bx	lr
	...

080072a4 <_Z23getFont_verdana_30_4bppv>:
{
 80072a4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 37, 36, 30, 0, 0, 4, 1, 0, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80072a6:	4d17      	ldr	r5, [pc, #92]	@ (8007304 <_Z23getFont_verdana_30_4bppv+0x60>)
{
 80072a8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 37, 36, 30, 0, 0, 4, 1, 0, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80072aa:	682c      	ldr	r4, [r5, #0]
 80072ac:	f3bf 8f5b 	dmb	ish
 80072b0:	f014 0401 	ands.w	r4, r4, #1
 80072b4:	d122      	bne.n	80072fc <_Z23getFont_verdana_30_4bppv+0x58>
 80072b6:	4628      	mov	r0, r5
 80072b8:	f021 fc79 	bl	8028bae <__cxa_guard_acquire>
 80072bc:	b1f0      	cbz	r0, 80072fc <_Z23getFont_verdana_30_4bppv+0x58>
 80072be:	233f      	movs	r3, #63	@ 0x3f
 80072c0:	2225      	movs	r2, #37	@ 0x25
 80072c2:	4911      	ldr	r1, [pc, #68]	@ (8007308 <_Z23getFont_verdana_30_4bppv+0x64>)
 80072c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c6:	4b11      	ldr	r3, [pc, #68]	@ (800730c <_Z23getFont_verdana_30_4bppv+0x68>)
 80072c8:	4811      	ldr	r0, [pc, #68]	@ (8007310 <_Z23getFont_verdana_30_4bppv+0x6c>)
 80072ca:	9308      	str	r3, [sp, #32]
 80072cc:	4b11      	ldr	r3, [pc, #68]	@ (8007314 <_Z23getFont_verdana_30_4bppv+0x70>)
 80072ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	2301      	movs	r3, #1
 80072d4:	9401      	str	r4, [sp, #4]
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80072dc:	2304      	movs	r3, #4
 80072de:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80072e2:	231e      	movs	r3, #30
 80072e4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2324      	movs	r3, #36	@ 0x24
 80072ec:	f7fe fcf4 	bl	8005cd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80072f0:	4809      	ldr	r0, [pc, #36]	@ (8007318 <_Z23getFont_verdana_30_4bppv+0x74>)
 80072f2:	f021 fca7 	bl	8028c44 <atexit>
 80072f6:	4628      	mov	r0, r5
 80072f8:	f021 fc65 	bl	8028bc6 <__cxa_guard_release>
    return verdana_30_4bpp;
}
 80072fc:	4804      	ldr	r0, [pc, #16]	@ (8007310 <_Z23getFont_verdana_30_4bppv+0x6c>)
 80072fe:	b00f      	add	sp, #60	@ 0x3c
 8007300:	bd30      	pop	{r4, r5, pc}
 8007302:	bf00      	nop
 8007304:	20012688 	.word	0x20012688
 8007308:	906dfee4 	.word	0x906dfee4
 800730c:	0802e614 	.word	0x0802e614
 8007310:	2001268c 	.word	0x2001268c
 8007314:	0802e6a4 	.word	0x0802e6a4
 8007318:	080072a1 	.word	0x080072a1

0800731c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_60_4bpp();

touchgfx::GeneratedFont& getFont_verdana_60_4bpp()
{
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 15, 71, 60, 0, 0, 4, 1, 0, 0, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 800731c:	4770      	bx	lr
	...

08007320 <_Z23getFont_verdana_60_4bppv>:
{
 8007320:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 15, 71, 60, 0, 0, 4, 1, 0, 0, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8007322:	4d17      	ldr	r5, [pc, #92]	@ (8007380 <_Z23getFont_verdana_60_4bppv+0x60>)
{
 8007324:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 15, 71, 60, 0, 0, 4, 1, 0, 0, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8007326:	682c      	ldr	r4, [r5, #0]
 8007328:	f3bf 8f5b 	dmb	ish
 800732c:	f014 0401 	ands.w	r4, r4, #1
 8007330:	d122      	bne.n	8007378 <_Z23getFont_verdana_60_4bppv+0x58>
 8007332:	4628      	mov	r0, r5
 8007334:	f021 fc3b 	bl	8028bae <__cxa_guard_acquire>
 8007338:	b1f0      	cbz	r0, 8007378 <_Z23getFont_verdana_60_4bppv+0x58>
 800733a:	233f      	movs	r3, #63	@ 0x3f
 800733c:	2201      	movs	r2, #1
 800733e:	4911      	ldr	r1, [pc, #68]	@ (8007384 <_Z23getFont_verdana_60_4bppv+0x64>)
 8007340:	9309      	str	r3, [sp, #36]	@ 0x24
 8007342:	4b11      	ldr	r3, [pc, #68]	@ (8007388 <_Z23getFont_verdana_60_4bppv+0x68>)
 8007344:	4811      	ldr	r0, [pc, #68]	@ (800738c <_Z23getFont_verdana_60_4bppv+0x6c>)
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	4b11      	ldr	r3, [pc, #68]	@ (8007390 <_Z23getFont_verdana_60_4bppv+0x70>)
 800734a:	940a      	str	r4, [sp, #40]	@ 0x28
 800734c:	9405      	str	r4, [sp, #20]
 800734e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8007352:	2304      	movs	r3, #4
 8007354:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007358:	233c      	movs	r3, #60	@ 0x3c
 800735a:	220f      	movs	r2, #15
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	2347      	movs	r3, #71	@ 0x47
 8007360:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007364:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007368:	f7fe fcb6 	bl	8005cd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800736c:	4809      	ldr	r0, [pc, #36]	@ (8007394 <_Z23getFont_verdana_60_4bppv+0x74>)
 800736e:	f021 fc69 	bl	8028c44 <atexit>
 8007372:	4628      	mov	r0, r5
 8007374:	f021 fc27 	bl	8028bc6 <__cxa_guard_release>
    return verdana_60_4bpp;
}
 8007378:	4804      	ldr	r0, [pc, #16]	@ (800738c <_Z23getFont_verdana_60_4bppv+0x6c>)
 800737a:	b00f      	add	sp, #60	@ 0x3c
 800737c:	bd30      	pop	{r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	200126b8 	.word	0x200126b8
 8007384:	906e00ec 	.word	0x906e00ec
 8007388:	0802e698 	.word	0x0802e698
 800738c:	200126bc 	.word	0x200126bc
 8007390:	0802e6a8 	.word	0x0802e6a8
 8007394:	0800731d 	.word	0x0800731d

08007398 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8007398:	2000      	movs	r0, #0
 800739a:	4770      	bx	lr

0800739c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 800739c:	2000      	movs	r0, #0
 800739e:	4770      	bx	lr

080073a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80073a0:	b40e      	push	{r1, r2, r3}
 80073a2:	b503      	push	{r0, r1, lr}
 80073a4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80073a6:	2100      	movs	r1, #0
{
 80073a8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80073ac:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80073ae:	f010 f8d1 	bl	8017554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80073b2:	b002      	add	sp, #8
 80073b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b8:	b003      	add	sp, #12
 80073ba:	4770      	bx	lr

080073bc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80073bc:	b40c      	push	{r2, r3}
 80073be:	b507      	push	{r0, r1, r2, lr}
 80073c0:	ab04      	add	r3, sp, #16
 80073c2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80073c6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80073c8:	f010 f8c4 	bl	8017554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80073cc:	b003      	add	sp, #12
 80073ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d2:	b002      	add	sp, #8
 80073d4:	4770      	bx	lr
	...

080073d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80073d8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80073da:	b510      	push	{r4, lr}
 80073dc:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80073de:	b373      	cbz	r3, 800743e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80073e0:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80073e2:	b92b      	cbnz	r3, 80073f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80073e4:	4b18      	ldr	r3, [pc, #96]	@ (8007448 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80073e6:	21c5      	movs	r1, #197	@ 0xc5
 80073e8:	4a18      	ldr	r2, [pc, #96]	@ (800744c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80073ea:	4819      	ldr	r0, [pc, #100]	@ (8007450 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80073ec:	f021 fc0c 	bl	8028c08 <__assert_func>
            return buffer[pos];
 80073f0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80073f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80073f6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80073f8:	b30b      	cbz	r3, 800743e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80073fa:	f011 fcbf 	bl	8018d7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80073fe:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8007400:	2b01      	cmp	r3, #1
 8007402:	d803      	bhi.n	800740c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8007404:	4b13      	ldr	r3, [pc, #76]	@ (8007454 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8007406:	21cb      	movs	r1, #203	@ 0xcb
 8007408:	4a13      	ldr	r2, [pc, #76]	@ (8007458 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800740a:	e7ee      	b.n	80073ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800740c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800740e:	f640 103f 	movw	r0, #2367	@ 0x93f
 8007412:	1c53      	adds	r3, r2, #1
 8007414:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8007416:	2b09      	cmp	r3, #9
 8007418:	4619      	mov	r1, r3
 800741a:	bf88      	it	hi
 800741c:	f1a3 010a 	subhi.w	r1, r3, #10
 8007420:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007424:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8007426:	4281      	cmp	r1, r0
 8007428:	d109      	bne.n	800743e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800742a:	2b0a      	cmp	r3, #10
 800742c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8007430:	bf28      	it	cs
 8007432:	2300      	movcs	r3, #0
            return buffer[pos];
 8007434:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8007436:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800743a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800743c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800743e:	4620      	mov	r0, r4
}
 8007440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8007444:	f011 bb9c 	b.w	8018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007448:	0802caac 	.word	0x0802caac
 800744c:	0802cab5 	.word	0x0802cab5
 8007450:	0802cb60 	.word	0x0802cb60
 8007454:	0802cbaa 	.word	0x0802cbaa
 8007458:	0802cbb8 	.word	0x0802cbb8

0800745c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800745c:	f011 bb59 	b.w	8018b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08007460 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8007460:	b510      	push	{r4, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	ac02      	add	r4, sp, #8
 8007466:	e884 0006 	stmia.w	r4, {r1, r2}
 800746a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800746c:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800746e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8007470:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	f00e fc73 	bl	8015d64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800747e:	b006      	add	sp, #24
 8007480:	bd10      	pop	{r4, pc}
	...

08007484 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007484:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8007486:	bb18      	cbnz	r0, 80074d0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8007488:	4b12      	ldr	r3, [pc, #72]	@ (80074d4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800748a:	4813      	ldr	r0, [pc, #76]	@ (80074d8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800748c:	681c      	ldr	r4, [r3, #0]
 800748e:	4913      	ldr	r1, [pc, #76]	@ (80074dc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8007490:	b1b4      	cbz	r4, 80074c0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	4422      	add	r2, r4
 8007496:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8007498:	6862      	ldr	r2, [r4, #4]
 800749a:	4422      	add	r2, r4
 800749c:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800749e:	68a2      	ldr	r2, [r4, #8]
 80074a0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80074a2:	4b0f      	ldr	r3, [pc, #60]	@ (80074e0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80074a8:	f000 f838 	bl	800751c <_ZN17TypedTextDatabase8getFontsEv>
 80074ac:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80074ae:	f000 f833 	bl	8007518 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80074b2:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80074b4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80074b6:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80074b8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80074ba:	4b0c      	ldr	r3, [pc, #48]	@ (80074ec <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80074bc:	8018      	strh	r0, [r3, #0]
    }
}
 80074be:	e007      	b.n	80074d0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80074c2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80074c6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80074c8:	4b0b      	ldr	r3, [pc, #44]	@ (80074f8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80074ca:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	d1e8      	bne.n	80074a2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	200126f4 	.word	0x200126f4
 80074d8:	200126ec 	.word	0x200126ec
 80074dc:	200126e8 	.word	0x200126e8
 80074e0:	200126f0 	.word	0x200126f0
 80074e4:	20027e18 	.word	0x20027e18
 80074e8:	20027e20 	.word	0x20027e20
 80074ec:	20027e1c 	.word	0x20027e1c
 80074f0:	906e01dc 	.word	0x906e01dc
 80074f4:	906e01c0 	.word	0x906e01c0
 80074f8:	906e027c 	.word	0x906e027c

080074fc <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007504:	4b03      	ldr	r3, [pc, #12]	@ (8007514 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8007506:	681b      	ldr	r3, [r3, #0]
}
 8007508:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	200126e8 	.word	0x200126e8
 8007514:	200126ec 	.word	0x200126ec

08007518 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8007518:	2007      	movs	r0, #7
 800751a:	4770      	bx	lr

0800751c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800751c:	4800      	ldr	r0, [pc, #0]	@ (8007520 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800751e:	4770      	bx	lr
 8007520:	200126f8 	.word	0x200126f8

08007524 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8007524:	b510      	push	{r4, lr}
};
 8007526:	4c05      	ldr	r4, [pc, #20]	@ (800753c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_30_4bpp()),
 8007528:	f7ff febc 	bl	80072a4 <_Z23getFont_verdana_30_4bppv>
};
 800752c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_60_4bpp()),
 800752e:	f7ff fef7 	bl	8007320 <_Z23getFont_verdana_60_4bppv>
};
 8007532:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_20_4bpp())
 8007534:	f7ff fe78 	bl	8007228 <_Z23getFont_verdana_20_4bppv>
};
 8007538:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800753a:	bd10      	pop	{r4, pc}
 800753c:	200126f8 	.word	0x200126f8

08007540 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8007540:	4770      	bx	lr

08007542 <_ZN19FrontendApplicationD0Ev>:
 8007542:	b510      	push	{r4, lr}
 8007544:	4604      	mov	r4, r0
 8007546:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800754a:	f021 fb2e 	bl	8028baa <_ZdlPvj>
 800754e:	4620      	mov	r0, r4
 8007550:	bd10      	pop	{r4, pc}

08007552 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
    {
        model.tick();
 8007556:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800755a:	f000 f813 	bl	8007584 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800755e:	4620      	mov	r0, r4
    }
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8007564:	f00f b8fa 	b.w	801675c <_ZN8touchgfx11Application15handleTickEventEv>

08007568 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8007568:	b510      	push	{r4, lr}
 800756a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800756c:	f7fe fb1e 	bl	8005bac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8007570:	4b01      	ldr	r3, [pc, #4]	@ (8007578 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8007572:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8007574:	6023      	str	r3, [r4, #0]
}
 8007576:	bd10      	pop	{r4, pc}
 8007578:	0802cc94 	.word	0x0802cc94

0800757c <_ZN5ModelC1Ev>:
extern __IO float humidity;
extern __IO float pressure;
extern __IO float gas_resistance;
extern __IO uint16_t meas_period;

Model::Model() : modelListener(0)
 800757c:	2200      	movs	r2, #0
 800757e:	6002      	str	r2, [r0, #0]
{

}
 8007580:	4770      	bx	lr
	...

08007584 <_ZN5Model4tickEv>:

void Model::tick()
{
 8007584:	b570      	push	{r4, r5, r6, lr}
			tick1 = 0;
		}


  */
  modelListener->UpdateTemp(temperature);
 8007586:	4b1d      	ldr	r3, [pc, #116]	@ (80075fc <_ZN5Model4tickEv+0x78>)
{
 8007588:	4604      	mov	r4, r0
  modelListener->UpdateTemp(temperature);
 800758a:	6800      	ldr	r0, [r0, #0]
  modelListener->UpdateHumi(humidity);
  modelListener->UpdatePres(pressure);
  modelListener->UpdateGas(gas_resistance);


  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 800758c:	f640 45e4 	movw	r5, #3300	@ 0xce4
  modelListener->UpdateTemp(temperature);
 8007590:	ed93 0a00 	vldr	s0, [r3]
 8007594:	6803      	ldr	r3, [r0, #0]
  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 8007596:	4e1a      	ldr	r6, [pc, #104]	@ (8007600 <_ZN5Model4tickEv+0x7c>)
  modelListener->UpdateTemp(temperature);
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	4798      	blx	r3
  modelListener->UpdateHumi(humidity);
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <_ZN5Model4tickEv+0x80>)
 80075a0:	ed93 0a00 	vldr	s0, [r3]
 80075a4:	6803      	ldr	r3, [r0, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	4798      	blx	r3
  modelListener->UpdatePres(pressure);
 80075aa:	6820      	ldr	r0, [r4, #0]
 80075ac:	4b16      	ldr	r3, [pc, #88]	@ (8007608 <_ZN5Model4tickEv+0x84>)
 80075ae:	ed93 0a00 	vldr	s0, [r3]
 80075b2:	6803      	ldr	r3, [r0, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	4798      	blx	r3
  modelListener->UpdateGas(gas_resistance);
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	4b14      	ldr	r3, [pc, #80]	@ (800760c <_ZN5Model4tickEv+0x88>)
 80075bc:	ed93 0a00 	vldr	s0, [r3]
 80075c0:	6803      	ldr	r3, [r0, #0]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	4798      	blx	r3
  modelListener->UpdateGraph1(uhADCxConvertedData * 3300 / 4096);
 80075c6:	8831      	ldrh	r1, [r6, #0]
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	b289      	uxth	r1, r1
 80075cc:	6803      	ldr	r3, [r0, #0]
 80075ce:	4369      	muls	r1, r5
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	0b09      	lsrs	r1, r1, #12
 80075d4:	4798      	blx	r3
  modelListener->UpdateBar(uhADCxConvertedData * 3300 / 4096);
 80075d6:	8831      	ldrh	r1, [r6, #0]
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	b289      	uxth	r1, r1
 80075dc:	6803      	ldr	r3, [r0, #0]
 80075de:	4369      	muls	r1, r5
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	0b09      	lsrs	r1, r1, #12
 80075e4:	4798      	blx	r3
  modelListener->UpdateTextArea(uhADCxConvertedData * 3300 / 4096);
 80075e6:	8831      	ldrh	r1, [r6, #0]
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	b289      	uxth	r1, r1
 80075ec:	6803      	ldr	r3, [r0, #0]
 80075ee:	4369      	muls	r1, r5
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	0b09      	lsrs	r1, r1, #12
}
 80075f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  modelListener->UpdateTextArea(uhADCxConvertedData * 3300 / 4096);
 80075f8:	4718      	bx	r3
 80075fa:	bf00      	nop
 80075fc:	200121d8 	.word	0x200121d8
 8007600:	200121dc 	.word	0x200121dc
 8007604:	200121d4 	.word	0x200121d4
 8007608:	200121d0 	.word	0x200121d0
 800760c:	200121cc 	.word	0x200121cc

08007610 <_ZN13ModelListener10UpdateTempEf>:
    }
    virtual void UpdateGraph1(uint16_t value){}
    virtual void UpdateBar(uint16_t value){}
    virtual void UpdateTextArea(uint16_t value){}

    virtual void UpdateTemp(float temperature){}
 8007610:	4770      	bx	lr

08007612 <_ZN13ModelListener10UpdateHumiEf>:
    virtual void UpdateHumi(float humidity){}
 8007612:	4770      	bx	lr

08007614 <_ZN13ModelListener10UpdatePresEf>:
    virtual void UpdatePres(float pressure){}
 8007614:	4770      	bx	lr

08007616 <_ZN13ModelListener9UpdateGasEf>:
    virtual void UpdateGas(float gas_resistance){}
 8007616:	4770      	bx	lr

08007618 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8007618:	4770      	bx	lr

0800761a <_ZThn4_N16Screen1PresenterD1Ev>:
 800761a:	3804      	subs	r0, #4
 800761c:	4770      	bx	lr

0800761e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800761e:	4770      	bx	lr

08007620 <_ZN16Screen1PresenterD0Ev>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	2110      	movs	r1, #16
 8007626:	f021 fac0 	bl	8028baa <_ZdlPvj>
 800762a:	4620      	mov	r0, r4
 800762c:	bd10      	pop	{r4, pc}

0800762e <_ZThn4_N16Screen1PresenterD0Ev>:
 800762e:	f1a0 0004 	sub.w	r0, r0, #4
 8007632:	e7f5      	b.n	8007620 <_ZN16Screen1PresenterD0Ev>

08007634 <_ZN16Screen1Presenter12UpdateGraph1Et>:
{

}
void Screen1Presenter::UpdateGraph1(uint16_t value)
{
	view.UpdateGraph1(value);
 8007634:	68c0      	ldr	r0, [r0, #12]
 8007636:	f000 b83f 	b.w	80076b8 <_ZN11Screen1View12UpdateGraph1Et>

0800763a <_ZThn4_N16Screen1Presenter12UpdateGraph1Et>:

    void UpdateGraph1(uint16_t value);
 800763a:	f1a0 0004 	sub.w	r0, r0, #4
 800763e:	f7ff bff9 	b.w	8007634 <_ZN16Screen1Presenter12UpdateGraph1Et>

08007642 <_ZN16Screen1Presenter9UpdateBarEt>:
}

void Screen1Presenter::UpdateBar(uint16_t value)
{
	view.UpdateBar(value);
 8007642:	68c0      	ldr	r0, [r0, #12]
 8007644:	f000 b840 	b.w	80076c8 <_ZN11Screen1View9UpdateBarEt>

08007648 <_ZThn4_N16Screen1Presenter9UpdateBarEt>:
    void UpdateBar(uint16_t value);
 8007648:	f1a0 0004 	sub.w	r0, r0, #4
 800764c:	f7ff bff9 	b.w	8007642 <_ZN16Screen1Presenter9UpdateBarEt>

08007650 <_ZN16Screen1Presenter14UpdateTextAreaEt>:
}

void Screen1Presenter::UpdateTextArea(uint16_t value)
{
	view.UpdateTextArea(value);
 8007650:	68c0      	ldr	r0, [r0, #12]
 8007652:	f000 b83d 	b.w	80076d0 <_ZN11Screen1View14UpdateTextAreaEt>

08007656 <_ZThn4_N16Screen1Presenter14UpdateTextAreaEt>:
    void UpdateTextArea(uint16_t value);
 8007656:	f1a0 0004 	sub.w	r0, r0, #4
 800765a:	f7ff bff9 	b.w	8007650 <_ZN16Screen1Presenter14UpdateTextAreaEt>
	...

08007660 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8007660:	2200      	movs	r2, #0
    : view(v)
 8007662:	60c1      	str	r1, [r0, #12]
 8007664:	6082      	str	r2, [r0, #8]
 8007666:	4a02      	ldr	r2, [pc, #8]	@ (8007670 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8007668:	6002      	str	r2, [r0, #0]
 800766a:	3224      	adds	r2, #36	@ 0x24
 800766c:	6042      	str	r2, [r0, #4]
}
 800766e:	4770      	bx	lr
 8007670:	0802cce8 	.word	0x0802cce8

08007674 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8007674:	4770      	bx	lr
	...

08007678 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8007678:	4b03      	ldr	r3, [pc, #12]	@ (8007688 <_ZN11Screen1ViewD1Ev+0x10>)
 800767a:	b510      	push	{r4, lr}
 800767c:	4604      	mov	r4, r0
 800767e:	6003      	str	r3, [r0, #0]
 8007680:	f7fe fff8 	bl	8006674 <_ZN15Screen1ViewBaseD1Ev>
 8007684:	4620      	mov	r0, r4
 8007686:	bd10      	pop	{r4, pc}
 8007688:	0802cd3c 	.word	0x0802cd3c

0800768c <_ZN11Screen1ViewD0Ev>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff2 	bl	8007678 <_ZN11Screen1ViewD1Ev>
 8007694:	f243 51f4 	movw	r1, #13812	@ 0x35f4
 8007698:	4620      	mov	r0, r4
 800769a:	f021 fa86 	bl	8028baa <_ZdlPvj>
 800769e:	4620      	mov	r0, r4
 80076a0:	bd10      	pop	{r4, pc}
	...

080076a4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4604      	mov	r4, r0
 80076a8:	f7ff f908 	bl	80068bc <_ZN15Screen1ViewBaseC1Ev>
 80076ac:	4b01      	ldr	r3, [pc, #4]	@ (80076b4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80076ae:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80076b0:	6023      	str	r3, [r4, #0]
}
 80076b2:	bd10      	pop	{r4, pc}
 80076b4:	0802cd3c 	.word	0x0802cd3c

080076b8 <_ZN11Screen1View12UpdateGraph1Et>:
 80076b8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	@ 0xcc
        return addDataPointScaled(int2scaledY(y));
 80076bc:	3098      	adds	r0, #152	@ 0x98
 80076be:	4359      	muls	r1, r3
 80076c0:	f00b b81f 	b.w	8012702 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

080076c4 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80076c4:	f7fe bf4c 	b.w	8006560 <_ZN15Screen1ViewBase11setupScreenEv>

080076c8 <_ZN11Screen1View9UpdateBarEt>:
{
	dynamicGraph1.addDataPoint(value);
}
void Screen1View::UpdateBar(uint16_t value)
{
	lineProgress1.setValue(value);
 80076c8:	f200 5044 	addw	r0, r0, #1348	@ 0x544
 80076cc:	f008 b9e1 	b.w	800fa92 <_ZN8touchgfx12LineProgress8setValueEi>

080076d0 <_ZN11Screen1View14UpdateTextAreaEt>:
}
void Screen1View::UpdateTextArea(uint16_t value)
{
 80076d0:	ee07 1a90 	vmov	s15, r1
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80076d4:	4a09      	ldr	r2, [pc, #36]	@ (80076fc <_ZN11Screen1View14UpdateTextAreaEt+0x2c>)
	Unicode::snprintfFloat(textArea_ValueBuffer,TEXTAREA_VALUE_SIZE,"%.f",value);
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 80076da:	b513      	push	{r0, r1, r4, lr}
 80076dc:	4604      	mov	r4, r0
 80076de:	ab01      	add	r3, sp, #4
 80076e0:	210a      	movs	r1, #10
 80076e2:	f500 60de 	add.w	r0, r0, #1776	@ 0x6f0
	Unicode::snprintfFloat(textArea_ValueBuffer,TEXTAREA_VALUE_SIZE,"%.f",value);
 80076e6:	edcd 7a01 	vstr	s15, [sp, #4]
 80076ea:	f012 faf9 	bl	8019ce0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	textArea_Value.invalidate();
 80076ee:	f204 60a4 	addw	r0, r4, #1700	@ 0x6a4
}
 80076f2:	b002      	add	sp, #8
 80076f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea_Value.invalidate();
 80076f8:	f010 b857 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 80076fc:	0802cd30 	.word	0x0802cd30

08007700 <_ZN13ModelListener12UpdateGraph1Et>:
    virtual void UpdateGraph1(uint16_t value){}
 8007700:	4770      	bx	lr

08007702 <_ZN13ModelListener9UpdateBarEt>:
    virtual void UpdateBar(uint16_t value){}
 8007702:	4770      	bx	lr

08007704 <_ZN13ModelListener14UpdateTextAreaEt>:
    virtual void UpdateTextArea(uint16_t value){}
 8007704:	4770      	bx	lr

08007706 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8007706:	4770      	bx	lr

08007708 <_ZThn4_N16Screen2PresenterD1Ev>:
 8007708:	3804      	subs	r0, #4
 800770a:	4770      	bx	lr

0800770c <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800770c:	4770      	bx	lr

0800770e <_ZN16Screen2PresenterD0Ev>:
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	2110      	movs	r1, #16
 8007714:	f021 fa49 	bl	8028baa <_ZdlPvj>
 8007718:	4620      	mov	r0, r4
 800771a:	bd10      	pop	{r4, pc}

0800771c <_ZThn4_N16Screen2PresenterD0Ev>:
 800771c:	f1a0 0004 	sub.w	r0, r0, #4
 8007720:	e7f5      	b.n	800770e <_ZN16Screen2PresenterD0Ev>

08007722 <_ZN16Screen2Presenter10UpdateTempEf>:
{

}
void Screen2Presenter::UpdateTemp(float temperature)
{
	view.UpdateTemp(temperature);
 8007722:	68c0      	ldr	r0, [r0, #12]
 8007724:	f000 b848 	b.w	80077b8 <_ZN11Screen2View10UpdateTempEf>

08007728 <_ZThn4_N16Screen2Presenter10UpdateTempEf>:

    void UpdateTemp(float temperature);
 8007728:	f1a0 0004 	sub.w	r0, r0, #4
 800772c:	f7ff bff9 	b.w	8007722 <_ZN16Screen2Presenter10UpdateTempEf>

08007730 <_ZN16Screen2Presenter10UpdateHumiEf>:
}

void Screen2Presenter::UpdateHumi(float humidity)
{
	view.UpdateHumi(humidity);
 8007730:	68c0      	ldr	r0, [r0, #12]
 8007732:	f000 b855 	b.w	80077e0 <_ZN11Screen2View10UpdateHumiEf>

08007736 <_ZThn4_N16Screen2Presenter10UpdateHumiEf>:
    void UpdateHumi(float humidity);
 8007736:	f1a0 0004 	sub.w	r0, r0, #4
 800773a:	f7ff bff9 	b.w	8007730 <_ZN16Screen2Presenter10UpdateHumiEf>

0800773e <_ZN16Screen2Presenter10UpdatePresEf>:
}
void Screen2Presenter::UpdatePres(float pressure)
{
	view.UpdatePres(pressure);
 800773e:	68c0      	ldr	r0, [r0, #12]
 8007740:	f000 b862 	b.w	8007808 <_ZN11Screen2View10UpdatePresEf>

08007744 <_ZThn4_N16Screen2Presenter10UpdatePresEf>:
    void UpdatePres(float pressure);
 8007744:	f1a0 0004 	sub.w	r0, r0, #4
 8007748:	f7ff bff9 	b.w	800773e <_ZN16Screen2Presenter10UpdatePresEf>

0800774c <_ZN16Screen2Presenter9UpdateGasEf>:
}
void Screen2Presenter::UpdateGas(float gas_resistance)
{
	view.UpdateGas(gas_resistance);
 800774c:	68c0      	ldr	r0, [r0, #12]
 800774e:	f000 b86f 	b.w	8007830 <_ZN11Screen2View9UpdateGasEf>

08007752 <_ZThn4_N16Screen2Presenter9UpdateGasEf>:
    void UpdateGas(float gas_resistance);
 8007752:	f1a0 0004 	sub.w	r0, r0, #4
 8007756:	f7ff bff9 	b.w	800774c <_ZN16Screen2Presenter9UpdateGasEf>
	...

0800775c <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 800775c:	2200      	movs	r2, #0
    : view(v)
 800775e:	60c1      	str	r1, [r0, #12]
 8007760:	6082      	str	r2, [r0, #8]
 8007762:	4a02      	ldr	r2, [pc, #8]	@ (800776c <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8007764:	6002      	str	r2, [r0, #0]
 8007766:	3228      	adds	r2, #40	@ 0x28
 8007768:	6042      	str	r2, [r0, #4]
}
 800776a:	4770      	bx	lr
 800776c:	0802cd70 	.word	0x0802cd70

08007770 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8007770:	4770      	bx	lr
	...

08007774 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8007774:	4b03      	ldr	r3, [pc, #12]	@ (8007784 <_ZN11Screen2ViewD1Ev+0x10>)
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	6003      	str	r3, [r0, #0]
 800777c:	f7ff fb62 	bl	8006e44 <_ZN15Screen2ViewBaseD1Ev>
 8007780:	4620      	mov	r0, r4
 8007782:	bd10      	pop	{r4, pc}
 8007784:	0802cdcc 	.word	0x0802cdcc

08007788 <_ZN11Screen2ViewD0Ev>:
 8007788:	b510      	push	{r4, lr}
 800778a:	4604      	mov	r4, r0
 800778c:	f7ff fff2 	bl	8007774 <_ZN11Screen2ViewD1Ev>
 8007790:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8007794:	4620      	mov	r0, r4
 8007796:	f021 fa08 	bl	8028baa <_ZdlPvj>
 800779a:	4620      	mov	r0, r4
 800779c:	bd10      	pop	{r4, pc}
	...

080077a0 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4604      	mov	r4, r0
 80077a4:	f7ff fba8 	bl	8006ef8 <_ZN15Screen2ViewBaseC1Ev>
 80077a8:	4b01      	ldr	r3, [pc, #4]	@ (80077b0 <_ZN11Screen2ViewC1Ev+0x10>)
}
 80077aa:	4620      	mov	r0, r4
Screen2View::Screen2View()
 80077ac:	6023      	str	r3, [r4, #0]
}
 80077ae:	bd10      	pop	{r4, pc}
 80077b0:	0802cdcc 	.word	0x0802cdcc

080077b4 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 80077b4:	f7ff bb47 	b.w	8006e46 <_ZN15Screen2ViewBase11setupScreenEv>

080077b8 <_ZN11Screen2View10UpdateTempEf>:
void Screen2View::UpdateTemp(float temperature)
{
 80077b8:	b513      	push	{r0, r1, r4, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	ab01      	add	r3, sp, #4
 80077be:	4a07      	ldr	r2, [pc, #28]	@ (80077dc <_ZN11Screen2View10UpdateTempEf+0x24>)
 80077c0:	210a      	movs	r1, #10
 80077c2:	f500 700c 	add.w	r0, r0, #560	@ 0x230
 80077c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80077ca:	f012 fa89 	bl	8019ce0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaTempBuffer,TEXTAREATEMP_SIZE,"%.2f",temperature);
	textAreaTemp.invalidate();
 80077ce:	f104 00d4 	add.w	r0, r4, #212	@ 0xd4
}
 80077d2:	b002      	add	sp, #8
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaTemp.invalidate();
 80077d8:	f00f bfe7 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 80077dc:	0802cdbc 	.word	0x0802cdbc

080077e0 <_ZN11Screen2View10UpdateHumiEf>:

void Screen2View::UpdateHumi(float humidity)
{
 80077e0:	b513      	push	{r0, r1, r4, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	ab01      	add	r3, sp, #4
 80077e6:	4a07      	ldr	r2, [pc, #28]	@ (8007804 <_ZN11Screen2View10UpdateHumiEf+0x24>)
 80077e8:	210a      	movs	r1, #10
 80077ea:	f500 7011 	add.w	r0, r0, #580	@ 0x244
 80077ee:	ed8d 0a01 	vstr	s0, [sp, #4]
 80077f2:	f012 fa75 	bl	8019ce0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaHumiBuffer,TEXTAREAHUMI_SIZE,"%.2f",humidity);
	textAreaHumi.invalidate();
 80077f6:	f504 7090 	add.w	r0, r4, #288	@ 0x120
}
 80077fa:	b002      	add	sp, #8
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaHumi.invalidate();
 8007800:	f00f bfd3 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8007804:	0802cdbc 	.word	0x0802cdbc

08007808 <_ZN11Screen2View10UpdatePresEf>:
void Screen2View::UpdatePres(float pressure)
{
 8007808:	b513      	push	{r0, r1, r4, lr}
 800780a:	4604      	mov	r4, r0
 800780c:	ab01      	add	r3, sp, #4
 800780e:	4a07      	ldr	r2, [pc, #28]	@ (800782c <_ZN11Screen2View10UpdatePresEf+0x24>)
 8007810:	210a      	movs	r1, #10
 8007812:	f500 7016 	add.w	r0, r0, #600	@ 0x258
 8007816:	ed8d 0a01 	vstr	s0, [sp, #4]
 800781a:	f012 fa61 	bl	8019ce0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaPresBuffer,TEXTAREAPRES_SIZE,"%.2f",pressure);
	textAreaPres.invalidate();
 800781e:	f504 70b6 	add.w	r0, r4, #364	@ 0x16c
}
 8007822:	b002      	add	sp, #8
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaPres.invalidate();
 8007828:	f00f bfbf 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800782c:	0802cdbc 	.word	0x0802cdbc

08007830 <_ZN11Screen2View9UpdateGasEf>:
void Screen2View::UpdateGas(float gas_resistance)
{
 8007830:	b513      	push	{r0, r1, r4, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	ab01      	add	r3, sp, #4
 8007836:	4a07      	ldr	r2, [pc, #28]	@ (8007854 <_ZN11Screen2View9UpdateGasEf+0x24>)
 8007838:	210a      	movs	r1, #10
 800783a:	f500 701b 	add.w	r0, r0, #620	@ 0x26c
 800783e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007842:	f012 fa4d 	bl	8019ce0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textAreaGasBuffer,TEXTAREAGAS_SIZE,"%.f",gas_resistance);
	textAreaGas.invalidate();
 8007846:	f504 70dc 	add.w	r0, r4, #440	@ 0x1b8
}
 800784a:	b002      	add	sp, #8
 800784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaGas.invalidate();
 8007850:	f00f bfab 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8007854:	0802cd30 	.word	0x0802cd30

08007858 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8007858:	4770      	bx	lr

0800785a <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 800785a:	2000      	movs	r0, #0
 800785c:	4770      	bx	lr

0800785e <ft6x06_ReadID>:
{
 800785e:	b510      	push	{r4, lr}
 8007860:	4604      	mov	r4, r0
  TS_IO_Init();
 8007862:	f7f8 fffa 	bl	800085a <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8007866:	21a8      	movs	r1, #168	@ 0xa8
 8007868:	b2e0      	uxtb	r0, r4
 800786a:	f7f9 f813 	bl	8000894 <TS_IO_Read>
}
 800786e:	bd10      	pop	{r4, pc}

08007870 <ft6x06_TS_DetectTouch>:
{
 8007870:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8007872:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8007874:	2102      	movs	r1, #2
 8007876:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8007878:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800787c:	f7f9 f80a 	bl	8000894 <TS_IO_Read>
 8007880:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8007884:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8007890:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d901      	bls.n	800789c <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8007898:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800789c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80078a0:	4b03      	ldr	r3, [pc, #12]	@ (80078b0 <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 80078a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80078a6:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 80078a8:	2200      	movs	r2, #0
 80078aa:	709a      	strb	r2, [r3, #2]
}
 80078ac:	b002      	add	sp, #8
 80078ae:	bd10      	pop	{r4, pc}
 80078b0:	20012704 	.word	0x20012704

080078b4 <ft6x06_TS_GetXY>:
{
 80078b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80078b6:	4c15      	ldr	r4, [pc, #84]	@ (800790c <ft6x06_TS_GetXY+0x58>)
{
 80078b8:	4615      	mov	r5, r2
 80078ba:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80078bc:	78a3      	ldrb	r3, [r4, #2]
 80078be:	7862      	ldrb	r2, [r4, #1]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d91f      	bls.n	8007904 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 80078c4:	b303      	cbz	r3, 8007908 <ft6x06_TS_GetXY+0x54>
  uint8_t regAddress = 0;
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	bf0c      	ite	eq
 80078ca:	2109      	moveq	r1, #9
 80078cc:	2100      	movne	r1, #0
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80078ce:	2304      	movs	r3, #4
 80078d0:	b2c0      	uxtb	r0, r0
 80078d2:	eb0d 0203 	add.w	r2, sp, r3
 80078d6:	f7f8 fffb 	bl	80008d0 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80078da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80078de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078e8:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80078ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80078ee:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80078f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078fa:	4313      	orrs	r3, r2
 80078fc:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80078fe:	78a3      	ldrb	r3, [r4, #2]
 8007900:	3301      	adds	r3, #1
 8007902:	70a3      	strb	r3, [r4, #2]
}
 8007904:	b002      	add	sp, #8
 8007906:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8007908:	2103      	movs	r1, #3
 800790a:	e7e0      	b.n	80078ce <ft6x06_TS_GetXY+0x1a>
 800790c:	20012704 	.word	0x20012704

08007910 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8007910:	2201      	movs	r2, #1
 8007912:	21a4      	movs	r1, #164	@ 0xa4
 8007914:	b2c0      	uxtb	r0, r0
 8007916:	f7f8 bfa1 	b.w	800085c <TS_IO_Write>

0800791a <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800791a:	2200      	movs	r2, #0
 800791c:	21a4      	movs	r1, #164	@ 0xa4
 800791e:	b2c0      	uxtb	r0, r0
 8007920:	f7f8 bf9c 	b.w	800085c <TS_IO_Write>

08007924 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8007924:	f7ff bff9 	b.w	800791a <ft6x06_TS_DisableIT>

08007928 <ft6x06_TS_ClearIT>:
  *         Should be called Following an EXTI coming to the MCU.
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
 8007928:	4770      	bx	lr
	...

0800792c <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 800792c:	4a06      	ldr	r2, [pc, #24]	@ (8007948 <ft6x06_Init+0x1c>)
 800792e:	7813      	ldrb	r3, [r2, #0]
 8007930:	4298      	cmp	r0, r3
 8007932:	d008      	beq.n	8007946 <ft6x06_Init+0x1a>
 8007934:	7851      	ldrb	r1, [r2, #1]
 8007936:	4288      	cmp	r0, r1
 8007938:	d005      	beq.n	8007946 <ft6x06_Init+0x1a>
 800793a:	b10b      	cbz	r3, 8007940 <ft6x06_Init+0x14>
 800793c:	b919      	cbnz	r1, 8007946 <ft6x06_Init+0x1a>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800793e:	2301      	movs	r3, #1
      ft6x06[empty] = DeviceAddr;
 8007940:	54d0      	strb	r0, [r2, r3]
      TS_IO_Init(); 
 8007942:	f7f8 bf8a 	b.w	800085a <TS_IO_Init>
}
 8007946:	4770      	bx	lr
 8007948:	20012707 	.word	0x20012707

0800794c <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007952:	2000      	movs	r0, #0
 8007954:	49c9      	ldr	r1, [pc, #804]	@ (8007c7c <OTM8009A_Init+0x330>)
 8007956:	f7f9 fb05 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800795a:	49c9      	ldr	r1, [pc, #804]	@ (8007c80 <OTM8009A_Init+0x334>)
 800795c:	2003      	movs	r0, #3
 800795e:	f7f9 fb01 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8007962:	49c8      	ldr	r1, [pc, #800]	@ (8007c84 <OTM8009A_Init+0x338>)
 8007964:	2000      	movs	r0, #0
 8007966:	f7f9 fafd 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800796a:	49c7      	ldr	r1, [pc, #796]	@ (8007c88 <OTM8009A_Init+0x33c>)
 800796c:	2002      	movs	r0, #2
 800796e:	f7f9 faf9 	bl	8000f64 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007972:	49c4      	ldr	r1, [pc, #784]	@ (8007c84 <OTM8009A_Init+0x338>)
 8007974:	2000      	movs	r0, #0
 8007976:	f7f9 faf5 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800797a:	49c4      	ldr	r1, [pc, #784]	@ (8007c8c <OTM8009A_Init+0x340>)
 800797c:	2000      	movs	r0, #0
 800797e:	f7f9 faf1 	bl	8000f64 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8007982:	200a      	movs	r0, #10
 8007984:	f7f9 faec 	bl	8000f60 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8007988:	49c1      	ldr	r1, [pc, #772]	@ (8007c90 <OTM8009A_Init+0x344>)
 800798a:	2000      	movs	r0, #0
 800798c:	f7f9 faea 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8007990:	49c0      	ldr	r1, [pc, #768]	@ (8007c94 <OTM8009A_Init+0x348>)
 8007992:	2000      	movs	r0, #0
 8007994:	f7f9 fae6 	bl	8000f64 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8007998:	200a      	movs	r0, #10
 800799a:	f7f9 fae1 	bl	8000f60 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800799e:	49be      	ldr	r1, [pc, #760]	@ (8007c98 <OTM8009A_Init+0x34c>)
 80079a0:	2000      	movs	r0, #0
 80079a2:	f7f9 fadf 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80079a6:	49bd      	ldr	r1, [pc, #756]	@ (8007c9c <OTM8009A_Init+0x350>)
 80079a8:	2000      	movs	r0, #0
 80079aa:	f7f9 fadb 	bl	8000f64 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80079ae:	49bc      	ldr	r1, [pc, #752]	@ (8007ca0 <OTM8009A_Init+0x354>)
 80079b0:	2000      	movs	r0, #0
 80079b2:	f7f9 fad7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80079b6:	49bb      	ldr	r1, [pc, #748]	@ (8007ca4 <OTM8009A_Init+0x358>)
 80079b8:	2000      	movs	r0, #0
 80079ba:	f7f9 fad3 	bl	8000f64 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80079be:	49ba      	ldr	r1, [pc, #744]	@ (8007ca8 <OTM8009A_Init+0x35c>)
 80079c0:	2000      	movs	r0, #0
 80079c2:	f7f9 facf 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80079c6:	49b9      	ldr	r1, [pc, #740]	@ (8007cac <OTM8009A_Init+0x360>)
 80079c8:	2000      	movs	r0, #0
 80079ca:	f7f9 facb 	bl	8000f64 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80079ce:	49ab      	ldr	r1, [pc, #684]	@ (8007c7c <OTM8009A_Init+0x330>)
 80079d0:	2000      	movs	r0, #0
 80079d2:	f7f9 fac7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80079d6:	49b6      	ldr	r1, [pc, #728]	@ (8007cb0 <OTM8009A_Init+0x364>)
 80079d8:	2000      	movs	r0, #0
 80079da:	f7f9 fac3 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80079de:	49b5      	ldr	r1, [pc, #724]	@ (8007cb4 <OTM8009A_Init+0x368>)
 80079e0:	2000      	movs	r0, #0
 80079e2:	f7f9 fabf 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80079e6:	49b4      	ldr	r1, [pc, #720]	@ (8007cb8 <OTM8009A_Init+0x36c>)
 80079e8:	2000      	movs	r0, #0
 80079ea:	f7f9 fabb 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80079ee:	49b3      	ldr	r1, [pc, #716]	@ (8007cbc <OTM8009A_Init+0x370>)
 80079f0:	2000      	movs	r0, #0
 80079f2:	f7f9 fab7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80079f6:	49b2      	ldr	r1, [pc, #712]	@ (8007cc0 <OTM8009A_Init+0x374>)
 80079f8:	2000      	movs	r0, #0
 80079fa:	f7f9 fab3 	bl	8000f64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80079fe:	49b1      	ldr	r1, [pc, #708]	@ (8007cc4 <OTM8009A_Init+0x378>)
 8007a00:	2000      	movs	r0, #0
 8007a02:	f7f9 faaf 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8007a06:	49b0      	ldr	r1, [pc, #704]	@ (8007cc8 <OTM8009A_Init+0x37c>)
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f7f9 faab 	bl	8000f64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8007a0e:	49af      	ldr	r1, [pc, #700]	@ (8007ccc <OTM8009A_Init+0x380>)
 8007a10:	2000      	movs	r0, #0
 8007a12:	f7f9 faa7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8007a16:	49a3      	ldr	r1, [pc, #652]	@ (8007ca4 <OTM8009A_Init+0x358>)
 8007a18:	2000      	movs	r0, #0
 8007a1a:	f7f9 faa3 	bl	8000f64 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007a1e:	4997      	ldr	r1, [pc, #604]	@ (8007c7c <OTM8009A_Init+0x330>)
 8007a20:	2000      	movs	r0, #0
 8007a22:	f7f9 fa9f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8007a26:	49aa      	ldr	r1, [pc, #680]	@ (8007cd0 <OTM8009A_Init+0x384>)
 8007a28:	2002      	movs	r0, #2
 8007a2a:	f7f9 fa9b 	bl	8000f64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8007a2e:	49a9      	ldr	r1, [pc, #676]	@ (8007cd4 <OTM8009A_Init+0x388>)
 8007a30:	2000      	movs	r0, #0
 8007a32:	f7f9 fa97 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8007a36:	49a8      	ldr	r1, [pc, #672]	@ (8007cd8 <OTM8009A_Init+0x38c>)
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7f9 fa93 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8007a3e:	49a7      	ldr	r1, [pc, #668]	@ (8007cdc <OTM8009A_Init+0x390>)
 8007a40:	2000      	movs	r0, #0
 8007a42:	f7f9 fa8f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8007a46:	49a6      	ldr	r1, [pc, #664]	@ (8007ce0 <OTM8009A_Init+0x394>)
 8007a48:	2000      	movs	r0, #0
 8007a4a:	f7f9 fa8b 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8007a4e:	49a5      	ldr	r1, [pc, #660]	@ (8007ce4 <OTM8009A_Init+0x398>)
 8007a50:	2000      	movs	r0, #0
 8007a52:	f7f9 fa87 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8007a56:	49a4      	ldr	r1, [pc, #656]	@ (8007ce8 <OTM8009A_Init+0x39c>)
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7f9 fa83 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007a5e:	4995      	ldr	r1, [pc, #596]	@ (8007cb4 <OTM8009A_Init+0x368>)
 8007a60:	2000      	movs	r0, #0
 8007a62:	f7f9 fa7f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8007a66:	49a1      	ldr	r1, [pc, #644]	@ (8007cec <OTM8009A_Init+0x3a0>)
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f7f9 fa7b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8007a6e:	4993      	ldr	r1, [pc, #588]	@ (8007cbc <OTM8009A_Init+0x370>)
 8007a70:	2000      	movs	r0, #0
 8007a72:	f7f9 fa77 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8007a76:	499e      	ldr	r1, [pc, #632]	@ (8007cf0 <OTM8009A_Init+0x3a4>)
 8007a78:	2000      	movs	r0, #0
 8007a7a:	f7f9 fa73 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8007a7e:	499d      	ldr	r1, [pc, #628]	@ (8007cf4 <OTM8009A_Init+0x3a8>)
 8007a80:	2000      	movs	r0, #0
 8007a82:	f7f9 fa6f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8007a86:	499c      	ldr	r1, [pc, #624]	@ (8007cf8 <OTM8009A_Init+0x3ac>)
 8007a88:	2002      	movs	r0, #2
 8007a8a:	f7f9 fa6b 	bl	8000f64 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007a8e:	497d      	ldr	r1, [pc, #500]	@ (8007c84 <OTM8009A_Init+0x338>)
 8007a90:	2000      	movs	r0, #0
 8007a92:	f7f9 fa67 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8007a96:	4999      	ldr	r1, [pc, #612]	@ (8007cfc <OTM8009A_Init+0x3b0>)
 8007a98:	2006      	movs	r0, #6
 8007a9a:	f7f9 fa63 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007a9e:	4998      	ldr	r1, [pc, #608]	@ (8007d00 <OTM8009A_Init+0x3b4>)
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f7f9 fa5f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8007aa6:	4997      	ldr	r1, [pc, #604]	@ (8007d04 <OTM8009A_Init+0x3b8>)
 8007aa8:	200e      	movs	r0, #14
 8007aaa:	f7f9 fa5b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007aae:	4996      	ldr	r1, [pc, #600]	@ (8007d08 <OTM8009A_Init+0x3bc>)
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7f9 fa57 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8007ab6:	4995      	ldr	r1, [pc, #596]	@ (8007d0c <OTM8009A_Init+0x3c0>)
 8007ab8:	200e      	movs	r0, #14
 8007aba:	f7f9 fa53 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007abe:	4994      	ldr	r1, [pc, #592]	@ (8007d10 <OTM8009A_Init+0x3c4>)
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f9 fa4f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8007ac6:	4993      	ldr	r1, [pc, #588]	@ (8007d14 <OTM8009A_Init+0x3c8>)
 8007ac8:	200a      	movs	r0, #10
 8007aca:	f7f9 fa4b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007ace:	4992      	ldr	r1, [pc, #584]	@ (8007d18 <OTM8009A_Init+0x3cc>)
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f7f9 fa47 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8007ad6:	4991      	ldr	r1, [pc, #580]	@ (8007d1c <OTM8009A_Init+0x3d0>)
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7f9 fa43 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007ade:	4969      	ldr	r1, [pc, #420]	@ (8007c84 <OTM8009A_Init+0x338>)
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f7f9 fa3f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8007ae6:	498e      	ldr	r1, [pc, #568]	@ (8007d20 <OTM8009A_Init+0x3d4>)
 8007ae8:	200a      	movs	r0, #10
 8007aea:	f7f9 fa3b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007aee:	498d      	ldr	r1, [pc, #564]	@ (8007d24 <OTM8009A_Init+0x3d8>)
 8007af0:	2000      	movs	r0, #0
 8007af2:	f7f9 fa37 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8007af6:	498c      	ldr	r1, [pc, #560]	@ (8007d28 <OTM8009A_Init+0x3dc>)
 8007af8:	200f      	movs	r0, #15
 8007afa:	f7f9 fa33 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007afe:	4980      	ldr	r1, [pc, #512]	@ (8007d00 <OTM8009A_Init+0x3b4>)
 8007b00:	2000      	movs	r0, #0
 8007b02:	f7f9 fa2f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8007b06:	4989      	ldr	r1, [pc, #548]	@ (8007d2c <OTM8009A_Init+0x3e0>)
 8007b08:	200f      	movs	r0, #15
 8007b0a:	f7f9 fa2b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007b0e:	497e      	ldr	r1, [pc, #504]	@ (8007d08 <OTM8009A_Init+0x3bc>)
 8007b10:	2000      	movs	r0, #0
 8007b12:	f7f9 fa27 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8007b16:	4986      	ldr	r1, [pc, #536]	@ (8007d30 <OTM8009A_Init+0x3e4>)
 8007b18:	200a      	movs	r0, #10
 8007b1a:	f7f9 fa23 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007b1e:	497c      	ldr	r1, [pc, #496]	@ (8007d10 <OTM8009A_Init+0x3c4>)
 8007b20:	2000      	movs	r0, #0
 8007b22:	f7f9 fa1f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8007b26:	4983      	ldr	r1, [pc, #524]	@ (8007d34 <OTM8009A_Init+0x3e8>)
 8007b28:	200f      	movs	r0, #15
 8007b2a:	f7f9 fa1b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007b2e:	497a      	ldr	r1, [pc, #488]	@ (8007d18 <OTM8009A_Init+0x3cc>)
 8007b30:	2000      	movs	r0, #0
 8007b32:	f7f9 fa17 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8007b36:	4980      	ldr	r1, [pc, #512]	@ (8007d38 <OTM8009A_Init+0x3ec>)
 8007b38:	200f      	movs	r0, #15
 8007b3a:	f7f9 fa13 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8007b3e:	497f      	ldr	r1, [pc, #508]	@ (8007d3c <OTM8009A_Init+0x3f0>)
 8007b40:	2000      	movs	r0, #0
 8007b42:	f7f9 fa0f 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8007b46:	497e      	ldr	r1, [pc, #504]	@ (8007d40 <OTM8009A_Init+0x3f4>)
 8007b48:	200a      	movs	r0, #10
 8007b4a:	f7f9 fa0b 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8007b4e:	497d      	ldr	r1, [pc, #500]	@ (8007d44 <OTM8009A_Init+0x3f8>)
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7f9 fa07 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8007b56:	497c      	ldr	r1, [pc, #496]	@ (8007d48 <OTM8009A_Init+0x3fc>)
 8007b58:	200a      	movs	r0, #10
 8007b5a:	f7f9 fa03 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8007b5e:	4949      	ldr	r1, [pc, #292]	@ (8007c84 <OTM8009A_Init+0x338>)
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7f9 f9ff 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8007b66:	4979      	ldr	r1, [pc, #484]	@ (8007d4c <OTM8009A_Init+0x400>)
 8007b68:	200a      	movs	r0, #10
 8007b6a:	f7f9 f9fb 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8007b6e:	496d      	ldr	r1, [pc, #436]	@ (8007d24 <OTM8009A_Init+0x3d8>)
 8007b70:	2000      	movs	r0, #0
 8007b72:	f7f9 f9f7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8007b76:	4976      	ldr	r1, [pc, #472]	@ (8007d50 <OTM8009A_Init+0x404>)
 8007b78:	200f      	movs	r0, #15
 8007b7a:	f7f9 f9f3 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8007b7e:	4960      	ldr	r1, [pc, #384]	@ (8007d00 <OTM8009A_Init+0x3b4>)
 8007b80:	2000      	movs	r0, #0
 8007b82:	f7f9 f9ef 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8007b86:	4973      	ldr	r1, [pc, #460]	@ (8007d54 <OTM8009A_Init+0x408>)
 8007b88:	200f      	movs	r0, #15
 8007b8a:	f7f9 f9eb 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8007b8e:	495e      	ldr	r1, [pc, #376]	@ (8007d08 <OTM8009A_Init+0x3bc>)
 8007b90:	2000      	movs	r0, #0
 8007b92:	f7f9 f9e7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8007b96:	4970      	ldr	r1, [pc, #448]	@ (8007d58 <OTM8009A_Init+0x40c>)
 8007b98:	200a      	movs	r0, #10
 8007b9a:	f7f9 f9e3 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8007b9e:	495c      	ldr	r1, [pc, #368]	@ (8007d10 <OTM8009A_Init+0x3c4>)
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f7f9 f9df 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8007ba6:	496d      	ldr	r1, [pc, #436]	@ (8007d5c <OTM8009A_Init+0x410>)
 8007ba8:	200f      	movs	r0, #15
 8007baa:	f7f9 f9db 	bl	8000f64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8007bae:	495a      	ldr	r1, [pc, #360]	@ (8007d18 <OTM8009A_Init+0x3cc>)
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f7f9 f9d7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8007bb6:	496a      	ldr	r1, [pc, #424]	@ (8007d60 <OTM8009A_Init+0x414>)
 8007bb8:	200f      	movs	r0, #15
 8007bba:	f7f9 f9d3 	bl	8000f64 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8007bbe:	493d      	ldr	r1, [pc, #244]	@ (8007cb4 <OTM8009A_Init+0x368>)
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f7f9 f9cf 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8007bc6:	4967      	ldr	r1, [pc, #412]	@ (8007d64 <OTM8009A_Init+0x418>)
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f7f9 f9cb 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8007bce:	4966      	ldr	r1, [pc, #408]	@ (8007d68 <OTM8009A_Init+0x41c>)
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f7f9 f9c7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8007bd6:	4965      	ldr	r1, [pc, #404]	@ (8007d6c <OTM8009A_Init+0x420>)
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f7f9 f9c3 	bl	8000f64 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8007bde:	4964      	ldr	r1, [pc, #400]	@ (8007d70 <OTM8009A_Init+0x424>)
 8007be0:	2000      	movs	r0, #0
 8007be2:	f7f9 f9bf 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8007be6:	4963      	ldr	r1, [pc, #396]	@ (8007d74 <OTM8009A_Init+0x428>)
 8007be8:	2000      	movs	r0, #0
 8007bea:	f7f9 f9bb 	bl	8000f64 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007bee:	4923      	ldr	r1, [pc, #140]	@ (8007c7c <OTM8009A_Init+0x330>)
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f7f9 f9b7 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8007bf6:	4960      	ldr	r1, [pc, #384]	@ (8007d78 <OTM8009A_Init+0x42c>)
 8007bf8:	2003      	movs	r0, #3
 8007bfa:	f7f9 f9b3 	bl	8000f64 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007bfe:	491f      	ldr	r1, [pc, #124]	@ (8007c7c <OTM8009A_Init+0x330>)
 8007c00:	2000      	movs	r0, #0
 8007c02:	f7f9 f9af 	bl	8000f64 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007c06:	491d      	ldr	r1, [pc, #116]	@ (8007c7c <OTM8009A_Init+0x330>)
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f7f9 f9ab 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8007c0e:	495b      	ldr	r1, [pc, #364]	@ (8007d7c <OTM8009A_Init+0x430>)
 8007c10:	2010      	movs	r0, #16
 8007c12:	f7f9 f9a7 	bl	8000f64 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007c16:	4919      	ldr	r1, [pc, #100]	@ (8007c7c <OTM8009A_Init+0x330>)
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f7f9 f9a3 	bl	8000f64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8007c1e:	4958      	ldr	r1, [pc, #352]	@ (8007d80 <OTM8009A_Init+0x434>)
 8007c20:	2010      	movs	r0, #16
 8007c22:	f7f9 f99f 	bl	8000f64 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8007c26:	2000      	movs	r0, #0
 8007c28:	4956      	ldr	r1, [pc, #344]	@ (8007d84 <OTM8009A_Init+0x438>)
 8007c2a:	f7f9 f99b 	bl	8000f64 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8007c2e:	2078      	movs	r0, #120	@ 0x78
 8007c30:	f7f9 f996 	bl	8000f60 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	f000 80c7 	beq.w	8007dc8 <OTM8009A_Init+0x47c>
 8007c3a:	2c02      	cmp	r4, #2
 8007c3c:	d103      	bne.n	8007c46 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8007c3e:	4952      	ldr	r1, [pc, #328]	@ (8007d88 <OTM8009A_Init+0x43c>)
 8007c40:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007c42:	f7f9 f98f 	bl	8000f64 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007c46:	2d01      	cmp	r5, #1
 8007c48:	d10b      	bne.n	8007c62 <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8007c4a:	4950      	ldr	r1, [pc, #320]	@ (8007d8c <OTM8009A_Init+0x440>)
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	f7f9 f989 	bl	8000f64 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8007c52:	494f      	ldr	r1, [pc, #316]	@ (8007d90 <OTM8009A_Init+0x444>)
 8007c54:	2004      	movs	r0, #4
 8007c56:	f7f9 f985 	bl	8000f64 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8007c5a:	494e      	ldr	r1, [pc, #312]	@ (8007d94 <OTM8009A_Init+0x448>)
 8007c5c:	2004      	movs	r0, #4
 8007c5e:	f7f9 f981 	bl	8000f64 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8007c62:	494d      	ldr	r1, [pc, #308]	@ (8007d98 <OTM8009A_Init+0x44c>)
 8007c64:	2000      	movs	r0, #0
 8007c66:	f7f9 f97d 	bl	8000f64 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8007c6a:	494c      	ldr	r1, [pc, #304]	@ (8007d9c <OTM8009A_Init+0x450>)
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f7f9 f979 	bl	8000f64 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8007c72:	494b      	ldr	r1, [pc, #300]	@ (8007da0 <OTM8009A_Init+0x454>)
 8007c74:	2000      	movs	r0, #0
 8007c76:	f7f9 f975 	bl	8000f64 <DSI_IO_WriteCmd>
 8007c7a:	e093      	b.n	8007da4 <OTM8009A_Init+0x458>
 8007c7c:	0802ce5c 	.word	0x0802ce5c
 8007c80:	0802cf89 	.word	0x0802cf89
 8007c84:	0802ce5a 	.word	0x0802ce5a
 8007c88:	0802cf86 	.word	0x0802cf86
 8007c8c:	0802ce58 	.word	0x0802ce58
 8007c90:	0802ce56 	.word	0x0802ce56
 8007c94:	0802ce54 	.word	0x0802ce54
 8007c98:	0802ce52 	.word	0x0802ce52
 8007c9c:	0802ce50 	.word	0x0802ce50
 8007ca0:	0802ce4e 	.word	0x0802ce4e
 8007ca4:	0802ce4c 	.word	0x0802ce4c
 8007ca8:	0802ce4a 	.word	0x0802ce4a
 8007cac:	0802ce48 	.word	0x0802ce48
 8007cb0:	0802ce46 	.word	0x0802ce46
 8007cb4:	0802ce44 	.word	0x0802ce44
 8007cb8:	0802ce42 	.word	0x0802ce42
 8007cbc:	0802ce40 	.word	0x0802ce40
 8007cc0:	0802ce3e 	.word	0x0802ce3e
 8007cc4:	0802ce3c 	.word	0x0802ce3c
 8007cc8:	0802ce3a 	.word	0x0802ce3a
 8007ccc:	0802ce38 	.word	0x0802ce38
 8007cd0:	0802cf61 	.word	0x0802cf61
 8007cd4:	0802ce36 	.word	0x0802ce36
 8007cd8:	0802ce34 	.word	0x0802ce34
 8007cdc:	0802ce32 	.word	0x0802ce32
 8007ce0:	0802ce30 	.word	0x0802ce30
 8007ce4:	0802ce2e 	.word	0x0802ce2e
 8007ce8:	0802ce2c 	.word	0x0802ce2c
 8007cec:	0802ce2a 	.word	0x0802ce2a
 8007cf0:	0802ce28 	.word	0x0802ce28
 8007cf4:	0802ce26 	.word	0x0802ce26
 8007cf8:	0802cf5e 	.word	0x0802cf5e
 8007cfc:	0802cf57 	.word	0x0802cf57
 8007d00:	0802ce24 	.word	0x0802ce24
 8007d04:	0802cf48 	.word	0x0802cf48
 8007d08:	0802ce22 	.word	0x0802ce22
 8007d0c:	0802cf39 	.word	0x0802cf39
 8007d10:	0802ce20 	.word	0x0802ce20
 8007d14:	0802cf2e 	.word	0x0802cf2e
 8007d18:	0802ce1e 	.word	0x0802ce1e
 8007d1c:	0802ce02 	.word	0x0802ce02
 8007d20:	0802cf23 	.word	0x0802cf23
 8007d24:	0802ce1c 	.word	0x0802ce1c
 8007d28:	0802cf13 	.word	0x0802cf13
 8007d2c:	0802cf03 	.word	0x0802cf03
 8007d30:	0802cef8 	.word	0x0802cef8
 8007d34:	0802cee8 	.word	0x0802cee8
 8007d38:	0802ced8 	.word	0x0802ced8
 8007d3c:	0802ce1a 	.word	0x0802ce1a
 8007d40:	0802cecd 	.word	0x0802cecd
 8007d44:	0802ce18 	.word	0x0802ce18
 8007d48:	0802cec2 	.word	0x0802cec2
 8007d4c:	0802ceb7 	.word	0x0802ceb7
 8007d50:	0802cea7 	.word	0x0802cea7
 8007d54:	0802ce97 	.word	0x0802ce97
 8007d58:	0802ce8c 	.word	0x0802ce8c
 8007d5c:	0802ce7c 	.word	0x0802ce7c
 8007d60:	0802ce6c 	.word	0x0802ce6c
 8007d64:	0802ce00 	.word	0x0802ce00
 8007d68:	0802cdfe 	.word	0x0802cdfe
 8007d6c:	0802cdfc 	.word	0x0802cdfc
 8007d70:	0802cdfa 	.word	0x0802cdfa
 8007d74:	0802cdf8 	.word	0x0802cdf8
 8007d78:	0802ce68 	.word	0x0802ce68
 8007d7c:	0802cf75 	.word	0x0802cf75
 8007d80:	0802cf64 	.word	0x0802cf64
 8007d84:	0802ce16 	.word	0x0802ce16
 8007d88:	0802ce14 	.word	0x0802ce14
 8007d8c:	0802ce10 	.word	0x0802ce10
 8007d90:	0802ce63 	.word	0x0802ce63
 8007d94:	0802ce5e 	.word	0x0802ce5e
 8007d98:	0802ce0e 	.word	0x0802ce0e
 8007d9c:	0802ce0c 	.word	0x0802ce0c
 8007da0:	0802ce0a 	.word	0x0802ce0a

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8007da4:	490a      	ldr	r1, [pc, #40]	@ (8007dd0 <OTM8009A_Init+0x484>)
 8007da6:	2000      	movs	r0, #0
 8007da8:	f7f9 f8dc 	bl	8000f64 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8007dac:	4909      	ldr	r1, [pc, #36]	@ (8007dd4 <OTM8009A_Init+0x488>)
 8007dae:	2000      	movs	r0, #0
 8007db0:	f7f9 f8d8 	bl	8000f64 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8007db4:	4908      	ldr	r1, [pc, #32]	@ (8007dd8 <OTM8009A_Init+0x48c>)
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7f9 f8d4 	bl	8000f64 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8007dbc:	4907      	ldr	r1, [pc, #28]	@ (8007ddc <OTM8009A_Init+0x490>)
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f7f9 f8d0 	bl	8000f64 <DSI_IO_WriteCmd>

  return 0;
}
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8007dc8:	4905      	ldr	r1, [pc, #20]	@ (8007de0 <OTM8009A_Init+0x494>)
 8007dca:	4620      	mov	r0, r4
 8007dcc:	e739      	b.n	8007c42 <OTM8009A_Init+0x2f6>
 8007dce:	bf00      	nop
 8007dd0:	0802ce08 	.word	0x0802ce08
 8007dd4:	0802ce06 	.word	0x0802ce06
 8007dd8:	0802ce5c 	.word	0x0802ce5c
 8007ddc:	0802ce04 	.word	0x0802ce04
 8007de0:	0802ce12 	.word	0x0802ce12

08007de4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007de4:	490f      	ldr	r1, [pc, #60]	@ (8007e24 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007de6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007de8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8007dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e28 <SystemInit+0x44>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	f042 0201 	orr.w	r2, r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007dfe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8007e06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007e0c:	4a07      	ldr	r2, [pc, #28]	@ (8007e2c <SystemInit+0x48>)
 8007e0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007e16:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007e18:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e1e:	608b      	str	r3, [r1, #8]
#endif
}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	e000ed00 	.word	0xe000ed00
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	24003010 	.word	0x24003010

08007e30 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e30:	4a07      	ldr	r2, [pc, #28]	@ (8007e50 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e32:	2003      	movs	r0, #3
{
 8007e34:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e36:	6813      	ldr	r3, [r2, #0]
 8007e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e3c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e3e:	f000 fa95 	bl	800836c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e42:	2000      	movs	r0, #0
 8007e44:	f7fd f9a4 	bl	8005190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e48:	f7fc fe34 	bl	8004ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	bd08      	pop	{r3, pc}
 8007e50:	40023c00 	.word	0x40023c00

08007e54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007e54:	4a03      	ldr	r2, [pc, #12]	@ (8007e64 <HAL_IncTick+0x10>)
 8007e56:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <HAL_IncTick+0x14>)
 8007e58:	6811      	ldr	r1, [r2, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	440b      	add	r3, r1
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	2001270c 	.word	0x2001270c
 8007e68:	20000064 	.word	0x20000064

08007e6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007e6c:	4b01      	ldr	r3, [pc, #4]	@ (8007e74 <HAL_GetTick+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	2001270c 	.word	0x2001270c

08007e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e7c:	f7ff fff6 	bl	8007e6c <HAL_GetTick>
 8007e80:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e82:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007e84:	bf1e      	ittt	ne
 8007e86:	4b04      	ldrne	r3, [pc, #16]	@ (8007e98 <HAL_Delay+0x20>)
 8007e88:	781b      	ldrbne	r3, [r3, #0]
 8007e8a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e8c:	f7ff ffee 	bl	8007e6c <HAL_GetTick>
 8007e90:	1b43      	subs	r3, r0, r5
 8007e92:	42a3      	cmp	r3, r4
 8007e94:	d3fa      	bcc.n	8007e8c <HAL_Delay+0x14>
  {
  }
}
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20000064 	.word	0x20000064

08007e9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e9c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f000 809b 	beq.w	8007fdc <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007ea6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007ea8:	b925      	cbnz	r5, 8007eb4 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007eaa:	f7fc fe21 	bl	8004af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007eae:	6465      	str	r5, [r4, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007eb0:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007eb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007eb6:	06db      	lsls	r3, r3, #27
 8007eb8:	f100 808e 	bmi.w	8007fd8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ebe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007ec2:	f023 0302 	bic.w	r3, r3, #2
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	6423      	str	r3, [r4, #64]	@ 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007ecc:	4b44      	ldr	r3, [pc, #272]	@ (8007fe0 <HAL_ADC_Init+0x144>)
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8007ed4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	6861      	ldr	r1, [r4, #4]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007ede:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007ee0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007ef0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007ef2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007efa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f00:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f02:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f10:	4934      	ldr	r1, [pc, #208]	@ (8007fe4 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f12:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f14:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007f16:	428a      	cmp	r2, r1
 8007f18:	d052      	beq.n	8007fc0 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f1a:	6899      	ldr	r1, [r3, #8]
 8007f1c:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 8007f20:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007f22:	6899      	ldr	r1, [r3, #8]
 8007f24:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007f26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f36:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007f38:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007f3a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007f3c:	f022 0202 	bic.w	r2, r2, #2
 8007f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007f48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007f4a:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	d03e      	beq.n	8007fd0 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f52:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f5a:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f5c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007f64:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f6c:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8007f6e:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f72:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f74:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f78:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8007f92:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f96:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8007fa8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007faa:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007fce:	e7b2      	b.n	8007f36 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fd6:	e7c9      	b.n	8007f6c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7ed      	b.n	8007fb8 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8007fdc:	2001      	movs	r0, #1
 8007fde:	e7ee      	b.n	8007fbe <HAL_ADC_Init+0x122>
 8007fe0:	40012300 	.word	0x40012300
 8007fe4:	0f000001 	.word	0x0f000001

08007fe8 <HAL_ADC_Start_IT>:
  __IO uint32_t counter = 0;
 8007fe8:	2300      	movs	r3, #0
{
 8007fea:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8007fec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007fee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d06a      	beq.n	80080cc <HAL_ADC_Start_IT+0xe4>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007ffc:	6803      	ldr	r3, [r0, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	07d2      	lsls	r2, r2, #31
 8008002:	d50b      	bpl.n	800801c <HAL_ADC_Start_IT+0x34>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	07d1      	lsls	r1, r2, #31
 8008008:	d41a      	bmi.n	8008040 <HAL_ADC_Start_IT+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800800a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800800c:	f043 0310 	orr.w	r3, r3, #16
 8008010:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008012:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	6443      	str	r3, [r0, #68]	@ 0x44
 800801a:	e054      	b.n	80080c6 <HAL_ADC_Start_IT+0xde>
    __HAL_ADC_ENABLE(hadc);
 800801c:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800801e:	492c      	ldr	r1, [pc, #176]	@ (80080d0 <HAL_ADC_Start_IT+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008026:	4a2b      	ldr	r2, [pc, #172]	@ (80080d4 <HAL_ADC_Start_IT+0xec>)
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	fbb2 f2f1 	udiv	r2, r2, r1
 800802e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8008032:	9201      	str	r2, [sp, #4]
    while(counter != 0)
 8008034:	9a01      	ldr	r2, [sp, #4]
 8008036:	2a00      	cmp	r2, #0
 8008038:	d0e4      	beq.n	8008004 <HAL_ADC_Start_IT+0x1c>
      counter--;
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	3a01      	subs	r2, #1
 800803e:	e7f8      	b.n	8008032 <HAL_ADC_Start_IT+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 8008040:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008042:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800804e:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	0552      	lsls	r2, r2, #21
 8008054:	d505      	bpl.n	8008062 <HAL_ADC_Start_IT+0x7a>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008056:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008058:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800805c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008060:	6402      	str	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008062:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008068:	d002      	beq.n	8008070 <HAL_ADC_Start_IT+0x88>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800806a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800806c:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8008070:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8008072:	2200      	movs	r2, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008074:	4918      	ldr	r1, [pc, #96]	@ (80080d8 <HAL_ADC_Start_IT+0xf0>)
    __HAL_UNLOCK(hadc);
 8008076:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800807a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800807e:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008086:	f042 0220 	orr.w	r2, r2, #32
 800808a:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800808c:	684a      	ldr	r2, [r1, #4]
 800808e:	06d0      	lsls	r0, r2, #27
 8008090:	d108      	bne.n	80080a4 <HAL_ADC_Start_IT+0xbc>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8008098:	d115      	bne.n	80080c6 <HAL_ADC_Start_IT+0xde>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80080a0:	609a      	str	r2, [r3, #8]
 80080a2:	e010      	b.n	80080c6 <HAL_ADC_Start_IT+0xde>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80080a4:	4a0d      	ldr	r2, [pc, #52]	@ (80080dc <HAL_ADC_Start_IT+0xf4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d107      	bne.n	80080ba <HAL_ADC_Start_IT+0xd2>
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80080b0:	d103      	bne.n	80080ba <HAL_ADC_Start_IT+0xd2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80080b8:	609a      	str	r2, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80080ba:	684a      	ldr	r2, [r1, #4]
 80080bc:	06d2      	lsls	r2, r2, #27
 80080be:	d402      	bmi.n	80080c6 <HAL_ADC_Start_IT+0xde>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80080c0:	4a07      	ldr	r2, [pc, #28]	@ (80080e0 <HAL_ADC_Start_IT+0xf8>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d0e5      	beq.n	8008092 <HAL_ADC_Start_IT+0xaa>
  return HAL_OK;
 80080c6:	2000      	movs	r0, #0
}
 80080c8:	b002      	add	sp, #8
 80080ca:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80080cc:	2002      	movs	r0, #2
 80080ce:	e7fb      	b.n	80080c8 <HAL_ADC_Start_IT+0xe0>
 80080d0:	000f4240 	.word	0x000f4240
 80080d4:	20000060 	.word	0x20000060
 80080d8:	40012300 	.word	0x40012300
 80080dc:	40012000 	.word	0x40012000
 80080e0:	40012200 	.word	0x40012200

080080e4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80080e4:	6803      	ldr	r3, [r0, #0]
 80080e6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80080e8:	4770      	bx	lr

080080ea <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80080ea:	4770      	bx	lr

080080ec <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80080ec:	4770      	bx	lr

080080ee <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 80080ee:	6803      	ldr	r3, [r0, #0]
{
 80080f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80080f2:	681e      	ldr	r6, [r3, #0]
{
 80080f4:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80080f6:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 80080f8:	07b2      	lsls	r2, r6, #30
 80080fa:	d52b      	bpl.n	8008154 <HAL_ADC_IRQHandler+0x66>
 80080fc:	06a8      	lsls	r0, r5, #26
 80080fe:	d529      	bpl.n	8008154 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008100:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008102:	06d1      	lsls	r1, r2, #27
 8008104:	d403      	bmi.n	800810e <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008106:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800810c:	6422      	str	r2, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8008114:	d117      	bne.n	8008146 <HAL_ADC_IRQHandler+0x58>
 8008116:	69a2      	ldr	r2, [r4, #24]
 8008118:	b9aa      	cbnz	r2, 8008146 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800811a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800811c:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8008120:	d002      	beq.n	8008128 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008122:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008124:	0552      	lsls	r2, r2, #21
 8008126:	d40e      	bmi.n	8008146 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	f022 0220 	bic.w	r2, r2, #32
 800812e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008136:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800813a:	04d8      	lsls	r0, r3, #19
 800813c:	d403      	bmi.n	8008146 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800813e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8008146:	4620      	mov	r0, r4
 8008148:	f7fc fc9e 	bl	8004a88 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	f06f 0212 	mvn.w	r2, #18
 8008152:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008154:	0771      	lsls	r1, r6, #29
 8008156:	d533      	bpl.n	80081c0 <HAL_ADC_IRQHandler+0xd2>
 8008158:	062a      	lsls	r2, r5, #24
 800815a:	d531      	bpl.n	80081c0 <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800815c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800815e:	06db      	lsls	r3, r3, #27
 8008160:	d403      	bmi.n	800816a <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008162:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008164:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008168:	6423      	str	r3, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8008172:	d11e      	bne.n	80081b2 <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008176:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800817a:	d002      	beq.n	8008182 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800817c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800817e:	0550      	lsls	r0, r2, #21
 8008180:	d417      	bmi.n	80081b2 <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008182:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008184:	0551      	lsls	r1, r2, #21
 8008186:	d414      	bmi.n	80081b2 <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008188:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800818a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800818e:	d110      	bne.n	80081b2 <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008190:	69a2      	ldr	r2, [r4, #24]
 8008192:	b972      	cbnz	r2, 80081b2 <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800819a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800819c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800819e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081a2:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80081a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081a6:	05da      	lsls	r2, r3, #23
 80081a8:	d403      	bmi.n	80081b2 <HAL_ADC_IRQHandler+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081ac:	f043 0301 	orr.w	r3, r3, #1
 80081b0:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f8d8 	bl	8008368 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	f06f 020c 	mvn.w	r2, #12
 80081be:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80081c0:	07f3      	lsls	r3, r6, #31
 80081c2:	d510      	bpl.n	80081e6 <HAL_ADC_IRQHandler+0xf8>
 80081c4:	0668      	lsls	r0, r5, #25
 80081c6:	d50e      	bpl.n	80081e6 <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	d50a      	bpl.n	80081e6 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081d2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d8:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081da:	f7ff ff86 	bl	80080ea <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	f06f 0201 	mvn.w	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80081e6:	06b2      	lsls	r2, r6, #26
 80081e8:	d50e      	bpl.n	8008208 <HAL_ADC_IRQHandler+0x11a>
 80081ea:	016b      	lsls	r3, r5, #5
 80081ec:	d50c      	bpl.n	8008208 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081f0:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 80081f4:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081f6:	f043 0302 	orr.w	r3, r3, #2
 80081fa:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008200:	f7ff ff74 	bl	80080ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	601d      	str	r5, [r3, #0]
}
 8008208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800820c <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800820c:	2300      	movs	r3, #0
{
 800820e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8008210:	9301      	str	r3, [sp, #4]
{
 8008212:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008214:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008218:	2b01      	cmp	r3, #1
 800821a:	f000 8098 	beq.w	800834e <HAL_ADC_ConfigChannel+0x142>
 800821e:	2301      	movs	r3, #1
 8008220:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008224:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	b285      	uxth	r5, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800822a:	2809      	cmp	r0, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800822c:	688e      	ldr	r6, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800822e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008232:	d939      	bls.n	80082a8 <HAL_ADC_ConfigChannel+0x9c>
 8008234:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008238:	d036      	beq.n	80082a8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800823a:	3a1e      	subs	r2, #30
 800823c:	f04f 0c07 	mov.w	ip, #7
 8008240:	68df      	ldr	r7, [r3, #12]
 8008242:	fa0c fc02 	lsl.w	ip, ip, r2
 8008246:	ea27 070c 	bic.w	r7, r7, ip
 800824a:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800824c:	4f41      	ldr	r7, [pc, #260]	@ (8008354 <HAL_ADC_ConfigChannel+0x148>)
 800824e:	42b8      	cmp	r0, r7
 8008250:	d125      	bne.n	800829e <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008258:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 800825a:	6849      	ldr	r1, [r1, #4]
 800825c:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800825e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 8008262:	d82e      	bhi.n	80082c2 <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008264:	3a05      	subs	r2, #5
 8008266:	261f      	movs	r6, #31
 8008268:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800826a:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800826c:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008270:	ea21 0106 	bic.w	r1, r1, r6
 8008274:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008276:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008278:	430a      	orrs	r2, r1
 800827a:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800827c:	4a36      	ldr	r2, [pc, #216]	@ (8008358 <HAL_ADC_ConfigChannel+0x14c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <HAL_ADC_ConfigChannel+0x88>
 8008282:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008286:	d137      	bne.n	80082f8 <HAL_ADC_ConfigChannel+0xec>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008288:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 800828c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008290:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  __HAL_UNLOCK(hadc);
 8008294:	2000      	movs	r0, #0
 8008296:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800829a:	b003      	add	sp, #12
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800829e:	68df      	ldr	r7, [r3, #12]
 80082a0:	fa06 f202 	lsl.w	r2, r6, r2
 80082a4:	433a      	orrs	r2, r7
 80082a6:	e7d7      	b.n	8008258 <HAL_ADC_ConfigChannel+0x4c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80082a8:	f04f 0c07 	mov.w	ip, #7
 80082ac:	691f      	ldr	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80082ae:	4096      	lsls	r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80082b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80082b4:	ea27 070c 	bic.w	r7, r7, ip
 80082b8:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80082ba:	691f      	ldr	r7, [r3, #16]
 80082bc:	433e      	orrs	r6, r7
 80082be:	611e      	str	r6, [r3, #16]
 80082c0:	e7cb      	b.n	800825a <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13)
 80082c2:	290c      	cmp	r1, #12
 80082c4:	f04f 011f 	mov.w	r1, #31
 80082c8:	d80b      	bhi.n	80082e2 <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80082ca:	3a23      	subs	r2, #35	@ 0x23
 80082cc:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 80082ce:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082d0:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80082d4:	ea26 0101 	bic.w	r1, r6, r1
 80082d8:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80082dc:	430a      	orrs	r2, r1
 80082de:	631a      	str	r2, [r3, #48]	@ 0x30
 80082e0:	e7cc      	b.n	800827c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082e2:	3a41      	subs	r2, #65	@ 0x41
 80082e4:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80082e6:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082e8:	4095      	lsls	r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082ea:	ea26 0101 	bic.w	r1, r6, r1
 80082ee:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80082f2:	430d      	orrs	r5, r1
 80082f4:	62dd      	str	r5, [r3, #44]	@ 0x2c
 80082f6:	e7c1      	b.n	800827c <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082f8:	2812      	cmp	r0, #18
 80082fa:	d109      	bne.n	8008310 <HAL_ADC_ConfigChannel+0x104>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80082fc:	4b17      	ldr	r3, [pc, #92]	@ (800835c <HAL_ADC_ConfigChannel+0x150>)
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8008304:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800830c:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800830e:	e7c1      	b.n	8008294 <HAL_ADC_ConfigChannel+0x88>
 8008310:	4b10      	ldr	r3, [pc, #64]	@ (8008354 <HAL_ADC_ConfigChannel+0x148>)
 8008312:	4298      	cmp	r0, r3
 8008314:	d001      	beq.n	800831a <HAL_ADC_ConfigChannel+0x10e>
 8008316:	2811      	cmp	r0, #17
 8008318:	d1bc      	bne.n	8008294 <HAL_ADC_ConfigChannel+0x88>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800831a:	4b10      	ldr	r3, [pc, #64]	@ (800835c <HAL_ADC_ConfigChannel+0x150>)
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8008322:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800832a:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800832c:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <HAL_ADC_ConfigChannel+0x148>)
 800832e:	4298      	cmp	r0, r3
 8008330:	d1b0      	bne.n	8008294 <HAL_ADC_ConfigChannel+0x88>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008332:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <HAL_ADC_ConfigChannel+0x154>)
 8008334:	4a0b      	ldr	r2, [pc, #44]	@ (8008364 <HAL_ADC_ConfigChannel+0x158>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	fbb3 f3f2 	udiv	r3, r3, r2
 800833c:	220a      	movs	r2, #10
 800833e:	4353      	muls	r3, r2
        counter--;
 8008340:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8008342:	9b01      	ldr	r3, [sp, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0a5      	beq.n	8008294 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	3b01      	subs	r3, #1
 800834c:	e7f8      	b.n	8008340 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 800834e:	2002      	movs	r0, #2
 8008350:	e7a3      	b.n	800829a <HAL_ADC_ConfigChannel+0x8e>
 8008352:	bf00      	nop
 8008354:	10000012 	.word	0x10000012
 8008358:	40012000 	.word	0x40012000
 800835c:	40012300 	.word	0x40012300
 8008360:	20000060 	.word	0x20000060
 8008364:	000f4240 	.word	0x000f4240

08008368 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008368:	4770      	bx	lr
	...

0800836c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800836c:	4907      	ldr	r1, [pc, #28]	@ (800838c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800836e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008370:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008372:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008376:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800837a:	0412      	lsls	r2, r2, #16
 800837c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800837e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008388:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800838a:	4770      	bx	lr
 800838c:	e000ed00 	.word	0xe000ed00

08008390 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008390:	4b16      	ldr	r3, [pc, #88]	@ (80083ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008392:	b530      	push	{r4, r5, lr}
 8008394:	68dc      	ldr	r4, [r3, #12]
 8008396:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800839a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800839e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	bf28      	it	cs
 80083a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083a6:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083a8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083ac:	bf8c      	ite	hi
 80083ae:	3c03      	subhi	r4, #3
 80083b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083b2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80083b6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083b8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083bc:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083c0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083c4:	fa03 f304 	lsl.w	r3, r3, r4
 80083c8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80083d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80083d2:	db06      	blt.n	80083e2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083d4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80083d8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80083dc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80083e0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083e2:	f000 000f 	and.w	r0, r0, #15
 80083e6:	4a02      	ldr	r2, [pc, #8]	@ (80083f0 <HAL_NVIC_SetPriority+0x60>)
 80083e8:	5413      	strb	r3, [r2, r0]
 80083ea:	e7f9      	b.n	80083e0 <HAL_NVIC_SetPriority+0x50>
 80083ec:	e000ed00 	.word	0xe000ed00
 80083f0:	e000ed14 	.word	0xe000ed14

080083f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80083f4:	2800      	cmp	r0, #0
 80083f6:	db07      	blt.n	8008408 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083f8:	0941      	lsrs	r1, r0, #5
 80083fa:	2301      	movs	r3, #1
 80083fc:	f000 001f 	and.w	r0, r0, #31
 8008400:	4a02      	ldr	r2, [pc, #8]	@ (800840c <HAL_NVIC_EnableIRQ+0x18>)
 8008402:	4083      	lsls	r3, r0
 8008404:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	e000e100 	.word	0xe000e100

08008410 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008410:	2800      	cmp	r0, #0
 8008412:	db0c      	blt.n	800842e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008414:	0943      	lsrs	r3, r0, #5
 8008416:	2201      	movs	r2, #1
 8008418:	f000 001f 	and.w	r0, r0, #31
 800841c:	4904      	ldr	r1, [pc, #16]	@ (8008430 <HAL_NVIC_DisableIRQ+0x20>)
 800841e:	3320      	adds	r3, #32
 8008420:	4082      	lsls	r2, r0
 8008422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008426:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800842a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800842e:	4770      	bx	lr
 8008430:	e000e100 	.word	0xe000e100

08008434 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8008434:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <HAL_MPU_Disable+0x18>)
 800843a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800843c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008440:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	e000ed00 	.word	0xe000ed00

08008450 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008450:	4b06      	ldr	r3, [pc, #24]	@ (800846c <HAL_MPU_Enable+0x1c>)
 8008452:	f040 0001 	orr.w	r0, r0, #1
 8008456:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800845a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800845c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008460:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008466:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800846a:	4770      	bx	lr
 800846c:	e000ed00 	.word	0xe000ed00

08008470 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008470:	7843      	ldrb	r3, [r0, #1]
 8008472:	4a14      	ldr	r2, [pc, #80]	@ (80084c4 <HAL_MPU_ConfigRegion+0x54>)
{
 8008474:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8008476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 800847a:	7801      	ldrb	r1, [r0, #0]
 800847c:	b1e9      	cbz	r1, 80084ba <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800847e:	6843      	ldr	r3, [r0, #4]
 8008480:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008484:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008486:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008488:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800848a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800848e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008490:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008492:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008496:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008498:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800849c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800849e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80084a2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80084a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80084a8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80084aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084ae:	7a01      	ldrb	r1, [r0, #8]
 80084b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084b4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80084b8:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80084ba:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80084be:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 80084c2:	e7f9      	b.n	80084b8 <HAL_MPU_ConfigRegion+0x48>
 80084c4:	e000ed00 	.word	0xe000ed00

080084c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80084c8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80084ca:	4604      	mov	r4, r0
 80084cc:	b908      	cbnz	r0, 80084d2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80084ce:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80084d0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80084d2:	7f43      	ldrb	r3, [r0, #29]
 80084d4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80084d8:	b913      	cbnz	r3, 80084e0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80084da:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80084dc:	f7fc fb3e 	bl	8004b5c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80084e4:	7923      	ldrb	r3, [r4, #4]
 80084e6:	b9e3      	cbnz	r3, 8008522 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	4a13      	ldr	r2, [pc, #76]	@ (8008538 <HAL_CRC_Init+0x70>)
 80084ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	f022 0218 	bic.w	r2, r2, #24
 80084f4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80084f6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80084f8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80084fa:	b9d2      	cbnz	r2, 8008532 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008500:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8008502:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	6961      	ldr	r1, [r4, #20]
 8008508:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800850c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800850e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008510:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800851c:	2301      	movs	r3, #1
 800851e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8008520:	e7d6      	b.n	80084d0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008522:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008526:	4620      	mov	r0, r4
 8008528:	f000 f808 	bl	800853c <HAL_CRCEx_Polynomial_Set>
 800852c:	2800      	cmp	r0, #0
 800852e:	d0e2      	beq.n	80084f6 <HAL_CRC_Init+0x2e>
 8008530:	e7cd      	b.n	80084ce <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008532:	6922      	ldr	r2, [r4, #16]
 8008534:	e7e4      	b.n	8008500 <HAL_CRC_Init+0x38>
 8008536:	bf00      	nop
 8008538:	04c11db7 	.word	0x04c11db7

0800853c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800853c:	231f      	movs	r3, #31
{
 800853e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008540:	3b01      	subs	r3, #1
 8008542:	d31d      	bcc.n	8008580 <HAL_CRCEx_Polynomial_Set+0x44>
 8008544:	fa21 f403 	lsr.w	r4, r1, r3
 8008548:	07e4      	lsls	r4, r4, #31
 800854a:	d5f9      	bpl.n	8008540 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800854c:	2a10      	cmp	r2, #16
 800854e:	d013      	beq.n	8008578 <HAL_CRCEx_Polynomial_Set+0x3c>
 8008550:	2a10      	cmp	r2, #16
 8008552:	d804      	bhi.n	800855e <HAL_CRCEx_Polynomial_Set+0x22>
 8008554:	b13a      	cbz	r2, 8008566 <HAL_CRCEx_Polynomial_Set+0x2a>
 8008556:	2a08      	cmp	r2, #8
 8008558:	d010      	beq.n	800857c <HAL_CRCEx_Polynomial_Set+0x40>
 800855a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800855c:	e00b      	b.n	8008576 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800855e:	2a18      	cmp	r2, #24
 8008560:	d1fb      	bne.n	800855a <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 8008562:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8008564:	d8f9      	bhi.n	800855a <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800856a:	6883      	ldr	r3, [r0, #8]
 800856c:	f023 0318 	bic.w	r3, r3, #24
 8008570:	4313      	orrs	r3, r2
 8008572:	6083      	str	r3, [r0, #8]
 8008574:	2000      	movs	r0, #0
}
 8008576:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8008578:	2b07      	cmp	r3, #7
 800857a:	e7f3      	b.n	8008564 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 800857c:	2b0f      	cmp	r3, #15
 800857e:	e7f1      	b.n	8008564 <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 8008580:	2a10      	cmp	r2, #16
 8008582:	d1e5      	bne.n	8008550 <HAL_CRCEx_Polynomial_Set+0x14>
 8008584:	e7e9      	b.n	800855a <HAL_CRCEx_Polynomial_Set+0x1e>
	...

08008588 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008588:	6803      	ldr	r3, [r0, #0]
{
 800858a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800858c:	2018      	movs	r0, #24
 800858e:	b2d9      	uxtb	r1, r3
 8008590:	3910      	subs	r1, #16
 8008592:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8008596:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008598:	4c05      	ldr	r4, [pc, #20]	@ (80085b0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800859a:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800859c:	5c20      	ldrb	r0, [r4, r0]
 800859e:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085a0:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80085a4:	f020 0003 	bic.w	r0, r0, #3
 80085a8:	bf88      	it	hi
 80085aa:	3004      	addhi	r0, #4
 80085ac:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80085ae:	bd10      	pop	{r4, pc}
 80085b0:	0802cfa5 	.word	0x0802cfa5

080085b4 <HAL_DMA_Init>:
{
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80085b8:	f7ff fc58 	bl	8007e6c <HAL_GetTick>
 80085bc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80085be:	2c00      	cmp	r4, #0
 80085c0:	d060      	beq.n	8008684 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 80085c2:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 80085c4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80085c6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80085ca:	2300      	movs	r3, #0
 80085cc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80085d0:	6813      	ldr	r3, [r2, #0]
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	07d8      	lsls	r0, r3, #31
 80085de:	d42e      	bmi.n	800863e <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 80085e0:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80085e2:	4832      	ldr	r0, [pc, #200]	@ (80086ac <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085e4:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80085e6:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80085ec:	432b      	orrs	r3, r5
 80085ee:	68e5      	ldr	r5, [r4, #12]
 80085f0:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085f2:	6925      	ldr	r5, [r4, #16]
 80085f4:	432b      	orrs	r3, r5
 80085f6:	6965      	ldr	r5, [r4, #20]
 80085f8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085fa:	69e5      	ldr	r5, [r4, #28]
 80085fc:	430b      	orrs	r3, r1
 80085fe:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8008600:	6a25      	ldr	r5, [r4, #32]
 8008602:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008604:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008606:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008608:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800860a:	bf02      	ittt	eq
 800860c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8008610:	4335      	orreq	r5, r6
 8008612:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008614:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8008616:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8008618:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800861a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800861e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008622:	d135      	bne.n	8008690 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8008624:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008626:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8008628:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800862a:	b38d      	cbz	r5, 8008690 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800862c:	b991      	cbnz	r1, 8008654 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800862e:	2801      	cmp	r0, #1
 8008630:	d020      	beq.n	8008674 <HAL_DMA_Init+0xc0>
 8008632:	f030 0102 	bics.w	r1, r0, #2
 8008636:	d12b      	bne.n	8008690 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008638:	01e9      	lsls	r1, r5, #7
 800863a:	d529      	bpl.n	8008690 <HAL_DMA_Init+0xdc>
 800863c:	e01d      	b.n	800867a <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800863e:	f7ff fc15 	bl	8007e6c <HAL_GetTick>
 8008642:	1b40      	subs	r0, r0, r5
 8008644:	2805      	cmp	r0, #5
 8008646:	d9c7      	bls.n	80085d8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008648:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800864a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800864c:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800864e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8008652:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008654:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8008658:	d116      	bne.n	8008688 <HAL_DMA_Init+0xd4>
    switch (tmp)
 800865a:	2803      	cmp	r0, #3
 800865c:	d818      	bhi.n	8008690 <HAL_DMA_Init+0xdc>
 800865e:	a101      	add	r1, pc, #4	@ (adr r1, 8008664 <HAL_DMA_Init+0xb0>)
 8008660:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8008664:	0800867b 	.word	0x0800867b
 8008668:	08008639 	.word	0x08008639
 800866c:	0800867b 	.word	0x0800867b
 8008670:	08008675 	.word	0x08008675
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008674:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8008678:	d10a      	bne.n	8008690 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800867a:	2340      	movs	r3, #64	@ 0x40
 800867c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800867e:	2301      	movs	r3, #1
 8008680:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8008684:	2001      	movs	r0, #1
 8008686:	e7e4      	b.n	8008652 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8008688:	2802      	cmp	r0, #2
 800868a:	d9f6      	bls.n	800867a <HAL_DMA_Init+0xc6>
 800868c:	2803      	cmp	r0, #3
 800868e:	d0d3      	beq.n	8008638 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8008690:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008692:	4620      	mov	r0, r4
 8008694:	f7ff ff78 	bl	8008588 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008698:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800869a:	233f      	movs	r3, #63	@ 0x3f
 800869c:	4093      	lsls	r3, r2
 800869e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086a0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80086a2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086a4:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80086a6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80086aa:	e7d2      	b.n	8008652 <HAL_DMA_Init+0x9e>
 80086ac:	e010803f 	.word	0xe010803f

080086b0 <HAL_DMA_Start_IT>:
{
 80086b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80086b2:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086b6:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80086b8:	2c01      	cmp	r4, #1
 80086ba:	d034      	beq.n	8008726 <HAL_DMA_Start_IT+0x76>
 80086bc:	2401      	movs	r4, #1
 80086be:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80086c2:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80086c6:	2c01      	cmp	r4, #1
 80086c8:	f04f 0400 	mov.w	r4, #0
 80086cc:	d129      	bne.n	8008722 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80086ce:	2502      	movs	r5, #2
 80086d0:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086d4:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086d6:	6804      	ldr	r4, [r0, #0]
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 80086de:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80086e0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086e2:	6883      	ldr	r3, [r0, #8]
 80086e4:	2b40      	cmp	r3, #64	@ 0x40
 80086e6:	d119      	bne.n	800871c <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80086e8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80086ea:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086ec:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80086ee:	233f      	movs	r3, #63	@ 0x3f
 80086f0:	4093      	lsls	r3, r2
 80086f2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	f043 0316 	orr.w	r3, r3, #22
 80086fa:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008704:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008706:	b11b      	cbz	r3, 8008710 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	f043 0308 	orr.w	r3, r3, #8
 800870e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008710:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008712:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008714:	f043 0301 	orr.w	r3, r3, #1
 8008718:	6023      	str	r3, [r4, #0]
}
 800871a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800871c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800871e:	60e2      	str	r2, [r4, #12]
 8008720:	e7e4      	b.n	80086ec <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8008722:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8008726:	2002      	movs	r0, #2
 8008728:	e7f7      	b.n	800871a <HAL_DMA_Start_IT+0x6a>

0800872a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800872a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800872e:	2b02      	cmp	r3, #2
 8008730:	d003      	beq.n	800873a <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008732:	2380      	movs	r3, #128	@ 0x80
 8008734:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8008736:	2001      	movs	r0, #1
 8008738:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800873a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800873c:	2305      	movs	r3, #5
 800873e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 8008742:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008744:	6813      	ldr	r3, [r2, #0]
 8008746:	f023 0301 	bic.w	r3, r3, #1
 800874a:	6013      	str	r3, [r2, #0]
}
 800874c:	4770      	bx	lr
	...

08008750 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008750:	2300      	movs	r3, #0
{
 8008752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8008754:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008756:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8008758:	4b5b      	ldr	r3, [pc, #364]	@ (80088c8 <HAL_DMA_IRQHandler+0x178>)
{
 800875a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800875c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800875e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008760:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8008762:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008764:	409a      	lsls	r2, r3
 8008766:	4232      	tst	r2, r6
 8008768:	d00c      	beq.n	8008784 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800876a:	6801      	ldr	r1, [r0, #0]
 800876c:	6808      	ldr	r0, [r1, #0]
 800876e:	0740      	lsls	r0, r0, #29
 8008770:	d508      	bpl.n	8008784 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008772:	6808      	ldr	r0, [r1, #0]
 8008774:	f020 0004 	bic.w	r0, r0, #4
 8008778:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800877a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800877c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800877e:	f042 0201 	orr.w	r2, r2, #1
 8008782:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008784:	2201      	movs	r2, #1
 8008786:	409a      	lsls	r2, r3
 8008788:	4232      	tst	r2, r6
 800878a:	d008      	beq.n	800879e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800878c:	6821      	ldr	r1, [r4, #0]
 800878e:	6949      	ldr	r1, [r1, #20]
 8008790:	0609      	lsls	r1, r1, #24
 8008792:	d504      	bpl.n	800879e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008794:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008796:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008798:	f042 0202 	orr.w	r2, r2, #2
 800879c:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800879e:	2204      	movs	r2, #4
 80087a0:	409a      	lsls	r2, r3
 80087a2:	4232      	tst	r2, r6
 80087a4:	d008      	beq.n	80087b8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80087a6:	6821      	ldr	r1, [r4, #0]
 80087a8:	6809      	ldr	r1, [r1, #0]
 80087aa:	0788      	lsls	r0, r1, #30
 80087ac:	d504      	bpl.n	80087b8 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80087ae:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087b2:	f042 0204 	orr.w	r2, r2, #4
 80087b6:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80087b8:	2210      	movs	r2, #16
 80087ba:	409a      	lsls	r2, r3
 80087bc:	4232      	tst	r2, r6
 80087be:	d010      	beq.n	80087e2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	0709      	lsls	r1, r1, #28
 80087c6:	d50c      	bpl.n	80087e2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80087c8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	0350      	lsls	r0, r2, #13
 80087ce:	d537      	bpl.n	8008840 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	0319      	lsls	r1, r3, #12
 80087d4:	d401      	bmi.n	80087da <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80087d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087d8:	e000      	b.n	80087dc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80087dc:	b10b      	cbz	r3, 80087e2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80087de:	4620      	mov	r0, r4
 80087e0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80087e2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80087e4:	2220      	movs	r2, #32
 80087e6:	408a      	lsls	r2, r1
 80087e8:	4232      	tst	r2, r6
 80087ea:	d03a      	beq.n	8008862 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	06c6      	lsls	r6, r0, #27
 80087f2:	d536      	bpl.n	8008862 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80087f4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087f6:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 80087fa:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087fc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087fe:	d127      	bne.n	8008850 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008800:	f022 0216 	bic.w	r2, r2, #22
 8008804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800880c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800880e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008810:	b90a      	cbnz	r2, 8008816 <HAL_DMA_IRQHandler+0xc6>
 8008812:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8008814:	b11a      	cbz	r2, 800881e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	f022 0208 	bic.w	r2, r2, #8
 800881c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800881e:	233f      	movs	r3, #63	@ 0x3f
 8008820:	408b      	lsls	r3, r1
 8008822:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8008824:	2301      	movs	r3, #1
 8008826:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800882a:	2300      	movs	r3, #0
 800882c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8008830:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8008832:	2b00      	cmp	r3, #0
 8008834:	d045      	beq.n	80088c2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8008836:	4620      	mov	r0, r4
}
 8008838:	b003      	add	sp, #12
 800883a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800883e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	05d2      	lsls	r2, r2, #23
 8008844:	d4c7      	bmi.n	80087d6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	f022 0208 	bic.w	r2, r2, #8
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e7c2      	b.n	80087d6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008850:	0350      	lsls	r0, r2, #13
 8008852:	d527      	bpl.n	80088a4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	0319      	lsls	r1, r3, #12
 8008858:	d431      	bmi.n	80088be <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800885a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 800885c:	b10b      	cbz	r3, 8008862 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800885e:	4620      	mov	r0, r4
 8008860:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008862:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008864:	b36b      	cbz	r3, 80088c2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008866:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008868:	07da      	lsls	r2, r3, #31
 800886a:	d519      	bpl.n	80088a0 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800886c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8008870:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8008872:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8008876:	2305      	movs	r3, #5
 8008878:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800887c:	6813      	ldr	r3, [r2, #0]
 800887e:	f023 0301 	bic.w	r3, r3, #1
 8008882:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	3301      	adds	r3, #1
 8008888:	42bb      	cmp	r3, r7
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	d802      	bhi.n	8008894 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800888e:	6813      	ldr	r3, [r2, #0]
 8008890:	07db      	lsls	r3, r3, #31
 8008892:	d4f7      	bmi.n	8008884 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8008894:	2301      	movs	r3, #1
 8008896:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800889a:	2300      	movs	r3, #0
 800889c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80088a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80088a2:	e7c6      	b.n	8008832 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80088aa:	d108      	bne.n	80088be <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	f021 0110 	bic.w	r1, r1, #16
 80088b2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80088b4:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80088b6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80088ba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 80088be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80088c0:	e7cc      	b.n	800885c <HAL_DMA_IRQHandler+0x10c>
}
 80088c2:	b003      	add	sp, #12
 80088c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000060 	.word	0x20000060

080088cc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80088cc:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 80088ce:	4770      	bx	lr

080088d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80088d0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80088d2:	4604      	mov	r4, r0
 80088d4:	b380      	cbz	r0, 8008938 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80088d6:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80088da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80088de:	b91b      	cbnz	r3, 80088e8 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80088e0:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80088e4:	f7fc f950 	bl	8004b88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80088e8:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80088ea:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80088ec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80088f8:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80088fa:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80088fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80088fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008900:	f022 0207 	bic.w	r2, r2, #7
 8008904:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008906:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008908:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800890a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800890c:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8008910:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008914:	430a      	orrs	r2, r1
 8008916:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008918:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800891a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800891e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008922:	0552      	lsls	r2, r2, #21
 8008924:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008928:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800892a:	430a      	orrs	r2, r1
 800892c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800892e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008930:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008932:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8008936:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008938:	2001      	movs	r0, #1
 800893a:	e7fc      	b.n	8008936 <HAL_DMA2D_Init+0x66>

0800893c <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800893c:	4770      	bx	lr

0800893e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800893e:	4770      	bx	lr

08008940 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008940:	6803      	ldr	r3, [r0, #0]
{
 8008942:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008944:	685e      	ldr	r6, [r3, #4]
{
 8008946:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008948:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800894a:	07f2      	lsls	r2, r6, #31
 800894c:	d514      	bpl.n	8008978 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800894e:	05e9      	lsls	r1, r5, #23
 8008950:	d512      	bpl.n	8008978 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008958:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800895a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800895c:	f042 0201 	orr.w	r2, r2, #1
 8008960:	6542      	str	r2, [r0, #84]	@ 0x54
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008962:	2201      	movs	r2, #1
 8008964:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008966:	2304      	movs	r3, #4
 8008968:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800896c:	2300      	movs	r3, #0
 800896e:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 8008972:	69c3      	ldr	r3, [r0, #28]
 8008974:	b103      	cbz	r3, 8008978 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8008976:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008978:	06b2      	lsls	r2, r6, #26
 800897a:	d516      	bpl.n	80089aa <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800897c:	04ab      	lsls	r3, r5, #18
 800897e:	d514      	bpl.n	80089aa <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008988:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800898a:	2220      	movs	r2, #32
 800898c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800898e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008990:	f043 0302 	orr.w	r3, r3, #2
 8008994:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008996:	2304      	movs	r3, #4
 8008998:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800899c:	2300      	movs	r3, #0
 800899e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 80089a2:	69e3      	ldr	r3, [r4, #28]
 80089a4:	b10b      	cbz	r3, 80089aa <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80089a6:	4620      	mov	r0, r4
 80089a8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80089aa:	0730      	lsls	r0, r6, #28
 80089ac:	d516      	bpl.n	80089dc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80089ae:	0529      	lsls	r1, r5, #20
 80089b0:	d514      	bpl.n	80089dc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80089bc:	2208      	movs	r2, #8
 80089be:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80089c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80089c2:	f043 0304 	orr.w	r3, r3, #4
 80089c6:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80089c8:	2304      	movs	r3, #4
 80089ca:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 80089d4:	69e3      	ldr	r3, [r4, #28]
 80089d6:	b10b      	cbz	r3, 80089dc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80089d8:	4620      	mov	r0, r4
 80089da:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80089dc:	0772      	lsls	r2, r6, #29
 80089de:	d50b      	bpl.n	80089f8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80089e0:	056b      	lsls	r3, r5, #21
 80089e2:	d509      	bpl.n	80089f8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80089e4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80089e6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80089f0:	2204      	movs	r2, #4
 80089f2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80089f4:	f7ff ffa2 	bl	800893c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80089f8:	07b0      	lsls	r0, r6, #30
 80089fa:	d514      	bpl.n	8008a26 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80089fc:	05a9      	lsls	r1, r5, #22
 80089fe:	d512      	bpl.n	8008a26 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008a08:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008a0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008a10:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferCpltCallback != NULL)
 8008a1e:	69a3      	ldr	r3, [r4, #24]
 8008a20:	b10b      	cbz	r3, 8008a26 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8008a22:	4620      	mov	r0, r4
 8008a24:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008a26:	06f2      	lsls	r2, r6, #27
 8008a28:	d513      	bpl.n	8008a52 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008a2a:	04eb      	lsls	r3, r5, #19
 8008a2c:	d511      	bpl.n	8008a52 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008a2e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008a30:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a38:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008a3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008a40:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008a4e:	f7ff ff76 	bl	800893e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8008a52:	bd70      	pop	{r4, r5, r6, pc}

08008a54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008a54:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008a56:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d031      	beq.n	8008ac6 <HAL_DMA2D_ConfigLayer+0x72>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a62:	f882 0051 	strb.w	r0, [r2, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a66:	2018      	movs	r0, #24
  __HAL_LOCK(hdma2d);
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4e21      	ldr	r6, [pc, #132]	@ (8008af0 <HAL_DMA2D_ConfigLayer+0x9c>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a6c:	fb00 2001 	mla	r0, r0, r1, r2
  __HAL_LOCK(hdma2d);
 8008a70:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a76:	e9d0 4509 	ldrd	r4, r5, [r0, #36]	@ 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a7a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a7c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a80:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8008a82:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a84:	4323      	orrs	r3, r4
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a86:	3c09      	subs	r4, #9
 8008a88:	2c01      	cmp	r4, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a8a:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a8e:	bf96      	itet	ls
 8008a90:	f000 407f 	andls.w	r0, r0, #4278190080	@ 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008a94:	ea43 6300 	orrhi.w	r3, r3, r0, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a98:	4303      	orrls	r3, r0

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a9a:	6810      	ldr	r0, [r2, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008a9c:	b9a1      	cbnz	r1, 8008ac8 <HAL_DMA2D_ConfigLayer+0x74>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a9e:	6a41      	ldr	r1, [r0, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008aa0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008aa2:	ea01 0106 	and.w	r1, r1, r6
 8008aa6:	ea43 0301 	orr.w	r3, r3, r1
 8008aaa:	6243      	str	r3, [r0, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008aac:	6a13      	ldr	r3, [r2, #32]
 8008aae:	6183      	str	r3, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ab0:	d803      	bhi.n	8008aba <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008ab2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008ab4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ab8:	6283      	str	r3, [r0, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008aba:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008abc:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008abe:	f882 3051 	strb.w	r3, [r2, #81]	@ 0x51
  __HAL_UNLOCK(hdma2d);
 8008ac2:	f882 0050 	strb.w	r0, [r2, #80]	@ 0x50

  return HAL_OK;
}
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008ac8:	69c5      	ldr	r5, [r0, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008aca:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008acc:	ea05 0506 	and.w	r5, r5, r6
 8008ad0:	ea43 0305 	orr.w	r3, r3, r5
 8008ad4:	61c3      	str	r3, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008ad6:	f04f 0318 	mov.w	r3, #24
 8008ada:	fb03 2101 	mla	r1, r3, r1, r2
 8008ade:	6a0b      	ldr	r3, [r1, #32]
 8008ae0:	6103      	str	r3, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ae2:	d8ea      	bhi.n	8008aba <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008ae4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008ae6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008aea:	6203      	str	r3, [r0, #32]
 8008aec:	e7e5      	b.n	8008aba <HAL_DMA2D_ConfigLayer+0x66>
 8008aee:	bf00      	nop
 8008af0:	00ccfff0 	.word	0x00ccfff0

08008af4 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	4607      	mov	r7, r0
 8008afa:	460d      	mov	r5, r1
 8008afc:	4614      	mov	r4, r2
 8008afe:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b00:	f7ff f9b4 	bl	8007e6c <HAL_GetTick>
 8008b04:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008b0a:	07d2      	lsls	r2, r2, #31
 8008b0c:	d50a      	bpl.n	8008b24 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008b0e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8008b12:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8008b14:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008b16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b1a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8008b1e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008b24:	f7ff f9a2 	bl	8007e6c <HAL_GetTick>
 8008b28:	eba0 0008 	sub.w	r0, r0, r8
 8008b2c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008b30:	d9e9      	bls.n	8008b06 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8008b32:	2003      	movs	r0, #3
 8008b34:	e7f4      	b.n	8008b20 <DSI_ShortWrite.constprop.0+0x2c>

08008b36 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008b36:	7c03      	ldrb	r3, [r0, #16]
{
 8008b38:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d05b      	beq.n	8008bf6 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8008b3e:	6803      	ldr	r3, [r0, #0]
 8008b40:	2000      	movs	r0, #0
 8008b42:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008b46:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008b4a:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008b4c:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008b4e:	d507      	bpl.n	8008b60 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008b50:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008b54:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8008b58:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8008b5c:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008b60:	0788      	lsls	r0, r1, #30
 8008b62:	d505      	bpl.n	8008b70 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008b64:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008b68:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8008b6c:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008b70:	0748      	lsls	r0, r1, #29
 8008b72:	d505      	bpl.n	8008b80 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008b74:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008b78:	f040 0001 	orr.w	r0, r0, #1
 8008b7c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008b80:	0708      	lsls	r0, r1, #28
 8008b82:	d505      	bpl.n	8008b90 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008b84:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008b88:	f040 0002 	orr.w	r0, r0, #2
 8008b8c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008b90:	06c8      	lsls	r0, r1, #27
 8008b92:	d505      	bpl.n	8008ba0 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008b94:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008b98:	f040 000c 	orr.w	r0, r0, #12
 8008b9c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008ba0:	0688      	lsls	r0, r1, #26
 8008ba2:	d505      	bpl.n	8008bb0 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008ba4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008ba8:	f040 0010 	orr.w	r0, r0, #16
 8008bac:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008bb0:	0648      	lsls	r0, r1, #25
 8008bb2:	d505      	bpl.n	8008bc0 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008bb4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008bb8:	f040 0020 	orr.w	r0, r0, #32
 8008bbc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008bc0:	0608      	lsls	r0, r1, #24
 8008bc2:	d505      	bpl.n	8008bd0 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008bc4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008bc8:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8008bcc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008bd0:	05c8      	lsls	r0, r1, #23
 8008bd2:	d505      	bpl.n	8008be0 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008bd4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008bd8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008bdc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008be0:	0589      	lsls	r1, r1, #22
 8008be2:	d505      	bpl.n	8008bf0 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008be4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8008be8:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8008bec:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8008bf4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008bf6:	2002      	movs	r0, #2
}
 8008bf8:	4770      	bx	lr
	...

08008bfc <HAL_DSI_Init>:
{
 8008bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bfe:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008c00:	4604      	mov	r4, r0
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f000 80a9 	beq.w	8008d5a <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008c08:	7c43      	ldrb	r3, [r0, #17]
 8008c0a:	b90b      	cbnz	r3, 8008c10 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008c0c:	f7fb ffdc 	bl	8004bc8 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008c10:	2303      	movs	r3, #3
 8008c12:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008c14:	2300      	movs	r3, #0
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008c1e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008c22:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008c26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008c2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8008c32:	f7ff f91b 	bl	8007e6c <HAL_GetTick>
 8008c36:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8008c3e:	04d9      	lsls	r1, r3, #19
 8008c40:	d57a      	bpl.n	8008d38 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008c42:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008c46:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008c4a:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8008c4e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c52:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008c56:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008c5a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c5c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008c60:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008c62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8008c66:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8008c7e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008c8a:	f7ff f8f5 	bl	8007e78 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008c8e:	f7ff f8ed 	bl	8007e6c <HAL_GetTick>
 8008c92:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008c9a:	05d2      	lsls	r2, r2, #23
 8008c9c:	d556      	bpl.n	8008d4c <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008c9e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008ca2:	f246 10a8 	movw	r0, #25000	@ 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008ca6:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008ca8:	f042 0206 	orr.w	r2, r2, #6
 8008cac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008cb0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008cb4:	f022 0203 	bic.w	r2, r2, #3
 8008cb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008cbc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008cc0:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008cc2:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008cc4:	f042 0201 	orr.w	r2, r2, #1
 8008cc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008ccc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008cd0:	f022 0203 	bic.w	r2, r2, #3
 8008cd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008cd8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008cdc:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008cde:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008ce0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008cea:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008cf0:	491b      	ldr	r1, [pc, #108]	@ (8008d60 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008cf2:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008cf4:	686a      	ldr	r2, [r5, #4]
 8008cf6:	2a01      	cmp	r2, #1
 8008cf8:	bf38      	it	cc
 8008cfa:	2201      	movcc	r2, #1
 8008cfc:	434a      	muls	r2, r1
 8008cfe:	68a9      	ldr	r1, [r5, #8]
 8008d00:	f001 0103 	and.w	r1, r1, #3
 8008d04:	408a      	lsls	r2, r1
 8008d06:	6829      	ldr	r1, [r5, #0]
 8008d08:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8008d0a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008d0c:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008d10:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008d14:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8008d18:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008d1c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008d20:	430a      	orrs	r2, r1
 8008d22:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008d26:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008d2a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8008d2e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008d30:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8008d32:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8008d34:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8008d36:	e007      	b.n	8008d48 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008d38:	f7ff f898 	bl	8007e6c <HAL_GetTick>
 8008d3c:	1b80      	subs	r0, r0, r6
 8008d3e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008d42:	f67f af79 	bls.w	8008c38 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008d46:	2003      	movs	r0, #3
}
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008d4c:	f7ff f88e 	bl	8007e6c <HAL_GetTick>
 8008d50:	1b80      	subs	r0, r0, r6
 8008d52:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008d56:	d99d      	bls.n	8008c94 <HAL_DSI_Init+0x98>
 8008d58:	e7f5      	b.n	8008d46 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	e7f4      	b.n	8008d48 <HAL_DSI_Init+0x14c>
 8008d5e:	bf00      	nop
 8008d60:	003d0900 	.word	0x003d0900

08008d64 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8008d64:	4770      	bx	lr

08008d66 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008d66:	6803      	ldr	r3, [r0, #0]
 8008d68:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008d6c:	07d1      	lsls	r1, r2, #31
{
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008d72:	d508      	bpl.n	8008d86 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008d74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008d78:	07d2      	lsls	r2, r2, #31
 8008d7a:	d504      	bpl.n	8008d86 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8008d82:	f7f8 f961 	bl	8001048 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008d8c:	0791      	lsls	r1, r2, #30
 8008d8e:	d509      	bpl.n	8008da4 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008d90:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008d94:	0792      	lsls	r2, r2, #30
 8008d96:	d505      	bpl.n	8008da4 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008d98:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008d9a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008d9c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008da0:	f7f8 f986 	bl	80010b0 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8008da4:	69a3      	ldr	r3, [r4, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d04e      	beq.n	8008e48 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008daa:	6821      	ldr	r1, [r4, #0]
 8008dac:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008db0:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8008db4:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008db6:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008dba:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8008dbe:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008dc0:	b291      	uxth	r1, r2
 8008dc2:	b119      	cbz	r1, 8008dcc <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	f041 0101 	orr.w	r1, r1, #1
 8008dca:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008dcc:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8008dd0:	d003      	beq.n	8008dda <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008dd2:	6962      	ldr	r2, [r4, #20]
 8008dd4:	f042 0202 	orr.w	r2, r2, #2
 8008dd8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008dda:	07d8      	lsls	r0, r3, #31
 8008ddc:	d503      	bpl.n	8008de6 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008dde:	6962      	ldr	r2, [r4, #20]
 8008de0:	f042 0204 	orr.w	r2, r2, #4
 8008de4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008de6:	0799      	lsls	r1, r3, #30
 8008de8:	d503      	bpl.n	8008df2 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008dea:	6962      	ldr	r2, [r4, #20]
 8008dec:	f042 0208 	orr.w	r2, r2, #8
 8008df0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008df2:	f013 0f0c 	tst.w	r3, #12
 8008df6:	d003      	beq.n	8008e00 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008df8:	6962      	ldr	r2, [r4, #20]
 8008dfa:	f042 0210 	orr.w	r2, r2, #16
 8008dfe:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8008e00:	06da      	lsls	r2, r3, #27
 8008e02:	d503      	bpl.n	8008e0c <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008e04:	6962      	ldr	r2, [r4, #20]
 8008e06:	f042 0220 	orr.w	r2, r2, #32
 8008e0a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008e0c:	0698      	lsls	r0, r3, #26
 8008e0e:	d503      	bpl.n	8008e18 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8008e10:	6962      	ldr	r2, [r4, #20]
 8008e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e16:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8008e18:	0659      	lsls	r1, r3, #25
 8008e1a:	d503      	bpl.n	8008e24 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008e1c:	6962      	ldr	r2, [r4, #20]
 8008e1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008e22:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008e24:	061a      	lsls	r2, r3, #24
 8008e26:	d503      	bpl.n	8008e30 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8008e28:	6962      	ldr	r2, [r4, #20]
 8008e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e2e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008e30:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8008e34:	d003      	beq.n	8008e3e <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008e36:	6963      	ldr	r3, [r4, #20]
 8008e38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e3c:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8008e3e:	6963      	ldr	r3, [r4, #20]
 8008e40:	b113      	cbz	r3, 8008e48 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8008e42:	4620      	mov	r0, r4
 8008e44:	f7ff ff8e 	bl	8008d64 <HAL_DSI_ErrorCallback>
}
 8008e48:	bd10      	pop	{r4, pc}

08008e4a <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008e4a:	7c02      	ldrb	r2, [r0, #16]
{
 8008e4c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008e4e:	2a01      	cmp	r2, #1
 8008e50:	d00a      	beq.n	8008e68 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008e52:	6802      	ldr	r2, [r0, #0]
 8008e54:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008e56:	f020 0003 	bic.w	r0, r0, #3
 8008e5a:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008e5c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008e5e:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008e60:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008e62:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8008e64:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008e66:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008e68:	2002      	movs	r0, #2
}
 8008e6a:	4770      	bx	lr

08008e6c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008e6c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008e6e:	7c03      	ldrb	r3, [r0, #16]
{
 8008e70:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d069      	beq.n	8008f4a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008e76:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008e78:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e7c:	f042 0201 	orr.w	r2, r2, #1
 8008e80:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008e82:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008e8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	f022 0203 	bic.w	r2, r2, #3
 8008ea0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	4302      	orrs	r2, r0
 8008ea6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	f022 0207 	bic.w	r2, r2, #7
 8008eae:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008eb0:	6958      	ldr	r0, [r3, #20]
 8008eb2:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8008eb6:	432a      	orrs	r2, r5
 8008eb8:	694d      	ldr	r5, [r1, #20]
 8008eba:	432a      	orrs	r2, r5
 8008ebc:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008ebe:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008ec0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	f022 020f 	bic.w	r2, r2, #15
 8008ec8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	4302      	orrs	r2, r0
 8008ece:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008ed0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ed4:	f022 020e 	bic.w	r2, r2, #14
 8008ed8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008edc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ee0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008ee4:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008ee6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8008eea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008eec:	0c12      	lsrs	r2, r2, #16
 8008eee:	0412      	lsls	r2, r2, #16
 8008ef0:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008ef2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008ef4:	4302      	orrs	r2, r0
 8008ef6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8008ef8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008efc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008f00:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f04:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8008f08:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8008f0c:	432a      	orrs	r2, r5
 8008f0e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008f10:	432a      	orrs	r2, r5
 8008f12:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008f14:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f16:	432a      	orrs	r2, r5
 8008f18:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f1a:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f1c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8008f20:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008f22:	f022 0201 	bic.w	r2, r2, #1
 8008f26:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008f28:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008f2e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008f32:	f042 0201 	orr.w	r2, r2, #1
 8008f36:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8008f3a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008f3e:	f042 0202 	orr.w	r2, r2, #2
 8008f42:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8008f46:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008f48:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008f4a:	2002      	movs	r0, #2
 8008f4c:	e7fc      	b.n	8008f48 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008f50 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008f50:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f52:	7c03      	ldrb	r3, [r0, #16]
{
 8008f54:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d029      	beq.n	8008fae <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008f5a:	6800      	ldr	r0, [r0, #0]
 8008f5c:	4b15      	ldr	r3, [pc, #84]	@ (8008fb4 <HAL_DSI_ConfigCommand+0x64>)
 8008f5e:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008f60:	4023      	ands	r3, r4
 8008f62:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008f64:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008f66:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008f6a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008f6c:	688d      	ldr	r5, [r1, #8]
 8008f6e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008f70:	68cd      	ldr	r5, [r1, #12]
 8008f72:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8008f74:	690d      	ldr	r5, [r1, #16]
 8008f76:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008f78:	694d      	ldr	r5, [r1, #20]
 8008f7a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008f7c:	698d      	ldr	r5, [r1, #24]
 8008f7e:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008f80:	69cd      	ldr	r5, [r1, #28]
 8008f82:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8008f84:	6a0d      	ldr	r5, [r1, #32]
 8008f86:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008f88:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008f8a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008f8c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008f8e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008f90:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008f92:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8008f94:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008f96:	4323      	orrs	r3, r4
 8008f98:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008f9a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008f9c:	f023 0302 	bic.w	r3, r3, #2
 8008fa0:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008fa2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008fa8:	2000      	movs	r0, #0
 8008faa:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8008fac:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008fae:	2002      	movs	r0, #2
 8008fb0:	e7fc      	b.n	8008fac <HAL_DSI_ConfigCommand+0x5c>
 8008fb2:	bf00      	nop
 8008fb4:	fef080ff 	.word	0xfef080ff

08008fb8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008fb8:	7c02      	ldrb	r2, [r0, #16]
{
 8008fba:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008fbc:	2a01      	cmp	r2, #1
 8008fbe:	d00a      	beq.n	8008fd6 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008fc0:	6802      	ldr	r2, [r0, #0]
 8008fc2:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008fc4:	f020 001f 	bic.w	r0, r0, #31
 8008fc8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008fca:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008fcc:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008fce:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8008fd0:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8008fd2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008fd4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008fd6:	2002      	movs	r0, #2
}
 8008fd8:	4770      	bx	lr

08008fda <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008fda:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008fdc:	7c03      	ldrb	r3, [r0, #16]
{
 8008fde:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d034      	beq.n	800904e <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8008fe4:	e9d1 0300 	ldrd	r0, r3, [r1]
 8008fe8:	4298      	cmp	r0, r3
 8008fea:	bf38      	it	cc
 8008fec:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008ff4:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8008ff8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008ffc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009000:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009004:	4302      	orrs	r2, r0
 8009006:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800900a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800900e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8009012:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009016:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800901a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800901e:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009020:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009024:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009026:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009028:	432a      	orrs	r2, r5
 800902a:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800902c:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800902e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8009032:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009036:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800903a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800903e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009042:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009046:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800904a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800904c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800904e:	2002      	movs	r0, #2
 8009050:	e7fc      	b.n	800904c <HAL_DSI_ConfigPhyTimer+0x72>
	...

08009054 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009054:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009056:	7c03      	ldrb	r3, [r0, #16]
{
 8009058:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800905a:	2b01      	cmp	r3, #1
 800905c:	d05b      	beq.n	8009116 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800905e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009060:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009062:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009064:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009066:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800906a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009072:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009074:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8009076:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009078:	b292      	uxth	r2, r2
 800907a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800907c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800907e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009082:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009084:	4a25      	ldr	r2, [pc, #148]	@ (800911c <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8009086:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009088:	4010      	ands	r0, r2
 800908a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800908c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800908e:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009090:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009092:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8009094:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009096:	4010      	ands	r0, r2
 8009098:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800909a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800909c:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800909e:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80090a0:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80090a2:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80090a6:	4010      	ands	r0, r2
 80090a8:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80090ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80090b0:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80090b2:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80090b4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80090b8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80090bc:	4010      	ands	r0, r2
 80090be:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80090c2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80090c6:	4328      	orrs	r0, r5
 80090c8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80090cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80090d0:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80090d4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80090d8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80090dc:	698d      	ldr	r5, [r1, #24]
 80090de:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80090e0:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80090e2:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80090e4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80090e8:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80090ec:	4010      	ands	r0, r2
 80090ee:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80090f2:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80090f6:	4328      	orrs	r0, r5
 80090f8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80090fc:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8009100:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009102:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009104:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009108:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800910c:	430a      	orrs	r2, r1
 800910e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8009112:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009114:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009116:	2002      	movs	r0, #2
 8009118:	e7fc      	b.n	8009114 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800911a:	bf00      	nop
 800911c:	ffff0000 	.word	0xffff0000

08009120 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009120:	7c03      	ldrb	r3, [r0, #16]
{
 8009122:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009124:	2b01      	cmp	r3, #1
 8009126:	d01c      	beq.n	8009162 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	2300      	movs	r3, #0
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	6851      	ldr	r1, [r2, #4]
 8009130:	f041 0101 	orr.w	r1, r1, #1
 8009134:	6051      	str	r1, [r2, #4]
 8009136:	6851      	ldr	r1, [r2, #4]
 8009138:	f001 0101 	and.w	r1, r1, #1
 800913c:	9100      	str	r1, [sp, #0]
 800913e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8009146:	f041 0108 	orr.w	r1, r1, #8
 800914a:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800914e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009152:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009154:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009156:	f002 0208 	and.w	r2, r2, #8
 800915a:	9201      	str	r2, [sp, #4]
 800915c:	9a01      	ldr	r2, [sp, #4]
}
 800915e:	b002      	add	sp, #8
 8009160:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009162:	2002      	movs	r0, #2
 8009164:	e7fb      	b.n	800915e <HAL_DSI_Start+0x3e>

08009166 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009166:	7c02      	ldrb	r2, [r0, #16]
{
 8009168:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800916a:	2a01      	cmp	r2, #1
 800916c:	d009      	beq.n	8009182 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800916e:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009170:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009172:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8009176:	f042 0204 	orr.w	r2, r2, #4
 800917a:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800917e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009180:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009182:	2002      	movs	r0, #2
}
 8009184:	4770      	bx	lr

08009186 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009186:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009188:	7c05      	ldrb	r5, [r0, #16]
{
 800918a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800918c:	2d01      	cmp	r5, #1
 800918e:	d009      	beq.n	80091a4 <HAL_DSI_ShortWrite+0x1e>
 8009190:	2501      	movs	r5, #1
 8009192:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009194:	9d06      	ldr	r5, [sp, #24]
 8009196:	9500      	str	r5, [sp, #0]
 8009198:	f7ff fcac 	bl	8008af4 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800919c:	2300      	movs	r3, #0
 800919e:	7423      	strb	r3, [r4, #16]

  return status;
}
 80091a0:	b003      	add	sp, #12
 80091a2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80091a4:	2002      	movs	r0, #2
 80091a6:	e7fb      	b.n	80091a0 <HAL_DSI_ShortWrite+0x1a>

080091a8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80091a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80091ae:	7c03      	ldrb	r3, [r0, #16]
{
 80091b0:	4606      	mov	r6, r0
 80091b2:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 80091b4:	2b01      	cmp	r3, #1
{
 80091b6:	4615      	mov	r5, r2
 80091b8:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 80091bc:	d052      	beq.n	8009264 <HAL_DSI_LongWrite+0xbc>
 80091be:	2301      	movs	r3, #1
 80091c0:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80091c2:	f7fe fe53 	bl	8007e6c <HAL_GetTick>
 80091c6:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80091c8:	6832      	ldr	r2, [r6, #0]
 80091ca:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80091cc:	f013 0a01 	ands.w	sl, r3, #1
 80091d0:	d019      	beq.n	8009206 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80091d2:	2c03      	cmp	r4, #3
 80091d4:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80091d6:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80091da:	bf28      	it	cs
 80091dc:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80091de:	4283      	cmp	r3, r0
 80091e0:	d11d      	bne.n	800921e <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80091e2:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80091e4:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80091e6:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80091ea:	bb10      	cbnz	r0, 8009232 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80091ec:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80091ee:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80091f2:	0223      	lsls	r3, r4, #8
 80091f4:	0224      	lsls	r4, r4, #8
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80091fc:	431d      	orrs	r5, r3
 80091fe:	4325      	orrs	r5, r4
 8009200:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009202:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8009204:	e009      	b.n	800921a <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009206:	f7fe fe31 	bl	8007e6c <HAL_GetTick>
 800920a:	eba0 000b 	sub.w	r0, r0, fp
 800920e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009212:	d9d9      	bls.n	80091c8 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009214:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009216:	f886 a010 	strb.w	sl, [r6, #16]
}
 800921a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800921e:	f818 1003 	ldrb.w	r1, [r8, r3]
 8009222:	3301      	adds	r3, #1
 8009224:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8009228:	fa01 f10c 	lsl.w	r1, r1, ip
 800922c:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8009230:	e7d5      	b.n	80091de <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009232:	2804      	cmp	r0, #4
    fifoword = 0U;
 8009234:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009238:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800923a:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800923c:	bf28      	it	cs
 800923e:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009242:	f813 8001 	ldrb.w	r8, [r3, r1]
 8009246:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800924a:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800924c:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8009250:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009252:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8009256:	d1f4      	bne.n	8009242 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8009258:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800925c:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800925e:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8009262:	e7c2      	b.n	80091ea <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8009264:	2002      	movs	r0, #2
 8009266:	e7d8      	b.n	800921a <HAL_DSI_LongWrite+0x72>

08009268 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009268:	7c02      	ldrb	r2, [r0, #16]
{
 800926a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800926c:	2a01      	cmp	r2, #1
 800926e:	d00f      	beq.n	8009290 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009270:	6802      	ldr	r2, [r0, #0]
 8009272:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009276:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800927a:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800927e:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009282:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009286:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009288:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800928c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800928e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009290:	2002      	movs	r0, #2
}
 8009292:	4770      	bx	lr

08009294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009298:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800929a:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8009458 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800929e:	4a6c      	ldr	r2, [pc, #432]	@ (8009450 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80092a0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092a2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80092a4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092a6:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80092aa:	43ac      	bics	r4, r5
 80092ac:	f040 80b7 	bne.w	800941e <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092b0:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80092b2:	2703      	movs	r7, #3
 80092b4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092b8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80092bc:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092c0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80092c2:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092c6:	2f01      	cmp	r7, #1
 80092c8:	d834      	bhi.n	8009334 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80092ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80092cc:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80092d0:	68cf      	ldr	r7, [r1, #12]
 80092d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80092d6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80092da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80092dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092de:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092e2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80092e6:	409f      	lsls	r7, r3
 80092e8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80092ec:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80092ee:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092f0:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80092f2:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80092f6:	688f      	ldr	r7, [r1, #8]
 80092f8:	fa07 f70e 	lsl.w	r7, r7, lr
 80092fc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8009300:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009302:	d119      	bne.n	8009338 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8009304:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009308:	f003 0a07 	and.w	sl, r3, #7
 800930c:	f04f 0b0f 	mov.w	fp, #15
 8009310:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8009314:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8009318:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800931c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8009320:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009324:	690f      	ldr	r7, [r1, #16]
 8009326:	fa07 f70a 	lsl.w	r7, r7, sl
 800932a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800932e:	f8c8 7020 	str.w	r7, [r8, #32]
 8009332:	e001      	b.n	8009338 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009334:	2c03      	cmp	r4, #3
 8009336:	d1da      	bne.n	80092ee <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8009338:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800933a:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800933e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009342:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009346:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800934a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800934c:	d067      	beq.n	800941e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800934e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8009352:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009356:	f003 0c03 	and.w	ip, r3, #3
 800935a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800935e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8009362:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009366:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800936a:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800936e:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8009372:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009376:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800937a:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800937e:	9401      	str	r4, [sp, #4]
 8009380:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8009382:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009384:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009388:	4c32      	ldr	r4, [pc, #200]	@ (8009454 <HAL_GPIO_Init+0x1c0>)
 800938a:	42a0      	cmp	r0, r4
 800938c:	d04e      	beq.n	800942c <HAL_GPIO_Init+0x198>
 800938e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009392:	42a0      	cmp	r0, r4
 8009394:	d04c      	beq.n	8009430 <HAL_GPIO_Init+0x19c>
 8009396:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800939a:	42a0      	cmp	r0, r4
 800939c:	d04a      	beq.n	8009434 <HAL_GPIO_Init+0x1a0>
 800939e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093a2:	42a0      	cmp	r0, r4
 80093a4:	d048      	beq.n	8009438 <HAL_GPIO_Init+0x1a4>
 80093a6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093aa:	42a0      	cmp	r0, r4
 80093ac:	d046      	beq.n	800943c <HAL_GPIO_Init+0x1a8>
 80093ae:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093b2:	42a0      	cmp	r0, r4
 80093b4:	d044      	beq.n	8009440 <HAL_GPIO_Init+0x1ac>
 80093b6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093ba:	42a0      	cmp	r0, r4
 80093bc:	d042      	beq.n	8009444 <HAL_GPIO_Init+0x1b0>
 80093be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093c2:	42a0      	cmp	r0, r4
 80093c4:	d040      	beq.n	8009448 <HAL_GPIO_Init+0x1b4>
 80093c6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093ca:	42a0      	cmp	r0, r4
 80093cc:	d03e      	beq.n	800944c <HAL_GPIO_Init+0x1b8>
 80093ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80093d2:	42a0      	cmp	r0, r4
 80093d4:	bf14      	ite	ne
 80093d6:	240a      	movne	r4, #10
 80093d8:	2409      	moveq	r4, #9
 80093da:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80093de:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80093e2:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80093e6:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80093e8:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 80093ec:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80093ee:	bf0c      	ite	eq
 80093f0:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80093f2:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80093f4:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 80093f8:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80093fa:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80093fc:	bf0c      	ite	eq
 80093fe:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8009400:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009402:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8009406:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8009408:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800940a:	bf0c      	ite	eq
 800940c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800940e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009410:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8009412:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8009414:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009416:	bf54      	ite	pl
 8009418:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800941a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800941c:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800941e:	3301      	adds	r3, #1
 8009420:	2b10      	cmp	r3, #16
 8009422:	f47f af3d 	bne.w	80092a0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800942c:	2400      	movs	r4, #0
 800942e:	e7d4      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009430:	2401      	movs	r4, #1
 8009432:	e7d2      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009434:	2402      	movs	r4, #2
 8009436:	e7d0      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009438:	2403      	movs	r4, #3
 800943a:	e7ce      	b.n	80093da <HAL_GPIO_Init+0x146>
 800943c:	2404      	movs	r4, #4
 800943e:	e7cc      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009440:	2405      	movs	r4, #5
 8009442:	e7ca      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009444:	2406      	movs	r4, #6
 8009446:	e7c8      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009448:	2407      	movs	r4, #7
 800944a:	e7c6      	b.n	80093da <HAL_GPIO_Init+0x146>
 800944c:	2408      	movs	r4, #8
 800944e:	e7c4      	b.n	80093da <HAL_GPIO_Init+0x146>
 8009450:	40013c00 	.word	0x40013c00
 8009454:	40020000 	.word	0x40020000
 8009458:	40023800 	.word	0x40023800

0800945c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009460:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009462:	f04f 0a01 	mov.w	sl, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009466:	f04f 080f 	mov.w	r8, #15
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800946a:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800946e:	4c46      	ldr	r4, [pc, #280]	@ (8009588 <HAL_GPIO_DeInit+0x12c>)
    ioposition = ((uint32_t)0x01) << position;
 8009470:	fa0a fc02 	lsl.w	ip, sl, r2
    if(iocurrent == ioposition)
 8009474:	ea3c 0301 	bics.w	r3, ip, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8009478:	ea0c 0601 	and.w	r6, ip, r1
    if(iocurrent == ioposition)
 800947c:	d16c      	bne.n	8009558 <HAL_GPIO_DeInit+0xfc>
      tmp = SYSCFG->EXTICR[position >> 2];
 800947e:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009482:	f002 0703 	and.w	r7, r2, #3
 8009486:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 800948a:	00bf      	lsls	r7, r7, #2
 800948c:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8009490:	fa08 f907 	lsl.w	r9, r8, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 8009494:	68ab      	ldr	r3, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009496:	ea09 0e03 	and.w	lr, r9, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800949a:	4b3c      	ldr	r3, [pc, #240]	@ (800958c <HAL_GPIO_DeInit+0x130>)
 800949c:	4298      	cmp	r0, r3
 800949e:	d060      	beq.n	8009562 <HAL_GPIO_DeInit+0x106>
 80094a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094a4:	4298      	cmp	r0, r3
 80094a6:	d05e      	beq.n	8009566 <HAL_GPIO_DeInit+0x10a>
 80094a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094ac:	4298      	cmp	r0, r3
 80094ae:	d05c      	beq.n	800956a <HAL_GPIO_DeInit+0x10e>
 80094b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094b4:	4298      	cmp	r0, r3
 80094b6:	d05a      	beq.n	800956e <HAL_GPIO_DeInit+0x112>
 80094b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094bc:	4298      	cmp	r0, r3
 80094be:	d058      	beq.n	8009572 <HAL_GPIO_DeInit+0x116>
 80094c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094c4:	4298      	cmp	r0, r3
 80094c6:	d056      	beq.n	8009576 <HAL_GPIO_DeInit+0x11a>
 80094c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094cc:	4298      	cmp	r0, r3
 80094ce:	d054      	beq.n	800957a <HAL_GPIO_DeInit+0x11e>
 80094d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094d4:	4298      	cmp	r0, r3
 80094d6:	d052      	beq.n	800957e <HAL_GPIO_DeInit+0x122>
 80094d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094dc:	4298      	cmp	r0, r3
 80094de:	d050      	beq.n	8009582 <HAL_GPIO_DeInit+0x126>
 80094e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094e4:	4298      	cmp	r0, r3
 80094e6:	bf0c      	ite	eq
 80094e8:	2309      	moveq	r3, #9
 80094ea:	230a      	movne	r3, #10
 80094ec:	40bb      	lsls	r3, r7
 80094ee:	4573      	cmp	r3, lr
 80094f0:	d113      	bne.n	800951a <HAL_GPIO_DeInit+0xbe>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	ea23 0306 	bic.w	r3, r3, r6
 80094f8:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	ea23 0306 	bic.w	r3, r3, r6
 8009500:	6063      	str	r3, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	ea23 0306 	bic.w	r3, r3, r6
 8009508:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	ea23 0306 	bic.w	r3, r3, r6
 8009510:	60a3      	str	r3, [r4, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009512:	68ab      	ldr	r3, [r5, #8]
 8009514:	ea23 0309 	bic.w	r3, r3, r9
 8009518:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800951a:	0053      	lsls	r3, r2, #1
 800951c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800951e:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009520:	fa0b f303 	lsl.w	r3, fp, r3
 8009524:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009528:	ea25 0503 	bic.w	r5, r5, r3
 800952c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800952e:	f002 0507 	and.w	r5, r2, #7
 8009532:	6a37      	ldr	r7, [r6, #32]
 8009534:	00ad      	lsls	r5, r5, #2
 8009536:	fa08 f505 	lsl.w	r5, r8, r5
 800953a:	ea27 0705 	bic.w	r7, r7, r5
 800953e:	6237      	str	r7, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009540:	68c5      	ldr	r5, [r0, #12]
 8009542:	ea25 0503 	bic.w	r5, r5, r3
 8009546:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009548:	6845      	ldr	r5, [r0, #4]
 800954a:	ea25 050c 	bic.w	r5, r5, ip
 800954e:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009550:	6885      	ldr	r5, [r0, #8]
 8009552:	ea25 0303 	bic.w	r3, r5, r3
 8009556:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009558:	3201      	adds	r2, #1
 800955a:	2a10      	cmp	r2, #16
 800955c:	d188      	bne.n	8009470 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009562:	2300      	movs	r3, #0
 8009564:	e7c2      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 8009566:	2301      	movs	r3, #1
 8009568:	e7c0      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 800956a:	2302      	movs	r3, #2
 800956c:	e7be      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 800956e:	2303      	movs	r3, #3
 8009570:	e7bc      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 8009572:	2304      	movs	r3, #4
 8009574:	e7ba      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 8009576:	2305      	movs	r3, #5
 8009578:	e7b8      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 800957a:	2306      	movs	r3, #6
 800957c:	e7b6      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 800957e:	2307      	movs	r3, #7
 8009580:	e7b4      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 8009582:	2308      	movs	r3, #8
 8009584:	e7b2      	b.n	80094ec <HAL_GPIO_DeInit+0x90>
 8009586:	bf00      	nop
 8009588:	40013c00 	.word	0x40013c00
 800958c:	40020000 	.word	0x40020000

08009590 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009590:	6903      	ldr	r3, [r0, #16]
 8009592:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009594:	bf14      	ite	ne
 8009596:	2001      	movne	r0, #1
 8009598:	2000      	moveq	r0, #0
 800959a:	4770      	bx	lr

0800959c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800959c:	b10a      	cbz	r2, 80095a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800959e:	6181      	str	r1, [r0, #24]
  }
}
 80095a0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80095a2:	0409      	lsls	r1, r1, #16
 80095a4:	e7fb      	b.n	800959e <HAL_GPIO_WritePin+0x2>

080095a6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80095a6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80095a8:	ea01 0203 	and.w	r2, r1, r3
 80095ac:	ea21 0103 	bic.w	r1, r1, r3
 80095b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095b4:	6181      	str	r1, [r0, #24]
}
 80095b6:	4770      	bx	lr

080095b8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80095b8:	6803      	ldr	r3, [r0, #0]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	0791      	lsls	r1, r2, #30
 80095be:	d501      	bpl.n	80095c4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80095c0:	2200      	movs	r2, #0
 80095c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095c4:	699a      	ldr	r2, [r3, #24]
 80095c6:	07d2      	lsls	r2, r2, #31
 80095c8:	d403      	bmi.n	80095d2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80095ca:	699a      	ldr	r2, [r3, #24]
 80095cc:	f042 0201 	orr.w	r2, r2, #1
 80095d0:	619a      	str	r2, [r3, #24]
  }
}
 80095d2:	4770      	bx	lr

080095d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80095d4:	b530      	push	{r4, r5, lr}
 80095d6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095d8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095dc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095de:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80095e0:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80095e6:	4a05      	ldr	r2, [pc, #20]	@ (80095fc <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095e8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80095ea:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80095f2:	ea20 0002 	bic.w	r0, r0, r2
 80095f6:	4303      	orrs	r3, r0
 80095f8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095fa:	bd30      	pop	{r4, r5, pc}
 80095fc:	03ff63ff 	.word	0x03ff63ff

08009600 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8009600:	6803      	ldr	r3, [r0, #0]
{
 8009602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8009606:	699c      	ldr	r4, [r3, #24]
{
 8009608:	4605      	mov	r5, r0
 800960a:	460f      	mov	r7, r1
 800960c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800960e:	f014 0410 	ands.w	r4, r4, #16
 8009612:	d06f      	beq.n	80096f4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8009614:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009616:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8009618:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800961a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	0690      	lsls	r0, r2, #26
 8009622:	d461      	bmi.n	80096e8 <I2C_IsErrorOccurred+0xe8>
 8009624:	f1b8 0f00 	cmp.w	r8, #0
 8009628:	d035      	beq.n	8009696 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800962a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800962e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8009630:	682e      	ldr	r6, [r5, #0]
 8009632:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009634:	05d9      	lsls	r1, r3, #23
 8009636:	d505      	bpl.n	8009644 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009638:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800963c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8009640:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009642:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009644:	055a      	lsls	r2, r3, #21
 8009646:	d505      	bpl.n	8009654 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800964c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8009650:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009652:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009654:	059b      	lsls	r3, r3, #22
 8009656:	d54f      	bpl.n	80096f8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009658:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800965c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009660:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8009662:	4628      	mov	r0, r5
 8009664:	f7ff ffa8 	bl	80095b8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009668:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800966a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800966c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8009670:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009674:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800967e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8009680:	4323      	orrs	r3, r4
 8009682:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009684:	2320      	movs	r3, #32
 8009686:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800968a:	2300      	movs	r3, #0
 800968c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8009690:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8009694:	e032      	b.n	80096fc <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8009696:	1c7a      	adds	r2, r7, #1
 8009698:	d0c1      	beq.n	800961e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800969a:	f7fe fbe7 	bl	8007e6c <HAL_GetTick>
 800969e:	1b80      	subs	r0, r0, r6
 80096a0:	42b8      	cmp	r0, r7
 80096a2:	d801      	bhi.n	80096a8 <I2C_IsErrorOccurred+0xa8>
 80096a4:	2f00      	cmp	r7, #0
 80096a6:	d1b9      	bne.n	800961c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80096ac:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80096b0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80096b2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80096b4:	0400      	lsls	r0, r0, #16
 80096b6:	d50a      	bpl.n	80096ce <I2C_IsErrorOccurred+0xce>
 80096b8:	0449      	lsls	r1, r1, #17
 80096ba:	d408      	bmi.n	80096ce <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80096bc:	2a20      	cmp	r2, #32
 80096be:	d006      	beq.n	80096ce <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096c6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80096c8:	f7fe fbd0 	bl	8007e6c <HAL_GetTick>
 80096cc:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	069b      	lsls	r3, r3, #26
 80096d4:	d4a2      	bmi.n	800961c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80096d6:	f7fe fbc9 	bl	8007e6c <HAL_GetTick>
 80096da:	1b80      	subs	r0, r0, r6
 80096dc:	2819      	cmp	r0, #25
 80096de:	d9f6      	bls.n	80096ce <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80096e0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80096e2:	f04f 0801 	mov.w	r8, #1
 80096e6:	e799      	b.n	800961c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80096e8:	f1b8 0f00 	cmp.w	r8, #0
 80096ec:	d19d      	bne.n	800962a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ee:	2220      	movs	r2, #32
 80096f0:	61da      	str	r2, [r3, #28]
 80096f2:	e79a      	b.n	800962a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80096f4:	4620      	mov	r0, r4
 80096f6:	e79b      	b.n	8009630 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d1b2      	bne.n	8009662 <I2C_IsErrorOccurred+0x62>
}
 80096fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009700 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	079b      	lsls	r3, r3, #30
 800970e:	d501      	bpl.n	8009714 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009710:	2000      	movs	r0, #0
 8009712:	e01b      	b.n	800974c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009714:	4632      	mov	r2, r6
 8009716:	4629      	mov	r1, r5
 8009718:	4620      	mov	r0, r4
 800971a:	f7ff ff71 	bl	8009600 <I2C_IsErrorOccurred>
 800971e:	b9a0      	cbnz	r0, 800974a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009720:	1c6a      	adds	r2, r5, #1
 8009722:	d0f1      	beq.n	8009708 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009724:	f7fe fba2 	bl	8007e6c <HAL_GetTick>
 8009728:	1b80      	subs	r0, r0, r6
 800972a:	42a8      	cmp	r0, r5
 800972c:	d801      	bhi.n	8009732 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800972e:	2d00      	cmp	r5, #0
 8009730:	d1ea      	bne.n	8009708 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009732:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009734:	f043 0320 	orr.w	r3, r3, #32
 8009738:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800973a:	2320      	movs	r3, #32
 800973c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009740:	2300      	movs	r3, #0
 8009742:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8009746:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800974a:	2001      	movs	r0, #1
}
 800974c:	bd70      	pop	{r4, r5, r6, pc}

0800974e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800974e:	b570      	push	{r4, r5, r6, lr}
 8009750:	4604      	mov	r4, r0
 8009752:	460d      	mov	r5, r1
 8009754:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	069b      	lsls	r3, r3, #26
 800975c:	d501      	bpl.n	8009762 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800975e:	2000      	movs	r0, #0
 8009760:	e019      	b.n	8009796 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009762:	4632      	mov	r2, r6
 8009764:	4629      	mov	r1, r5
 8009766:	4620      	mov	r0, r4
 8009768:	f7ff ff4a 	bl	8009600 <I2C_IsErrorOccurred>
 800976c:	b990      	cbnz	r0, 8009794 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800976e:	f7fe fb7d 	bl	8007e6c <HAL_GetTick>
 8009772:	1b80      	subs	r0, r0, r6
 8009774:	42a8      	cmp	r0, r5
 8009776:	d801      	bhi.n	800977c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009778:	2d00      	cmp	r5, #0
 800977a:	d1ec      	bne.n	8009756 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800977c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800977e:	f043 0320 	orr.w	r3, r3, #32
 8009782:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009784:	2320      	movs	r3, #32
 8009786:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800978a:	2300      	movs	r3, #0
 800978c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009790:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009794:	2001      	movs	r0, #1
}
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	4604      	mov	r4, r0
 800979c:	460d      	mov	r5, r1
 800979e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	075b      	lsls	r3, r3, #29
 80097a6:	d40e      	bmi.n	80097c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a8:	4632      	mov	r2, r6
 80097aa:	4629      	mov	r1, r5
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7ff ff27 	bl	8009600 <I2C_IsErrorOccurred>
 80097b2:	bb28      	cbnz	r0, 8009800 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	699a      	ldr	r2, [r3, #24]
 80097b8:	0691      	lsls	r1, r2, #26
 80097ba:	d523      	bpl.n	8009804 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	0752      	lsls	r2, r2, #29
 80097c0:	d503      	bpl.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80097c2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80097c4:	b10a      	cbz	r2, 80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80097c6:	2000      	movs	r0, #0
}
 80097c8:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	f012 0210 	ands.w	r2, r2, #16
 80097d0:	d002      	beq.n	80097d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097d2:	2210      	movs	r2, #16
 80097d4:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80097d6:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097d8:	2120      	movs	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097da:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097dc:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80097e4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80097e8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80097ec:	f022 0201 	bic.w	r2, r2, #1
 80097f0:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80097f4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80097fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009800:	2001      	movs	r0, #1
 8009802:	e7e1      	b.n	80097c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009804:	f7fe fb32 	bl	8007e6c <HAL_GetTick>
 8009808:	1b80      	subs	r0, r0, r6
 800980a:	42a8      	cmp	r0, r5
 800980c:	d801      	bhi.n	8009812 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
 800980e:	2d00      	cmp	r5, #0
 8009810:	d1c6      	bne.n	80097a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009812:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009814:	f043 0320 	orr.w	r3, r3, #32
 8009818:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800981a:	2320      	movs	r3, #32
 800981c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_UNLOCK(hi2c);
 8009820:	2300      	movs	r3, #0
 8009822:	e7eb      	b.n	80097fc <I2C_WaitOnRXNEFlagUntilTimeout+0x64>

08009824 <I2C_WaitOnFlagUntilTimeout>:
{
 8009824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	9f06      	ldr	r7, [sp, #24]
 800982a:	4604      	mov	r4, r0
 800982c:	4688      	mov	r8, r1
 800982e:	4616      	mov	r6, r2
 8009830:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009832:	6822      	ldr	r2, [r4, #0]
 8009834:	6993      	ldr	r3, [r2, #24]
 8009836:	ea38 0303 	bics.w	r3, r8, r3
 800983a:	bf0c      	ite	eq
 800983c:	2301      	moveq	r3, #1
 800983e:	2300      	movne	r3, #0
 8009840:	42b3      	cmp	r3, r6
 8009842:	d001      	beq.n	8009848 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8009844:	2000      	movs	r0, #0
 8009846:	e015      	b.n	8009874 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8009848:	1c6b      	adds	r3, r5, #1
 800984a:	d0f3      	beq.n	8009834 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800984c:	f7fe fb0e 	bl	8007e6c <HAL_GetTick>
 8009850:	1bc0      	subs	r0, r0, r7
 8009852:	42a8      	cmp	r0, r5
 8009854:	d801      	bhi.n	800985a <I2C_WaitOnFlagUntilTimeout+0x36>
 8009856:	2d00      	cmp	r5, #0
 8009858:	d1eb      	bne.n	8009832 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800985a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800985c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800985e:	f043 0320 	orr.w	r3, r3, #32
 8009862:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009864:	2320      	movs	r3, #32
 8009866:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800986a:	2300      	movs	r3, #0
 800986c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8009870:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009878 <HAL_I2C_Init>:
{
 8009878:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800987a:	4604      	mov	r4, r0
 800987c:	2800      	cmp	r0, #0
 800987e:	d04a      	beq.n	8009916 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009880:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009884:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009888:	b91b      	cbnz	r3, 8009892 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800988a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800988e:	f7fb f9d3 	bl	8004c38 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009892:	2324      	movs	r3, #36	@ 0x24
 8009894:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80098a2:	6862      	ldr	r2, [r4, #4]
 80098a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80098a8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098b0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80098b2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098b6:	2901      	cmp	r1, #1
 80098b8:	d124      	bne.n	8009904 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80098ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098be:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098c0:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098c2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098c4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80098c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098cc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098d6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80098da:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80098dc:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80098e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80098e4:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80098e8:	430a      	orrs	r2, r1
 80098ea:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80098f4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80098f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80098fc:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098fe:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009902:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009904:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009908:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800990a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800990c:	d1d8      	bne.n	80098c0 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800990e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009912:	605a      	str	r2, [r3, #4]
 8009914:	e7d4      	b.n	80098c0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8009916:	2001      	movs	r0, #1
 8009918:	e7f3      	b.n	8009902 <HAL_I2C_Init+0x8a>

0800991a <HAL_I2C_DeInit>:
{
 800991a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800991c:	4604      	mov	r4, r0
 800991e:	b198      	cbz	r0, 8009948 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8009920:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009922:	2324      	movs	r3, #36	@ 0x24
 8009924:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009928:	6813      	ldr	r3, [r2, #0]
 800992a:	f023 0301 	bic.w	r3, r3, #1
 800992e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8009930:	f7fb fa16 	bl	8004d60 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009934:	2000      	movs	r0, #0
 8009936:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8009938:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800993c:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009940:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009942:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009946:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009948:	2001      	movs	r0, #1
 800994a:	e7fc      	b.n	8009946 <HAL_I2C_DeInit+0x2c>

0800994c <HAL_I2C_Master_Transmit>:
{
 800994c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009952:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009956:	4604      	mov	r4, r0
 8009958:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800995a:	2b20      	cmp	r3, #32
{
 800995c:	4691      	mov	r9, r2
 800995e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009960:	f040 8086 	bne.w	8009a70 <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8009964:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009968:	2b01      	cmp	r3, #1
 800996a:	f000 8081 	beq.w	8009a70 <HAL_I2C_Master_Transmit+0x124>
 800996e:	f04f 0a01 	mov.w	sl, #1
 8009972:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009976:	f7fe fa79 	bl	8007e6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800997a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800997c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800997e:	9000      	str	r0, [sp, #0]
 8009980:	4652      	mov	r2, sl
 8009982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff ff4c 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 800998c:	b118      	cbz	r0, 8009996 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 800998e:	2001      	movs	r0, #1
}
 8009990:	b002      	add	sp, #8
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009996:	2321      	movs	r3, #33	@ 0x21
    hi2c->pBuffPtr  = pData;
 8009998:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 800999c:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800999e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80099a2:	2310      	movs	r3, #16
 80099a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099a8:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80099aa:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	2bff      	cmp	r3, #255	@ 0xff
 80099b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009a74 <HAL_I2C_Master_Transmit+0x128>)
 80099b6:	d926      	bls.n	8009a06 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099b8:	22ff      	movs	r2, #255	@ 0xff
 80099ba:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099bc:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099c2:	4631      	mov	r1, r6
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7ff fe05 	bl	80095d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099cc:	462a      	mov	r2, r5
 80099ce:	4639      	mov	r1, r7
 80099d0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	b9fb      	cbnz	r3, 8009a16 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099d6:	f7ff feba 	bl	800974e <I2C_WaitOnSTOPFlagUntilTimeout>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d1d7      	bne.n	800998e <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	2120      	movs	r1, #32
 80099e2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80099ea:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80099ee:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80099f2:	f022 0201 	bic.w	r2, r2, #1
 80099f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80099f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80099fc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a00:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009a04:	e7c4      	b.n	8009990 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009a06:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009a08:	b292      	uxth	r2, r2
 8009a0a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a0c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	e7d5      	b.n	80099c2 <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a16:	f7ff fe73 	bl	8009700 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1b7      	bne.n	800998e <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a20:	6822      	ldr	r2, [r4, #0]
 8009a22:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009a26:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009a28:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009a2a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a2c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009a2e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009a30:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009a32:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009a34:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009a36:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a3a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0c3      	beq.n	80099ca <HAL_I2C_Master_Transmit+0x7e>
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	d1c1      	bne.n	80099ca <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a46:	463b      	mov	r3, r7
 8009a48:	2180      	movs	r1, #128	@ 0x80
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	9500      	str	r5, [sp, #0]
 8009a4e:	f7ff fee9 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d19b      	bne.n	800998e <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2bff      	cmp	r3, #255	@ 0xff
 8009a5c:	d903      	bls.n	8009a66 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a5e:	22ff      	movs	r2, #255	@ 0xff
 8009a60:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a62:	9000      	str	r0, [sp, #0]
 8009a64:	e7ab      	b.n	80099be <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009a66:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009a68:	b292      	uxth	r2, r2
 8009a6a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a6c:	9000      	str	r0, [sp, #0]
 8009a6e:	e7ce      	b.n	8009a0e <HAL_I2C_Master_Transmit+0xc2>
    __HAL_LOCK(hi2c);
 8009a70:	2002      	movs	r0, #2
 8009a72:	e78d      	b.n	8009990 <HAL_I2C_Master_Transmit+0x44>
 8009a74:	80002000 	.word	0x80002000

08009a78 <HAL_I2C_Master_Receive>:
{
 8009a78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a7c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a7e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009a82:	4604      	mov	r4, r0
 8009a84:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a86:	2b20      	cmp	r3, #32
{
 8009a88:	4691      	mov	r9, r2
 8009a8a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a8c:	f040 8087 	bne.w	8009b9e <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8009a90:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	f000 8082 	beq.w	8009b9e <HAL_I2C_Master_Receive+0x126>
 8009a9a:	f04f 0a01 	mov.w	sl, #1
 8009a9e:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009aa2:	f7fe f9e3 	bl	8007e6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009aa6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009aa8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009aaa:	9000      	str	r0, [sp, #0]
 8009aac:	4652      	mov	r2, sl
 8009aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff feb6 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009ab8:	b118      	cbz	r0, 8009ac2 <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8009aba:	2001      	movs	r0, #1
}
 8009abc:	b002      	add	sp, #8
 8009abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ac2:	2322      	movs	r3, #34	@ 0x22
    hi2c->pBuffPtr  = pData;
 8009ac4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 8009ac8:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009aca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009ace:	2310      	movs	r3, #16
 8009ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ad4:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8009ad6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ada:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	2bff      	cmp	r3, #255	@ 0xff
 8009ae0:	4b30      	ldr	r3, [pc, #192]	@ (8009ba4 <HAL_I2C_Master_Receive+0x12c>)
 8009ae2:	d926      	bls.n	8009b32 <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ae4:	22ff      	movs	r2, #255	@ 0xff
 8009ae6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ae8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009aea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009aee:	4631      	mov	r1, r6
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7ff fd6f 	bl	80095d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009af6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af8:	462a      	mov	r2, r5
 8009afa:	4639      	mov	r1, r7
 8009afc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	b9fb      	cbnz	r3, 8009b42 <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b02:	f7ff fe24 	bl	800974e <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d1d7      	bne.n	8009aba <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	2120      	movs	r1, #32
 8009b0e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009b16:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009b1a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009b1e:	f022 0201 	bic.w	r2, r2, #1
 8009b22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009b24:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009b28:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b2c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009b30:	e7c4      	b.n	8009abc <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8009b32:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009b34:	b292      	uxth	r2, r2
 8009b36:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b38:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	e7d5      	b.n	8009aee <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b42:	f7ff fe29 	bl	8009798 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d1b7      	bne.n	8009aba <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b50:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009b52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009b54:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009b56:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009b58:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009b5a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009b5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009b5e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009b60:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009b62:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b68:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0c2      	beq.n	8009af6 <HAL_I2C_Master_Receive+0x7e>
 8009b70:	2a00      	cmp	r2, #0
 8009b72:	d1c0      	bne.n	8009af6 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b74:	463b      	mov	r3, r7
 8009b76:	2180      	movs	r1, #128	@ 0x80
 8009b78:	4620      	mov	r0, r4
 8009b7a:	9500      	str	r5, [sp, #0]
 8009b7c:	f7ff fe52 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d19a      	bne.n	8009aba <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	2bff      	cmp	r3, #255	@ 0xff
 8009b8a:	d903      	bls.n	8009b94 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b8c:	22ff      	movs	r2, #255	@ 0xff
 8009b8e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b90:	9000      	str	r0, [sp, #0]
 8009b92:	e7aa      	b.n	8009aea <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8009b94:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009b96:	b292      	uxth	r2, r2
 8009b98:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b9a:	9000      	str	r0, [sp, #0]
 8009b9c:	e7cd      	b.n	8009b3a <HAL_I2C_Master_Receive+0xc2>
    __HAL_LOCK(hi2c);
 8009b9e:	2002      	movs	r0, #2
 8009ba0:	e78c      	b.n	8009abc <HAL_I2C_Master_Receive+0x44>
 8009ba2:	bf00      	nop
 8009ba4:	80002400 	.word	0x80002400

08009ba8 <HAL_I2C_Mem_Write>:
{
 8009ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bae:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bb6:	2b20      	cmp	r3, #32
{
 8009bb8:	4616      	mov	r6, r2
 8009bba:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009bbe:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bc2:	f040 80c6 	bne.w	8009d52 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bc8:	b113      	cbz	r3, 8009bd0 <HAL_I2C_Mem_Write+0x28>
 8009bca:	f1ba 0f00 	cmp.w	sl, #0
 8009bce:	d106      	bne.n	8009bde <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009bd6:	2001      	movs	r0, #1
}
 8009bd8:	b003      	add	sp, #12
 8009bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009bde:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	f000 80b5 	beq.w	8009d52 <HAL_I2C_Mem_Write+0x1aa>
 8009be8:	f04f 0b01 	mov.w	fp, #1
 8009bec:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009bf0:	f7fe f93c 	bl	8007e6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bf4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009bf6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bf8:	9000      	str	r0, [sp, #0]
 8009bfa:	465a      	mov	r2, fp
 8009bfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7ff fe0f 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d1e5      	bne.n	8009bd6 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c0a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8009c0c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c0e:	fa5f f289 	uxtb.w	r2, r9
 8009c12:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c14:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c18:	2340      	movs	r3, #64	@ 0x40
 8009c1a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c20:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c22:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009c24:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c26:	4b4c      	ldr	r3, [pc, #304]	@ (8009d58 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009c28:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c32:	f7ff fccf 	bl	80095d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c36:	462a      	mov	r2, r5
 8009c38:	4641      	mov	r1, r8
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f7ff fd60 	bl	8009700 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c40:	bb18      	cbnz	r0, 8009c8a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c42:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c46:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c48:	d115      	bne.n	8009c76 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c4a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2180      	movs	r1, #128	@ 0x80
 8009c50:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c52:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c54:	4643      	mov	r3, r8
 8009c56:	9500      	str	r5, [sp, #0]
 8009c58:	f7ff fde4 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009c5c:	b9a8      	cbnz	r0, 8009c8a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2bff      	cmp	r3, #255	@ 0xff
 8009c64:	d815      	bhi.n	8009c92 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009c66:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8009c6c:	b292      	uxth	r2, r2
 8009c6e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	9000      	str	r0, [sp, #0]
 8009c74:	e012      	b.n	8009c9c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c76:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c7e:	462a      	mov	r2, r5
 8009c80:	f7ff fd3e 	bl	8009700 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c84:	b908      	cbnz	r0, 8009c8a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	e7df      	b.n	8009c4a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009c90:	e7a1      	b.n	8009bd6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c92:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c98:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c9a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff fc98 	bl	80095d4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ca4:	462a      	mov	r2, r5
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7ff fd29 	bl	8009700 <I2C_WaitOnTXISFlagUntilTimeout>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d191      	bne.n	8009bd6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009cb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009cb4:	6822      	ldr	r2, [r4, #0]
 8009cb6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009cba:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009cbc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009cbe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009cc0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009cc2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009cc4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009cc6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009cc8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009cca:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ccc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009cce:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	b1b3      	cbz	r3, 8009d02 <HAL_I2C_Mem_Write+0x15a>
 8009cd4:	b9aa      	cbnz	r2, 8009d02 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009cd6:	4643      	mov	r3, r8
 8009cd8:	2180      	movs	r1, #128	@ 0x80
 8009cda:	4620      	mov	r0, r4
 8009cdc:	9500      	str	r5, [sp, #0]
 8009cde:	f7ff fda1 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f47f af77 	bne.w	8009bd6 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ce8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	2bff      	cmp	r3, #255	@ 0xff
 8009cee:	d928      	bls.n	8009d42 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cf0:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009cf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cf6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009cf8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff fc69 	bl	80095d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009d02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1cc      	bne.n	8009ca4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4641      	mov	r1, r8
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff fd1d 	bl	800974e <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f47f af5e 	bne.w	8009bd6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	2120      	movs	r1, #32
 8009d1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009d26:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009d2a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009d2e:	f022 0201 	bic.w	r2, r2, #1
 8009d32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009d34:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009d38:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d3c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009d40:	e74a      	b.n	8009bd8 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009d42:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009d48:	b292      	uxth	r2, r2
 8009d4a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	9000      	str	r0, [sp, #0]
 8009d50:	e7d3      	b.n	8009cfa <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8009d52:	2002      	movs	r0, #2
 8009d54:	e740      	b.n	8009bd8 <HAL_I2C_Mem_Write+0x30>
 8009d56:	bf00      	nop
 8009d58:	80002000 	.word	0x80002000

08009d5c <HAL_I2C_Mem_Read>:
{
 8009d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d62:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009d66:	4604      	mov	r4, r0
 8009d68:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d6a:	2b20      	cmp	r3, #32
{
 8009d6c:	4616      	mov	r6, r2
 8009d6e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009d72:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d76:	f040 80c9 	bne.w	8009f0c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8009d7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d7c:	b113      	cbz	r3, 8009d84 <HAL_I2C_Mem_Read+0x28>
 8009d7e:	f1ba 0f00 	cmp.w	sl, #0
 8009d82:	d106      	bne.n	8009d92 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d88:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009d8a:	2001      	movs	r0, #1
}
 8009d8c:	b003      	add	sp, #12
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009d92:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	f000 80b8 	beq.w	8009f0c <HAL_I2C_Mem_Read+0x1b0>
 8009d9c:	f04f 0b01 	mov.w	fp, #1
 8009da0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009da4:	f7fe f862 	bl	8007e6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009da8:	2319      	movs	r3, #25
 8009daa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009dac:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009dae:	465a      	mov	r2, fp
 8009db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7ff fd35 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d1e4      	bne.n	8009d8a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009dc0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8009dc2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009dc4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009dc6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009dca:	2240      	movs	r2, #64	@ 0x40
 8009dcc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009dd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dd2:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009dd4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009dd6:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8009f10 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009dda:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009dde:	9200      	str	r2, [sp, #0]
 8009de0:	fa5f f289 	uxtb.w	r2, r9
 8009de4:	f7ff fbf6 	bl	80095d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009de8:	462a      	mov	r2, r5
 8009dea:	4641      	mov	r1, r8
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff fc87 	bl	8009700 <I2C_WaitOnTXISFlagUntilTimeout>
 8009df2:	bb20      	cbnz	r0, 8009e3e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009df4:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009df8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dfa:	d116      	bne.n	8009e2a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dfc:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2140      	movs	r1, #64	@ 0x40
 8009e02:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e04:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e06:	4643      	mov	r3, r8
 8009e08:	9500      	str	r5, [sp, #0]
 8009e0a:	f7ff fd0b 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009e0e:	b9b0      	cbnz	r0, 8009e3e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2bff      	cmp	r3, #255	@ 0xff
 8009e16:	4b3f      	ldr	r3, [pc, #252]	@ (8009f14 <HAL_I2C_Mem_Read+0x1b8>)
 8009e18:	d815      	bhi.n	8009e46 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009e1a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009e1c:	b292      	uxth	r2, r2
 8009e1e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e28:	e012      	b.n	8009e50 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e2a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e32:	462a      	mov	r2, r5
 8009e34:	f7ff fc64 	bl	8009700 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e38:	b908      	cbnz	r0, 8009e3e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	e7de      	b.n	8009dfc <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009e44:	e7a1      	b.n	8009d8a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e46:	22ff      	movs	r2, #255	@ 0xff
 8009e48:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e50:	4639      	mov	r1, r7
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff fbbe 	bl	80095d4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009e58:	4643      	mov	r3, r8
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	4620      	mov	r0, r4
 8009e60:	9500      	str	r5, [sp, #0]
 8009e62:	f7ff fcdf 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d18f      	bne.n	8009d8a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e70:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009e72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009e74:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009e76:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009e78:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009e7a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009e7c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009e7e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009e80:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009e82:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e88:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	b1b3      	cbz	r3, 8009ebc <HAL_I2C_Mem_Read+0x160>
 8009e8e:	b9aa      	cbnz	r2, 8009ebc <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e90:	4643      	mov	r3, r8
 8009e92:	2180      	movs	r1, #128	@ 0x80
 8009e94:	4620      	mov	r0, r4
 8009e96:	9500      	str	r5, [sp, #0]
 8009e98:	f7ff fcc4 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f47f af74 	bne.w	8009d8a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ea2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2bff      	cmp	r3, #255	@ 0xff
 8009ea8:	d928      	bls.n	8009efc <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eaa:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eb0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009eb2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f7ff fb8c 	bl	80095d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009ebc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1c9      	bne.n	8009e58 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4641      	mov	r1, r8
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f7ff fc40 	bl	800974e <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f47f af5b 	bne.w	8009d8a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	2120      	movs	r1, #32
 8009ed8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009ee0:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009ee4:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009ee8:	f022 0201 	bic.w	r2, r2, #1
 8009eec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009eee:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009ef2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ef6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009efa:	e747      	b.n	8009d8c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009efc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009efe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009f02:	b292      	uxth	r2, r2
 8009f04:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	9000      	str	r0, [sp, #0]
 8009f0a:	e7d3      	b.n	8009eb4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8009f0c:	2002      	movs	r0, #2
 8009f0e:	e73d      	b.n	8009d8c <HAL_I2C_Mem_Read+0x30>
 8009f10:	80002000 	.word	0x80002000
 8009f14:	80002400 	.word	0x80002400

08009f18 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009f18:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8009f1a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009f1c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009f1e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8009f20:	b103      	cbz	r3, 8009f24 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8009f22:	4718      	bx	r3
}
 8009f24:	4770      	bx	lr

08009f26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f26:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f28:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009f2c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2e:	2a20      	cmp	r2, #32
 8009f30:	b2d4      	uxtb	r4, r2
 8009f32:	d11c      	bne.n	8009f6e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f34:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009f38:	2a01      	cmp	r2, #1
 8009f3a:	d018      	beq.n	8009f6e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f3c:	2224      	movs	r2, #36	@ 0x24
 8009f3e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f42:	6802      	ldr	r2, [r0, #0]
 8009f44:	6810      	ldr	r0, [r2, #0]
 8009f46:	f020 0001 	bic.w	r0, r0, #1
 8009f4a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f4c:	6810      	ldr	r0, [r2, #0]
 8009f4e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8009f52:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f54:	6810      	ldr	r0, [r2, #0]
 8009f56:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f58:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f5a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009f5c:	6811      	ldr	r1, [r2, #0]
 8009f5e:	f041 0101 	orr.w	r1, r1, #1
 8009f62:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f64:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009f68:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009f6c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009f6e:	2002      	movs	r0, #2
 8009f70:	e7fc      	b.n	8009f6c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009f72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f72:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f74:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009f78:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f7a:	2a20      	cmp	r2, #32
 8009f7c:	b2d4      	uxtb	r4, r2
 8009f7e:	d11b      	bne.n	8009fb8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f80:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009f84:	2a01      	cmp	r2, #1
 8009f86:	d017      	beq.n	8009fb8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f88:	2224      	movs	r2, #36	@ 0x24
 8009f8a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f8e:	6802      	ldr	r2, [r0, #0]
 8009f90:	6810      	ldr	r0, [r2, #0]
 8009f92:	f020 0001 	bic.w	r0, r0, #1
 8009f96:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f98:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f9a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f9e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8009fa4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009fa6:	6811      	ldr	r1, [r2, #0]
 8009fa8:	f041 0101 	orr.w	r1, r1, #1
 8009fac:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009fae:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009fb2:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009fb6:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009fb8:	2002      	movs	r0, #2
 8009fba:	e7fc      	b.n	8009fb6 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009fbc <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009fbc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8009fbe:	2401      	movs	r4, #1
 8009fc0:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	194e      	adds	r6, r1, r5
 8009fc6:	443d      	add	r5, r7
 8009fc8:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8009fca:	42be      	cmp	r6, r7
 8009fcc:	d112      	bne.n	8009ff4 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8009fce:	2c10      	cmp	r4, #16
 8009fd0:	d108      	bne.n	8009fe4 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8009fd2:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009fd4:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8009fd6:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8009fd8:	601d      	str	r5, [r3, #0]
  p = 0;
 8009fda:	4623      	mov	r3, r4
  si = Huffsize[0];
 8009fdc:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8009fde:	5cc8      	ldrb	r0, [r1, r3]
 8009fe0:	b9d8      	cbnz	r0, 800a01a <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8009fe4:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	19ee      	adds	r6, r5, r7
 8009fea:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8009fee:	d9e9      	bls.n	8009fc4 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	e7f6      	b.n	8009fe2 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8009ff4:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8009ff8:	e7e7      	b.n	8009fca <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8009ffa:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8009ffe:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800a000:	5cc8      	ldrb	r0, [r1, r3]
 800a002:	19dc      	adds	r4, r3, r7
 800a004:	42a8      	cmp	r0, r5
 800a006:	d0f8      	beq.n	8009ffa <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800a008:	2d1f      	cmp	r5, #31
 800a00a:	d8f1      	bhi.n	8009ff0 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a00c:	fa06 f005 	lsl.w	r0, r6, r5
 800a010:	42a0      	cmp	r0, r4
 800a012:	d9ed      	bls.n	8009ff0 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800a014:	0064      	lsls	r4, r4, #1
    si++;
 800a016:	3501      	adds	r5, #1
 800a018:	e7e1      	b.n	8009fde <JPEG_Bits_To_SizeCodes+0x22>
 800a01a:	1ae7      	subs	r7, r4, r3
 800a01c:	e7f0      	b.n	800a000 <JPEG_Bits_To_SizeCodes+0x44>

0800a01e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a01e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a020:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800a024:	460d      	mov	r5, r1
 800a026:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a028:	ab01      	add	r3, sp, #4
 800a02a:	aa43      	add	r2, sp, #268	@ 0x10c
 800a02c:	a902      	add	r1, sp, #8
 800a02e:	f7ff ffc5 	bl	8009fbc <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a032:	b938      	cbnz	r0, 800a044 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800a034:	9e01      	ldr	r6, [sp, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	f104 010f 	add.w	r1, r4, #15
 800a03c:	360f      	adds	r6, #15
 800a03e:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800a040:	42a1      	cmp	r1, r4
 800a042:	d102      	bne.n	800a04a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a044:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800a048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800a04a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a04e:	2e0b      	cmp	r6, #11
 800a050:	d80a      	bhi.n	800a068 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a052:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a056:	f852 cb04 	ldr.w	ip, [r2], #4
 800a05a:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a05e:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a062:	3f01      	subs	r7, #1
 800a064:	55af      	strb	r7, [r5, r6]
      k++;
 800a066:	e7eb      	b.n	800a040 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a068:	2001      	movs	r0, #1
 800a06a:	e7eb      	b.n	800a044 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a06c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a06c:	4603      	mov	r3, r0
 800a06e:	4608      	mov	r0, r1
 800a070:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a072:	681c      	ldr	r4, [r3, #0]
{
 800a074:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a076:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d125      	bne.n	800a0ca <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a07e:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a082:	a901      	add	r1, sp, #4
 800a084:	f7ff ffcb 	bl	800a01e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a088:	b9e8      	cbnz	r0, 800a0c6 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a08a:	aa01      	add	r2, sp, #4
 800a08c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a090:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a094:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a096:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a098:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a09a:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800a09c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a09e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800a0a2:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a0a4:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a0a6:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a0aa:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800a0ae:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a0b0:	7b13      	ldrb	r3, [r2, #12]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a0b8:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a0ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a0be:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a0c2:	42b4      	cmp	r4, r6
 800a0c4:	d1e9      	bne.n	800a09a <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a0c6:	b011      	add	sp, #68	@ 0x44
 800a0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a0ca:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d102      	bne.n	800a0d8 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a0d2:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800a0d6:	e7d4      	b.n	800a082 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a0d8:	2001      	movs	r0, #1
 800a0da:	e7f4      	b.n	800a0c6 <JPEG_Set_HuffDC_Mem+0x5a>

0800a0dc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a0e0:	6804      	ldr	r4, [r0, #0]
{
 800a0e2:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800a0e6:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a0e8:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d149      	bne.n	800a184 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a0f0:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a0f4:	466b      	mov	r3, sp
 800a0f6:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800a0fa:	a901      	add	r1, sp, #4
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff ff5d 	bl	8009fbc <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a102:	2800      	cmp	r0, #0
 800a104:	d13a      	bne.n	800a17c <JPEG_Set_HuffAC_Mem+0xa0>
 800a106:	9b00      	ldr	r3, [sp, #0]
 800a108:	460d      	mov	r5, r1
 800a10a:	f106 0c0f 	add.w	ip, r6, #15
 800a10e:	4617      	mov	r7, r2
 800a110:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a112:	f04f 0e0a 	mov.w	lr, #10
 800a116:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a118:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800a11a:	4561      	cmp	r1, ip
 800a11c:	d139      	bne.n	800a192 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a11e:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a122:	a942      	add	r1, sp, #264	@ 0x108
 800a124:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800a128:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a12a:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a12c:	6063      	str	r3, [r4, #4]
 800a12e:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a130:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800a134:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800a138:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a13a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a13e:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a140:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a144:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a146:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a14a:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a14c:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800a150:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a152:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800a156:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a158:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a15a:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a15e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a162:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a164:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a16e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a174:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a178:	42b4      	cmp	r4, r6
 800a17a:	d1e7      	bne.n	800a14c <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a17c:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a184:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800a188:	429a      	cmp	r2, r3
 800a18a:	d10f      	bne.n	800a1ac <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a18c:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800a190:	e7b0      	b.n	800a0f4 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a192:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800a196:	b15b      	cbz	r3, 800a1b0 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a198:	2bf0      	cmp	r3, #240	@ 0xf0
 800a19a:	d015      	beq.n	800a1c8 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800a19c:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800a19e:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a1a8:	2ba1      	cmp	r3, #161	@ 0xa1
 800a1aa:	d902      	bls.n	800a1b2 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	e7e5      	b.n	800a17c <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800a1b0:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a1b2:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800a1b6:	f857 8b04 	ldr.w	r8, [r7], #4
 800a1ba:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a1be:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a1c2:	3a01      	subs	r2, #1
 800a1c4:	54f2      	strb	r2, [r6, r3]
      k++;
 800a1c6:	e7a8      	b.n	800a11a <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800a1c8:	23a1      	movs	r3, #161	@ 0xa1
 800a1ca:	e7f2      	b.n	800a1b2 <JPEG_Set_HuffAC_Mem+0xd6>

0800a1cc <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a1cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a1ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a1d2:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1d4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a1d6:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1d8:	f002 0203 	and.w	r2, r2, #3
 800a1dc:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	bf0c      	ite	eq
 800a1e2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a1e6:	f022 0208 	bicne.w	r2, r2, #8
 800a1ea:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	f022 0201 	bic.w	r2, r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a1f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a1fa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a1fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1fe:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800a202:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a206:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a20a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a20c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a20e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a212:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a216:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a21a:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a224:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a226:	f002 020c 	and.w	r2, r2, #12
 800a22a:	2a08      	cmp	r2, #8
 800a22c:	d104      	bne.n	800a238 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a22e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a230:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a234:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a236:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a238:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a23a:	f002 020c 	and.w	r2, r2, #12
 800a23e:	2a0c      	cmp	r2, #12
 800a240:	d1f9      	bne.n	800a236 <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a242:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a244:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a248:	e7f4      	b.n	800a234 <JPEG_Init_Process+0x68>
	...

0800a24c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a24e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800a250:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800a252:	2b03      	cmp	r3, #3
 800a254:	d927      	bls.n	800a2a6 <JPEG_DMA_StartProcess+0x5a>
 800a256:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a258:	2903      	cmp	r1, #3
 800a25a:	d924      	bls.n	800a2a6 <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a25c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a25e:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a262:	4d1a      	ldr	r5, [pc, #104]	@ (800a2cc <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a264:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a26c:	4e18      	ldr	r6, [pc, #96]	@ (800a2d0 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a26e:	4f19      	ldr	r7, [pc, #100]	@ (800a2d4 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800a270:	6542      	str	r2, [r0, #84]	@ 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a272:	6802      	ldr	r2, [r0, #0]
 800a274:	6b10      	ldr	r0, [r2, #48]	@ 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a276:	3240      	adds	r2, #64	@ 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800a278:	f420 50c0 	bic.w	r0, r0, #6144	@ 0x1800
 800a27c:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800a280:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a282:	63c5      	str	r5, [r0, #60]	@ 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a284:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800a286:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800a288:	64ee      	str	r6, [r5, #76]	@ 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a28a:	4e13      	ldr	r6, [pc, #76]	@ (800a2d8 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800a28c:	63ef      	str	r7, [r5, #60]	@ 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800a28e:	652e      	str	r6, [r5, #80]	@ 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a290:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a292:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800a294:	62e1      	str	r1, [r4, #44]	@ 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a296:	69a1      	ldr	r1, [r4, #24]
 800a298:	f7fe fa0a 	bl	80086b0 <HAL_DMA_Start_IT>
 800a29c:	b128      	cbz	r0, 800a2aa <JPEG_DMA_StartProcess+0x5e>
                       hjpeg->InDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a29e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a2a0:	f043 0304 	orr.w	r3, r3, #4
 800a2a4:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a2a6:	2001      	movs	r0, #1

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);

  return HAL_OK;
}
 800a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a2aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a2ac:	6821      	ldr	r1, [r4, #0]
 800a2ae:	089b      	lsrs	r3, r3, #2
 800a2b0:	69e2      	ldr	r2, [r4, #28]
 800a2b2:	3144      	adds	r1, #68	@ 0x44
 800a2b4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a2b6:	f7fe f9fb 	bl	80086b0 <HAL_DMA_Start_IT>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d1ef      	bne.n	800a29e <JPEG_DMA_StartProcess+0x52>
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a2c2:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 800a2c6:	6313      	str	r3, [r2, #48]	@ 0x30
  return HAL_OK;
 800a2c8:	e7ee      	b.n	800a2a8 <JPEG_DMA_StartProcess+0x5c>
 800a2ca:	bf00      	nop
 800a2cc:	0800a839 	.word	0x0800a839
 800a2d0:	0800a71d 	.word	0x0800a71d
 800a2d4:	0800acf1 	.word	0x0800acf1
 800a2d8:	0800ace1 	.word	0x0800ace1

0800a2dc <HAL_JPEG_Init>:
{
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a2de:	4605      	mov	r5, r0
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	f000 80f6 	beq.w	800a4d2 <HAL_JPEG_Init+0x1f6>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a2e6:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800a2ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a2ee:	b91b      	cbnz	r3, 800a2f8 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a2f0:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a2f4:	f7fa fd6c 	bl	8004dd0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a2f8:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	4a88      	ldr	r2, [pc, #544]	@ (800a520 <HAL_JPEG_Init+0x244>)
 800a2fe:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a302:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a306:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a308:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800a30c:	f043 0301 	orr.w	r3, r3, #1
 800a310:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	f023 0301 	bic.w	r3, r3, #1
 800a318:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a31a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a31c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a320:	6323      	str	r3, [r4, #48]	@ 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a322:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a324:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800a328:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a32a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a32c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a330:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a332:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a338:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a33a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a33c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a340:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a342:	4b78      	ldr	r3, [pc, #480]	@ (800a524 <HAL_JPEG_Init+0x248>)
 800a344:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a346:	4b78      	ldr	r3, [pc, #480]	@ (800a528 <HAL_JPEG_Init+0x24c>)
 800a348:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800a34a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a34c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a350:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800a352:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a354:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a356:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a358:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a35c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a35e:	4333      	orrs	r3, r6
 800a360:	7c56      	ldrb	r6, [r2, #17]
 800a362:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a366:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a36a:	4281      	cmp	r1, r0
 800a36c:	d1f0      	bne.n	800a350 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a36e:	4b6f      	ldr	r3, [pc, #444]	@ (800a52c <HAL_JPEG_Init+0x250>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a370:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800a374:	4a6e      	ldr	r2, [pc, #440]	@ (800a530 <HAL_JPEG_Init+0x254>)
 800a376:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a37a:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800a37e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a382:	4610      	mov	r0, r2
 800a384:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a386:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800a38a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a38e:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a392:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800a394:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a396:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a39a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a39c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a3a0:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a3a4:	ea43 030c 	orr.w	r3, r3, ip
 800a3a8:	f890 c011 	ldrb.w	ip, [r0, #17]
 800a3ac:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a3b0:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a3b4:	42be      	cmp	r6, r7
 800a3b6:	d1ec      	bne.n	800a392 <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 800a3b8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a3bc:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800a3c0:	0c1b      	lsrs	r3, r3, #16
 800a3c2:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a3c4:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800a3c8:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800a3cc:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a3d0:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800a3d4:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3d6:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a3da:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3dc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a3e0:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a3e4:	4333      	orrs	r3, r6
 800a3e6:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800a3ea:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a3ee:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a3f2:	4281      	cmp	r1, r0
 800a3f4:	d1ec      	bne.n	800a3d0 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800a3f6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800a3fa:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800a3fe:	4a4d      	ldr	r2, [pc, #308]	@ (800a534 <HAL_JPEG_Init+0x258>)
 800a400:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800a404:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a406:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800a40a:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800a40e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a412:	4013      	ands	r3, r2
  *address = value;
 800a414:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a418:	2301      	movs	r3, #1
 800a41a:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800a41e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800a422:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800a426:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800a42a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a42e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a434:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800a438:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a43c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a43e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800a442:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800a446:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a44a:	4b3b      	ldr	r3, [pc, #236]	@ (800a538 <HAL_JPEG_Init+0x25c>)
 800a44c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800a450:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a454:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800a458:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a45c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a45e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800a462:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800a466:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a46a:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a46c:	4a33      	ldr	r2, [pc, #204]	@ (800a53c <HAL_JPEG_Init+0x260>)
 800a46e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800a472:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a476:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a47a:	4b31      	ldr	r3, [pc, #196]	@ (800a540 <HAL_JPEG_Init+0x264>)
 800a47c:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800a480:	4b30      	ldr	r3, [pc, #192]	@ (800a544 <HAL_JPEG_Init+0x268>)
 800a482:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800a486:	4b30      	ldr	r3, [pc, #192]	@ (800a548 <HAL_JPEG_Init+0x26c>)
 800a488:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800a48c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a490:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a496:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a49a:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800a49e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a4a0:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a4a4:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a4a6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a4aa:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a4ae:	4333      	orrs	r3, r6
 800a4b0:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800a4b4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a4b8:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a4bc:	4281      	cmp	r1, r0
 800a4be:	d1ec      	bne.n	800a49a <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a4c0:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800a4c4:	491a      	ldr	r1, [pc, #104]	@ (800a530 <HAL_JPEG_Init+0x254>)
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f7ff fe08 	bl	800a0dc <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a4cc:	b118      	cbz	r0, 800a4d6 <HAL_JPEG_Init+0x1fa>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800a4d2:	2001      	movs	r0, #1
}
 800a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a4d6:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800a4da:	4918      	ldr	r1, [pc, #96]	@ (800a53c <HAL_JPEG_Init+0x260>)
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f7ff fdfd 	bl	800a0dc <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d1f3      	bne.n	800a4ce <HAL_JPEG_Init+0x1f2>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a4e6:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800a4ea:	490d      	ldr	r1, [pc, #52]	@ (800a520 <HAL_JPEG_Init+0x244>)
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f7ff fdbd 	bl	800a06c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d1eb      	bne.n	800a4ce <HAL_JPEG_Init+0x1f2>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a4f6:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800a4fa:	4914      	ldr	r1, [pc, #80]	@ (800a54c <HAL_JPEG_Init+0x270>)
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f7ff fdb5 	bl	800a06c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a502:	2800      	cmp	r0, #0
 800a504:	d1e3      	bne.n	800a4ce <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a506:	6863      	ldr	r3, [r4, #4]
 800a508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a50c:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a50e:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a510:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800a512:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a514:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a518:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800a51a:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800a51c:	e7da      	b.n	800a4d4 <HAL_JPEG_Init+0x1f8>
 800a51e:	bf00      	nop
 800a520:	0802d1ed 	.word	0x0802d1ed
 800a524:	0802cfed 	.word	0x0802cfed
 800a528:	0802cfad 	.word	0x0802cfad
 800a52c:	0b0a0908 	.word	0x0b0a0908
 800a530:	0802d11f 	.word	0x0802d11f
 800a534:	ffff0000 	.word	0xffff0000
 800a538:	09080706 	.word	0x09080706
 800a53c:	0802d06d 	.word	0x0802d06d
 800a540:	01000404 	.word	0x01000404
 800a544:	05070403 	.word	0x05070403
 800a548:	04040201 	.word	0x04040201
 800a54c:	0802d1d1 	.word	0x0802d1d1

0800a550 <HAL_JPEG_GetInfo>:
{
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a554:	2800      	cmp	r0, #0
 800a556:	d06f      	beq.n	800a638 <HAL_JPEG_GetInfo+0xe8>
 800a558:	2900      	cmp	r1, #0
 800a55a:	d06d      	beq.n	800a638 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a55c:	6804      	ldr	r4, [r0, #0]
 800a55e:	6863      	ldr	r3, [r4, #4]
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d047      	beq.n	800a5f8 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a568:	6863      	ldr	r3, [r4, #4]
 800a56a:	f013 0303 	ands.w	r3, r3, #3
 800a56e:	d005      	beq.n	800a57c <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a570:	6863      	ldr	r3, [r4, #4]
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	2b03      	cmp	r3, #3
 800a578:	d15e      	bne.n	800a638 <HAL_JPEG_GetInfo+0xe8>
 800a57a:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a57c:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a57e:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a580:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a584:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a586:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a588:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a58a:	68e2      	ldr	r2, [r4, #12]
 800a58c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a590:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a592:	d13c      	bne.n	800a60e <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a594:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a596:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a598:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a59c:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a59e:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a5a0:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a5a2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a5a6:	d129      	bne.n	800a5fc <HAL_JPEG_GetInfo+0xac>
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	f013 0f0f 	tst.w	r3, #15
 800a5ae:	bf0c      	ite	eq
 800a5b0:	2301      	moveq	r3, #1
 800a5b2:	2300      	movne	r3, #0
 800a5b4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a5b6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	3450      	adds	r4, #80	@ 0x50
 800a5bc:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800a63c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800a5c0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a5c2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800a5c6:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800a5ca:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800a5ce:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800a5d2:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a5d4:	fa29 f206 	lsr.w	r2, r9, r6
 800a5d8:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800a5da:	2a01      	cmp	r2, #1
 800a5dc:	d119      	bne.n	800a612 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800a5de:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800a5e0:	3608      	adds	r6, #8
 800a5e2:	3701      	adds	r7, #1
 800a5e4:	2e20      	cmp	r6, #32
 800a5e6:	d1f5      	bne.n	800a5d4 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800a5e8:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a5ea:	2d40      	cmp	r5, #64	@ 0x40
 800a5ec:	d1ed      	bne.n	800a5ca <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800a5ee:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800a5f0:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a5f2:	610b      	str	r3, [r1, #16]
}
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	2310      	movs	r3, #16
 800a5fa:	e7bf      	b.n	800a57c <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a5fc:	2d03      	cmp	r5, #3
 800a5fe:	d106      	bne.n	800a60e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a600:	4313      	orrs	r3, r2
 800a602:	f013 0f0f 	tst.w	r3, #15
 800a606:	bf0c      	ite	eq
 800a608:	2301      	moveq	r3, #1
 800a60a:	2300      	movne	r3, #0
 800a60c:	e7d3      	b.n	800a5b6 <HAL_JPEG_GetInfo+0x66>
 800a60e:	2300      	movs	r3, #0
 800a610:	e7d1      	b.n	800a5b6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a612:	fb0e fb02 	mul.w	fp, lr, r2
 800a616:	f897 a000 	ldrb.w	sl, [r7]
 800a61a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a61c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800a620:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800a624:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800a626:	bf8b      	itete	hi
 800a628:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800a62c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800a630:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800a632:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800a636:	e7d3      	b.n	800a5e0 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800a638:	2001      	movs	r0, #1
 800a63a:	e7db      	b.n	800a5f4 <HAL_JPEG_GetInfo+0xa4>
 800a63c:	0802d02d 	.word	0x0802d02d

0800a640 <HAL_JPEG_Decode_DMA>:
{
 800a640:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a642:	4604      	mov	r4, r0
 800a644:	b348      	cbz	r0, 800a69a <HAL_JPEG_Decode_DMA+0x5a>
 800a646:	b341      	cbz	r1, 800a69a <HAL_JPEG_Decode_DMA+0x5a>
 800a648:	b33b      	cbz	r3, 800a69a <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800a64a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800a64e:	2d01      	cmp	r5, #1
 800a650:	d028      	beq.n	800a6a4 <HAL_JPEG_Decode_DMA+0x64>
 800a652:	2501      	movs	r5, #1
 800a654:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a658:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800a65c:	2d01      	cmp	r5, #1
 800a65e:	d11e      	bne.n	800a69e <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a660:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800a662:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a664:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a668:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a66a:	f025 050f 	bic.w	r5, r5, #15
 800a66e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a670:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a672:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a676:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a67a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800a67c:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800a67e:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800a680:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800a682:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800a684:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800a686:	f7ff fda1 	bl	800a1cc <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a68a:	f7ff fddf 	bl	800a24c <JPEG_DMA_StartProcess>
 800a68e:	b128      	cbz	r0, 800a69c <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a690:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800a692:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a696:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800a69a:	2001      	movs	r0, #1
}
 800a69c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800a6a4:	2002      	movs	r0, #2
 800a6a6:	e7f9      	b.n	800a69c <HAL_JPEG_Decode_DMA+0x5c>

0800a6a8 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a6a8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a6aa:	f003 030c 	and.w	r3, r3, #12
 800a6ae:	2b0c      	cmp	r3, #12
 800a6b0:	d117      	bne.n	800a6e2 <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a6b2:	f011 0301 	ands.w	r3, r1, #1
 800a6b6:	d005      	beq.n	800a6c4 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a6b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a6ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a6be:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= JPEG_DMA_IDMA;
 800a6c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a6c4:	0789      	lsls	r1, r1, #30
 800a6c6:	d505      	bpl.n	800a6d4 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a6c8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= JPEG_DMA_ODMA;
 800a6ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a6ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6d2:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a6d4:	6801      	ldr	r1, [r0, #0]
 800a6d6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a6d8:	ea22 0303 	bic.w	r3, r2, r3
 800a6dc:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800a6de:	2000      	movs	r0, #0
 800a6e0:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a6e2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a6e4:	f003 030c 	and.w	r3, r3, #12
 800a6e8:	2b08      	cmp	r3, #8
 800a6ea:	d1f8      	bne.n	800a6de <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a6ec:	f011 0301 	ands.w	r3, r1, #1
 800a6f0:	d004      	beq.n	800a6fc <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a6f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a6f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a6f8:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a6fa:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a6fc:	078a      	lsls	r2, r1, #30
 800a6fe:	d5e9      	bpl.n	800a6d4 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a700:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a702:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a706:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a70a:	6542      	str	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a70c:	e7e2      	b.n	800a6d4 <HAL_JPEG_Pause+0x2c>

0800a70e <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800a70e:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800a710:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800a712:	4770      	bx	lr

0800a714 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800a714:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800a716:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800a718:	4770      	bx	lr

0800a71a <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800a71a:	4770      	bx	lr

0800a71c <JPEG_DMAErrorCallback>:
{
 800a71c:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a71e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a720:	f7fe f8d4 	bl	80088cc <HAL_DMA_GetError>
 800a724:	2802      	cmp	r0, #2
 800a726:	d016      	beq.n	800a756 <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a728:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800a72a:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	f022 0201 	bic.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a736:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a73a:	631a      	str	r2, [r3, #48]	@ 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800a73c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a73e:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800a742:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a744:	2301      	movs	r3, #1
 800a746:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a74a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a74c:	f043 0304 	orr.w	r3, r3, #4
 800a750:	6523      	str	r3, [r4, #80]	@ 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 800a752:	f7f7 f865 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800a756:	bd10      	pop	{r4, pc}

0800a758 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a758:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800a75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75c:	4604      	mov	r4, r0
 800a75e:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a760:	b922      	cbnz	r2, 800a76c <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a762:	2101      	movs	r1, #1
 800a764:	f7ff ffa0 	bl	800a6a8 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800a768:	2200      	movs	r2, #0
 800a76a:	e004      	b.n	800a776 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a76c:	6a03      	ldr	r3, [r0, #32]
 800a76e:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a770:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a772:	d924      	bls.n	800a7be <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a774:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a776:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a778:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800a77c:	d11e      	bne.n	800a7bc <JPEG_ReadInputData+0x64>
 800a77e:	b1ea      	cbz	r2, 800a7bc <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800a780:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800a784:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800a786:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800a78a:	d827      	bhi.n	800a7dc <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a78c:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800a78e:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a790:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a792:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a794:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800a796:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a798:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a79a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a79e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a7a2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7a4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a7a8:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a7ac:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7b0:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800a7b2:	6a22      	ldr	r2, [r4, #32]
 800a7b4:	f102 0204 	add.w	r2, r2, #4
 800a7b8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a7ba:	d1e8      	bne.n	800a78e <JPEG_ReadInputData+0x36>
}
 800a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d1d2      	bne.n	800a768 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a7c2:	6a01      	ldr	r1, [r0, #32]
 800a7c4:	f7f6 ffd0 	bl	8001768 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800a7c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a7ca:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a7cc:	bf84      	itt	hi
 800a7ce:	f023 0303 	bichi.w	r3, r3, #3
 800a7d2:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a7d4:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800a7d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a7d8:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800a7da:	e7cc      	b.n	800a776 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800a7dc:	2a03      	cmp	r2, #3
 800a7de:	d918      	bls.n	800a812 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7e0:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800a7e2:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a7e4:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7e6:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a7e8:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800a7ea:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a7ec:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7ee:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a7f2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a7f6:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a7f8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a7fc:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a800:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a804:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a806:	6a22      	ldr	r2, [r4, #32]
 800a808:	f102 0204 	add.w	r2, r2, #4
 800a80c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a80e:	d1e8      	bne.n	800a7e2 <JPEG_ReadInputData+0x8a>
 800a810:	e7d4      	b.n	800a7bc <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800a812:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a814:	6a25      	ldr	r5, [r4, #32]
 800a816:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800a818:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a81a:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800a81c:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a81e:	fa05 f506 	lsl.w	r5, r5, r6
 800a822:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800a826:	6a25      	ldr	r5, [r4, #32]
 800a828:	f105 0501 	add.w	r5, r5, #1
 800a82c:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800a82e:	d1f1      	bne.n	800a814 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a834:	e7c2      	b.n	800a7bc <JPEG_ReadInputData+0x64>
	...

0800a838 <JPEG_DMAInCpltCallback>:
{
 800a838:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a83a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a840:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a844:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a846:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a848:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800a84c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a850:	0412      	lsls	r2, r2, #16
 800a852:	0c12      	lsrs	r2, r2, #16
 800a854:	2a0c      	cmp	r2, #12
 800a856:	d12c      	bne.n	800a8b2 <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a85a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a85e:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a860:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a862:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800a864:	4a1b      	ldr	r2, [pc, #108]	@ (800a8d4 <JPEG_DMAInCpltCallback+0x9c>)
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800a86c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a872:	6a21      	ldr	r1, [r4, #32]
 800a874:	f7f6 ff78 	bl	8001768 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800a878:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d91a      	bls.n	800a8b4 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a87e:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800a882:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a884:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a886:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a888:	04db      	lsls	r3, r3, #19
 800a88a:	d41c      	bmi.n	800a8c6 <JPEG_DMAInCpltCallback+0x8e>
 800a88c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a88e:	b1d3      	cbz	r3, 800a8c6 <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a890:	089b      	lsrs	r3, r3, #2
 800a892:	3240      	adds	r2, #64	@ 0x40
 800a894:	69a1      	ldr	r1, [r4, #24]
 800a896:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a898:	f7fd ff0a 	bl	80086b0 <HAL_DMA_Start_IT>
 800a89c:	b170      	cbz	r0, 800a8bc <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a89e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800a8a0:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a8a2:	f043 0304 	orr.w	r3, r3, #4
 800a8a6:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a8a8:	2306      	movs	r3, #6
 800a8aa:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800a8ae:	f7f6 ffb7 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800a8b2:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0e5      	beq.n	800a884 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 800a8b8:	2304      	movs	r3, #4
 800a8ba:	e7e2      	b.n	800a882 <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800a8bc:	6822      	ldr	r2, [r4, #0]
 800a8be:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a8c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a8c4:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a8ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a8ce:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8d0:	e7ef      	b.n	800a8b2 <JPEG_DMAInCpltCallback+0x7a>
 800a8d2:	bf00      	nop
 800a8d4:	0003fffc 	.word	0x0003fffc

0800a8d8 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8d8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800a8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a8e0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800a8e2:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d32a      	bcc.n	800a93e <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800a8e8:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a8ea:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800a8ec:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8ee:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800a8f2:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8f4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a8f6:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a8f8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8fa:	69e0      	ldr	r0, [r4, #28]
 800a8fc:	4428      	add	r0, r5
 800a8fe:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800a902:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a904:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a906:	69e0      	ldr	r0, [r4, #28]
 800a908:	4428      	add	r0, r5
 800a90a:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a90e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a912:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a914:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a916:	69e0      	ldr	r0, [r4, #28]
 800a918:	4428      	add	r0, r5
 800a91a:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800a91c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a91e:	f103 0304 	add.w	r3, r3, #4
 800a922:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a924:	d1e1      	bne.n	800a8ea <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a926:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a928:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d106      	bne.n	800a93c <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a92e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a930:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a932:	4620      	mov	r0, r4
 800a934:	f7f6 ff36 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a93e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800a940:	4293      	cmp	r3, r2
 800a942:	d9fb      	bls.n	800a93c <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a944:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a946:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a948:	1a9b      	subs	r3, r3, r2
 800a94a:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800a94c:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a94e:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800a950:	d105      	bne.n	800a95e <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a952:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a954:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a956:	429f      	cmp	r7, r3
 800a958:	d119      	bne.n	800a98e <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a95a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a95c:	e7e9      	b.n	800a932 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800a95e:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800a960:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800a962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a964:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a966:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a968:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a96a:	69e1      	ldr	r1, [r4, #28]
 800a96c:	4429      	add	r1, r5
 800a96e:	0a1d      	lsrs	r5, r3, #8
 800a970:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a972:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a974:	69e1      	ldr	r1, [r4, #28]
 800a976:	4429      	add	r1, r5
 800a978:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a97a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a97c:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a97e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a980:	69e1      	ldr	r1, [r4, #28]
 800a982:	4429      	add	r1, r5
 800a984:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800a986:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a988:	3304      	adds	r3, #4
 800a98a:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a98c:	e7de      	b.n	800a94c <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a98e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a990:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a992:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a994:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800a996:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800a998:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a99a:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800a99c:	d114      	bne.n	800a9c8 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a99e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7f6 feff 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a9aa:	1d2b      	adds	r3, r5, #4
 800a9ac:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d8c4      	bhi.n	800a93c <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a9b2:	00da      	lsls	r2, r3, #3
 800a9b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a9b6:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800a9b8:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a9ba:	fa26 f202 	lsr.w	r2, r6, r2
 800a9be:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800a9c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a9c2:	3201      	adds	r2, #1
 800a9c4:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a9c6:	e7f2      	b.n	800a9ae <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a9c8:	f002 0303 	and.w	r3, r2, #3
 800a9cc:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a9d0:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	fa26 f303 	lsr.w	r3, r6, r3
 800a9d8:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800a9dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9de:	3301      	adds	r3, #1
 800a9e0:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a9e2:	e7d9      	b.n	800a998 <JPEG_StoreOutputData+0xc0>

0800a9e4 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9e4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a9e6:	f003 0303 	and.w	r3, r3, #3
 800a9ea:	2b02      	cmp	r3, #2
{
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9f0:	d114      	bne.n	800aa1c <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a9f2:	6803      	ldr	r3, [r0, #0]
 800a9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f6:	065b      	lsls	r3, r3, #25
 800a9f8:	d510      	bpl.n	800aa1c <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a9fa:	1d01      	adds	r1, r0, #4
 800a9fc:	f7ff fda8 	bl	800a550 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800aa00:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa02:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800aa04:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa06:	f7f6 fe61 	bl	80016cc <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa12:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aa14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa1a:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800aa1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aa1e:	04d9      	lsls	r1, r3, #19
 800aa20:	d407      	bmi.n	800aa32 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa26:	0792      	lsls	r2, r2, #30
 800aa28:	d544      	bpl.n	800aab4 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aa2a:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7ff fe93 	bl	800a758 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aa32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aa34:	0499      	lsls	r1, r3, #18
 800aa36:	d407      	bmi.n	800aa48 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa3c:	0712      	lsls	r2, r2, #28
 800aa3e:	d53e      	bpl.n	800aabe <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aa40:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff ff48 	bl	800a8d8 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa4c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800aa50:	2a20      	cmp	r2, #32
 800aa52:	d13c      	bne.n	800aace <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	f022 0201 	bic.w	r2, r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aa5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa5e:	f002 020c 	and.w	r2, r2, #12
 800aa62:	2a08      	cmp	r2, #8
 800aa64:	d103      	bne.n	800aa6e <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa68:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aa6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa70:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa74:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800aa76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa78:	b133      	cbz	r3, 800aa88 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa7a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	69e1      	ldr	r1, [r4, #28]
 800aa80:	f7f6 fe90 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800aa88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa8a:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa8e:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa92:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa96:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa98:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aaa2:	f04f 0201 	mov.w	r2, #1
 800aaa6:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aaaa:	d10d      	bne.n	800aac8 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aaac:	f7f6 feba 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800aab0:	2001      	movs	r0, #1
}
 800aab2:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800aab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aab6:	0758      	lsls	r0, r3, #29
 800aab8:	d5bb      	bpl.n	800aa32 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800aaba:	2101      	movs	r1, #1
 800aabc:	e7b6      	b.n	800aa2c <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aabe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac0:	06db      	lsls	r3, r3, #27
 800aac2:	d5c1      	bpl.n	800aa48 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800aac4:	2101      	movs	r1, #1
 800aac6:	e7bc      	b.n	800aa42 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800aac8:	f7ff fe27 	bl	800a71a <HAL_JPEG_EncodeCpltCallback>
 800aacc:	e7f0      	b.n	800aab0 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800aace:	2000      	movs	r0, #0
 800aad0:	e7ef      	b.n	800aab2 <JPEG_Process+0xce>

0800aad2 <JPEG_DMA_PollResidualData>:
{
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	4604      	mov	r4, r0
 800aad6:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aad8:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aada:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aadc:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800aae0:	d122      	bne.n	800ab28 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aae4:	06d0      	lsls	r0, r2, #27
 800aae6:	d51f      	bpl.n	800ab28 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800aae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800aaea:	69e1      	ldr	r1, [r4, #28]
 800aaec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aaee:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800aaf0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aaf2:	69e2      	ldr	r2, [r4, #28]
 800aaf4:	440a      	add	r2, r1
 800aaf6:	0a19      	lsrs	r1, r3, #8
 800aaf8:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aafa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aafc:	69e2      	ldr	r2, [r4, #28]
 800aafe:	440a      	add	r2, r1
 800ab00:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ab02:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ab04:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ab06:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ab08:	69e2      	ldr	r2, [r4, #28]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800ab0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab10:	3304      	adds	r3, #4
 800ab12:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ab14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d105      	bne.n	800ab28 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab1e:	4620      	mov	r0, r4
 800ab20:	69e1      	ldr	r1, [r4, #28]
 800ab22:	f7f6 fe3f 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800ab26:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ab28:	3e01      	subs	r6, #1
 800ab2a:	d1d5      	bne.n	800aad8 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ab2c:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800ab2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ab30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ab32:	06c9      	lsls	r1, r1, #27
 800ab34:	d501      	bpl.n	800ab3a <JPEG_DMA_PollResidualData+0x68>
 800ab36:	0492      	lsls	r2, r2, #18
 800ab38:	d420      	bmi.n	800ab7c <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800ab42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab44:	b133      	cbz	r3, 800ab54 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab46:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ab48:	4620      	mov	r0, r4
 800ab4a:	69e1      	ldr	r1, [r4, #28]
 800ab4c:	f7f6 fe2a 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800ab54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab56:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab5a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab5e:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab62:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab64:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab6e:	f04f 0201 	mov.w	r2, #1
 800ab72:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab76:	d102      	bne.n	800ab7e <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab78:	f7f6 fe54 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
}
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ab7e:	f7ff fdcc 	bl	800a71a <HAL_JPEG_EncodeCpltCallback>
}
 800ab82:	e7fb      	b.n	800ab7c <JPEG_DMA_PollResidualData+0xaa>

0800ab84 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ab84:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab86:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800ab8a:	b570      	push	{r4, r5, r6, lr}
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ab90:	d034      	beq.n	800abfc <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ab92:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab94:	f003 030c 	and.w	r3, r3, #12
 800ab98:	2b0c      	cmp	r3, #12
 800ab9a:	d13e      	bne.n	800ac1a <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ab9c:	f011 0601 	ands.w	r6, r1, #1
 800aba0:	d00a      	beq.n	800abb8 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800aba2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aba8:	6543      	str	r3, [r0, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800abaa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800abac:	f023 0303 	bic.w	r3, r3, #3
 800abb0:	6283      	str	r3, [r0, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800abb2:	b99b      	cbnz	r3, 800abdc <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 800abb4:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800abb8:	07a8      	lsls	r0, r5, #30
 800abba:	d509      	bpl.n	800abd0 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800abbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800abbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800abc2:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800abc4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800abc6:	0419      	lsls	r1, r3, #16
 800abc8:	d51a      	bpl.n	800ac00 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800abca:	4620      	mov	r0, r4
 800abcc:	f7ff ff81 	bl	800aad2 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 800abd0:	6822      	ldr	r2, [r4, #0]
 800abd2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800abd4:	4333      	orrs	r3, r6
 800abd6:	6313      	str	r3, [r2, #48]	@ 0x30
  return HAL_OK;
 800abd8:	2000      	movs	r0, #0
}
 800abda:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800abdc:	6802      	ldr	r2, [r0, #0]
 800abde:	089b      	lsrs	r3, r3, #2
 800abe0:	6981      	ldr	r1, [r0, #24]
 800abe2:	3240      	adds	r2, #64	@ 0x40
 800abe4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800abe6:	f7fd fd63 	bl	80086b0 <HAL_DMA_Start_IT>
 800abea:	2800      	cmp	r0, #0
 800abec:	d0e2      	beq.n	800abb4 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800abee:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800abf0:	f043 0304 	orr.w	r3, r3, #4
 800abf4:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800abf6:	2306      	movs	r3, #6
 800abf8:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800abfc:	2001      	movs	r0, #1
 800abfe:	e7ec      	b.n	800abda <HAL_JPEG_Resume+0x56>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ac00:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac02:	6821      	ldr	r1, [r4, #0]
 800ac04:	089b      	lsrs	r3, r3, #2
 800ac06:	69e2      	ldr	r2, [r4, #28]
 800ac08:	3144      	adds	r1, #68	@ 0x44
 800ac0a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ac0c:	f7fd fd50 	bl	80086b0 <HAL_DMA_Start_IT>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d1ec      	bne.n	800abee <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 800ac14:	f446 5680 	orr.w	r6, r6, #4096	@ 0x1000
 800ac18:	e7da      	b.n	800abd0 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ac1a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac1c:	f003 030c 	and.w	r3, r3, #12
 800ac20:	2b08      	cmp	r3, #8
 800ac22:	d1d9      	bne.n	800abd8 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ac24:	f011 0301 	ands.w	r3, r1, #1
 800ac28:	d004      	beq.n	800ac34 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ac2a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac30:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ac32:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ac34:	07aa      	lsls	r2, r5, #30
 800ac36:	d505      	bpl.n	800ac44 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ac38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ac3a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ac3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ac42:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800ac44:	6821      	ldr	r1, [r4, #0]
 800ac46:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	630b      	str	r3, [r1, #48]	@ 0x30
 800ac4c:	e7c4      	b.n	800abd8 <HAL_JPEG_Resume+0x54>
	...

0800ac50 <JPEG_DMA_EndProcess>:
{
 800ac50:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800ac52:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800ac54:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800ac56:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6859      	ldr	r1, [r3, #4]
 800ac5c:	4b1f      	ldr	r3, [pc, #124]	@ (800acdc <JPEG_DMA_EndProcess+0x8c>)
 800ac5e:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ac66:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d105      	bne.n	800ac78 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac6c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800ac6e:	69c1      	ldr	r1, [r0, #28]
 800ac70:	f7f6 fd98 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800ac7c:	f015 0510 	ands.w	r5, r5, #16
 800ac80:	d124      	bne.n	800accc <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 800ac82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ac84:	b12b      	cbz	r3, 800ac92 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac86:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ac88:	4620      	mov	r0, r4
 800ac8a:	69e1      	ldr	r1, [r4, #28]
 800ac8c:	f7f6 fd8a 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ac90:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac92:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac94:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac96:	6813      	ldr	r3, [r2, #0]
 800ac98:	f023 0301 	bic.w	r3, r3, #1
 800ac9c:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800ac9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aca2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aca6:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800acaa:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800acac:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800acae:	f04f 0200 	mov.w	r2, #0
 800acb2:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800acb6:	f04f 0201 	mov.w	r2, #1
 800acba:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800acbe:	d102      	bne.n	800acc6 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800acc0:	f7f6 fdb0 	bl	8001824 <HAL_JPEG_DecodeCpltCallback>
}
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800acc6:	f7ff fd28 	bl	800a71a <HAL_JPEG_EncodeCpltCallback>
 800acca:	e7fb      	b.n	800acc4 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800accc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800acce:	049b      	lsls	r3, r3, #18
 800acd0:	d4f8      	bmi.n	800acc4 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 800acd2:	4620      	mov	r0, r4
}
 800acd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800acd8:	f7ff befb 	b.w	800aad2 <JPEG_DMA_PollResidualData>
 800acdc:	0003fffc 	.word	0x0003fffc

0800ace0 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ace0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ace2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ace4:	041b      	lsls	r3, r3, #16
 800ace6:	d501      	bpl.n	800acec <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800ace8:	f7ff bfb2 	b.w	800ac50 <JPEG_DMA_EndProcess>
}
 800acec:	4770      	bx	lr
	...

0800acf0 <JPEG_DMAOutCpltCallback>:
{
 800acf0:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acf2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acf8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800acfc:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800acfe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad00:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800ad04:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ad08:	0412      	lsls	r2, r2, #16
 800ad0a:	0c12      	lsrs	r2, r2, #16
 800ad0c:	2a0c      	cmp	r2, #12
 800ad0e:	d129      	bne.n	800ad64 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ad10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad12:	0692      	lsls	r2, r2, #26
 800ad14:	d42c      	bmi.n	800ad70 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ad16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad18:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ad1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ad1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ad20:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad22:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800ad24:	4a15      	ldr	r2, [pc, #84]	@ (800ad7c <JPEG_DMAOutCpltCallback+0x8c>)
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800ad2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad32:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ad34:	f7f6 fd36 	bl	80017a4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ad38:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ad3a:	049b      	lsls	r3, r3, #18
 800ad3c:	d418      	bmi.n	800ad70 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ad3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad40:	6821      	ldr	r1, [r4, #0]
 800ad42:	089b      	lsrs	r3, r3, #2
 800ad44:	69e2      	ldr	r2, [r4, #28]
 800ad46:	3144      	adds	r1, #68	@ 0x44
 800ad48:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ad4a:	f7fd fcb1 	bl	80086b0 <HAL_DMA_Start_IT>
 800ad4e:	b150      	cbz	r0, 800ad66 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800ad52:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad54:	f043 0304 	orr.w	r3, r3, #4
 800ad58:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ad5a:	2306      	movs	r3, #6
 800ad5c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800ad60:	f7f6 fd5e 	bl	8001820 <HAL_JPEG_ErrorCallback>
}
 800ad64:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800ad66:	6822      	ldr	r2, [r4, #0]
 800ad68:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ad6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ad6e:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ad74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ad78:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad7a:	e7f3      	b.n	800ad64 <JPEG_DMAOutCpltCallback+0x74>
 800ad7c:	0003fffc 	.word	0x0003fffc

0800ad80 <HAL_JPEG_IRQHandler>:
{
 800ad80:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ad82:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800ad86:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ad88:	3b03      	subs	r3, #3
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d854      	bhi.n	800ae38 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ad8e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ad90:	f003 030c 	and.w	r3, r3, #12
 800ad94:	2b08      	cmp	r3, #8
 800ad96:	d103      	bne.n	800ada0 <HAL_JPEG_IRQHandler+0x20>
}
 800ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ad9c:	f7ff be22 	b.w	800a9e4 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ada0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ada2:	f003 030c 	and.w	r3, r3, #12
 800ada6:	2b0c      	cmp	r3, #12
 800ada8:	d146      	bne.n	800ae38 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800adaa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800adac:	f003 0303 	and.w	r3, r3, #3
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d114      	bne.n	800adde <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800adb4:	6803      	ldr	r3, [r0, #0]
 800adb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adb8:	0659      	lsls	r1, r3, #25
 800adba:	d510      	bpl.n	800adde <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800adbc:	1d01      	adds	r1, r0, #4
 800adbe:	f7ff fbc7 	bl	800a550 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800adc2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800adc4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800adc6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800adc8:	f7f6 fc80 	bl	80016cc <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800add0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800add4:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800add6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800add8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800addc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ade2:	0692      	lsls	r2, r2, #26
 800ade4:	d528      	bpl.n	800ae38 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800ade6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800ade8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800adea:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800adee:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800adf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800adf6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	f022 0201 	bic.w	r2, r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ae00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae02:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ae06:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ae08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae0a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ae0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800ae10:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d101      	bne.n	800ae1c <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800ae18:	f7fd fc87 	bl	800872a <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 800ae1c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ae1e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d103      	bne.n	800ae2e <HAL_JPEG_IRQHandler+0xae>
}
 800ae26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800ae2a:	f7fd bc7e 	b.w	800872a <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800ae2e:	4620      	mov	r0, r4
}
 800ae30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800ae34:	f7ff bf0c 	b.w	800ac50 <JPEG_DMA_EndProcess>
}
 800ae38:	bd10      	pop	{r4, pc}

0800ae3a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae3a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae3c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae3e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae42:	3284      	adds	r2, #132	@ 0x84
 800ae44:	1883      	adds	r3, r0, r2
{
 800ae46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae4a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae4c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae50:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ae52:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae56:	684c      	ldr	r4, [r1, #4]
 800ae58:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae5c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ae60:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae64:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ae66:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae68:	68c5      	ldr	r5, [r0, #12]
 800ae6a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800ae6e:	443d      	add	r5, r7
 800ae70:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae74:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ae76:	68c6      	ldr	r6, [r0, #12]
 800ae78:	68cd      	ldr	r5, [r1, #12]
 800ae7a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800ae7e:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ae80:	689d      	ldr	r5, [r3, #8]
 800ae82:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800ae86:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ae88:	688d      	ldr	r5, [r1, #8]
 800ae8a:	68c7      	ldr	r7, [r0, #12]
 800ae8c:	3501      	adds	r5, #1
 800ae8e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800ae92:	443d      	add	r5, r7
 800ae94:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ae98:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ae9a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ae9c:	691d      	ldr	r5, [r3, #16]
 800ae9e:	f025 0507 	bic.w	r5, r5, #7
 800aea2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800aea4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800aea6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800aea8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800aeac:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800aeb0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800aeb4:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800aeb8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800aebc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800aec0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800aec4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800aec6:	695d      	ldr	r5, [r3, #20]
 800aec8:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800aecc:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800aece:	694d      	ldr	r5, [r1, #20]
 800aed0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800aed2:	69dd      	ldr	r5, [r3, #28]
 800aed4:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800aed8:	f025 0507 	bic.w	r5, r5, #7
 800aedc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800aede:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800aee2:	433d      	orrs	r5, r7
 800aee4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800aee6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800aee8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800aeea:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800aeee:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aef0:	b31e      	cbz	r6, 800af3a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800aef2:	2e01      	cmp	r6, #1
 800aef4:	d023      	beq.n	800af3e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aef6:	1eb5      	subs	r5, r6, #2
 800aef8:	2d02      	cmp	r5, #2
 800aefa:	d922      	bls.n	800af42 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800aefc:	2e07      	cmp	r6, #7
 800aefe:	bf14      	ite	ne
 800af00:	2501      	movne	r5, #1
 800af02:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af04:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af06:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af0a:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af0e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af10:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af12:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800af14:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af16:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800af18:	436e      	muls	r6, r5
 800af1a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800af1e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800af20:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800af22:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800af26:	f024 0407 	bic.w	r4, r4, #7
 800af2a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af2c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800af2e:	5883      	ldr	r3, [r0, r2]
 800af30:	f043 0301 	orr.w	r3, r3, #1
 800af34:	5083      	str	r3, [r0, r2]
}
 800af36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800af3a:	2504      	movs	r5, #4
 800af3c:	e7e2      	b.n	800af04 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800af3e:	2503      	movs	r5, #3
 800af40:	e7e0      	b.n	800af04 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800af42:	2502      	movs	r5, #2
 800af44:	e7de      	b.n	800af04 <LTDC_SetConfig+0xca>
	...

0800af48 <HAL_LTDC_Init>:
{
 800af48:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800af4a:	4604      	mov	r4, r0
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d063      	beq.n	800b018 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800af50:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800af54:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800af58:	b91b      	cbnz	r3, 800af62 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800af5a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800af5e:	f7f9 ffaf 	bl	8004ec0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800af62:	2302      	movs	r3, #2
 800af64:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	699a      	ldr	r2, [r3, #24]
 800af6c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800af70:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800af72:	6999      	ldr	r1, [r3, #24]
 800af74:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800af78:	4302      	orrs	r2, r0
 800af7a:	68e0      	ldr	r0, [r4, #12]
 800af7c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800af7e:	6920      	ldr	r0, [r4, #16]
 800af80:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800af82:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800af84:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800af86:	4925      	ldr	r1, [pc, #148]	@ (800b01c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800af88:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800af8a:	689a      	ldr	r2, [r3, #8]
 800af8c:	400a      	ands	r2, r1
 800af8e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800af96:	69a0      	ldr	r0, [r4, #24]
 800af98:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800af9a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800af9c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	400a      	ands	r2, r1
 800afa2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800afa4:	68da      	ldr	r2, [r3, #12]
 800afa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800afaa:	6a20      	ldr	r0, [r4, #32]
 800afac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800afae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800afb0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	400a      	ands	r2, r1
 800afb6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800afbe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800afc0:	4302      	orrs	r2, r0
 800afc2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800afc4:	695a      	ldr	r2, [r3, #20]
 800afc6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800afc8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800afca:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800afcc:	695a      	ldr	r2, [r3, #20]
 800afce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800afd2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800afd4:	430a      	orrs	r2, r1
 800afd6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800afd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800afda:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800afde:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800afe2:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800afe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800afe8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800afea:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800afee:	432a      	orrs	r2, r5
 800aff0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aff4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aff6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800affa:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800affc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800affe:	f042 0206 	orr.w	r2, r2, #6
 800b002:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b004:	699a      	ldr	r2, [r3, #24]
 800b006:	f042 0201 	orr.w	r2, r2, #1
 800b00a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800b00c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b00e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b012:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800b016:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b018:	2001      	movs	r0, #1
 800b01a:	e7fc      	b.n	800b016 <HAL_LTDC_Init+0xce>
 800b01c:	f000f800 	.word	0xf000f800

0800b020 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800b020:	4770      	bx	lr

0800b022 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800b022:	4770      	bx	lr

0800b024 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800b024:	4770      	bx	lr

0800b026 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b026:	6803      	ldr	r3, [r0, #0]
{
 800b028:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b02a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800b02c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b02e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b030:	0772      	lsls	r2, r6, #29
 800b032:	d514      	bpl.n	800b05e <HAL_LTDC_IRQHandler+0x38>
 800b034:	0769      	lsls	r1, r5, #29
 800b036:	d512      	bpl.n	800b05e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b03a:	f022 0204 	bic.w	r2, r2, #4
 800b03e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b040:	2204      	movs	r2, #4
 800b042:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b044:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800b048:	f043 0301 	orr.w	r3, r3, #1
 800b04c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800b050:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b052:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b056:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b05a:	f7ff ffe1 	bl	800b020 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b05e:	07b2      	lsls	r2, r6, #30
 800b060:	d516      	bpl.n	800b090 <HAL_LTDC_IRQHandler+0x6a>
 800b062:	07ab      	lsls	r3, r5, #30
 800b064:	d514      	bpl.n	800b090 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b066:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b068:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b06c:	f022 0202 	bic.w	r2, r2, #2
 800b070:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b072:	2202      	movs	r2, #2
 800b074:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b076:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b080:	2304      	movs	r3, #4
 800b082:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b086:	2300      	movs	r3, #0
 800b088:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b08c:	f7ff ffc8 	bl	800b020 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b090:	07f0      	lsls	r0, r6, #31
 800b092:	d510      	bpl.n	800b0b6 <HAL_LTDC_IRQHandler+0x90>
 800b094:	07e9      	lsls	r1, r5, #31
 800b096:	d50e      	bpl.n	800b0b6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b098:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b09a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b09c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b09e:	f022 0201 	bic.w	r2, r2, #1
 800b0a2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800b0a8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b0aa:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b0ae:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b0b2:	f7ff ffb6 	bl	800b022 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b0b6:	0732      	lsls	r2, r6, #28
 800b0b8:	d511      	bpl.n	800b0de <HAL_LTDC_IRQHandler+0xb8>
 800b0ba:	072b      	lsls	r3, r5, #28
 800b0bc:	d50f      	bpl.n	800b0de <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b0be:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b0c0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b0c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0c4:	f022 0208 	bic.w	r2, r2, #8
 800b0c8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b0ca:	2208      	movs	r2, #8
 800b0cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b0da:	f7ff ffa3 	bl	800b024 <HAL_LTDC_ReloadEventCallback>
}
 800b0de:	bd70      	pop	{r4, r5, r6, pc}

0800b0e0 <HAL_LTDC_ConfigLayer>:
{
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b0e4:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	460f      	mov	r7, r1
 800b0ec:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	f04f 0002 	mov.w	r0, #2
 800b0f4:	d01f      	beq.n	800b136 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0f6:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800b0f8:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0fc:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b0fe:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b102:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b106:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b10a:	3438      	adds	r4, #56	@ 0x38
 800b10c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b10e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b118:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b11a:	4630      	mov	r0, r6
 800b11c:	4662      	mov	r2, ip
 800b11e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b120:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b122:	f7ff fe8a 	bl	800ae3a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b126:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b128:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b12a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b12e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b132:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800b136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b13c <HAL_LTDC_SetPitch>:
{
 800b13c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b13e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800b142:	2b01      	cmp	r3, #1
 800b144:	f04f 0302 	mov.w	r3, #2
 800b148:	d02c      	beq.n	800b1a4 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b14a:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b14c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b150:	fb04 0402 	mla	r4, r4, r2, r0
 800b154:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b156:	b33c      	cbz	r4, 800b1a8 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b158:	2c01      	cmp	r4, #1
 800b15a:	d027      	beq.n	800b1ac <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b15c:	1ea5      	subs	r5, r4, #2
 800b15e:	429d      	cmp	r5, r3
 800b160:	d902      	bls.n	800b168 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800b162:	2c07      	cmp	r4, #7
 800b164:	bf18      	it	ne
 800b166:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b168:	01d2      	lsls	r2, r2, #7
 800b16a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b16c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b16e:	3284      	adds	r2, #132	@ 0x84
 800b170:	4422      	add	r2, r4
 800b172:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800b174:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800b178:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800b17c:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b17e:	4c0c      	ldr	r4, [pc, #48]	@ (800b1b0 <HAL_LTDC_SetPitch+0x74>)
 800b180:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b182:	f045 0501 	orr.w	r5, r5, #1
 800b186:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b188:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800b18a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b190:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b192:	f043 0301 	orr.w	r3, r3, #1
 800b196:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b198:	2301      	movs	r3, #1
 800b19a:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	e7dd      	b.n	800b168 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e7db      	b.n	800b168 <HAL_LTDC_SetPitch+0x2c>
 800b1b0:	40016800 	.word	0x40016800

0800b1b4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b1b4:	4b19      	ldr	r3, [pc, #100]	@ (800b21c <HAL_PWREx_EnableOverDrive+0x68>)
{
 800b1b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b1ba:	4c19      	ldr	r4, [pc, #100]	@ (800b220 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b1c0:	641a      	str	r2, [r3, #64]	@ 0x40
 800b1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1d2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b1d4:	f7fc fe4a 	bl	8007e6c <HAL_GetTick>
 800b1d8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b1da:	6863      	ldr	r3, [r4, #4]
 800b1dc:	03da      	lsls	r2, r3, #15
 800b1de:	d50c      	bpl.n	800b1fa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b1e0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1e2:	4d0f      	ldr	r5, [pc, #60]	@ (800b220 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b1e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1e8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b1ea:	f7fc fe3f 	bl	8007e6c <HAL_GetTick>
 800b1ee:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1f0:	686b      	ldr	r3, [r5, #4]
 800b1f2:	039b      	lsls	r3, r3, #14
 800b1f4:	d50a      	bpl.n	800b20c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e006      	b.n	800b208 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b1fa:	f7fc fe37 	bl	8007e6c <HAL_GetTick>
 800b1fe:	1b40      	subs	r0, r0, r5
 800b200:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b204:	d9e9      	bls.n	800b1da <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800b206:	2003      	movs	r0, #3
}
 800b208:	b003      	add	sp, #12
 800b20a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b20c:	f7fc fe2e 	bl	8007e6c <HAL_GetTick>
 800b210:	1b00      	subs	r0, r0, r4
 800b212:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b216:	d9eb      	bls.n	800b1f0 <HAL_PWREx_EnableOverDrive+0x3c>
 800b218:	e7f5      	b.n	800b206 <HAL_PWREx_EnableOverDrive+0x52>
 800b21a:	bf00      	nop
 800b21c:	40023800 	.word	0x40023800
 800b220:	40007000 	.word	0x40007000

0800b224 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b228:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800b22a:	b136      	cbz	r6, 800b23a <QSPI_Config+0x16>
 800b22c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800b230:	d003      	beq.n	800b23a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b232:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b234:	6804      	ldr	r4, [r0, #0]
 800b236:	3b01      	subs	r3, #1
 800b238:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b23a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b23e:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	d04c      	beq.n	800b2e2 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b248:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b24a:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b24c:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800b250:	ea4a 0406 	orr.w	r4, sl, r6
 800b254:	680b      	ldr	r3, [r1, #0]
 800b256:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800b25a:	ea44 0a02 	orr.w	sl, r4, r2
 800b25e:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b262:	f1be 0f00 	cmp.w	lr, #0
 800b266:	d024      	beq.n	800b2b2 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b268:	688e      	ldr	r6, [r1, #8]
 800b26a:	ea4a 040e 	orr.w	r4, sl, lr
 800b26e:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b270:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b272:	b19f      	cbz	r7, 800b29c <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b274:	433b      	orrs	r3, r7
 800b276:	4303      	orrs	r3, r0
 800b278:	68c8      	ldr	r0, [r1, #12]
 800b27a:	ea43 0309 	orr.w	r3, r3, r9
 800b27e:	ea43 0308 	orr.w	r3, r3, r8
 800b282:	4333      	orrs	r3, r6
 800b284:	4303      	orrs	r3, r0
 800b286:	ea43 030c 	orr.w	r3, r3, ip
 800b28a:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b28c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b290:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b292:	d001      	beq.n	800b298 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b294:	684b      	ldr	r3, [r1, #4]
 800b296:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b29c:	4303      	orrs	r3, r0
 800b29e:	ea43 0309 	orr.w	r3, r3, r9
 800b2a2:	ea43 0308 	orr.w	r3, r3, r8
 800b2a6:	4333      	orrs	r3, r6
 800b2a8:	ea43 030c 	orr.w	r3, r3, ip
 800b2ac:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2ae:	616b      	str	r3, [r5, #20]
 800b2b0:	e7f2      	b.n	800b298 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2b2:	b167      	cbz	r7, 800b2ce <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2b4:	433b      	orrs	r3, r7
 800b2b6:	4303      	orrs	r3, r0
 800b2b8:	68c8      	ldr	r0, [r1, #12]
 800b2ba:	ea43 0309 	orr.w	r3, r3, r9
 800b2be:	ea43 0308 	orr.w	r3, r3, r8
 800b2c2:	4303      	orrs	r3, r0
 800b2c4:	ea43 030c 	orr.w	r3, r3, ip
 800b2c8:	ea43 030a 	orr.w	r3, r3, sl
 800b2cc:	e7de      	b.n	800b28c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2ce:	4303      	orrs	r3, r0
 800b2d0:	ea43 0309 	orr.w	r3, r3, r9
 800b2d4:	ea43 0408 	orr.w	r4, r3, r8
 800b2d8:	ea44 030c 	orr.w	r3, r4, ip
 800b2dc:	ea43 030a 	orr.w	r3, r3, sl
 800b2e0:	e7e5      	b.n	800b2ae <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b2e2:	f1be 0f00 	cmp.w	lr, #0
 800b2e6:	d02c      	beq.n	800b342 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2e8:	ea46 050e 	orr.w	r5, r6, lr
 800b2ec:	688b      	ldr	r3, [r1, #8]
 800b2ee:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2f0:	694e      	ldr	r6, [r1, #20]
 800b2f2:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2f4:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2f6:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2fa:	04b6      	lsls	r6, r6, #18
 800b2fc:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2fe:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b302:	b1a7      	cbz	r7, 800b32e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b304:	433b      	orrs	r3, r7
 800b306:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b308:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b30c:	ea43 0308 	orr.w	r3, r3, r8
 800b310:	ea43 030e 	orr.w	r3, r3, lr
 800b314:	ea43 030c 	orr.w	r3, r3, ip
 800b318:	ea43 0300 	orr.w	r3, r3, r0
 800b31c:	ea43 0306 	orr.w	r3, r3, r6
 800b320:	ea43 0305 	orr.w	r3, r3, r5
 800b324:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b326:	d0b7      	beq.n	800b298 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b328:	684b      	ldr	r3, [r1, #4]
 800b32a:	61a3      	str	r3, [r4, #24]
 800b32c:	e7b4      	b.n	800b298 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b32e:	ea43 0308 	orr.w	r3, r3, r8
 800b332:	ea43 030e 	orr.w	r3, r3, lr
 800b336:	ea43 030c 	orr.w	r3, r3, ip
 800b33a:	4333      	orrs	r3, r6
 800b33c:	432b      	orrs	r3, r5
 800b33e:	6163      	str	r3, [r4, #20]
 800b340:	e7aa      	b.n	800b298 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b342:	b1d7      	cbz	r7, 800b37a <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b344:	ea46 0307 	orr.w	r3, r6, r7
 800b348:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800b34a:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b34c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b350:	ea43 0302 	orr.w	r3, r3, r2
 800b354:	ea43 0304 	orr.w	r3, r3, r4
 800b358:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800b35a:	ea43 0304 	orr.w	r3, r3, r4
 800b35e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800b360:	ea43 0304 	orr.w	r3, r3, r4
 800b364:	68cc      	ldr	r4, [r1, #12]
 800b366:	ea43 0304 	orr.w	r3, r3, r4
 800b36a:	694c      	ldr	r4, [r1, #20]
 800b36c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b370:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b372:	d091      	beq.n	800b298 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b374:	684b      	ldr	r3, [r1, #4]
 800b376:	6183      	str	r3, [r0, #24]
 800b378:	e78e      	b.n	800b298 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b37a:	2e00      	cmp	r6, #0
 800b37c:	d08c      	beq.n	800b298 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b37e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800b380:	6800      	ldr	r0, [r0, #0]
 800b382:	4333      	orrs	r3, r6
 800b384:	4313      	orrs	r3, r2
 800b386:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b388:	4313      	orrs	r3, r2
 800b38a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800b38c:	4313      	orrs	r3, r2
 800b38e:	694a      	ldr	r2, [r1, #20]
 800b390:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800b394:	6143      	str	r3, [r0, #20]
}
 800b396:	e77f      	b.n	800b298 <QSPI_Config+0x74>

0800b398 <QSPI_WaitFlagStateUntilTimeout>:
{
 800b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460e      	mov	r6, r1
 800b3a4:	4615      	mov	r5, r2
 800b3a6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b3a8:	6822      	ldr	r2, [r4, #0]
 800b3aa:	6893      	ldr	r3, [r2, #8]
 800b3ac:	4233      	tst	r3, r6
 800b3ae:	bf14      	ite	ne
 800b3b0:	2301      	movne	r3, #1
 800b3b2:	2300      	moveq	r3, #0
 800b3b4:	42ab      	cmp	r3, r5
 800b3b6:	d101      	bne.n	800b3bc <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e012      	b.n	800b3e2 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b3bc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b3c0:	d0f3      	beq.n	800b3aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3c2:	f7fc fd53 	bl	8007e6c <HAL_GetTick>
 800b3c6:	1bc0      	subs	r0, r0, r7
 800b3c8:	4540      	cmp	r0, r8
 800b3ca:	d802      	bhi.n	800b3d2 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800b3cc:	f1b8 0f00 	cmp.w	r8, #0
 800b3d0:	d1ea      	bne.n	800b3a8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b3d2:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b3d4:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b3d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b3da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b3dc:	f043 0301 	orr.w	r3, r3, #1
 800b3e0:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800b3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b3e8 <HAL_QSPI_Init>:
{
 800b3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b3ec:	f7fc fd3e 	bl	8007e6c <HAL_GetTick>
 800b3f0:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800b3f2:	2c00      	cmp	r4, #0
 800b3f4:	d046      	beq.n	800b484 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b3f6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b3fa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b3fe:	b93b      	cbnz	r3, 800b410 <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 800b400:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800b402:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 800b406:	f7f9 fd91 	bl	8004f2c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800b40a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b40e:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b410:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b412:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	680a      	ldr	r2, [r1, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800b41e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b422:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b424:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b426:	2200      	movs	r2, #0
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	2120      	movs	r1, #32
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7ff ffb3 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800b432:	bb10      	cbnz	r0, 800b47a <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b434:	6822      	ldr	r2, [r4, #0]
 800b436:	69e5      	ldr	r5, [r4, #28]
 800b438:	68e3      	ldr	r3, [r4, #12]
 800b43a:	6811      	ldr	r1, [r2, #0]
 800b43c:	432b      	orrs	r3, r5
 800b43e:	6a25      	ldr	r5, [r4, #32]
 800b440:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800b444:	432b      	orrs	r3, r5
 800b446:	6865      	ldr	r5, [r4, #4]
 800b448:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800b44c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b450:	430b      	orrs	r3, r1
 800b452:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b454:	6855      	ldr	r5, [r2, #4]
 800b456:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800b45a:	430b      	orrs	r3, r1
 800b45c:	6921      	ldr	r1, [r4, #16]
 800b45e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b462:	4909      	ldr	r1, [pc, #36]	@ (800b488 <HAL_QSPI_Init+0xa0>)
 800b464:	4029      	ands	r1, r5
 800b466:	430b      	orrs	r3, r1
 800b468:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800b46a:	6813      	ldr	r3, [r2, #0]
 800b46c:	f043 0301 	orr.w	r3, r3, #1
 800b470:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800b472:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b474:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800b476:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b47a:	2300      	movs	r3, #0
 800b47c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b480:	b003      	add	sp, #12
 800b482:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b484:	2001      	movs	r0, #1
 800b486:	e7fb      	b.n	800b480 <HAL_QSPI_Init+0x98>
 800b488:	ffe0f8fe 	.word	0xffe0f8fe

0800b48c <HAL_QSPI_Command>:
{
 800b48c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	4604      	mov	r4, r0
 800b492:	468a      	mov	sl, r1
 800b494:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b496:	f7fc fce9 	bl	8007e6c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b49a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b49e:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d036      	beq.n	800b512 <HAL_QSPI_Command+0x86>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	2602      	movs	r6, #2
 800b4a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b4ac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	fa5f f983 	uxtb.w	r9, r3
 800b4b6:	d128      	bne.n	800b50a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4b8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2120      	movs	r1, #32
 800b4be:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4c0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b4c2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b4c6:	f8cd 8000 	str.w	r8, [sp]
 800b4ca:	f7ff ff65 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	b9a0      	cbnz	r0, 800b4fc <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7ff fea4 	bl	800b224 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800b4dc:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800b4e0:	b953      	cbnz	r3, 800b4f8 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	464a      	mov	r2, r9
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f8cd 8000 	str.w	r8, [sp]
 800b4ee:	f7ff ff53 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b4f2:	b960      	cbnz	r0, 800b50e <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b4f8:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b502:	4628      	mov	r0, r5
 800b504:	b002      	add	sp, #8
 800b506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800b50a:	4635      	mov	r5, r6
 800b50c:	e7f6      	b.n	800b4fc <HAL_QSPI_Command+0x70>
 800b50e:	4605      	mov	r5, r0
 800b510:	e7f4      	b.n	800b4fc <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800b512:	2502      	movs	r5, #2
 800b514:	e7f5      	b.n	800b502 <HAL_QSPI_Command+0x76>

0800b516 <HAL_QSPI_Transmit>:
{
 800b516:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b51a:	4604      	mov	r4, r0
 800b51c:	4688      	mov	r8, r1
 800b51e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800b520:	f7fc fca4 	bl	8007e6c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b524:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b528:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b52a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d04c      	beq.n	800b5ca <HAL_QSPI_Transmit+0xb4>
 800b530:	2301      	movs	r3, #1
 800b532:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b536:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	b2d8      	uxtb	r0, r3
 800b53e:	d142      	bne.n	800b5c6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b540:	2300      	movs	r3, #0
 800b542:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b544:	f1b8 0f00 	cmp.w	r8, #0
 800b548:	d038      	beq.n	800b5bc <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b54a:	2312      	movs	r3, #18
 800b54c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b550:	692b      	ldr	r3, [r5, #16]
 800b552:	3301      	adds	r3, #1
 800b554:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b556:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800b558:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b55c:	3301      	adds	r3, #1
 800b55e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b560:	696b      	ldr	r3, [r5, #20]
 800b562:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800b566:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800b568:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b56a:	b99b      	cbnz	r3, 800b594 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b56c:	4633      	mov	r3, r6
 800b56e:	2201      	movs	r2, #1
 800b570:	2102      	movs	r1, #2
 800b572:	4620      	mov	r0, r4
 800b574:	9700      	str	r7, [sp, #0]
 800b576:	f7ff ff0f 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b57a:	b910      	cbnz	r0, 800b582 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	2202      	movs	r2, #2
 800b580:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b582:	2301      	movs	r3, #1
 800b584:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b588:	2300      	movs	r3, #0
 800b58a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b58e:	b002      	add	sp, #8
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b594:	4633      	mov	r3, r6
 800b596:	2201      	movs	r2, #1
 800b598:	2104      	movs	r1, #4
 800b59a:	4620      	mov	r0, r4
 800b59c:	9700      	str	r7, [sp, #0]
 800b59e:	f7ff fefb 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d1ed      	bne.n	800b582 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b5a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800b5ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800b5b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5ba:	e7d5      	b.n	800b568 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b5bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b5be:	f043 0308 	orr.w	r3, r3, #8
 800b5c2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b5c4:	e7e0      	b.n	800b588 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800b5c6:	2002      	movs	r0, #2
 800b5c8:	e7de      	b.n	800b588 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800b5ca:	2002      	movs	r0, #2
 800b5cc:	e7df      	b.n	800b58e <HAL_QSPI_Transmit+0x78>

0800b5ce <HAL_QSPI_Receive>:
{
 800b5ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4617      	mov	r7, r2
 800b5d6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800b5d8:	f7fc fc48 	bl	8007e6c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b5dc:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b5de:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b5e0:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800b5e2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d04f      	beq.n	800b68a <HAL_QSPI_Receive+0xbc>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5f0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	b2d8      	uxtb	r0, r3
 800b5f8:	d145      	bne.n	800b686 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b5fe:	f1b8 0f00 	cmp.w	r8, #0
 800b602:	d03b      	beq.n	800b67c <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b604:	2322      	movs	r3, #34	@ 0x22
 800b606:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b60a:	692b      	ldr	r3, [r5, #16]
 800b60c:	3301      	adds	r3, #1
 800b60e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b610:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800b612:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b616:	3301      	adds	r3, #1
 800b618:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b61a:	6969      	ldr	r1, [r5, #20]
 800b61c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800b620:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800b624:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b626:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800b628:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b62a:	b99b      	cbnz	r3, 800b654 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b62c:	4633      	mov	r3, r6
 800b62e:	2201      	movs	r2, #1
 800b630:	2102      	movs	r1, #2
 800b632:	4620      	mov	r0, r4
 800b634:	9700      	str	r7, [sp, #0]
 800b636:	f7ff feaf 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800b63a:	b910      	cbnz	r0, 800b642 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	2202      	movs	r2, #2
 800b640:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b642:	2301      	movs	r3, #1
 800b644:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b648:	2300      	movs	r3, #0
 800b64a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b64e:	b002      	add	sp, #8
 800b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b654:	4633      	mov	r3, r6
 800b656:	2201      	movs	r2, #1
 800b658:	2106      	movs	r1, #6
 800b65a:	4620      	mov	r0, r4
 800b65c:	9700      	str	r7, [sp, #0]
 800b65e:	f7ff fe9b 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800b662:	2800      	cmp	r0, #0
 800b664:	d1ed      	bne.n	800b642 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b666:	f895 2020 	ldrb.w	r2, [r5, #32]
 800b66a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b66c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b66e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b670:	3301      	adds	r3, #1
 800b672:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800b674:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b676:	3b01      	subs	r3, #1
 800b678:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b67a:	e7d5      	b.n	800b628 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b67c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b67e:	f043 0308 	orr.w	r3, r3, #8
 800b682:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b684:	e7e0      	b.n	800b648 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800b686:	2002      	movs	r0, #2
 800b688:	e7de      	b.n	800b648 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800b68a:	2002      	movs	r0, #2
 800b68c:	e7df      	b.n	800b64e <HAL_QSPI_Receive+0x80>

0800b68e <HAL_QSPI_AutoPolling>:
{
 800b68e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b692:	4604      	mov	r4, r0
 800b694:	461f      	mov	r7, r3
 800b696:	4689      	mov	r9, r1
 800b698:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800b69a:	f7fc fbe7 	bl	8007e6c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b69e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b6a2:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d041      	beq.n	800b72c <HAL_QSPI_AutoPolling+0x9e>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b6ae:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	fa5f f883 	uxtb.w	r8, r3
 800b6b8:	d136      	bne.n	800b728 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b6ba:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b6bc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b6be:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b6c0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b6c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	9700      	str	r7, [sp, #0]
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7ff fe64 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b6d0:	bb20      	cbnz	r0, 800b71c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b6d2:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b6d4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b6d6:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b6d8:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b6da:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b6dc:	686b      	ldr	r3, [r5, #4]
 800b6de:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b6e0:	68ab      	ldr	r3, [r5, #8]
 800b6e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b6e4:	6813      	ldr	r3, [r2, #0]
 800b6e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b6ea:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b6ec:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b6ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b6f2:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b6f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800b6f8:	68eb      	ldr	r3, [r5, #12]
 800b6fa:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b6fe:	f7ff fd91 	bl	800b224 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b702:	4633      	mov	r3, r6
 800b704:	4642      	mov	r2, r8
 800b706:	2108      	movs	r1, #8
 800b708:	4620      	mov	r0, r4
 800b70a:	9700      	str	r7, [sp, #0]
 800b70c:	f7ff fe44 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b710:	b920      	cbnz	r0, 800b71c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	2208      	movs	r2, #8
 800b716:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b718:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b71c:	2300      	movs	r3, #0
 800b71e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b722:	b003      	add	sp, #12
 800b724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800b728:	2002      	movs	r0, #2
 800b72a:	e7f7      	b.n	800b71c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800b72c:	2002      	movs	r0, #2
 800b72e:	e7f8      	b.n	800b722 <HAL_QSPI_AutoPolling+0x94>

0800b730 <HAL_QSPI_MemoryMapped>:
{
 800b730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b732:	4604      	mov	r4, r0
 800b734:	4616      	mov	r6, r2
 800b736:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b738:	f7fc fb98 	bl	8007e6c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b73c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b740:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b742:	2a01      	cmp	r2, #1
 800b744:	d033      	beq.n	800b7ae <HAL_QSPI_MemoryMapped+0x7e>
 800b746:	2201      	movs	r2, #1
 800b748:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b74c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800b750:	2a01      	cmp	r2, #1
 800b752:	d12a      	bne.n	800b7aa <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b754:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b756:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b758:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b75a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b75c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b760:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b762:	9100      	str	r1, [sp, #0]
 800b764:	2120      	movs	r1, #32
 800b766:	f7ff fe17 	bl	800b398 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b76a:	4605      	mov	r5, r0
 800b76c:	b9b8      	cbnz	r0, 800b79e <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	6872      	ldr	r2, [r6, #4]
 800b772:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b774:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b776:	f020 0008 	bic.w	r0, r0, #8
 800b77a:	ea40 0002 	orr.w	r0, r0, r2
 800b77e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b780:	d107      	bne.n	800b792 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b782:	6832      	ldr	r2, [r6, #0]
 800b784:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b786:	2210      	movs	r2, #16
 800b788:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b790:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b792:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800b796:	4639      	mov	r1, r7
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff fd43 	bl	800b224 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	b003      	add	sp, #12
 800b7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800b7aa:	2502      	movs	r5, #2
 800b7ac:	e7f7      	b.n	800b79e <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800b7ae:	2502      	movs	r5, #2
 800b7b0:	e7f8      	b.n	800b7a4 <HAL_QSPI_MemoryMapped+0x74>
	...

0800b7b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	b918      	cbnz	r0, 800b7c4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800b7bc:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 800b7be:	b002      	add	sp, #8
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7c4:	6803      	ldr	r3, [r0, #0]
 800b7c6:	07de      	lsls	r6, r3, #31
 800b7c8:	d410      	bmi.n	800b7ec <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	079d      	lsls	r5, r3, #30
 800b7ce:	d45e      	bmi.n	800b88e <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	0719      	lsls	r1, r3, #28
 800b7d4:	f100 80a3 	bmi.w	800b91e <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	075a      	lsls	r2, r3, #29
 800b7dc:	f100 80c4 	bmi.w	800b968 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7e0:	69a2      	ldr	r2, [r4, #24]
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	f040 812e 	bne.w	800ba44 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e7e8      	b.n	800b7be <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b7ec:	4b93      	ldr	r3, [pc, #588]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	f002 020c 	and.w	r2, r2, #12
 800b7f4:	2a04      	cmp	r2, #4
 800b7f6:	d007      	beq.n	800b808 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	f002 020c 	and.w	r2, r2, #12
 800b7fe:	2a08      	cmp	r2, #8
 800b800:	d10a      	bne.n	800b818 <HAL_RCC_OscConfig+0x64>
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	0259      	lsls	r1, r3, #9
 800b806:	d507      	bpl.n	800b818 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b808:	4b8c      	ldr	r3, [pc, #560]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	039a      	lsls	r2, r3, #14
 800b80e:	d5dc      	bpl.n	800b7ca <HAL_RCC_OscConfig+0x16>
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1d9      	bne.n	800b7ca <HAL_RCC_OscConfig+0x16>
 800b816:	e7d1      	b.n	800b7bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	4d88      	ldr	r5, [pc, #544]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b81c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b820:	d111      	bne.n	800b846 <HAL_RCC_OscConfig+0x92>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b828:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b82a:	f7fc fb1f 	bl	8007e6c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b82e:	4e83      	ldr	r6, [pc, #524]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800b830:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b832:	6833      	ldr	r3, [r6, #0]
 800b834:	039b      	lsls	r3, r3, #14
 800b836:	d4c8      	bmi.n	800b7ca <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b838:	f7fc fb18 	bl	8007e6c <HAL_GetTick>
 800b83c:	1b40      	subs	r0, r0, r5
 800b83e:	2864      	cmp	r0, #100	@ 0x64
 800b840:	d9f7      	bls.n	800b832 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800b842:	2003      	movs	r0, #3
 800b844:	e7bb      	b.n	800b7be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b846:	b99b      	cbnz	r3, 800b870 <HAL_RCC_OscConfig+0xbc>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b84e:	602b      	str	r3, [r5, #0]
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b856:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b858:	f7fc fb08 	bl	8007e6c <HAL_GetTick>
 800b85c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b85e:	682b      	ldr	r3, [r5, #0]
 800b860:	039f      	lsls	r7, r3, #14
 800b862:	d5b2      	bpl.n	800b7ca <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b864:	f7fc fb02 	bl	8007e6c <HAL_GetTick>
 800b868:	1b80      	subs	r0, r0, r6
 800b86a:	2864      	cmp	r0, #100	@ 0x64
 800b86c:	d9f7      	bls.n	800b85e <HAL_RCC_OscConfig+0xaa>
 800b86e:	e7e8      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	d103      	bne.n	800b880 <HAL_RCC_OscConfig+0xcc>
 800b878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b87c:	602b      	str	r3, [r5, #0]
 800b87e:	e7d0      	b.n	800b822 <HAL_RCC_OscConfig+0x6e>
 800b880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b884:	602b      	str	r3, [r5, #0]
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b88c:	e7cc      	b.n	800b828 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b88e:	4b6b      	ldr	r3, [pc, #428]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b890:	689a      	ldr	r2, [r3, #8]
 800b892:	f012 0f0c 	tst.w	r2, #12
 800b896:	d007      	beq.n	800b8a8 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	f002 020c 	and.w	r2, r2, #12
 800b89e:	2a08      	cmp	r2, #8
 800b8a0:	d111      	bne.n	800b8c6 <HAL_RCC_OscConfig+0x112>
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	025d      	lsls	r5, r3, #9
 800b8a6:	d40e      	bmi.n	800b8c6 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8a8:	4a64      	ldr	r2, [pc, #400]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b8aa:	6813      	ldr	r3, [r2, #0]
 800b8ac:	0799      	lsls	r1, r3, #30
 800b8ae:	d502      	bpl.n	800b8b6 <HAL_RCC_OscConfig+0x102>
 800b8b0:	68e3      	ldr	r3, [r4, #12]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d182      	bne.n	800b7bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8b6:	6813      	ldr	r3, [r2, #0]
 800b8b8:	6921      	ldr	r1, [r4, #16]
 800b8ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b8be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b8c2:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8c4:	e784      	b.n	800b7d0 <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b8c6:	68e3      	ldr	r3, [r4, #12]
 800b8c8:	4d5c      	ldr	r5, [pc, #368]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b8ca:	b1bb      	cbz	r3, 800b8fc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b8d4:	f7fc faca 	bl	8007e6c <HAL_GetTick>
 800b8d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8da:	682b      	ldr	r3, [r5, #0]
 800b8dc:	079b      	lsls	r3, r3, #30
 800b8de:	d507      	bpl.n	800b8f0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	6922      	ldr	r2, [r4, #16]
 800b8e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b8e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b8ec:	602b      	str	r3, [r5, #0]
 800b8ee:	e76f      	b.n	800b7d0 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8f0:	f7fc fabc 	bl	8007e6c <HAL_GetTick>
 800b8f4:	1b80      	subs	r0, r0, r6
 800b8f6:	2802      	cmp	r0, #2
 800b8f8:	d9ef      	bls.n	800b8da <HAL_RCC_OscConfig+0x126>
 800b8fa:	e7a2      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	f023 0301 	bic.w	r3, r3, #1
 800b902:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b904:	f7fc fab2 	bl	8007e6c <HAL_GetTick>
 800b908:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	079f      	lsls	r7, r3, #30
 800b90e:	f57f af5f 	bpl.w	800b7d0 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b912:	f7fc faab 	bl	8007e6c <HAL_GetTick>
 800b916:	1b80      	subs	r0, r0, r6
 800b918:	2802      	cmp	r0, #2
 800b91a:	d9f6      	bls.n	800b90a <HAL_RCC_OscConfig+0x156>
 800b91c:	e791      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b91e:	6963      	ldr	r3, [r4, #20]
 800b920:	4d46      	ldr	r5, [pc, #280]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b922:	b183      	cbz	r3, 800b946 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800b924:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b92c:	f7fc fa9e 	bl	8007e6c <HAL_GetTick>
 800b930:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b932:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b934:	079b      	lsls	r3, r3, #30
 800b936:	f53f af4f 	bmi.w	800b7d8 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b93a:	f7fc fa97 	bl	8007e6c <HAL_GetTick>
 800b93e:	1b80      	subs	r0, r0, r6
 800b940:	2802      	cmp	r0, #2
 800b942:	d9f6      	bls.n	800b932 <HAL_RCC_OscConfig+0x17e>
 800b944:	e77d      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800b946:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b948:	f023 0301 	bic.w	r3, r3, #1
 800b94c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b94e:	f7fc fa8d 	bl	8007e6c <HAL_GetTick>
 800b952:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b954:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b956:	079f      	lsls	r7, r3, #30
 800b958:	f57f af3e 	bpl.w	800b7d8 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b95c:	f7fc fa86 	bl	8007e6c <HAL_GetTick>
 800b960:	1b80      	subs	r0, r0, r6
 800b962:	2802      	cmp	r0, #2
 800b964:	d9f6      	bls.n	800b954 <HAL_RCC_OscConfig+0x1a0>
 800b966:	e76c      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b968:	4b34      	ldr	r3, [pc, #208]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b96a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b96c:	00d5      	lsls	r5, r2, #3
 800b96e:	d427      	bmi.n	800b9c0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 800b972:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800b974:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b978:	641a      	str	r2, [r3, #64]	@ 0x40
 800b97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b984:	4d2e      	ldr	r5, [pc, #184]	@ (800ba40 <HAL_RCC_OscConfig+0x28c>)
 800b986:	682b      	ldr	r3, [r5, #0]
 800b988:	05d8      	lsls	r0, r3, #23
 800b98a:	d51b      	bpl.n	800b9c4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b98c:	68a3      	ldr	r3, [r4, #8]
 800b98e:	4d2b      	ldr	r5, [pc, #172]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b990:	2b01      	cmp	r3, #1
 800b992:	d127      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x230>
 800b994:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b996:	f043 0301 	orr.w	r3, r3, #1
 800b99a:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b99c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800b9a0:	f7fc fa64 	bl	8007e6c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9a4:	4e25      	ldr	r6, [pc, #148]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800b9a6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9a8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800b9aa:	079a      	lsls	r2, r3, #30
 800b9ac:	d53f      	bpl.n	800ba2e <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800b9ae:	2f00      	cmp	r7, #0
 800b9b0:	f43f af16 	beq.w	800b7e0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9b4:	4a21      	ldr	r2, [pc, #132]	@ (800ba3c <HAL_RCC_OscConfig+0x288>)
 800b9b6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b9b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800b9be:	e70f      	b.n	800b7e0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800b9c0:	2700      	movs	r7, #0
 800b9c2:	e7df      	b.n	800b984 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b9cc:	f7fc fa4e 	bl	8007e6c <HAL_GetTick>
 800b9d0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9d2:	682b      	ldr	r3, [r5, #0]
 800b9d4:	05d9      	lsls	r1, r3, #23
 800b9d6:	d4d9      	bmi.n	800b98c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9d8:	f7fc fa48 	bl	8007e6c <HAL_GetTick>
 800b9dc:	1b80      	subs	r0, r0, r6
 800b9de:	2864      	cmp	r0, #100	@ 0x64
 800b9e0:	d9f7      	bls.n	800b9d2 <HAL_RCC_OscConfig+0x21e>
 800b9e2:	e72e      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9e4:	b9ab      	cbnz	r3, 800ba12 <HAL_RCC_OscConfig+0x25e>
 800b9e6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9e8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9ec:	f023 0301 	bic.w	r3, r3, #1
 800b9f0:	672b      	str	r3, [r5, #112]	@ 0x70
 800b9f2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b9f4:	f023 0304 	bic.w	r3, r3, #4
 800b9f8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800b9fa:	f7fc fa37 	bl	8007e6c <HAL_GetTick>
 800b9fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba00:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ba02:	079b      	lsls	r3, r3, #30
 800ba04:	d5d3      	bpl.n	800b9ae <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba06:	f7fc fa31 	bl	8007e6c <HAL_GetTick>
 800ba0a:	1b80      	subs	r0, r0, r6
 800ba0c:	4540      	cmp	r0, r8
 800ba0e:	d9f7      	bls.n	800ba00 <HAL_RCC_OscConfig+0x24c>
 800ba10:	e717      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ba16:	d103      	bne.n	800ba20 <HAL_RCC_OscConfig+0x26c>
 800ba18:	f043 0304 	orr.w	r3, r3, #4
 800ba1c:	672b      	str	r3, [r5, #112]	@ 0x70
 800ba1e:	e7b9      	b.n	800b994 <HAL_RCC_OscConfig+0x1e0>
 800ba20:	f023 0301 	bic.w	r3, r3, #1
 800ba24:	672b      	str	r3, [r5, #112]	@ 0x70
 800ba26:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ba28:	f023 0304 	bic.w	r3, r3, #4
 800ba2c:	e7b5      	b.n	800b99a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba2e:	f7fc fa1d 	bl	8007e6c <HAL_GetTick>
 800ba32:	1b40      	subs	r0, r0, r5
 800ba34:	4540      	cmp	r0, r8
 800ba36:	d9b7      	bls.n	800b9a8 <HAL_RCC_OscConfig+0x1f4>
 800ba38:	e703      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
 800ba3a:	bf00      	nop
 800ba3c:	40023800 	.word	0x40023800
 800ba40:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ba44:	4d3c      	ldr	r5, [pc, #240]	@ (800bb38 <HAL_RCC_OscConfig+0x384>)
 800ba46:	68ab      	ldr	r3, [r5, #8]
 800ba48:	f003 030c 	and.w	r3, r3, #12
 800ba4c:	2b08      	cmp	r3, #8
 800ba4e:	d042      	beq.n	800bad6 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 800ba50:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba52:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800ba54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba58:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba5a:	d12f      	bne.n	800babc <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800ba5c:	f7fc fa06 	bl	8007e6c <HAL_GetTick>
 800ba60:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	0199      	lsls	r1, r3, #6
 800ba66:	d423      	bmi.n	800bab0 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba68:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ba70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ba74:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ba76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ba7c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800ba80:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ba82:	0852      	lsrs	r2, r2, #1
 800ba84:	3a01      	subs	r2, #1
 800ba86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ba94:	f7fc f9ea 	bl	8007e6c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba98:	4d27      	ldr	r5, [pc, #156]	@ (800bb38 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 800ba9a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	019a      	lsls	r2, r3, #6
 800baa0:	f53f aea2 	bmi.w	800b7e8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baa4:	f7fc f9e2 	bl	8007e6c <HAL_GetTick>
 800baa8:	1b00      	subs	r0, r0, r4
 800baaa:	2802      	cmp	r0, #2
 800baac:	d9f6      	bls.n	800ba9c <HAL_RCC_OscConfig+0x2e8>
 800baae:	e6c8      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bab0:	f7fc f9dc 	bl	8007e6c <HAL_GetTick>
 800bab4:	1b80      	subs	r0, r0, r6
 800bab6:	2802      	cmp	r0, #2
 800bab8:	d9d3      	bls.n	800ba62 <HAL_RCC_OscConfig+0x2ae>
 800baba:	e6c2      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800babc:	f7fc f9d6 	bl	8007e6c <HAL_GetTick>
 800bac0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	019b      	lsls	r3, r3, #6
 800bac6:	f57f ae8f 	bpl.w	800b7e8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baca:	f7fc f9cf 	bl	8007e6c <HAL_GetTick>
 800bace:	1b00      	subs	r0, r0, r4
 800bad0:	2802      	cmp	r0, #2
 800bad2:	d9f6      	bls.n	800bac2 <HAL_RCC_OscConfig+0x30e>
 800bad4:	e6b5      	b.n	800b842 <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bad6:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800bad8:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bada:	f43f ae6f 	beq.w	800b7bc <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bade:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bae2:	69e1      	ldr	r1, [r4, #28]
 800bae4:	428a      	cmp	r2, r1
 800bae6:	f47f ae69 	bne.w	800b7bc <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800baea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800baee:	6a21      	ldr	r1, [r4, #32]
 800baf0:	428a      	cmp	r2, r1
 800baf2:	f47f ae63 	bne.w	800b7bc <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800baf6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bafa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bafc:	401a      	ands	r2, r3
 800bafe:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800bb02:	f47f ae5b 	bne.w	800b7bc <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb06:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bb08:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800bb0c:	0852      	lsrs	r2, r2, #1
 800bb0e:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb10:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800bb14:	f47f ae52 	bne.w	800b7bc <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb18:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800bb1c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb1e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800bb22:	f47f ae4b 	bne.w	800b7bc <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bb26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800bb28:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb2c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800bb30:	bf14      	ite	ne
 800bb32:	2001      	movne	r0, #1
 800bb34:	2000      	moveq	r0, #0
 800bb36:	e642      	b.n	800b7be <HAL_RCC_OscConfig+0xa>
 800bb38:	40023800 	.word	0x40023800

0800bb3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb3c:	4913      	ldr	r1, [pc, #76]	@ (800bb8c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800bb3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb40:	688b      	ldr	r3, [r1, #8]
 800bb42:	f003 030c 	and.w	r3, r3, #12
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d01b      	beq.n	800bb82 <HAL_RCC_GetSysClockFreq+0x46>
 800bb4a:	2b08      	cmp	r3, #8
 800bb4c:	d11b      	bne.n	800bb86 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb4e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bb50:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb52:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb54:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bb58:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800bb60:	bf1a      	itte	ne
 800bb62:	480b      	ldrne	r0, [pc, #44]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x54>)
 800bb64:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb66:	480b      	ldreq	r0, [pc, #44]	@ (800bb94 <HAL_RCC_GetSysClockFreq+0x58>)
 800bb68:	fba1 0100 	umull	r0, r1, r1, r0
 800bb6c:	f7f4 fc08 	bl	8000380 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bb70:	4b06      	ldr	r3, [pc, #24]	@ (800bb8c <HAL_RCC_GetSysClockFreq+0x50>)
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800bb78:	3301      	adds	r3, #1
 800bb7a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800bb7c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800bb80:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb82:	4803      	ldr	r0, [pc, #12]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x54>)
 800bb84:	e7fc      	b.n	800bb80 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800bb86:	4803      	ldr	r0, [pc, #12]	@ (800bb94 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800bb88:	e7fa      	b.n	800bb80 <HAL_RCC_GetSysClockFreq+0x44>
 800bb8a:	bf00      	nop
 800bb8c:	40023800 	.word	0x40023800
 800bb90:	017d7840 	.word	0x017d7840
 800bb94:	00f42400 	.word	0x00f42400

0800bb98 <HAL_RCC_ClockConfig>:
{
 800bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800bb9e:	4604      	mov	r4, r0
 800bba0:	b910      	cbnz	r0, 800bba8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800bba2:	2001      	movs	r0, #1
}
 800bba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bba8:	4a45      	ldr	r2, [pc, #276]	@ (800bcc0 <HAL_RCC_ClockConfig+0x128>)
 800bbaa:	6813      	ldr	r3, [r2, #0]
 800bbac:	f003 030f 	and.w	r3, r3, #15
 800bbb0:	428b      	cmp	r3, r1
 800bbb2:	d328      	bcc.n	800bc06 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbb4:	6821      	ldr	r1, [r4, #0]
 800bbb6:	078f      	lsls	r7, r1, #30
 800bbb8:	d430      	bmi.n	800bc1c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbba:	07c8      	lsls	r0, r1, #31
 800bbbc:	d443      	bmi.n	800bc46 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbbe:	4a40      	ldr	r2, [pc, #256]	@ (800bcc0 <HAL_RCC_ClockConfig+0x128>)
 800bbc0:	6813      	ldr	r3, [r2, #0]
 800bbc2:	f003 030f 	and.w	r3, r3, #15
 800bbc6:	42ab      	cmp	r3, r5
 800bbc8:	d866      	bhi.n	800bc98 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbca:	6822      	ldr	r2, [r4, #0]
 800bbcc:	0751      	lsls	r1, r2, #29
 800bbce:	d46f      	bmi.n	800bcb0 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbd0:	0713      	lsls	r3, r2, #28
 800bbd2:	d507      	bpl.n	800bbe4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bbd4:	4a3b      	ldr	r2, [pc, #236]	@ (800bcc4 <HAL_RCC_ClockConfig+0x12c>)
 800bbd6:	6921      	ldr	r1, [r4, #16]
 800bbd8:	6893      	ldr	r3, [r2, #8]
 800bbda:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800bbde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bbe2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bbe4:	f7ff ffaa 	bl	800bb3c <HAL_RCC_GetSysClockFreq>
 800bbe8:	4b36      	ldr	r3, [pc, #216]	@ (800bcc4 <HAL_RCC_ClockConfig+0x12c>)
 800bbea:	4a37      	ldr	r2, [pc, #220]	@ (800bcc8 <HAL_RCC_ClockConfig+0x130>)
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bbf2:	5cd3      	ldrb	r3, [r2, r3]
 800bbf4:	40d8      	lsrs	r0, r3
 800bbf6:	4b35      	ldr	r3, [pc, #212]	@ (800bccc <HAL_RCC_ClockConfig+0x134>)
 800bbf8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800bbfa:	4b35      	ldr	r3, [pc, #212]	@ (800bcd0 <HAL_RCC_ClockConfig+0x138>)
 800bbfc:	6818      	ldr	r0, [r3, #0]
 800bbfe:	f7f9 fac7 	bl	8005190 <HAL_InitTick>
  return HAL_OK;
 800bc02:	2000      	movs	r0, #0
 800bc04:	e7ce      	b.n	800bba4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc06:	6813      	ldr	r3, [r2, #0]
 800bc08:	f023 030f 	bic.w	r3, r3, #15
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc10:	6813      	ldr	r3, [r2, #0]
 800bc12:	f003 030f 	and.w	r3, r3, #15
 800bc16:	428b      	cmp	r3, r1
 800bc18:	d1c3      	bne.n	800bba2 <HAL_RCC_ClockConfig+0xa>
 800bc1a:	e7cb      	b.n	800bbb4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc1c:	f011 0f04 	tst.w	r1, #4
 800bc20:	4b28      	ldr	r3, [pc, #160]	@ (800bcc4 <HAL_RCC_ClockConfig+0x12c>)
 800bc22:	d003      	beq.n	800bc2c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800bc2a:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc2c:	070e      	lsls	r6, r1, #28
 800bc2e:	d503      	bpl.n	800bc38 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800bc36:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	68a0      	ldr	r0, [r4, #8]
 800bc3c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bc40:	4302      	orrs	r2, r0
 800bc42:	609a      	str	r2, [r3, #8]
 800bc44:	e7b9      	b.n	800bbba <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc46:	6861      	ldr	r1, [r4, #4]
 800bc48:	4b1e      	ldr	r3, [pc, #120]	@ (800bcc4 <HAL_RCC_ClockConfig+0x12c>)
 800bc4a:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc4c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc4e:	d11b      	bne.n	800bc88 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc50:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc54:	d0a5      	beq.n	800bba2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc56:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc58:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc5c:	4f19      	ldr	r7, [pc, #100]	@ (800bcc4 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc5e:	f022 0203 	bic.w	r2, r2, #3
 800bc62:	430a      	orrs	r2, r1
 800bc64:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800bc66:	f7fc f901 	bl	8007e6c <HAL_GetTick>
 800bc6a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6862      	ldr	r2, [r4, #4]
 800bc70:	f003 030c 	and.w	r3, r3, #12
 800bc74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bc78:	d0a1      	beq.n	800bbbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc7a:	f7fc f8f7 	bl	8007e6c <HAL_GetTick>
 800bc7e:	1b80      	subs	r0, r0, r6
 800bc80:	4540      	cmp	r0, r8
 800bc82:	d9f3      	bls.n	800bc6c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800bc84:	2003      	movs	r0, #3
 800bc86:	e78d      	b.n	800bba4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc88:	2902      	cmp	r1, #2
 800bc8a:	d102      	bne.n	800bc92 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc8c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800bc90:	e7e0      	b.n	800bc54 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc92:	f012 0f02 	tst.w	r2, #2
 800bc96:	e7dd      	b.n	800bc54 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc98:	6813      	ldr	r3, [r2, #0]
 800bc9a:	f023 030f 	bic.w	r3, r3, #15
 800bc9e:	432b      	orrs	r3, r5
 800bca0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bca2:	6813      	ldr	r3, [r2, #0]
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	42ab      	cmp	r3, r5
 800bcaa:	f47f af7a 	bne.w	800bba2 <HAL_RCC_ClockConfig+0xa>
 800bcae:	e78c      	b.n	800bbca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcb0:	4904      	ldr	r1, [pc, #16]	@ (800bcc4 <HAL_RCC_ClockConfig+0x12c>)
 800bcb2:	68e0      	ldr	r0, [r4, #12]
 800bcb4:	688b      	ldr	r3, [r1, #8]
 800bcb6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800bcba:	4303      	orrs	r3, r0
 800bcbc:	608b      	str	r3, [r1, #8]
 800bcbe:	e787      	b.n	800bbd0 <HAL_RCC_ClockConfig+0x38>
 800bcc0:	40023c00 	.word	0x40023c00
 800bcc4:	40023800 	.word	0x40023800
 800bcc8:	0802cf95 	.word	0x0802cf95
 800bccc:	20000060 	.word	0x20000060
 800bcd0:	20000068 	.word	0x20000068

0800bcd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bcd4:	4b04      	ldr	r3, [pc, #16]	@ (800bce8 <HAL_RCC_GetPCLK1Freq+0x14>)
 800bcd6:	4a05      	ldr	r2, [pc, #20]	@ (800bcec <HAL_RCC_GetPCLK1Freq+0x18>)
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800bcde:	5cd3      	ldrb	r3, [r2, r3]
 800bce0:	4a03      	ldr	r2, [pc, #12]	@ (800bcf0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800bce2:	6810      	ldr	r0, [r2, #0]
}
 800bce4:	40d8      	lsrs	r0, r3
 800bce6:	4770      	bx	lr
 800bce8:	40023800 	.word	0x40023800
 800bcec:	0802cf8d 	.word	0x0802cf8d
 800bcf0:	20000060 	.word	0x20000060

0800bcf4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bcf4:	230f      	movs	r3, #15
 800bcf6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bcf8:	4b0b      	ldr	r3, [pc, #44]	@ (800bd28 <HAL_RCC_GetClockConfig+0x34>)
 800bcfa:	689a      	ldr	r2, [r3, #8]
 800bcfc:	f002 0203 	and.w	r2, r2, #3
 800bd00:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800bd08:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bd0a:	689a      	ldr	r2, [r3, #8]
 800bd0c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800bd10:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	08db      	lsrs	r3, r3, #3
 800bd16:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800bd1a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bd1c:	4b03      	ldr	r3, [pc, #12]	@ (800bd2c <HAL_RCC_GetClockConfig+0x38>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 030f 	and.w	r3, r3, #15
 800bd24:	600b      	str	r3, [r1, #0]
}
 800bd26:	4770      	bx	lr
 800bd28:	40023800 	.word	0x40023800
 800bd2c:	40023c00 	.word	0x40023c00

0800bd30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bd30:	6803      	ldr	r3, [r0, #0]
{
 800bd32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bd36:	f013 0601 	ands.w	r6, r3, #1
{
 800bd3a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bd3c:	d00b      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd3e:	4ab1      	ldr	r2, [pc, #708]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd40:	6891      	ldr	r1, [r2, #8]
 800bd42:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800bd46:	6091      	str	r1, [r2, #8]
 800bd48:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800bd4a:	6891      	ldr	r1, [r2, #8]
 800bd4c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bd4e:	fab6 f686 	clz	r6, r6
 800bd52:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd54:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bd56:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800bd5a:	d012      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd5c:	49a9      	ldr	r1, [pc, #676]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd5e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800bd60:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bd64:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd68:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800bd6c:	bf08      	it	eq
 800bd6e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd70:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd74:	bf16      	itet	ne
 800bd76:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800bd7a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd7c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd7e:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bd82:	02d9      	lsls	r1, r3, #11
 800bd84:	d510      	bpl.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd86:	489f      	ldr	r0, [pc, #636]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd88:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800bd8a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd8e:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd92:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800bd96:	ea42 0201 	orr.w	r2, r2, r1
 800bd9a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd9e:	f000 81aa 	beq.w	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800bda2:	2900      	cmp	r1, #0
 800bda4:	bf08      	it	eq
 800bda6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800bda8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800bdac:	bf18      	it	ne
 800bdae:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bdb0:	069a      	lsls	r2, r3, #26
 800bdb2:	d532      	bpl.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bdb4:	4b93      	ldr	r3, [pc, #588]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bdb6:	4f94      	ldr	r7, [pc, #592]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800bdb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bdba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800bdbe:	641a      	str	r2, [r3, #64]	@ 0x40
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdd0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdd2:	f7fc f84b 	bl	8007e6c <HAL_GetTick>
 800bdd6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	05db      	lsls	r3, r3, #23
 800bddc:	f140 818d 	bpl.w	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bde0:	4f88      	ldr	r7, [pc, #544]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bde2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bde4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bde6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800bdea:	f040 8191 	bne.w	800c110 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bdee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bdf0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800bdf4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bdf8:	4a82      	ldr	r2, [pc, #520]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdfa:	f040 81ae 	bne.w	800c15a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800bdfe:	6891      	ldr	r1, [r2, #8]
 800be00:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800be04:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800be08:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800be0c:	4301      	orrs	r1, r0
 800be0e:	6091      	str	r1, [r2, #8]
 800be10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be14:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800be16:	430b      	orrs	r3, r1
 800be18:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	06da      	lsls	r2, r3, #27
 800be1e:	d50c      	bpl.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be20:	4a78      	ldr	r2, [pc, #480]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be22:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800be26:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800be2a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800be2e:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800be32:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800be34:	4301      	orrs	r1, r0
 800be36:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be3a:	045f      	lsls	r7, r3, #17
 800be3c:	d508      	bpl.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be3e:	4971      	ldr	r1, [pc, #452]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be40:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800be42:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be46:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800be4a:	4302      	orrs	r2, r0
 800be4c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be50:	0418      	lsls	r0, r3, #16
 800be52:	d508      	bpl.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be54:	496b      	ldr	r1, [pc, #428]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be56:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800be58:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be5c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800be60:	4302      	orrs	r2, r0
 800be62:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be66:	03d9      	lsls	r1, r3, #15
 800be68:	d508      	bpl.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be6a:	4966      	ldr	r1, [pc, #408]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be6c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800be6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be72:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800be76:	4302      	orrs	r2, r0
 800be78:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be7c:	039a      	lsls	r2, r3, #14
 800be7e:	d508      	bpl.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be80:	4960      	ldr	r1, [pc, #384]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be82:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800be84:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be88:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800be8c:	4302      	orrs	r2, r0
 800be8e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be92:	065f      	lsls	r7, r3, #25
 800be94:	d508      	bpl.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be96:	495b      	ldr	r1, [pc, #364]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be98:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800be9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800be9e:	f022 0203 	bic.w	r2, r2, #3
 800bea2:	4302      	orrs	r2, r0
 800bea4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bea8:	0618      	lsls	r0, r3, #24
 800beaa:	d508      	bpl.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800beac:	4955      	ldr	r1, [pc, #340]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800beae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800beb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800beb4:	f022 020c 	bic.w	r2, r2, #12
 800beb8:	4302      	orrs	r2, r0
 800beba:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bebe:	05d9      	lsls	r1, r3, #23
 800bec0:	d508      	bpl.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bec2:	4950      	ldr	r1, [pc, #320]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bec4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800bec6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800beca:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800bece:	4302      	orrs	r2, r0
 800bed0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bed4:	059a      	lsls	r2, r3, #22
 800bed6:	d508      	bpl.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bed8:	494a      	ldr	r1, [pc, #296]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800beda:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800bedc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bee0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800bee4:	4302      	orrs	r2, r0
 800bee6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800beea:	055f      	lsls	r7, r3, #21
 800beec:	d508      	bpl.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800beee:	4945      	ldr	r1, [pc, #276]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bef0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800bef2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bef6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800befa:	4302      	orrs	r2, r0
 800befc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bf00:	0518      	lsls	r0, r3, #20
 800bf02:	d508      	bpl.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bf04:	493f      	ldr	r1, [pc, #252]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf08:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bf0c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800bf10:	4302      	orrs	r2, r0
 800bf12:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bf16:	04d9      	lsls	r1, r3, #19
 800bf18:	d508      	bpl.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bf1a:	493a      	ldr	r1, [pc, #232]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf1c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800bf1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bf22:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800bf26:	4302      	orrs	r2, r0
 800bf28:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bf2c:	049a      	lsls	r2, r3, #18
 800bf2e:	d508      	bpl.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bf30:	4934      	ldr	r1, [pc, #208]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf32:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800bf34:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bf38:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bf3c:	4302      	orrs	r2, r0
 800bf3e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf42:	025f      	lsls	r7, r3, #9
 800bf44:	d508      	bpl.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf46:	492f      	ldr	r1, [pc, #188]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf48:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800bf4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bf4e:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800bf52:	4302      	orrs	r2, r0
 800bf54:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bf58:	0298      	lsls	r0, r3, #10
 800bf5a:	d50c      	bpl.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf5c:	4829      	ldr	r0, [pc, #164]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf5e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800bf60:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800bf64:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf68:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800bf6c:	bf08      	it	eq
 800bf6e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf70:	430a      	orrs	r2, r1
 800bf72:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800bf76:	f013 0f08 	tst.w	r3, #8
 800bf7a:	bf18      	it	ne
 800bf7c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf7e:	0359      	lsls	r1, r3, #13
 800bf80:	d508      	bpl.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf82:	4920      	ldr	r1, [pc, #128]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf84:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800bf86:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bf8a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800bf8e:	4302      	orrs	r2, r0
 800bf90:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bf94:	021a      	lsls	r2, r3, #8
 800bf96:	d509      	bpl.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bf98:	491a      	ldr	r1, [pc, #104]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf9a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800bf9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bfa2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800bfa6:	4302      	orrs	r2, r0
 800bfa8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bfac:	015f      	lsls	r7, r3, #5
 800bfae:	d509      	bpl.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bfb0:	4914      	ldr	r1, [pc, #80]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfb2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800bfb6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800bfba:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800bfbe:	4302      	orrs	r2, r0
 800bfc0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfc4:	0118      	lsls	r0, r3, #4
 800bfc6:	d509      	bpl.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfc8:	490e      	ldr	r1, [pc, #56]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfca:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800bfce:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800bfd2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800bfd6:	4302      	orrs	r2, r0
 800bfd8:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bfdc:	00d9      	lsls	r1, r3, #3
 800bfde:	d509      	bpl.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bfe0:	4908      	ldr	r1, [pc, #32]	@ (800c004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfe2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800bfe6:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800bfea:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800bfee:	4302      	orrs	r2, r0
 800bff0:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bff4:	2e01      	cmp	r6, #1
 800bff6:	f000 80b4 	beq.w	800c162 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800bffa:	019a      	lsls	r2, r3, #6
 800bffc:	f100 80b1 	bmi.w	800c162 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800c000:	e004      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800c002:	bf00      	nop
 800c004:	40023800 	.word	0x40023800
 800c008:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c00c:	2d01      	cmp	r5, #1
 800c00e:	d170      	bne.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c010:	4d9d      	ldr	r5, [pc, #628]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c012:	682b      	ldr	r3, [r5, #0]
 800c014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c018:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c01a:	f7fb ff27 	bl	8007e6c <HAL_GetTick>
 800c01e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	009f      	lsls	r7, r3, #2
 800c024:	f100 8121 	bmi.w	800c26a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c028:	6821      	ldr	r1, [r4, #0]
 800c02a:	030e      	lsls	r6, r1, #12
 800c02c:	d501      	bpl.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x302>
 800c02e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c030:	b11b      	cbz	r3, 800c03a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800c032:	02cd      	lsls	r5, r1, #11
 800c034:	d51d      	bpl.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c036:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c038:	b9db      	cbnz	r3, 800c072 <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c03a:	4a93      	ldr	r2, [pc, #588]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c03c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c040:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c048:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800c04c:	4303      	orrs	r3, r0
 800c04e:	6960      	ldr	r0, [r4, #20]
 800c050:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c054:	69a0      	ldr	r0, [r4, #24]
 800c056:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c05a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c05e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800c062:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c064:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800c068:	3801      	subs	r0, #1
 800c06a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c06e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c072:	0288      	lsls	r0, r1, #10
 800c074:	d515      	bpl.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c076:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800c078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c07c:	d111      	bne.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c07e:	4a82      	ldr	r2, [pc, #520]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c080:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c084:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c088:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800c08c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800c090:	4303      	orrs	r3, r0
 800c092:	6960      	ldr	r0, [r4, #20]
 800c094:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c098:	6a20      	ldr	r0, [r4, #32]
 800c09a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c09e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c0a2:	070a      	lsls	r2, r1, #28
 800c0a4:	d519      	bpl.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0a6:	4a78      	ldr	r2, [pc, #480]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c0a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c0ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c0b0:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800c0b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c0b8:	430b      	orrs	r3, r1
 800c0ba:	6961      	ldr	r1, [r4, #20]
 800c0bc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c0c0:	69e1      	ldr	r1, [r4, #28]
 800c0c2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c0c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c0ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800c0ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c0d0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800c0d4:	430b      	orrs	r3, r1
 800c0d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c0da:	4c6b      	ldr	r4, [pc, #428]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0e2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0e4:	f7fb fec2 	bl	8007e6c <HAL_GetTick>
 800c0e8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	f140 80c3 	bpl.w	800c278 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e009      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 800c0f6:	2601      	movs	r6, #1
 800c0f8:	e656      	b.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0fa:	f7fb feb7 	bl	8007e6c <HAL_GetTick>
 800c0fe:	eba0 0008 	sub.w	r0, r0, r8
 800c102:	2864      	cmp	r0, #100	@ 0x64
 800c104:	f67f ae68 	bls.w	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800c108:	2003      	movs	r0, #3
}
 800c10a:	b003      	add	sp, #12
 800c10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c110:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800c114:	4293      	cmp	r3, r2
 800c116:	f43f ae6a 	beq.w	800bdee <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c11a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800c11c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c11e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800c122:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c126:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c128:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c12a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c12e:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800c130:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c134:	07d8      	lsls	r0, r3, #31
 800c136:	f57f ae5a 	bpl.w	800bdee <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800c13a:	f7fb fe97 	bl	8007e6c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c13e:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800c142:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c146:	0799      	lsls	r1, r3, #30
 800c148:	f53f ae51 	bmi.w	800bdee <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c14c:	f7fb fe8e 	bl	8007e6c <HAL_GetTick>
 800c150:	eba0 0008 	sub.w	r0, r0, r8
 800c154:	4548      	cmp	r0, r9
 800c156:	d9f5      	bls.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c158:	e7d6      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c15a:	6891      	ldr	r1, [r2, #8]
 800c15c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800c160:	e655      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800c162:	4e49      	ldr	r6, [pc, #292]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c164:	6833      	ldr	r3, [r6, #0]
 800c166:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c16a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c16c:	f7fb fe7e 	bl	8007e6c <HAL_GetTick>
 800c170:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c172:	6833      	ldr	r3, [r6, #0]
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	d472      	bmi.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c178:	6822      	ldr	r2, [r4, #0]
 800c17a:	07d7      	lsls	r7, r2, #31
 800c17c:	d512      	bpl.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800c17e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c180:	b983      	cbnz	r3, 800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c182:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c186:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c18a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c18e:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800c192:	430b      	orrs	r3, r1
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c19a:	68a1      	ldr	r1, [r4, #8]
 800c19c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c1a0:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1a4:	0316      	lsls	r6, r2, #12
 800c1a6:	d503      	bpl.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c1a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c1aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1ae:	d005      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c1b0:	02d0      	lsls	r0, r2, #11
 800c1b2:	d51e      	bpl.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c1b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1ba:	d11a      	bne.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c1bc:	4932      	ldr	r1, [pc, #200]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c1be:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c1c2:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c1c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c1ca:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800c1ce:	4303      	orrs	r3, r0
 800c1d0:	6860      	ldr	r0, [r4, #4]
 800c1d2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c1d6:	68e0      	ldr	r0, [r4, #12]
 800c1d8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c1dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c1e0:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800c1e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c1e6:	f020 001f 	bic.w	r0, r0, #31
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	4303      	orrs	r3, r0
 800c1ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c1f2:	01d1      	lsls	r1, r2, #7
 800c1f4:	d511      	bpl.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c1f6:	4924      	ldr	r1, [pc, #144]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c1f8:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c1fc:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c200:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800c204:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800c208:	4303      	orrs	r3, r0
 800c20a:	6860      	ldr	r0, [r4, #4]
 800c20c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c210:	6920      	ldr	r0, [r4, #16]
 800c212:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c216:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c21a:	0192      	lsls	r2, r2, #6
 800c21c:	d50d      	bpl.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c21e:	6923      	ldr	r3, [r4, #16]
 800c220:	6862      	ldr	r2, [r4, #4]
 800c222:	041b      	lsls	r3, r3, #16
 800c224:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c228:	68e2      	ldr	r2, [r4, #12]
 800c22a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c22e:	68a2      	ldr	r2, [r4, #8]
 800c230:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800c234:	4a14      	ldr	r2, [pc, #80]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c236:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800c23a:	4e13      	ldr	r6, [pc, #76]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800c23c:	6833      	ldr	r3, [r6, #0]
 800c23e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c242:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c244:	f7fb fe12 	bl	8007e6c <HAL_GetTick>
 800c248:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c24a:	6833      	ldr	r3, [r6, #0]
 800c24c:	011b      	lsls	r3, r3, #4
 800c24e:	f53f aedd 	bmi.w	800c00c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c252:	f7fb fe0b 	bl	8007e6c <HAL_GetTick>
 800c256:	1bc0      	subs	r0, r0, r7
 800c258:	2864      	cmp	r0, #100	@ 0x64
 800c25a:	d9f6      	bls.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c25c:	e754      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c25e:	f7fb fe05 	bl	8007e6c <HAL_GetTick>
 800c262:	1bc0      	subs	r0, r0, r7
 800c264:	2864      	cmp	r0, #100	@ 0x64
 800c266:	d984      	bls.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c268:	e74e      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c26a:	f7fb fdff 	bl	8007e6c <HAL_GetTick>
 800c26e:	1b80      	subs	r0, r0, r6
 800c270:	2864      	cmp	r0, #100	@ 0x64
 800c272:	f67f aed5 	bls.w	800c020 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800c276:	e747      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c278:	f7fb fdf8 	bl	8007e6c <HAL_GetTick>
 800c27c:	1b40      	subs	r0, r0, r5
 800c27e:	2864      	cmp	r0, #100	@ 0x64
 800c280:	f67f af33 	bls.w	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c284:	e740      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800c286:	bf00      	nop
 800c288:	40023800 	.word	0x40023800

0800c28c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c290:	4604      	mov	r4, r0
 800c292:	b1c8      	cbz	r0, 800c2c8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c294:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c298:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c29c:	b91b      	cbnz	r3, 800c2a6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c29e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c2a2:	f7f8 ff0b 	bl	80050bc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2a6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c2a8:	1d21      	adds	r1, r4, #4
 800c2aa:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2ac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c2b0:	f000 fcb9 	bl	800cc26 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c2b4:	6862      	ldr	r2, [r4, #4]
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	6820      	ldr	r0, [r4, #0]
 800c2ba:	f000 fcec 	bl	800cc96 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c2be:	2301      	movs	r3, #1

  return HAL_OK;
 800c2c0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c2c2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c2c8:	2001      	movs	r0, #1
 800c2ca:	e7fc      	b.n	800c2c6 <HAL_SDRAM_Init+0x3a>

0800c2cc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c2cc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c2ce:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c2d6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c2d8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c2da:	d010      	beq.n	800c2fe <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c2dc:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c2e0:	2c01      	cmp	r4, #1
 800c2e2:	d110      	bne.n	800c306 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2e4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c2e6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2e8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c2ec:	f000 fd09 	bl	800cd02 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c2f0:	6833      	ldr	r3, [r6, #0]
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d104      	bne.n	800c300 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c2f6:	2305      	movs	r3, #5
 800c2f8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c2fc:	2000      	movs	r0, #0
}
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c300:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c304:	e7fa      	b.n	800c2fc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c306:	2001      	movs	r0, #1
 800c308:	e7f9      	b.n	800c2fe <HAL_SDRAM_SendCommand+0x32>

0800c30a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c30a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c30c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c310:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c312:	2b02      	cmp	r3, #2
 800c314:	b2d8      	uxtb	r0, r3
 800c316:	d00d      	beq.n	800c334 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c318:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	b2dd      	uxtb	r5, r3
 800c320:	d109      	bne.n	800c336 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c322:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c324:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c326:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c32a:	f000 fcfc 	bl	800cd26 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c32e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c330:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c334:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c336:	2001      	movs	r0, #1
 800c338:	e7fc      	b.n	800c334 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800c33c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c33c:	6a03      	ldr	r3, [r0, #32]
 800c33e:	f023 0301 	bic.w	r3, r3, #1
{
 800c342:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c344:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c346:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c348:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c34a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c34c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800c350:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c352:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800c356:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c35a:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c35c:	688d      	ldr	r5, [r1, #8]
 800c35e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c360:	4d0e      	ldr	r5, [pc, #56]	@ (800c39c <TIM_OC1_SetConfig+0x60>)
 800c362:	42a8      	cmp	r0, r5
 800c364:	d002      	beq.n	800c36c <TIM_OC1_SetConfig+0x30>
 800c366:	4e0e      	ldr	r6, [pc, #56]	@ (800c3a0 <TIM_OC1_SetConfig+0x64>)
 800c368:	42b0      	cmp	r0, r6
 800c36a:	d111      	bne.n	800c390 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c36c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c370:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c372:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800c374:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800c378:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c37c:	d002      	beq.n	800c384 <TIM_OC1_SetConfig+0x48>
 800c37e:	4d08      	ldr	r5, [pc, #32]	@ (800c3a0 <TIM_OC1_SetConfig+0x64>)
 800c380:	42a8      	cmp	r0, r5
 800c382:	d105      	bne.n	800c390 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c384:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c388:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c38c:	4335      	orrs	r5, r6
 800c38e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c390:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c392:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c394:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c396:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c398:	6203      	str	r3, [r0, #32]
}
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	40010000 	.word	0x40010000
 800c3a0:	40010400 	.word	0x40010400

0800c3a4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3a4:	6a03      	ldr	r3, [r0, #32]
 800c3a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 800c3aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3b2:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx |= OC_Config->OCMode;
 800c3b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3ba:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800c3be:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c3c2:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3c4:	688d      	ldr	r5, [r1, #8]
 800c3c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3ca:	4d11      	ldr	r5, [pc, #68]	@ (800c410 <TIM_OC3_SetConfig+0x6c>)
 800c3cc:	42a8      	cmp	r0, r5
 800c3ce:	d003      	beq.n	800c3d8 <TIM_OC3_SetConfig+0x34>
 800c3d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c3d4:	42a8      	cmp	r0, r5
 800c3d6:	d114      	bne.n	800c402 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3d8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3e2:	4d0b      	ldr	r5, [pc, #44]	@ (800c410 <TIM_OC3_SetConfig+0x6c>)
 800c3e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3ea:	d003      	beq.n	800c3f4 <TIM_OC3_SetConfig+0x50>
 800c3ec:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c3f0:	42a8      	cmp	r0, r5
 800c3f2:	d106      	bne.n	800c402 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3f4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3f8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c3fc:	4335      	orrs	r5, r6
 800c3fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c402:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c404:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c406:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c408:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40a:	6203      	str	r3, [r0, #32]
}
 800c40c:	bd70      	pop	{r4, r5, r6, pc}
 800c40e:	bf00      	nop
 800c410:	40010000 	.word	0x40010000

0800c414 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c414:	6a03      	ldr	r3, [r0, #32]
 800c416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 800c41a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c41c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c41e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c420:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c422:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c428:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c42a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c42e:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c432:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c436:	688d      	ldr	r5, [r1, #8]
 800c438:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c43c:	4d08      	ldr	r5, [pc, #32]	@ (800c460 <TIM_OC4_SetConfig+0x4c>)
 800c43e:	42a8      	cmp	r0, r5
 800c440:	d003      	beq.n	800c44a <TIM_OC4_SetConfig+0x36>
 800c442:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c446:	42a8      	cmp	r0, r5
 800c448:	d104      	bne.n	800c454 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c44a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c44e:	694d      	ldr	r5, [r1, #20]
 800c450:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c454:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c456:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c458:	684b      	ldr	r3, [r1, #4]
 800c45a:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c45c:	6202      	str	r2, [r0, #32]
}
 800c45e:	bd30      	pop	{r4, r5, pc}
 800c460:	40010000 	.word	0x40010000

0800c464 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c464:	6a03      	ldr	r3, [r0, #32]
 800c466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 800c46a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c46c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c470:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c472:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c474:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800c478:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c47a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c47e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800c482:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c484:	688d      	ldr	r5, [r1, #8]
 800c486:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c48a:	4d09      	ldr	r5, [pc, #36]	@ (800c4b0 <TIM_OC5_SetConfig+0x4c>)
 800c48c:	42a8      	cmp	r0, r5
 800c48e:	d003      	beq.n	800c498 <TIM_OC5_SetConfig+0x34>
 800c490:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c494:	42a8      	cmp	r0, r5
 800c496:	d104      	bne.n	800c4a2 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c498:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c49c:	694d      	ldr	r5, [r1, #20]
 800c49e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4a4:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4a6:	684b      	ldr	r3, [r1, #4]
 800c4a8:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4aa:	6202      	str	r2, [r0, #32]
}
 800c4ac:	bd30      	pop	{r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	40010000 	.word	0x40010000

0800c4b4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4b4:	6a03      	ldr	r3, [r0, #32]
 800c4b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
{
 800c4ba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4be:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4c2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c4c4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c4ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c4d6:	688d      	ldr	r5, [r1, #8]
 800c4d8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4dc:	4d08      	ldr	r5, [pc, #32]	@ (800c500 <TIM_OC6_SetConfig+0x4c>)
 800c4de:	42a8      	cmp	r0, r5
 800c4e0:	d003      	beq.n	800c4ea <TIM_OC6_SetConfig+0x36>
 800c4e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c4e6:	42a8      	cmp	r0, r5
 800c4e8:	d104      	bne.n	800c4f4 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c4ea:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c4ee:	694d      	ldr	r5, [r1, #20]
 800c4f0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4f6:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c4f8:	684b      	ldr	r3, [r1, #4]
 800c4fa:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fc:	6202      	str	r2, [r0, #32]
}
 800c4fe:	bd30      	pop	{r4, r5, pc}
 800c500:	40010000 	.word	0x40010000

0800c504 <HAL_TIM_Base_MspInit>:
}
 800c504:	4770      	bx	lr
	...

0800c508 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c508:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d133      	bne.n	800c578 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800c510:	2302      	movs	r3, #2
 800c512:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c516:	6803      	ldr	r3, [r0, #0]
 800c518:	68da      	ldr	r2, [r3, #12]
 800c51a:	f042 0201 	orr.w	r2, r2, #1
 800c51e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c520:	4a16      	ldr	r2, [pc, #88]	@ (800c57c <HAL_TIM_Base_Start_IT+0x74>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d01a      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c52a:	d017      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c52c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c530:	4293      	cmp	r3, r2
 800c532:	d013      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c534:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c538:	4293      	cmp	r3, r2
 800c53a:	d00f      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c53c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c540:	4293      	cmp	r3, r2
 800c542:	d00b      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c544:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c548:	4293      	cmp	r3, r2
 800c54a:	d007      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c54c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800c550:	4293      	cmp	r3, r2
 800c552:	d003      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0x54>
 800c554:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800c558:	4293      	cmp	r3, r2
 800c55a:	d107      	bne.n	800c56c <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c55c:	6899      	ldr	r1, [r3, #8]
 800c55e:	4a08      	ldr	r2, [pc, #32]	@ (800c580 <HAL_TIM_Base_Start_IT+0x78>)
 800c560:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c562:	2a06      	cmp	r2, #6
 800c564:	d006      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0x6c>
 800c566:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c56a:	d003      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	f042 0201 	orr.w	r2, r2, #1
 800c572:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c574:	2000      	movs	r0, #0
 800c576:	4770      	bx	lr
    return HAL_ERROR;
 800c578:	2001      	movs	r0, #1
}
 800c57a:	4770      	bx	lr
 800c57c:	40010000 	.word	0x40010000
 800c580:	00010007 	.word	0x00010007

0800c584 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c584:	4770      	bx	lr

0800c586 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c586:	4770      	bx	lr

0800c588 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c588:	4770      	bx	lr

0800c58a <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c58a:	4770      	bx	lr

0800c58c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c58c:	6803      	ldr	r3, [r0, #0]
 800c58e:	691a      	ldr	r2, [r3, #16]
 800c590:	0791      	lsls	r1, r2, #30
{
 800c592:	b510      	push	{r4, lr}
 800c594:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c596:	d50f      	bpl.n	800c5b8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c598:	68da      	ldr	r2, [r3, #12]
 800c59a:	0792      	lsls	r2, r2, #30
 800c59c:	d50c      	bpl.n	800c5b8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c59e:	f06f 0202 	mvn.w	r2, #2
 800c5a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	0799      	lsls	r1, r3, #30
 800c5ac:	f000 8085 	beq.w	800c6ba <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c5b0:	f7ff ffe9 	bl	800c586 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	691a      	ldr	r2, [r3, #16]
 800c5bc:	0752      	lsls	r2, r2, #29
 800c5be:	d510      	bpl.n	800c5e2 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	0750      	lsls	r0, r2, #29
 800c5c4:	d50d      	bpl.n	800c5e2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5c6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c5ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5ce:	2202      	movs	r2, #2
 800c5d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c5d8:	d075      	beq.n	800c6c6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c5da:	f7ff ffd4 	bl	800c586 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	691a      	ldr	r2, [r3, #16]
 800c5e6:	0711      	lsls	r1, r2, #28
 800c5e8:	d50f      	bpl.n	800c60a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	0712      	lsls	r2, r2, #28
 800c5ee:	d50c      	bpl.n	800c60a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5f0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c5f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	079b      	lsls	r3, r3, #30
 800c600:	d067      	beq.n	800c6d2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c602:	f7ff ffc0 	bl	800c586 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c606:	2300      	movs	r3, #0
 800c608:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	691a      	ldr	r2, [r3, #16]
 800c60e:	06d0      	lsls	r0, r2, #27
 800c610:	d510      	bpl.n	800c634 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	06d1      	lsls	r1, r2, #27
 800c616:	d50d      	bpl.n	800c634 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c618:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c61c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c61e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c620:	2208      	movs	r2, #8
 800c622:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c62a:	d058      	beq.n	800c6de <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800c62c:	f7ff ffab 	bl	800c586 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c630:	2300      	movs	r3, #0
 800c632:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	691a      	ldr	r2, [r3, #16]
 800c638:	07d2      	lsls	r2, r2, #31
 800c63a:	d508      	bpl.n	800c64e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	07d0      	lsls	r0, r2, #31
 800c640:	d505      	bpl.n	800c64e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c642:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c646:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c648:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c64a:	f7f8 fa27 	bl	8004a9c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	691a      	ldr	r2, [r3, #16]
 800c652:	0611      	lsls	r1, r2, #24
 800c654:	d508      	bpl.n	800c668 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c656:	68da      	ldr	r2, [r3, #12]
 800c658:	0612      	lsls	r2, r2, #24
 800c65a:	d505      	bpl.n	800c668 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c65c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c660:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c662:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c664:	f000 fadd 	bl	800cc22 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	691a      	ldr	r2, [r3, #16]
 800c66c:	05d0      	lsls	r0, r2, #23
 800c66e:	d508      	bpl.n	800c682 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c670:	68da      	ldr	r2, [r3, #12]
 800c672:	0611      	lsls	r1, r2, #24
 800c674:	d505      	bpl.n	800c682 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c676:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c67a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c67c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c67e:	f000 fad1 	bl	800cc24 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	691a      	ldr	r2, [r3, #16]
 800c686:	0652      	lsls	r2, r2, #25
 800c688:	d508      	bpl.n	800c69c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c68a:	68da      	ldr	r2, [r3, #12]
 800c68c:	0650      	lsls	r0, r2, #25
 800c68e:	d505      	bpl.n	800c69c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c690:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800c694:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c696:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c698:	f7ff ff77 	bl	800c58a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	691a      	ldr	r2, [r3, #16]
 800c6a0:	0691      	lsls	r1, r2, #26
 800c6a2:	d522      	bpl.n	800c6ea <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	0692      	lsls	r2, r2, #26
 800c6a8:	d51f      	bpl.n	800c6ea <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c6aa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c6ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c6b0:	611a      	str	r2, [r3, #16]
}
 800c6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c6b6:	f000 bab3 	b.w	800cc20 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ba:	f7ff ff63 	bl	800c584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f7ff ff62 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
 800c6c4:	e776      	b.n	800c5b4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6c6:	f7ff ff5d 	bl	800c584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f7ff ff5c 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
 800c6d0:	e785      	b.n	800c5de <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6d2:	f7ff ff57 	bl	800c584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f7ff ff56 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
 800c6dc:	e793      	b.n	800c606 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6de:	f7ff ff51 	bl	800c584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f7ff ff50 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
 800c6e8:	e7a2      	b.n	800c630 <HAL_TIM_IRQHandler+0xa4>
}
 800c6ea:	bd10      	pop	{r4, pc}

0800c6ec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6ec:	4a30      	ldr	r2, [pc, #192]	@ (800c7b0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800c6ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6f0:	4290      	cmp	r0, r2
 800c6f2:	d012      	beq.n	800c71a <TIM_Base_SetConfig+0x2e>
 800c6f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c6f8:	d00f      	beq.n	800c71a <TIM_Base_SetConfig+0x2e>
 800c6fa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c6fe:	4290      	cmp	r0, r2
 800c700:	d00b      	beq.n	800c71a <TIM_Base_SetConfig+0x2e>
 800c702:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c706:	4290      	cmp	r0, r2
 800c708:	d007      	beq.n	800c71a <TIM_Base_SetConfig+0x2e>
 800c70a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c70e:	4290      	cmp	r0, r2
 800c710:	d003      	beq.n	800c71a <TIM_Base_SetConfig+0x2e>
 800c712:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c716:	4290      	cmp	r0, r2
 800c718:	d119      	bne.n	800c74e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800c71a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c71c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c720:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c722:	4a23      	ldr	r2, [pc, #140]	@ (800c7b0 <TIM_Base_SetConfig+0xc4>)
 800c724:	4290      	cmp	r0, r2
 800c726:	d029      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c728:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c72c:	d026      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c72e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c732:	4290      	cmp	r0, r2
 800c734:	d022      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c736:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c73a:	4290      	cmp	r0, r2
 800c73c:	d01e      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c73e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c742:	4290      	cmp	r0, r2
 800c744:	d01a      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c746:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c74a:	4290      	cmp	r0, r2
 800c74c:	d016      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c74e:	4a19      	ldr	r2, [pc, #100]	@ (800c7b4 <TIM_Base_SetConfig+0xc8>)
 800c750:	4290      	cmp	r0, r2
 800c752:	d013      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c754:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c758:	4290      	cmp	r0, r2
 800c75a:	d00f      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c75c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c760:	4290      	cmp	r0, r2
 800c762:	d00b      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c764:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800c768:	4290      	cmp	r0, r2
 800c76a:	d007      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c76c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c770:	4290      	cmp	r0, r2
 800c772:	d003      	beq.n	800c77c <TIM_Base_SetConfig+0x90>
 800c774:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c778:	4290      	cmp	r0, r2
 800c77a:	d103      	bne.n	800c784 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c77c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c780:	68ca      	ldr	r2, [r1, #12]
 800c782:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c784:	694a      	ldr	r2, [r1, #20]
 800c786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c78a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c78c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c78e:	688b      	ldr	r3, [r1, #8]
 800c790:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c792:	680b      	ldr	r3, [r1, #0]
 800c794:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c796:	4b06      	ldr	r3, [pc, #24]	@ (800c7b0 <TIM_Base_SetConfig+0xc4>)
 800c798:	4298      	cmp	r0, r3
 800c79a:	d003      	beq.n	800c7a4 <TIM_Base_SetConfig+0xb8>
 800c79c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c7a0:	4298      	cmp	r0, r3
 800c7a2:	d101      	bne.n	800c7a8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800c7a4:	690b      	ldr	r3, [r1, #16]
 800c7a6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	6143      	str	r3, [r0, #20]
}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	40010000 	.word	0x40010000
 800c7b4:	40014000 	.word	0x40014000

0800c7b8 <HAL_TIM_Base_Init>:
{
 800c7b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	b350      	cbz	r0, 800c814 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c7c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c7c6:	b91b      	cbnz	r3, 800c7d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c7c8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c7cc:	f7ff fe9a 	bl	800c504 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7d2:	6820      	ldr	r0, [r4, #0]
 800c7d4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7da:	f7ff ff87 	bl	800c6ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7de:	2301      	movs	r3, #1
  return HAL_OK;
 800c7e0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7e2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c7ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c7ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c7f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c7f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c802:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c806:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c80a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c80e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c812:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c814:	2001      	movs	r0, #1
 800c816:	e7fc      	b.n	800c812 <HAL_TIM_Base_Init+0x5a>

0800c818 <HAL_TIM_PWM_Init>:
{
 800c818:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c81a:	4604      	mov	r4, r0
 800c81c:	b350      	cbz	r0, 800c874 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c81e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c822:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c826:	b91b      	cbnz	r3, 800c830 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c828:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c82c:	f7f8 fc0a 	bl	8005044 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c830:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c832:	6820      	ldr	r0, [r4, #0]
 800c834:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c836:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c83a:	f7ff ff57 	bl	800c6ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c83e:	2301      	movs	r3, #1
  return HAL_OK;
 800c840:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c842:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c846:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c84a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c84e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c852:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c856:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c85a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c85e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c862:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c866:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c86a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c86e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c872:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c874:	2001      	movs	r0, #1
 800c876:	e7fc      	b.n	800c872 <HAL_TIM_PWM_Init+0x5a>

0800c878 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c878:	6a03      	ldr	r3, [r0, #32]
 800c87a:	f023 0310 	bic.w	r3, r3, #16
{
 800c87e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c880:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c882:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c884:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c886:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c888:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c88c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c88e:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800c892:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c896:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c89a:	688d      	ldr	r5, [r1, #8]
 800c89c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8a0:	4d10      	ldr	r5, [pc, #64]	@ (800c8e4 <TIM_OC2_SetConfig+0x6c>)
 800c8a2:	42a8      	cmp	r0, r5
 800c8a4:	d003      	beq.n	800c8ae <TIM_OC2_SetConfig+0x36>
 800c8a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c8aa:	42a8      	cmp	r0, r5
 800c8ac:	d114      	bne.n	800c8d8 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b8:	4d0a      	ldr	r5, [pc, #40]	@ (800c8e4 <TIM_OC2_SetConfig+0x6c>)
 800c8ba:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c0:	d003      	beq.n	800c8ca <TIM_OC2_SetConfig+0x52>
 800c8c2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c8c6:	42a8      	cmp	r0, r5
 800c8c8:	d106      	bne.n	800c8d8 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8ce:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c8d2:	4335      	orrs	r5, r6
 800c8d4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c8d8:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800c8da:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c8dc:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c8de:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800c8e0:	6203      	str	r3, [r0, #32]
}
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	40010000 	.word	0x40010000

0800c8e8 <HAL_TIM_PWM_ConfigChannel>:
{
 800c8e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800c8ea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800c8ee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d073      	beq.n	800c9dc <HAL_TIM_PWM_ConfigChannel+0xf4>
 800c8f4:	2001      	movs	r0, #1
  switch (Channel)
 800c8f6:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800c8f8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 800c8fc:	d04e      	beq.n	800c99c <HAL_TIM_PWM_ConfigChannel+0xb4>
 800c8fe:	d808      	bhi.n	800c912 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c900:	2a04      	cmp	r2, #4
 800c902:	d02b      	beq.n	800c95c <HAL_TIM_PWM_ConfigChannel+0x74>
 800c904:	2a08      	cmp	r2, #8
 800c906:	d039      	beq.n	800c97c <HAL_TIM_PWM_ConfigChannel+0x94>
 800c908:	b1ba      	cbz	r2, 800c93a <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 800c90a:	2300      	movs	r3, #0
 800c90c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800c910:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800c912:	2a10      	cmp	r2, #16
 800c914:	d052      	beq.n	800c9bc <HAL_TIM_PWM_ConfigChannel+0xd4>
 800c916:	2a14      	cmp	r2, #20
 800c918:	d1f7      	bne.n	800c90a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c91a:	6820      	ldr	r0, [r4, #0]
 800c91c:	f7ff fdca 	bl	800c4b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c920:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c922:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c924:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c928:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c92a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c92c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c930:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c932:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c934:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c938:	e04e      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c93a:	6820      	ldr	r0, [r4, #0]
 800c93c:	f7ff fcfe 	bl	800c33c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c940:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c942:	6983      	ldr	r3, [r0, #24]
 800c944:	f043 0308 	orr.w	r3, r3, #8
 800c948:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c94a:	6983      	ldr	r3, [r0, #24]
 800c94c:	f023 0304 	bic.w	r3, r3, #4
 800c950:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c952:	6983      	ldr	r3, [r0, #24]
 800c954:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c956:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c958:	2000      	movs	r0, #0
 800c95a:	e7d6      	b.n	800c90a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c95c:	6820      	ldr	r0, [r4, #0]
 800c95e:	f7ff ff8b 	bl	800c878 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c962:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c964:	6983      	ldr	r3, [r0, #24]
 800c966:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c96a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c96c:	6983      	ldr	r3, [r0, #24]
 800c96e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c972:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c974:	6983      	ldr	r3, [r0, #24]
 800c976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c97a:	e7ec      	b.n	800c956 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c97c:	6820      	ldr	r0, [r4, #0]
 800c97e:	f7ff fd11 	bl	800c3a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c982:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c984:	69c3      	ldr	r3, [r0, #28]
 800c986:	f043 0308 	orr.w	r3, r3, #8
 800c98a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c98c:	69c3      	ldr	r3, [r0, #28]
 800c98e:	f023 0304 	bic.w	r3, r3, #4
 800c992:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c994:	69c3      	ldr	r3, [r0, #28]
 800c996:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c998:	61c3      	str	r3, [r0, #28]
      break;
 800c99a:	e7dd      	b.n	800c958 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c99c:	6820      	ldr	r0, [r4, #0]
 800c99e:	f7ff fd39 	bl	800c414 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9a2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9a4:	69c3      	ldr	r3, [r0, #28]
 800c9a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c9aa:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9ac:	69c3      	ldr	r3, [r0, #28]
 800c9ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9b2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9b4:	69c3      	ldr	r3, [r0, #28]
 800c9b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c9ba:	e7ed      	b.n	800c998 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	f7ff fd51 	bl	800c464 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c9c2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c9c4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9c6:	f043 0308 	orr.w	r3, r3, #8
 800c9ca:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c9cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9ce:	f023 0304 	bic.w	r3, r3, #4
 800c9d2:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c9d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9d6:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c9d8:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 800c9da:	e7bd      	b.n	800c958 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 800c9dc:	2002      	movs	r0, #2
 800c9de:	e797      	b.n	800c910 <HAL_TIM_PWM_ConfigChannel+0x28>

0800c9e0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9e0:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9e4:	6a03      	ldr	r3, [r0, #32]
{
 800c9e6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9e8:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9ea:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9ec:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800c9ee:	ea23 0304 	bic.w	r3, r3, r4
 800c9f2:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9f4:	6a03      	ldr	r3, [r0, #32]
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	6202      	str	r2, [r0, #32]
}
 800c9fa:	bd10      	pop	{r4, pc}

0800c9fc <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c9fc:	2908      	cmp	r1, #8
{
 800c9fe:	b508      	push	{r3, lr}
 800ca00:	d018      	beq.n	800ca34 <HAL_TIM_OC_Start+0x38>
 800ca02:	d805      	bhi.n	800ca10 <HAL_TIM_OC_Start+0x14>
 800ca04:	b159      	cbz	r1, 800ca1e <HAL_TIM_OC_Start+0x22>
 800ca06:	2904      	cmp	r1, #4
 800ca08:	d011      	beq.n	800ca2e <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca0a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ca0e:	e008      	b.n	800ca22 <HAL_TIM_OC_Start+0x26>
 800ca10:	290c      	cmp	r1, #12
 800ca12:	d012      	beq.n	800ca3a <HAL_TIM_OC_Start+0x3e>
 800ca14:	2910      	cmp	r1, #16
 800ca16:	d1f8      	bne.n	800ca0a <HAL_TIM_OC_Start+0xe>
 800ca18:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ca1c:	e001      	b.n	800ca22 <HAL_TIM_OC_Start+0x26>
 800ca1e:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800ca22:	3b01      	subs	r3, #1
 800ca24:	bf18      	it	ne
 800ca26:	2301      	movne	r3, #1
 800ca28:	b153      	cbz	r3, 800ca40 <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	e030      	b.n	800ca90 <HAL_TIM_OC_Start+0x94>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca2e:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800ca32:	e7f6      	b.n	800ca22 <HAL_TIM_OC_Start+0x26>
 800ca34:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ca38:	e7f3      	b.n	800ca22 <HAL_TIM_OC_Start+0x26>
 800ca3a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ca3e:	e7f0      	b.n	800ca22 <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca40:	2908      	cmp	r1, #8
 800ca42:	f04f 0302 	mov.w	r3, #2
 800ca46:	d027      	beq.n	800ca98 <HAL_TIM_OC_Start+0x9c>
 800ca48:	d806      	bhi.n	800ca58 <HAL_TIM_OC_Start+0x5c>
 800ca4a:	b161      	cbz	r1, 800ca66 <HAL_TIM_OC_Start+0x6a>
 800ca4c:	2904      	cmp	r1, #4
 800ca4e:	d020      	beq.n	800ca92 <HAL_TIM_OC_Start+0x96>
 800ca50:	2302      	movs	r3, #2
 800ca52:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 800ca56:	e008      	b.n	800ca6a <HAL_TIM_OC_Start+0x6e>
 800ca58:	290c      	cmp	r1, #12
 800ca5a:	d020      	beq.n	800ca9e <HAL_TIM_OC_Start+0xa2>
 800ca5c:	2910      	cmp	r1, #16
 800ca5e:	d1f7      	bne.n	800ca50 <HAL_TIM_OC_Start+0x54>
 800ca60:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 800ca64:	e001      	b.n	800ca6a <HAL_TIM_OC_Start+0x6e>
 800ca66:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca6a:	6800      	ldr	r0, [r0, #0]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f7ff ffb7 	bl	800c9e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca72:	4a20      	ldr	r2, [pc, #128]	@ (800caf4 <HAL_TIM_OC_Start+0xf8>)
 800ca74:	4290      	cmp	r0, r2
 800ca76:	d015      	beq.n	800caa4 <HAL_TIM_OC_Start+0xa8>
 800ca78:	4b1f      	ldr	r3, [pc, #124]	@ (800caf8 <HAL_TIM_OC_Start+0xfc>)
 800ca7a:	4298      	cmp	r0, r3
 800ca7c:	d012      	beq.n	800caa4 <HAL_TIM_OC_Start+0xa8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca7e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ca82:	d116      	bne.n	800cab2 <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca84:	6882      	ldr	r2, [r0, #8]
 800ca86:	4b1d      	ldr	r3, [pc, #116]	@ (800cafc <HAL_TIM_OC_Start+0x100>)
 800ca88:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca8a:	2b06      	cmp	r3, #6
 800ca8c:	d12d      	bne.n	800caea <HAL_TIM_OC_Start+0xee>
  return HAL_OK;
 800ca8e:	2000      	movs	r0, #0
}
 800ca90:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca92:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800ca96:	e7e8      	b.n	800ca6a <HAL_TIM_OC_Start+0x6e>
 800ca98:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ca9c:	e7e5      	b.n	800ca6a <HAL_TIM_OC_Start+0x6e>
 800ca9e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800caa2:	e7e2      	b.n	800ca6a <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_MOE_ENABLE(htim);
 800caa4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caa6:	4290      	cmp	r0, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800caa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caac:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caae:	d0e9      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
 800cab0:	e7e5      	b.n	800ca7e <HAL_TIM_OC_Start+0x82>
 800cab2:	4b13      	ldr	r3, [pc, #76]	@ (800cb00 <HAL_TIM_OC_Start+0x104>)
 800cab4:	4298      	cmp	r0, r3
 800cab6:	d0e5      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
 800cab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cabc:	4298      	cmp	r0, r3
 800cabe:	d0e1      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
 800cac0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cac4:	4298      	cmp	r0, r3
 800cac6:	d0dd      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
 800cac8:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 800cacc:	4298      	cmp	r0, r3
 800cace:	d0d9      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
 800cad0:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800cad4:	4298      	cmp	r0, r3
 800cad6:	d0d5      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
 800cad8:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800cadc:	4298      	cmp	r0, r3
 800cade:	d0d1      	beq.n	800ca84 <HAL_TIM_OC_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800cae0:	6803      	ldr	r3, [r0, #0]
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	6003      	str	r3, [r0, #0]
 800cae8:	e7d1      	b.n	800ca8e <HAL_TIM_OC_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caee:	d1f7      	bne.n	800cae0 <HAL_TIM_OC_Start+0xe4>
 800caf0:	e7cd      	b.n	800ca8e <HAL_TIM_OC_Start+0x92>
 800caf2:	bf00      	nop
 800caf4:	40010000 	.word	0x40010000
 800caf8:	40010400 	.word	0x40010400
 800cafc:	00010007 	.word	0x00010007
 800cb00:	40000400 	.word	0x40000400

0800cb04 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800cb04:	f7ff bf7a 	b.w	800c9fc <HAL_TIM_OC_Start>

0800cb08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb08:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb0a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800cb0e:	4604      	mov	r4, r0
 800cb10:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d03b      	beq.n	800cb8e <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb16:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb18:	4d1d      	ldr	r5, [pc, #116]	@ (800cb90 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cb1a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb1e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800cb20:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800cb22:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb24:	d002      	beq.n	800cb2c <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800cb26:	4e1b      	ldr	r6, [pc, #108]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800cb28:	42b3      	cmp	r3, r6
 800cb2a:	d103      	bne.n	800cb34 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb2c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb30:	684e      	ldr	r6, [r1, #4]
 800cb32:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb34:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb36:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb3a:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb3c:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800cb40:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb42:	d019      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb48:	d016      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb4a:	4a13      	ldr	r2, [pc, #76]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d013      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d00f      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d00b      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb60:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d007      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb68:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d003      	beq.n	800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800cb70:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d104      	bne.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb78:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb7a:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb7e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb82:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800cb84:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cb86:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800cb8a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	40010000 	.word	0x40010000
 800cb94:	40010400 	.word	0x40010400
 800cb98:	40000400 	.word	0x40000400

0800cb9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb9c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb9e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800cba2:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d037      	beq.n	800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cba8:	68cb      	ldr	r3, [r1, #12]
 800cbaa:	6888      	ldr	r0, [r1, #8]
 800cbac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cbb0:	4c1a      	ldr	r4, [pc, #104]	@ (800cc1c <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbb2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cbb4:	6848      	ldr	r0, [r1, #4]
 800cbb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cbba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cbbc:	6808      	ldr	r0, [r1, #0]
 800cbbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cbc2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cbc4:	6908      	ldr	r0, [r1, #16]
 800cbc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cbcc:	6948      	ldr	r0, [r1, #20]
 800cbce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cbd2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cbd4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800cbd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbda:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cbdc:	6988      	ldr	r0, [r1, #24]
 800cbde:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800cbe2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cbe6:	6810      	ldr	r0, [r2, #0]
 800cbe8:	42a0      	cmp	r0, r4
 800cbea:	d003      	beq.n	800cbf4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 800cbec:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800cbf0:	42a0      	cmp	r0, r4
 800cbf2:	d10c      	bne.n	800cc0e <HAL_TIMEx_ConfigBreakDeadTime+0x72>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cbf4:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800cbf6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cbfa:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbfe:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc00:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cc06:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc08:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cc0c:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc0e:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cc10:	2000      	movs	r0, #0
 800cc12:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800cc16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800cc18:	2002      	movs	r0, #2
 800cc1a:	e7fc      	b.n	800cc16 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800cc1c:	40010000 	.word	0x40010000

0800cc20 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cc20:	4770      	bx	lr

0800cc22 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cc22:	4770      	bx	lr

0800cc24 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cc24:	4770      	bx	lr

0800cc26 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc2a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800cc2e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800cc32:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800cc36:	ea43 0308 	orr.w	r3, r3, r8
 800cc3a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800cc3e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cc42:	6809      	ldr	r1, [r1, #0]
 800cc44:	b991      	cbnz	r1, 800cc6c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc46:	ea43 030e 	orr.w	r3, r3, lr
 800cc4a:	6801      	ldr	r1, [r0, #0]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800cc52:	ea43 030c 	orr.w	r3, r3, ip
 800cc56:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800cc5a:	433b      	orrs	r3, r7
 800cc5c:	4333      	orrs	r3, r6
 800cc5e:	432b      	orrs	r3, r5
 800cc60:	4323      	orrs	r3, r4
 800cc62:	430b      	orrs	r3, r1
 800cc64:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cc66:	2000      	movs	r0, #0
 800cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc6c:	6801      	ldr	r1, [r0, #0]
 800cc6e:	ea43 030e 	orr.w	r3, r3, lr
 800cc72:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800cc76:	430b      	orrs	r3, r1
 800cc78:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cc7a:	ea42 030c 	orr.w	r3, r2, ip
 800cc7e:	6841      	ldr	r1, [r0, #4]
 800cc80:	433b      	orrs	r3, r7
 800cc82:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800cc86:	4333      	orrs	r3, r6
 800cc88:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800cc8c:	432b      	orrs	r3, r5
 800cc8e:	4323      	orrs	r3, r4
 800cc90:	4313      	orrs	r3, r2
 800cc92:	6043      	str	r3, [r0, #4]
 800cc94:	e7e7      	b.n	800cc66 <FMC_SDRAM_Init+0x40>

0800cc96 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc96:	68cb      	ldr	r3, [r1, #12]
 800cc98:	f103 3cff 	add.w	ip, r3, #4294967295
 800cc9c:	694b      	ldr	r3, [r1, #20]
{
 800cc9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cca0:	3b01      	subs	r3, #1
 800cca2:	680f      	ldr	r7, [r1, #0]
 800cca4:	684c      	ldr	r4, [r1, #4]
 800cca6:	688e      	ldr	r6, [r1, #8]
 800cca8:	051b      	lsls	r3, r3, #20
 800ccaa:	690d      	ldr	r5, [r1, #16]
 800ccac:	3c01      	subs	r4, #1
 800ccae:	6989      	ldr	r1, [r1, #24]
 800ccb0:	3e01      	subs	r6, #1
 800ccb2:	3d01      	subs	r5, #1
 800ccb4:	3f01      	subs	r7, #1
 800ccb6:	3901      	subs	r1, #1
 800ccb8:	0124      	lsls	r4, r4, #4
 800ccba:	0236      	lsls	r6, r6, #8
 800ccbc:	042d      	lsls	r5, r5, #16
 800ccbe:	0609      	lsls	r1, r1, #24
 800ccc0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ccc4:	b95a      	cbnz	r2, 800ccde <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccc6:	433b      	orrs	r3, r7
 800ccc8:	6882      	ldr	r2, [r0, #8]
 800ccca:	4323      	orrs	r3, r4
 800cccc:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ccd0:	4333      	orrs	r3, r6
 800ccd2:	432b      	orrs	r3, r5
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ccda:	2000      	movs	r0, #0
 800ccdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccde:	6882      	ldr	r2, [r0, #8]
 800cce0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cce4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800cce8:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ccea:	ea44 0306 	orr.w	r3, r4, r6
 800ccee:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccf0:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ccf2:	68c2      	ldr	r2, [r0, #12]
 800ccf4:	432b      	orrs	r3, r5
 800ccf6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ccfa:	430b      	orrs	r3, r1
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	60c3      	str	r3, [r0, #12]
 800cd00:	e7eb      	b.n	800ccda <FMC_SDRAM_Timing_Init+0x44>

0800cd02 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cd02:	6902      	ldr	r2, [r0, #16]
{
 800cd04:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cd06:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cd0a:	0d92      	lsrs	r2, r2, #22
 800cd0c:	4323      	orrs	r3, r4
 800cd0e:	68cc      	ldr	r4, [r1, #12]
 800cd10:	0592      	lsls	r2, r2, #22
 800cd12:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cd16:	4313      	orrs	r3, r2
 800cd18:	688a      	ldr	r2, [r1, #8]
 800cd1a:	3a01      	subs	r2, #1
 800cd1c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cd20:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cd22:	2000      	movs	r0, #0
 800cd24:	bd10      	pop	{r4, pc}

0800cd26 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cd26:	6943      	ldr	r3, [r0, #20]
 800cd28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800cd2c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800cd30:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cd34:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800cd36:	2000      	movs	r0, #0
 800cd38:	4770      	bx	lr
	...

0800cd3c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd3c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd40:	b113      	cbz	r3, 800cd48 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800cd42:	f06f 0005 	mvn.w	r0, #5
 800cd46:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd48:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cd4c:	4b07      	ldr	r3, [pc, #28]	@ (800cd6c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800cd4e:	b912      	cbnz	r2, 800cd56 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd50:	f3ef 8211 	mrs	r2, BASEPRI
 800cd54:	b112      	cbz	r2, 800cd5c <osKernelInitialize+0x20>
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	2a02      	cmp	r2, #2
 800cd5a:	d0f2      	beq.n	800cd42 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	b910      	cbnz	r0, 800cd66 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd60:	2201      	movs	r2, #1
 800cd62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd64:	4770      	bx	lr
    } else {
      stat = osError;
 800cd66:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cd6a:	4770      	bx	lr
 800cd6c:	20012e68 	.word	0x20012e68

0800cd70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd70:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd72:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd76:	b113      	cbz	r3, 800cd7e <osKernelStart+0xe>
    stat = osErrorISR;
 800cd78:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800cd7c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd7e:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800cd82:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800cd84:	b912      	cbnz	r2, 800cd8c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd86:	f3ef 8211 	mrs	r2, BASEPRI
 800cd8a:	b112      	cbz	r2, 800cd92 <osKernelStart+0x22>
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	2a02      	cmp	r2, #2
 800cd90:	d0f2      	beq.n	800cd78 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	2a01      	cmp	r2, #1
 800cd96:	d105      	bne.n	800cda4 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800cd98:	2202      	movs	r2, #2
 800cd9a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800cd9c:	f001 fe74 	bl	800ea88 <vTaskStartScheduler>
      stat = osOK;
 800cda0:	2000      	movs	r0, #0
 800cda2:	e7eb      	b.n	800cd7c <osKernelStart+0xc>
      stat = osError;
 800cda4:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800cda8:	e7e8      	b.n	800cd7c <osKernelStart+0xc>
 800cdaa:	bf00      	nop
 800cdac:	20012e68 	.word	0x20012e68

0800cdb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	4614      	mov	r4, r2
 800cdb4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cdb6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cdb8:	460b      	mov	r3, r1
  hTask = NULL;
 800cdba:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdbc:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cdc0:	bb1a      	cbnz	r2, 800ce0a <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc2:	f3ef 8210 	mrs	r2, PRIMASK
 800cdc6:	b912      	cbnz	r2, 800cdce <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdc8:	f3ef 8211 	mrs	r2, BASEPRI
 800cdcc:	b11a      	cbz	r2, 800cdd6 <osThreadNew+0x26>
 800cdce:	4a21      	ldr	r2, [pc, #132]	@ (800ce54 <osThreadNew+0xa4>)
 800cdd0:	6812      	ldr	r2, [r2, #0]
 800cdd2:	2a02      	cmp	r2, #2
 800cdd4:	d019      	beq.n	800ce0a <osThreadNew+0x5a>
 800cdd6:	b1c0      	cbz	r0, 800ce0a <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800cdd8:	b36c      	cbz	r4, 800ce36 <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800cdda:	69a5      	ldr	r5, [r4, #24]
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	bf08      	it	eq
 800cde0:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cde2:	1e6a      	subs	r2, r5, #1
 800cde4:	46ac      	mov	ip, r5
 800cde6:	2a37      	cmp	r2, #55	@ 0x37
 800cde8:	d82a      	bhi.n	800ce40 <osThreadNew+0x90>
 800cdea:	6862      	ldr	r2, [r4, #4]
 800cdec:	07d2      	lsls	r2, r2, #31
 800cdee:	d427      	bmi.n	800ce40 <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800cdf0:	6966      	ldr	r6, [r4, #20]
 800cdf2:	b16e      	cbz	r6, 800ce10 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdf4:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800cdf6:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdf8:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800cdfc:	b157      	cbz	r7, 800ce14 <osThreadNew+0x64>
 800cdfe:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800ce02:	d902      	bls.n	800ce0a <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce04:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce06:	b104      	cbz	r4, 800ce0a <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce08:	b9e6      	cbnz	r6, 800ce44 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce0a:	9805      	ldr	r0, [sp, #20]
}
 800ce0c:	b007      	add	sp, #28
 800ce0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800ce10:	2280      	movs	r2, #128	@ 0x80
 800ce12:	e7f0      	b.n	800cdf6 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce14:	f1be 0f00 	cmp.w	lr, #0
 800ce18:	d1f7      	bne.n	800ce0a <osThreadNew+0x5a>
      if (mem == 0) {
 800ce1a:	6924      	ldr	r4, [r4, #16]
 800ce1c:	2c00      	cmp	r4, #0
 800ce1e:	d1f4      	bne.n	800ce0a <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce20:	ac05      	add	r4, sp, #20
 800ce22:	b292      	uxth	r2, r2
 800ce24:	e9cd c400 	strd	ip, r4, [sp]
 800ce28:	f001 fca2 	bl	800e770 <xTaskCreate>
 800ce2c:	2801      	cmp	r0, #1
          hTask = NULL;
 800ce2e:	bf1c      	itt	ne
 800ce30:	2300      	movne	r3, #0
 800ce32:	9305      	strne	r3, [sp, #20]
 800ce34:	e7e9      	b.n	800ce0a <osThreadNew+0x5a>
    name = NULL;
 800ce36:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800ce38:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800ce3c:	2280      	movs	r2, #128	@ 0x80
 800ce3e:	e7ef      	b.n	800ce20 <osThreadNew+0x70>
        return (NULL);
 800ce40:	2000      	movs	r0, #0
 800ce42:	e7e3      	b.n	800ce0c <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce44:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800ce48:	9500      	str	r5, [sp, #0]
 800ce4a:	f001 fc53 	bl	800e6f4 <xTaskCreateStatic>
 800ce4e:	9005      	str	r0, [sp, #20]
 800ce50:	e7db      	b.n	800ce0a <osThreadNew+0x5a>
 800ce52:	bf00      	nop
 800ce54:	20012e68 	.word	0x20012e68

0800ce58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ce58:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce5a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce5e:	b113      	cbz	r3, 800ce66 <osDelay+0xe>
    stat = osErrorISR;
 800ce60:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800ce64:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce66:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800ce6a:	b913      	cbnz	r3, 800ce72 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce6c:	f3ef 8311 	mrs	r3, BASEPRI
 800ce70:	b11b      	cbz	r3, 800ce7a <osDelay+0x22>
 800ce72:	4b04      	ldr	r3, [pc, #16]	@ (800ce84 <osDelay+0x2c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d0f2      	beq.n	800ce60 <osDelay+0x8>
    if (ticks != 0U) {
 800ce7a:	b108      	cbz	r0, 800ce80 <osDelay+0x28>
      vTaskDelay(ticks);
 800ce7c:	f001 fdc2 	bl	800ea04 <vTaskDelay>
    stat = osOK;
 800ce80:	2000      	movs	r0, #0
  return (stat);
 800ce82:	e7ef      	b.n	800ce64 <osDelay+0xc>
 800ce84:	20012e68 	.word	0x20012e68

0800ce88 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce8c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800ce90:	b116      	cbz	r6, 800ce98 <osMutexNew+0x10>
  hMutex = NULL;
 800ce92:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800ce94:	4620      	mov	r0, r4
 800ce96:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce98:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800ce9c:	b912      	cbnz	r2, 800cea4 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce9e:	f3ef 8211 	mrs	r2, BASEPRI
 800cea2:	b11a      	cbz	r2, 800ceac <osMutexNew+0x24>
 800cea4:	4a18      	ldr	r2, [pc, #96]	@ (800cf08 <osMutexNew+0x80>)
 800cea6:	6812      	ldr	r2, [r2, #0]
 800cea8:	2a02      	cmp	r2, #2
 800ceaa:	d0f2      	beq.n	800ce92 <osMutexNew+0xa>
    if (attr != NULL) {
 800ceac:	b115      	cbz	r5, 800ceb4 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800ceae:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800ceb0:	0733      	lsls	r3, r6, #28
 800ceb2:	d4ee      	bmi.n	800ce92 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ceb4:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800ceb8:	b17d      	cbz	r5, 800ceda <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ceba:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800cebe:	b151      	cbz	r1, 800ced6 <osMutexNew+0x4e>
 800cec0:	2b4f      	cmp	r3, #79	@ 0x4f
 800cec2:	d9e6      	bls.n	800ce92 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800cec4:	b1de      	cbz	r6, 800cefe <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cec6:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cec8:	f000 ff49 	bl	800dd5e <xQueueCreateMutexStatic>
 800cecc:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cece:	2800      	cmp	r0, #0
 800ced0:	d0df      	beq.n	800ce92 <osMutexNew+0xa>
          name = attr->name;
 800ced2:	682d      	ldr	r5, [r5, #0]
 800ced4:	e00a      	b.n	800ceec <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1db      	bne.n	800ce92 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800ceda:	b196      	cbz	r6, 800cf02 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cedc:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800cede:	f000 ff74 	bl	800ddca <xQueueCreateMutex>
 800cee2:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d0d4      	beq.n	800ce92 <osMutexNew+0xa>
        if (attr != NULL) {
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	d1f2      	bne.n	800ced2 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800ceec:	4629      	mov	r1, r5
 800ceee:	4620      	mov	r0, r4
 800cef0:	f001 fa24 	bl	800e33c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cef4:	2e00      	cmp	r6, #0
 800cef6:	d0cd      	beq.n	800ce94 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cef8:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800cefc:	e7ca      	b.n	800ce94 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cefe:	2001      	movs	r0, #1
 800cf00:	e7e2      	b.n	800cec8 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800cf02:	2001      	movs	r0, #1
 800cf04:	e7eb      	b.n	800cede <osMutexNew+0x56>
 800cf06:	bf00      	nop
 800cf08:	20012e68 	.word	0x20012e68

0800cf0c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf0c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf0e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf12:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800cf14:	f003 0201 	and.w	r2, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf18:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf1a:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cf1e:	b111      	cbz	r1, 800cf26 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800cf20:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800cf24:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf26:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 800cf2a:	b911      	cbnz	r1, 800cf32 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf2c:	f3ef 8111 	mrs	r1, BASEPRI
 800cf30:	b119      	cbz	r1, 800cf3a <osMutexAcquire+0x2e>
 800cf32:	490d      	ldr	r1, [pc, #52]	@ (800cf68 <osMutexAcquire+0x5c>)
 800cf34:	6809      	ldr	r1, [r1, #0]
 800cf36:	2902      	cmp	r1, #2
 800cf38:	d0f2      	beq.n	800cf20 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d911      	bls.n	800cf62 <osMutexAcquire+0x56>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf3e:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800cf40:	b162      	cbz	r2, 800cf5c <osMutexAcquire+0x50>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf42:	f001 f985 	bl	800e250 <xQueueTakeMutexRecursive>
 800cf46:	2801      	cmp	r0, #1
 800cf48:	d101      	bne.n	800cf4e <osMutexAcquire+0x42>
  stat = osOK;
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	e7ea      	b.n	800cf24 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	bf14      	ite	ne
 800cf52:	f06f 0001 	mvnne.w	r0, #1
 800cf56:	f06f 0002 	mvneq.w	r0, #2
 800cf5a:	e7e3      	b.n	800cf24 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cf5c:	f001 f8b3 	bl	800e0c6 <xQueueSemaphoreTake>
 800cf60:	e7f1      	b.n	800cf46 <osMutexAcquire+0x3a>
    stat = osErrorParameter;
 800cf62:	f06f 0003 	mvn.w	r0, #3
 800cf66:	e7dd      	b.n	800cf24 <osMutexAcquire+0x18>
 800cf68:	20012e68 	.word	0x20012e68

0800cf6c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cf6c:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf6e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cf72:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800cf74:	f002 0301 	and.w	r3, r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf78:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cf7c:	b111      	cbz	r1, 800cf84 <osMutexRelease+0x18>
    stat = osErrorISR;
 800cf7e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800cf82:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf84:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 800cf88:	b911      	cbnz	r1, 800cf90 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf8a:	f3ef 8111 	mrs	r1, BASEPRI
 800cf8e:	b119      	cbz	r1, 800cf98 <osMutexRelease+0x2c>
 800cf90:	490b      	ldr	r1, [pc, #44]	@ (800cfc0 <osMutexRelease+0x54>)
 800cf92:	6809      	ldr	r1, [r1, #0]
 800cf94:	2902      	cmp	r1, #2
 800cf96:	d0f2      	beq.n	800cf7e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800cf98:	2a01      	cmp	r2, #1
 800cf9a:	d90d      	bls.n	800cfb8 <osMutexRelease+0x4c>
    if (rmtx != 0U) {
 800cf9c:	b13b      	cbz	r3, 800cfae <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cf9e:	f000 fef3 	bl	800dd88 <xQueueGiveMutexRecursive>
 800cfa2:	2801      	cmp	r0, #1
  stat = osOK;
 800cfa4:	bf0c      	ite	eq
 800cfa6:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800cfa8:	f06f 0002 	mvnne.w	r0, #2
 800cfac:	e7e9      	b.n	800cf82 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cfae:	461a      	mov	r2, r3
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f000 fe1a 	bl	800dbea <xQueueGenericSend>
 800cfb6:	e7f4      	b.n	800cfa2 <osMutexRelease+0x36>
    stat = osErrorParameter;
 800cfb8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cfbc:	e7e1      	b.n	800cf82 <osMutexRelease+0x16>
 800cfbe:	bf00      	nop
 800cfc0:	20012e68 	.word	0x20012e68

0800cfc4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cfc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfc6:	460e      	mov	r6, r1
 800cfc8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfca:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cfce:	b993      	cbnz	r3, 800cff6 <osSemaphoreNew+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd4:	b913      	cbnz	r3, 800cfdc <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfd6:	f3ef 8311 	mrs	r3, BASEPRI
 800cfda:	b11b      	cbz	r3, 800cfe4 <osSemaphoreNew+0x20>
 800cfdc:	4b24      	ldr	r3, [pc, #144]	@ (800d070 <osSemaphoreNew+0xac>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d008      	beq.n	800cff6 <osSemaphoreNew+0x32>
 800cfe4:	b138      	cbz	r0, 800cff6 <osSemaphoreNew+0x32>
 800cfe6:	42b0      	cmp	r0, r6
 800cfe8:	d305      	bcc.n	800cff6 <osSemaphoreNew+0x32>
    mem = -1;

    if (attr != NULL) {
 800cfea:	b155      	cbz	r5, 800d002 <osSemaphoreNew+0x3e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cfec:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800cff0:	b12b      	cbz	r3, 800cffe <osSemaphoreNew+0x3a>
 800cff2:	2a4f      	cmp	r2, #79	@ 0x4f
 800cff4:	d823      	bhi.n	800d03e <osSemaphoreNew+0x7a>
  hSemaphore = NULL;
 800cff6:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800cff8:	4620      	mov	r0, r4
 800cffa:	b002      	add	sp, #8
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cffe:	2a00      	cmp	r2, #0
 800d000:	d1f9      	bne.n	800cff6 <osSemaphoreNew+0x32>
      if (max_count == 1U) {
 800d002:	2801      	cmp	r0, #1
 800d004:	d10e      	bne.n	800d024 <osSemaphoreNew+0x60>
          hSemaphore = xSemaphoreCreateBinary();
 800d006:	2203      	movs	r2, #3
 800d008:	2100      	movs	r1, #0
 800d00a:	2001      	movs	r0, #1
 800d00c:	f000 fd7c 	bl	800db08 <xQueueGenericCreate>
 800d010:	e01d      	b.n	800d04e <osSemaphoreNew+0x8a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d012:	461a      	mov	r2, r3
 800d014:	4631      	mov	r1, r6
 800d016:	f000 fda0 	bl	800db5a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800d01a:	4604      	mov	r4, r0
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d0ea      	beq.n	800cff6 <osSemaphoreNew+0x32>
          name = attr->name;
 800d020:	682d      	ldr	r5, [r5, #0]
 800d022:	e007      	b.n	800d034 <osSemaphoreNew+0x70>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d024:	4631      	mov	r1, r6
 800d026:	f000 fdbe 	bl	800dba6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800d02a:	4604      	mov	r4, r0
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d0e2      	beq.n	800cff6 <osSemaphoreNew+0x32>
        if (attr != NULL) {
 800d030:	2d00      	cmp	r5, #0
 800d032:	d1f5      	bne.n	800d020 <osSemaphoreNew+0x5c>
        vQueueAddToRegistry (hSemaphore, name);
 800d034:	4629      	mov	r1, r5
 800d036:	4620      	mov	r0, r4
 800d038:	f001 f980 	bl	800e33c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800d03c:	e7dc      	b.n	800cff8 <osSemaphoreNew+0x34>
      if (max_count == 1U) {
 800d03e:	2801      	cmp	r0, #1
 800d040:	d1e7      	bne.n	800d012 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d042:	2203      	movs	r2, #3
 800d044:	9200      	str	r2, [sp, #0]
 800d046:	2200      	movs	r2, #0
 800d048:	4611      	mov	r1, r2
 800d04a:	f000 fd49 	bl	800dae0 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800d04e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d050:	2800      	cmp	r0, #0
 800d052:	d0d0      	beq.n	800cff6 <osSemaphoreNew+0x32>
 800d054:	2e00      	cmp	r6, #0
 800d056:	d0eb      	beq.n	800d030 <osSemaphoreNew+0x6c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d058:	2300      	movs	r3, #0
 800d05a:	461a      	mov	r2, r3
 800d05c:	4619      	mov	r1, r3
 800d05e:	f000 fdc4 	bl	800dbea <xQueueGenericSend>
 800d062:	2801      	cmp	r0, #1
 800d064:	d0e4      	beq.n	800d030 <osSemaphoreNew+0x6c>
            vSemaphoreDelete (hSemaphore);
 800d066:	4620      	mov	r0, r4
 800d068:	f001 f992 	bl	800e390 <vQueueDelete>
      if (hSemaphore != NULL) {
 800d06c:	e7c3      	b.n	800cff6 <osSemaphoreNew+0x32>
 800d06e:	bf00      	nop
 800d070:	20012e68 	.word	0x20012e68

0800d074 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d074:	b513      	push	{r0, r1, r4, lr}
 800d076:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d078:	b918      	cbnz	r0, 800d082 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800d07a:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d07e:	b002      	add	sp, #8
 800d080:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d082:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800d086:	b15b      	cbz	r3, 800d0a0 <osSemaphoreAcquire+0x2c>
    if (timeout != 0U) {
 800d088:	2c00      	cmp	r4, #0
 800d08a:	d1f6      	bne.n	800d07a <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d08c:	aa01      	add	r2, sp, #4
 800d08e:	4621      	mov	r1, r4
      yield = pdFALSE;
 800d090:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d092:	f001 f900 	bl	800e296 <xQueueReceiveFromISR>
 800d096:	2801      	cmp	r0, #1
 800d098:	d016      	beq.n	800d0c8 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
 800d09a:	f06f 0002 	mvn.w	r0, #2
 800d09e:	e7ee      	b.n	800d07e <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0a0:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d0a4:	b913      	cbnz	r3, 800d0ac <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0a6:	f3ef 8311 	mrs	r3, BASEPRI
 800d0aa:	b11b      	cbz	r3, 800d0b4 <osSemaphoreAcquire+0x40>
 800d0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e8 <osSemaphoreAcquire+0x74>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d0e9      	beq.n	800d088 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	f001 f806 	bl	800e0c6 <xQueueSemaphoreTake>
 800d0ba:	2801      	cmp	r0, #1
 800d0bc:	d006      	beq.n	800d0cc <osSemaphoreAcquire+0x58>
      if (timeout != 0U) {
 800d0be:	2c00      	cmp	r4, #0
 800d0c0:	d0eb      	beq.n	800d09a <osSemaphoreAcquire+0x26>
        stat = osErrorTimeout;
 800d0c2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d0c6:	e7da      	b.n	800d07e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800d0c8:	9b01      	ldr	r3, [sp, #4]
 800d0ca:	b90b      	cbnz	r3, 800d0d0 <osSemaphoreAcquire+0x5c>
  stat = osOK;
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e7d6      	b.n	800d07e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800d0d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	e7f2      	b.n	800d0cc <osSemaphoreAcquire+0x58>
 800d0e6:	bf00      	nop
 800d0e8:	20012e68 	.word	0x20012e68

0800d0ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d0ec:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d0ee:	b370      	cbz	r0, 800d14e <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0f0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800d0f4:	b15b      	cbz	r3, 800d10e <osSemaphoreRelease+0x22>
    yield = pdFALSE;
 800d0f6:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0f8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800d0fa:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0fc:	f000 fee6 	bl	800decc <xQueueGiveFromISR>
 800d100:	2801      	cmp	r0, #1
 800d102:	d016      	beq.n	800d132 <osSemaphoreRelease+0x46>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800d104:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800d108:	b003      	add	sp, #12
 800d10a:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d10e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800d112:	b913      	cbnz	r3, 800d11a <osSemaphoreRelease+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d114:	f3ef 8311 	mrs	r3, BASEPRI
 800d118:	b11b      	cbz	r3, 800d122 <osSemaphoreRelease+0x36>
 800d11a:	4b0e      	ldr	r3, [pc, #56]	@ (800d154 <osSemaphoreRelease+0x68>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d0e9      	beq.n	800d0f6 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d122:	2300      	movs	r3, #0
 800d124:	461a      	mov	r2, r3
 800d126:	4619      	mov	r1, r3
 800d128:	f000 fd5f 	bl	800dbea <xQueueGenericSend>
 800d12c:	2801      	cmp	r0, #1
 800d12e:	d00c      	beq.n	800d14a <osSemaphoreRelease+0x5e>
 800d130:	e7e8      	b.n	800d104 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800d132:	9b01      	ldr	r3, [sp, #4]
 800d134:	b14b      	cbz	r3, 800d14a <osSemaphoreRelease+0x5e>
 800d136:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d13e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800d14a:	2000      	movs	r0, #0
 800d14c:	e7dc      	b.n	800d108 <osSemaphoreRelease+0x1c>
    stat = osErrorParameter;
 800d14e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d152:	e7d9      	b.n	800d108 <osSemaphoreRelease+0x1c>
 800d154:	20012e68 	.word	0x20012e68

0800d158 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d158:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d15a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d15c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d160:	b11b      	cbz	r3, 800d16a <osMessageQueueNew+0x12>
  hQueue = NULL;
 800d162:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800d164:	4628      	mov	r0, r5
 800d166:	b002      	add	sp, #8
 800d168:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d16e:	b913      	cbnz	r3, 800d176 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d170:	f3ef 8311 	mrs	r3, BASEPRI
 800d174:	b11b      	cbz	r3, 800d17e <osMessageQueueNew+0x26>
 800d176:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e0 <osMessageQueueNew+0x88>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d0f1      	beq.n	800d162 <osMessageQueueNew+0xa>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d0ef      	beq.n	800d162 <osMessageQueueNew+0xa>
 800d182:	2900      	cmp	r1, #0
 800d184:	d0ed      	beq.n	800d162 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800d186:	b1ec      	cbz	r4, 800d1c4 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d188:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800d18c:	b193      	cbz	r3, 800d1b4 <osMessageQueueNew+0x5c>
 800d18e:	2a4f      	cmp	r2, #79	@ 0x4f
 800d190:	d9e7      	bls.n	800d162 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d192:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d194:	2a00      	cmp	r2, #0
 800d196:	d0e4      	beq.n	800d162 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d198:	fb01 f500 	mul.w	r5, r1, r0
 800d19c:	6966      	ldr	r6, [r4, #20]
 800d19e:	42ae      	cmp	r6, r5
 800d1a0:	d3df      	bcc.n	800d162 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d1a2:	2500      	movs	r5, #0
 800d1a4:	9500      	str	r5, [sp, #0]
 800d1a6:	f000 fc9b 	bl	800dae0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d0d8      	beq.n	800d162 <osMessageQueueNew+0xa>
        name = attr->name;
 800d1b0:	6824      	ldr	r4, [r4, #0]
 800d1b2:	e00f      	b.n	800d1d4 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	d1d4      	bne.n	800d162 <osMessageQueueNew+0xa>
 800d1b8:	6923      	ldr	r3, [r4, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1d1      	bne.n	800d162 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d1be:	6963      	ldr	r3, [r4, #20]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1ce      	bne.n	800d162 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f000 fc9f 	bl	800db08 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d0c8      	beq.n	800d162 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800d1d0:	2c00      	cmp	r4, #0
 800d1d2:	d1ed      	bne.n	800d1b0 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f001 f8b0 	bl	800e33c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d1dc:	e7c2      	b.n	800d164 <osMessageQueueNew+0xc>
 800d1de:	bf00      	nop
 800d1e0:	20012e68 	.word	0x20012e68

0800d1e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d1e4:	b513      	push	{r0, r1, r4, lr}
 800d1e6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1e8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d1ec:	b123      	cbz	r3, 800d1f8 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1ee:	b9d8      	cbnz	r0, 800d228 <osMessageQueuePut+0x44>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800d1f0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d1f4:	b002      	add	sp, #8
 800d1f6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1f8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d1fc:	b913      	cbnz	r3, 800d204 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1fe:	f3ef 8311 	mrs	r3, BASEPRI
 800d202:	b11b      	cbz	r3, 800d20c <osMessageQueuePut+0x28>
 800d204:	4b17      	ldr	r3, [pc, #92]	@ (800d264 <osMessageQueuePut+0x80>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d0f0      	beq.n	800d1ee <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d0ef      	beq.n	800d1f0 <osMessageQueuePut+0xc>
 800d210:	2900      	cmp	r1, #0
 800d212:	d0ed      	beq.n	800d1f0 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d214:	2300      	movs	r3, #0
 800d216:	4622      	mov	r2, r4
 800d218:	f000 fce7 	bl	800dbea <xQueueGenericSend>
 800d21c:	2801      	cmp	r0, #1
 800d21e:	d013      	beq.n	800d248 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 800d220:	b16c      	cbz	r4, 800d23e <osMessageQueuePut+0x5a>
          stat = osErrorTimeout;
 800d222:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d226:	e7e5      	b.n	800d1f4 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d228:	2900      	cmp	r1, #0
 800d22a:	d0e1      	beq.n	800d1f0 <osMessageQueuePut+0xc>
 800d22c:	2c00      	cmp	r4, #0
 800d22e:	d1df      	bne.n	800d1f0 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d230:	4623      	mov	r3, r4
 800d232:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d234:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d236:	f000 fde5 	bl	800de04 <xQueueGenericSendFromISR>
 800d23a:	2801      	cmp	r0, #1
 800d23c:	d002      	beq.n	800d244 <osMessageQueuePut+0x60>
        stat = osErrorResource;
 800d23e:	f06f 0002 	mvn.w	r0, #2
 800d242:	e7d7      	b.n	800d1f4 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	b90b      	cbnz	r3, 800d24c <osMessageQueuePut+0x68>
  stat = osOK;
 800d248:	2000      	movs	r0, #0
 800d24a:	e7d3      	b.n	800d1f4 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800d24c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d254:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	e7f2      	b.n	800d248 <osMessageQueuePut+0x64>
 800d262:	bf00      	nop
 800d264:	20012e68 	.word	0x20012e68

0800d268 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d268:	b513      	push	{r0, r1, r4, lr}
 800d26a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d26c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d270:	b123      	cbz	r3, 800d27c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d272:	b9d0      	cbnz	r0, 800d2aa <osMessageQueueGet+0x42>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800d274:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800d278:	b002      	add	sp, #8
 800d27a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d27c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d280:	b913      	cbnz	r3, 800d288 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d282:	f3ef 8311 	mrs	r3, BASEPRI
 800d286:	b11b      	cbz	r3, 800d290 <osMessageQueueGet+0x28>
 800d288:	4b16      	ldr	r3, [pc, #88]	@ (800d2e4 <osMessageQueueGet+0x7c>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d0f0      	beq.n	800d272 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d290:	2800      	cmp	r0, #0
 800d292:	d0ef      	beq.n	800d274 <osMessageQueueGet+0xc>
 800d294:	2900      	cmp	r1, #0
 800d296:	d0ed      	beq.n	800d274 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d298:	4622      	mov	r2, r4
 800d29a:	f000 fe70 	bl	800df7e <xQueueReceive>
 800d29e:	2801      	cmp	r0, #1
 800d2a0:	d012      	beq.n	800d2c8 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800d2a2:	b164      	cbz	r4, 800d2be <osMessageQueueGet+0x56>
          stat = osErrorTimeout;
 800d2a4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800d2a8:	e7e6      	b.n	800d278 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2aa:	2900      	cmp	r1, #0
 800d2ac:	d0e2      	beq.n	800d274 <osMessageQueueGet+0xc>
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	d1e0      	bne.n	800d274 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2b2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d2b4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2b6:	f000 ffee 	bl	800e296 <xQueueReceiveFromISR>
 800d2ba:	2801      	cmp	r0, #1
 800d2bc:	d002      	beq.n	800d2c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d2be:	f06f 0002 	mvn.w	r0, #2
 800d2c2:	e7d9      	b.n	800d278 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	b90b      	cbnz	r3, 800d2cc <osMessageQueueGet+0x64>
  stat = osOK;
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	e7d5      	b.n	800d278 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800d2cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d2d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	e7f2      	b.n	800d2c8 <osMessageQueueGet+0x60>
 800d2e2:	bf00      	nop
 800d2e4:	20012e68 	.word	0x20012e68

0800d2e8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d2e8:	4b03      	ldr	r3, [pc, #12]	@ (800d2f8 <vApplicationGetIdleTaskMemory+0x10>)
 800d2ea:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d2ec:	4b03      	ldr	r3, [pc, #12]	@ (800d2fc <vApplicationGetIdleTaskMemory+0x14>)
 800d2ee:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d2f0:	2380      	movs	r3, #128	@ 0x80
 800d2f2:	6013      	str	r3, [r2, #0]
}
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	20012dbc 	.word	0x20012dbc
 800d2fc:	20012bbc 	.word	0x20012bbc

0800d300 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d300:	4b03      	ldr	r3, [pc, #12]	@ (800d310 <vApplicationGetTimerTaskMemory+0x10>)
 800d302:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d304:	4b03      	ldr	r3, [pc, #12]	@ (800d314 <vApplicationGetTimerTaskMemory+0x14>)
 800d306:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d30c:	6013      	str	r3, [r2, #0]
}
 800d30e:	4770      	bx	lr
 800d310:	20012b10 	.word	0x20012b10
 800d314:	20012710 	.word	0x20012710

0800d318 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d318:	4b10      	ldr	r3, [pc, #64]	@ (800d35c <prvInsertBlockIntoFreeList+0x44>)
{
 800d31a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d31c:	461a      	mov	r2, r3
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4283      	cmp	r3, r0
 800d322:	d3fb      	bcc.n	800d31c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d324:	6854      	ldr	r4, [r2, #4]
 800d326:	1911      	adds	r1, r2, r4
 800d328:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d32a:	bf01      	itttt	eq
 800d32c:	6841      	ldreq	r1, [r0, #4]
 800d32e:	4610      	moveq	r0, r2
 800d330:	1909      	addeq	r1, r1, r4
 800d332:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d334:	6844      	ldr	r4, [r0, #4]
 800d336:	1901      	adds	r1, r0, r4
 800d338:	428b      	cmp	r3, r1
 800d33a:	d10c      	bne.n	800d356 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d33c:	4908      	ldr	r1, [pc, #32]	@ (800d360 <prvInsertBlockIntoFreeList+0x48>)
 800d33e:	6809      	ldr	r1, [r1, #0]
 800d340:	428b      	cmp	r3, r1
 800d342:	d003      	beq.n	800d34c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d344:	6859      	ldr	r1, [r3, #4]
 800d346:	4421      	add	r1, r4
 800d348:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d34a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d34c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d34e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d350:	bf18      	it	ne
 800d352:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d354:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d356:	4619      	mov	r1, r3
 800d358:	e7f8      	b.n	800d34c <prvInsertBlockIntoFreeList+0x34>
 800d35a:	bf00      	nop
 800d35c:	20012e7c 	.word	0x20012e7c
 800d360:	20012e78 	.word	0x20012e78

0800d364 <pvPortMalloc>:
{
 800d364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d368:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d36a:	f001 fa2f 	bl	800e7cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d36e:	4940      	ldr	r1, [pc, #256]	@ (800d470 <pvPortMalloc+0x10c>)
 800d370:	4d40      	ldr	r5, [pc, #256]	@ (800d474 <pvPortMalloc+0x110>)
 800d372:	680b      	ldr	r3, [r1, #0]
 800d374:	b9f3      	cbnz	r3, 800d3b4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d376:	4a40      	ldr	r2, [pc, #256]	@ (800d478 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d378:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d37a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d37c:	4e3f      	ldr	r6, [pc, #252]	@ (800d47c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d37e:	bf1b      	ittet	ne
 800d380:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d382:	4b3f      	ldrne	r3, [pc, #252]	@ (800d480 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d384:	4b3f      	ldreq	r3, [pc, #252]	@ (800d484 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d386:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d38a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d38c:	bf18      	it	ne
 800d38e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d390:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d392:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d394:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d396:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d39a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d39e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800d3a0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3a2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3a6:	4b38      	ldr	r3, [pc, #224]	@ (800d488 <pvPortMalloc+0x124>)
 800d3a8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3aa:	4b38      	ldr	r3, [pc, #224]	@ (800d48c <pvPortMalloc+0x128>)
 800d3ac:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3b2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3b4:	682e      	ldr	r6, [r5, #0]
 800d3b6:	4226      	tst	r6, r4
 800d3b8:	d154      	bne.n	800d464 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800d3ba:	2c00      	cmp	r4, #0
 800d3bc:	d043      	beq.n	800d446 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800d3be:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3c2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3c4:	bf1c      	itt	ne
 800d3c6:	f023 0307 	bicne.w	r3, r3, #7
 800d3ca:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d049      	beq.n	800d464 <pvPortMalloc+0x100>
 800d3d0:	4f2e      	ldr	r7, [pc, #184]	@ (800d48c <pvPortMalloc+0x128>)
 800d3d2:	683c      	ldr	r4, [r7, #0]
 800d3d4:	429c      	cmp	r4, r3
 800d3d6:	d345      	bcc.n	800d464 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800d3d8:	4a28      	ldr	r2, [pc, #160]	@ (800d47c <pvPortMalloc+0x118>)
 800d3da:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3dc:	6868      	ldr	r0, [r5, #4]
 800d3de:	4298      	cmp	r0, r3
 800d3e0:	d204      	bcs.n	800d3ec <pvPortMalloc+0x88>
 800d3e2:	f8d5 c000 	ldr.w	ip, [r5]
 800d3e6:	f1bc 0f00 	cmp.w	ip, #0
 800d3ea:	d117      	bne.n	800d41c <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 800d3ec:	6809      	ldr	r1, [r1, #0]
 800d3ee:	42a9      	cmp	r1, r5
 800d3f0:	d038      	beq.n	800d464 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3f2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3f4:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3f8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3fa:	1ac2      	subs	r2, r0, r3
 800d3fc:	2a10      	cmp	r2, #16
 800d3fe:	d914      	bls.n	800d42a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d400:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d402:	0741      	lsls	r1, r0, #29
 800d404:	d00d      	beq.n	800d422 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40a:	b672      	cpsid	i
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	b662      	cpsie	i
 800d41a:	e7fe      	b.n	800d41a <pvPortMalloc+0xb6>
 800d41c:	462a      	mov	r2, r5
 800d41e:	4665      	mov	r5, ip
 800d420:	e7dc      	b.n	800d3dc <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d422:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d424:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d426:	f7ff ff77 	bl	800d318 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d42a:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d42c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d42e:	4916      	ldr	r1, [pc, #88]	@ (800d488 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d430:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d432:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d434:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d436:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d438:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d43a:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d43c:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d43e:	bf38      	it	cc
 800d440:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d442:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800d446:	f001 fa67 	bl	800e918 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d44a:	0763      	lsls	r3, r4, #29
 800d44c:	d00c      	beq.n	800d468 <pvPortMalloc+0x104>
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	b672      	cpsid	i
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	b662      	cpsie	i
 800d462:	e7fe      	b.n	800d462 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800d464:	2400      	movs	r4, #0
 800d466:	e7ee      	b.n	800d446 <pvPortMalloc+0xe2>
}
 800d468:	4620      	mov	r0, r4
 800d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d46e:	bf00      	nop
 800d470:	20012e78 	.word	0x20012e78
 800d474:	20012e6c 	.word	0x20012e6c
 800d478:	20012e84 	.word	0x20012e84
 800d47c:	20012e7c 	.word	0x20012e7c
 800d480:	20026704 	.word	0x20026704
 800d484:	00013880 	.word	0x00013880
 800d488:	20012e70 	.word	0x20012e70
 800d48c:	20012e74 	.word	0x20012e74

0800d490 <vPortFree>:
{
 800d490:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d492:	4604      	mov	r4, r0
 800d494:	2800      	cmp	r0, #0
 800d496:	d032      	beq.n	800d4fe <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d498:	4a19      	ldr	r2, [pc, #100]	@ (800d500 <vPortFree+0x70>)
 800d49a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d49e:	6812      	ldr	r2, [r2, #0]
 800d4a0:	4213      	tst	r3, r2
 800d4a2:	d10a      	bne.n	800d4ba <vPortFree+0x2a>
 800d4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a8:	b672      	cpsid	i
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	b662      	cpsie	i
 800d4b8:	e7fe      	b.n	800d4b8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4ba:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d4be:	b151      	cbz	r1, 800d4d6 <vPortFree+0x46>
 800d4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c4:	b672      	cpsid	i
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	b662      	cpsie	i
 800d4d4:	e7fe      	b.n	800d4d4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4d6:	ea23 0302 	bic.w	r3, r3, r2
 800d4da:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d4de:	f001 f975 	bl	800e7cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4e2:	4a08      	ldr	r2, [pc, #32]	@ (800d504 <vPortFree+0x74>)
 800d4e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4e8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4ec:	6811      	ldr	r1, [r2, #0]
 800d4ee:	440b      	add	r3, r1
 800d4f0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4f2:	f7ff ff11 	bl	800d318 <prvInsertBlockIntoFreeList>
}
 800d4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800d4fa:	f001 ba0d 	b.w	800e918 <xTaskResumeAll>
}
 800d4fe:	bd10      	pop	{r4, pc}
 800d500:	20012e6c 	.word	0x20012e6c
 800d504:	20012e74 	.word	0x20012e74

0800d508 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d508:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d50c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d510:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d512:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d514:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d51c:	4770      	bx	lr

0800d51e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d51e:	2300      	movs	r3, #0
 800d520:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d522:	4770      	bx	lr

0800d524 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d524:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d526:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d528:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d52a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d52c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d52e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d530:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d532:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d534:	3301      	adds	r3, #1
 800d536:	6003      	str	r3, [r0, #0]
}
 800d538:	4770      	bx	lr

0800d53a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d53a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d53c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d53e:	1c63      	adds	r3, r4, #1
 800d540:	d10a      	bne.n	800d558 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d542:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d544:	685a      	ldr	r2, [r3, #4]
 800d546:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d548:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d54a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d54c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d54e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d550:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d552:	3301      	adds	r3, #1
 800d554:	6003      	str	r3, [r0, #0]
}
 800d556:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d558:	f100 0208 	add.w	r2, r0, #8
 800d55c:	4613      	mov	r3, r2
 800d55e:	6852      	ldr	r2, [r2, #4]
 800d560:	6815      	ldr	r5, [r2, #0]
 800d562:	42a5      	cmp	r5, r4
 800d564:	d9fa      	bls.n	800d55c <vListInsert+0x22>
 800d566:	e7ed      	b.n	800d544 <vListInsert+0xa>

0800d568 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d568:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d56a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d56e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d570:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d572:	6859      	ldr	r1, [r3, #4]
 800d574:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d576:	bf08      	it	eq
 800d578:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d57a:	2200      	movs	r2, #0
 800d57c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	3a01      	subs	r2, #1
 800d582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d584:	6818      	ldr	r0, [r3, #0]
}
 800d586:	4770      	bx	lr

0800d588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d588:	4808      	ldr	r0, [pc, #32]	@ (800d5ac <prvPortStartFirstTask+0x24>)
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	6800      	ldr	r0, [r0, #0]
 800d58e:	f380 8808 	msr	MSP, r0
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8814 	msr	CONTROL, r0
 800d59a:	b662      	cpsie	i
 800d59c:	b661      	cpsie	f
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	df00      	svc	0
 800d5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5aa:	0000      	.short	0x0000
 800d5ac:	e000ed08 	.word	0xe000ed08

0800d5b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5b0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5c0 <vPortEnableVFP+0x10>
 800d5b4:	6801      	ldr	r1, [r0, #0]
 800d5b6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d5ba:	6001      	str	r1, [r0, #0]
 800d5bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5be:	0000      	.short	0x0000
 800d5c0:	e000ed88 	.word	0xe000ed88

0800d5c4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d5c4:	2300      	movs	r3, #0
{
 800d5c6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d5c8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d608 <prvTaskExitError+0x44>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	d00a      	beq.n	800d5e8 <prvTaskExitError+0x24>
 800d5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d6:	b672      	cpsid	i
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	b662      	cpsie	i
 800d5e6:	e7fe      	b.n	800d5e6 <prvTaskExitError+0x22>
 800d5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ec:	b672      	cpsid	i
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	b662      	cpsie	i
	while( ulDummy == 0 )
 800d5fc:	9b01      	ldr	r3, [sp, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0fc      	beq.n	800d5fc <prvTaskExitError+0x38>
}
 800d602:	b002      	add	sp, #8
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	2000006c 	.word	0x2000006c

0800d60c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d60c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d610:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d614:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d618:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d61a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d61c:	4b03      	ldr	r3, [pc, #12]	@ (800d62c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d61e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d620:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d622:	f06f 0302 	mvn.w	r3, #2
 800d626:	6203      	str	r3, [r0, #32]
}
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	0800d5c5 	.word	0x0800d5c5

0800d630 <SVC_Handler>:
	__asm volatile (
 800d630:	4b07      	ldr	r3, [pc, #28]	@ (800d650 <pxCurrentTCBConst2>)
 800d632:	6819      	ldr	r1, [r3, #0]
 800d634:	6808      	ldr	r0, [r1, #0]
 800d636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63a:	f380 8809 	msr	PSP, r0
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f04f 0000 	mov.w	r0, #0
 800d646:	f380 8811 	msr	BASEPRI, r0
 800d64a:	4770      	bx	lr
 800d64c:	f3af 8000 	nop.w

0800d650 <pxCurrentTCBConst2>:
 800d650:	20026c44 	.word	0x20026c44

0800d654 <vPortEnterCritical>:
 800d654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d658:	b672      	cpsid	i
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	b662      	cpsie	i
	uxCriticalNesting++;
 800d668:	4a0b      	ldr	r2, [pc, #44]	@ (800d698 <vPortEnterCritical+0x44>)
 800d66a:	6813      	ldr	r3, [r2, #0]
 800d66c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d66e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d672:	d110      	bne.n	800d696 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d674:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d678:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	b153      	cbz	r3, 800d696 <vPortEnterCritical+0x42>
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	b672      	cpsid	i
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	b662      	cpsie	i
 800d694:	e7fe      	b.n	800d694 <vPortEnterCritical+0x40>
}
 800d696:	4770      	bx	lr
 800d698:	2000006c 	.word	0x2000006c

0800d69c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d69c:	4a09      	ldr	r2, [pc, #36]	@ (800d6c4 <vPortExitCritical+0x28>)
 800d69e:	6813      	ldr	r3, [r2, #0]
 800d6a0:	b953      	cbnz	r3, 800d6b8 <vPortExitCritical+0x1c>
 800d6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a6:	b672      	cpsid	i
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	b662      	cpsie	i
 800d6b6:	e7fe      	b.n	800d6b6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6bc:	b90b      	cbnz	r3, 800d6c2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6be:	f383 8811 	msr	BASEPRI, r3
}
 800d6c2:	4770      	bx	lr
 800d6c4:	2000006c 	.word	0x2000006c
	...

0800d6d0 <PendSV_Handler>:
	__asm volatile
 800d6d0:	f3ef 8009 	mrs	r0, PSP
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	4b15      	ldr	r3, [pc, #84]	@ (800d730 <pxCurrentTCBConst>)
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	f01e 0f10 	tst.w	lr, #16
 800d6e0:	bf08      	it	eq
 800d6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	6010      	str	r0, [r2, #0]
 800d6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d6f4:	b672      	cpsid	i
 800d6f6:	f380 8811 	msr	BASEPRI, r0
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	b662      	cpsie	i
 800d704:	f001 fa18 	bl	800eb38 <vTaskSwitchContext>
 800d708:	f04f 0000 	mov.w	r0, #0
 800d70c:	f380 8811 	msr	BASEPRI, r0
 800d710:	bc09      	pop	{r0, r3}
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	6808      	ldr	r0, [r1, #0]
 800d716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71a:	f01e 0f10 	tst.w	lr, #16
 800d71e:	bf08      	it	eq
 800d720:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d724:	f380 8809 	msr	PSP, r0
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop

0800d730 <pxCurrentTCBConst>:
 800d730:	20026c44 	.word	0x20026c44

0800d734 <SysTick_Handler>:
{
 800d734:	b508      	push	{r3, lr}
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73a:	b672      	cpsid	i
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800d74a:	f001 f84d 	bl	800e7e8 <xTaskIncrementTick>
 800d74e:	b128      	cbz	r0, 800d75c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d750:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d758:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d75c:	2300      	movs	r3, #0
 800d75e:	f383 8811 	msr	BASEPRI, r3
}
 800d762:	bd08      	pop	{r3, pc}

0800d764 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d764:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d768:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d76a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d76e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d770:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d772:	4b04      	ldr	r3, [pc, #16]	@ (800d784 <vPortSetupTimerInterrupt+0x20>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	fbb3 f3f1 	udiv	r3, r3, r1
 800d77a:	3b01      	subs	r3, #1
 800d77c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d77e:	2307      	movs	r3, #7
 800d780:	6113      	str	r3, [r2, #16]
}
 800d782:	4770      	bx	lr
 800d784:	20000060 	.word	0x20000060

0800d788 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d788:	4b2c      	ldr	r3, [pc, #176]	@ (800d83c <xPortStartScheduler+0xb4>)
{
 800d78a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d78c:	781a      	ldrb	r2, [r3, #0]
 800d78e:	b2d2      	uxtb	r2, r2
 800d790:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d792:	22ff      	movs	r2, #255	@ 0xff
 800d794:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d796:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d798:	4a29      	ldr	r2, [pc, #164]	@ (800d840 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d7a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d7a8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7aa:	2307      	movs	r3, #7
 800d7ac:	4a25      	ldr	r2, [pc, #148]	@ (800d844 <xPortStartScheduler+0xbc>)
 800d7ae:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7b0:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d7b4:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7b6:	0609      	lsls	r1, r1, #24
 800d7b8:	d40c      	bmi.n	800d7d4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d7ba:	2b03      	cmp	r3, #3
 800d7bc:	d013      	beq.n	800d7e6 <xPortStartScheduler+0x5e>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c2:	b672      	cpsid	i
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	b662      	cpsie	i
 800d7d2:	e7fe      	b.n	800d7d2 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d7dc:	005b      	lsls	r3, r3, #1
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	f88d 3003 	strb.w	r3, [sp, #3]
 800d7e4:	e7e4      	b.n	800d7b0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7ea:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d7ee:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7f0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7f2:	9b01      	ldr	r3, [sp, #4]
 800d7f4:	4a11      	ldr	r2, [pc, #68]	@ (800d83c <xPortStartScheduler+0xb4>)
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7fa:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d7fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d802:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d806:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d80a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d80e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d812:	f7ff ffa7 	bl	800d764 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d816:	4b0c      	ldr	r3, [pc, #48]	@ (800d848 <xPortStartScheduler+0xc0>)
 800d818:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d81a:	f7ff fec9 	bl	800d5b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d81e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d822:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d826:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d82a:	f7ff fead 	bl	800d588 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d82e:	f001 f983 	bl	800eb38 <vTaskSwitchContext>
}
 800d832:	4628      	mov	r0, r5
	prvTaskExitError();
 800d834:	f7ff fec6 	bl	800d5c4 <prvTaskExitError>
}
 800d838:	b003      	add	sp, #12
 800d83a:	bd30      	pop	{r4, r5, pc}
 800d83c:	e000e400 	.word	0xe000e400
 800d840:	20026708 	.word	0x20026708
 800d844:	20026704 	.word	0x20026704
 800d848:	2000006c 	.word	0x2000006c

0800d84c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d84c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d850:	2b0f      	cmp	r3, #15
 800d852:	d910      	bls.n	800d876 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d854:	4a13      	ldr	r2, [pc, #76]	@ (800d8a4 <vPortValidateInterruptPriority+0x58>)
 800d856:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d858:	4a13      	ldr	r2, [pc, #76]	@ (800d8a8 <vPortValidateInterruptPriority+0x5c>)
 800d85a:	7812      	ldrb	r2, [r2, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d90a      	bls.n	800d876 <vPortValidateInterruptPriority+0x2a>
 800d860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d864:	b672      	cpsid	i
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	b662      	cpsie	i
 800d874:	e7fe      	b.n	800d874 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d876:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d87a:	4a0c      	ldr	r2, [pc, #48]	@ (800d8ac <vPortValidateInterruptPriority+0x60>)
 800d87c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d880:	6812      	ldr	r2, [r2, #0]
 800d882:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d886:	4293      	cmp	r3, r2
 800d888:	d90a      	bls.n	800d8a0 <vPortValidateInterruptPriority+0x54>
 800d88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88e:	b672      	cpsid	i
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	b662      	cpsie	i
 800d89e:	e7fe      	b.n	800d89e <vPortValidateInterruptPriority+0x52>
	}
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	e000e3f0 	.word	0xe000e3f0
 800d8a8:	20026708 	.word	0x20026708
 800d8ac:	20026704 	.word	0x20026704

0800d8b0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8b0:	b510      	push	{r4, lr}
 800d8b2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8b4:	f7ff fece 	bl	800d654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8b8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d8ba:	f7ff feef 	bl	800d69c <vPortExitCritical>

	return xReturn;
}
 800d8be:	fab4 f084 	clz	r0, r4
 800d8c2:	0940      	lsrs	r0, r0, #5
 800d8c4:	bd10      	pop	{r4, pc}

0800d8c6 <prvCopyDataToQueue>:
{
 800d8c6:	b570      	push	{r4, r5, r6, lr}
 800d8c8:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8ca:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d8cc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ce:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8d0:	b942      	cbnz	r2, 800d8e4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8d2:	6806      	ldr	r6, [r0, #0]
 800d8d4:	b99e      	cbnz	r6, 800d8fe <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8d6:	6880      	ldr	r0, [r0, #8]
 800d8d8:	f001 fa9e 	bl	800ee18 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8dc:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8de:	3501      	adds	r5, #1
 800d8e0:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d8e2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d8e4:	b96e      	cbnz	r6, 800d902 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8e6:	6840      	ldr	r0, [r0, #4]
 800d8e8:	f01b fd61 	bl	80293ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8ec:	6863      	ldr	r3, [r4, #4]
 800d8ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d8f0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8f2:	68a2      	ldr	r2, [r4, #8]
 800d8f4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8f6:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8f8:	bf24      	itt	cs
 800d8fa:	6823      	ldrcs	r3, [r4, #0]
 800d8fc:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d8fe:	2000      	movs	r0, #0
 800d900:	e7ed      	b.n	800d8de <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d902:	68c0      	ldr	r0, [r0, #12]
 800d904:	f01b fd53 	bl	80293ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d908:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d90a:	68e3      	ldr	r3, [r4, #12]
 800d90c:	4251      	negs	r1, r2
 800d90e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d910:	6822      	ldr	r2, [r4, #0]
 800d912:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d914:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d916:	bf3e      	ittt	cc
 800d918:	68a3      	ldrcc	r3, [r4, #8]
 800d91a:	185b      	addcc	r3, r3, r1
 800d91c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d91e:	2e02      	cmp	r6, #2
 800d920:	d1ed      	bne.n	800d8fe <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d922:	b10d      	cbz	r5, 800d928 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d924:	3d01      	subs	r5, #1
 800d926:	e7ea      	b.n	800d8fe <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d928:	4628      	mov	r0, r5
 800d92a:	e7d8      	b.n	800d8de <prvCopyDataToQueue+0x18>

0800d92c <prvCopyDataFromQueue>:
{
 800d92c:	4603      	mov	r3, r0
 800d92e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d932:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d934:	b162      	cbz	r2, 800d950 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d936:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d938:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d93a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d93c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d93e:	60dc      	str	r4, [r3, #12]
}
 800d940:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d944:	bf24      	itt	cs
 800d946:	6819      	ldrcs	r1, [r3, #0]
 800d948:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d94a:	68d9      	ldr	r1, [r3, #12]
 800d94c:	f01b bd2f 	b.w	80293ae <memcpy>
}
 800d950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <prvUnlockQueue>:
{
 800d956:	b570      	push	{r4, r5, r6, lr}
 800d958:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d95a:	f7ff fe7b 	bl	800d654 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d95e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d962:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d966:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d968:	2d00      	cmp	r5, #0
 800d96a:	dc14      	bgt.n	800d996 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d96c:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d96e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d972:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d976:	f7ff fe91 	bl	800d69c <vPortExitCritical>
	taskENTER_CRITICAL();
 800d97a:	f7ff fe6b 	bl	800d654 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d97e:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d982:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d984:	2d00      	cmp	r5, #0
 800d986:	dc12      	bgt.n	800d9ae <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d988:	23ff      	movs	r3, #255	@ 0xff
 800d98a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d992:	f7ff be83 	b.w	800d69c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d996:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0e7      	beq.n	800d96c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d99c:	4630      	mov	r0, r6
 800d99e:	f001 f951 	bl	800ec44 <xTaskRemoveFromEventList>
 800d9a2:	b108      	cbz	r0, 800d9a8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d9a4:	f001 f9de 	bl	800ed64 <vTaskMissedYield>
			--cTxLock;
 800d9a8:	3d01      	subs	r5, #1
 800d9aa:	b26d      	sxtb	r5, r5
 800d9ac:	e7dc      	b.n	800d968 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0e9      	beq.n	800d988 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f001 f945 	bl	800ec44 <xTaskRemoveFromEventList>
 800d9ba:	b108      	cbz	r0, 800d9c0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d9bc:	f001 f9d2 	bl	800ed64 <vTaskMissedYield>
				--cRxLock;
 800d9c0:	3d01      	subs	r5, #1
 800d9c2:	b26d      	sxtb	r5, r5
 800d9c4:	e7de      	b.n	800d984 <prvUnlockQueue+0x2e>

0800d9c6 <xQueueGenericReset>:
{
 800d9c6:	b538      	push	{r3, r4, r5, lr}
 800d9c8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	b950      	cbnz	r0, 800d9e4 <xQueueGenericReset+0x1e>
 800d9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d2:	b672      	cpsid	i
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	b662      	cpsie	i
 800d9e2:	e7fe      	b.n	800d9e2 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800d9e4:	f7ff fe36 	bl	800d654 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9e8:	6822      	ldr	r2, [r4, #0]
 800d9ea:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9ee:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9f0:	434b      	muls	r3, r1
 800d9f2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9f4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9f6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9f8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d9fa:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d9fc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9fe:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da00:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800da02:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da06:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800da0a:	b9a5      	cbnz	r5, 800da36 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	b173      	cbz	r3, 800da2e <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da10:	f104 0010 	add.w	r0, r4, #16
 800da14:	f001 f916 	bl	800ec44 <xTaskRemoveFromEventList>
 800da18:	b148      	cbz	r0, 800da2e <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800da1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800da1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800da2e:	f7ff fe35 	bl	800d69c <vPortExitCritical>
}
 800da32:	2001      	movs	r0, #1
 800da34:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da36:	f104 0010 	add.w	r0, r4, #16
 800da3a:	f7ff fd65 	bl	800d508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da3e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800da42:	f7ff fd61 	bl	800d508 <vListInitialise>
 800da46:	e7f2      	b.n	800da2e <xQueueGenericReset+0x68>

0800da48 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800da48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da4a:	460d      	mov	r5, r1
		configASSERT( pxStaticQueue != NULL );
 800da4c:	461c      	mov	r4, r3
 800da4e:	b953      	cbnz	r3, 800da66 <xQueueGenericCreateStatic.part.0+0x1e>
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	b672      	cpsid	i
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	b662      	cpsie	i
 800da64:	e7fe      	b.n	800da64 <xQueueGenericCreateStatic.part.0+0x1c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da66:	b15a      	cbz	r2, 800da80 <xQueueGenericCreateStatic.part.0+0x38>
 800da68:	b9b1      	cbnz	r1, 800da98 <xQueueGenericCreateStatic.part.0+0x50>
 800da6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6e:	b672      	cpsid	i
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	b662      	cpsie	i
 800da7e:	e7fe      	b.n	800da7e <xQueueGenericCreateStatic.part.0+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da80:	b151      	cbz	r1, 800da98 <xQueueGenericCreateStatic.part.0+0x50>
 800da82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	e7fe      	b.n	800da96 <xQueueGenericCreateStatic.part.0+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da98:	2350      	movs	r3, #80	@ 0x50
 800da9a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da9c:	9b01      	ldr	r3, [sp, #4]
 800da9e:	2b50      	cmp	r3, #80	@ 0x50
 800daa0:	d00a      	beq.n	800dab8 <xQueueGenericCreateStatic.part.0+0x70>
 800daa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa6:	b672      	cpsid	i
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	b662      	cpsie	i
 800dab6:	e7fe      	b.n	800dab6 <xQueueGenericCreateStatic.part.0+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dab8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800daba:	2d00      	cmp	r5, #0
 800dabc:	bf08      	it	eq
 800dabe:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dac0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dac2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dac6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800dac8:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dacc:	4620      	mov	r0, r4
 800dace:	f7ff ff7a 	bl	800d9c6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800dad2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800dad6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800dad8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800dadc:	b003      	add	sp, #12
 800dade:	bd30      	pop	{r4, r5, pc}

0800dae0 <xQueueGenericCreateStatic>:
	{
 800dae0:	b410      	push	{r4}
 800dae2:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dae6:	b950      	cbnz	r0, 800dafe <xQueueGenericCreateStatic+0x1e>
 800dae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daec:	b672      	cpsid	i
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	b662      	cpsie	i
 800dafc:	e7fe      	b.n	800dafc <xQueueGenericCreateStatic+0x1c>
 800dafe:	9401      	str	r4, [sp, #4]
	}
 800db00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db04:	f7ff bfa0 	b.w	800da48 <xQueueGenericCreateStatic.part.0>

0800db08 <xQueueGenericCreate>:
	{
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	460d      	mov	r5, r1
 800db0c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db0e:	4606      	mov	r6, r0
 800db10:	b950      	cbnz	r0, 800db28 <xQueueGenericCreate+0x20>
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	b672      	cpsid	i
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	b662      	cpsie	i
 800db26:	e7fe      	b.n	800db26 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db28:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db2a:	3050      	adds	r0, #80	@ 0x50
 800db2c:	f7ff fc1a 	bl	800d364 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800db30:	4604      	mov	r4, r0
 800db32:	b170      	cbz	r0, 800db52 <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db34:	2300      	movs	r3, #0
 800db36:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800db3a:	b165      	cbz	r5, 800db56 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db3c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db40:	2101      	movs	r1, #1
 800db42:	4620      	mov	r0, r4
 800db44:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800db46:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db4a:	f7ff ff3c 	bl	800d9c6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800db4e:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800db52:	4620      	mov	r0, r4
 800db54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db56:	4603      	mov	r3, r0
 800db58:	e7f2      	b.n	800db40 <xQueueGenericCreate+0x38>

0800db5a <xQueueCreateCountingSemaphoreStatic>:
	{
 800db5a:	b513      	push	{r0, r1, r4, lr}
 800db5c:	4613      	mov	r3, r2
 800db5e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800db60:	b950      	cbnz	r0, 800db78 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800db62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db66:	b672      	cpsid	i
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	b662      	cpsie	i
 800db76:	e7fe      	b.n	800db76 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db78:	4288      	cmp	r0, r1
 800db7a:	d20a      	bcs.n	800db92 <xQueueCreateCountingSemaphoreStatic+0x38>
 800db7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db80:	b672      	cpsid	i
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	b662      	cpsie	i
 800db90:	e7fe      	b.n	800db90 <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db92:	2202      	movs	r2, #2
 800db94:	9200      	str	r2, [sp, #0]
 800db96:	2200      	movs	r2, #0
 800db98:	4611      	mov	r1, r2
 800db9a:	f7ff ffa1 	bl	800dae0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800db9e:	b100      	cbz	r0, 800dba2 <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dba0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800dba2:	b002      	add	sp, #8
 800dba4:	bd10      	pop	{r4, pc}

0800dba6 <xQueueCreateCountingSemaphore>:
	{
 800dba6:	b510      	push	{r4, lr}
 800dba8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dbaa:	b950      	cbnz	r0, 800dbc2 <xQueueCreateCountingSemaphore+0x1c>
 800dbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb0:	b672      	cpsid	i
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	b662      	cpsie	i
 800dbc0:	e7fe      	b.n	800dbc0 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dbc2:	4288      	cmp	r0, r1
 800dbc4:	d20a      	bcs.n	800dbdc <xQueueCreateCountingSemaphore+0x36>
 800dbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbca:	b672      	cpsid	i
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	b662      	cpsie	i
 800dbda:	e7fe      	b.n	800dbda <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dbdc:	2202      	movs	r2, #2
 800dbde:	2100      	movs	r1, #0
 800dbe0:	f7ff ff92 	bl	800db08 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dbe4:	b100      	cbz	r0, 800dbe8 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dbe6:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800dbe8:	bd10      	pop	{r4, pc}

0800dbea <xQueueGenericSend>:
{
 800dbea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800dbee:	460f      	mov	r7, r1
 800dbf0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800dbf2:	4604      	mov	r4, r0
{
 800dbf4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800dbf6:	b950      	cbnz	r0, 800dc0e <xQueueGenericSend+0x24>
 800dbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfc:	b672      	cpsid	i
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	b662      	cpsie	i
 800dc0c:	e7fe      	b.n	800dc0c <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc0e:	b961      	cbnz	r1, 800dc2a <xQueueGenericSend+0x40>
 800dc10:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dc12:	b153      	cbz	r3, 800dc2a <xQueueGenericSend+0x40>
 800dc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc18:	b672      	cpsid	i
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	b662      	cpsie	i
 800dc28:	e7fe      	b.n	800dc28 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc2a:	2e02      	cmp	r6, #2
 800dc2c:	d10d      	bne.n	800dc4a <xQueueGenericSend+0x60>
 800dc2e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d00a      	beq.n	800dc4a <xQueueGenericSend+0x60>
 800dc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc38:	b672      	cpsid	i
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	b662      	cpsie	i
 800dc48:	e7fe      	b.n	800dc48 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc4a:	f001 f897 	bl	800ed7c <xTaskGetSchedulerState>
 800dc4e:	4605      	mov	r5, r0
 800dc50:	b330      	cbz	r0, 800dca0 <xQueueGenericSend+0xb6>
 800dc52:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dc54:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800dc58:	f7ff fcfc 	bl	800d654 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dc5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d301      	bcc.n	800dc68 <xQueueGenericSend+0x7e>
 800dc64:	2e02      	cmp	r6, #2
 800dc66:	d129      	bne.n	800dcbc <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc68:	4632      	mov	r2, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f7ff fe2a 	bl	800d8c6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dc74:	b11b      	cbz	r3, 800dc7e <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc76:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dc7a:	f000 ffe3 	bl	800ec44 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800dc7e:	b148      	cbz	r0, 800dc94 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 800dc80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dc94:	f7ff fd02 	bl	800d69c <vPortExitCritical>
				return pdPASS;
 800dc98:	2001      	movs	r0, #1
}
 800dc9a:	b004      	add	sp, #16
 800dc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dca0:	9b01      	ldr	r3, [sp, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0d6      	beq.n	800dc54 <xQueueGenericSend+0x6a>
 800dca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcaa:	b672      	cpsid	i
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	b662      	cpsie	i
 800dcba:	e7fe      	b.n	800dcba <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcbc:	9b01      	ldr	r3, [sp, #4]
 800dcbe:	b91b      	cbnz	r3, 800dcc8 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 800dcc0:	f7ff fcec 	bl	800d69c <vPortExitCritical>
					return errQUEUE_FULL;
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	e7e8      	b.n	800dc9a <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 800dcc8:	b915      	cbnz	r5, 800dcd0 <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcca:	a802      	add	r0, sp, #8
 800dccc:	f000 fffe 	bl	800eccc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dcd0:	f7ff fce4 	bl	800d69c <vPortExitCritical>
		vTaskSuspendAll();
 800dcd4:	f000 fd7a 	bl	800e7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcd8:	f7ff fcbc 	bl	800d654 <vPortEnterCritical>
 800dcdc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dce0:	2bff      	cmp	r3, #255	@ 0xff
 800dce2:	d101      	bne.n	800dce8 <xQueueGenericSend+0xfe>
 800dce4:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800dce8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dcec:	2bff      	cmp	r3, #255	@ 0xff
 800dcee:	d101      	bne.n	800dcf4 <xQueueGenericSend+0x10a>
 800dcf0:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800dcf4:	f7ff fcd2 	bl	800d69c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcf8:	a901      	add	r1, sp, #4
 800dcfa:	a802      	add	r0, sp, #8
 800dcfc:	f000 fff2 	bl	800ece4 <xTaskCheckForTimeOut>
 800dd00:	bb38      	cbnz	r0, 800dd52 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd02:	f7ff fca7 	bl	800d654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dd08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d10e      	bne.n	800dd2c <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dd0e:	f7ff fcc5 	bl	800d69c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd12:	9901      	ldr	r1, [sp, #4]
 800dd14:	f104 0010 	add.w	r0, r4, #16
 800dd18:	f000 ff58 	bl	800ebcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f7ff fe1a 	bl	800d956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd22:	f000 fdf9 	bl	800e918 <xTaskResumeAll>
 800dd26:	b148      	cbz	r0, 800dd3c <xQueueGenericSend+0x152>
 800dd28:	2501      	movs	r5, #1
 800dd2a:	e795      	b.n	800dc58 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 800dd2c:	f7ff fcb6 	bl	800d69c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dd30:	4620      	mov	r0, r4
 800dd32:	f7ff fe10 	bl	800d956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd36:	f000 fdef 	bl	800e918 <xTaskResumeAll>
 800dd3a:	e7f5      	b.n	800dd28 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 800dd3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	e7ea      	b.n	800dd28 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7ff fdff 	bl	800d956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd58:	f000 fdde 	bl	800e918 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dd5c:	e7b2      	b.n	800dcc4 <xQueueGenericSend+0xda>

0800dd5e <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dd5e:	2200      	movs	r2, #0
	{
 800dd60:	460b      	mov	r3, r1
 800dd62:	b513      	push	{r0, r1, r4, lr}
 800dd64:	4611      	mov	r1, r2
 800dd66:	9000      	str	r0, [sp, #0]
 800dd68:	2001      	movs	r0, #1
 800dd6a:	f7ff fe6d 	bl	800da48 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800dd6e:	4604      	mov	r4, r0
 800dd70:	b138      	cbz	r0, 800dd82 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd72:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd74:	461a      	mov	r2, r3
 800dd76:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd78:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dd7a:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dd7c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd7e:	f7ff ff34 	bl	800dbea <xQueueGenericSend>
	}
 800dd82:	4620      	mov	r0, r4
 800dd84:	b002      	add	sp, #8
 800dd86:	bd10      	pop	{r4, pc}

0800dd88 <xQueueGiveMutexRecursive>:
	{
 800dd88:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	b950      	cbnz	r0, 800dda4 <xQueueGiveMutexRecursive+0x1c>
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	b672      	cpsid	i
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	b662      	cpsie	i
 800dda2:	e7fe      	b.n	800dda2 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dda4:	6885      	ldr	r5, [r0, #8]
 800dda6:	f000 ffe3 	bl	800ed70 <xTaskGetCurrentTaskHandle>
 800ddaa:	4285      	cmp	r5, r0
 800ddac:	d10b      	bne.n	800ddc6 <xQueueGiveMutexRecursive+0x3e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ddae:	68e3      	ldr	r3, [r4, #12]
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ddb4:	b10b      	cbz	r3, 800ddba <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800ddb6:	2001      	movs	r0, #1
	}
 800ddb8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ddba:	461a      	mov	r2, r3
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7ff ff13 	bl	800dbea <xQueueGenericSend>
 800ddc4:	e7f7      	b.n	800ddb6 <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdFAIL;
 800ddc6:	2000      	movs	r0, #0
		return xReturn;
 800ddc8:	e7f6      	b.n	800ddb8 <xQueueGiveMutexRecursive+0x30>

0800ddca <xQueueCreateMutex>:
	{
 800ddca:	b570      	push	{r4, r5, r6, lr}
 800ddcc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ddce:	2050      	movs	r0, #80	@ 0x50
 800ddd0:	f7ff fac8 	bl	800d364 <pvPortMalloc>
 800ddd4:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800ddd6:	b198      	cbz	r0, 800de00 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ddd8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800ddda:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dddc:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ddde:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800dde2:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dde6:	f7ff fdee 	bl	800d9c6 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ddea:	462b      	mov	r3, r5
 800ddec:	462a      	mov	r2, r5
 800ddee:	4629      	mov	r1, r5
 800ddf0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ddf2:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddf6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ddf8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ddfa:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ddfc:	f7ff fef5 	bl	800dbea <xQueueGenericSend>
	}
 800de00:	4620      	mov	r0, r4
 800de02:	bd70      	pop	{r4, r5, r6, pc}

0800de04 <xQueueGenericSendFromISR>:
{
 800de04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de08:	4689      	mov	r9, r1
 800de0a:	4617      	mov	r7, r2
 800de0c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800de0e:	4604      	mov	r4, r0
 800de10:	b950      	cbnz	r0, 800de28 <xQueueGenericSendFromISR+0x24>
 800de12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de16:	b672      	cpsid	i
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	b662      	cpsie	i
 800de26:	e7fe      	b.n	800de26 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de28:	b961      	cbnz	r1, 800de44 <xQueueGenericSendFromISR+0x40>
 800de2a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800de2c:	b153      	cbz	r3, 800de44 <xQueueGenericSendFromISR+0x40>
 800de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de32:	b672      	cpsid	i
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	b662      	cpsie	i
 800de42:	e7fe      	b.n	800de42 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de44:	2e02      	cmp	r6, #2
 800de46:	d10d      	bne.n	800de64 <xQueueGenericSendFromISR+0x60>
 800de48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d00a      	beq.n	800de64 <xQueueGenericSendFromISR+0x60>
 800de4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de52:	b672      	cpsid	i
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	b662      	cpsie	i
 800de62:	e7fe      	b.n	800de62 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de64:	f7ff fcf2 	bl	800d84c <vPortValidateInterruptPriority>
	__asm volatile
 800de68:	f3ef 8811 	mrs	r8, BASEPRI
 800de6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de70:	b672      	cpsid	i
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800de82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de84:	429a      	cmp	r2, r3
 800de86:	d301      	bcc.n	800de8c <xQueueGenericSendFromISR+0x88>
 800de88:	2e02      	cmp	r6, #2
 800de8a:	d11d      	bne.n	800dec8 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800de8c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de90:	4632      	mov	r2, r6
 800de92:	4649      	mov	r1, r9
 800de94:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800de96:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de98:	f7ff fd15 	bl	800d8c6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800de9c:	1c6b      	adds	r3, r5, #1
 800de9e:	d10e      	bne.n	800debe <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dea2:	b13b      	cbz	r3, 800deb4 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dea4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dea8:	f000 fecc 	bl	800ec44 <xTaskRemoveFromEventList>
 800deac:	b110      	cbz	r0, 800deb4 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 800deae:	b10f      	cbz	r7, 800deb4 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800deb0:	2301      	movs	r3, #1
 800deb2:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800deb4:	2001      	movs	r0, #1
	__asm volatile
 800deb6:	f388 8811 	msr	BASEPRI, r8
}
 800deba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800debe:	3501      	adds	r5, #1
 800dec0:	b26d      	sxtb	r5, r5
 800dec2:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800dec6:	e7f5      	b.n	800deb4 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 800dec8:	2000      	movs	r0, #0
 800deca:	e7f4      	b.n	800deb6 <xQueueGenericSendFromISR+0xb2>

0800decc <xQueueGiveFromISR>:
{
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ded0:	4604      	mov	r4, r0
 800ded2:	b950      	cbnz	r0, 800deea <xQueueGiveFromISR+0x1e>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded8:	b672      	cpsid	i
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	b662      	cpsie	i
 800dee8:	e7fe      	b.n	800dee8 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800deea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800deec:	b153      	cbz	r3, 800df04 <xQueueGiveFromISR+0x38>
 800deee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def2:	b672      	cpsid	i
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	b662      	cpsie	i
 800df02:	e7fe      	b.n	800df02 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800df04:	6803      	ldr	r3, [r0, #0]
 800df06:	b963      	cbnz	r3, 800df22 <xQueueGiveFromISR+0x56>
 800df08:	6883      	ldr	r3, [r0, #8]
 800df0a:	b153      	cbz	r3, 800df22 <xQueueGiveFromISR+0x56>
 800df0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df10:	b672      	cpsid	i
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	b662      	cpsie	i
 800df20:	e7fe      	b.n	800df20 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df22:	f7ff fc93 	bl	800d84c <vPortValidateInterruptPriority>
	__asm volatile
 800df26:	f3ef 8611 	mrs	r6, BASEPRI
 800df2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2e:	b672      	cpsid	i
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df3e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800df40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800df42:	4293      	cmp	r3, r2
 800df44:	d919      	bls.n	800df7a <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 800df46:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df4a:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800df4c:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800df4e:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df50:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800df52:	d10d      	bne.n	800df70 <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800df56:	b13b      	cbz	r3, 800df68 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df58:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800df5c:	f000 fe72 	bl	800ec44 <xTaskRemoveFromEventList>
 800df60:	b110      	cbz	r0, 800df68 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 800df62:	b10d      	cbz	r5, 800df68 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df64:	2301      	movs	r3, #1
 800df66:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800df68:	2001      	movs	r0, #1
	__asm volatile
 800df6a:	f386 8811 	msr	BASEPRI, r6
}
 800df6e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df70:	3301      	adds	r3, #1
 800df72:	b25b      	sxtb	r3, r3
 800df74:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800df78:	e7f6      	b.n	800df68 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 800df7a:	2000      	movs	r0, #0
 800df7c:	e7f5      	b.n	800df6a <xQueueGiveFromISR+0x9e>

0800df7e <xQueueReceive>:
{
 800df7e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800df82:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800df84:	4604      	mov	r4, r0
{
 800df86:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800df88:	b950      	cbnz	r0, 800dfa0 <xQueueReceive+0x22>
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df8e:	b672      	cpsid	i
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	b662      	cpsie	i
 800df9e:	e7fe      	b.n	800df9e <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfa0:	b961      	cbnz	r1, 800dfbc <xQueueReceive+0x3e>
 800dfa2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dfa4:	b153      	cbz	r3, 800dfbc <xQueueReceive+0x3e>
 800dfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfaa:	b672      	cpsid	i
 800dfac:	f383 8811 	msr	BASEPRI, r3
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	b662      	cpsie	i
 800dfba:	e7fe      	b.n	800dfba <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfbc:	f000 fede 	bl	800ed7c <xTaskGetSchedulerState>
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	b318      	cbz	r0, 800e00c <xQueueReceive+0x8e>
 800dfc4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dfc6:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800dfca:	f7ff fb43 	bl	800d654 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfce:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfd0:	b357      	cbz	r7, 800e028 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfd2:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dfd4:	4631      	mov	r1, r6
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7ff fca8 	bl	800d92c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfdc:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfde:	6923      	ldr	r3, [r4, #16]
 800dfe0:	b173      	cbz	r3, 800e000 <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfe2:	f104 0010 	add.w	r0, r4, #16
 800dfe6:	f000 fe2d 	bl	800ec44 <xTaskRemoveFromEventList>
 800dfea:	b148      	cbz	r0, 800e000 <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 800dfec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dff4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e000:	f7ff fb4c 	bl	800d69c <vPortExitCritical>
				return pdPASS;
 800e004:	2001      	movs	r0, #1
}
 800e006:	b004      	add	sp, #16
 800e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e00c:	9b01      	ldr	r3, [sp, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0d9      	beq.n	800dfc6 <xQueueReceive+0x48>
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	b672      	cpsid	i
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	b662      	cpsie	i
 800e026:	e7fe      	b.n	800e026 <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	b91b      	cbnz	r3, 800e034 <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 800e02c:	f7ff fb36 	bl	800d69c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e030:	2000      	movs	r0, #0
 800e032:	e7e8      	b.n	800e006 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 800e034:	b915      	cbnz	r5, 800e03c <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e036:	a802      	add	r0, sp, #8
 800e038:	f000 fe48 	bl	800eccc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e03c:	f7ff fb2e 	bl	800d69c <vPortExitCritical>
		vTaskSuspendAll();
 800e040:	f000 fbc4 	bl	800e7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e044:	f7ff fb06 	bl	800d654 <vPortEnterCritical>
 800e048:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e04c:	2bff      	cmp	r3, #255	@ 0xff
 800e04e:	d101      	bne.n	800e054 <xQueueReceive+0xd6>
 800e050:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800e054:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e058:	2bff      	cmp	r3, #255	@ 0xff
 800e05a:	d101      	bne.n	800e060 <xQueueReceive+0xe2>
 800e05c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800e060:	f7ff fb1c 	bl	800d69c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e064:	a901      	add	r1, sp, #4
 800e066:	a802      	add	r0, sp, #8
 800e068:	f000 fe3c 	bl	800ece4 <xTaskCheckForTimeOut>
 800e06c:	bb00      	cbnz	r0, 800e0b0 <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e06e:	4620      	mov	r0, r4
 800e070:	f7ff fc1e 	bl	800d8b0 <prvIsQueueEmpty>
 800e074:	b1b0      	cbz	r0, 800e0a4 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e076:	9901      	ldr	r1, [sp, #4]
 800e078:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e07c:	f000 fda6 	bl	800ebcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e080:	4620      	mov	r0, r4
 800e082:	f7ff fc68 	bl	800d956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e086:	f000 fc47 	bl	800e918 <xTaskResumeAll>
 800e08a:	b948      	cbnz	r0, 800e0a0 <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 800e08c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e094:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	2501      	movs	r5, #1
 800e0a2:	e792      	b.n	800dfca <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f7ff fc56 	bl	800d956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0aa:	f000 fc35 	bl	800e918 <xTaskResumeAll>
 800e0ae:	e7f7      	b.n	800e0a0 <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7ff fc50 	bl	800d956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0b6:	f000 fc2f 	bl	800e918 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f7ff fbf8 	bl	800d8b0 <prvIsQueueEmpty>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d0ed      	beq.n	800e0a0 <xQueueReceive+0x122>
 800e0c4:	e7b4      	b.n	800e030 <xQueueReceive+0xb2>

0800e0c6 <xQueueSemaphoreTake>:
{
 800e0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0c8:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800e0ca:	4604      	mov	r4, r0
{
 800e0cc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e0ce:	b950      	cbnz	r0, 800e0e6 <xQueueSemaphoreTake+0x20>
 800e0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d4:	b672      	cpsid	i
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	b662      	cpsie	i
 800e0e4:	e7fe      	b.n	800e0e4 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0e6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800e0e8:	b155      	cbz	r5, 800e100 <xQueueSemaphoreTake+0x3a>
 800e0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ee:	b672      	cpsid	i
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	b662      	cpsie	i
 800e0fe:	e7fe      	b.n	800e0fe <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e100:	f000 fe3c 	bl	800ed7c <xTaskGetSchedulerState>
 800e104:	4606      	mov	r6, r0
 800e106:	b320      	cbz	r0, 800e152 <xQueueSemaphoreTake+0x8c>
 800e108:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e10a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800e10c:	f7ff faa2 	bl	800d654 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e110:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e112:	b363      	cbz	r3, 800e16e <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e114:	3b01      	subs	r3, #1
 800e116:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e118:	6823      	ldr	r3, [r4, #0]
 800e11a:	b913      	cbnz	r3, 800e122 <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e11c:	f000 ff14 	bl	800ef48 <pvTaskIncrementMutexHeldCount>
 800e120:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e122:	6923      	ldr	r3, [r4, #16]
 800e124:	b173      	cbz	r3, 800e144 <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e126:	f104 0010 	add.w	r0, r4, #16
 800e12a:	f000 fd8b 	bl	800ec44 <xTaskRemoveFromEventList>
 800e12e:	b148      	cbz	r0, 800e144 <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 800e130:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e138:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e144:	f7ff faaa 	bl	800d69c <vPortExitCritical>
				return pdPASS;
 800e148:	2001      	movs	r0, #1
}
 800e14a:	b005      	add	sp, #20
 800e14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14e:	4635      	mov	r5, r6
 800e150:	e7db      	b.n	800e10a <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e152:	9b01      	ldr	r3, [sp, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d0fa      	beq.n	800e14e <xQueueSemaphoreTake+0x88>
 800e158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15c:	b672      	cpsid	i
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	b662      	cpsie	i
 800e16c:	e7fe      	b.n	800e16c <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e16e:	9b01      	ldr	r3, [sp, #4]
 800e170:	b963      	cbnz	r3, 800e18c <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e172:	2d00      	cmp	r5, #0
 800e174:	d068      	beq.n	800e248 <xQueueSemaphoreTake+0x182>
 800e176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17a:	b672      	cpsid	i
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	b662      	cpsie	i
 800e18a:	e7fe      	b.n	800e18a <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 800e18c:	b916      	cbnz	r6, 800e194 <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e18e:	a802      	add	r0, sp, #8
 800e190:	f000 fd9c 	bl	800eccc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e194:	f7ff fa82 	bl	800d69c <vPortExitCritical>
		vTaskSuspendAll();
 800e198:	f000 fb18 	bl	800e7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e19c:	f7ff fa5a 	bl	800d654 <vPortEnterCritical>
 800e1a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e1a4:	2bff      	cmp	r3, #255	@ 0xff
 800e1a6:	d101      	bne.n	800e1ac <xQueueSemaphoreTake+0xe6>
 800e1a8:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800e1ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e1b0:	2bff      	cmp	r3, #255	@ 0xff
 800e1b2:	d101      	bne.n	800e1b8 <xQueueSemaphoreTake+0xf2>
 800e1b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e1b8:	f7ff fa70 	bl	800d69c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1bc:	a901      	add	r1, sp, #4
 800e1be:	a802      	add	r0, sp, #8
 800e1c0:	f000 fd90 	bl	800ece4 <xTaskCheckForTimeOut>
 800e1c4:	bb50      	cbnz	r0, 800e21c <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7ff fb72 	bl	800d8b0 <prvIsQueueEmpty>
 800e1cc:	b300      	cbz	r0, 800e210 <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	b93b      	cbnz	r3, 800e1e2 <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 800e1d2:	f7ff fa3f 	bl	800d654 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e1d6:	68a0      	ldr	r0, [r4, #8]
 800e1d8:	f000 fde0 	bl	800ed9c <xTaskPriorityInherit>
 800e1dc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e1de:	f7ff fa5d 	bl	800d69c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e1e2:	9901      	ldr	r1, [sp, #4]
 800e1e4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e1e8:	f000 fcf0 	bl	800ebcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	f7ff fbb2 	bl	800d956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1f2:	f000 fb91 	bl	800e918 <xTaskResumeAll>
 800e1f6:	b948      	cbnz	r0, 800e20c <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 800e1f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e1fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e200:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	2601      	movs	r6, #1
 800e20e:	e77d      	b.n	800e10c <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 800e210:	4620      	mov	r0, r4
 800e212:	f7ff fba0 	bl	800d956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e216:	f000 fb7f 	bl	800e918 <xTaskResumeAll>
 800e21a:	e7f7      	b.n	800e20c <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 800e21c:	4620      	mov	r0, r4
 800e21e:	f7ff fb9a 	bl	800d956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e222:	f000 fb79 	bl	800e918 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e226:	4620      	mov	r0, r4
 800e228:	f7ff fb42 	bl	800d8b0 <prvIsQueueEmpty>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d0ed      	beq.n	800e20c <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 800e230:	b165      	cbz	r5, 800e24c <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 800e232:	f7ff fa0f 	bl	800d654 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e236:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e238:	b119      	cbz	r1, 800e242 <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e23a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e23c:	6819      	ldr	r1, [r3, #0]
 800e23e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e242:	68a0      	ldr	r0, [r4, #8]
 800e244:	f000 fe2e 	bl	800eea4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e248:	f7ff fa28 	bl	800d69c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e24c:	2000      	movs	r0, #0
 800e24e:	e77c      	b.n	800e14a <xQueueSemaphoreTake+0x84>

0800e250 <xQueueTakeMutexRecursive>:
	{
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800e254:	4604      	mov	r4, r0
 800e256:	b950      	cbnz	r0, 800e26e <xQueueTakeMutexRecursive+0x1e>
 800e258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25c:	b672      	cpsid	i
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	b662      	cpsie	i
 800e26c:	e7fe      	b.n	800e26c <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e26e:	6886      	ldr	r6, [r0, #8]
 800e270:	f000 fd7e 	bl	800ed70 <xTaskGetCurrentTaskHandle>
 800e274:	4286      	cmp	r6, r0
 800e276:	d104      	bne.n	800e282 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e278:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e27a:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e27c:	3301      	adds	r3, #1
 800e27e:	60e3      	str	r3, [r4, #12]
	}
 800e280:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e282:	4629      	mov	r1, r5
 800e284:	4620      	mov	r0, r4
 800e286:	f7ff ff1e 	bl	800e0c6 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d0f8      	beq.n	800e280 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e28e:	68e3      	ldr	r3, [r4, #12]
 800e290:	3301      	adds	r3, #1
 800e292:	60e3      	str	r3, [r4, #12]
 800e294:	e7f4      	b.n	800e280 <xQueueTakeMutexRecursive+0x30>

0800e296 <xQueueReceiveFromISR>:
{
 800e296:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e29a:	4689      	mov	r9, r1
 800e29c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e29e:	4604      	mov	r4, r0
 800e2a0:	b950      	cbnz	r0, 800e2b8 <xQueueReceiveFromISR+0x22>
 800e2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a6:	b672      	cpsid	i
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	b662      	cpsie	i
 800e2b6:	e7fe      	b.n	800e2b6 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2b8:	b961      	cbnz	r1, 800e2d4 <xQueueReceiveFromISR+0x3e>
 800e2ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e2bc:	b153      	cbz	r3, 800e2d4 <xQueueReceiveFromISR+0x3e>
 800e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c2:	b672      	cpsid	i
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	b662      	cpsie	i
 800e2d2:	e7fe      	b.n	800e2d2 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2d4:	f7ff faba 	bl	800d84c <vPortValidateInterruptPriority>
	__asm volatile
 800e2d8:	f3ef 8711 	mrs	r7, BASEPRI
 800e2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e0:	b672      	cpsid	i
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2f0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2f2:	b30d      	cbz	r5, 800e338 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2f4:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2fc:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2fe:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e300:	f7ff fb14 	bl	800d92c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e304:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800e306:	1c73      	adds	r3, r6, #1
 800e308:	d111      	bne.n	800e32e <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e30a:	6923      	ldr	r3, [r4, #16]
 800e30c:	b153      	cbz	r3, 800e324 <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e30e:	f104 0010 	add.w	r0, r4, #16
 800e312:	f000 fc97 	bl	800ec44 <xTaskRemoveFromEventList>
 800e316:	b128      	cbz	r0, 800e324 <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 800e318:	f1b8 0f00 	cmp.w	r8, #0
 800e31c:	d002      	beq.n	800e324 <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e31e:	2301      	movs	r3, #1
 800e320:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800e324:	2001      	movs	r0, #1
	__asm volatile
 800e326:	f387 8811 	msr	BASEPRI, r7
}
 800e32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e32e:	3601      	adds	r6, #1
 800e330:	b276      	sxtb	r6, r6
 800e332:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800e336:	e7f5      	b.n	800e324 <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 800e338:	4628      	mov	r0, r5
 800e33a:	e7f4      	b.n	800e326 <xQueueReceiveFromISR+0x90>

0800e33c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e33c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e33e:	4a07      	ldr	r2, [pc, #28]	@ (800e35c <vQueueAddToRegistry+0x20>)
	{
 800e340:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e342:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e346:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800e34a:	b91d      	cbnz	r5, 800e354 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e34c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e350:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e352:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e354:	3301      	adds	r3, #1
 800e356:	2b08      	cmp	r3, #8
 800e358:	d1f3      	bne.n	800e342 <vQueueAddToRegistry+0x6>
 800e35a:	e7fa      	b.n	800e352 <vQueueAddToRegistry+0x16>
 800e35c:	2002670c 	.word	0x2002670c

0800e360 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e360:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e362:	4a09      	ldr	r2, [pc, #36]	@ (800e388 <vQueueUnregisterQueue+0x28>)
	{
 800e364:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e366:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e36a:	00dc      	lsls	r4, r3, #3
 800e36c:	4281      	cmp	r1, r0
 800e36e:	d106      	bne.n	800e37e <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e370:	4a06      	ldr	r2, [pc, #24]	@ (800e38c <vQueueUnregisterQueue+0x2c>)
 800e372:	2100      	movs	r1, #0
 800e374:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e378:	4422      	add	r2, r4
 800e37a:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e37c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e37e:	3301      	adds	r3, #1
 800e380:	2b08      	cmp	r3, #8
 800e382:	d1f0      	bne.n	800e366 <vQueueUnregisterQueue+0x6>
 800e384:	e7fa      	b.n	800e37c <vQueueUnregisterQueue+0x1c>
 800e386:	bf00      	nop
 800e388:	20026710 	.word	0x20026710
 800e38c:	2002670c 	.word	0x2002670c

0800e390 <vQueueDelete>:
{
 800e390:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e392:	b950      	cbnz	r0, 800e3aa <vQueueDelete+0x1a>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e398:	b672      	cpsid	i
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	b662      	cpsie	i
 800e3a8:	e7fe      	b.n	800e3a8 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 800e3aa:	f7ff ffd9 	bl	800e360 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e3ae:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800e3b2:	b91b      	cbnz	r3, 800e3bc <vQueueDelete+0x2c>
}
 800e3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e3b8:	f7ff b86a 	b.w	800d490 <vPortFree>
}
 800e3bc:	bd10      	pop	{r4, pc}

0800e3be <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e3be:	b570      	push	{r4, r5, r6, lr}
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	460d      	mov	r5, r1
 800e3c4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3c6:	f7ff f945 	bl	800d654 <vPortEnterCritical>
 800e3ca:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e3ce:	2bff      	cmp	r3, #255	@ 0xff
 800e3d0:	d102      	bne.n	800e3d8 <vQueueWaitForMessageRestricted+0x1a>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e3d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e3dc:	2bff      	cmp	r3, #255	@ 0xff
 800e3de:	d102      	bne.n	800e3e6 <vQueueWaitForMessageRestricted+0x28>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e3e6:	f7ff f959 	bl	800d69c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e3ec:	b92b      	cbnz	r3, 800e3fa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3ee:	4632      	mov	r2, r6
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e3f6:	f000 fc05 	bl	800ec04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3fa:	4620      	mov	r0, r4
	}
 800e3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e400:	f7ff baa9 	b.w	800d956 <prvUnlockQueue>

0800e404 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e40a:	f7ff f923 	bl	800d654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e40e:	4b2f      	ldr	r3, [pc, #188]	@ (800e4cc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e410:	4e2f      	ldr	r6, [pc, #188]	@ (800e4d0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	4f2f      	ldr	r7, [pc, #188]	@ (800e4d4 <prvAddNewTaskToReadyList+0xd0>)
 800e416:	3201      	adds	r2, #1
 800e418:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e41a:	6835      	ldr	r5, [r6, #0]
 800e41c:	2d00      	cmp	r5, #0
 800e41e:	d14a      	bne.n	800e4b6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e420:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d11f      	bne.n	800e468 <prvAddNewTaskToReadyList+0x64>
 800e428:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e42a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e42c:	4640      	mov	r0, r8
 800e42e:	f7ff f86b 	bl	800d508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e432:	f108 0814 	add.w	r8, r8, #20
 800e436:	2d38      	cmp	r5, #56	@ 0x38
 800e438:	d1f7      	bne.n	800e42a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e43a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800e4fc <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e43e:	4d26      	ldr	r5, [pc, #152]	@ (800e4d8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e440:	4640      	mov	r0, r8
 800e442:	f7ff f861 	bl	800d508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e446:	4628      	mov	r0, r5
 800e448:	f7ff f85e 	bl	800d508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e44c:	4823      	ldr	r0, [pc, #140]	@ (800e4dc <prvAddNewTaskToReadyList+0xd8>)
 800e44e:	f7ff f85b 	bl	800d508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e452:	4823      	ldr	r0, [pc, #140]	@ (800e4e0 <prvAddNewTaskToReadyList+0xdc>)
 800e454:	f7ff f858 	bl	800d508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e458:	4822      	ldr	r0, [pc, #136]	@ (800e4e4 <prvAddNewTaskToReadyList+0xe0>)
 800e45a:	f7ff f855 	bl	800d508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e45e:	4b22      	ldr	r3, [pc, #136]	@ (800e4e8 <prvAddNewTaskToReadyList+0xe4>)
 800e460:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e464:	4b21      	ldr	r3, [pc, #132]	@ (800e4ec <prvAddNewTaskToReadyList+0xe8>)
 800e466:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e468:	4a21      	ldr	r2, [pc, #132]	@ (800e4f0 <prvAddNewTaskToReadyList+0xec>)
 800e46a:	6813      	ldr	r3, [r2, #0]
 800e46c:	3301      	adds	r3, #1
 800e46e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e470:	4a20      	ldr	r2, [pc, #128]	@ (800e4f4 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e472:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e474:	6811      	ldr	r1, [r2, #0]
 800e476:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e478:	428b      	cmp	r3, r1
 800e47a:	d900      	bls.n	800e47e <prvAddNewTaskToReadyList+0x7a>
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	2014      	movs	r0, #20
 800e480:	1d21      	adds	r1, r4, #4
 800e482:	fb00 7003 	mla	r0, r0, r3, r7
 800e486:	f7ff f84d 	bl	800d524 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e48a:	f7ff f907 	bl	800d69c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e48e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f8 <prvAddNewTaskToReadyList+0xf4>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	b173      	cbz	r3, 800e4b2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e494:	6833      	ldr	r3, [r6, #0]
 800e496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e498:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d209      	bcs.n	800e4b2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e49e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	f3bf 8f6f 	isb	sy
}
 800e4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e4b6:	4b10      	ldr	r3, [pc, #64]	@ (800e4f8 <prvAddNewTaskToReadyList+0xf4>)
 800e4b8:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e4ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800e4bc:	2a00      	cmp	r2, #0
 800e4be:	d1d3      	bne.n	800e468 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e4c0:	6832      	ldr	r2, [r6, #0]
 800e4c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d8cf      	bhi.n	800e468 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e4c8:	6034      	str	r4, [r6, #0]
 800e4ca:	e7cd      	b.n	800e468 <prvAddNewTaskToReadyList+0x64>
 800e4cc:	20026770 	.word	0x20026770
 800e4d0:	20026c44 	.word	0x20026c44
 800e4d4:	200267e4 	.word	0x200267e4
 800e4d8:	200267bc 	.word	0x200267bc
 800e4dc:	200267a0 	.word	0x200267a0
 800e4e0:	2002678c 	.word	0x2002678c
 800e4e4:	20026774 	.word	0x20026774
 800e4e8:	200267b8 	.word	0x200267b8
 800e4ec:	200267b4 	.word	0x200267b4
 800e4f0:	20026754 	.word	0x20026754
 800e4f4:	20026768 	.word	0x20026768
 800e4f8:	20026764 	.word	0x20026764
 800e4fc:	200267d0 	.word	0x200267d0

0800e500 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e502:	4b15      	ldr	r3, [pc, #84]	@ (800e558 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e504:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e506:	4d15      	ldr	r5, [pc, #84]	@ (800e55c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e508:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e50a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e50c:	6828      	ldr	r0, [r5, #0]
 800e50e:	3004      	adds	r0, #4
 800e510:	f7ff f82a 	bl	800d568 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e514:	1c73      	adds	r3, r6, #1
 800e516:	d107      	bne.n	800e528 <prvAddCurrentTaskToDelayedList+0x28>
 800e518:	b137      	cbz	r7, 800e528 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e51a:	6829      	ldr	r1, [r5, #0]
 800e51c:	4810      	ldr	r0, [pc, #64]	@ (800e560 <prvAddCurrentTaskToDelayedList+0x60>)
 800e51e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e524:	f7fe bffe 	b.w	800d524 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e528:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e52a:	682b      	ldr	r3, [r5, #0]
 800e52c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e52e:	d307      	bcc.n	800e540 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e530:	4b0c      	ldr	r3, [pc, #48]	@ (800e564 <prvAddCurrentTaskToDelayedList+0x64>)
 800e532:	6818      	ldr	r0, [r3, #0]
 800e534:	6829      	ldr	r1, [r5, #0]
}
 800e536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e53a:	3104      	adds	r1, #4
 800e53c:	f7fe bffd 	b.w	800d53a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e540:	4b09      	ldr	r3, [pc, #36]	@ (800e568 <prvAddCurrentTaskToDelayedList+0x68>)
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	6829      	ldr	r1, [r5, #0]
 800e546:	3104      	adds	r1, #4
 800e548:	f7fe fff7 	bl	800d53a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e54c:	4b07      	ldr	r3, [pc, #28]	@ (800e56c <prvAddCurrentTaskToDelayedList+0x6c>)
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	42a2      	cmp	r2, r4
 800e552:	d900      	bls.n	800e556 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e554:	601c      	str	r4, [r3, #0]
}
 800e556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e558:	2002676c 	.word	0x2002676c
 800e55c:	20026c44 	.word	0x20026c44
 800e560:	20026774 	.word	0x20026774
 800e564:	200267b4 	.word	0x200267b4
 800e568:	200267b8 	.word	0x200267b8
 800e56c:	20026750 	.word	0x20026750

0800e570 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e570:	4a06      	ldr	r2, [pc, #24]	@ (800e58c <prvResetNextTaskUnblockTime+0x1c>)
 800e572:	6813      	ldr	r3, [r2, #0]
 800e574:	6819      	ldr	r1, [r3, #0]
 800e576:	4b06      	ldr	r3, [pc, #24]	@ (800e590 <prvResetNextTaskUnblockTime+0x20>)
 800e578:	b919      	cbnz	r1, 800e582 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e57a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e57e:	601a      	str	r2, [r3, #0]
}
 800e580:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e582:	6812      	ldr	r2, [r2, #0]
 800e584:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e586:	68d2      	ldr	r2, [r2, #12]
 800e588:	6852      	ldr	r2, [r2, #4]
 800e58a:	e7f8      	b.n	800e57e <prvResetNextTaskUnblockTime+0xe>
 800e58c:	200267b8 	.word	0x200267b8
 800e590:	20026750 	.word	0x20026750

0800e594 <prvDeleteTCB>:
	{
 800e594:	b510      	push	{r4, lr}
 800e596:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e598:	3058      	adds	r0, #88	@ 0x58
 800e59a:	f01a fe2b 	bl	80291f4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e59e:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800e5a2:	b93b      	cbnz	r3, 800e5b4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800e5a4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e5a6:	f7fe ff73 	bl	800d490 <vPortFree>
				vPortFree( pxTCB );
 800e5aa:	4620      	mov	r0, r4
	}
 800e5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e5b0:	f7fe bf6e 	b.w	800d490 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d0f8      	beq.n	800e5aa <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d00a      	beq.n	800e5d2 <prvDeleteTCB+0x3e>
 800e5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c0:	b672      	cpsid	i
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	b662      	cpsie	i
 800e5d0:	e7fe      	b.n	800e5d0 <prvDeleteTCB+0x3c>
	}
 800e5d2:	bd10      	pop	{r4, pc}

0800e5d4 <prvIdleTask>:
{
 800e5d4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5d6:	4c14      	ldr	r4, [pc, #80]	@ (800e628 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d8:	4f14      	ldr	r7, [pc, #80]	@ (800e62c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e5da:	4d15      	ldr	r5, [pc, #84]	@ (800e630 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	b983      	cbnz	r3, 800e602 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5e0:	4b14      	ldr	r3, [pc, #80]	@ (800e634 <prvIdleTask+0x60>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d909      	bls.n	800e5fc <prvIdleTask+0x28>
				taskYIELD();
 800e5e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e5ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e5fc:	f7f5 fae0 	bl	8003bc0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e600:	e7eb      	b.n	800e5da <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e602:	f7ff f827 	bl	800d654 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e60a:	1d30      	adds	r0, r6, #4
 800e60c:	f7fe ffac 	bl	800d568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	3b01      	subs	r3, #1
 800e614:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	3b01      	subs	r3, #1
 800e61a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e61c:	f7ff f83e 	bl	800d69c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff ffb7 	bl	800e594 <prvDeleteTCB>
 800e626:	e7d9      	b.n	800e5dc <prvIdleTask+0x8>
 800e628:	20026788 	.word	0x20026788
 800e62c:	2002678c 	.word	0x2002678c
 800e630:	20026770 	.word	0x20026770
 800e634:	200267e4 	.word	0x200267e4

0800e638 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e63c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e63e:	4607      	mov	r7, r0
 800e640:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e642:	21a5      	movs	r1, #165	@ 0xa5
 800e644:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e646:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e648:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e64a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e64e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e650:	f01a fd76 	bl	8029140 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e654:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e656:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e658:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800e65c:	2d00      	cmp	r5, #0
 800e65e:	d043      	beq.n	800e6e8 <prvInitialiseNewTask.constprop.0+0xb0>
 800e660:	1e6b      	subs	r3, r5, #1
 800e662:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800e666:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e668:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e66c:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e670:	b109      	cbz	r1, 800e676 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e672:	42ab      	cmp	r3, r5
 800e674:	d1f8      	bne.n	800e668 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e676:	2300      	movs	r3, #0
 800e678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e67c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e67e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e682:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e684:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e686:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e68a:	bf28      	it	cs
 800e68c:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e68e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e690:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e692:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e696:	f7fe ff42 	bl	800d51e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e69a:	f104 0018 	add.w	r0, r4, #24
 800e69e:	f7fe ff3e 	bl	800d51e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6a2:	224c      	movs	r2, #76	@ 0x4c
 800e6a4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800e6a6:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6aa:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e6ae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6b0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e6b2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e6b4:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6b8:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6bc:	f01a fd40 	bl	8029140 <memset>
 800e6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f0 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e6ca:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e6cc:	33d0      	adds	r3, #208	@ 0xd0
 800e6ce:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6d0:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6d2:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6d4:	f7fe ff9a 	bl	800d60c <pxPortInitialiseStack>
 800e6d8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e6da:	f1b9 0f00 	cmp.w	r9, #0
 800e6de:	d001      	beq.n	800e6e4 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e6e0:	f8c9 4000 	str.w	r4, [r9]
}
 800e6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e6e8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800e6ec:	e7c6      	b.n	800e67c <prvInitialiseNewTask.constprop.0+0x44>
 800e6ee:	bf00      	nop
 800e6f0:	20028824 	.word	0x20028824

0800e6f4 <xTaskCreateStatic>:
	{
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e6fc:	b955      	cbnz	r5, 800e714 <xTaskCreateStatic+0x20>
 800e6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e702:	b672      	cpsid	i
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	b662      	cpsie	i
 800e712:	e7fe      	b.n	800e712 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800e714:	b954      	cbnz	r4, 800e72c <xTaskCreateStatic+0x38>
 800e716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71a:	b672      	cpsid	i
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	b662      	cpsie	i
 800e72a:	e7fe      	b.n	800e72a <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e72c:	26ac      	movs	r6, #172	@ 0xac
 800e72e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e730:	9e05      	ldr	r6, [sp, #20]
 800e732:	2eac      	cmp	r6, #172	@ 0xac
 800e734:	d00a      	beq.n	800e74c <xTaskCreateStatic+0x58>
 800e736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73a:	b672      	cpsid	i
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	b662      	cpsie	i
 800e74a:	e7fe      	b.n	800e74a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e74c:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e74e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e750:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e752:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e756:	ad04      	add	r5, sp, #16
 800e758:	9402      	str	r4, [sp, #8]
 800e75a:	9501      	str	r5, [sp, #4]
 800e75c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e75e:	9500      	str	r5, [sp, #0]
 800e760:	f7ff ff6a 	bl	800e638 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e764:	4620      	mov	r0, r4
 800e766:	f7ff fe4d 	bl	800e404 <prvAddNewTaskToReadyList>
	}
 800e76a:	9804      	ldr	r0, [sp, #16]
 800e76c:	b006      	add	sp, #24
 800e76e:	bd70      	pop	{r4, r5, r6, pc}

0800e770 <xTaskCreate>:
	{
 800e770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e774:	4607      	mov	r7, r0
 800e776:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e778:	0090      	lsls	r0, r2, #2
	{
 800e77a:	4688      	mov	r8, r1
 800e77c:	4616      	mov	r6, r2
 800e77e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e780:	f7fe fdf0 	bl	800d364 <pvPortMalloc>
			if( pxStack != NULL )
 800e784:	4605      	mov	r5, r0
 800e786:	b920      	cbnz	r0, 800e792 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e788:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e78c:	b005      	add	sp, #20
 800e78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e792:	20ac      	movs	r0, #172	@ 0xac
 800e794:	f7fe fde6 	bl	800d364 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e798:	4604      	mov	r4, r0
 800e79a:	b198      	cbz	r0, 800e7c4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e79c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e79e:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e7a0:	4632      	mov	r2, r6
 800e7a2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e7a4:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e7a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7aa:	9002      	str	r0, [sp, #8]
 800e7ac:	4638      	mov	r0, r7
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	464b      	mov	r3, r9
 800e7b6:	f7ff ff3f 	bl	800e638 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7ff fe22 	bl	800e404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	e7e3      	b.n	800e78c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	f7fe fe63 	bl	800d490 <vPortFree>
		if( pxNewTCB != NULL )
 800e7ca:	e7dd      	b.n	800e788 <xTaskCreate+0x18>

0800e7cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e7cc:	4a02      	ldr	r2, [pc, #8]	@ (800e7d8 <vTaskSuspendAll+0xc>)
 800e7ce:	6813      	ldr	r3, [r2, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	6013      	str	r3, [r2, #0]
}
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	2002674c 	.word	0x2002674c

0800e7dc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e7dc:	4b01      	ldr	r3, [pc, #4]	@ (800e7e4 <xTaskGetTickCount+0x8>)
 800e7de:	6818      	ldr	r0, [r3, #0]
}
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	2002676c 	.word	0x2002676c

0800e7e8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7e8:	4b40      	ldr	r3, [pc, #256]	@ (800e8ec <xTaskIncrementTick+0x104>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
{
 800e7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d173      	bne.n	800e8dc <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7f4:	4b3e      	ldr	r3, [pc, #248]	@ (800e8f0 <xTaskIncrementTick+0x108>)
 800e7f6:	681c      	ldr	r4, [r3, #0]
 800e7f8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e7fa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7fc:	b9cc      	cbnz	r4, 800e832 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800e7fe:	4b3d      	ldr	r3, [pc, #244]	@ (800e8f4 <xTaskIncrementTick+0x10c>)
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	6812      	ldr	r2, [r2, #0]
 800e804:	b152      	cbz	r2, 800e81c <xTaskIncrementTick+0x34>
 800e806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80a:	b672      	cpsid	i
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	b662      	cpsie	i
 800e81a:	e7fe      	b.n	800e81a <xTaskIncrementTick+0x32>
 800e81c:	4a36      	ldr	r2, [pc, #216]	@ (800e8f8 <xTaskIncrementTick+0x110>)
 800e81e:	6819      	ldr	r1, [r3, #0]
 800e820:	6810      	ldr	r0, [r2, #0]
 800e822:	6018      	str	r0, [r3, #0]
 800e824:	6011      	str	r1, [r2, #0]
 800e826:	4a35      	ldr	r2, [pc, #212]	@ (800e8fc <xTaskIncrementTick+0x114>)
 800e828:	6813      	ldr	r3, [r2, #0]
 800e82a:	3301      	adds	r3, #1
 800e82c:	6013      	str	r3, [r2, #0]
 800e82e:	f7ff fe9f 	bl	800e570 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e832:	4d33      	ldr	r5, [pc, #204]	@ (800e900 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800e834:	f04f 0b00 	mov.w	fp, #0
 800e838:	4e32      	ldr	r6, [pc, #200]	@ (800e904 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e83a:	682b      	ldr	r3, [r5, #0]
 800e83c:	4f32      	ldr	r7, [pc, #200]	@ (800e908 <xTaskIncrementTick+0x120>)
 800e83e:	42a3      	cmp	r3, r4
 800e840:	d911      	bls.n	800e866 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e842:	683a      	ldr	r2, [r7, #0]
 800e844:	2114      	movs	r1, #20
 800e846:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e848:	434a      	muls	r2, r1
 800e84a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e84c:	2a02      	cmp	r2, #2
 800e84e:	bf28      	it	cs
 800e850:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800e854:	4a2d      	ldr	r2, [pc, #180]	@ (800e90c <xTaskIncrementTick+0x124>)
 800e856:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800e858:	2a00      	cmp	r2, #0
}
 800e85a:	bf0c      	ite	eq
 800e85c:	4658      	moveq	r0, fp
 800e85e:	2001      	movne	r0, #1
 800e860:	b003      	add	sp, #12
 800e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e866:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800e8f4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800e86a:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 800e914 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e86e:	f8d9 2000 	ldr.w	r2, [r9]
 800e872:	6812      	ldr	r2, [r2, #0]
 800e874:	b91a      	cbnz	r2, 800e87e <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e876:	f04f 32ff 	mov.w	r2, #4294967295
 800e87a:	602a      	str	r2, [r5, #0]
					break;
 800e87c:	e7e1      	b.n	800e842 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e87e:	f8d9 2000 	ldr.w	r2, [r9]
 800e882:	68d2      	ldr	r2, [r2, #12]
 800e884:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e888:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e88c:	428c      	cmp	r4, r1
 800e88e:	d201      	bcs.n	800e894 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800e890:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e892:	e7d6      	b.n	800e842 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e894:	f108 0304 	add.w	r3, r8, #4
 800e898:	4618      	mov	r0, r3
 800e89a:	9301      	str	r3, [sp, #4]
 800e89c:	f7fe fe64 	bl	800d568 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8a0:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e8a4:	b119      	cbz	r1, 800e8ae <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8a6:	f108 0018 	add.w	r0, r8, #24
 800e8aa:	f7fe fe5d 	bl	800d568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8ae:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e8b2:	f8da 1000 	ldr.w	r1, [sl]
 800e8b6:	4288      	cmp	r0, r1
 800e8b8:	d901      	bls.n	800e8be <xTaskIncrementTick+0xd6>
 800e8ba:	f8ca 0000 	str.w	r0, [sl]
 800e8be:	2314      	movs	r3, #20
 800e8c0:	9901      	ldr	r1, [sp, #4]
 800e8c2:	fb03 6000 	mla	r0, r3, r0, r6
 800e8c6:	f7fe fe2d 	bl	800d524 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8ca:	6838      	ldr	r0, [r7, #0]
 800e8cc:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e8d0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e8d2:	4291      	cmp	r1, r2
 800e8d4:	bf28      	it	cs
 800e8d6:	f04f 0b01 	movcs.w	fp, #1
 800e8da:	e7c8      	b.n	800e86e <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800e8dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e910 <xTaskIncrementTick+0x128>)
BaseType_t xSwitchRequired = pdFALSE;
 800e8de:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800e8e2:	6813      	ldr	r3, [r2, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	e7b4      	b.n	800e854 <xTaskIncrementTick+0x6c>
 800e8ea:	bf00      	nop
 800e8ec:	2002674c 	.word	0x2002674c
 800e8f0:	2002676c 	.word	0x2002676c
 800e8f4:	200267b8 	.word	0x200267b8
 800e8f8:	200267b4 	.word	0x200267b4
 800e8fc:	20026758 	.word	0x20026758
 800e900:	20026750 	.word	0x20026750
 800e904:	200267e4 	.word	0x200267e4
 800e908:	20026c44 	.word	0x20026c44
 800e90c:	2002675c 	.word	0x2002675c
 800e910:	20026760 	.word	0x20026760
 800e914:	20026768 	.word	0x20026768

0800e918 <xTaskResumeAll>:
{
 800e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e91c:	4c31      	ldr	r4, [pc, #196]	@ (800e9e4 <xTaskResumeAll+0xcc>)
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	b953      	cbnz	r3, 800e938 <xTaskResumeAll+0x20>
 800e922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e926:	b672      	cpsid	i
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	b662      	cpsie	i
 800e936:	e7fe      	b.n	800e936 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800e938:	f7fe fe8c 	bl	800d654 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e93c:	6823      	ldr	r3, [r4, #0]
 800e93e:	3b01      	subs	r3, #1
 800e940:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e942:	6824      	ldr	r4, [r4, #0]
 800e944:	b12c      	cbz	r4, 800e952 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800e946:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e948:	f7fe fea8 	bl	800d69c <vPortExitCritical>
}
 800e94c:	4620      	mov	r0, r4
 800e94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e952:	4b25      	ldr	r3, [pc, #148]	@ (800e9e8 <xTaskResumeAll+0xd0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d0f5      	beq.n	800e946 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e95a:	4d24      	ldr	r5, [pc, #144]	@ (800e9ec <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800e95c:	4e24      	ldr	r6, [pc, #144]	@ (800e9f0 <xTaskResumeAll+0xd8>)
 800e95e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800ea00 <xTaskResumeAll+0xe8>
 800e962:	e01d      	b.n	800e9a0 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e964:	68eb      	ldr	r3, [r5, #12]
 800e966:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e968:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e96a:	f104 0018 	add.w	r0, r4, #24
 800e96e:	f7fe fdfb 	bl	800d568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e972:	4638      	mov	r0, r7
 800e974:	f7fe fdf8 	bl	800d568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e978:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e97a:	6832      	ldr	r2, [r6, #0]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d900      	bls.n	800e982 <xTaskResumeAll+0x6a>
 800e980:	6033      	str	r3, [r6, #0]
 800e982:	2014      	movs	r0, #20
 800e984:	4639      	mov	r1, r7
 800e986:	fb00 8003 	mla	r0, r0, r3, r8
 800e98a:	f7fe fdcb 	bl	800d524 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e98e:	4b19      	ldr	r3, [pc, #100]	@ (800e9f4 <xTaskResumeAll+0xdc>)
 800e990:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e996:	429a      	cmp	r2, r3
 800e998:	d302      	bcc.n	800e9a0 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800e99a:	4b17      	ldr	r3, [pc, #92]	@ (800e9f8 <xTaskResumeAll+0xe0>)
 800e99c:	2201      	movs	r2, #1
 800e99e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1de      	bne.n	800e964 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 800e9a6:	b10c      	cbz	r4, 800e9ac <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800e9a8:	f7ff fde2 	bl	800e570 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e9ac:	4d13      	ldr	r5, [pc, #76]	@ (800e9fc <xTaskResumeAll+0xe4>)
 800e9ae:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e9b0:	b144      	cbz	r4, 800e9c4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800e9b2:	4e11      	ldr	r6, [pc, #68]	@ (800e9f8 <xTaskResumeAll+0xe0>)
 800e9b4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e9b6:	f7ff ff17 	bl	800e7e8 <xTaskIncrementTick>
 800e9ba:	b100      	cbz	r0, 800e9be <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800e9bc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e9be:	3c01      	subs	r4, #1
 800e9c0:	d1f9      	bne.n	800e9b6 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800e9c2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f8 <xTaskResumeAll+0xe0>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d0bc      	beq.n	800e946 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e9cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e9d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e9e0:	2401      	movs	r4, #1
 800e9e2:	e7b1      	b.n	800e948 <xTaskResumeAll+0x30>
 800e9e4:	2002674c 	.word	0x2002674c
 800e9e8:	20026770 	.word	0x20026770
 800e9ec:	200267a0 	.word	0x200267a0
 800e9f0:	20026768 	.word	0x20026768
 800e9f4:	20026c44 	.word	0x20026c44
 800e9f8:	2002675c 	.word	0x2002675c
 800e9fc:	20026760 	.word	0x20026760
 800ea00:	200267e4 	.word	0x200267e4

0800ea04 <vTaskDelay>:
	{
 800ea04:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea06:	b950      	cbnz	r0, 800ea1e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800ea08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ea0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea10:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ea14:	f3bf 8f4f 	dsb	sy
 800ea18:	f3bf 8f6f 	isb	sy
	}
 800ea1c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800ea1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea4c <vTaskDelay+0x48>)
 800ea20:	6819      	ldr	r1, [r3, #0]
 800ea22:	b151      	cbz	r1, 800ea3a <vTaskDelay+0x36>
 800ea24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea28:	b672      	cpsid	i
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	b662      	cpsie	i
 800ea38:	e7fe      	b.n	800ea38 <vTaskDelay+0x34>
			vTaskSuspendAll();
 800ea3a:	f7ff fec7 	bl	800e7cc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ea3e:	f7ff fd5f 	bl	800e500 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ea42:	f7ff ff69 	bl	800e918 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d0de      	beq.n	800ea08 <vTaskDelay+0x4>
 800ea4a:	e7e7      	b.n	800ea1c <vTaskDelay+0x18>
 800ea4c:	2002674c 	.word	0x2002674c

0800ea50 <vTaskSetApplicationTaskTag>:
	{
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	460d      	mov	r5, r1
		if( xTask == NULL )
 800ea54:	4604      	mov	r4, r0
 800ea56:	b908      	cbnz	r0, 800ea5c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800ea58:	4b04      	ldr	r3, [pc, #16]	@ (800ea6c <vTaskSetApplicationTaskTag+0x1c>)
 800ea5a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ea5c:	f7fe fdfa 	bl	800d654 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800ea60:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800ea62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800ea66:	f7fe be19 	b.w	800d69c <vPortExitCritical>
 800ea6a:	bf00      	nop
 800ea6c:	20026c44 	.word	0x20026c44

0800ea70 <xTaskCallApplicationTaskHook>:
	{
 800ea70:	4603      	mov	r3, r0
 800ea72:	4608      	mov	r0, r1
		if( xTask == NULL )
 800ea74:	b90b      	cbnz	r3, 800ea7a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800ea76:	4b03      	ldr	r3, [pc, #12]	@ (800ea84 <xTaskCallApplicationTaskHook+0x14>)
 800ea78:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800ea7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea7c:	b103      	cbz	r3, 800ea80 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800ea7e:	4718      	bx	r3
	}
 800ea80:	4618      	mov	r0, r3
 800ea82:	4770      	bx	lr
 800ea84:	20026c44 	.word	0x20026c44

0800ea88 <vTaskStartScheduler>:
{
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ea8c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ea8e:	aa07      	add	r2, sp, #28
 800ea90:	a906      	add	r1, sp, #24
 800ea92:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ea94:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ea98:	f7fe fc26 	bl	800d2e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ea9c:	9b05      	ldr	r3, [sp, #20]
 800ea9e:	9a07      	ldr	r2, [sp, #28]
 800eaa0:	9302      	str	r3, [sp, #8]
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	491d      	ldr	r1, [pc, #116]	@ (800eb1c <vTaskStartScheduler+0x94>)
 800eaa6:	481e      	ldr	r0, [pc, #120]	@ (800eb20 <vTaskStartScheduler+0x98>)
 800eaa8:	e9cd 4300 	strd	r4, r3, [sp]
 800eaac:	4623      	mov	r3, r4
 800eaae:	f7ff fe21 	bl	800e6f4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d030      	beq.n	800eb18 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800eab6:	f000 faa5 	bl	800f004 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800eaba:	2801      	cmp	r0, #1
 800eabc:	d11f      	bne.n	800eafe <vTaskStartScheduler+0x76>
 800eabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac2:	b672      	cpsid	i
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ead2:	4a14      	ldr	r2, [pc, #80]	@ (800eb24 <vTaskStartScheduler+0x9c>)
 800ead4:	4914      	ldr	r1, [pc, #80]	@ (800eb28 <vTaskStartScheduler+0xa0>)
 800ead6:	6813      	ldr	r3, [r2, #0]
 800ead8:	3358      	adds	r3, #88	@ 0x58
 800eada:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800eadc:	f04f 31ff 	mov.w	r1, #4294967295
 800eae0:	4b12      	ldr	r3, [pc, #72]	@ (800eb2c <vTaskStartScheduler+0xa4>)
 800eae2:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800eae4:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800eae6:	4b12      	ldr	r3, [pc, #72]	@ (800eb30 <vTaskStartScheduler+0xa8>)
 800eae8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eaea:	4b12      	ldr	r3, [pc, #72]	@ (800eb34 <vTaskStartScheduler+0xac>)
 800eaec:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800eaee:	6810      	ldr	r0, [r2, #0]
 800eaf0:	f7ff ffbe 	bl	800ea70 <xTaskCallApplicationTaskHook>
}
 800eaf4:	b008      	add	sp, #32
 800eaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800eafa:	f7fe be45 	b.w	800d788 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eafe:	3001      	adds	r0, #1
 800eb00:	d10a      	bne.n	800eb18 <vTaskStartScheduler+0x90>
 800eb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb06:	b672      	cpsid	i
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	b662      	cpsie	i
 800eb16:	e7fe      	b.n	800eb16 <vTaskStartScheduler+0x8e>
}
 800eb18:	b008      	add	sp, #32
 800eb1a:	bd10      	pop	{r4, pc}
 800eb1c:	0802d209 	.word	0x0802d209
 800eb20:	0800e5d5 	.word	0x0800e5d5
 800eb24:	20026c44 	.word	0x20026c44
 800eb28:	200000fc 	.word	0x200000fc
 800eb2c:	20026750 	.word	0x20026750
 800eb30:	20026764 	.word	0x20026764
 800eb34:	2002676c 	.word	0x2002676c

0800eb38 <vTaskSwitchContext>:
{
 800eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb3a:	4b1e      	ldr	r3, [pc, #120]	@ (800ebb4 <vTaskSwitchContext+0x7c>)
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ebb8 <vTaskSwitchContext+0x80>)
 800eb40:	b112      	cbz	r2, 800eb48 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800eb42:	2201      	movs	r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800eb48:	4c1c      	ldr	r4, [pc, #112]	@ (800ebbc <vTaskSwitchContext+0x84>)
 800eb4a:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb4c:	4e1c      	ldr	r6, [pc, #112]	@ (800ebc0 <vTaskSwitchContext+0x88>)
 800eb4e:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800eb50:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	f7ff ff8c 	bl	800ea70 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb58:	6832      	ldr	r2, [r6, #0]
 800eb5a:	491a      	ldr	r1, [pc, #104]	@ (800ebc4 <vTaskSwitchContext+0x8c>)
 800eb5c:	fb07 f302 	mul.w	r3, r7, r2
 800eb60:	58cd      	ldr	r5, [r1, r3]
 800eb62:	18c8      	adds	r0, r1, r3
 800eb64:	b1c5      	cbz	r5, 800eb98 <vTaskSwitchContext+0x60>
 800eb66:	6845      	ldr	r5, [r0, #4]
 800eb68:	3308      	adds	r3, #8
 800eb6a:	686d      	ldr	r5, [r5, #4]
 800eb6c:	440b      	add	r3, r1
 800eb6e:	429d      	cmp	r5, r3
 800eb70:	6045      	str	r5, [r0, #4]
 800eb72:	bf04      	itt	eq
 800eb74:	686b      	ldreq	r3, [r5, #4]
 800eb76:	6043      	streq	r3, [r0, #4]
 800eb78:	2314      	movs	r3, #20
 800eb7a:	fb03 1102 	mla	r1, r3, r2, r1
 800eb7e:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800eb80:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800eb88:	6820      	ldr	r0, [r4, #0]
 800eb8a:	f7ff ff71 	bl	800ea70 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	4a0d      	ldr	r2, [pc, #52]	@ (800ebc8 <vTaskSwitchContext+0x90>)
 800eb92:	3358      	adds	r3, #88	@ 0x58
 800eb94:	6013      	str	r3, [r2, #0]
}
 800eb96:	e7d6      	b.n	800eb46 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb98:	b952      	cbnz	r2, 800ebb0 <vTaskSwitchContext+0x78>
 800eb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9e:	b672      	cpsid	i
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	b662      	cpsie	i
 800ebae:	e7fe      	b.n	800ebae <vTaskSwitchContext+0x76>
 800ebb0:	3a01      	subs	r2, #1
 800ebb2:	e7d3      	b.n	800eb5c <vTaskSwitchContext+0x24>
 800ebb4:	2002674c 	.word	0x2002674c
 800ebb8:	2002675c 	.word	0x2002675c
 800ebbc:	20026c44 	.word	0x20026c44
 800ebc0:	20026768 	.word	0x20026768
 800ebc4:	200267e4 	.word	0x200267e4
 800ebc8:	200000fc 	.word	0x200000fc

0800ebcc <vTaskPlaceOnEventList>:
{
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ebd0:	b950      	cbnz	r0, 800ebe8 <vTaskPlaceOnEventList+0x1c>
 800ebd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	e7fe      	b.n	800ebe6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebe8:	4b05      	ldr	r3, [pc, #20]	@ (800ec00 <vTaskPlaceOnEventList+0x34>)
 800ebea:	6819      	ldr	r1, [r3, #0]
 800ebec:	3118      	adds	r1, #24
 800ebee:	f7fe fca4 	bl	800d53a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	2101      	movs	r1, #1
}
 800ebf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebfa:	f7ff bc81 	b.w	800e500 <prvAddCurrentTaskToDelayedList>
 800ebfe:	bf00      	nop
 800ec00:	20026c44 	.word	0x20026c44

0800ec04 <vTaskPlaceOnEventListRestricted>:
	{
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	460d      	mov	r5, r1
 800ec08:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ec0a:	b950      	cbnz	r0, 800ec22 <vTaskPlaceOnEventListRestricted+0x1e>
 800ec0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec10:	b672      	cpsid	i
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	b662      	cpsie	i
 800ec20:	e7fe      	b.n	800ec20 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec22:	4b07      	ldr	r3, [pc, #28]	@ (800ec40 <vTaskPlaceOnEventListRestricted+0x3c>)
 800ec24:	6819      	ldr	r1, [r3, #0]
 800ec26:	3118      	adds	r1, #24
 800ec28:	f7fe fc7c 	bl	800d524 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ec2c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec2e:	4621      	mov	r1, r4
 800ec30:	bf0c      	ite	eq
 800ec32:	4628      	moveq	r0, r5
 800ec34:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ec38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec3c:	f7ff bc60 	b.w	800e500 <prvAddCurrentTaskToDelayedList>
 800ec40:	20026c44 	.word	0x20026c44

0800ec44 <xTaskRemoveFromEventList>:
{
 800ec44:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec46:	68c3      	ldr	r3, [r0, #12]
 800ec48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ec4a:	b954      	cbnz	r4, 800ec62 <xTaskRemoveFromEventList+0x1e>
 800ec4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec50:	b672      	cpsid	i
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	b662      	cpsie	i
 800ec60:	e7fe      	b.n	800ec60 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec62:	f104 0518 	add.w	r5, r4, #24
 800ec66:	4628      	mov	r0, r5
 800ec68:	f7fe fc7e 	bl	800d568 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec6c:	4b11      	ldr	r3, [pc, #68]	@ (800ecb4 <xTaskRemoveFromEventList+0x70>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	b9d3      	cbnz	r3, 800eca8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec72:	1d25      	adds	r5, r4, #4
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7fe fc77 	bl	800d568 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec7a:	4a0f      	ldr	r2, [pc, #60]	@ (800ecb8 <xTaskRemoveFromEventList+0x74>)
 800ec7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ec7e:	6811      	ldr	r1, [r2, #0]
 800ec80:	428b      	cmp	r3, r1
 800ec82:	d900      	bls.n	800ec86 <xTaskRemoveFromEventList+0x42>
 800ec84:	6013      	str	r3, [r2, #0]
 800ec86:	2014      	movs	r0, #20
 800ec88:	4a0c      	ldr	r2, [pc, #48]	@ (800ecbc <xTaskRemoveFromEventList+0x78>)
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec90:	f7fe fc48 	bl	800d524 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec94:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc0 <xTaskRemoveFromEventList+0x7c>)
 800ec96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d906      	bls.n	800ecae <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 800eca0:	2001      	movs	r0, #1
 800eca2:	4b08      	ldr	r3, [pc, #32]	@ (800ecc4 <xTaskRemoveFromEventList+0x80>)
 800eca4:	6018      	str	r0, [r3, #0]
}
 800eca6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eca8:	4629      	mov	r1, r5
 800ecaa:	4807      	ldr	r0, [pc, #28]	@ (800ecc8 <xTaskRemoveFromEventList+0x84>)
 800ecac:	e7f0      	b.n	800ec90 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 800ecae:	2000      	movs	r0, #0
	return xReturn;
 800ecb0:	e7f9      	b.n	800eca6 <xTaskRemoveFromEventList+0x62>
 800ecb2:	bf00      	nop
 800ecb4:	2002674c 	.word	0x2002674c
 800ecb8:	20026768 	.word	0x20026768
 800ecbc:	200267e4 	.word	0x200267e4
 800ecc0:	20026c44 	.word	0x20026c44
 800ecc4:	2002675c 	.word	0x2002675c
 800ecc8:	200267a0 	.word	0x200267a0

0800eccc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eccc:	4b03      	ldr	r3, [pc, #12]	@ (800ecdc <vTaskInternalSetTimeOutState+0x10>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ecd2:	4b03      	ldr	r3, [pc, #12]	@ (800ece0 <vTaskInternalSetTimeOutState+0x14>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	6043      	str	r3, [r0, #4]
}
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	20026758 	.word	0x20026758
 800ece0:	2002676c 	.word	0x2002676c

0800ece4 <xTaskCheckForTimeOut>:
{
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ece8:	4605      	mov	r5, r0
 800ecea:	b950      	cbnz	r0, 800ed02 <xTaskCheckForTimeOut+0x1e>
 800ecec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf0:	b672      	cpsid	i
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	b662      	cpsie	i
 800ed00:	e7fe      	b.n	800ed00 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800ed02:	b951      	cbnz	r1, 800ed1a <xTaskCheckForTimeOut+0x36>
 800ed04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed08:	b672      	cpsid	i
 800ed0a:	f383 8811 	msr	BASEPRI, r3
 800ed0e:	f3bf 8f6f 	isb	sy
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	b662      	cpsie	i
 800ed18:	e7fe      	b.n	800ed18 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800ed1a:	f7fe fc9b 	bl	800d654 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ed1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed5c <xTaskCheckForTimeOut+0x78>)
 800ed20:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	d010      	beq.n	800ed4a <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed28:	480d      	ldr	r0, [pc, #52]	@ (800ed60 <xTaskCheckForTimeOut+0x7c>)
 800ed2a:	682e      	ldr	r6, [r5, #0]
 800ed2c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed2e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed30:	4286      	cmp	r6, r0
 800ed32:	d001      	beq.n	800ed38 <xTaskCheckForTimeOut+0x54>
 800ed34:	428a      	cmp	r2, r1
 800ed36:	d90f      	bls.n	800ed58 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed38:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed3a:	4283      	cmp	r3, r0
 800ed3c:	d90a      	bls.n	800ed54 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800ed3e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed40:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ed42:	4413      	add	r3, r2
 800ed44:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed46:	f7ff ffc1 	bl	800eccc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ed4a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ed4c:	f7fe fca6 	bl	800d69c <vPortExitCritical>
}
 800ed50:	4620      	mov	r0, r4
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ed54:	2300      	movs	r3, #0
 800ed56:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ed58:	2401      	movs	r4, #1
 800ed5a:	e7f7      	b.n	800ed4c <xTaskCheckForTimeOut+0x68>
 800ed5c:	2002676c 	.word	0x2002676c
 800ed60:	20026758 	.word	0x20026758

0800ed64 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ed64:	4b01      	ldr	r3, [pc, #4]	@ (800ed6c <vTaskMissedYield+0x8>)
 800ed66:	2201      	movs	r2, #1
 800ed68:	601a      	str	r2, [r3, #0]
}
 800ed6a:	4770      	bx	lr
 800ed6c:	2002675c 	.word	0x2002675c

0800ed70 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ed70:	4b01      	ldr	r3, [pc, #4]	@ (800ed78 <xTaskGetCurrentTaskHandle+0x8>)
 800ed72:	6818      	ldr	r0, [r3, #0]
	}
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	20026c44 	.word	0x20026c44

0800ed7c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ed7c:	4b05      	ldr	r3, [pc, #20]	@ (800ed94 <xTaskGetSchedulerState+0x18>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	b133      	cbz	r3, 800ed90 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed82:	4b05      	ldr	r3, [pc, #20]	@ (800ed98 <xTaskGetSchedulerState+0x1c>)
 800ed84:	6818      	ldr	r0, [r3, #0]
 800ed86:	fab0 f080 	clz	r0, r0
 800ed8a:	0940      	lsrs	r0, r0, #5
 800ed8c:	0040      	lsls	r0, r0, #1
 800ed8e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed90:	2001      	movs	r0, #1
	}
 800ed92:	4770      	bx	lr
 800ed94:	20026764 	.word	0x20026764
 800ed98:	2002674c 	.word	0x2002674c

0800ed9c <xTaskPriorityInherit>:
	{
 800ed9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ed9e:	4604      	mov	r4, r0
 800eda0:	b338      	cbz	r0, 800edf2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eda2:	4d1a      	ldr	r5, [pc, #104]	@ (800ee0c <xTaskPriorityInherit+0x70>)
 800eda4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800eda6:	682a      	ldr	r2, [r5, #0]
 800eda8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800edaa:	4293      	cmp	r3, r2
 800edac:	d226      	bcs.n	800edfc <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edae:	6982      	ldr	r2, [r0, #24]
 800edb0:	2a00      	cmp	r2, #0
 800edb2:	db04      	blt.n	800edbe <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edb4:	682a      	ldr	r2, [r5, #0]
 800edb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800edb8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800edbc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800edbe:	2214      	movs	r2, #20
 800edc0:	4e13      	ldr	r6, [pc, #76]	@ (800ee10 <xTaskPriorityInherit+0x74>)
 800edc2:	fb02 6303 	mla	r3, r2, r3, r6
 800edc6:	6962      	ldr	r2, [r4, #20]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d113      	bne.n	800edf4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edcc:	1d27      	adds	r7, r4, #4
 800edce:	4638      	mov	r0, r7
 800edd0:	f7fe fbca 	bl	800d568 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edd4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800edd6:	4a0f      	ldr	r2, [pc, #60]	@ (800ee14 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800edda:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800edde:	428b      	cmp	r3, r1
 800ede0:	d900      	bls.n	800ede4 <xTaskPriorityInherit+0x48>
 800ede2:	6013      	str	r3, [r2, #0]
 800ede4:	2014      	movs	r0, #20
 800ede6:	4639      	mov	r1, r7
 800ede8:	fb00 6003 	mla	r0, r0, r3, r6
 800edec:	f7fe fb9a 	bl	800d524 <vListInsertEnd>
				xReturn = pdTRUE;
 800edf0:	2001      	movs	r0, #1
	}
 800edf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800edfa:	e7f9      	b.n	800edf0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800edfc:	682b      	ldr	r3, [r5, #0]
 800edfe:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800ee00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee02:	4298      	cmp	r0, r3
 800ee04:	bf2c      	ite	cs
 800ee06:	2000      	movcs	r0, #0
 800ee08:	2001      	movcc	r0, #1
 800ee0a:	e7f2      	b.n	800edf2 <xTaskPriorityInherit+0x56>
 800ee0c:	20026c44 	.word	0x20026c44
 800ee10:	200267e4 	.word	0x200267e4
 800ee14:	20026768 	.word	0x20026768

0800ee18 <xTaskPriorityDisinherit>:
	{
 800ee18:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ee1a:	b908      	cbnz	r0, 800ee20 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800ee1c:	2000      	movs	r0, #0
	}
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ee20:	4b1d      	ldr	r3, [pc, #116]	@ (800ee98 <xTaskPriorityDisinherit+0x80>)
 800ee22:	681c      	ldr	r4, [r3, #0]
 800ee24:	4284      	cmp	r4, r0
 800ee26:	d00a      	beq.n	800ee3e <xTaskPriorityDisinherit+0x26>
 800ee28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee2c:	b672      	cpsid	i
 800ee2e:	f383 8811 	msr	BASEPRI, r3
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	f3bf 8f4f 	dsb	sy
 800ee3a:	b662      	cpsie	i
 800ee3c:	e7fe      	b.n	800ee3c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee3e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ee40:	b953      	cbnz	r3, 800ee58 <xTaskPriorityDisinherit+0x40>
 800ee42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee46:	b672      	cpsid	i
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	b662      	cpsie	i
 800ee56:	e7fe      	b.n	800ee56 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee58:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ee5a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee5c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ee5e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee60:	4291      	cmp	r1, r2
 800ee62:	d0db      	beq.n	800ee1c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1d9      	bne.n	800ee1c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee68:	1d25      	adds	r5, r4, #4
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f7fe fb7c 	bl	800d568 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee76:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee78:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee7a:	4a08      	ldr	r2, [pc, #32]	@ (800ee9c <xTaskPriorityDisinherit+0x84>)
 800ee7c:	6811      	ldr	r1, [r2, #0]
 800ee7e:	428b      	cmp	r3, r1
 800ee80:	d900      	bls.n	800ee84 <xTaskPriorityDisinherit+0x6c>
 800ee82:	6013      	str	r3, [r2, #0]
 800ee84:	4a06      	ldr	r2, [pc, #24]	@ (800eea0 <xTaskPriorityDisinherit+0x88>)
 800ee86:	2014      	movs	r0, #20
 800ee88:	4629      	mov	r1, r5
 800ee8a:	fb00 2003 	mla	r0, r0, r3, r2
 800ee8e:	f7fe fb49 	bl	800d524 <vListInsertEnd>
					xReturn = pdTRUE;
 800ee92:	2001      	movs	r0, #1
		return xReturn;
 800ee94:	e7c3      	b.n	800ee1e <xTaskPriorityDisinherit+0x6>
 800ee96:	bf00      	nop
 800ee98:	20026c44 	.word	0x20026c44
 800ee9c:	20026768 	.word	0x20026768
 800eea0:	200267e4 	.word	0x200267e4

0800eea4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800eea4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800eea6:	4604      	mov	r4, r0
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d046      	beq.n	800ef3a <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 800eeac:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800eeae:	b952      	cbnz	r2, 800eec6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	b672      	cpsid	i
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	b662      	cpsie	i
 800eec4:	e7fe      	b.n	800eec4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eec6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800eec8:	4299      	cmp	r1, r3
 800eeca:	bf38      	it	cc
 800eecc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eece:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800eed0:	428b      	cmp	r3, r1
 800eed2:	d032      	beq.n	800ef3a <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eed4:	2a01      	cmp	r2, #1
 800eed6:	d130      	bne.n	800ef3a <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 800eed8:	4a18      	ldr	r2, [pc, #96]	@ (800ef3c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800eeda:	6812      	ldr	r2, [r2, #0]
 800eedc:	4282      	cmp	r2, r0
 800eede:	d10a      	bne.n	800eef6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800eee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee4:	b672      	cpsid	i
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	b662      	cpsie	i
 800eef4:	e7fe      	b.n	800eef4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eef6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eef8:	4d11      	ldr	r5, [pc, #68]	@ (800ef40 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eefa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eefc:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ef00:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef02:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef06:	bfa8      	it	ge
 800ef08:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef0c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef0e:	bfa8      	it	ge
 800ef10:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d111      	bne.n	800ef3a <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef16:	1d06      	adds	r6, r0, #4
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7fe fb25 	bl	800d568 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ef1e:	4a09      	ldr	r2, [pc, #36]	@ (800ef44 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ef20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ef22:	6811      	ldr	r1, [r2, #0]
 800ef24:	428b      	cmp	r3, r1
 800ef26:	d900      	bls.n	800ef2a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	2014      	movs	r0, #20
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ef32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ef36:	f7fe baf5 	b.w	800d524 <vListInsertEnd>
	}
 800ef3a:	bd70      	pop	{r4, r5, r6, pc}
 800ef3c:	20026c44 	.word	0x20026c44
 800ef40:	200267e4 	.word	0x200267e4
 800ef44:	20026768 	.word	0x20026768

0800ef48 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ef48:	4b04      	ldr	r3, [pc, #16]	@ (800ef5c <pvTaskIncrementMutexHeldCount+0x14>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	b11a      	cbz	r2, 800ef56 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef4e:	6819      	ldr	r1, [r3, #0]
 800ef50:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ef52:	3201      	adds	r2, #1
 800ef54:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ef56:	6818      	ldr	r0, [r3, #0]
	}
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	20026c44 	.word	0x20026c44

0800ef60 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ef60:	4291      	cmp	r1, r2
{
 800ef62:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef64:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef66:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ef68:	d80a      	bhi.n	800ef80 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef6a:	1ad2      	subs	r2, r2, r3
 800ef6c:	6983      	ldr	r3, [r0, #24]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d20d      	bcs.n	800ef8e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef72:	1d01      	adds	r1, r0, #4
 800ef74:	4b07      	ldr	r3, [pc, #28]	@ (800ef94 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef76:	6818      	ldr	r0, [r3, #0]
 800ef78:	f7fe fadf 	bl	800d53a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ef7c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ef7e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d201      	bcs.n	800ef88 <prvInsertTimerInActiveList+0x28>
 800ef84:	4299      	cmp	r1, r3
 800ef86:	d202      	bcs.n	800ef8e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef88:	1d01      	adds	r1, r0, #4
 800ef8a:	4b03      	ldr	r3, [pc, #12]	@ (800ef98 <prvInsertTimerInActiveList+0x38>)
 800ef8c:	e7f3      	b.n	800ef76 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ef8e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ef90:	e7f5      	b.n	800ef7e <prvInsertTimerInActiveList+0x1e>
 800ef92:	bf00      	nop
 800ef94:	20026d44 	.word	0x20026d44
 800ef98:	20026d48 	.word	0x20026d48

0800ef9c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ef9e:	4c11      	ldr	r4, [pc, #68]	@ (800efe4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800efa0:	f7fe fb58 	bl	800d654 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800efa4:	6825      	ldr	r5, [r4, #0]
 800efa6:	b9bd      	cbnz	r5, 800efd8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800efa8:	4f0f      	ldr	r7, [pc, #60]	@ (800efe8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800efaa:	4e10      	ldr	r6, [pc, #64]	@ (800efec <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800efac:	4638      	mov	r0, r7
 800efae:	f7fe faab 	bl	800d508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efb2:	4630      	mov	r0, r6
 800efb4:	f7fe faa8 	bl	800d508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efb8:	4b0d      	ldr	r3, [pc, #52]	@ (800eff0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efba:	4a0e      	ldr	r2, [pc, #56]	@ (800eff4 <prvCheckForValidListAndQueue+0x58>)
 800efbc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800efbe:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efc0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800efc2:	4b0d      	ldr	r3, [pc, #52]	@ (800eff8 <prvCheckForValidListAndQueue+0x5c>)
 800efc4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efc6:	4b0d      	ldr	r3, [pc, #52]	@ (800effc <prvCheckForValidListAndQueue+0x60>)
 800efc8:	9500      	str	r5, [sp, #0]
 800efca:	f7fe fd89 	bl	800dae0 <xQueueGenericCreateStatic>
 800efce:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efd0:	b110      	cbz	r0, 800efd8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efd2:	490b      	ldr	r1, [pc, #44]	@ (800f000 <prvCheckForValidListAndQueue+0x64>)
 800efd4:	f7ff f9b2 	bl	800e33c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800efd8:	b003      	add	sp, #12
 800efda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800efde:	f7fe bb5d 	b.w	800d69c <vPortExitCritical>
 800efe2:	bf00      	nop
 800efe4:	20026d40 	.word	0x20026d40
 800efe8:	20026d60 	.word	0x20026d60
 800efec:	20026d4c 	.word	0x20026d4c
 800eff0:	20026d48 	.word	0x20026d48
 800eff4:	20026c98 	.word	0x20026c98
 800eff8:	20026d44 	.word	0x20026d44
 800effc:	20026c48 	.word	0x20026c48
 800f000:	0802d20e 	.word	0x0802d20e

0800f004 <xTimerCreateTimerTask>:
{
 800f004:	b510      	push	{r4, lr}
 800f006:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800f008:	f7ff ffc8 	bl	800ef9c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f00c:	4b13      	ldr	r3, [pc, #76]	@ (800f05c <xTimerCreateTimerTask+0x58>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	b1b3      	cbz	r3, 800f040 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f012:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f014:	aa07      	add	r2, sp, #28
 800f016:	a906      	add	r1, sp, #24
 800f018:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f01a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f01e:	f7fe f96f 	bl	800d300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f022:	9b05      	ldr	r3, [sp, #20]
 800f024:	9a07      	ldr	r2, [sp, #28]
 800f026:	9302      	str	r3, [sp, #8]
 800f028:	9b06      	ldr	r3, [sp, #24]
 800f02a:	490d      	ldr	r1, [pc, #52]	@ (800f060 <xTimerCreateTimerTask+0x5c>)
 800f02c:	9301      	str	r3, [sp, #4]
 800f02e:	2302      	movs	r3, #2
 800f030:	480c      	ldr	r0, [pc, #48]	@ (800f064 <xTimerCreateTimerTask+0x60>)
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	4623      	mov	r3, r4
 800f036:	f7ff fb5d 	bl	800e6f4 <xTaskCreateStatic>
 800f03a:	4b0b      	ldr	r3, [pc, #44]	@ (800f068 <xTimerCreateTimerTask+0x64>)
 800f03c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800f03e:	b950      	cbnz	r0, 800f056 <xTimerCreateTimerTask+0x52>
 800f040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f044:	b672      	cpsid	i
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	b662      	cpsie	i
	configASSERT( xReturn );
 800f054:	e7fe      	b.n	800f054 <xTimerCreateTimerTask+0x50>
}
 800f056:	2001      	movs	r0, #1
 800f058:	b008      	add	sp, #32
 800f05a:	bd10      	pop	{r4, pc}
 800f05c:	20026d40 	.word	0x20026d40
 800f060:	0802d213 	.word	0x0802d213
 800f064:	0800f16d 	.word	0x0800f16d
 800f068:	20026d3c 	.word	0x20026d3c

0800f06c <xTimerGenericCommand>:
{
 800f06c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f06e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800f070:	4604      	mov	r4, r0
{
 800f072:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800f074:	b950      	cbnz	r0, 800f08c <xTimerGenericCommand+0x20>
 800f076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07a:	b672      	cpsid	i
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	b662      	cpsie	i
 800f08a:	e7fe      	b.n	800f08a <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800f08c:	4d0c      	ldr	r5, [pc, #48]	@ (800f0c0 <xTimerGenericCommand+0x54>)
 800f08e:	6828      	ldr	r0, [r5, #0]
 800f090:	b178      	cbz	r0, 800f0b2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f092:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f094:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f096:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f09a:	dc0c      	bgt.n	800f0b6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f09c:	f7ff fe6e 	bl	800ed7c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0a0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0a2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0a4:	4669      	mov	r1, sp
 800f0a6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0a8:	bf0c      	ite	eq
 800f0aa:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0ac:	461a      	movne	r2, r3
 800f0ae:	f7fe fd9c 	bl	800dbea <xQueueGenericSend>
}
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	4669      	mov	r1, sp
 800f0ba:	f7fe fea3 	bl	800de04 <xQueueGenericSendFromISR>
 800f0be:	e7f8      	b.n	800f0b2 <xTimerGenericCommand+0x46>
 800f0c0:	20026d40 	.word	0x20026d40

0800f0c4 <prvSampleTimeNow>:
{
 800f0c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800f0c8:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 800f168 <prvSampleTimeNow+0xa4>
{
 800f0cc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800f0ce:	f7ff fb85 	bl	800e7dc <xTaskGetTickCount>
 800f0d2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800f0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f0d8:	4283      	cmp	r3, r0
 800f0da:	d909      	bls.n	800f0f0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0dc:	4f20      	ldr	r7, [pc, #128]	@ (800f160 <prvSampleTimeNow+0x9c>)
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	b96a      	cbnz	r2, 800f100 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800f0e4:	4a1f      	ldr	r2, [pc, #124]	@ (800f164 <prvSampleTimeNow+0xa0>)
 800f0e6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f0e8:	6013      	str	r3, [r2, #0]
 800f0ea:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800f0ec:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f0ee:	e000      	b.n	800f0f2 <prvSampleTimeNow+0x2e>
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800f0f4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800f0f6:	f8c8 5000 	str.w	r5, [r8]
}
 800f0fa:	b002      	add	sp, #8
 800f0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f100:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f102:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f104:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f108:	f104 0a04 	add.w	sl, r4, #4
 800f10c:	4650      	mov	r0, sl
 800f10e:	f7fe fa2b 	bl	800d568 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f112:	6a23      	ldr	r3, [r4, #32]
 800f114:	4620      	mov	r0, r4
 800f116:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f118:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f11c:	075b      	lsls	r3, r3, #29
 800f11e:	d5de      	bpl.n	800f0de <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f120:	69a3      	ldr	r3, [r4, #24]
 800f122:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800f124:	4599      	cmp	r9, r3
 800f126:	d206      	bcs.n	800f136 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f128:	4651      	mov	r1, sl
 800f12a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f12c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f12e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f130:	f7fe fa03 	bl	800d53a <vListInsert>
 800f134:	e7d3      	b.n	800f0de <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f136:	2300      	movs	r3, #0
 800f138:	464a      	mov	r2, r9
 800f13a:	4620      	mov	r0, r4
 800f13c:	4619      	mov	r1, r3
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	f7ff ff94 	bl	800f06c <xTimerGenericCommand>
				configASSERT( xResult );
 800f144:	2800      	cmp	r0, #0
 800f146:	d1ca      	bne.n	800f0de <prvSampleTimeNow+0x1a>
 800f148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14c:	b672      	cpsid	i
 800f14e:	f383 8811 	msr	BASEPRI, r3
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	b662      	cpsie	i
 800f15c:	e7fe      	b.n	800f15c <prvSampleTimeNow+0x98>
 800f15e:	bf00      	nop
 800f160:	20026d48 	.word	0x20026d48
 800f164:	20026d44 	.word	0x20026d44
 800f168:	20026d38 	.word	0x20026d38

0800f16c <prvTimerTask>:
{
 800f16c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f170:	4d71      	ldr	r5, [pc, #452]	@ (800f338 <prvTimerTask+0x1cc>)
{
 800f172:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f174:	4e71      	ldr	r6, [pc, #452]	@ (800f33c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f176:	682b      	ldr	r3, [r5, #0]
 800f178:	f8d3 8000 	ldr.w	r8, [r3]
 800f17c:	f1b8 0f00 	cmp.w	r8, #0
 800f180:	d037      	beq.n	800f1f2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f182:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f184:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f186:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800f18a:	f7ff fb1f 	bl	800e7cc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f18e:	a804      	add	r0, sp, #16
 800f190:	f7ff ff98 	bl	800f0c4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800f194:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f196:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d16b      	bne.n	800f274 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f19c:	2c00      	cmp	r4, #0
 800f19e:	d14e      	bne.n	800f23e <prvTimerTask+0xd2>
 800f1a0:	4540      	cmp	r0, r8
 800f1a2:	d352      	bcc.n	800f24a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800f1a4:	f7ff fbb8 	bl	800e918 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1ae:	1d38      	adds	r0, r7, #4
 800f1b0:	f7fe f9da 	bl	800d568 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f1b8:	0758      	lsls	r0, r3, #29
 800f1ba:	d51c      	bpl.n	800f1f6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1bc:	69b9      	ldr	r1, [r7, #24]
 800f1be:	4643      	mov	r3, r8
 800f1c0:	464a      	mov	r2, r9
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	4441      	add	r1, r8
 800f1c6:	f7ff fecb 	bl	800ef60 <prvInsertTimerInActiveList>
 800f1ca:	b1c0      	cbz	r0, 800f1fe <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1cc:	4623      	mov	r3, r4
 800f1ce:	4642      	mov	r2, r8
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	9400      	str	r4, [sp, #0]
 800f1d6:	f7ff ff49 	bl	800f06c <xTimerGenericCommand>
			configASSERT( xResult );
 800f1da:	b980      	cbnz	r0, 800f1fe <prvTimerTask+0x92>
 800f1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e0:	b672      	cpsid	i
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	b662      	cpsie	i
 800f1f0:	e7fe      	b.n	800f1f0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1f2:	2401      	movs	r4, #1
 800f1f4:	e7c9      	b.n	800f18a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1f6:	f023 0301 	bic.w	r3, r3, #1
 800f1fa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1fe:	6a3b      	ldr	r3, [r7, #32]
 800f200:	4638      	mov	r0, r7
 800f202:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f204:	2200      	movs	r2, #0
 800f206:	a904      	add	r1, sp, #16
 800f208:	6830      	ldr	r0, [r6, #0]
 800f20a:	f7fe feb8 	bl	800df7e <xQueueReceive>
 800f20e:	2800      	cmp	r0, #0
 800f210:	d0b1      	beq.n	800f176 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f212:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f214:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f216:	2b00      	cmp	r3, #0
 800f218:	db2f      	blt.n	800f27a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f21a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f21c:	6963      	ldr	r3, [r4, #20]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d132      	bne.n	800f288 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f222:	a803      	add	r0, sp, #12
 800f224:	f7ff ff4e 	bl	800f0c4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f228:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f22a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800f22c:	2b09      	cmp	r3, #9
 800f22e:	d8e9      	bhi.n	800f204 <prvTimerTask+0x98>
 800f230:	e8df f003 	tbb	[pc, r3]
 800f234:	592e2e2e 	.word	0x592e2e2e
 800f238:	2e2e7a60 	.word	0x2e2e7a60
 800f23c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f23e:	4b40      	ldr	r3, [pc, #256]	@ (800f340 <prvTimerTask+0x1d4>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681c      	ldr	r4, [r3, #0]
 800f244:	fab4 f484 	clz	r4, r4
 800f248:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f24a:	4622      	mov	r2, r4
 800f24c:	eba8 0109 	sub.w	r1, r8, r9
 800f250:	6830      	ldr	r0, [r6, #0]
 800f252:	f7ff f8b4 	bl	800e3be <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f256:	f7ff fb5f 	bl	800e918 <xTaskResumeAll>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d1d2      	bne.n	800f204 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800f25e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f266:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	f3bf 8f6f 	isb	sy
 800f272:	e7c7      	b.n	800f204 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800f274:	f7ff fb50 	bl	800e918 <xTaskResumeAll>
}
 800f278:	e7c4      	b.n	800f204 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f27a:	9b05      	ldr	r3, [sp, #20]
 800f27c:	9907      	ldr	r1, [sp, #28]
 800f27e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f280:	9b04      	ldr	r3, [sp, #16]
 800f282:	2b00      	cmp	r3, #0
 800f284:	dbbe      	blt.n	800f204 <prvTimerTask+0x98>
 800f286:	e7c8      	b.n	800f21a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f288:	1d20      	adds	r0, r4, #4
 800f28a:	f7fe f96d 	bl	800d568 <uxListRemove>
 800f28e:	e7c8      	b.n	800f222 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f290:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f294:	4620      	mov	r0, r4
 800f296:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f298:	f043 0301 	orr.w	r3, r3, #1
 800f29c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2a0:	9b05      	ldr	r3, [sp, #20]
 800f2a2:	4419      	add	r1, r3
 800f2a4:	f7ff fe5c 	bl	800ef60 <prvInsertTimerInActiveList>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d0ab      	beq.n	800f204 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2ac:	6a23      	ldr	r3, [r4, #32]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f2b6:	0759      	lsls	r1, r3, #29
 800f2b8:	d5a4      	bpl.n	800f204 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2ba:	69a2      	ldr	r2, [r4, #24]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	9905      	ldr	r1, [sp, #20]
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	440a      	add	r2, r1
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	f7ff fed0 	bl	800f06c <xTimerGenericCommand>
							configASSERT( xResult );
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d199      	bne.n	800f204 <prvTimerTask+0x98>
 800f2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d4:	b672      	cpsid	i
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	b662      	cpsie	i
 800f2e4:	e7fe      	b.n	800f2e4 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2ea:	f023 0301 	bic.w	r3, r3, #1
 800f2ee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800f2f2:	e787      	b.n	800f204 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2f4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f2f8:	f043 0301 	orr.w	r3, r3, #1
 800f2fc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f300:	9905      	ldr	r1, [sp, #20]
 800f302:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f304:	b951      	cbnz	r1, 800f31c <prvTimerTask+0x1b0>
 800f306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f30a:	b672      	cpsid	i
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	b662      	cpsie	i
 800f31a:	e7fe      	b.n	800f31a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f31c:	4603      	mov	r3, r0
 800f31e:	4401      	add	r1, r0
 800f320:	4620      	mov	r0, r4
 800f322:	f7ff fe1d 	bl	800ef60 <prvInsertTimerInActiveList>
					break;
 800f326:	e76d      	b.n	800f204 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f328:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f32c:	079a      	lsls	r2, r3, #30
 800f32e:	d4dc      	bmi.n	800f2ea <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800f330:	4620      	mov	r0, r4
 800f332:	f7fe f8ad 	bl	800d490 <vPortFree>
 800f336:	e765      	b.n	800f204 <prvTimerTask+0x98>
 800f338:	20026d48 	.word	0x20026d48
 800f33c:	20026d40 	.word	0x20026d40
 800f340:	20026d44 	.word	0x20026d44

0800f344 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	b093      	sub	sp, #76	@ 0x4c
 800f34a:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f34c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  currentMCU = BlockIndex;
 800f350:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
{  
 800f354:	9111      	str	r1, [sp, #68]	@ 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800f356:	fbb3 f3f2 	udiv	r3, r3, r2
 800f35a:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f35c:	4b72      	ldr	r3, [pc, #456]	@ (800f528 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 800f35e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f360:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f364:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f366:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f368:	930c      	str	r3, [sp, #48]	@ 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f36a:	0053      	lsls	r3, r2, #1
 800f36c:	930d      	str	r3, [sp, #52]	@ 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800f36e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800f372:	4413      	add	r3, r2
 800f374:	455b      	cmp	r3, fp
 800f376:	d803      	bhi.n	800f380 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f378:	9808      	ldr	r0, [sp, #32]
 800f37a:	b013      	add	sp, #76	@ 0x4c
 800f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f380:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800f384:	9a06      	ldr	r2, [sp, #24]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f386:	9c06      	ldr	r4, [sp, #24]
    currentMCU++;
 800f388:	f10b 0b01 	add.w	fp, fp, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f38c:	9901      	ldr	r1, [sp, #4]
    pLum = pInBuffer;
 800f38e:	4680      	mov	r8, r0
    for(i= 0; i <  16; i+=2)
 800f390:	f04f 0e00 	mov.w	lr, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800f394:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f398:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f39c:	4351      	muls	r1, r2
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f3a4:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800f3a6:	f500 7380 	add.w	r3, r0, #256	@ 0x100
 800f3aa:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f3ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3ae:	9a00      	ldr	r2, [sp, #0]
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	f240 80b0 	bls.w	800f516 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d2>
        pOutAddr = pOutBuffer + refline;
 800f3b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f3b8:	f04f 0900 	mov.w	r9, #0
 800f3bc:	f8cd 800c 	str.w	r8, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800f3c0:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f3c2:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800f3c4:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800f3c6:	4413      	add	r3, r2
 800f3c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3ca:	9b02      	ldr	r3, [sp, #8]
 800f3cc:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800f3ce:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800f3d0:	2400      	movs	r4, #0
 800f3d2:	9f03      	ldr	r7, [sp, #12]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	9305      	str	r3, [sp, #20]
 800f3d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3da:	444b      	add	r3, r9
 800f3dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3de:	9b07      	ldr	r3, [sp, #28]
 800f3e0:	444b      	add	r3, r9
 800f3e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
          for(j=0; j < 8; j+=2)
 800f3e6:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800f3e8:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 800f3ec:	4423      	add	r3, r4
 800f3ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3f2:	4423      	add	r3, r4
 800f3f4:	9310      	str	r3, [sp, #64]	@ 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f3f6:	9b05      	ldr	r3, [sp, #20]
 800f3f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f3fc:	9305      	str	r3, [sp, #20]
 800f3fe:	4b4b      	ldr	r3, [pc, #300]	@ (800f52c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800f400:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f404:	9b05      	ldr	r3, [sp, #20]
 800f406:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f40a:	4b49      	ldr	r3, [pc, #292]	@ (800f530 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800f40c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f410:	4b48      	ldr	r3, [pc, #288]	@ (800f534 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800f412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f416:	4b48      	ldr	r3, [pc, #288]	@ (800f538 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800f418:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f41c:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f41e:	4947      	ldr	r1, [pc, #284]	@ (800f53c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800f420:	460b      	mov	r3, r1
 800f422:	440e      	add	r6, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f424:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f428:	eb06 010c 	add.w	r1, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f42c:	441d      	add	r5, r3
            *(__IO uint16_t *)pOutAddr = 
 800f42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f430:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f434:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f438:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f43a:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f43e:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f442:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f446:	0889      	lsrs	r1, r1, #2
 800f448:	0149      	lsls	r1, r1, #5
 800f44a:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f44e:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f452:	5319      	strh	r1, [r3, r4]
            ycomp = (int32_t)(*(pLum +j +1));
 800f454:	f817 cc01 	ldrb.w	ip, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f45a:	eb06 010c 	add.w	r1, r6, ip
 800f45e:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f462:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f466:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f468:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f46c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f470:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f474:	0889      	lsrs	r1, r1, #2
 800f476:	0149      	lsls	r1, r1, #5
 800f478:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f47c:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f480:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800f482:	f897 c006 	ldrb.w	ip, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800f486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f488:	eb06 010c 	add.w	r1, r6, ip
 800f48c:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f490:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f494:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f496:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f49a:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f49e:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f4a2:	0889      	lsrs	r1, r1, #2
 800f4a4:	0149      	lsls	r1, r1, #5
 800f4a6:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800f4aa:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800f4ae:	5319      	strh	r1, [r3, r4]
          for(j=0; j < 8; j+=2)
 800f4b0:	3404      	adds	r4, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800f4b2:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800f4b4:	2c10      	cmp	r4, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4b6:	440e      	add	r6, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4b8:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f4ba:	440d      	add	r5, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4bc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4c0:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f4c4:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4c8:	f895 1100 	ldrb.w	r1, [r5, #256]	@ 0x100
 800f4cc:	ea4f 0292 	mov.w	r2, r2, lsr #2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f4d2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800f4d6:	ea42 22c6 	orr.w	r2, r2, r6, lsl #11
 800f4da:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800f4de:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f4e0:	d180      	bne.n	800f3e4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa0>
            pChrom++;
 800f4e2:	9b04      	ldr	r3, [sp, #16]
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800f4e8:	9b03      	ldr	r3, [sp, #12]
 800f4ea:	3340      	adds	r3, #64	@ 0x40
 800f4ec:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800f4ee:	f1b9 0f00 	cmp.w	r9, #0
 800f4f2:	d107      	bne.n	800f504 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c0>
 800f4f4:	46a1      	mov	r9, r4
 800f4f6:	e76a      	b.n	800f3ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8a>
      if(i == 8)
 800f4f8:	f1be 0f08 	cmp.w	lr, #8
        pLum = pInBuffer + 128;
 800f4fc:	bf08      	it	eq
 800f4fe:	f100 0880 	addeq.w	r8, r0, #128	@ 0x80
 800f502:	e753      	b.n	800f3ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
            pChrom++;
 800f504:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800f506:	f108 0810 	add.w	r8, r8, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f50a:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800f50c:	3308      	adds	r3, #8
 800f50e:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800f510:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f512:	441a      	add	r2, r3
 800f514:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800f516:	f10e 0e02 	add.w	lr, lr, #2
 800f51a:	f1be 0f10 	cmp.w	lr, #16
 800f51e:	d1eb      	bne.n	800f4f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800f520:	f500 70c0 	add.w	r0, r0, #384	@ 0x180
 800f524:	e723      	b.n	800f36e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
 800f526:	bf00      	nop
 800f528:	20027d74 	.word	0x20027d74
 800f52c:	20027574 	.word	0x20027574
 800f530:	20027974 	.word	0x20027974
 800f534:	20027174 	.word	0x20027174
 800f538:	20026d74 	.word	0x20026d74
 800f53c:	0802d21b 	.word	0x0802d21b

0800f540 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f544:	0a1b      	lsrs	r3, r3, #8
{  
 800f546:	b08d      	sub	sp, #52	@ 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800f548:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f54a:	4b4f      	ldr	r3, [pc, #316]	@ (800f688 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800f54c:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f54e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  currentMCU = BlockIndex;
 800f550:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f554:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f558:	691b      	ldr	r3, [r3, #16]
{  
 800f55a:	910a      	str	r1, [sp, #40]	@ 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f55c:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f55e:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800f560:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f564:	4413      	add	r3, r2
 800f566:	4573      	cmp	r3, lr
 800f568:	d803      	bhi.n	800f572 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f56a:	9805      	ldr	r0, [sp, #20]
 800f56c:	b00d      	add	sp, #52	@ 0x34
 800f56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f572:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800f576:	9a02      	ldr	r2, [sp, #8]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f578:	9c02      	ldr	r4, [sp, #8]
    currentMCU++;
 800f57a:	f10e 0e01 	add.w	lr, lr, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f57e:	9903      	ldr	r1, [sp, #12]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800f580:	f100 0780 	add.w	r7, r0, #128	@ 0x80
    pLum = pInBuffer;
 800f584:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800f586:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800f58a:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f58e:	4351      	muls	r1, r2
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f596:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800f598:	2308      	movs	r3, #8
 800f59a:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f59c:	9b07      	ldr	r3, [sp, #28]
 800f59e:	9a00      	ldr	r2, [sp, #0]
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d969      	bls.n	800f678 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
        pOutAddr = pOutBuffer + refline;
 800f5a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5a6:	46d0      	mov	r8, sl
 800f5a8:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800f5ac:	f107 0308 	add.w	r3, r7, #8
 800f5b0:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800f5b2:	1e7b      	subs	r3, r7, #1
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800f5b4:	2400      	movs	r4, #0
 800f5b6:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800f5b8:	f108 0301 	add.w	r3, r8, #1
 800f5bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5be:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800f5c2:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800f5c6:	9309      	str	r3, [sp, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f5c8:	9b01      	ldr	r3, [sp, #4]
 800f5ca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	4b2e      	ldr	r3, [pc, #184]	@ (800f68c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800f5d2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f5d6:	9b01      	ldr	r3, [sp, #4]
 800f5d8:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
 800f5dc:	4b2c      	ldr	r3, [pc, #176]	@ (800f690 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800f5de:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f5e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f694 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800f5e4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f5e8:	4b2b      	ldr	r3, [pc, #172]	@ (800f698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800f5ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f5ee:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f5f0:	4a2a      	ldr	r2, [pc, #168]	@ (800f69c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f5f6:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f5fa:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f5fe:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800f600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f602:	f892 b100 	ldrb.w	fp, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f606:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800f60a:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f60c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f610:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f614:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 800f618:	0892      	lsrs	r2, r2, #2
 800f61a:	0152      	lsls	r2, r2, #5
 800f61c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800f620:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800f624:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800f628:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800f62c:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f630:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f632:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800f634:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800f636:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f638:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f63c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f640:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800f644:	f895 2100 	ldrb.w	r2, [r5, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f648:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f64c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800f650:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800f654:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800f658:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800f65a:	d1b0      	bne.n	800f5be <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
            pChrom++;
 800f65c:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800f65e:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800f660:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800f664:	f108 0840 	add.w	r8, r8, #64	@ 0x40
        for(k= 0; k<2; k++)
 800f668:	42bb      	cmp	r3, r7
 800f66a:	d1a2      	bne.n	800f5b2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f66c:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800f66e:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	441a      	add	r2, r3
 800f676:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800f678:	9b04      	ldr	r3, [sp, #16]
 800f67a:	3b01      	subs	r3, #1
 800f67c:	9304      	str	r3, [sp, #16]
 800f67e:	d18d      	bne.n	800f59c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800f680:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 800f684:	e76c      	b.n	800f560 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800f686:	bf00      	nop
 800f688:	20027d74 	.word	0x20027d74
 800f68c:	20027574 	.word	0x20027574
 800f690:	20027974 	.word	0x20027974
 800f694:	20027174 	.word	0x20027174
 800f698:	20026d74 	.word	0x20026d74
 800f69c:	0802d21b 	.word	0x0802d21b

0800f6a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f6a6:	22c0      	movs	r2, #192	@ 0xc0
{  
 800f6a8:	b089      	sub	sp, #36	@ 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800f6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6ae:	9304      	str	r3, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6b0:	4b34      	ldr	r3, [pc, #208]	@ (800f784 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{  
 800f6b2:	9107      	str	r1, [sp, #28]
  currentMCU = BlockIndex;
 800f6b4:	4651      	mov	r1, sl
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f6b8:	9200      	str	r2, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f6bc:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6be:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f6c0:	9305      	str	r3, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800f6c2:	9b04      	ldr	r3, [sp, #16]
 800f6c4:	4453      	add	r3, sl
 800f6c6:	428b      	cmp	r3, r1
 800f6c8:	d803      	bhi.n	800f6d2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f6ca:	9804      	ldr	r0, [sp, #16]
 800f6cc:	b009      	add	sp, #36	@ 0x24
 800f6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6d2:	00cb      	lsls	r3, r1, #3
 800f6d4:	9a00      	ldr	r2, [sp, #0]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f6d6:	9d00      	ldr	r5, [sp, #0]
    currentMCU++;   
 800f6d8:	3101      	adds	r1, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6da:	9c01      	ldr	r4, [sp, #4]
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f6dc:	f100 0640 	add.w	r6, r0, #64	@ 0x40
    pLum = pInBuffer;
 800f6e0:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f6e2:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f6e6:	fb05 3312 	mls	r3, r5, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6ea:	4354      	muls	r4, r2
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f6ec:	2208      	movs	r2, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6ee:	005b      	lsls	r3, r3, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800f6f0:	9203      	str	r2, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f6f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f6f6:	9a05      	ldr	r2, [sp, #20]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d93c      	bls.n	800f776 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd6>
        pOutAddr = pOutBuffer+ refline;
 800f6fc:	9a07      	ldr	r2, [sp, #28]
 800f6fe:	f106 3eff 	add.w	lr, r6, #4294967295
 800f702:	18d4      	adds	r4, r2, r3
          for(j=0; j < 8; j++)
 800f704:	f10c 32ff 	add.w	r2, ip, #4294967295
 800f708:	9202      	str	r2, [sp, #8]
 800f70a:	f104 0210 	add.w	r2, r4, #16
 800f70e:	9206      	str	r2, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800f710:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800f712:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800f716:	f817 2f01 	ldrb.w	r2, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800f71a:	f89e 9040 	ldrb.w	r9, [lr, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f71e:	4d1a      	ldr	r5, [pc, #104]	@ (800f788 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
            ycomp = (int32_t)(*(pLum +j));
 800f720:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f722:	4f1a      	ldr	r7, [pc, #104]	@ (800f78c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 800f724:	442a      	add	r2, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f726:	4d1a      	ldr	r5, [pc, #104]	@ (800f790 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f728:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800f72c:	4417      	add	r7, r2
 800f72e:	f897 b100 	ldrb.w	fp, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f732:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f736:	4d17      	ldr	r5, [pc, #92]	@ (800f794 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800f738:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800f73c:	4417      	add	r7, r2
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f73e:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800f742:	4d15      	ldr	r5, [pc, #84]	@ (800f798 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f744:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f748:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f74c:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800f74e:	44c1      	add	r9, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800f750:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800f754:	eb02 4229 	add.w	r2, r2, r9, asr #16
 800f758:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
 800f75c:	0892      	lsrs	r2, r2, #2
 800f75e:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
          for(j=0; j < 8; j++)
 800f762:	9a06      	ldr	r2, [sp, #24]
            *(__IO uint16_t *)pOutAddr = 
 800f764:	f824 7b02 	strh.w	r7, [r4], #2
          for(j=0; j < 8; j++)
 800f768:	4294      	cmp	r4, r2
 800f76a:	d1d1      	bne.n	800f710 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f76c:	9a01      	ldr	r2, [sp, #4]
            pChrom++;
 800f76e:	3608      	adds	r6, #8
          pLum += 8;
 800f770:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f774:	4413      	add	r3, r2
    for(i= 0; i <  8; i++)
 800f776:	9a03      	ldr	r2, [sp, #12]
 800f778:	3a01      	subs	r2, #1
 800f77a:	9203      	str	r2, [sp, #12]
 800f77c:	d1bb      	bne.n	800f6f6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800f77e:	30c0      	adds	r0, #192	@ 0xc0
 800f780:	e79f      	b.n	800f6c2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800f782:	bf00      	nop
 800f784:	20027d74 	.word	0x20027d74
 800f788:	0802d21b 	.word	0x0802d21b
 800f78c:	20027974 	.word	0x20027974
 800f790:	20027574 	.word	0x20027574
 800f794:	20027174 	.word	0x20027174
 800f798:	20026d74 	.word	0x20026d74

0800f79c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800f79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a0:	b085      	sub	sp, #20
 800f7a2:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800f7a4:	0998      	lsrs	r0, r3, #6
{
 800f7a6:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800f7a8:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f7ac:	491a      	ldr	r1, [pc, #104]	@ (800f818 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f7ae:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f7b0:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	@ 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f7b4:	6909      	ldr	r1, [r1, #16]
 800f7b6:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800f7b8:	9b03      	ldr	r3, [sp, #12]
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d802      	bhi.n	800f7c4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800f7be:	b005      	add	sp, #20
 800f7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f7c4:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 800f7c6:	46a4      	mov	ip, r4
    currentMCU++;
 800f7c8:	3201      	adds	r2, #1
 800f7ca:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f7cc:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f7d0:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f7d4:	fb09 f501 	mul.w	r5, r9, r1
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f7de:	9901      	ldr	r1, [sp, #4]
 800f7e0:	4299      	cmp	r1, r3
 800f7e2:	d915      	bls.n	800f810 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
      pOutAddr = pOutBuffer + refline;
 800f7e4:	9902      	ldr	r1, [sp, #8]
 800f7e6:	46e2      	mov	sl, ip
 800f7e8:	4419      	add	r1, r3
        for(j=0; j < 8; j++)
 800f7ea:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800f7ee:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800f7f2:	08f5      	lsrs	r5, r6, #3
 800f7f4:	08b6      	lsrs	r6, r6, #2
 800f7f6:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800f7fa:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 800f7fe:	ea45 050e 	orr.w	r5, r5, lr
 800f802:	f821 5b02 	strh.w	r5, [r1], #2
        for(j=0; j < 8; j++)
 800f806:	4559      	cmp	r1, fp
 800f808:	d1f1      	bne.n	800f7ee <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800f80a:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800f80e:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800f810:	3f01      	subs	r7, #1
 800f812:	d1e4      	bne.n	800f7de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800f814:	3440      	adds	r4, #64	@ 0x40
 800f816:	e7cf      	b.n	800f7b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800f818:	20027d74 	.word	0x20027d74

0800f81c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f820:	b085      	sub	sp, #20
 800f822:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f824:	27ff      	movs	r7, #255	@ 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800f826:	0a18      	lsrs	r0, r3, #8
{  
 800f828:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800f82a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f82e:	4927      	ldr	r1, [pc, #156]	@ (800f8cc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 800f830:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f832:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f836:	6909      	ldr	r1, [r1, #16]
 800f838:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800f83a:	9b03      	ldr	r3, [sp, #12]
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d802      	bhi.n	800f846 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800f840:	b005      	add	sp, #20
 800f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f846:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 800f848:	46ae      	mov	lr, r5
    currentMCU++;
 800f84a:	3201      	adds	r2, #1
 800f84c:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800f850:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800f854:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800f858:	fb0a f403 	mul.w	r4, sl, r3
 800f85c:	0049      	lsls	r1, r1, #1
 800f85e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800f862:	9b00      	ldr	r3, [sp, #0]
 800f864:	428b      	cmp	r3, r1
 800f866:	d92b      	bls.n	800f8c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;        
 800f868:	9b02      	ldr	r3, [sp, #8]
 800f86a:	4674      	mov	r4, lr
 800f86c:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800f86e:	f106 0310 	add.w	r3, r6, #16
 800f872:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800f874:	f894 80c0 	ldrb.w	r8, [r4, #192]	@ 0xc0
            pChrom++;
 800f878:	3401      	adds	r4, #1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f87a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f87e:	f814 bc01 	ldrb.w	fp, [r4, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f882:	fb13 f308 	smulbb	r3, r3, r8
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f886:	fb1b fb08 	smulbb	fp, fp, r8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800f88a:	fbb3 f3f7 	udiv	r3, r3, r7
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800f88e:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f892:	109b      	asrs	r3, r3, #2
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f894:	ea4f 0beb 	mov.w	fp, fp, asr #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f898:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800f89a:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800f89e:	f894 b07f 	ldrb.w	fp, [r4, #127]	@ 0x7f
 800f8a2:	fb1b fb08 	smulbb	fp, fp, r8
 800f8a6:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800f8aa:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 800f8ae:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr = 
 800f8b0:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 800f8b4:	9b01      	ldr	r3, [sp, #4]
 800f8b6:	429e      	cmp	r6, r3
 800f8b8:	d1dc      	bne.n	800f874 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800f8ba:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800f8be:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800f8c0:	f1bc 0c01 	subs.w	ip, ip, #1
 800f8c4:	d1cd      	bne.n	800f862 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800f8c6:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800f8ca:	e7b6      	b.n	800f83a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800f8cc:	20027d74 	.word	0x20027d74

0800f8d0 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800f8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f8d2:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f8d4:	6886      	ldr	r6, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f8d6:	6805      	ldr	r5, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f8d8:	fb06 f703 	mul.w	r7, r6, r3
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f8dc:	4c27      	ldr	r4, [pc, #156]	@ (800f97c <JPEG_GetDecodeColorConvertFunc+0xac>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f8de:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f8e0:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f8e2:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800f8e6:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800f8e8:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800f8ea:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800f8ec:	6127      	str	r7, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800f8ee:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800f8f0:	d13a      	bne.n	800f968 <JPEG_GetDecodeColorConvertFunc+0x98>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800f8f2:	2801      	cmp	r0, #1
 800f8f4:	d120      	bne.n	800f938 <JPEG_GetDecodeColorConvertFunc+0x68>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f8f6:	f013 000f 	ands.w	r0, r3, #15
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800f8fa:	4f21      	ldr	r7, [pc, #132]	@ (800f980 <JPEG_GetDecodeColorConvertFunc+0xb0>)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f8fc:	bf18      	it	ne
 800f8fe:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800f902:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800f904:	6160      	str	r0, [r4, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 16;
 800f906:	2010      	movs	r0, #16
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800f908:	6961      	ldr	r1, [r4, #20]
 800f90a:	4419      	add	r1, r3
 800f90c:	6261      	str	r1, [r4, #36]	@ 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800f90e:	0059      	lsls	r1, r3, #1
 800f910:	62a1      	str	r1, [r4, #40]	@ 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800f912:	fbb3 f1f5 	udiv	r1, r3, r5
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800f916:	fb05 3311 	mls	r3, r5, r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
 800f91a:	e9c4 5007 	strd	r5, r0, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800f91e:	b103      	cbz	r3, 800f922 <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800f920:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800f922:	fbb6 f3f0 	udiv	r3, r6, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800f926:	fb00 6613 	mls	r6, r0, r3, r6
 800f92a:	b106      	cbz	r6, 800f92e <JPEG_GetDecodeColorConvertFunc+0x5e>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800f92c:	3301      	adds	r3, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f92e:	4359      	muls	r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800f930:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800f932:	62e1      	str	r1, [r4, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800f934:	6011      	str	r1, [r2, #0]
}
 800f936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800f938:	2802      	cmp	r0, #2
 800f93a:	d109      	bne.n	800f950 <JPEG_GetDecodeColorConvertFunc+0x80>
      if(JPEG_ConvertorParams.LineOffset != 0)
 800f93c:	f013 000f 	ands.w	r0, r3, #15
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800f940:	4f10      	ldr	r7, [pc, #64]	@ (800f984 <JPEG_GetDecodeColorConvertFunc+0xb4>)
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800f942:	bf18      	it	ne
 800f944:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800f948:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800f94a:	6160      	str	r0, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 800f94c:	2008      	movs	r0, #8
 800f94e:	e7db      	b.n	800f908 <JPEG_GetDecodeColorConvertFunc+0x38>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800f950:	480d      	ldr	r0, [pc, #52]	@ (800f988 <JPEG_GetDecodeColorConvertFunc+0xb8>)
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800f952:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800f954:	f013 0107 	ands.w	r1, r3, #7
 800f958:	d002      	beq.n	800f960 <JPEG_GetDecodeColorConvertFunc+0x90>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800f95a:	f1c1 0108 	rsb	r1, r1, #8
 800f95e:	e000      	b.n	800f962 <JPEG_GetDecodeColorConvertFunc+0x92>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800f960:	2100      	movs	r1, #0
 800f962:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800f964:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 800f966:	e7f1      	b.n	800f94c <JPEG_GetDecodeColorConvertFunc+0x7c>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800f968:	b90d      	cbnz	r5, 800f96e <JPEG_GetDecodeColorConvertFunc+0x9e>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800f96a:	4808      	ldr	r0, [pc, #32]	@ (800f98c <JPEG_GetDecodeColorConvertFunc+0xbc>)
 800f96c:	e7f1      	b.n	800f952 <JPEG_GetDecodeColorConvertFunc+0x82>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800f96e:	2d30      	cmp	r5, #48	@ 0x30
 800f970:	d101      	bne.n	800f976 <JPEG_GetDecodeColorConvertFunc+0xa6>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800f972:	4807      	ldr	r0, [pc, #28]	@ (800f990 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800f974:	e7ed      	b.n	800f952 <JPEG_GetDecodeColorConvertFunc+0x82>
    return HAL_ERROR; /* Color space Not supported*/
 800f976:	2001      	movs	r0, #1
 800f978:	e7dd      	b.n	800f936 <JPEG_GetDecodeColorConvertFunc+0x66>
 800f97a:	bf00      	nop
 800f97c:	20027d74 	.word	0x20027d74
 800f980:	0800f345 	.word	0x0800f345
 800f984:	0800f541 	.word	0x0800f541
 800f988:	0800f6a1 	.word	0x0800f6a1
 800f98c:	0800f79d 	.word	0x0800f79d
 800f990:	0800f81d 	.word	0x0800f81d

0800f994 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f994:	8880      	ldrh	r0, [r0, #4]
 800f996:	4770      	bx	lr

0800f998 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	6803      	ldr	r3, [r0, #0]
 800f99c:	460c      	mov	r4, r1
 800f99e:	2100      	movs	r1, #0
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9a4:	4798      	blx	r3
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	682b      	ldr	r3, [r5, #0]
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	1ba4      	subs	r4, r4, r6
 800f9ae:	6a1b      	ldr	r3, [r3, #32]
 800f9b0:	b2a4      	uxth	r4, r4
 800f9b2:	4798      	blx	r3
 800f9b4:	fbb4 f0f0 	udiv	r0, r4, r0
 800f9b8:	bd70      	pop	{r4, r5, r6, pc}

0800f9ba <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	8083      	strh	r3, [r0, #4]
 800f9be:	4770      	bx	lr

0800f9c0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	6803      	ldr	r3, [r0, #0]
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	8881      	ldrh	r1, [r0, #4]
 800f9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ca:	4798      	blx	r3
 800f9cc:	88a3      	ldrh	r3, [r4, #4]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	80a3      	strh	r3, [r4, #4]
 800f9d2:	bd10      	pop	{r4, pc}

0800f9d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f9d4:	6803      	ldr	r3, [r0, #0]
 800f9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d8:	4718      	bx	r3

0800f9da <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f9dc:	4a02      	ldr	r2, [pc, #8]	@ (800f9e8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f9de:	6002      	str	r2, [r0, #0]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	8082      	strh	r2, [r0, #4]
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	0802d524 	.word	0x0802d524

0800f9ec <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 800f9ec:	f8c0 10dc 	str.w	r1, [r0, #220]	@ 0xdc
 800f9f0:	4770      	bx	lr

0800f9f2 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 800f9f2:	b530      	push	{r4, r5, lr}
 800f9f4:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
 800f9f8:	2520      	movs	r5, #32
 800f9fa:	fb94 f4f5 	sdiv	r4, r4, r5
 800f9fe:	600c      	str	r4, [r1, #0]
 800fa00:	f8d0 3128 	ldr.w	r3, [r0, #296]	@ 0x128
 800fa04:	fb93 f3f5 	sdiv	r3, r3, r5
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	bd30      	pop	{r4, r5, pc}

0800fa0c <_ZN8touchgfx12LineProgress6setEndEii>:
 800fa0c:	0149      	lsls	r1, r1, #5
 800fa0e:	0152      	lsls	r2, r2, #5
 800fa10:	f8c0 112c 	str.w	r1, [r0, #300]	@ 0x12c
 800fa14:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 800fa18:	4770      	bx	lr

0800fa1a <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 800fa1a:	b530      	push	{r4, r5, lr}
 800fa1c:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
 800fa20:	2520      	movs	r5, #32
 800fa22:	fb94 f4f5 	sdiv	r4, r4, r5
 800fa26:	600c      	str	r4, [r1, #0]
 800fa28:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 800fa2c:	fb93 f3f5 	sdiv	r3, r3, r5
 800fa30:	6013      	str	r3, [r2, #0]
 800fa32:	bd30      	pop	{r4, r5, pc}

0800fa34 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 800fa34:	f8d0 00f0 	ldr.w	r0, [r0, #240]	@ 0xf0
 800fa38:	2320      	movs	r3, #32
 800fa3a:	fb90 f0f3 	sdiv	r0, r0, r3
 800fa3e:	4770      	bx	lr

0800fa40 <_ZN8touchgfx12LineProgressD1Ev>:
 800fa40:	4770      	bx	lr

0800fa42 <_ZN8touchgfx12LineProgress8setStartEii>:
 800fa42:	0149      	lsls	r1, r1, #5
 800fa44:	30b4      	adds	r0, #180	@ 0xb4
 800fa46:	0152      	lsls	r2, r2, #5
 800fa48:	6701      	str	r1, [r0, #112]	@ 0x70
 800fa4a:	6742      	str	r2, [r0, #116]	@ 0x74
 800fa4c:	f002 b91f 	b.w	8011c8e <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0800fa50 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 800fa50:	0149      	lsls	r1, r1, #5
 800fa52:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
 800fa56:	4299      	cmp	r1, r3
 800fa58:	d004      	beq.n	800fa64 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 800fa5a:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0
 800fa5e:	30b4      	adds	r0, #180	@ 0xb4
 800fa60:	f002 b81f 	b.w	8011aa2 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800fa64:	4770      	bx	lr

0800fa66 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 800fa66:	30b4      	adds	r0, #180	@ 0xb4
 800fa68:	f002 b936 	b.w	8011cd8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

0800fa6c <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 800fa6c:	30b4      	adds	r0, #180	@ 0xb4
 800fa6e:	f002 b815 	b.w	8011a9c <_ZNK8touchgfx4Line18getLineEndingStyleEv>

0800fa72 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 800fa72:	b538      	push	{r3, r4, r5, lr}
 800fa74:	4604      	mov	r4, r0
 800fa76:	460d      	mov	r5, r1
 800fa78:	f000 f8e2 	bl	800fc40 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800fa7c:	f884 50da 	strb.w	r5, [r4, #218]	@ 0xda
 800fa80:	bd38      	pop	{r3, r4, r5, pc}

0800fa82 <_ZN8touchgfx12LineProgressD0Ev>:
 800fa82:	b510      	push	{r4, lr}
 800fa84:	4604      	mov	r4, r0
 800fa86:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800fa8a:	f019 f88e 	bl	8028baa <_ZdlPvj>
 800fa8e:	4620      	mov	r0, r4
 800fa90:	bd10      	pop	{r4, pc}

0800fa92 <_ZN8touchgfx12LineProgress8setValueEi>:
 800fa92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa94:	f8b0 3090 	ldrh.w	r3, [r0, #144]	@ 0x90
 800fa98:	4604      	mov	r4, r0
 800fa9a:	b33b      	cbz	r3, 800faec <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 800fa9c:	f000 f923 	bl	800fce6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800faa0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800faa4:	4620      	mov	r0, r4
 800faa6:	2720      	movs	r7, #32
 800faa8:	f000 f93f 	bl	800fd2a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800faac:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
 800fab0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 800fab4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800fab8:	f8d4 5130 	ldr.w	r5, [r4, #304]	@ 0x130
 800fabc:	1a5b      	subs	r3, r3, r1
 800fabe:	f8b4 6090 	ldrh.w	r6, [r4, #144]	@ 0x90
 800fac2:	1aad      	subs	r5, r5, r2
 800fac4:	015b      	lsls	r3, r3, #5
 800fac6:	016d      	lsls	r5, r5, #5
 800fac8:	fb93 f3f6 	sdiv	r3, r3, r6
 800facc:	fb95 f5f6 	sdiv	r5, r5, r6
 800fad0:	4343      	muls	r3, r0
 800fad2:	4368      	muls	r0, r5
 800fad4:	fb93 f3f7 	sdiv	r3, r3, r7
 800fad8:	fb90 f0f7 	sdiv	r0, r0, r7
 800fadc:	4419      	add	r1, r3
 800fade:	4402      	add	r2, r0
 800fae0:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 800fae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fae8:	f002 b8dc 	b.w	8011ca4 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 800faec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800faee <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800faee:	b510      	push	{r4, lr}
 800faf0:	6803      	ldr	r3, [r0, #0]
 800faf2:	4604      	mov	r4, r0
 800faf4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800faf8:	4798      	blx	r3
 800fafa:	b140      	cbz	r0, 800fb0e <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800fafc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800fb00:	b12b      	cbz	r3, 800fb0e <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	4620      	mov	r0, r4
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb0c:	4718      	bx	r3
 800fb0e:	bd10      	pop	{r4, pc}

0800fb10 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	6803      	ldr	r3, [r0, #0]
 800fb14:	4604      	mov	r4, r0
 800fb16:	4615      	mov	r5, r2
 800fb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1a:	4798      	blx	r3
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	4629      	mov	r1, r5
 800fb20:	4620      	mov	r0, r4
 800fb22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb28:	4718      	bx	r3

0800fb2a <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 800fb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2e:	461d      	mov	r5, r3
 800fb30:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800fb34:	2300      	movs	r3, #0
 800fb36:	4604      	mov	r4, r0
 800fb38:	460f      	mov	r7, r1
 800fb3a:	4690      	mov	r8, r2
 800fb3c:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 800fb40:	4632      	mov	r2, r6
 800fb42:	4629      	mov	r1, r5
 800fb44:	30b4      	adds	r0, #180	@ 0xb4
 800fb46:	f7ff ffe3 	bl	800fb10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fb4a:	9606      	str	r6, [sp, #24]
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	4642      	mov	r2, r8
 800fb50:	4639      	mov	r1, r7
 800fb52:	4620      	mov	r0, r4
 800fb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb58:	f000 b95a 	b.w	800fe10 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800fb5c <_ZN8touchgfx12LineProgressC1Ev>:
 800fb5c:	b570      	push	{r4, r5, r6, lr}
 800fb5e:	4604      	mov	r4, r0
 800fb60:	f000 f982 	bl	800fe68 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800fb64:	4b0f      	ldr	r3, [pc, #60]	@ (800fba4 <_ZN8touchgfx12LineProgressC1Ev+0x48>)
 800fb66:	2600      	movs	r6, #0
 800fb68:	4625      	mov	r5, r4
 800fb6a:	f845 3bb4 	str.w	r3, [r5], #180
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f001 ff74 	bl	8011a5c <_ZN8touchgfx4LineC1Ev>
 800fb74:	4629      	mov	r1, r5
 800fb76:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb7a:	f8c4 6124 	str.w	r6, [r4, #292]	@ 0x124
 800fb7e:	f8c4 6128 	str.w	r6, [r4, #296]	@ 0x128
 800fb82:	f8c4 612c 	str.w	r6, [r4, #300]	@ 0x12c
 800fb86:	f8c4 6130 	str.w	r6, [r4, #304]	@ 0x130
 800fb8a:	f000 f9cd 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800fb94:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800fb98:	f8c4 60b8 	str.w	r6, [r4, #184]	@ 0xb8
 800fb9c:	f7ff ffb8 	bl	800fb10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fba0:	4620      	mov	r0, r4
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	0802d558 	.word	0x0802d558

0800fba8 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800fba8:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 800fbac:	4770      	bx	lr

0800fbae <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800fbae:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 800fbb2:	4770      	bx	lr

0800fbb4 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800fbb4:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 800fbb8:	4770      	bx	lr

0800fbba <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800fbba:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 800fbbe:	4770      	bx	lr

0800fbc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800fbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbc2:	461e      	mov	r6, r3
 800fbc4:	6803      	ldr	r3, [r0, #0]
 800fbc6:	460f      	mov	r7, r1
 800fbc8:	4604      	mov	r4, r0
 800fbca:	4615      	mov	r5, r2
 800fbcc:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 800fbd0:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800fbd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fbd8:	4798      	blx	r3
 800fbda:	b93e      	cbnz	r6, 800fbec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800fbdc:	1bed      	subs	r5, r5, r7
 800fbde:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800fbe2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800fbe6:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800fbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbec:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 800fbf0:	e7f7      	b.n	800fbe2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800fbf2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800fbf2:	b510      	push	{r4, lr}
 800fbf4:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800fbf8:	600c      	str	r4, [r1, #0]
 800fbfa:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800fbfe:	6011      	str	r1, [r2, #0]
 800fc00:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800fc04:	801a      	strh	r2, [r3, #0]
 800fc06:	9b02      	ldr	r3, [sp, #8]
 800fc08:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 800fc0c:	801a      	strh	r2, [r3, #0]
 800fc0e:	bd10      	pop	{r4, pc}

0800fc10 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800fc16:	600c      	str	r4, [r1, #0]
 800fc18:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800fc1c:	6011      	str	r1, [r2, #0]
 800fc1e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800fc22:	801a      	strh	r2, [r3, #0]
 800fc24:	bd10      	pop	{r4, pc}

0800fc26 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800fc26:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800fc2a:	600b      	str	r3, [r1, #0]
 800fc2c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800fc30:	6013      	str	r3, [r2, #0]
 800fc32:	4770      	bx	lr

0800fc34 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800fc34:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 800fc38:	4770      	bx	lr

0800fc3a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800fc3a:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 800fc3e:	4770      	bx	lr

0800fc40 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800fc40:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800fc44:	4770      	bx	lr

0800fc46 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800fc46:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 800fc4a:	4770      	bx	lr

0800fc4c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800fc4c:	4770      	bx	lr

0800fc4e <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800fc4e:	b510      	push	{r4, lr}
 800fc50:	4604      	mov	r4, r0
 800fc52:	21b4      	movs	r1, #180	@ 0xb4
 800fc54:	f018 ffa9 	bl	8028baa <_ZdlPvj>
 800fc58:	4620      	mov	r0, r4
 800fc5a:	bd10      	pop	{r4, pc}

0800fc5c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800fc62:	4604      	mov	r4, r0
 800fc64:	4616      	mov	r6, r2
 800fc66:	428d      	cmp	r5, r1
 800fc68:	bfb8      	it	lt
 800fc6a:	460d      	movlt	r5, r1
 800fc6c:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800fc70:	428d      	cmp	r5, r1
 800fc72:	bfa8      	it	ge
 800fc74:	460d      	movge	r5, r1
 800fc76:	b99a      	cbnz	r2, 800fca0 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800fc78:	6803      	ldr	r3, [r0, #0]
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fc80:	4798      	blx	r3
 800fc82:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fc86:	b368      	cbz	r0, 800fce4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fc88:	6803      	ldr	r3, [r0, #0]
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	4798      	blx	r3
 800fc8e:	b348      	cbz	r0, 800fce4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800fc90:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fc94:	4621      	mov	r1, r4
 800fc96:	6803      	ldr	r3, [r0, #0]
 800fc98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	4718      	bx	r3
 800fca0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	dd08      	ble.n	800fcba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800fca8:	f006 fc94 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 800fcac:	4621      	mov	r1, r4
 800fcae:	3004      	adds	r0, #4
 800fcb0:	f006 fcdd 	bl	801666e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fcc2:	4798      	blx	r3
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 800fcca:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 800fcce:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 800fcd2:	f006 fc7f 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	3004      	adds	r0, #4
 800fcda:	f006 fd71 	bl	80167c0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800fcde:	2301      	movs	r3, #1
 800fce0:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800fce4:	bd70      	pop	{r4, r5, r6, pc}

0800fce6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800fce6:	b510      	push	{r4, lr}
 800fce8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800fcec:	4604      	mov	r4, r0
 800fcee:	4299      	cmp	r1, r3
 800fcf0:	bfb8      	it	lt
 800fcf2:	4619      	movlt	r1, r3
 800fcf4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800fcf8:	4299      	cmp	r1, r3
 800fcfa:	bfa8      	it	ge
 800fcfc:	4619      	movge	r1, r3
 800fcfe:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800fd02:	428b      	cmp	r3, r1
 800fd04:	d010      	beq.n	800fd28 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fd06:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800fd0a:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 800fd0e:	b158      	cbz	r0, 800fd28 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fd10:	6803      	ldr	r3, [r0, #0]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	4798      	blx	r3
 800fd16:	b138      	cbz	r0, 800fd28 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800fd18:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800fd1c:	4621      	mov	r1, r4
 800fd1e:	6803      	ldr	r3, [r0, #0]
 800fd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	4718      	bx	r3
 800fd28:	bd10      	pop	{r4, pc}

0800fd2a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800fd2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	460d      	mov	r5, r1
 800fd30:	b1a9      	cbz	r1, 800fd5e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800fd32:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 800fd36:	ab01      	add	r3, sp, #4
 800fd38:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800fd3c:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 800fd40:	1b89      	subs	r1, r1, r6
 800fd42:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 800fd46:	1a12      	subs	r2, r2, r0
 800fd48:	1a38      	subs	r0, r7, r0
 800fd4a:	f007 fefb 	bl	8017b44 <_ZN8touchgfx6muldivElllRl>
 800fd4e:	4629      	mov	r1, r5
 800fd50:	ab01      	add	r3, sp, #4
 800fd52:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 800fd56:	4430      	add	r0, r6
 800fd58:	f007 fef4 	bl	8017b44 <_ZN8touchgfx6muldivElllRl>
 800fd5c:	b285      	uxth	r5, r0
 800fd5e:	4628      	mov	r0, r5
 800fd60:	b003      	add	sp, #12
 800fd62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd64 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800fd64:	b570      	push	{r4, r5, r6, lr}
 800fd66:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d035      	beq.n	800fddc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fd70:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 800fd74:	2100      	movs	r1, #0
 800fd76:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800fd7a:	3001      	adds	r0, #1
 800fd7c:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 800fd80:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800fd84:	b280      	uxth	r0, r0
 800fd86:	1ad2      	subs	r2, r2, r3
 800fd88:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800fd8c:	b212      	sxth	r2, r2
 800fd8e:	47a8      	blx	r5
 800fd90:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	4401      	add	r1, r0
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fd9e:	4798      	blx	r3
 800fda0:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 800fda4:	429a      	cmp	r2, r3
 800fda6:	db19      	blt.n	800fddc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fda8:	2500      	movs	r5, #0
 800fdaa:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800fdae:	f006 fc11 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 800fdb2:	4621      	mov	r1, r4
 800fdb4:	3004      	adds	r0, #4
 800fdb6:	f006 fc5a 	bl	801666e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800fdba:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fdbe:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800fdc2:	b158      	cbz	r0, 800fddc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fdc4:	6803      	ldr	r3, [r0, #0]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	4798      	blx	r3
 800fdca:	b138      	cbz	r0, 800fddc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800fdcc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800fdd0:	4621      	mov	r1, r4
 800fdd2:	6803      	ldr	r3, [r0, #0]
 800fdd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	4718      	bx	r3
 800fddc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fde0 <_ZN8touchgfx8DrawableC1Ev>:
 800fde0:	4a0a      	ldr	r2, [pc, #40]	@ (800fe0c <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800fde2:	6002      	str	r2, [r0, #0]
 800fde4:	2200      	movs	r2, #0
 800fde6:	8082      	strh	r2, [r0, #4]
 800fde8:	80c2      	strh	r2, [r0, #6]
 800fdea:	8102      	strh	r2, [r0, #8]
 800fdec:	8142      	strh	r2, [r0, #10]
 800fdee:	8182      	strh	r2, [r0, #12]
 800fdf0:	81c2      	strh	r2, [r0, #14]
 800fdf2:	8202      	strh	r2, [r0, #16]
 800fdf4:	8242      	strh	r2, [r0, #18]
 800fdf6:	61c2      	str	r2, [r0, #28]
 800fdf8:	8402      	strh	r2, [r0, #32]
 800fdfa:	8442      	strh	r2, [r0, #34]	@ 0x22
 800fdfc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800fe00:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fe04:	2201      	movs	r2, #1
 800fe06:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800fe0a:	4770      	bx	lr
 800fe0c:	0802e124 	.word	0x0802e124

0800fe10 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe14:	4604      	mov	r4, r0
 800fe16:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800fe1a:	4698      	mov	r8, r3
 800fe1c:	460e      	mov	r6, r1
 800fe1e:	4615      	mov	r5, r2
 800fe20:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800fe24:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800fe28:	4619      	mov	r1, r3
 800fe2a:	463a      	mov	r2, r7
 800fe2c:	3058      	adds	r0, #88	@ 0x58
 800fe2e:	f7ff fe6f 	bl	800fb10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fe32:	4446      	add	r6, r8
 800fe34:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800fe38:	443d      	add	r5, r7
 800fe3a:	42b3      	cmp	r3, r6
 800fe3c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fe40:	bfb8      	it	lt
 800fe42:	8126      	strhlt	r6, [r4, #8]
 800fe44:	42ab      	cmp	r3, r5
 800fe46:	bfb8      	it	lt
 800fe48:	8165      	strhlt	r5, [r4, #10]
 800fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe4e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	4604      	mov	r4, r0
 800fe52:	302c      	adds	r0, #44	@ 0x2c
 800fe54:	f003 fff5 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800fe58:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800fe62:	f7ff fe55 	bl	800fb10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fe66:	bd10      	pop	{r4, pc}

0800fe68 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800fe68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	2500      	movs	r5, #0
 800fe6e:	f7ff ffb7 	bl	800fde0 <_ZN8touchgfx8DrawableC1Ev>
 800fe72:	4b24      	ldr	r3, [pc, #144]	@ (800ff04 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800fe74:	4626      	mov	r6, r4
 800fe76:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800fe7a:	2226      	movs	r2, #38	@ 0x26
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	62a5      	str	r5, [r4, #40]	@ 0x28
 800fe80:	f846 3b2c 	str.w	r3, [r6], #44
 800fe84:	4630      	mov	r0, r6
 800fe86:	f8ad 7004 	strh.w	r7, [sp, #4]
 800fe8a:	f019 f959 	bl	8029140 <memset>
 800fe8e:	4630      	mov	r0, r6
 800fe90:	f7ff ffa6 	bl	800fde0 <_ZN8touchgfx8DrawableC1Ev>
 800fe94:	a902      	add	r1, sp, #8
 800fe96:	4b1c      	ldr	r3, [pc, #112]	@ (800ff08 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800fe98:	4630      	mov	r0, r6
 800fe9a:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 800fe9e:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 800fea2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fea4:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800fea8:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800feac:	f003 ffc9 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800feb0:	4638      	mov	r0, r7
 800feb2:	f7ff ff95 	bl	800fde0 <_ZN8touchgfx8DrawableC1Ev>
 800feb6:	4b15      	ldr	r3, [pc, #84]	@ (800ff0c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800feb8:	4629      	mov	r1, r5
 800feba:	4630      	mov	r0, r6
 800febc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800febe:	2364      	movs	r3, #100	@ 0x64
 800fec0:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800fec4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800fec8:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 800fecc:	4b10      	ldr	r3, [pc, #64]	@ (800ff10 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800fece:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 800fed2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800fed6:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 800feda:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800fede:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 800fee2:	f7f2 f9bb 	bl	800225c <_ZN8touchgfx8Drawable4setXEs>
 800fee6:	4629      	mov	r1, r5
 800fee8:	4630      	mov	r0, r6
 800feea:	f7f2 f9b9 	bl	8002260 <_ZN8touchgfx8Drawable4setYEs>
 800feee:	4631      	mov	r1, r6
 800fef0:	4620      	mov	r0, r4
 800fef2:	f000 f819 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fef6:	4620      	mov	r0, r4
 800fef8:	4639      	mov	r1, r7
 800fefa:	f000 f815 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800fefe:	4620      	mov	r0, r4
 800ff00:	b003      	add	sp, #12
 800ff02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff04:	0802d650 	.word	0x0802d650
 800ff08:	0802e054 	.word	0x0802e054
 800ff0c:	0802d724 	.word	0x0802d724
 800ff10:	080182a3 	.word	0x080182a3

0800ff14 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ff14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff16:	2000      	movs	r0, #0
 800ff18:	b12b      	cbz	r3, 800ff26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ff1a:	b920      	cbnz	r0, 800ff26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ff1c:	1a5a      	subs	r2, r3, r1
 800ff1e:	699b      	ldr	r3, [r3, #24]
 800ff20:	4250      	negs	r0, r2
 800ff22:	4150      	adcs	r0, r2
 800ff24:	e7f8      	b.n	800ff18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ff26:	4770      	bx	lr

0800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ff28:	2300      	movs	r3, #0
 800ff2a:	6148      	str	r0, [r1, #20]
 800ff2c:	618b      	str	r3, [r1, #24]
 800ff2e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff30:	b913      	cbnz	r3, 800ff38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ff32:	6281      	str	r1, [r0, #40]	@ 0x28
 800ff34:	4770      	bx	lr
 800ff36:	4613      	mov	r3, r2
 800ff38:	699a      	ldr	r2, [r3, #24]
 800ff3a:	2a00      	cmp	r2, #0
 800ff3c:	d1fb      	bne.n	800ff36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ff3e:	6199      	str	r1, [r3, #24]
 800ff40:	4770      	bx	lr

0800ff42 <_ZN8touchgfx9Container9removeAllEv>:
 800ff42:	2200      	movs	r2, #0
 800ff44:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff46:	b123      	cbz	r3, 800ff52 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ff48:	6999      	ldr	r1, [r3, #24]
 800ff4a:	6281      	str	r1, [r0, #40]	@ 0x28
 800ff4c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ff50:	e7f8      	b.n	800ff44 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ff52:	4770      	bx	lr

0800ff54 <_ZN8touchgfx9Container6unlinkEv>:
 800ff54:	2300      	movs	r3, #0
 800ff56:	6283      	str	r3, [r0, #40]	@ 0x28
 800ff58:	4770      	bx	lr

0800ff5a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	8002      	strh	r2, [r0, #0]
 800ff5e:	8042      	strh	r2, [r0, #2]
 800ff60:	8082      	strh	r2, [r0, #4]
 800ff62:	80c2      	strh	r2, [r0, #6]
 800ff64:	4770      	bx	lr

0800ff66 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ff66:	b570      	push	{r4, r5, r6, lr}
 800ff68:	460d      	mov	r5, r1
 800ff6a:	4616      	mov	r6, r2
 800ff6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ff6e:	b13c      	cbz	r4, 800ff80 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ff70:	6823      	ldr	r3, [r4, #0]
 800ff72:	4620      	mov	r0, r4
 800ff74:	4632      	mov	r2, r6
 800ff76:	4629      	mov	r1, r5
 800ff78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff7a:	4798      	blx	r3
 800ff7c:	69a4      	ldr	r4, [r4, #24]
 800ff7e:	e7f6      	b.n	800ff6e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ff80:	bd70      	pop	{r4, r5, r6, pc}

0800ff82 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ff82:	b538      	push	{r3, r4, r5, lr}
 800ff84:	460d      	mov	r5, r1
 800ff86:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ff88:	b134      	cbz	r4, 800ff98 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ff8a:	682b      	ldr	r3, [r5, #0]
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	4628      	mov	r0, r5
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	4798      	blx	r3
 800ff94:	69a4      	ldr	r4, [r4, #24]
 800ff96:	e7f7      	b.n	800ff88 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ff98:	bd38      	pop	{r3, r4, r5, pc}

0800ff9a <_ZN8touchgfx9ContainerD1Ev>:
 800ff9a:	4770      	bx	lr

0800ff9c <_ZN8touchgfx9ContainerD0Ev>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	212c      	movs	r1, #44	@ 0x2c
 800ffa2:	f018 fe02 	bl	8028baa <_ZdlPvj>
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	bd10      	pop	{r4, pc}

0800ffaa <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ffaa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ffac:	b19b      	cbz	r3, 800ffd6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ffae:	428b      	cmp	r3, r1
 800ffb0:	d109      	bne.n	800ffc6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ffb2:	699a      	ldr	r2, [r3, #24]
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	6159      	str	r1, [r3, #20]
 800ffb8:	6282      	str	r2, [r0, #40]	@ 0x28
 800ffba:	b902      	cbnz	r2, 800ffbe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ffbc:	4770      	bx	lr
 800ffbe:	6199      	str	r1, [r3, #24]
 800ffc0:	4770      	bx	lr
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	b13a      	cbz	r2, 800ffd6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ffc6:	699a      	ldr	r2, [r3, #24]
 800ffc8:	428a      	cmp	r2, r1
 800ffca:	d1fa      	bne.n	800ffc2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ffcc:	698a      	ldr	r2, [r1, #24]
 800ffce:	619a      	str	r2, [r3, #24]
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ffd6:	4770      	bx	lr

0800ffd8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ffd8:	b410      	push	{r4}
 800ffda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ffdc:	4604      	mov	r4, r0
 800ffde:	b92b      	cbnz	r3, 800ffec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ffe0:	6803      	ldr	r3, [r0, #0]
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ffea:	4718      	bx	r3
 800ffec:	b941      	cbnz	r1, 8010000 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ffee:	6193      	str	r3, [r2, #24]
 800fff0:	6282      	str	r2, [r0, #40]	@ 0x28
 800fff2:	6154      	str	r4, [r2, #20]
 800fff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	4603      	mov	r3, r0
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d0f9      	beq.n	800fff4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010000:	4299      	cmp	r1, r3
 8010002:	6998      	ldr	r0, [r3, #24]
 8010004:	d1f9      	bne.n	800fffa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8010006:	6190      	str	r0, [r2, #24]
 8010008:	618a      	str	r2, [r1, #24]
 801000a:	e7f2      	b.n	800fff2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801000c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801000c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010010:	461f      	mov	r7, r3
 8010012:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010016:	460d      	mov	r5, r1
 8010018:	4616      	mov	r6, r2
 801001a:	b103      	cbz	r3, 801001e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801001c:	6038      	str	r0, [r7, #0]
 801001e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010020:	b314      	cbz	r4, 8010068 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010022:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010026:	b1eb      	cbz	r3, 8010064 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010028:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801002c:	428d      	cmp	r5, r1
 801002e:	db19      	blt.n	8010064 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010030:	b289      	uxth	r1, r1
 8010032:	8923      	ldrh	r3, [r4, #8]
 8010034:	440b      	add	r3, r1
 8010036:	b21b      	sxth	r3, r3
 8010038:	429d      	cmp	r5, r3
 801003a:	da13      	bge.n	8010064 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801003c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010040:	4296      	cmp	r6, r2
 8010042:	db0f      	blt.n	8010064 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010044:	b292      	uxth	r2, r2
 8010046:	8963      	ldrh	r3, [r4, #10]
 8010048:	4413      	add	r3, r2
 801004a:	b21b      	sxth	r3, r3
 801004c:	429e      	cmp	r6, r3
 801004e:	da09      	bge.n	8010064 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010050:	6823      	ldr	r3, [r4, #0]
 8010052:	1ab2      	subs	r2, r6, r2
 8010054:	1a69      	subs	r1, r5, r1
 8010056:	4620      	mov	r0, r4
 8010058:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 801005c:	b212      	sxth	r2, r2
 801005e:	463b      	mov	r3, r7
 8010060:	b209      	sxth	r1, r1
 8010062:	47c0      	blx	r8
 8010064:	69a4      	ldr	r4, [r4, #24]
 8010066:	e7db      	b.n	8010020 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801006c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801006c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010070:	4c6d      	ldr	r4, [pc, #436]	@ (8010228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010072:	b0a1      	sub	sp, #132	@ 0x84
 8010074:	4606      	mov	r6, r0
 8010076:	6824      	ldr	r4, [r4, #0]
 8010078:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801007a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 801007e:	2400      	movs	r4, #0
 8010080:	9303      	str	r3, [sp, #12]
 8010082:	802c      	strh	r4, [r5, #0]
 8010084:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8010086:	802c      	strh	r4, [r5, #0]
 8010088:	601c      	str	r4, [r3, #0]
 801008a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801008e:	f7ff ffbd 	bl	801000c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010092:	f1b9 0f03 	cmp.w	r9, #3
 8010096:	f340 80c1 	ble.w	801021c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801009a:	4631      	mov	r1, r6
 801009c:	a80c      	add	r0, sp, #48	@ 0x30
 801009e:	f007 fc1f 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80100a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80100a6:	9306      	str	r3, [sp, #24]
 80100a8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80100ac:	9307      	str	r3, [sp, #28]
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	f8d3 a000 	ldr.w	sl, [r3]
 80100b4:	f1ba 0f00 	cmp.w	sl, #0
 80100b8:	f000 80b3 	beq.w	8010222 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80100bc:	4651      	mov	r1, sl
 80100be:	a810      	add	r0, sp, #64	@ 0x40
 80100c0:	f007 fc0e 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80100c4:	2002      	movs	r0, #2
 80100c6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80100ca:	9b01      	ldr	r3, [sp, #4]
 80100cc:	9a06      	ldr	r2, [sp, #24]
 80100ce:	fb91 f1f0 	sdiv	r1, r1, r0
 80100d2:	189d      	adds	r5, r3, r2
 80100d4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80100d8:	9a07      	ldr	r2, [sp, #28]
 80100da:	4419      	add	r1, r3
 80100dc:	9b02      	ldr	r3, [sp, #8]
 80100de:	4413      	add	r3, r2
 80100e0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80100e4:	1a6d      	subs	r5, r5, r1
 80100e6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80100ea:	fb92 f2f0 	sdiv	r2, r2, r0
 80100ee:	440a      	add	r2, r1
 80100f0:	1a9b      	subs	r3, r3, r2
 80100f2:	435b      	muls	r3, r3
 80100f4:	fb05 3505 	mla	r5, r5, r5, r3
 80100f8:	4f4c      	ldr	r7, [pc, #304]	@ (801022c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80100fa:	ac10      	add	r4, sp, #64	@ 0x40
 80100fc:	f1b9 0f0c 	cmp.w	r9, #12
 8010100:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010104:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010108:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801010a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801010c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010114:	f04f 0303 	mov.w	r3, #3
 8010118:	bfd8      	it	le
 801011a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801011e:	f04f 0400 	mov.w	r4, #0
 8010122:	f8cd 9000 	str.w	r9, [sp]
 8010126:	bfcc      	ite	gt
 8010128:	4698      	movgt	r8, r3
 801012a:	fb92 f8f3 	sdivle	r8, r2, r3
 801012e:	1c63      	adds	r3, r4, #1
 8010130:	aa10      	add	r2, sp, #64	@ 0x40
 8010132:	f004 0401 	and.w	r4, r4, #1
 8010136:	f04f 0b00 	mov.w	fp, #0
 801013a:	9308      	str	r3, [sp, #32]
 801013c:	9b00      	ldr	r3, [sp, #0]
 801013e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010142:	fb93 f3f8 	sdiv	r3, r3, r8
 8010146:	3404      	adds	r4, #4
 8010148:	b29b      	uxth	r3, r3
 801014a:	9304      	str	r3, [sp, #16]
 801014c:	9a04      	ldr	r2, [sp, #16]
 801014e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010152:	fb13 f302 	smulbb	r3, r3, r2
 8010156:	9a01      	ldr	r2, [sp, #4]
 8010158:	b29b      	uxth	r3, r3
 801015a:	1899      	adds	r1, r3, r2
 801015c:	9305      	str	r3, [sp, #20]
 801015e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010162:	b209      	sxth	r1, r1
 8010164:	4299      	cmp	r1, r3
 8010166:	db4d      	blt.n	8010204 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010168:	8932      	ldrh	r2, [r6, #8]
 801016a:	4413      	add	r3, r2
 801016c:	b21b      	sxth	r3, r3
 801016e:	4299      	cmp	r1, r3
 8010170:	da48      	bge.n	8010204 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010172:	9b04      	ldr	r3, [sp, #16]
 8010174:	6827      	ldr	r7, [r4, #0]
 8010176:	fb17 f703 	smulbb	r7, r7, r3
 801017a:	9b02      	ldr	r3, [sp, #8]
 801017c:	b2bf      	uxth	r7, r7
 801017e:	18fa      	adds	r2, r7, r3
 8010180:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010184:	b212      	sxth	r2, r2
 8010186:	429a      	cmp	r2, r3
 8010188:	db3c      	blt.n	8010204 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801018a:	8970      	ldrh	r0, [r6, #10]
 801018c:	4403      	add	r3, r0
 801018e:	b21b      	sxth	r3, r3
 8010190:	429a      	cmp	r2, r3
 8010192:	da37      	bge.n	8010204 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010194:	2300      	movs	r3, #0
 8010196:	4630      	mov	r0, r6
 8010198:	930b      	str	r3, [sp, #44]	@ 0x2c
 801019a:	ab0b      	add	r3, sp, #44	@ 0x2c
 801019c:	f7ff ff36 	bl	801000c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80101a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101a2:	b37a      	cbz	r2, 8010204 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101a4:	4552      	cmp	r2, sl
 80101a6:	d02d      	beq.n	8010204 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101a8:	4611      	mov	r1, r2
 80101aa:	a80e      	add	r0, sp, #56	@ 0x38
 80101ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80101ae:	f007 fb97 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80101b2:	f04f 0e02 	mov.w	lr, #2
 80101b6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80101ba:	9a06      	ldr	r2, [sp, #24]
 80101bc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80101c0:	9b01      	ldr	r3, [sp, #4]
 80101c2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80101c6:	4413      	add	r3, r2
 80101c8:	9a07      	ldr	r2, [sp, #28]
 80101ca:	fb91 f1fe 	sdiv	r1, r1, lr
 80101ce:	fb9c fcfe 	sdiv	ip, ip, lr
 80101d2:	4401      	add	r1, r0
 80101d4:	1a58      	subs	r0, r3, r1
 80101d6:	9b02      	ldr	r3, [sp, #8]
 80101d8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80101dc:	4413      	add	r3, r2
 80101de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101e0:	448c      	add	ip, r1
 80101e2:	eba3 030c 	sub.w	r3, r3, ip
 80101e6:	435b      	muls	r3, r3
 80101e8:	fb00 3300 	mla	r3, r0, r0, r3
 80101ec:	42ab      	cmp	r3, r5
 80101ee:	d208      	bcs.n	8010202 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80101f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101f2:	461d      	mov	r5, r3
 80101f4:	9803      	ldr	r0, [sp, #12]
 80101f6:	6001      	str	r1, [r0, #0]
 80101f8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80101fa:	9805      	ldr	r0, [sp, #20]
 80101fc:	8008      	strh	r0, [r1, #0]
 80101fe:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010200:	800f      	strh	r7, [r1, #0]
 8010202:	4692      	mov	sl, r2
 8010204:	f10b 0b01 	add.w	fp, fp, #1
 8010208:	3408      	adds	r4, #8
 801020a:	f1bb 0f04 	cmp.w	fp, #4
 801020e:	d19d      	bne.n	801014c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010210:	9b00      	ldr	r3, [sp, #0]
 8010212:	9c08      	ldr	r4, [sp, #32]
 8010214:	444b      	add	r3, r9
 8010216:	4544      	cmp	r4, r8
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	d188      	bne.n	801012e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801021c:	b021      	add	sp, #132	@ 0x84
 801021e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010222:	f04f 35ff 	mov.w	r5, #4294967295
 8010226:	e767      	b.n	80100f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010228:	20027dc0 	.word	0x20027dc0
 801022c:	08029dd4 	.word	0x08029dd4

08010230 <_ZN8touchgfx4RectaNERKS0_>:
 8010230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010234:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010238:	888c      	ldrh	r4, [r1, #4]
 801023a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801023e:	443c      	add	r4, r7
 8010240:	b2a4      	uxth	r4, r4
 8010242:	fa0f f884 	sxth.w	r8, r4
 8010246:	45c1      	cmp	r9, r8
 8010248:	da2f      	bge.n	80102aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801024a:	8882      	ldrh	r2, [r0, #4]
 801024c:	444a      	add	r2, r9
 801024e:	b292      	uxth	r2, r2
 8010250:	fa0f fe82 	sxth.w	lr, r2
 8010254:	4577      	cmp	r7, lr
 8010256:	da28      	bge.n	80102aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010258:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801025c:	88cb      	ldrh	r3, [r1, #6]
 801025e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010262:	442b      	add	r3, r5
 8010264:	b21b      	sxth	r3, r3
 8010266:	429e      	cmp	r6, r3
 8010268:	da1f      	bge.n	80102aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801026a:	88c3      	ldrh	r3, [r0, #6]
 801026c:	4433      	add	r3, r6
 801026e:	b29b      	uxth	r3, r3
 8010270:	fa0f fc83 	sxth.w	ip, r3
 8010274:	4565      	cmp	r5, ip
 8010276:	da18      	bge.n	80102aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010278:	454f      	cmp	r7, r9
 801027a:	bfb8      	it	lt
 801027c:	464f      	movlt	r7, r9
 801027e:	42b5      	cmp	r5, r6
 8010280:	bfb8      	it	lt
 8010282:	4635      	movlt	r5, r6
 8010284:	45f0      	cmp	r8, lr
 8010286:	bfd8      	it	le
 8010288:	4622      	movle	r2, r4
 801028a:	1bd2      	subs	r2, r2, r7
 801028c:	8082      	strh	r2, [r0, #4]
 801028e:	884a      	ldrh	r2, [r1, #2]
 8010290:	88c9      	ldrh	r1, [r1, #6]
 8010292:	8007      	strh	r7, [r0, #0]
 8010294:	440a      	add	r2, r1
 8010296:	8045      	strh	r5, [r0, #2]
 8010298:	b292      	uxth	r2, r2
 801029a:	b211      	sxth	r1, r2
 801029c:	458c      	cmp	ip, r1
 801029e:	bfa8      	it	ge
 80102a0:	4613      	movge	r3, r2
 80102a2:	1b5b      	subs	r3, r3, r5
 80102a4:	80c3      	strh	r3, [r0, #6]
 80102a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102aa:	2300      	movs	r3, #0
 80102ac:	8003      	strh	r3, [r0, #0]
 80102ae:	8043      	strh	r3, [r0, #2]
 80102b0:	8083      	strh	r3, [r0, #4]
 80102b2:	80c3      	strh	r3, [r0, #6]
 80102b4:	e7f7      	b.n	80102a6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080102b6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80102b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	dd06      	ble.n	80102cc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80102be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80102c2:	2800      	cmp	r0, #0
 80102c4:	bfcc      	ite	gt
 80102c6:	2000      	movgt	r0, #0
 80102c8:	2001      	movle	r0, #1
 80102ca:	4770      	bx	lr
 80102cc:	2001      	movs	r0, #1
 80102ce:	4770      	bx	lr

080102d0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	2300      	movs	r3, #0
 80102d6:	4604      	mov	r4, r0
 80102d8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80102da:	8003      	strh	r3, [r0, #0]
 80102dc:	8043      	strh	r3, [r0, #2]
 80102de:	8083      	strh	r3, [r0, #4]
 80102e0:	80c3      	strh	r3, [r0, #6]
 80102e2:	2d00      	cmp	r5, #0
 80102e4:	d040      	beq.n	8010368 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80102e6:	1d28      	adds	r0, r5, #4
 80102e8:	f7ff ffe5 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80102ec:	b988      	cbnz	r0, 8010312 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80102ee:	4620      	mov	r0, r4
 80102f0:	f7ff ffe1 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80102f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80102f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80102fc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010300:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010304:	b138      	cbz	r0, 8010316 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8010306:	8022      	strh	r2, [r4, #0]
 8010308:	8063      	strh	r3, [r4, #2]
 801030a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801030e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010312:	69ad      	ldr	r5, [r5, #24]
 8010314:	e7e5      	b.n	80102e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8010316:	f9b4 0000 	ldrsh.w	r0, [r4]
 801031a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801031e:	4290      	cmp	r0, r2
 8010320:	4607      	mov	r7, r0
 8010322:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8010326:	460e      	mov	r6, r1
 8010328:	bfa8      	it	ge
 801032a:	4617      	movge	r7, r2
 801032c:	4299      	cmp	r1, r3
 801032e:	4472      	add	r2, lr
 8010330:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010334:	bfa8      	it	ge
 8010336:	461e      	movge	r6, r3
 8010338:	4440      	add	r0, r8
 801033a:	4471      	add	r1, lr
 801033c:	4463      	add	r3, ip
 801033e:	b200      	sxth	r0, r0
 8010340:	8027      	strh	r7, [r4, #0]
 8010342:	b212      	sxth	r2, r2
 8010344:	8066      	strh	r6, [r4, #2]
 8010346:	b209      	sxth	r1, r1
 8010348:	b21b      	sxth	r3, r3
 801034a:	4290      	cmp	r0, r2
 801034c:	bfac      	ite	ge
 801034e:	ebc7 0200 	rsbge	r2, r7, r0
 8010352:	ebc7 0202 	rsblt	r2, r7, r2
 8010356:	4299      	cmp	r1, r3
 8010358:	bfac      	ite	ge
 801035a:	ebc6 0301 	rsbge	r3, r6, r1
 801035e:	ebc6 0303 	rsblt	r3, r6, r3
 8010362:	80a2      	strh	r2, [r4, #4]
 8010364:	80e3      	strh	r3, [r4, #6]
 8010366:	e7d4      	b.n	8010312 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010368:	4620      	mov	r0, r4
 801036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801036e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801036e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010372:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8010376:	b383      	cbz	r3, 80103da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010378:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801037a:	b374      	cbz	r4, 80103da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801037c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010380:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010384:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010388:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801038c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010390:	b303      	cbz	r3, 80103d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010392:	4668      	mov	r0, sp
 8010394:	1d21      	adds	r1, r4, #4
 8010396:	f8ad 5000 	strh.w	r5, [sp]
 801039a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801039e:	f8ad 7004 	strh.w	r7, [sp, #4]
 80103a2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80103a6:	f7ff ff43 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 80103aa:	4668      	mov	r0, sp
 80103ac:	f7ff ff83 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80103b0:	b980      	cbnz	r0, 80103d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80103b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80103b6:	4669      	mov	r1, sp
 80103b8:	88a2      	ldrh	r2, [r4, #4]
 80103ba:	4620      	mov	r0, r4
 80103bc:	1a9b      	subs	r3, r3, r2
 80103be:	88e2      	ldrh	r2, [r4, #6]
 80103c0:	f8ad 3000 	strh.w	r3, [sp]
 80103c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80103c8:	1a9b      	subs	r3, r3, r2
 80103ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80103ce:	6823      	ldr	r3, [r4, #0]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	4798      	blx	r3
 80103d4:	69a4      	ldr	r4, [r4, #24]
 80103d6:	2c00      	cmp	r4, #0
 80103d8:	d1d8      	bne.n	801038c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80103da:	b002      	add	sp, #8
 80103dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80103e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103e2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80103e6:	460d      	mov	r5, r1
 80103e8:	4616      	mov	r6, r2
 80103ea:	b323      	cbz	r3, 8010436 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80103ec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80103ee:	b314      	cbz	r4, 8010436 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80103f0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80103f4:	b1eb      	cbz	r3, 8010432 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80103f6:	6828      	ldr	r0, [r5, #0]
 80103f8:	466b      	mov	r3, sp
 80103fa:	6869      	ldr	r1, [r5, #4]
 80103fc:	c303      	stmia	r3!, {r0, r1}
 80103fe:	4668      	mov	r0, sp
 8010400:	1d21      	adds	r1, r4, #4
 8010402:	f7ff ff15 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8010406:	4668      	mov	r0, sp
 8010408:	f7ff ff55 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801040c:	b988      	cbnz	r0, 8010432 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801040e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010412:	4669      	mov	r1, sp
 8010414:	88a2      	ldrh	r2, [r4, #4]
 8010416:	4620      	mov	r0, r4
 8010418:	1a9b      	subs	r3, r3, r2
 801041a:	88e2      	ldrh	r2, [r4, #6]
 801041c:	f8ad 3000 	strh.w	r3, [sp]
 8010420:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	4632      	mov	r2, r6
 8010428:	f8ad 3002 	strh.w	r3, [sp, #2]
 801042c:	6823      	ldr	r3, [r4, #0]
 801042e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010430:	4798      	blx	r3
 8010432:	69a4      	ldr	r4, [r4, #24]
 8010434:	e7db      	b.n	80103ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010436:	b002      	add	sp, #8
 8010438:	bd70      	pop	{r4, r5, r6, pc}

0801043a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801043a:	6803      	ldr	r3, [r0, #0]
 801043c:	b513      	push	{r0, r1, r4, lr}
 801043e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8010442:	2300      	movs	r3, #0
 8010444:	e9cd 3300 	strd	r3, r3, [sp]
 8010448:	466b      	mov	r3, sp
 801044a:	47a0      	blx	r4
 801044c:	b002      	add	sp, #8
 801044e:	bd10      	pop	{r4, pc}

08010450 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010450:	2301      	movs	r3, #1
 8010452:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010456:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801045a:	4770      	bx	lr

0801045c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801045c:	2301      	movs	r3, #1
 801045e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010462:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010466:	4770      	bx	lr

08010468 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010468:	6843      	ldr	r3, [r0, #4]
 801046a:	2201      	movs	r2, #1
 801046c:	725a      	strb	r2, [r3, #9]
 801046e:	6840      	ldr	r0, [r0, #4]
 8010470:	6803      	ldr	r3, [r0, #0]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	4718      	bx	r3

08010476 <_ZN8touchgfx3HAL8flushDMAEv>:
 8010476:	6840      	ldr	r0, [r0, #4]
 8010478:	6803      	ldr	r3, [r0, #0]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	4718      	bx	r3

0801047e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801047e:	b530      	push	{r4, r5, lr}
 8010480:	b08b      	sub	sp, #44	@ 0x2c
 8010482:	6804      	ldr	r4, [r0, #0]
 8010484:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010488:	9509      	str	r5, [sp, #36]	@ 0x24
 801048a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801048e:	9508      	str	r5, [sp, #32]
 8010490:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010494:	9507      	str	r5, [sp, #28]
 8010496:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801049a:	9506      	str	r5, [sp, #24]
 801049c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80104a0:	9505      	str	r5, [sp, #20]
 80104a2:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80104a6:	9504      	str	r5, [sp, #16]
 80104a8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80104ac:	9503      	str	r5, [sp, #12]
 80104ae:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80104b2:	9502      	str	r5, [sp, #8]
 80104b4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80104b8:	e9cd 3500 	strd	r3, r5, [sp]
 80104bc:	4613      	mov	r3, r2
 80104be:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80104c0:	2200      	movs	r2, #0
 80104c2:	47a0      	blx	r4
 80104c4:	b00b      	add	sp, #44	@ 0x2c
 80104c6:	bd30      	pop	{r4, r5, pc}

080104c8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80104c8:	4b04      	ldr	r3, [pc, #16]	@ (80104dc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	b123      	cbz	r3, 80104d8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80104ce:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80104d2:	f080 0001 	eor.w	r0, r0, #1
 80104d6:	4770      	bx	lr
 80104d8:	2001      	movs	r0, #1
 80104da:	4770      	bx	lr
 80104dc:	20027dbe 	.word	0x20027dbe

080104e0 <_ZN8touchgfx3HAL8endFrameEv>:
 80104e0:	b510      	push	{r4, lr}
 80104e2:	4604      	mov	r4, r0
 80104e4:	6840      	ldr	r0, [r0, #4]
 80104e6:	6803      	ldr	r3, [r0, #0]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	4798      	blx	r3
 80104ec:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80104f0:	b113      	cbz	r3, 80104f8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80104f2:	2301      	movs	r3, #1
 80104f4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80104f8:	bd10      	pop	{r4, pc}

080104fa <_ZN8touchgfx3HAL10initializeEv>:
 80104fa:	b510      	push	{r4, lr}
 80104fc:	4604      	mov	r4, r0
 80104fe:	f7f1 faeb 	bl	8001ad8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010502:	f7f0 fb73 	bl	8000bec <_ZN8touchgfx4GPIO4initEv>
 8010506:	6860      	ldr	r0, [r4, #4]
 8010508:	6803      	ldr	r3, [r0, #0]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	4798      	blx	r3
 801050e:	68e0      	ldr	r0, [r4, #12]
 8010510:	6803      	ldr	r3, [r0, #0]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	4798      	blx	r3
 8010516:	6823      	ldr	r3, [r4, #0]
 8010518:	4620      	mov	r0, r4
 801051a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801051c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010520:	4718      	bx	r3
	...

08010524 <_ZN8touchgfx3HAL4tickEv>:
 8010524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010526:	6803      	ldr	r3, [r0, #0]
 8010528:	4604      	mov	r4, r0
 801052a:	4d5b      	ldr	r5, [pc, #364]	@ (8010698 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801052c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010530:	4798      	blx	r3
 8010532:	2800      	cmp	r0, #0
 8010534:	f000 8095 	beq.w	8010662 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010538:	2001      	movs	r0, #1
 801053a:	2600      	movs	r6, #0
 801053c:	f7f0 fabc 	bl	8000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010540:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010544:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8010548:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801054c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010550:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010554:	b133      	cbz	r3, 8010564 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	4620      	mov	r0, r4
 801055a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801055e:	4798      	blx	r3
 8010560:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010564:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8010568:	2601      	movs	r6, #1
 801056a:	6862      	ldr	r2, [r4, #4]
 801056c:	f083 0301 	eor.w	r3, r3, #1
 8010570:	702e      	strb	r6, [r5, #0]
 8010572:	7253      	strb	r3, [r2, #9]
 8010574:	f006 f82e 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 8010578:	6803      	ldr	r3, [r0, #0]
 801057a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801057c:	4798      	blx	r3
 801057e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010582:	b90b      	cbnz	r3, 8010588 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010584:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8010588:	f006 f824 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 801058c:	6803      	ldr	r3, [r0, #0]
 801058e:	695b      	ldr	r3, [r3, #20]
 8010590:	4798      	blx	r3
 8010592:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010594:	6803      	ldr	r3, [r0, #0]
 8010596:	691b      	ldr	r3, [r3, #16]
 8010598:	4798      	blx	r3
 801059a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801059e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80105a2:	3b01      	subs	r3, #1
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80105aa:	b10a      	cbz	r2, 80105b0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1eb      	bne.n	8010588 <_ZN8touchgfx3HAL4tickEv+0x64>
 80105b0:	4a3a      	ldr	r2, [pc, #232]	@ (801069c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80105b2:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80105b6:	7813      	ldrb	r3, [r2, #0]
 80105b8:	3301      	adds	r3, #1
 80105ba:	b25b      	sxtb	r3, r3
 80105bc:	4299      	cmp	r1, r3
 80105be:	7013      	strb	r3, [r2, #0]
 80105c0:	dc10      	bgt.n	80105e4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80105c2:	2300      	movs	r3, #0
 80105c4:	68e0      	ldr	r0, [r4, #12]
 80105c6:	a902      	add	r1, sp, #8
 80105c8:	7013      	strb	r3, [r2, #0]
 80105ca:	aa03      	add	r2, sp, #12
 80105cc:	6803      	ldr	r3, [r0, #0]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	4798      	blx	r3
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d050      	beq.n	801067a <_ZN8touchgfx3HAL4tickEv+0x156>
 80105d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80105dc:	4620      	mov	r0, r4
 80105de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80105e2:	4798      	blx	r3
 80105e4:	2300      	movs	r3, #0
 80105e6:	6960      	ldr	r0, [r4, #20]
 80105e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80105ec:	b158      	cbz	r0, 8010606 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80105ee:	6803      	ldr	r3, [r0, #0]
 80105f0:	f10d 0107 	add.w	r1, sp, #7
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	4798      	blx	r3
 80105f8:	b128      	cbz	r0, 8010606 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80105fa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80105fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010600:	6803      	ldr	r3, [r0, #0]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	4798      	blx	r3
 8010606:	f104 001c 	add.w	r0, r4, #28
 801060a:	f017 fe5b 	bl	80282c4 <_ZN8touchgfx8Gestures4tickEv>
 801060e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8010612:	b30b      	cbz	r3, 8010658 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010614:	6920      	ldr	r0, [r4, #16]
 8010616:	6803      	ldr	r3, [r0, #0]
 8010618:	691b      	ldr	r3, [r3, #16]
 801061a:	4798      	blx	r3
 801061c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801061e:	4606      	mov	r6, r0
 8010620:	b903      	cbnz	r3, 8010624 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010622:	6760      	str	r0, [r4, #116]	@ 0x74
 8010624:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010626:	4a1e      	ldr	r2, [pc, #120]	@ (80106a0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010628:	1af3      	subs	r3, r6, r3
 801062a:	4293      	cmp	r3, r2
 801062c:	d914      	bls.n	8010658 <_ZN8touchgfx3HAL4tickEv+0x134>
 801062e:	6920      	ldr	r0, [r4, #16]
 8010630:	6803      	ldr	r3, [r0, #0]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	4798      	blx	r3
 8010636:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010638:	2264      	movs	r2, #100	@ 0x64
 801063a:	1af3      	subs	r3, r6, r3
 801063c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010640:	fbb0 f0f3 	udiv	r0, r0, r3
 8010644:	2800      	cmp	r0, #0
 8010646:	dc1d      	bgt.n	8010684 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010648:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 801064c:	6920      	ldr	r0, [r4, #16]
 801064e:	2100      	movs	r1, #0
 8010650:	6803      	ldr	r3, [r0, #0]
 8010652:	69db      	ldr	r3, [r3, #28]
 8010654:	4798      	blx	r3
 8010656:	6766      	str	r6, [r4, #116]	@ 0x74
 8010658:	f005 ffbc 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 801065c:	6803      	ldr	r3, [r0, #0]
 801065e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010660:	4798      	blx	r3
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	4620      	mov	r0, r4
 8010666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801066a:	4798      	blx	r3
 801066c:	2001      	movs	r0, #1
 801066e:	f7f0 fa53 	bl	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010672:	2300      	movs	r3, #0
 8010674:	702b      	strb	r3, [r5, #0]
 8010676:	b004      	add	sp, #16
 8010678:	bd70      	pop	{r4, r5, r6, pc}
 801067a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801067e:	4620      	mov	r0, r4
 8010680:	4798      	blx	r3
 8010682:	e7af      	b.n	80105e4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010684:	2863      	cmp	r0, #99	@ 0x63
 8010686:	bfcb      	itete	gt
 8010688:	2300      	movgt	r3, #0
 801068a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801068e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8010692:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8010696:	e7d9      	b.n	801064c <_ZN8touchgfx3HAL4tickEv+0x128>
 8010698:	20027dc4 	.word	0x20027dc4
 801069c:	20027dc5 	.word	0x20027dc5
 80106a0:	05f5e100 	.word	0x05f5e100

080106a4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80106a4:	b510      	push	{r4, lr}
 80106a6:	4604      	mov	r4, r0
 80106a8:	f7f1 fa46 	bl	8001b38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80106ac:	2200      	movs	r2, #0
 80106ae:	6863      	ldr	r3, [r4, #4]
 80106b0:	729a      	strb	r2, [r3, #10]
 80106b2:	bd10      	pop	{r4, pc}

080106b4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80106b4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80106b6:	301c      	adds	r0, #28
 80106b8:	f017 be02 	b.w	80282c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080106bc <_ZN8touchgfx3HAL5touchEll>:
 80106bc:	b530      	push	{r4, r5, lr}
 80106be:	b087      	sub	sp, #28
 80106c0:	4604      	mov	r4, r0
 80106c2:	a804      	add	r0, sp, #16
 80106c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80106c8:	f005 fd96 	bl	80161f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80106cc:	9b04      	ldr	r3, [sp, #16]
 80106ce:	a906      	add	r1, sp, #24
 80106d0:	a803      	add	r0, sp, #12
 80106d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106d6:	9b05      	ldr	r3, [sp, #20]
 80106d8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80106dc:	f005 fdde 	bl	801629c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80106e0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80106e4:	f104 001c 	add.w	r0, r4, #28
 80106e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80106ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80106f0:	b189      	cbz	r1, 8010716 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80106f2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	4613      	mov	r3, r2
 80106fa:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80106fe:	462a      	mov	r2, r5
 8010700:	f017 fdee 	bl	80282e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010704:	b128      	cbz	r0, 8010712 <_ZN8touchgfx3HAL5touchEll+0x56>
 8010706:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801070a:	6623      	str	r3, [r4, #96]	@ 0x60
 801070c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010710:	6663      	str	r3, [r4, #100]	@ 0x64
 8010712:	b007      	add	sp, #28
 8010714:	bd30      	pop	{r4, r5, pc}
 8010716:	f017 fe23 	bl	8028360 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801071a:	2301      	movs	r3, #1
 801071c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010720:	e7f1      	b.n	8010706 <_ZN8touchgfx3HAL5touchEll+0x4a>

08010722 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010722:	b510      	push	{r4, lr}
 8010724:	2b00      	cmp	r3, #0
 8010726:	d046      	beq.n	80107b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010728:	ea81 0002 	eor.w	r0, r1, r2
 801072c:	07c4      	lsls	r4, r0, #31
 801072e:	d508      	bpl.n	8010742 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010730:	440b      	add	r3, r1
 8010732:	3a01      	subs	r2, #1
 8010734:	428b      	cmp	r3, r1
 8010736:	d93e      	bls.n	80107b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010738:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801073c:	f801 0b01 	strb.w	r0, [r1], #1
 8010740:	e7f8      	b.n	8010734 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010742:	07d0      	lsls	r0, r2, #31
 8010744:	bf42      	ittt	mi
 8010746:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801074a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801074e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010752:	2b01      	cmp	r3, #1
 8010754:	d911      	bls.n	801077a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010756:	ea81 0402 	eor.w	r4, r1, r2
 801075a:	4610      	mov	r0, r2
 801075c:	07a4      	lsls	r4, r4, #30
 801075e:	d022      	beq.n	80107a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010760:	f023 0401 	bic.w	r4, r3, #1
 8010764:	440c      	add	r4, r1
 8010766:	428c      	cmp	r4, r1
 8010768:	4602      	mov	r2, r0
 801076a:	d904      	bls.n	8010776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801076c:	8812      	ldrh	r2, [r2, #0]
 801076e:	3002      	adds	r0, #2
 8010770:	f821 2b02 	strh.w	r2, [r1], #2
 8010774:	e7f7      	b.n	8010766 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	f023 0003 	bic.w	r0, r3, #3
 801077e:	4408      	add	r0, r1
 8010780:	4288      	cmp	r0, r1
 8010782:	4614      	mov	r4, r2
 8010784:	d904      	bls.n	8010790 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010786:	6824      	ldr	r4, [r4, #0]
 8010788:	3204      	adds	r2, #4
 801078a:	f841 4b04 	str.w	r4, [r1], #4
 801078e:	e7f7      	b.n	8010780 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010790:	f003 0303 	and.w	r3, r3, #3
 8010794:	3a01      	subs	r2, #1
 8010796:	440b      	add	r3, r1
 8010798:	428b      	cmp	r3, r1
 801079a:	d90c      	bls.n	80107b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801079c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80107a0:	f801 0b01 	strb.w	r0, [r1], #1
 80107a4:	e7f8      	b.n	8010798 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80107a6:	0790      	lsls	r0, r2, #30
 80107a8:	d0e7      	beq.n	801077a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80107aa:	f832 0b02 	ldrh.w	r0, [r2], #2
 80107ae:	3b02      	subs	r3, #2
 80107b0:	f821 0b02 	strh.w	r0, [r1], #2
 80107b4:	e7e1      	b.n	801077a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80107b6:	2001      	movs	r0, #1
 80107b8:	bd10      	pop	{r4, pc}

080107ba <_ZN8touchgfx3HAL7noTouchEv>:
 80107ba:	b510      	push	{r4, lr}
 80107bc:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80107c0:	4604      	mov	r4, r0
 80107c2:	b153      	cbz	r3, 80107da <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80107c4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80107c8:	2101      	movs	r1, #1
 80107ca:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80107ce:	301c      	adds	r0, #28
 80107d0:	f017 fdc6 	bl	8028360 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80107d4:	2300      	movs	r3, #0
 80107d6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80107da:	bd10      	pop	{r4, pc}

080107dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80107dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107e0:	b085      	sub	sp, #20
 80107e2:	4604      	mov	r4, r0
 80107e4:	2000      	movs	r0, #0
 80107e6:	4699      	mov	r9, r3
 80107e8:	ad04      	add	r5, sp, #16
 80107ea:	460f      	mov	r7, r1
 80107ec:	4690      	mov	r8, r2
 80107ee:	f845 0d04 	str.w	r0, [r5, #-4]!
 80107f2:	69a0      	ldr	r0, [r4, #24]
 80107f4:	6806      	ldr	r6, [r0, #0]
 80107f6:	9501      	str	r5, [sp, #4]
 80107f8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80107fc:	9500      	str	r5, [sp, #0]
 80107fe:	6835      	ldr	r5, [r6, #0]
 8010800:	47a8      	blx	r5
 8010802:	4d10      	ldr	r5, [pc, #64]	@ (8010844 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010804:	4606      	mov	r6, r0
 8010806:	f8a5 9000 	strh.w	r9, [r5]
 801080a:	f7f5 f9c3 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 801080e:	6803      	ldr	r3, [r0, #0]
 8010810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010812:	4798      	blx	r3
 8010814:	b128      	cbz	r0, 8010822 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010816:	2801      	cmp	r0, #1
 8010818:	d00b      	beq.n	8010832 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801081a:	4630      	mov	r0, r6
 801081c:	b005      	add	sp, #20
 801081e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010822:	882b      	ldrh	r3, [r5, #0]
 8010824:	fb08 7203 	mla	r2, r8, r3, r7
 8010828:	9b03      	ldr	r3, [sp, #12]
 801082a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801082e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010830:	e7f3      	b.n	801081a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010832:	882a      	ldrh	r2, [r5, #0]
 8010834:	9b03      	ldr	r3, [sp, #12]
 8010836:	fb08 7202 	mla	r2, r8, r2, r7
 801083a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801083e:	1a9a      	subs	r2, r3, r2
 8010840:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010842:	e7ea      	b.n	801081a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010844:	20027dba 	.word	0x20027dba

08010848 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801084a:	b08b      	sub	sp, #44	@ 0x2c
 801084c:	4617      	mov	r7, r2
 801084e:	4604      	mov	r4, r0
 8010850:	460e      	mov	r6, r1
 8010852:	461d      	mov	r5, r3
 8010854:	f7f5 f99e 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010858:	6803      	ldr	r3, [r0, #0]
 801085a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801085c:	4798      	blx	r3
 801085e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010862:	9007      	str	r0, [sp, #28]
 8010864:	4631      	mov	r1, r6
 8010866:	6822      	ldr	r2, [r4, #0]
 8010868:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801086c:	4b0c      	ldr	r3, [pc, #48]	@ (80108a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801086e:	4620      	mov	r0, r4
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	9306      	str	r3, [sp, #24]
 8010874:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010878:	9305      	str	r3, [sp, #20]
 801087a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801087e:	9304      	str	r3, [sp, #16]
 8010880:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010884:	9303      	str	r3, [sp, #12]
 8010886:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801088a:	9302      	str	r3, [sp, #8]
 801088c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010890:	e9cd 5300 	strd	r5, r3, [sp]
 8010894:	463b      	mov	r3, r7
 8010896:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8010898:	2200      	movs	r2, #0
 801089a:	47a8      	blx	r5
 801089c:	b00b      	add	sp, #44	@ 0x2c
 801089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108a0:	20027dba 	.word	0x20027dba

080108a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80108a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108a8:	4698      	mov	r8, r3
 80108aa:	6803      	ldr	r3, [r0, #0]
 80108ac:	b08b      	sub	sp, #44	@ 0x2c
 80108ae:	4617      	mov	r7, r2
 80108b0:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80108b2:	460e      	mov	r6, r1
 80108b4:	4b13      	ldr	r3, [pc, #76]	@ (8010904 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80108b6:	4604      	mov	r4, r0
 80108b8:	f8b3 9000 	ldrh.w	r9, [r3]
 80108bc:	f7f5 f96a 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 80108c0:	6803      	ldr	r3, [r0, #0]
 80108c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108c4:	4798      	blx	r3
 80108c6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80108ca:	2200      	movs	r2, #0
 80108cc:	4631      	mov	r1, r6
 80108ce:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80108d2:	2302      	movs	r3, #2
 80108d4:	4620      	mov	r0, r4
 80108d6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80108da:	2301      	movs	r3, #1
 80108dc:	9305      	str	r3, [sp, #20]
 80108de:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80108e2:	9304      	str	r3, [sp, #16]
 80108e4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80108e8:	9303      	str	r3, [sp, #12]
 80108ea:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80108ee:	9302      	str	r3, [sp, #8]
 80108f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80108f4:	e9cd 8300 	strd	r8, r3, [sp]
 80108f8:	463b      	mov	r3, r7
 80108fa:	47a8      	blx	r5
 80108fc:	b00b      	add	sp, #44	@ 0x2c
 80108fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010902:	bf00      	nop
 8010904:	20027dba 	.word	0x20027dba

08010908 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801090c:	4698      	mov	r8, r3
 801090e:	6803      	ldr	r3, [r0, #0]
 8010910:	b087      	sub	sp, #28
 8010912:	460e      	mov	r6, r1
 8010914:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8010916:	4617      	mov	r7, r2
 8010918:	4b0f      	ldr	r3, [pc, #60]	@ (8010958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801091a:	4604      	mov	r4, r0
 801091c:	f8b3 9000 	ldrh.w	r9, [r3]
 8010920:	f7f5 f938 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010924:	6803      	ldr	r3, [r0, #0]
 8010926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010928:	4798      	blx	r3
 801092a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801092e:	463a      	mov	r2, r7
 8010930:	4631      	mov	r1, r6
 8010932:	f8cd 900c 	str.w	r9, [sp, #12]
 8010936:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801093a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801093e:	4620      	mov	r0, r4
 8010940:	9302      	str	r3, [sp, #8]
 8010942:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8010946:	9301      	str	r3, [sp, #4]
 8010948:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801094c:	9300      	str	r3, [sp, #0]
 801094e:	4643      	mov	r3, r8
 8010950:	47a8      	blx	r5
 8010952:	b007      	add	sp, #28
 8010954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010958:	20027dba 	.word	0x20027dba

0801095c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	4604      	mov	r4, r0
 8010962:	b08f      	sub	sp, #60	@ 0x3c
 8010964:	4610      	mov	r0, r2
 8010966:	460d      	mov	r5, r1
 8010968:	4691      	mov	r9, r2
 801096a:	461e      	mov	r6, r3
 801096c:	f009 f9da 	bl	8019d24 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010970:	2800      	cmp	r0, #0
 8010972:	f000 809d 	beq.w	8010ab0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010976:	6823      	ldr	r3, [r4, #0]
 8010978:	4620      	mov	r0, r4
 801097a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8010b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801097e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8010982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010984:	4798      	blx	r3
 8010986:	6823      	ldr	r3, [r4, #0]
 8010988:	4620      	mov	r0, r4
 801098a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8010b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801098e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010990:	4798      	blx	r3
 8010992:	f8bb 3000 	ldrh.w	r3, [fp]
 8010996:	4f5c      	ldr	r7, [pc, #368]	@ (8010b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010998:	9301      	str	r3, [sp, #4]
 801099a:	f8ba 3000 	ldrh.w	r3, [sl]
 801099e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80109a2:	4640      	mov	r0, r8
 80109a4:	9302      	str	r3, [sp, #8]
 80109a6:	883b      	ldrh	r3, [r7, #0]
 80109a8:	9303      	str	r3, [sp, #12]
 80109aa:	4b58      	ldr	r3, [pc, #352]	@ (8010b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80109ac:	881a      	ldrh	r2, [r3, #0]
 80109ae:	9305      	str	r3, [sp, #20]
 80109b0:	9204      	str	r2, [sp, #16]
 80109b2:	f009 fa4b 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80109b6:	8038      	strh	r0, [r7, #0]
 80109b8:	4640      	mov	r0, r8
 80109ba:	f009 fa7b 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80109be:	9b05      	ldr	r3, [sp, #20]
 80109c0:	b280      	uxth	r0, r0
 80109c2:	8018      	strh	r0, [r3, #0]
 80109c4:	4b52      	ldr	r3, [pc, #328]	@ (8010b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d174      	bne.n	8010ab6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80109cc:	883b      	ldrh	r3, [r7, #0]
 80109ce:	f8aa 0000 	strh.w	r0, [sl]
 80109d2:	f8ab 3000 	strh.w	r3, [fp]
 80109d6:	4648      	mov	r0, r9
 80109d8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80109dc:	f009 f9a2 	bl	8019d24 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80109e0:	2200      	movs	r2, #0
 80109e2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80109e6:	4611      	mov	r1, r2
 80109e8:	4628      	mov	r0, r5
 80109ea:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80109ee:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80109f2:	f7f5 feea 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
 80109f6:	2301      	movs	r3, #1
 80109f8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80109fc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010a00:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	dd5c      	ble.n	8010ac2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010a08:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	dd58      	ble.n	8010ac2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010a10:	462a      	mov	r2, r5
 8010a12:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a14:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010a18:	6851      	ldr	r1, [r2, #4]
 8010a1a:	c303      	stmia	r3!, {r0, r1}
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	a80a      	add	r0, sp, #40	@ 0x28
 8010a20:	f7ff fc06 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8010a24:	4b38      	ldr	r3, [pc, #224]	@ (8010b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010a26:	2100      	movs	r1, #0
 8010a28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a2c:	4b37      	ldr	r3, [pc, #220]	@ (8010b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010a2e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8010a32:	aa0a      	add	r2, sp, #40	@ 0x28
 8010a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a38:	910c      	str	r1, [sp, #48]	@ 0x30
 8010a3a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010a3e:	ab08      	add	r3, sp, #32
 8010a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	a90c      	add	r1, sp, #48	@ 0x30
 8010a4c:	f7ff fbf0 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8010a50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d13c      	bne.n	8010ad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010a56:	2000      	movs	r0, #0
 8010a58:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8010a5c:	2600      	movs	r6, #0
 8010a5e:	696b      	ldr	r3, [r5, #20]
 8010a60:	a908      	add	r1, sp, #32
 8010a62:	682a      	ldr	r2, [r5, #0]
 8010a64:	4628      	mov	r0, r5
 8010a66:	9305      	str	r3, [sp, #20]
 8010a68:	616e      	str	r6, [r5, #20]
 8010a6a:	6892      	ldr	r2, [r2, #8]
 8010a6c:	4790      	blx	r2
 8010a6e:	9b05      	ldr	r3, [sp, #20]
 8010a70:	4652      	mov	r2, sl
 8010a72:	4649      	mov	r1, r9
 8010a74:	616b      	str	r3, [r5, #20]
 8010a76:	4628      	mov	r0, r5
 8010a78:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8010a7c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8010a80:	f7f5 fea3 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
 8010a84:	9a01      	ldr	r2, [sp, #4]
 8010a86:	4b23      	ldr	r3, [pc, #140]	@ (8010b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010a88:	4620      	mov	r0, r4
 8010a8a:	801a      	strh	r2, [r3, #0]
 8010a8c:	9a02      	ldr	r2, [sp, #8]
 8010a8e:	4b22      	ldr	r3, [pc, #136]	@ (8010b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010a90:	801a      	strh	r2, [r3, #0]
 8010a92:	9a03      	ldr	r2, [sp, #12]
 8010a94:	4b1c      	ldr	r3, [pc, #112]	@ (8010b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010a96:	801a      	strh	r2, [r3, #0]
 8010a98:	4b1c      	ldr	r3, [pc, #112]	@ (8010b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010a9a:	9a04      	ldr	r2, [sp, #16]
 8010a9c:	801a      	strh	r2, [r3, #0]
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8010aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aa6:	4798      	blx	r3
 8010aa8:	6823      	ldr	r3, [r4, #0]
 8010aaa:	4620      	mov	r0, r4
 8010aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aae:	4798      	blx	r3
 8010ab0:	b00f      	add	sp, #60	@ 0x3c
 8010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab6:	883b      	ldrh	r3, [r7, #0]
 8010ab8:	f8ab 0000 	strh.w	r0, [fp]
 8010abc:	f8aa 3000 	strh.w	r3, [sl]
 8010ac0:	e789      	b.n	80109d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010ac2:	462a      	mov	r2, r5
 8010ac4:	ab0a      	add	r3, sp, #40	@ 0x28
 8010ac6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010aca:	6851      	ldr	r1, [r2, #4]
 8010acc:	c303      	stmia	r3!, {r0, r1}
 8010ace:	e7a9      	b.n	8010a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010ad0:	a807      	add	r0, sp, #28
 8010ad2:	f009 fb31 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010ad6:	4606      	mov	r6, r0
 8010ad8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8010ada:	6803      	ldr	r3, [r0, #0]
 8010adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ade:	4798      	blx	r3
 8010ae0:	4286      	cmp	r6, r0
 8010ae2:	d1b8      	bne.n	8010a56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8010ae4:	f7f5 f856 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010ae8:	6803      	ldr	r3, [r0, #0]
 8010aea:	4606      	mov	r6, r0
 8010aec:	a807      	add	r0, sp, #28
 8010aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010af0:	9305      	str	r3, [sp, #20]
 8010af2:	f009 fb21 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010af6:	9b05      	ldr	r3, [sp, #20]
 8010af8:	4601      	mov	r1, r0
 8010afa:	4630      	mov	r0, r6
 8010afc:	4798      	blx	r3
 8010afe:	f080 0001 	eor.w	r0, r0, #1
 8010b02:	b2c0      	uxtb	r0, r0
 8010b04:	e7a8      	b.n	8010a58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010b06:	bf00      	nop
 8010b08:	20027db4 	.word	0x20027db4
 8010b0c:	20027db6 	.word	0x20027db6
 8010b10:	20027db8 	.word	0x20027db8
 8010b14:	20027dba 	.word	0x20027dba
 8010b18:	20027dbc 	.word	0x20027dbc

08010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010b1c:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010b1e:	b510      	push	{r4, lr}
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	4604      	mov	r4, r0
 8010b24:	b13b      	cbz	r3, 8010b36 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010b26:	6803      	ldr	r3, [r0, #0]
 8010b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b2a:	4798      	blx	r3
 8010b2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010b2e:	4283      	cmp	r3, r0
 8010b30:	d101      	bne.n	8010b36 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010b32:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8010b34:	bd10      	pop	{r4, pc}
 8010b36:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010b38:	e7fc      	b.n	8010b34 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010b3a:	bf00      	nop
 8010b3c:	20027dbe 	.word	0x20027dbe

08010b40 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b44:	461d      	mov	r5, r3
 8010b46:	b08a      	sub	sp, #40	@ 0x28
 8010b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b4c:	4690      	mov	r8, r2
 8010b4e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8010b52:	2400      	movs	r4, #0
 8010b54:	4607      	mov	r7, r0
 8010b56:	fb06 8505 	mla	r5, r6, r5, r8
 8010b5a:	9404      	str	r4, [sp, #16]
 8010b5c:	f88d 4020 	strb.w	r4, [sp, #32]
 8010b60:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010b64:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010b68:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010b6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010b70:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010b74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010b78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010b7c:	f7ff ffce 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b80:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010b8a:	a901      	add	r1, sp, #4
 8010b8c:	9505      	str	r5, [sp, #20]
 8010b8e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010b92:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8010b96:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8010b9a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010b9e:	6803      	ldr	r3, [r0, #0]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	4798      	blx	r3
 8010ba4:	b00a      	add	sp, #40	@ 0x28
 8010ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010baa <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bae:	b08b      	sub	sp, #44	@ 0x2c
 8010bb0:	2400      	movs	r4, #0
 8010bb2:	4691      	mov	r9, r2
 8010bb4:	461d      	mov	r5, r3
 8010bb6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8010bba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010bbe:	4688      	mov	r8, r1
 8010bc0:	4607      	mov	r7, r0
 8010bc2:	9404      	str	r4, [sp, #16]
 8010bc4:	fb06 9505 	mla	r5, r6, r5, r9
 8010bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010bcc:	f7ff ffa6 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010bd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010bd4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010bde:	a901      	add	r1, sp, #4
 8010be0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010be4:	9505      	str	r5, [sp, #20]
 8010be6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010bea:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010bee:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010bf2:	f8cd 8010 	str.w	r8, [sp, #16]
 8010bf6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010bfa:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010bfe:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8010c02:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010c06:	6803      	ldr	r3, [r0, #0]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	4798      	blx	r3
 8010c0c:	b00b      	add	sp, #44	@ 0x2c
 8010c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010c14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c18:	b08a      	sub	sp, #40	@ 0x28
 8010c1a:	4698      	mov	r8, r3
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	4606      	mov	r6, r0
 8010c20:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8010c24:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8010c28:	2d0b      	cmp	r5, #11
 8010c2a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8010c2e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8010c32:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8010c36:	9304      	str	r3, [sp, #16]
 8010c38:	d137      	bne.n	8010caa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010c3a:	2380      	movs	r3, #128	@ 0x80
 8010c3c:	f88d 0020 	strb.w	r0, [sp, #32]
 8010c40:	4630      	mov	r0, r6
 8010c42:	9203      	str	r2, [sp, #12]
 8010c44:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010c48:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010c4c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010c54:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c58:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010c5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010c60:	f7ff ff5c 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c64:	2c0b      	cmp	r4, #11
 8010c66:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010c6a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010c6e:	bf94      	ite	ls
 8010c70:	4b19      	ldrls	r3, [pc, #100]	@ (8010cd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010c72:	2100      	movhi	r1, #0
 8010c74:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8010c78:	bf98      	it	ls
 8010c7a:	5d19      	ldrbls	r1, [r3, r4]
 8010c7c:	fb02 8307 	mla	r3, r2, r7, r8
 8010c80:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010c84:	10c9      	asrs	r1, r1, #3
 8010c86:	fb01 0003 	mla	r0, r1, r3, r0
 8010c8a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010c8e:	a901      	add	r1, sp, #4
 8010c90:	9005      	str	r0, [sp, #20]
 8010c92:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010c96:	2300      	movs	r3, #0
 8010c98:	6870      	ldr	r0, [r6, #4]
 8010c9a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010c9e:	6803      	ldr	r3, [r0, #0]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	4798      	blx	r3
 8010ca4:	b00a      	add	sp, #40	@ 0x28
 8010ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010caa:	2d02      	cmp	r5, #2
 8010cac:	d109      	bne.n	8010cc2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010cae:	28ff      	cmp	r0, #255	@ 0xff
 8010cb0:	d105      	bne.n	8010cbe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010cb2:	f1bc 0f00 	cmp.w	ip, #0
 8010cb6:	bf14      	ite	ne
 8010cb8:	2340      	movne	r3, #64	@ 0x40
 8010cba:	2320      	moveq	r3, #32
 8010cbc:	e7be      	b.n	8010c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010cbe:	2340      	movs	r3, #64	@ 0x40
 8010cc0:	e7bc      	b.n	8010c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010cc2:	28ff      	cmp	r0, #255	@ 0xff
 8010cc4:	d105      	bne.n	8010cd2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010cc6:	f1bc 0f00 	cmp.w	ip, #0
 8010cca:	bf14      	ite	ne
 8010ccc:	2304      	movne	r3, #4
 8010cce:	2301      	moveq	r3, #1
 8010cd0:	e7b4      	b.n	8010c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010cd2:	2304      	movs	r3, #4
 8010cd4:	e7b2      	b.n	8010c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010cd6:	bf00      	nop
 8010cd8:	0802d7ac 	.word	0x0802d7ac

08010cdc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce0:	b08b      	sub	sp, #44	@ 0x2c
 8010ce2:	461d      	mov	r5, r3
 8010ce4:	2400      	movs	r4, #0
 8010ce6:	4688      	mov	r8, r1
 8010ce8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8010cec:	4693      	mov	fp, r2
 8010cee:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8010cf2:	4607      	mov	r7, r0
 8010cf4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010cf8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8010cfc:	9404      	str	r4, [sp, #16]
 8010cfe:	bf14      	ite	ne
 8010d00:	2308      	movne	r3, #8
 8010d02:	2302      	moveq	r3, #2
 8010d04:	fb05 b50a 	mla	r5, r5, sl, fp
 8010d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d0c:	f7ff ff06 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010d10:	2e0b      	cmp	r6, #11
 8010d12:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010d16:	a901      	add	r1, sp, #4
 8010d18:	bf98      	it	ls
 8010d1a:	4b13      	ldrls	r3, [pc, #76]	@ (8010d68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010d1c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010d20:	bf98      	it	ls
 8010d22:	5d9c      	ldrbls	r4, [r3, r6]
 8010d24:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010d28:	10e4      	asrs	r4, r4, #3
 8010d2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010d32:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010d36:	fb04 0405 	mla	r4, r4, r5, r0
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010d40:	2300      	movs	r3, #0
 8010d42:	9405      	str	r4, [sp, #20]
 8010d44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010d48:	f88d 9020 	strb.w	r9, [sp, #32]
 8010d4c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8010d50:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010d54:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8010d58:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8010d5c:	6803      	ldr	r3, [r0, #0]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	4798      	blx	r3
 8010d62:	b00b      	add	sp, #44	@ 0x2c
 8010d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d68:	0802d7ac 	.word	0x0802d7ac

08010d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d70:	461e      	mov	r6, r3
 8010d72:	4b0a      	ldr	r3, [pc, #40]	@ (8010d9c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010d74:	460f      	mov	r7, r1
 8010d76:	4690      	mov	r8, r2
 8010d78:	881d      	ldrh	r5, [r3, #0]
 8010d7a:	f7f4 ff0b 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010d7e:	6803      	ldr	r3, [r0, #0]
 8010d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d82:	4798      	blx	r3
 8010d84:	280b      	cmp	r0, #11
 8010d86:	bf96      	itet	ls
 8010d88:	4b05      	ldrls	r3, [pc, #20]	@ (8010da0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010d8a:	2400      	movhi	r4, #0
 8010d8c:	5c1c      	ldrbls	r4, [r3, r0]
 8010d8e:	fb08 7005 	mla	r0, r8, r5, r7
 8010d92:	10e4      	asrs	r4, r4, #3
 8010d94:	fb04 6000 	mla	r0, r4, r0, r6
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9c:	20027dba 	.word	0x20027dba
 8010da0:	0802d7ac 	.word	0x0802d7ac

08010da4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010da6:	b08b      	sub	sp, #44	@ 0x2c
 8010da8:	461f      	mov	r7, r3
 8010daa:	4604      	mov	r4, r0
 8010dac:	4616      	mov	r6, r2
 8010dae:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010db2:	2500      	movs	r5, #0
 8010db4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010db8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010dbc:	9504      	str	r5, [sp, #16]
 8010dbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010dc2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010dc6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010dca:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010dce:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010dd2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010dd6:	f88d 3020 	strb.w	r3, [sp, #32]
 8010dda:	f7ff fe9f 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010dde:	463a      	mov	r2, r7
 8010de0:	4631      	mov	r1, r6
 8010de2:	4603      	mov	r3, r0
 8010de4:	4620      	mov	r0, r4
 8010de6:	f7ff ffc1 	bl	8010d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010dea:	4b0e      	ldr	r3, [pc, #56]	@ (8010e24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010dec:	9005      	str	r0, [sp, #20]
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010df4:	f7f4 fece 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010df8:	6803      	ldr	r3, [r0, #0]
 8010dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dfc:	4798      	blx	r3
 8010dfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e00:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8010e04:	a901      	add	r1, sp, #4
 8010e06:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8010e0a:	9304      	str	r3, [sp, #16]
 8010e0c:	6860      	ldr	r0, [r4, #4]
 8010e0e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010e12:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010e16:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010e1a:	6803      	ldr	r3, [r0, #0]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	4798      	blx	r3
 8010e20:	b00b      	add	sp, #44	@ 0x2c
 8010e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e24:	20027dba 	.word	0x20027dba

08010e28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e2a:	b08d      	sub	sp, #52	@ 0x34
 8010e2c:	2501      	movs	r5, #1
 8010e2e:	4604      	mov	r4, r0
 8010e30:	466b      	mov	r3, sp
 8010e32:	9503      	str	r5, [sp, #12]
 8010e34:	e883 0006 	stmia.w	r3, {r1, r2}
 8010e38:	2300      	movs	r3, #0
 8010e3a:	f8bd 6000 	ldrh.w	r6, [sp]
 8010e3e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010e42:	9306      	str	r3, [sp, #24]
 8010e44:	6803      	ldr	r3, [r0, #0]
 8010e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e48:	4798      	blx	r3
 8010e4a:	463a      	mov	r2, r7
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4603      	mov	r3, r0
 8010e50:	4620      	mov	r0, r4
 8010e52:	f7ff ff8b 	bl	8010d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010e58:	9004      	str	r0, [sp, #16]
 8010e5a:	9307      	str	r3, [sp, #28]
 8010e5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e60:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010e64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010e68:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8010ea8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010e74:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010e78:	f7f4 fe8c 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010e7c:	6803      	ldr	r3, [r0, #0]
 8010e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e80:	4798      	blx	r3
 8010e82:	23ff      	movs	r3, #255	@ 0xff
 8010e84:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010e88:	a903      	add	r1, sp, #12
 8010e8a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010e8e:	6860      	ldr	r0, [r4, #4]
 8010e90:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010e94:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010e98:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010e9c:	6803      	ldr	r3, [r0, #0]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	4798      	blx	r3
 8010ea2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8010ea4:	b00d      	add	sp, #52	@ 0x34
 8010ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ea8:	20027dba 	.word	0x20027dba

08010eac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb0:	b08c      	sub	sp, #48	@ 0x30
 8010eb2:	461e      	mov	r6, r3
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	466d      	mov	r5, sp
 8010eba:	9306      	str	r3, [sp, #24]
 8010ebc:	6803      	ldr	r3, [r0, #0]
 8010ebe:	e885 0006 	stmia.w	r5, {r1, r2}
 8010ec2:	2501      	movs	r5, #1
 8010ec4:	f8bd 7000 	ldrh.w	r7, [sp]
 8010ec8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010ecc:	9503      	str	r5, [sp, #12]
 8010ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ed0:	4798      	blx	r3
 8010ed2:	4642      	mov	r2, r8
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f7ff ff47 	bl	8010d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010ede:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010ee2:	9004      	str	r0, [sp, #16]
 8010ee4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010ee8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010eec:	9607      	str	r6, [sp, #28]
 8010eee:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010ef2:	4b10      	ldr	r3, [pc, #64]	@ (8010f34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010efa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010efc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010f00:	f7f4 fe48 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8010f04:	6803      	ldr	r3, [r0, #0]
 8010f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f08:	4798      	blx	r3
 8010f0a:	23ff      	movs	r3, #255	@ 0xff
 8010f0c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010f10:	a903      	add	r1, sp, #12
 8010f12:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010f16:	6860      	ldr	r0, [r4, #4]
 8010f18:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010f1c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010f20:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010f24:	6803      	ldr	r3, [r0, #0]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	4798      	blx	r3
 8010f2a:	4630      	mov	r0, r6
 8010f2c:	b00c      	add	sp, #48	@ 0x30
 8010f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f32:	bf00      	nop
 8010f34:	20027dba 	.word	0x20027dba

08010f38 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	ac02      	add	r4, sp, #8
 8010f40:	e884 0006 	stmia.w	r4, {r1, r2}
 8010f44:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010f48:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010f4c:	f7ff fde6 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f50:	4631      	mov	r1, r6
 8010f52:	4603      	mov	r3, r0
 8010f54:	463a      	mov	r2, r7
 8010f56:	4628      	mov	r0, r5
 8010f58:	f7ff ff08 	bl	8010d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010f5c:	4a05      	ldr	r2, [pc, #20]	@ (8010f74 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010f5e:	682b      	ldr	r3, [r5, #0]
 8010f60:	8812      	ldrh	r2, [r2, #0]
 8010f62:	9200      	str	r2, [sp, #0]
 8010f64:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010f66:	4603      	mov	r3, r0
 8010f68:	4628      	mov	r0, r5
 8010f6a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010f6e:	47b0      	blx	r6
 8010f70:	b005      	add	sp, #20
 8010f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f74:	20027dba 	.word	0x20027dba

08010f78 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8010f7e:	4604      	mov	r4, r0
 8010f80:	b19b      	cbz	r3, 8010faa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010f82:	2002      	movs	r0, #2
 8010f84:	f7ef fdf8 	bl	8000b78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010f90:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8010f94:	6823      	ldr	r3, [r4, #0]
 8010f96:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8010f9a:	f7ff fdbf 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f9e:	4601      	mov	r1, r0
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	462b      	mov	r3, r5
 8010fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fa8:	4718      	bx	r3
 8010faa:	bd70      	pop	{r4, r5, r6, pc}

08010fac <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	4605      	mov	r5, r0
 8010fb0:	460c      	mov	r4, r1
 8010fb2:	2003      	movs	r0, #3
 8010fb4:	b149      	cbz	r1, 8010fca <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8010fb6:	f7ef fd7f 	bl	8000ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010fba:	6928      	ldr	r0, [r5, #16]
 8010fbc:	b168      	cbz	r0, 8010fda <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010fbe:	6803      	ldr	r3, [r0, #0]
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	695b      	ldr	r3, [r3, #20]
 8010fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fc8:	4718      	bx	r3
 8010fca:	f7ef fda5 	bl	8000b18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010fce:	6928      	ldr	r0, [r5, #16]
 8010fd0:	b118      	cbz	r0, 8010fda <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010fd2:	6803      	ldr	r3, [r0, #0]
 8010fd4:	4621      	mov	r1, r4
 8010fd6:	695b      	ldr	r3, [r3, #20]
 8010fd8:	e7f4      	b.n	8010fc4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8010fda:	bd70      	pop	{r4, r5, r6, pc}

08010fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	428b      	cmp	r3, r1
 8010fe8:	d006      	beq.n	8010ff8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010fea:	6803      	ldr	r3, [r0, #0]
 8010fec:	b929      	cbnz	r1, 8010ffa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010fee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010ff2:	4798      	blx	r3
 8010ff4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8010ff8:	bd38      	pop	{r3, r4, r5, pc}
 8010ffa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010ffe:	e7f8      	b.n	8010ff2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011000 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011000:	4b0d      	ldr	r3, [pc, #52]	@ (8011038 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011002:	b510      	push	{r4, lr}
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	4604      	mov	r4, r0
 8011008:	b95b      	cbnz	r3, 8011022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801100a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801100e:	2b02      	cmp	r3, #2
 8011010:	d007      	beq.n	8011022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011012:	6840      	ldr	r0, [r0, #4]
 8011014:	f000 f92c 	bl	8011270 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011018:	b118      	cbz	r0, 8011022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801101a:	6862      	ldr	r2, [r4, #4]
 801101c:	7a53      	ldrb	r3, [r2, #9]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d0fc      	beq.n	801101c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011022:	f7f0 fd81 	bl	8001b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011026:	4620      	mov	r0, r4
 8011028:	2100      	movs	r1, #0
 801102a:	f7ff ffd7 	bl	8010fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801102e:	4620      	mov	r0, r4
 8011030:	f7ff fd74 	bl	8010b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011034:	bd10      	pop	{r4, pc}
 8011036:	bf00      	nop
 8011038:	20027dbe 	.word	0x20027dbe

0801103c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801103c:	b570      	push	{r4, r5, r6, lr}
 801103e:	4604      	mov	r4, r0
 8011040:	6803      	ldr	r3, [r0, #0]
 8011042:	b919      	cbnz	r1, 801104c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8011044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801104a:	4718      	bx	r3
 801104c:	2200      	movs	r2, #0
 801104e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8011052:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8011056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011058:	4798      	blx	r3
 801105a:	6863      	ldr	r3, [r4, #4]
 801105c:	2101      	movs	r1, #1
 801105e:	4605      	mov	r5, r0
 8011060:	4620      	mov	r0, r4
 8011062:	7299      	strb	r1, [r3, #10]
 8011064:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8011068:	f7ff ffb8 	bl	8010fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801106c:	4628      	mov	r0, r5
 801106e:	bd70      	pop	{r4, r5, r6, pc}

08011070 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011070:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011074:	1a13      	subs	r3, r2, r0
 8011076:	4258      	negs	r0, r3
 8011078:	4158      	adcs	r0, r3
 801107a:	4770      	bx	lr

0801107c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801107c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011080:	1a9b      	subs	r3, r3, r2
 8011082:	2b00      	cmp	r3, #0
 8011084:	bfdc      	itt	le
 8011086:	6882      	ldrle	r2, [r0, #8]
 8011088:	189b      	addle	r3, r3, r2
 801108a:	2b01      	cmp	r3, #1
 801108c:	bfcc      	ite	gt
 801108e:	2000      	movgt	r0, #0
 8011090:	2001      	movle	r0, #1
 8011092:	4770      	bx	lr

08011094 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011094:	6902      	ldr	r2, [r0, #16]
 8011096:	6843      	ldr	r3, [r0, #4]
 8011098:	2024      	movs	r0, #36	@ 0x24
 801109a:	fb00 3002 	mla	r0, r0, r2, r3
 801109e:	4770      	bx	lr

080110a0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80110a0:	6803      	ldr	r3, [r0, #0]
 80110a2:	691b      	ldr	r3, [r3, #16]
 80110a4:	4718      	bx	r3

080110a6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80110a6:	2301      	movs	r3, #1
 80110a8:	b570      	push	{r4, r5, r6, lr}
 80110aa:	7203      	strb	r3, [r0, #8]
 80110ac:	4604      	mov	r4, r0
 80110ae:	6840      	ldr	r0, [r0, #4]
 80110b0:	6803      	ldr	r3, [r0, #0]
 80110b2:	699b      	ldr	r3, [r3, #24]
 80110b4:	4798      	blx	r3
 80110b6:	6803      	ldr	r3, [r0, #0]
 80110b8:	4605      	mov	r5, r0
 80110ba:	2b40      	cmp	r3, #64	@ 0x40
 80110bc:	d00c      	beq.n	80110d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110be:	d810      	bhi.n	80110e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80110c0:	2b04      	cmp	r3, #4
 80110c2:	d01d      	beq.n	8011100 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80110c4:	d804      	bhi.n	80110d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d006      	beq.n	80110d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110ca:	2b02      	cmp	r3, #2
 80110cc:	d02c      	beq.n	8011128 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80110ce:	bd70      	pop	{r4, r5, r6, pc}
 80110d0:	2b08      	cmp	r3, #8
 80110d2:	d01d      	beq.n	8011110 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80110d4:	2b20      	cmp	r3, #32
 80110d6:	d1fa      	bne.n	80110ce <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80110d8:	6823      	ldr	r3, [r4, #0]
 80110da:	4620      	mov	r0, r4
 80110dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110de:	4798      	blx	r3
 80110e0:	e013      	b.n	801110a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80110e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110e6:	d0f7      	beq.n	80110d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110e8:	d804      	bhi.n	80110f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80110ea:	2b80      	cmp	r3, #128	@ 0x80
 80110ec:	d0f4      	beq.n	80110d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110f2:	e7f0      	b.n	80110d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80110f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80110f8:	d0ee      	beq.n	80110d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110fe:	e7e5      	b.n	80110cc <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011100:	6823      	ldr	r3, [r4, #0]
 8011102:	7f01      	ldrb	r1, [r0, #28]
 8011104:	4620      	mov	r0, r4
 8011106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011108:	4798      	blx	r3
 801110a:	6823      	ldr	r3, [r4, #0]
 801110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801110e:	e006      	b.n	801111e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	7f01      	ldrb	r1, [r0, #28]
 8011114:	4620      	mov	r0, r4
 8011116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011118:	4798      	blx	r3
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801111e:	4629      	mov	r1, r5
 8011120:	4620      	mov	r0, r4
 8011122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011126:	4718      	bx	r3
 8011128:	6823      	ldr	r3, [r4, #0]
 801112a:	4620      	mov	r0, r4
 801112c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801112e:	4798      	blx	r3
 8011130:	e7f3      	b.n	801111a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011132 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011132:	4770      	bx	lr

08011134 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011134:	4770      	bx	lr

08011136 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8011136:	4770      	bx	lr

08011138 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011138:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801113c:	b510      	push	{r4, lr}
 801113e:	1ad2      	subs	r2, r2, r3
 8011140:	2a00      	cmp	r2, #0
 8011142:	bfdc      	itt	le
 8011144:	6884      	ldrle	r4, [r0, #8]
 8011146:	1912      	addle	r2, r2, r4
 8011148:	2a01      	cmp	r2, #1
 801114a:	dd16      	ble.n	801117a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801114c:	6842      	ldr	r2, [r0, #4]
 801114e:	2424      	movs	r4, #36	@ 0x24
 8011150:	fb04 2303 	mla	r3, r4, r3, r2
 8011154:	f101 0220 	add.w	r2, r1, #32
 8011158:	f851 4b04 	ldr.w	r4, [r1], #4
 801115c:	4291      	cmp	r1, r2
 801115e:	f843 4b04 	str.w	r4, [r3], #4
 8011162:	d1f9      	bne.n	8011158 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011164:	780a      	ldrb	r2, [r1, #0]
 8011166:	701a      	strb	r2, [r3, #0]
 8011168:	68c3      	ldr	r3, [r0, #12]
 801116a:	6882      	ldr	r2, [r0, #8]
 801116c:	f3bf 8f5b 	dmb	ish
 8011170:	3301      	adds	r3, #1
 8011172:	429a      	cmp	r2, r3
 8011174:	bfd8      	it	le
 8011176:	1a9b      	suble	r3, r3, r2
 8011178:	60c3      	str	r3, [r0, #12]
 801117a:	bd10      	pop	{r4, pc}

0801117c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801117c:	6903      	ldr	r3, [r0, #16]
 801117e:	6882      	ldr	r2, [r0, #8]
 8011180:	f3bf 8f5b 	dmb	ish
 8011184:	3301      	adds	r3, #1
 8011186:	429a      	cmp	r2, r3
 8011188:	bfd8      	it	le
 801118a:	1a9b      	suble	r3, r3, r2
 801118c:	6103      	str	r3, [r0, #16]
 801118e:	4770      	bx	lr

08011190 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011190:	b570      	push	{r4, r5, r6, lr}
 8011192:	4604      	mov	r4, r0
 8011194:	460e      	mov	r6, r1
 8011196:	6860      	ldr	r0, [r4, #4]
 8011198:	6803      	ldr	r3, [r0, #0]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	4798      	blx	r3
 801119e:	2800      	cmp	r0, #0
 80111a0:	d1f9      	bne.n	8011196 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80111a2:	4d0d      	ldr	r5, [pc, #52]	@ (80111d8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80111a4:	6828      	ldr	r0, [r5, #0]
 80111a6:	6803      	ldr	r3, [r0, #0]
 80111a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80111aa:	4798      	blx	r3
 80111ac:	f7f0 fcca 	bl	8001b44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80111b0:	6828      	ldr	r0, [r5, #0]
 80111b2:	2101      	movs	r1, #1
 80111b4:	f7ff ff12 	bl	8010fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80111b8:	6860      	ldr	r0, [r4, #4]
 80111ba:	4631      	mov	r1, r6
 80111bc:	6803      	ldr	r3, [r0, #0]
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	4798      	blx	r3
 80111c2:	6823      	ldr	r3, [r4, #0]
 80111c4:	4620      	mov	r0, r4
 80111c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111c8:	4798      	blx	r3
 80111ca:	6828      	ldr	r0, [r5, #0]
 80111cc:	6803      	ldr	r3, [r0, #0]
 80111ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80111d4:	4718      	bx	r3
 80111d6:	bf00      	nop
 80111d8:	20027dc0 	.word	0x20027dc0

080111dc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80111dc:	b508      	push	{r3, lr}
 80111de:	f7f0 fca3 	bl	8001b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80111e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80111e6:	f7f0 bca7 	b.w	8001b38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080111ea <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80111ea:	b510      	push	{r4, lr}
 80111ec:	4604      	mov	r4, r0
 80111ee:	2114      	movs	r1, #20
 80111f0:	f017 fcdb 	bl	8028baa <_ZdlPvj>
 80111f4:	4620      	mov	r0, r4
 80111f6:	bd10      	pop	{r4, pc}

080111f8 <_ZN8touchgfx13DMA_Interface5startEv>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	4604      	mov	r4, r0
 80111fc:	6840      	ldr	r0, [r0, #4]
 80111fe:	6803      	ldr	r3, [r0, #0]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4798      	blx	r3
 8011204:	b948      	cbnz	r0, 801121a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011206:	7a63      	ldrb	r3, [r4, #9]
 8011208:	b13b      	cbz	r3, 801121a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801120a:	7a23      	ldrb	r3, [r4, #8]
 801120c:	b92b      	cbnz	r3, 801121a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	4620      	mov	r0, r4
 8011212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011218:	4718      	bx	r3
 801121a:	bd10      	pop	{r4, pc}

0801121c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	4604      	mov	r4, r0
 8011220:	6840      	ldr	r0, [r0, #4]
 8011222:	6803      	ldr	r3, [r0, #0]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4798      	blx	r3
 8011228:	4605      	mov	r5, r0
 801122a:	b930      	cbnz	r0, 801123a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801122c:	7a23      	ldrb	r3, [r4, #8]
 801122e:	b123      	cbz	r3, 801123a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011230:	6860      	ldr	r0, [r4, #4]
 8011232:	6803      	ldr	r3, [r0, #0]
 8011234:	695b      	ldr	r3, [r3, #20]
 8011236:	4798      	blx	r3
 8011238:	7225      	strb	r5, [r4, #8]
 801123a:	6860      	ldr	r0, [r4, #4]
 801123c:	6803      	ldr	r3, [r0, #0]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	4798      	blx	r3
 8011242:	b928      	cbnz	r0, 8011250 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011244:	6823      	ldr	r3, [r4, #0]
 8011246:	4620      	mov	r0, r4
 8011248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801124a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801124e:	4718      	bx	r3
 8011250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011254:	f7f0 bc7e 	b.w	8001b54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011258 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011258:	b510      	push	{r4, lr}
 801125a:	6082      	str	r2, [r0, #8]
 801125c:	2200      	movs	r2, #0
 801125e:	4c03      	ldr	r4, [pc, #12]	@ (801126c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011260:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011264:	e9c0 4100 	strd	r4, r1, [r0]
 8011268:	bd10      	pop	{r4, pc}
 801126a:	bf00      	nop
 801126c:	0802d7c0 	.word	0x0802d7c0

08011270 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011270:	6840      	ldr	r0, [r0, #4]
 8011272:	6803      	ldr	r3, [r0, #0]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4718      	bx	r3

08011278 <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv>:
 8011278:	b508      	push	{r3, lr}
 801127a:	4b05      	ldr	r3, [pc, #20]	@ (8011290 <_ZNK8touchgfx19PainterRGB565Bitmap18getRenderingMethodEv+0x18>)
 801127c:	6818      	ldr	r0, [r3, #0]
 801127e:	6803      	ldr	r3, [r0, #0]
 8011280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011284:	4798      	blx	r3
 8011286:	1e43      	subs	r3, r0, #1
 8011288:	4258      	negs	r0, r3
 801128a:	4158      	adcs	r0, r3
 801128c:	bd08      	pop	{r3, pc}
 801128e:	bf00      	nop
 8011290:	20027dc0 	.word	0x20027dc0

08011294 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 8011294:	4770      	bx	lr

08011296 <_ZThn8_N8touchgfx19PainterRGB565BitmapD1Ev>:
 8011296:	3808      	subs	r0, #8
 8011298:	4770      	bx	lr
	...

0801129c <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE>:
 801129c:	b538      	push	{r3, r4, r5, lr}
 801129e:	4b10      	ldr	r3, [pc, #64]	@ (80112e0 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x44>)
 80112a0:	4604      	mov	r4, r0
 80112a2:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	8085      	strh	r5, [r0, #4]
 80112aa:	b96b      	cbnz	r3, 80112c8 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x2c>
 80112ac:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 80112b0:	8462      	strh	r2, [r4, #34]	@ 0x22
 80112b2:	b963      	cbnz	r3, 80112ce <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x32>
 80112b4:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
 80112b8:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80112ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80112be:	89a0      	ldrh	r0, [r4, #12]
 80112c0:	1ac0      	subs	r0, r0, r3
 80112c2:	bf18      	it	ne
 80112c4:	2001      	movne	r0, #1
 80112c6:	bd38      	pop	{r3, r4, r5, pc}
 80112c8:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
 80112cc:	e7f0      	b.n	80112b0 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x14>
 80112ce:	f104 000c 	add.w	r0, r4, #12
 80112d2:	f008 fdbb 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80112d6:	1b40      	subs	r0, r0, r5
 80112d8:	8ba5      	ldrh	r5, [r4, #28]
 80112da:	1b40      	subs	r0, r0, r5
 80112dc:	b200      	sxth	r0, r0
 80112de:	e7eb      	b.n	80112b8 <_ZNK8touchgfx19PainterRGB565Bitmap5setupERKNS_4RectE+0x1c>
 80112e0:	20027db8 	.word	0x20027db8

080112e4 <_ZNK8touchgfx19PainterRGB565Bitmap8tearDownEv>:
 80112e4:	f7f0 bdf0 	b.w	8001ec8 <_ZN8touchgfx5paint8tearDownEv>

080112e8 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 80112e8:	b510      	push	{r4, lr}
 80112ea:	4604      	mov	r4, r0
 80112ec:	212c      	movs	r1, #44	@ 0x2c
 80112ee:	f017 fc5c 	bl	8028baa <_ZdlPvj>
 80112f2:	4620      	mov	r0, r4
 80112f4:	bd10      	pop	{r4, pc}

080112f6 <_ZThn8_N8touchgfx19PainterRGB565BitmapD0Ev>:
 80112f6:	f1a0 0008 	sub.w	r0, r0, #8
 80112fa:	e7f5      	b.n	80112e8 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>

080112fc <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh>:
 80112fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011300:	4606      	mov	r6, r0
 8011302:	b085      	sub	sp, #20
 8011304:	8c77      	ldrh	r7, [r6, #34]	@ 0x22
 8011306:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801130a:	441f      	add	r7, r3
 801130c:	8cb5      	ldrh	r5, [r6, #36]	@ 0x24
 801130e:	9001      	str	r0, [sp, #4]
 8011310:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8011314:	b2bf      	uxth	r7, r7
 8011316:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801131a:	4428      	add	r0, r5
 801131c:	f896 5020 	ldrb.w	r5, [r6, #32]
 8011320:	b23b      	sxth	r3, r7
 8011322:	b200      	sxth	r0, r0
 8011324:	b1a5      	cbz	r5, 8011350 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x54>
 8011326:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
 801132a:	fb93 f5f7 	sdiv	r5, r3, r7
 801132e:	fb07 3315 	mls	r3, r7, r5, r3
 8011332:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 8011336:	fb90 fcf5 	sdiv	ip, r0, r5
 801133a:	2b00      	cmp	r3, #0
 801133c:	fb05 001c 	mls	r0, r5, ip, r0
 8011340:	bfb8      	it	lt
 8011342:	19db      	addlt	r3, r3, r7
 8011344:	2800      	cmp	r0, #0
 8011346:	b21b      	sxth	r3, r3
 8011348:	da00      	bge.n	801134c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x50>
 801134a:	4428      	add	r0, r5
 801134c:	b200      	sxth	r0, r0
 801134e:	e018      	b.n	8011382 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 8011350:	2b00      	cmp	r3, #0
 8011352:	da07      	bge.n	8011364 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x68>
 8011354:	4423      	add	r3, r4
 8011356:	2b00      	cmp	r3, #0
 8011358:	dd61      	ble.n	801141e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 801135a:	443c      	add	r4, r7
 801135c:	1bd7      	subs	r7, r2, r7
 801135e:	462b      	mov	r3, r5
 8011360:	b224      	sxth	r4, r4
 8011362:	b23a      	sxth	r2, r7
 8011364:	f9b6 5014 	ldrsh.w	r5, [r6, #20]
 8011368:	429d      	cmp	r5, r3
 801136a:	dd58      	ble.n	801141e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 801136c:	2800      	cmp	r0, #0
 801136e:	db56      	blt.n	801141e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011370:	f9b6 7016 	ldrsh.w	r7, [r6, #22]
 8011374:	4287      	cmp	r7, r0
 8011376:	dd52      	ble.n	801141e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 8011378:	191f      	adds	r7, r3, r4
 801137a:	42af      	cmp	r7, r5
 801137c:	dd01      	ble.n	8011382 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x86>
 801137e:	1aec      	subs	r4, r5, r3
 8011380:	b224      	sxth	r4, r4
 8011382:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8011386:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
 801138a:	69b7      	ldr	r7, [r6, #24]
 801138c:	1aca      	subs	r2, r1, r3
 801138e:	4348      	muls	r0, r1
 8011390:	7bb1      	ldrb	r1, [r6, #14]
 8011392:	eb05 0944 	add.w	r9, r5, r4, lsl #1
 8011396:	b212      	sxth	r2, r2
 8011398:	b1a9      	cbz	r1, 80113c6 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xca>
 801139a:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 801139e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80113a2:	42a2      	cmp	r2, r4
 80113a4:	4628      	mov	r0, r5
 80113a6:	9b01      	ldr	r3, [sp, #4]
 80113a8:	bfa8      	it	ge
 80113aa:	4622      	movge	r2, r4
 80113ac:	4690      	mov	r8, r2
 80113ae:	1aa4      	subs	r4, r4, r2
 80113b0:	f7f0 fdfa 	bl	8001fa8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 80113b4:	4639      	mov	r1, r7
 80113b6:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 80113ba:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80113be:	b224      	sxth	r4, r4
 80113c0:	45a9      	cmp	r9, r5
 80113c2:	d8ee      	bhi.n	80113a2 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xa6>
 80113c4:	e02b      	b.n	801141e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>
 80113c6:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 80113ca:	6ab7      	ldr	r7, [r6, #40]	@ 0x28
 80113cc:	9100      	str	r1, [sp, #0]
 80113ce:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80113d2:	2f00      	cmp	r7, #0
 80113d4:	d062      	beq.n	801149c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 80113d6:	1838      	adds	r0, r7, r0
 80113d8:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 80113dc:	4403      	add	r3, r0
 80113de:	9002      	str	r0, [sp, #8]
 80113e0:	42a2      	cmp	r2, r4
 80113e2:	bfa8      	it	ge
 80113e4:	4622      	movge	r2, r4
 80113e6:	1aa4      	subs	r4, r4, r2
 80113e8:	eb05 0042 	add.w	r0, r5, r2, lsl #1
 80113ec:	b224      	sxth	r4, r4
 80113ee:	9003      	str	r0, [sp, #12]
 80113f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113f4:	9801      	ldr	r0, [sp, #4]
 80113f6:	4342      	muls	r2, r0
 80113f8:	1c57      	adds	r7, r2, #1
 80113fa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80113fe:	123f      	asrs	r7, r7, #8
 8011400:	2fff      	cmp	r7, #255	@ 0xff
 8011402:	d10f      	bne.n	8011424 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x128>
 8011404:	880a      	ldrh	r2, [r1, #0]
 8011406:	802a      	strh	r2, [r5, #0]
 8011408:	3502      	adds	r5, #2
 801140a:	9a03      	ldr	r2, [sp, #12]
 801140c:	3102      	adds	r1, #2
 801140e:	42aa      	cmp	r2, r5
 8011410:	d8ee      	bhi.n	80113f0 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xf4>
 8011412:	45a9      	cmp	r9, r5
 8011414:	9900      	ldr	r1, [sp, #0]
 8011416:	9b02      	ldr	r3, [sp, #8]
 8011418:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 801141c:	d8e0      	bhi.n	80113e0 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0xe4>
 801141e:	b005      	add	sp, #20
 8011420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011424:	fa5f fc87 	uxtb.w	ip, r7
 8011428:	2f00      	cmp	r7, #0
 801142a:	d0ed      	beq.n	8011408 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 801142c:	f8b5 8000 	ldrh.w	r8, [r5]
 8011430:	ea6f 0c0c 	mvn.w	ip, ip
 8011434:	8808      	ldrh	r0, [r1, #0]
 8011436:	f428 62ff 	bic.w	r2, r8, #2040	@ 0x7f8
 801143a:	fa5f fc8c 	uxtb.w	ip, ip
 801143e:	f420 6eff 	bic.w	lr, r0, #2040	@ 0x7f8
 8011442:	f408 6bfc 	and.w	fp, r8, #2016	@ 0x7e0
 8011446:	f022 0207 	bic.w	r2, r2, #7
 801144a:	f008 081f 	and.w	r8, r8, #31
 801144e:	f02e 0e07 	bic.w	lr, lr, #7
 8011452:	fb0c fb0b 	mul.w	fp, ip, fp
 8011456:	fb0c f202 	mul.w	r2, ip, r2
 801145a:	fb0c f808 	mul.w	r8, ip, r8
 801145e:	fb07 2e0e 	mla	lr, r7, lr, r2
 8011462:	f400 62fc 	and.w	r2, r0, #2016	@ 0x7e0
 8011466:	f000 001f 	and.w	r0, r0, #31
 801146a:	fb07 b202 	mla	r2, r7, r2, fp
 801146e:	fb07 8000 	mla	r0, r7, r0, r8
 8011472:	fb9e fefa 	sdiv	lr, lr, sl
 8011476:	fb92 f2fa 	sdiv	r2, r2, sl
 801147a:	f42e 6eff 	bic.w	lr, lr, #2040	@ 0x7f8
 801147e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8011482:	f02e 0e07 	bic.w	lr, lr, #7
 8011486:	ea4e 0e02 	orr.w	lr, lr, r2
 801148a:	fb90 f2fa 	sdiv	r2, r0, sl
 801148e:	f002 021f 	and.w	r2, r2, #31
 8011492:	ea4e 0e02 	orr.w	lr, lr, r2
 8011496:	f8a5 e000 	strh.w	lr, [r5]
 801149a:	e7b5      	b.n	8011408 <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x10c>
 801149c:	42a2      	cmp	r2, r4
 801149e:	4628      	mov	r0, r5
 80114a0:	9b01      	ldr	r3, [sp, #4]
 80114a2:	bfa8      	it	ge
 80114a4:	4622      	movge	r2, r4
 80114a6:	4617      	mov	r7, r2
 80114a8:	1aa4      	subs	r4, r4, r2
 80114aa:	f7f0 fd57 	bl	8001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80114ae:	9900      	ldr	r1, [sp, #0]
 80114b0:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 80114b4:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80114b8:	b224      	sxth	r4, r4
 80114ba:	45a9      	cmp	r9, r5
 80114bc:	d8ee      	bhi.n	801149c <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x1a0>
 80114be:	e7ae      	b.n	801141e <_ZNK8touchgfx19PainterRGB565Bitmap5paintEPhssssh+0x122>

080114c0 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 80114c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c2:	880b      	ldrh	r3, [r1, #0]
 80114c4:	f100 050c 	add.w	r5, r0, #12
 80114c8:	4604      	mov	r4, r0
 80114ca:	8183      	strh	r3, [r0, #12]
 80114cc:	4628      	mov	r0, r5
 80114ce:	f008 fe33 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80114d2:	73a0      	strb	r0, [r4, #14]
 80114d4:	4628      	mov	r0, r5
 80114d6:	f008 fcb9 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80114da:	4607      	mov	r7, r0
 80114dc:	4628      	mov	r0, r5
 80114de:	f008 fce9 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80114e2:	2300      	movs	r3, #0
 80114e4:	82e0      	strh	r0, [r4, #22]
 80114e6:	f104 0010 	add.w	r0, r4, #16
 80114ea:	6123      	str	r3, [r4, #16]
 80114ec:	82a7      	strh	r7, [r4, #20]
 80114ee:	f004 ff03 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80114f2:	4628      	mov	r0, r5
 80114f4:	f008 fd9c 	bl	801a030 <_ZNK8touchgfx6Bitmap7getDataEv>
 80114f8:	61a0      	str	r0, [r4, #24]
 80114fa:	4628      	mov	r0, r5
 80114fc:	f008 fdc8 	bl	801a090 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8011500:	62a0      	str	r0, [r4, #40]	@ 0x28
 8011502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011504 <_ZThn8_N8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
 8011504:	f1a0 0008 	sub.w	r0, r0, #8
 8011508:	f7ff bfda 	b.w	80114c0 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>

0801150c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 801150c:	094a      	lsrs	r2, r1, #5
 801150e:	4b06      	ldr	r3, [pc, #24]	@ (8011528 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8011510:	60c1      	str	r1, [r0, #12]
 8011512:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8011516:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801151a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801151e:	4313      	orrs	r3, r2
 8011520:	4319      	orrs	r1, r3
 8011522:	8201      	strh	r1, [r0, #16]
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop
 8011528:	fffff800 	.word	0xfffff800

0801152c <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 801152c:	f1a0 0008 	sub.w	r0, r0, #8
 8011530:	e7ec      	b.n	801150c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8011532:	bf00      	nop

08011534 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8011534:	b508      	push	{r3, lr}
 8011536:	4b05      	ldr	r3, [pc, #20]	@ (801154c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	6803      	ldr	r3, [r0, #0]
 801153c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011540:	4798      	blx	r3
 8011542:	1e43      	subs	r3, r0, #1
 8011544:	4258      	negs	r0, r3
 8011546:	4158      	adcs	r0, r3
 8011548:	bd08      	pop	{r3, pc}
 801154a:	bf00      	nop
 801154c:	20027dc0 	.word	0x20027dc0

08011550 <_ZN8touchgfx13PainterRGB565D1Ev>:
 8011550:	4770      	bx	lr

08011552 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8011552:	3808      	subs	r0, #8
 8011554:	4770      	bx	lr

08011556 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8011556:	b430      	push	{r4, r5}
 8011558:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801155c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8011560:	8a02      	ldrh	r2, [r0, #16]
 8011562:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8011566:	4629      	mov	r1, r5
 8011568:	9202      	str	r2, [sp, #8]
 801156a:	68c2      	ldr	r2, [r0, #12]
 801156c:	4620      	mov	r0, r4
 801156e:	bc30      	pop	{r4, r5}
 8011570:	f7f0 bcca 	b.w	8001f08 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08011574 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8011574:	f7f0 bca8 	b.w	8001ec8 <_ZN8touchgfx5paint8tearDownEv>

08011578 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8011578:	b510      	push	{r4, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	2114      	movs	r1, #20
 801157e:	f017 fb14 	bl	8028baa <_ZdlPvj>
 8011582:	4620      	mov	r0, r4
 8011584:	bd10      	pop	{r4, pc}

08011586 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8011586:	f1a0 0008 	sub.w	r0, r0, #8
 801158a:	e7f5      	b.n	8011578 <_ZN8touchgfx13PainterRGB565D0Ev>

0801158c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801158c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801158e:	6803      	ldr	r3, [r0, #0]
 8011590:	460d      	mov	r5, r1
 8011592:	4604      	mov	r4, r0
 8011594:	4601      	mov	r1, r0
 8011596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011598:	a802      	add	r0, sp, #8
 801159a:	4798      	blx	r3
 801159c:	6828      	ldr	r0, [r5, #0]
 801159e:	6869      	ldr	r1, [r5, #4]
 80115a0:	466b      	mov	r3, sp
 80115a2:	c303      	stmia	r3!, {r0, r1}
 80115a4:	4668      	mov	r0, sp
 80115a6:	4619      	mov	r1, r3
 80115a8:	f7fe fe42 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 80115ac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80115ae:	b188      	cbz	r0, 80115d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115b0:	6803      	ldr	r3, [r0, #0]
 80115b2:	1d21      	adds	r1, r4, #4
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	4798      	blx	r3
 80115b8:	b160      	cbz	r0, 80115d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115ba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	dd08      	ble.n	80115d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115c2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80115c6:	2d00      	cmp	r5, #0
 80115c8:	dd04      	ble.n	80115d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115ca:	4a2b      	ldr	r2, [pc, #172]	@ (8011678 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80115cc:	7812      	ldrb	r2, [r2, #0]
 80115ce:	b11a      	cbz	r2, 80115d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80115d0:	2a01      	cmp	r2, #1
 80115d2:	d029      	beq.n	8011628 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80115d4:	b004      	add	sp, #16
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80115dc:	441d      	add	r5, r3
 80115de:	b2ad      	uxth	r5, r5
 80115e0:	b22e      	sxth	r6, r5
 80115e2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80115e6:	42b3      	cmp	r3, r6
 80115e8:	daf4      	bge.n	80115d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115ea:	6823      	ldr	r3, [r4, #0]
 80115ec:	4669      	mov	r1, sp
 80115ee:	4620      	mov	r0, r4
 80115f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115f2:	4798      	blx	r3
 80115f4:	b940      	cbnz	r0, 8011608 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80115f6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d004      	beq.n	8011608 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80115fe:	3301      	adds	r3, #1
 8011600:	105b      	asrs	r3, r3, #1
 8011602:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011606:	e7f0      	b.n	80115ea <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011608:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801160c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011610:	4413      	add	r3, r2
 8011612:	b29b      	uxth	r3, r3
 8011614:	441a      	add	r2, r3
 8011616:	f8ad 3002 	strh.w	r3, [sp, #2]
 801161a:	b212      	sxth	r2, r2
 801161c:	4296      	cmp	r6, r2
 801161e:	dae0      	bge.n	80115e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011620:	1aeb      	subs	r3, r5, r3
 8011622:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011626:	e7dc      	b.n	80115e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011628:	f8bd 5000 	ldrh.w	r5, [sp]
 801162c:	441d      	add	r5, r3
 801162e:	b2ad      	uxth	r5, r5
 8011630:	b22e      	sxth	r6, r5
 8011632:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011636:	42b3      	cmp	r3, r6
 8011638:	dacc      	bge.n	80115d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	4669      	mov	r1, sp
 801163e:	4620      	mov	r0, r4
 8011640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011642:	4798      	blx	r3
 8011644:	b940      	cbnz	r0, 8011658 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011646:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801164a:	2b01      	cmp	r3, #1
 801164c:	d004      	beq.n	8011658 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801164e:	3301      	adds	r3, #1
 8011650:	105b      	asrs	r3, r3, #1
 8011652:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011656:	e7f0      	b.n	801163a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011658:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801165c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011660:	4413      	add	r3, r2
 8011662:	b29b      	uxth	r3, r3
 8011664:	441a      	add	r2, r3
 8011666:	f8ad 3000 	strh.w	r3, [sp]
 801166a:	b212      	sxth	r2, r2
 801166c:	4296      	cmp	r6, r2
 801166e:	dae0      	bge.n	8011632 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011670:	1aeb      	subs	r3, r5, r3
 8011672:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011676:	e7dc      	b.n	8011632 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011678:	20027db8 	.word	0x20027db8

0801167c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801167c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801167e:	6803      	ldr	r3, [r0, #0]
 8011680:	4604      	mov	r4, r0
 8011682:	4601      	mov	r1, r0
 8011684:	4668      	mov	r0, sp
 8011686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011688:	4798      	blx	r3
 801168a:	2100      	movs	r1, #0
 801168c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011690:	4668      	mov	r0, sp
 8011692:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011696:	9102      	str	r1, [sp, #8]
 8011698:	a902      	add	r1, sp, #8
 801169a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801169e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80116a2:	f7fe fdc5 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 80116a6:	6823      	ldr	r3, [r4, #0]
 80116a8:	4669      	mov	r1, sp
 80116aa:	4620      	mov	r0, r4
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	4798      	blx	r3
 80116b0:	b004      	add	sp, #16
 80116b2:	bd10      	pop	{r4, pc}

080116b4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80116b4:	2101      	movs	r1, #1
 80116b6:	2200      	movs	r2, #0
 80116b8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80116bc:	490a      	ldr	r1, [pc, #40]	@ (80116e8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80116be:	8082      	strh	r2, [r0, #4]
 80116c0:	6001      	str	r1, [r0, #0]
 80116c2:	21ff      	movs	r1, #255	@ 0xff
 80116c4:	80c2      	strh	r2, [r0, #6]
 80116c6:	8102      	strh	r2, [r0, #8]
 80116c8:	8142      	strh	r2, [r0, #10]
 80116ca:	8182      	strh	r2, [r0, #12]
 80116cc:	81c2      	strh	r2, [r0, #14]
 80116ce:	8202      	strh	r2, [r0, #16]
 80116d0:	8242      	strh	r2, [r0, #18]
 80116d2:	61c2      	str	r2, [r0, #28]
 80116d4:	8402      	strh	r2, [r0, #32]
 80116d6:	8442      	strh	r2, [r0, #34]	@ 0x22
 80116d8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80116dc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80116e0:	6282      	str	r2, [r0, #40]	@ 0x28
 80116e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80116e6:	4770      	bx	lr
 80116e8:	0802d85c 	.word	0x0802d85c

080116ec <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80116ec:	f101 0364 	add.w	r3, r1, #100	@ 0x64
 80116f0:	4602      	mov	r2, r0
 80116f2:	cb03      	ldmia	r3!, {r0, r1}
 80116f4:	6010      	str	r0, [r2, #0]
 80116f6:	4610      	mov	r0, r2
 80116f8:	6051      	str	r1, [r2, #4]
 80116fa:	4770      	bx	lr

080116fc <_ZN8touchgfx4LineD1Ev>:
 80116fc:	4770      	bx	lr

080116fe <_ZN8touchgfx4LineD0Ev>:
 80116fe:	b510      	push	{r4, lr}
 8011700:	4604      	mov	r4, r0
 8011702:	2170      	movs	r1, #112	@ 0x70
 8011704:	f017 fa51 	bl	8028baa <_ZdlPvj>
 8011708:	4620      	mov	r0, r4
 801170a:	bd10      	pop	{r4, pc}

0801170c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801170c:	b507      	push	{r0, r1, r2, lr}
 801170e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011712:	ab01      	add	r3, sp, #4
 8011714:	6809      	ldr	r1, [r1, #0]
 8011716:	6800      	ldr	r0, [r0, #0]
 8011718:	f006 fa14 	bl	8017b44 <_ZN8touchgfx6muldivElllRl>
 801171c:	b003      	add	sp, #12
 801171e:	f85d fb04 	ldr.w	pc, [sp], #4

08011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8011722:	6800      	ldr	r0, [r0, #0]
 8011724:	2800      	cmp	r0, #0
 8011726:	bfb9      	ittee	lt
 8011728:	2320      	movlt	r3, #32
 801172a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801172e:	301f      	addge	r0, #31
 8011730:	1140      	asrge	r0, r0, #5
 8011732:	4770      	bx	lr

08011734 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8011734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011738:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 801173c:	b089      	sub	sp, #36	@ 0x24
 801173e:	4604      	mov	r4, r0
 8011740:	b353      	cbz	r3, 8011798 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8011742:	6803      	ldr	r3, [r0, #0]
 8011744:	4601      	mov	r1, r0
 8011746:	a802      	add	r0, sp, #8
 8011748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801174a:	4798      	blx	r3
 801174c:	2220      	movs	r2, #32
 801174e:	f8d4 a02c 	ldr.w	sl, [r4, #44]	@ 0x2c
 8011752:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011754:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011756:	f8d4 b000 	ldr.w	fp, [r4]
 801175a:	fb9a f0f2 	sdiv	r0, sl, r2
 801175e:	fb91 f5f2 	sdiv	r5, r1, r2
 8011762:	fb93 f6f2 	sdiv	r6, r3, r2
 8011766:	1b40      	subs	r0, r0, r5
 8011768:	0076      	lsls	r6, r6, #1
 801176a:	2800      	cmp	r0, #0
 801176c:	bfb8      	it	lt
 801176e:	4240      	neglt	r0, r0
 8011770:	4286      	cmp	r6, r0
 8011772:	dc0c      	bgt.n	801178e <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8011774:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011776:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 801177a:	fb95 f0f2 	sdiv	r0, r5, r2
 801177e:	fb98 f7f2 	sdiv	r7, r8, r2
 8011782:	1bc0      	subs	r0, r0, r7
 8011784:	2800      	cmp	r0, #0
 8011786:	bfb8      	it	lt
 8011788:	4240      	neglt	r0, r0
 801178a:	4286      	cmp	r6, r0
 801178c:	dd07      	ble.n	801179e <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 801178e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011792:	a902      	add	r1, sp, #8
 8011794:	4620      	mov	r0, r4
 8011796:	4798      	blx	r3
 8011798:	b009      	add	sp, #36	@ 0x24
 801179a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179e:	eb01 060a 	add.w	r6, r1, sl
 80117a2:	2002      	movs	r0, #2
 80117a4:	eb08 0705 	add.w	r7, r8, r5
 80117a8:	3301      	adds	r3, #1
 80117aa:	f10d 0920 	add.w	r9, sp, #32
 80117ae:	9101      	str	r1, [sp, #4]
 80117b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117b4:	fb96 f6f0 	sdiv	r6, r6, r0
 80117b8:	fb97 f7f0 	sdiv	r7, r7, r0
 80117bc:	4103      	asrs	r3, r0
 80117be:	b236      	sxth	r6, r6
 80117c0:	b23f      	sxth	r7, r7
 80117c2:	f849 3d08 	str.w	r3, [r9, #-8]!
 80117c6:	4648      	mov	r0, r9
 80117c8:	fb96 f6f2 	sdiv	r6, r6, r2
 80117cc:	fb97 f7f2 	sdiv	r7, r7, r2
 80117d0:	f7ff ffa7 	bl	8011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80117d4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80117d8:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80117dc:	fa1f fe87 	uxth.w	lr, r7
 80117e0:	9901      	ldr	r1, [sp, #4]
 80117e2:	fa1f fc86 	uxth.w	ip, r6
 80117e6:	4293      	cmp	r3, r2
 80117e8:	b280      	uxth	r0, r0
 80117ea:	eba1 0a0a 	sub.w	sl, r1, sl
 80117ee:	da54      	bge.n	801189a <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 80117f0:	ebac 0100 	sub.w	r1, ip, r0
 80117f4:	f1ba 0f00 	cmp.w	sl, #0
 80117f8:	4460      	add	r0, ip
 80117fa:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80117fe:	b289      	uxth	r1, r1
 8011800:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8011804:	b280      	uxth	r0, r0
 8011806:	b20e      	sxth	r6, r1
 8011808:	da29      	bge.n	801185e <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801180a:	eba8 0505 	sub.w	r5, r8, r5
 801180e:	2d00      	cmp	r5, #0
 8011810:	da2a      	bge.n	8011868 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011812:	fa1f f88a 	uxth.w	r8, sl
 8011816:	f8ad a010 	strh.w	sl, [sp, #16]
 801181a:	fa1f f58c 	uxth.w	r5, ip
 801181e:	f8ad c012 	strh.w	ip, [sp, #18]
 8011822:	eba0 0008 	sub.w	r0, r0, r8
 8011826:	4443      	add	r3, r8
 8011828:	f8ad 6018 	strh.w	r6, [sp, #24]
 801182c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011830:	1a59      	subs	r1, r3, r1
 8011832:	ebae 0005 	sub.w	r0, lr, r5
 8011836:	f8ad 701a 	strh.w	r7, [sp, #26]
 801183a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801183e:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011842:	442a      	add	r2, r5
 8011844:	eba2 0e0e 	sub.w	lr, r2, lr
 8011848:	f8ad e01e 	strh.w	lr, [sp, #30]
 801184c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011850:	a904      	add	r1, sp, #16
 8011852:	4620      	mov	r0, r4
 8011854:	4798      	blx	r3
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	4649      	mov	r1, r9
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	e79a      	b.n	8011794 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 801185e:	d003      	beq.n	8011868 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011860:	eba8 0505 	sub.w	r5, r8, r5
 8011864:	2d00      	cmp	r5, #0
 8011866:	dcd4      	bgt.n	8011812 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8011868:	fa1f f88a 	uxth.w	r8, sl
 801186c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8011870:	fa1f f58c 	uxth.w	r5, ip
 8011874:	f8ad c012 	strh.w	ip, [sp, #18]
 8011878:	4443      	add	r3, r8
 801187a:	eba0 0008 	sub.w	r0, r0, r8
 801187e:	f8ad a018 	strh.w	sl, [sp, #24]
 8011882:	1a59      	subs	r1, r3, r1
 8011884:	ebae 0305 	sub.w	r3, lr, r5
 8011888:	f8ad 701a 	strh.w	r7, [sp, #26]
 801188c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011890:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011894:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011898:	e7d3      	b.n	8011842 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801189a:	ebae 0100 	sub.w	r1, lr, r0
 801189e:	f1ba 0f00 	cmp.w	sl, #0
 80118a2:	4470      	add	r0, lr
 80118a4:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80118a8:	b289      	uxth	r1, r1
 80118aa:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 80118ae:	b280      	uxth	r0, r0
 80118b0:	b20f      	sxth	r7, r1
 80118b2:	da20      	bge.n	80118f6 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 80118b4:	eba8 0505 	sub.w	r5, r8, r5
 80118b8:	2d00      	cmp	r5, #0
 80118ba:	da21      	bge.n	8011900 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80118bc:	fa1f f88e 	uxth.w	r8, lr
 80118c0:	f8ad e010 	strh.w	lr, [sp, #16]
 80118c4:	fa1f f58a 	uxth.w	r5, sl
 80118c8:	f8ad a012 	strh.w	sl, [sp, #18]
 80118cc:	4443      	add	r3, r8
 80118ce:	ebac 0e08 	sub.w	lr, ip, r8
 80118d2:	442a      	add	r2, r5
 80118d4:	1b40      	subs	r0, r0, r5
 80118d6:	eba3 0c0c 	sub.w	ip, r3, ip
 80118da:	f8ad e014 	strh.w	lr, [sp, #20]
 80118de:	1a51      	subs	r1, r2, r1
 80118e0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80118e4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80118e8:	f8ad 701a 	strh.w	r7, [sp, #26]
 80118ec:	f8ad c01c 	strh.w	ip, [sp, #28]
 80118f0:	f8ad 101e 	strh.w	r1, [sp, #30]
 80118f4:	e7aa      	b.n	801184c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 80118f6:	d003      	beq.n	8011900 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80118f8:	eba8 0505 	sub.w	r5, r8, r5
 80118fc:	2d00      	cmp	r5, #0
 80118fe:	dcdd      	bgt.n	80118bc <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8011900:	fa1f f58e 	uxth.w	r5, lr
 8011904:	f8ad 7012 	strh.w	r7, [sp, #18]
 8011908:	fa1f f88a 	uxth.w	r8, sl
 801190c:	f8ad e010 	strh.w	lr, [sp, #16]
 8011910:	442b      	add	r3, r5
 8011912:	ebac 0705 	sub.w	r7, ip, r5
 8011916:	4442      	add	r2, r8
 8011918:	eba0 0008 	sub.w	r0, r0, r8
 801191c:	eba3 0c0c 	sub.w	ip, r3, ip
 8011920:	f8ad 7014 	strh.w	r7, [sp, #20]
 8011924:	1a51      	subs	r1, r2, r1
 8011926:	f8ad 6018 	strh.w	r6, [sp, #24]
 801192a:	f8ad a01a 	strh.w	sl, [sp, #26]
 801192e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011932:	f8ad c01c 	strh.w	ip, [sp, #28]
 8011936:	f8ad 001e 	strh.w	r0, [sp, #30]
 801193a:	e787      	b.n	801184c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

0801193c <_ZN8touchgfx7CWRUtil4sineEi>:
 801193c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8011940:	fb90 f2f3 	sdiv	r2, r0, r3
 8011944:	fb02 0013 	mls	r0, r2, r3, r0
 8011948:	2800      	cmp	r0, #0
 801194a:	bfb8      	it	lt
 801194c:	18c0      	addlt	r0, r0, r3
 801194e:	4b0a      	ldr	r3, [pc, #40]	@ (8011978 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8011950:	285a      	cmp	r0, #90	@ 0x5a
 8011952:	dc02      	bgt.n	801195a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8011954:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011958:	4770      	bx	lr
 801195a:	28b4      	cmp	r0, #180	@ 0xb4
 801195c:	dc02      	bgt.n	8011964 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801195e:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8011962:	e7f7      	b.n	8011954 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8011964:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8011968:	bfd4      	ite	le
 801196a:	38b4      	suble	r0, #180	@ 0xb4
 801196c:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8011970:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011974:	4240      	negs	r0, r0
 8011976:	4770      	bx	lr
 8011978:	0802d928 	.word	0x0802d928

0801197c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801197c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011980:	f04f 0300 	mov.w	r3, #0
 8011984:	bf2c      	ite	cs
 8011986:	f04f 4280 	movcs.w	r2, #1073741824	@ 0x40000000
 801198a:	f44f 4280 	movcc.w	r2, #16384	@ 0x4000
 801198e:	1899      	adds	r1, r3, r2
 8011990:	4288      	cmp	r0, r1
 8011992:	bf24      	itt	cs
 8011994:	1853      	addcs	r3, r2, r1
 8011996:	1a40      	subcs	r0, r0, r1
 8011998:	0892      	lsrs	r2, r2, #2
 801199a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801199e:	d1f6      	bne.n	801198e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80119a0:	4618      	mov	r0, r3
 80119a2:	4770      	bx	lr

080119a4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80119a4:	b510      	push	{r4, lr}
 80119a6:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80119aa:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80119ae:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80119b2:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80119b6:	139b      	asrs	r3, r3, #14
 80119b8:	13a4      	asrs	r4, r4, #14
 80119ba:	429c      	cmp	r4, r3
 80119bc:	bfb8      	it	lt
 80119be:	461c      	movlt	r4, r3
 80119c0:	2c01      	cmp	r4, #1
 80119c2:	dd07      	ble.n	80119d4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80119c4:	fb91 f1f4 	sdiv	r1, r1, r4
 80119c8:	fb90 f0f4 	sdiv	r0, r0, r4
 80119cc:	f7ff ffea 	bl	80119a4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80119d0:	4360      	muls	r0, r4
 80119d2:	bd10      	pop	{r4, pc}
 80119d4:	4340      	muls	r0, r0
 80119d6:	fb01 0001 	mla	r0, r1, r1, r0
 80119da:	f7ff ffcf 	bl	801197c <_ZN8touchgfx7CWRUtil5isqrtEm>
 80119de:	e7f8      	b.n	80119d2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080119e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80119e0:	2800      	cmp	r0, #0
 80119e2:	b508      	push	{r3, lr}
 80119e4:	da05      	bge.n	80119f2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80119e6:	4240      	negs	r0, r0
 80119e8:	f7ff fffa 	bl	80119e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80119ec:	4240      	negs	r0, r0
 80119ee:	b240      	sxtb	r0, r0
 80119f0:	bd08      	pop	{r3, pc}
 80119f2:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80119f6:	dc11      	bgt.n	8011a1c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80119f8:	f5b0 7f35 	cmp.w	r0, #724	@ 0x2d4
 80119fc:	dd09      	ble.n	8011a12 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80119fe:	4340      	muls	r0, r0
 8011a00:	f5c0 1080 	rsb	r0, r0, #1048576	@ 0x100000
 8011a04:	f7ff ffba 	bl	801197c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011a08:	f7ff ffea 	bl	80119e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011a0c:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8011a10:	e7ed      	b.n	80119ee <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8011a12:	3003      	adds	r0, #3
 8011a14:	4b02      	ldr	r3, [pc, #8]	@ (8011a20 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8011a16:	10c0      	asrs	r0, r0, #3
 8011a18:	5618      	ldrsb	r0, [r3, r0]
 8011a1a:	e7e9      	b.n	80119f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	e7e7      	b.n	80119f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011a20:	0802d8cc 	.word	0x0802d8cc

08011a24 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8011a24:	4281      	cmp	r1, r0
 8011a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a28:	460c      	mov	r4, r1
 8011a2a:	4615      	mov	r5, r2
 8011a2c:	dd07      	ble.n	8011a3e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8011a2e:	4601      	mov	r1, r0
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7ff fff7 	bl	8011a24 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011a36:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8011a3a:	b003      	add	sp, #12
 8011a3c:	bd30      	pop	{r4, r5, pc}
 8011a3e:	f7ff ffb1 	bl	80119a4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011a42:	6028      	str	r0, [r5, #0]
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d0f8      	beq.n	8011a3a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	ab01      	add	r3, sp, #4
 8011a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011a50:	4620      	mov	r0, r4
 8011a52:	f006 f877 	bl	8017b44 <_ZN8touchgfx6muldivElllRl>
 8011a56:	f7ff ffc3 	bl	80119e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011a5a:	e7ee      	b.n	8011a3a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08011a5c <_ZN8touchgfx4LineC1Ev>:
 8011a5c:	b510      	push	{r4, lr}
 8011a5e:	4604      	mov	r4, r0
 8011a60:	f7ff fe28 	bl	80116b4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011a64:	4b0c      	ldr	r3, [pc, #48]	@ (8011a98 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8011a66:	2220      	movs	r2, #32
 8011a68:	4620      	mov	r0, r4
 8011a6a:	6023      	str	r3, [r4, #0]
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8011a70:	2212      	movs	r2, #18
 8011a72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8011a76:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8011a78:	60a3      	str	r3, [r4, #8]
 8011a7a:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 8011a7e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8011a82:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
 8011a86:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
 8011a8a:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
 8011a8e:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
 8011a92:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
 8011a96:	bd10      	pop	{r4, pc}
 8011a98:	0802d9e8 	.word	0x0802d9e8

08011a9c <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 8011a9c:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8011aa0:	4770      	bx	lr

08011aa2 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8011aa2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa6:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011aac:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8011aae:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8011ab0:	1aff      	subs	r7, r7, r3
 8011ab2:	eba5 0502 	sub.w	r5, r5, r2
 8011ab6:	d142      	bne.n	8011b3e <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8011ab8:	b955      	cbnz	r5, 8011ad0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8011aba:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 8011abe:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
 8011ac2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8011ac6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8011aca:	b002      	add	sp, #8
 8011acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ad0:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8011ad4:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8011ad8:	4629      	mov	r1, r5
 8011ada:	2502      	movs	r5, #2
 8011adc:	4642      	mov	r2, r8
 8011ade:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8011ae0:	f006 f84f 	bl	8017b82 <_ZN8touchgfx6muldivElll>
 8011ae4:	4642      	mov	r2, r8
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	fb90 f6f5 	sdiv	r6, r0, r5
 8011aec:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8011aee:	f006 f848 	bl	8017b82 <_ZN8touchgfx6muldivElll>
 8011af2:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 8011af6:	fb90 f5f5 	sdiv	r5, r0, r5
 8011afa:	f1b9 0f00 	cmp.w	r9, #0
 8011afe:	d067      	beq.n	8011bd0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8011b00:	f1b9 0f02 	cmp.w	r9, #2
 8011b04:	d878      	bhi.n	8011bf8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8011b06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011b08:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8011b0a:	1b93      	subs	r3, r2, r6
 8011b0c:	4432      	add	r2, r6
 8011b0e:	1b5b      	subs	r3, r3, r5
 8011b10:	1b52      	subs	r2, r2, r5
 8011b12:	6463      	str	r3, [r4, #68]	@ 0x44
 8011b14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b16:	6522      	str	r2, [r4, #80]	@ 0x50
 8011b18:	18e9      	adds	r1, r5, r3
 8011b1a:	1b5b      	subs	r3, r3, r5
 8011b1c:	1b89      	subs	r1, r1, r6
 8011b1e:	1b9b      	subs	r3, r3, r6
 8011b20:	6561      	str	r1, [r4, #84]	@ 0x54
 8011b22:	1b81      	subs	r1, r0, r6
 8011b24:	4430      	add	r0, r6
 8011b26:	4429      	add	r1, r5
 8011b28:	4428      	add	r0, r5
 8011b2a:	64a1      	str	r1, [r4, #72]	@ 0x48
 8011b2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011b2e:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8011b30:	186f      	adds	r7, r5, r1
 8011b32:	1b49      	subs	r1, r1, r5
 8011b34:	4437      	add	r7, r6
 8011b36:	4431      	add	r1, r6
 8011b38:	65a7      	str	r7, [r4, #88]	@ 0x58
 8011b3a:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8011b3c:	e05b      	b.n	8011bf6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8011b3e:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011b42:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8011b46:	2d00      	cmp	r5, #0
 8011b48:	d0c6      	beq.n	8011ad8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011b4a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8011b4e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8011b52:	fb93 f2f8 	sdiv	r2, r3, r8
 8011b56:	fb08 3312 	mls	r3, r8, r2, r3
 8011b5a:	b353      	cbz	r3, 8011bb2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8011b5c:	fb98 f2f3 	sdiv	r2, r8, r3
 8011b60:	fb03 8812 	mls	r8, r3, r2, r8
 8011b64:	f1b8 0f00 	cmp.w	r8, #0
 8011b68:	d1f3      	bne.n	8011b52 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	f24b 5104 	movw	r1, #46340	@ 0xb504
 8011b70:	bf1c      	itt	ne
 8011b72:	fb97 f7f3 	sdivne	r7, r7, r3
 8011b76:	fb95 f5f3 	sdivne	r5, r5, r3
 8011b7a:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8011b7e:	4608      	mov	r0, r1
 8011b80:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8011b84:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8011b88:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8011b8c:	428b      	cmp	r3, r1
 8011b8e:	dd01      	ble.n	8011b94 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8011b90:	428a      	cmp	r2, r1
 8011b92:	dc10      	bgt.n	8011bb6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8011b94:	fb90 f3f3 	sdiv	r3, r0, r3
 8011b98:	fb90 f2f2 	sdiv	r2, r0, r2
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	bfa8      	it	ge
 8011ba0:	4613      	movge	r3, r2
 8011ba2:	435f      	muls	r7, r3
 8011ba4:	435d      	muls	r5, r3
 8011ba6:	4629      	mov	r1, r5
 8011ba8:	4638      	mov	r0, r7
 8011baa:	f7ff fefb 	bl	80119a4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011bae:	4680      	mov	r8, r0
 8011bb0:	e792      	b.n	8011ad8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011bb2:	4643      	mov	r3, r8
 8011bb4:	e7d9      	b.n	8011b6a <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8011bb6:	fb93 f3f1 	sdiv	r3, r3, r1
 8011bba:	fb92 f2f1 	sdiv	r2, r2, r1
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	bfcc      	ite	gt
 8011bc2:	3301      	addgt	r3, #1
 8011bc4:	1c53      	addle	r3, r2, #1
 8011bc6:	fb97 f7f3 	sdiv	r7, r7, r3
 8011bca:	fb95 f5f3 	sdiv	r5, r5, r3
 8011bce:	e7ea      	b.n	8011ba6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8011bd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011bd2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8011bd4:	1b93      	subs	r3, r2, r6
 8011bd6:	4432      	add	r2, r6
 8011bd8:	6463      	str	r3, [r4, #68]	@ 0x44
 8011bda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bdc:	6522      	str	r2, [r4, #80]	@ 0x50
 8011bde:	18e9      	adds	r1, r5, r3
 8011be0:	1b5b      	subs	r3, r3, r5
 8011be2:	6561      	str	r1, [r4, #84]	@ 0x54
 8011be4:	1b81      	subs	r1, r0, r6
 8011be6:	4430      	add	r0, r6
 8011be8:	64a1      	str	r1, [r4, #72]	@ 0x48
 8011bea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011bec:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8011bee:	186f      	adds	r7, r5, r1
 8011bf0:	1b49      	subs	r1, r1, r5
 8011bf2:	65a7      	str	r7, [r4, #88]	@ 0x58
 8011bf4:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8011bf6:	6623      	str	r3, [r4, #96]	@ 0x60
 8011bf8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011bfa:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8011bfe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011c00:	f104 0c54 	add.w	ip, r4, #84	@ 0x54
 8011c04:	9200      	str	r2, [sp, #0]
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	680f      	ldr	r7, [r1, #0]
 8011c0a:	3104      	adds	r1, #4
 8011c0c:	9800      	ldr	r0, [sp, #0]
 8011c0e:	42ba      	cmp	r2, r7
 8011c10:	bfa8      	it	ge
 8011c12:	463a      	movge	r2, r7
 8011c14:	4287      	cmp	r7, r0
 8011c16:	9801      	ldr	r0, [sp, #4]
 8011c18:	bfc8      	it	gt
 8011c1a:	9700      	strgt	r7, [sp, #0]
 8011c1c:	68cf      	ldr	r7, [r1, #12]
 8011c1e:	42bb      	cmp	r3, r7
 8011c20:	bfa8      	it	ge
 8011c22:	463b      	movge	r3, r7
 8011c24:	4287      	cmp	r7, r0
 8011c26:	bfc8      	it	gt
 8011c28:	9701      	strgt	r7, [sp, #4]
 8011c2a:	458c      	cmp	ip, r1
 8011c2c:	d1ec      	bne.n	8011c08 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8011c2e:	2720      	movs	r7, #32
 8011c30:	4668      	mov	r0, sp
 8011c32:	fb92 f8f7 	sdiv	r8, r2, r7
 8011c36:	fb93 f7f7 	sdiv	r7, r3, r7
 8011c3a:	f7ff fd72 	bl	8011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011c3e:	4682      	mov	sl, r0
 8011c40:	a801      	add	r0, sp, #4
 8011c42:	f7ff fd6e 	bl	8011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011c46:	ebaa 0208 	sub.w	r2, sl, r8
 8011c4a:	1bc0      	subs	r0, r0, r7
 8011c4c:	f1b9 0f01 	cmp.w	r9, #1
 8011c50:	f8a4 8064 	strh.w	r8, [r4, #100]	@ 0x64
 8011c54:	f8a4 7066 	strh.w	r7, [r4, #102]	@ 0x66
 8011c58:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 8011c5c:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 8011c60:	f47f af33 	bne.w	8011aca <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8011c64:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011c66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c68:	1b83      	subs	r3, r0, r6
 8011c6a:	6463      	str	r3, [r4, #68]	@ 0x44
 8011c6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011c6e:	18ea      	adds	r2, r5, r3
 8011c70:	6562      	str	r2, [r4, #84]	@ 0x54
 8011c72:	1b8a      	subs	r2, r1, r6
 8011c74:	4431      	add	r1, r6
 8011c76:	4406      	add	r6, r0
 8011c78:	64a2      	str	r2, [r4, #72]	@ 0x48
 8011c7a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011c7c:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8011c7e:	18af      	adds	r7, r5, r2
 8011c80:	1b52      	subs	r2, r2, r5
 8011c82:	1b5d      	subs	r5, r3, r5
 8011c84:	6526      	str	r6, [r4, #80]	@ 0x50
 8011c86:	65a7      	str	r7, [r4, #88]	@ 0x58
 8011c88:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8011c8a:	6625      	str	r5, [r4, #96]	@ 0x60
 8011c8c:	e71d      	b.n	8011aca <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08011c8e <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8011c8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011c90:	428b      	cmp	r3, r1
 8011c92:	d102      	bne.n	8011c9a <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8011c94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d003      	beq.n	8011ca2 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8011c9a:	e9c0 120b 	strd	r1, r2, [r0, #44]	@ 0x2c
 8011c9e:	f7ff bf00 	b.w	8011aa2 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011ca2:	4770      	bx	lr

08011ca4 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011ca8:	4604      	mov	r4, r0
 8011caa:	460e      	mov	r6, r1
 8011cac:	4615      	mov	r5, r2
 8011cae:	428b      	cmp	r3, r1
 8011cb0:	d102      	bne.n	8011cb8 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 8011cb2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d00e      	beq.n	8011cd6 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x32>
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	4620      	mov	r0, r4
 8011cbc:	699b      	ldr	r3, [r3, #24]
 8011cbe:	4798      	blx	r3
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	e9c4 650d 	strd	r6, r5, [r4, #52]	@ 0x34
 8011cc6:	f7ff feec 	bl	8011aa2 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011cca:	6823      	ldr	r3, [r4, #0]
 8011ccc:	4620      	mov	r0, r4
 8011cce:	699b      	ldr	r3, [r3, #24]
 8011cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cd4:	4718      	bx	r3
 8011cd6:	bd70      	pop	{r4, r5, r6, pc}

08011cd8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8011cd8:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
 8011cdc:	f7ff bee1 	b.w	8011aa2 <_ZN8touchgfx4Line17updateCachedShapeEv>

08011ce0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8011ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce4:	b0a4      	sub	sp, #144	@ 0x90
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 8011cea:	460e      	mov	r6, r1
 8011cec:	4601      	mov	r1, r0
 8011cee:	a805      	add	r0, sp, #20
 8011cf0:	f005 fdf6 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011cf4:	6823      	ldr	r3, [r4, #0]
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cfa:	4798      	blx	r3
 8011cfc:	4633      	mov	r3, r6
 8011cfe:	9000      	str	r0, [sp, #0]
 8011d00:	aa05      	add	r2, sp, #20
 8011d02:	4629      	mov	r1, r5
 8011d04:	a807      	add	r0, sp, #28
 8011d06:	f016 fc79 	bl	80285fc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	9303      	str	r3, [sp, #12]
 8011d0e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d17c      	bne.n	8011e10 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x130>
 8011d16:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011d18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011d1a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8011d1c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011d1e:	1ac0      	subs	r0, r0, r3
 8011d20:	eba1 0102 	sub.w	r1, r1, r2
 8011d24:	d437      	bmi.n	8011d96 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb6>
 8011d26:	2900      	cmp	r1, #0
 8011d28:	aa03      	add	r2, sp, #12
 8011d2a:	db2e      	blt.n	8011d8a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xaa>
 8011d2c:	f7ff fe7a 	bl	8011a24 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011d30:	f100 065a 	add.w	r6, r0, #90	@ 0x5a
 8011d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d36:	a807      	add	r0, sp, #28
 8011d38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011d3a:	f016 fdab 	bl	8028894 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011d3e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8011d40:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011d42:	a807      	add	r0, sp, #28
 8011d44:	f016 fdf3 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d48:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8011d4a:	2db3      	cmp	r5, #179	@ 0xb3
 8011d4c:	dc33      	bgt.n	8011db6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd6>
 8011d4e:	eba6 0805 	sub.w	r8, r6, r5
 8011d52:	4640      	mov	r0, r8
 8011d54:	f7ff fdf2 	bl	801193c <_ZN8touchgfx7CWRUtil4sineEi>
 8011d58:	a904      	add	r1, sp, #16
 8011d5a:	9004      	str	r0, [sp, #16]
 8011d5c:	a803      	add	r0, sp, #12
 8011d5e:	f7ff fcd5 	bl	801170c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011d62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d64:	1847      	adds	r7, r0, r1
 8011d66:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 8011d6a:	f7ff fde7 	bl	801193c <_ZN8touchgfx7CWRUtil4sineEi>
 8011d6e:	a905      	add	r1, sp, #20
 8011d70:	9005      	str	r0, [sp, #20]
 8011d72:	a803      	add	r0, sp, #12
 8011d74:	f7ff fcca 	bl	801170c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011d78:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011d7a:	4639      	mov	r1, r7
 8011d7c:	1a12      	subs	r2, r2, r0
 8011d7e:	a807      	add	r0, sp, #28
 8011d80:	f016 fdd5 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011d84:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011d86:	441d      	add	r5, r3
 8011d88:	e7df      	b.n	8011d4a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x6a>
 8011d8a:	4249      	negs	r1, r1
 8011d8c:	f7ff fe4a 	bl	8011a24 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011d90:	f1c0 065a 	rsb	r6, r0, #90	@ 0x5a
 8011d94:	e7ce      	b.n	8011d34 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x54>
 8011d96:	2900      	cmp	r1, #0
 8011d98:	f1c0 0000 	rsb	r0, r0, #0
 8011d9c:	aa03      	add	r2, sp, #12
 8011d9e:	db04      	blt.n	8011daa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xca>
 8011da0:	f7ff fe40 	bl	8011a24 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011da4:	f5c0 7687 	rsb	r6, r0, #270	@ 0x10e
 8011da8:	e7c4      	b.n	8011d34 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x54>
 8011daa:	4249      	negs	r1, r1
 8011dac:	f7ff fe3a 	bl	8011a24 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011db0:	f500 7687 	add.w	r6, r0, #270	@ 0x10e
 8011db4:	e7be      	b.n	8011d34 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x54>
 8011db6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8011db8:	a807      	add	r0, sp, #28
 8011dba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8011dbc:	f016 fdb7 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011dc0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011dc2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8011dc4:	a807      	add	r0, sp, #28
 8011dc6:	f016 fdb2 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011dca:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8011dcc:	f1c5 05b4 	rsb	r5, r5, #180	@ 0xb4
 8011dd0:	2d00      	cmp	r5, #0
 8011dd2:	dd31      	ble.n	8011e38 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x158>
 8011dd4:	eb05 0806 	add.w	r8, r5, r6
 8011dd8:	4640      	mov	r0, r8
 8011dda:	f7ff fdaf 	bl	801193c <_ZN8touchgfx7CWRUtil4sineEi>
 8011dde:	a904      	add	r1, sp, #16
 8011de0:	9004      	str	r0, [sp, #16]
 8011de2:	a803      	add	r0, sp, #12
 8011de4:	f7ff fc92 	bl	801170c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011de8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011dea:	1847      	adds	r7, r0, r1
 8011dec:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 8011df0:	f7ff fda4 	bl	801193c <_ZN8touchgfx7CWRUtil4sineEi>
 8011df4:	a905      	add	r1, sp, #20
 8011df6:	9005      	str	r0, [sp, #20]
 8011df8:	a803      	add	r0, sp, #12
 8011dfa:	f7ff fc87 	bl	801170c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011dfe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011e00:	4639      	mov	r1, r7
 8011e02:	1a12      	subs	r2, r2, r0
 8011e04:	a807      	add	r0, sp, #28
 8011e06:	f016 fd92 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e0a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011e0c:	1aed      	subs	r5, r5, r3
 8011e0e:	e7df      	b.n	8011dd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xf0>
 8011e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e12:	a807      	add	r0, sp, #28
 8011e14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011e16:	f016 fd3d 	bl	8028894 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011e1a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8011e1c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011e1e:	a807      	add	r0, sp, #28
 8011e20:	f016 fd85 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e24:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8011e26:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8011e28:	a807      	add	r0, sp, #28
 8011e2a:	f016 fd80 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e2e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011e30:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8011e32:	a807      	add	r0, sp, #28
 8011e34:	f016 fd7b 	bl	802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011e38:	21ff      	movs	r1, #255	@ 0xff
 8011e3a:	a807      	add	r0, sp, #28
 8011e3c:	f016 fc72 	bl	8028724 <_ZN8touchgfx6Canvas6renderEh>
 8011e40:	4b04      	ldr	r3, [pc, #16]	@ (8011e54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x174>)
 8011e42:	4604      	mov	r4, r0
 8011e44:	a80c      	add	r0, sp, #48	@ 0x30
 8011e46:	9307      	str	r3, [sp, #28]
 8011e48:	f002 f86e 	bl	8013f28 <_ZN8touchgfx7OutlineD1Ev>
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	b024      	add	sp, #144	@ 0x90
 8011e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e54:	0802e558 	.word	0x0802e558

08011e58 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8011e58:	6301      	str	r1, [r0, #48]	@ 0x30
 8011e5a:	4770      	bx	lr

08011e5c <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8011e5c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011e5e:	4770      	bx	lr

08011e60 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8011e60:	6341      	str	r1, [r0, #52]	@ 0x34
 8011e62:	4770      	bx	lr

08011e64 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8011e64:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011e66:	4770      	bx	lr

08011e68 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8011e68:	4770      	bx	lr

08011e6a <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 8011e6a:	4608      	mov	r0, r1
 8011e6c:	4770      	bx	lr

08011e6e <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8011e6e:	4608      	mov	r0, r1
 8011e70:	4770      	bx	lr

08011e72 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8011e72:	b530      	push	{r4, r5, lr}
 8011e74:	460d      	mov	r5, r1
 8011e76:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8011e78:	8949      	ldrh	r1, [r1, #10]
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	1ac9      	subs	r1, r1, r3
 8011e80:	6803      	ldr	r3, [r0, #0]
 8011e82:	f10d 0206 	add.w	r2, sp, #6
 8011e86:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8011e8a:	b209      	sxth	r1, r1
 8011e8c:	4798      	blx	r3
 8011e8e:	b1a0      	cbz	r0, 8011eba <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e90:	792b      	ldrb	r3, [r5, #4]
 8011e92:	b993      	cbnz	r3, 8011eba <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e94:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8011e98:	b178      	cbz	r0, 8011eba <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011e9a:	6803      	ldr	r3, [r0, #0]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	4798      	blx	r3
 8011ea0:	b158      	cbz	r0, 8011eba <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8011ea2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011ea6:	aa02      	add	r2, sp, #8
 8011ea8:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8011eac:	4621      	mov	r1, r4
 8011eae:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011eb2:	9503      	str	r5, [sp, #12]
 8011eb4:	6803      	ldr	r3, [r0, #0]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	4798      	blx	r3
 8011eba:	b005      	add	sp, #20
 8011ebc:	bd30      	pop	{r4, r5, pc}

08011ebe <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8011ebe:	428a      	cmp	r2, r1
 8011ec0:	bfbc      	itt	lt
 8011ec2:	460b      	movlt	r3, r1
 8011ec4:	4611      	movlt	r1, r2
 8011ec6:	b510      	push	{r4, lr}
 8011ec8:	bfb8      	it	lt
 8011eca:	461a      	movlt	r2, r3
 8011ecc:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	428b      	cmp	r3, r1
 8011ed4:	d103      	bne.n	8011ede <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8011ed6:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8011eda:	4293      	cmp	r3, r2
 8011edc:	d011      	beq.n	8011f02 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8011ede:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8011ee2:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8011ee6:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8011eea:	f005 fc5e 	bl	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011eee:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8011ef2:	f005 fc5a 	bl	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011ef6:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8011efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011efe:	f005 bc54 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f02:	bd10      	pop	{r4, pc}

08011f04 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8011f04:	428a      	cmp	r2, r1
 8011f06:	bfbc      	itt	lt
 8011f08:	460b      	movlt	r3, r1
 8011f0a:	4611      	movlt	r1, r2
 8011f0c:	b510      	push	{r4, lr}
 8011f0e:	bfb8      	it	lt
 8011f10:	461a      	movlt	r2, r3
 8011f12:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8011f16:	4604      	mov	r4, r0
 8011f18:	428b      	cmp	r3, r1
 8011f1a:	d103      	bne.n	8011f24 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8011f1c:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d011      	beq.n	8011f48 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8011f24:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8011f28:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8011f2c:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8011f30:	f005 fc3b 	bl	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f34:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8011f38:	f005 fc37 	bl	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f3c:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8011f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f44:	f005 bc31 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 8011f48:	bd10      	pop	{r4, pc}

08011f4a <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	3038      	adds	r0, #56	@ 0x38
 8011f4e:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8011f52:	f005 bc2a 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>

08011f56 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8011f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f5a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8011f5e:	4605      	mov	r5, r0
 8011f60:	460f      	mov	r7, r1
 8011f62:	4616      	mov	r6, r2
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d03d      	beq.n	8011fe4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8011f68:	6803      	ldr	r3, [r0, #0]
 8011f6a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011f6e:	4798      	blx	r3
 8011f70:	682b      	ldr	r3, [r5, #0]
 8011f72:	b204      	sxth	r4, r0
 8011f74:	4628      	mov	r0, r5
 8011f76:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8011f7a:	4798      	blx	r3
 8011f7c:	b203      	sxth	r3, r0
 8011f7e:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 8011f82:	429c      	cmp	r4, r3
 8011f84:	bfc4      	itt	gt
 8011f86:	4622      	movgt	r2, r4
 8011f88:	461c      	movgt	r4, r3
 8011f8a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011f8e:	bfc8      	it	gt
 8011f90:	4613      	movgt	r3, r2
 8011f92:	4284      	cmp	r4, r0
 8011f94:	da26      	bge.n	8011fe4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8011f96:	4298      	cmp	r0, r3
 8011f98:	bfa8      	it	ge
 8011f9a:	4618      	movge	r0, r3
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	db21      	blt.n	8011fe4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8011fa0:	b9ef      	cbnz	r7, 8011fde <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 8011fa2:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 8011fa6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011faa:	4619      	mov	r1, r3
 8011fac:	42a0      	cmp	r0, r4
 8011fae:	dd0b      	ble.n	8011fc8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 8011fb0:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 8011fb4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8011fb8:	3401      	adds	r4, #1
 8011fba:	4291      	cmp	r1, r2
 8011fbc:	bfa8      	it	ge
 8011fbe:	4611      	movge	r1, r2
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	bfb8      	it	lt
 8011fc4:	4613      	movlt	r3, r2
 8011fc6:	e7f1      	b.n	8011fac <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8011fc8:	1b89      	subs	r1, r1, r6
 8011fca:	18f2      	adds	r2, r6, r3
 8011fcc:	4291      	cmp	r1, r2
 8011fce:	d009      	beq.n	8011fe4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8011fd0:	682b      	ldr	r3, [r5, #0]
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	4718      	bx	r3
 8011fde:	4273      	negs	r3, r6
 8011fe0:	4631      	mov	r1, r6
 8011fe2:	e7e3      	b.n	8011fac <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8011fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fe8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8011fe8:	b530      	push	{r4, r5, lr}
 8011fea:	790b      	ldrb	r3, [r1, #4]
 8011fec:	b085      	sub	sp, #20
 8011fee:	4604      	mov	r4, r0
 8011ff0:	460d      	mov	r5, r1
 8011ff2:	2b02      	cmp	r3, #2
 8011ff4:	d020      	beq.n	8012038 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011ff6:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8011ff8:	f10d 0206 	add.w	r2, sp, #6
 8011ffc:	88c9      	ldrh	r1, [r1, #6]
 8011ffe:	1ac9      	subs	r1, r1, r3
 8012000:	6803      	ldr	r3, [r0, #0]
 8012002:	b209      	sxth	r1, r1
 8012004:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8012008:	4798      	blx	r3
 801200a:	b1a8      	cbz	r0, 8012038 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801200c:	792b      	ldrb	r3, [r5, #4]
 801200e:	2b01      	cmp	r3, #1
 8012010:	d812      	bhi.n	8012038 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012012:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8012016:	b178      	cbz	r0, 8012038 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012018:	6803      	ldr	r3, [r0, #0]
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	4798      	blx	r3
 801201e:	b158      	cbz	r0, 8012038 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012020:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012024:	aa02      	add	r2, sp, #8
 8012026:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801202a:	4621      	mov	r1, r4
 801202c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8012030:	9503      	str	r5, [sp, #12]
 8012032:	6803      	ldr	r3, [r0, #0]
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	4798      	blx	r3
 8012038:	b005      	add	sp, #20
 801203a:	bd30      	pop	{r4, r5, pc}

0801203c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	4604      	mov	r4, r0
 8012042:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8012046:	4690      	mov	r8, r2
 8012048:	461f      	mov	r7, r3
 801204a:	9e06      	ldr	r6, [sp, #24]
 801204c:	b928      	cbnz	r0, 801205a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801204e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012052:	8033      	strh	r3, [r6, #0]
 8012054:	803b      	strh	r3, [r7, #0]
 8012056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801205a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 801205e:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8012062:	1883      	adds	r3, r0, r2
 8012064:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8012068:	1ad2      	subs	r2, r2, r3
 801206a:	b212      	sxth	r2, r2
 801206c:	2a01      	cmp	r2, #1
 801206e:	dc07      	bgt.n	8012080 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8012070:	2300      	movs	r3, #0
 8012072:	803b      	strh	r3, [r7, #0]
 8012074:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8012078:	3b01      	subs	r3, #1
 801207a:	8033      	strh	r3, [r6, #0]
 801207c:	2001      	movs	r0, #1
 801207e:	e7ea      	b.n	8012056 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012080:	1a08      	subs	r0, r1, r0
 8012082:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8012086:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 801208a:	0140      	lsls	r0, r0, #5
 801208c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801208e:	1a5b      	subs	r3, r3, r1
 8012090:	d459      	bmi.n	8012146 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8012092:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012096:	fb93 f1f5 	sdiv	r1, r3, r5
 801209a:	2302      	movs	r3, #2
 801209c:	fb91 f1f3 	sdiv	r1, r1, r3
 80120a0:	3a01      	subs	r2, #1
 80120a2:	f005 fd6e 	bl	8017b82 <_ZN8touchgfx6muldivElll>
 80120a6:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80120aa:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80120ae:	2900      	cmp	r1, #0
 80120b0:	db55      	blt.n	801215e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80120b2:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80120b6:	2502      	movs	r5, #2
 80120b8:	fb93 f3fc 	sdiv	r3, r3, ip
 80120bc:	fb93 f3f5 	sdiv	r3, r3, r5
 80120c0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80120c4:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 80120c8:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 80120cc:	1a52      	subs	r2, r2, r1
 80120ce:	eba8 0003 	sub.w	r0, r8, r3
 80120d2:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80120d6:	d44e      	bmi.n	8012176 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 80120d8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80120dc:	fb92 f1fc 	sdiv	r1, r2, ip
 80120e0:	2202      	movs	r2, #2
 80120e2:	fb91 f1f2 	sdiv	r1, r1, r2
 80120e6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80120ea:	4413      	add	r3, r2
 80120ec:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80120f0:	1ad2      	subs	r2, r2, r3
 80120f2:	b212      	sxth	r2, r2
 80120f4:	3a01      	subs	r2, #1
 80120f6:	f005 fd44 	bl	8017b82 <_ZN8touchgfx6muldivElll>
 80120fa:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 80120fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012100:	2b00      	cmp	r3, #0
 8012102:	db44      	blt.n	801218e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8012104:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012108:	fb93 f3f2 	sdiv	r3, r3, r2
 801210c:	2202      	movs	r2, #2
 801210e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012112:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8012116:	2020      	movs	r0, #32
 8012118:	429d      	cmp	r5, r3
 801211a:	bfde      	ittt	le
 801211c:	461a      	movle	r2, r3
 801211e:	462b      	movle	r3, r5
 8012120:	4615      	movle	r5, r2
 8012122:	b21b      	sxth	r3, r3
 8012124:	2d00      	cmp	r5, #0
 8012126:	bfaa      	itet	ge
 8012128:	351f      	addge	r5, #31
 801212a:	fb95 f5f0 	sdivlt	r5, r5, r0
 801212e:	116d      	asrge	r5, r5, #5
 8012130:	fb93 f3f0 	sdiv	r3, r3, r0
 8012134:	b22d      	sxth	r5, r5
 8012136:	803b      	strh	r3, [r7, #0]
 8012138:	2d00      	cmp	r5, #0
 801213a:	8035      	strh	r5, [r6, #0]
 801213c:	da33      	bge.n	80121a6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 801213e:	2000      	movs	r0, #0
 8012140:	8030      	strh	r0, [r6, #0]
 8012142:	8038      	strh	r0, [r7, #0]
 8012144:	e787      	b.n	8012056 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012146:	f06f 0101 	mvn.w	r1, #1
 801214a:	fb01 5303 	mla	r3, r1, r3, r5
 801214e:	1e59      	subs	r1, r3, #1
 8012150:	2302      	movs	r3, #2
 8012152:	fb91 f1f5 	sdiv	r1, r1, r5
 8012156:	fb91 f1f3 	sdiv	r1, r1, r3
 801215a:	4249      	negs	r1, r1
 801215c:	e7a0      	b.n	80120a0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 801215e:	f06f 0301 	mvn.w	r3, #1
 8012162:	2502      	movs	r5, #2
 8012164:	fb03 c301 	mla	r3, r3, r1, ip
 8012168:	3b01      	subs	r3, #1
 801216a:	fb93 f3fc 	sdiv	r3, r3, ip
 801216e:	fb93 f3f5 	sdiv	r3, r3, r5
 8012172:	425b      	negs	r3, r3
 8012174:	e7a4      	b.n	80120c0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8012176:	f06f 0101 	mvn.w	r1, #1
 801217a:	fb01 c202 	mla	r2, r1, r2, ip
 801217e:	1e51      	subs	r1, r2, #1
 8012180:	2202      	movs	r2, #2
 8012182:	fb91 f1fc 	sdiv	r1, r1, ip
 8012186:	fb91 f1f2 	sdiv	r1, r1, r2
 801218a:	4249      	negs	r1, r1
 801218c:	e7ab      	b.n	80120e6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 801218e:	f06f 0101 	mvn.w	r1, #1
 8012192:	fb01 2303 	mla	r3, r1, r3, r2
 8012196:	3b01      	subs	r3, #1
 8012198:	fb93 f3f2 	sdiv	r3, r3, r2
 801219c:	2202      	movs	r2, #2
 801219e:	fb93 f3f2 	sdiv	r3, r3, r2
 80121a2:	425b      	negs	r3, r3
 80121a4:	e7b5      	b.n	8012112 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80121a6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80121aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80121ae:	4293      	cmp	r3, r2
 80121b0:	dc05      	bgt.n	80121be <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80121b2:	3b01      	subs	r3, #1
 80121b4:	2000      	movs	r0, #0
 80121b6:	b21b      	sxth	r3, r3
 80121b8:	8033      	strh	r3, [r6, #0]
 80121ba:	803b      	strh	r3, [r7, #0]
 80121bc:	e74b      	b.n	8012056 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80121be:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80121c2:	803a      	strh	r2, [r7, #0]
 80121c4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80121c8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80121cc:	4293      	cmp	r3, r2
 80121ce:	bfdc      	itt	le
 80121d0:	f103 33ff 	addle.w	r3, r3, #4294967295
 80121d4:	b21a      	sxthle	r2, r3
 80121d6:	8032      	strh	r2, [r6, #0]
 80121d8:	e750      	b.n	801207c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

080121dc <_ZN8touchgfx9ContainerC1Ev>:
 80121dc:	2101      	movs	r1, #1
 80121de:	2200      	movs	r2, #0
 80121e0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80121e4:	4909      	ldr	r1, [pc, #36]	@ (801220c <_ZN8touchgfx9ContainerC1Ev+0x30>)
 80121e6:	8082      	strh	r2, [r0, #4]
 80121e8:	80c2      	strh	r2, [r0, #6]
 80121ea:	8102      	strh	r2, [r0, #8]
 80121ec:	8142      	strh	r2, [r0, #10]
 80121ee:	8182      	strh	r2, [r0, #12]
 80121f0:	81c2      	strh	r2, [r0, #14]
 80121f2:	8202      	strh	r2, [r0, #16]
 80121f4:	8242      	strh	r2, [r0, #18]
 80121f6:	61c2      	str	r2, [r0, #28]
 80121f8:	8402      	strh	r2, [r0, #32]
 80121fa:	8442      	strh	r2, [r0, #34]	@ 0x22
 80121fc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012200:	6001      	str	r1, [r0, #0]
 8012202:	6282      	str	r2, [r0, #40]	@ 0x28
 8012204:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	0802d724 	.word	0x0802d724

08012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8012210:	6800      	ldr	r0, [r0, #0]
 8012212:	2800      	cmp	r0, #0
 8012214:	bfbd      	ittte	lt
 8012216:	380f      	sublt	r0, #15
 8012218:	2320      	movlt	r3, #32
 801221a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801221e:	3010      	addge	r0, #16
 8012220:	bfa8      	it	ge
 8012222:	1140      	asrge	r0, r0, #5
 8012224:	4770      	bx	lr

08012226 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8012226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222a:	4605      	mov	r5, r0
 801222c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8012230:	4688      	mov	r8, r1
 8012232:	4691      	mov	r9, r2
 8012234:	469a      	mov	sl, r3
 8012236:	b360      	cbz	r0, 8012292 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8012238:	2700      	movs	r7, #0
 801223a:	f04f 3bff 	mov.w	fp, #4294967295
 801223e:	b23e      	sxth	r6, r7
 8012240:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8012244:	42b3      	cmp	r3, r6
 8012246:	dd23      	ble.n	8012290 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	4631      	mov	r1, r6
 801224c:	4628      	mov	r0, r5
 801224e:	3701      	adds	r7, #1
 8012250:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012254:	4798      	blx	r3
 8012256:	9001      	str	r0, [sp, #4]
 8012258:	a801      	add	r0, sp, #4
 801225a:	f7ff ffd9 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801225e:	682b      	ldr	r3, [r5, #0]
 8012260:	eba0 0008 	sub.w	r0, r0, r8
 8012264:	4631      	mov	r1, r6
 8012266:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801226a:	b204      	sxth	r4, r0
 801226c:	4628      	mov	r0, r5
 801226e:	4798      	blx	r3
 8012270:	9001      	str	r0, [sp, #4]
 8012272:	a801      	add	r0, sp, #4
 8012274:	f7ff ffcc 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012278:	eba0 0009 	sub.w	r0, r0, r9
 801227c:	fb10 f000 	smulbb	r0, r0, r0
 8012280:	fb04 0404 	mla	r4, r4, r4, r0
 8012284:	455c      	cmp	r4, fp
 8012286:	bf3c      	itt	cc
 8012288:	f8aa 6000 	strhcc.w	r6, [sl]
 801228c:	46a3      	movcc	fp, r4
 801228e:	e7d6      	b.n	801223e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8012290:	2001      	movs	r0, #1
 8012292:	b003      	add	sp, #12
 8012294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012298 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8012298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801229c:	460e      	mov	r6, r1
 801229e:	2100      	movs	r1, #0
 80122a0:	4605      	mov	r5, r0
 80122a2:	4617      	mov	r7, r2
 80122a4:	8011      	strh	r1, [r2, #0]
 80122a6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80122aa:	b36b      	cbz	r3, 8012308 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 80122ac:	6803      	ldr	r3, [r0, #0]
 80122ae:	f10d 0808 	add.w	r8, sp, #8
 80122b2:	2401      	movs	r4, #1
 80122b4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80122b8:	4798      	blx	r3
 80122ba:	f848 0d04 	str.w	r0, [r8, #-4]!
 80122be:	4640      	mov	r0, r8
 80122c0:	f7ff ffa6 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80122c4:	b200      	sxth	r0, r0
 80122c6:	1b80      	subs	r0, r0, r6
 80122c8:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80122cc:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80122d0:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 80122d4:	42a3      	cmp	r3, r4
 80122d6:	dd1b      	ble.n	8012310 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 80122d8:	682b      	ldr	r3, [r5, #0]
 80122da:	4621      	mov	r1, r4
 80122dc:	4628      	mov	r0, r5
 80122de:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80122e2:	4798      	blx	r3
 80122e4:	9001      	str	r0, [sp, #4]
 80122e6:	4640      	mov	r0, r8
 80122e8:	f7ff ff92 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80122ec:	b200      	sxth	r0, r0
 80122ee:	1b80      	subs	r0, r0, r6
 80122f0:	2800      	cmp	r0, #0
 80122f2:	bfb8      	it	lt
 80122f4:	4240      	neglt	r0, r0
 80122f6:	4548      	cmp	r0, r9
 80122f8:	bf38      	it	cc
 80122fa:	803c      	strhcc	r4, [r7, #0]
 80122fc:	f104 0401 	add.w	r4, r4, #1
 8012300:	bf38      	it	cc
 8012302:	4681      	movcc	r9, r0
 8012304:	b224      	sxth	r4, r4
 8012306:	e7e3      	b.n	80122d0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8012308:	4618      	mov	r0, r3
 801230a:	b003      	add	sp, #12
 801230c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012310:	2001      	movs	r0, #1
 8012312:	e7fa      	b.n	801230a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08012314 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8012314:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8012318:	f9bd 3000 	ldrsh.w	r3, [sp]
 801231c:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8012320:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8012324:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8012328:	4770      	bx	lr

0801232a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 801232a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801232c:	4604      	mov	r4, r0
 801232e:	3038      	adds	r0, #56	@ 0x38
 8012330:	460d      	mov	r5, r1
 8012332:	f7fd fdf9 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012336:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 801233a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801233e:	4628      	mov	r0, r5
 8012340:	9200      	str	r2, [sp, #0]
 8012342:	2200      	movs	r2, #0
 8012344:	4611      	mov	r1, r2
 8012346:	f7f3 fa6d 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 801234a:	b003      	add	sp, #12
 801234c:	bd30      	pop	{r4, r5, pc}

0801234e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 801234e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012350:	4604      	mov	r4, r0
 8012352:	3064      	adds	r0, #100	@ 0x64
 8012354:	460d      	mov	r5, r1
 8012356:	f7fd fde7 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801235a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 801235e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8012362:	4628      	mov	r0, r5
 8012364:	9200      	str	r2, [sp, #0]
 8012366:	2200      	movs	r2, #0
 8012368:	4611      	mov	r1, r2
 801236a:	f7f3 fa5b 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 801236e:	b003      	add	sp, #12
 8012370:	bd30      	pop	{r4, r5, pc}

08012372 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8012372:	b538      	push	{r3, r4, r5, lr}
 8012374:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8012378:	460d      	mov	r5, r1
 801237a:	428b      	cmp	r3, r1
 801237c:	dd08      	ble.n	8012390 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801237e:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8012380:	b134      	cbz	r4, 8012390 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012382:	6823      	ldr	r3, [r4, #0]
 8012384:	4620      	mov	r0, r4
 8012386:	4629      	mov	r1, r5
 8012388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801238a:	4798      	blx	r3
 801238c:	69a4      	ldr	r4, [r4, #24]
 801238e:	e7f7      	b.n	8012380 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8012390:	bd38      	pop	{r3, r4, r5, pc}

08012392 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8012392:	b570      	push	{r4, r5, r6, lr}
 8012394:	4606      	mov	r6, r0
 8012396:	460d      	mov	r5, r1
 8012398:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 801239c:	b134      	cbz	r4, 80123ac <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	4620      	mov	r0, r4
 80123a2:	4629      	mov	r1, r5
 80123a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123a6:	4798      	blx	r3
 80123a8:	69a4      	ldr	r4, [r4, #24]
 80123aa:	e7f7      	b.n	801239c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 80123ac:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 80123b0:	b134      	cbz	r4, 80123c0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	4620      	mov	r0, r4
 80123b6:	4629      	mov	r1, r5
 80123b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123ba:	4798      	blx	r3
 80123bc:	69a4      	ldr	r4, [r4, #24]
 80123be:	e7f7      	b.n	80123b0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80123c0:	bd70      	pop	{r4, r5, r6, pc}

080123c2 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80123c2:	b538      	push	{r3, r4, r5, lr}
 80123c4:	4604      	mov	r4, r0
 80123c6:	2500      	movs	r5, #0
 80123c8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80123cc:	42ab      	cmp	r3, r5
 80123ce:	db05      	blt.n	80123dc <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80123d0:	b229      	sxth	r1, r5
 80123d2:	4620      	mov	r0, r4
 80123d4:	f7ff ffdd 	bl	8012392 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80123d8:	3501      	adds	r5, #1
 80123da:	e7f5      	b.n	80123c8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80123dc:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80123e0:	f005 f9e3 	bl	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 80123e4:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80123e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123ec:	f005 b9dd 	b.w	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>

080123f0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80123f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123f2:	4604      	mov	r4, r0
 80123f4:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80123f6:	b15d      	cbz	r5, 8012410 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80123f8:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80123fc:	4628      	mov	r0, r5
 80123fe:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8012402:	9200      	str	r2, [sp, #0]
 8012404:	2200      	movs	r2, #0
 8012406:	4611      	mov	r1, r2
 8012408:	f7f3 fa0c 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 801240c:	69ad      	ldr	r5, [r5, #24]
 801240e:	e7f2      	b.n	80123f6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8012410:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8012414:	b15d      	cbz	r5, 801242e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8012416:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 801241a:	4628      	mov	r0, r5
 801241c:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8012420:	9200      	str	r2, [sp, #0]
 8012422:	2200      	movs	r2, #0
 8012424:	4611      	mov	r1, r2
 8012426:	f7f3 f9fd 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 801242a:	69ad      	ldr	r5, [r5, #24]
 801242c:	e7f2      	b.n	8012414 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801242e:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8012432:	b15d      	cbz	r5, 801244c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8012434:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8012438:	4628      	mov	r0, r5
 801243a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 801243e:	9200      	str	r2, [sp, #0]
 8012440:	2200      	movs	r2, #0
 8012442:	4611      	mov	r1, r2
 8012444:	f7f3 f9ee 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012448:	69ad      	ldr	r5, [r5, #24]
 801244a:	e7f2      	b.n	8012432 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801244c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8012450:	b15d      	cbz	r5, 801246a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8012452:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8012456:	4628      	mov	r0, r5
 8012458:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 801245c:	9200      	str	r2, [sp, #0]
 801245e:	2200      	movs	r2, #0
 8012460:	4611      	mov	r1, r2
 8012462:	f7f3 f9df 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012466:	69ad      	ldr	r5, [r5, #24]
 8012468:	e7f2      	b.n	8012450 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801246a:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 801246e:	b15d      	cbz	r5, 8012488 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8012470:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8012474:	4628      	mov	r0, r5
 8012476:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801247a:	9200      	str	r2, [sp, #0]
 801247c:	2200      	movs	r2, #0
 801247e:	4611      	mov	r1, r2
 8012480:	f7f3 f9d0 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012484:	69ad      	ldr	r5, [r5, #24]
 8012486:	e7f2      	b.n	801246e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	4620      	mov	r0, r4
 801248c:	695b      	ldr	r3, [r3, #20]
 801248e:	b003      	add	sp, #12
 8012490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012494:	4718      	bx	r3

08012496 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8012496:	b430      	push	{r4, r5}
 8012498:	b28a      	uxth	r2, r1
 801249a:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 801249e:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 80124a2:	1b15      	subs	r5, r2, r4
 80124a4:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 80124a8:	8101      	strh	r1, [r0, #8]
 80124aa:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 80124ae:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 80124b2:	442c      	add	r4, r5
 80124b4:	1b12      	subs	r2, r2, r4
 80124b6:	bc30      	pop	{r4, r5}
 80124b8:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80124bc:	f7ff bf98 	b.w	80123f0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080124c0 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 80124c0:	b430      	push	{r4, r5}
 80124c2:	b28a      	uxth	r2, r1
 80124c4:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 80124c8:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 80124cc:	1b15      	subs	r5, r2, r4
 80124ce:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 80124d2:	8141      	strh	r1, [r0, #10]
 80124d4:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 80124d8:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 80124dc:	442c      	add	r4, r5
 80124de:	1b12      	subs	r2, r2, r4
 80124e0:	bc30      	pop	{r4, r5}
 80124e2:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80124e6:	f7ff bf83 	b.w	80123f0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080124ea <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 80124ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80124ee:	fa1f fa83 	uxth.w	sl, r3
 80124f2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80124f6:	4615      	mov	r5, r2
 80124f8:	4699      	mov	r9, r3
 80124fa:	fa1f f887 	uxth.w	r8, r7
 80124fe:	8903      	ldrh	r3, [r0, #8]
 8012500:	4452      	add	r2, sl
 8012502:	4604      	mov	r4, r0
 8012504:	8940      	ldrh	r0, [r0, #10]
 8012506:	460e      	mov	r6, r1
 8012508:	1a9b      	subs	r3, r3, r2
 801250a:	eb08 0201 	add.w	r2, r8, r1
 801250e:	1a80      	subs	r0, r0, r2
 8012510:	b21b      	sxth	r3, r3
 8012512:	460a      	mov	r2, r1
 8012514:	4629      	mov	r1, r5
 8012516:	b200      	sxth	r0, r0
 8012518:	9000      	str	r0, [sp, #0]
 801251a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801251e:	f7f3 f981 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012522:	2200      	movs	r2, #0
 8012524:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012528:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801252c:	4611      	mov	r1, r2
 801252e:	9600      	str	r6, [sp, #0]
 8012530:	f7f3 f978 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012534:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012538:	2200      	movs	r2, #0
 801253a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801253e:	9300      	str	r3, [sp, #0]
 8012540:	462b      	mov	r3, r5
 8012542:	4611      	mov	r1, r2
 8012544:	f7f3 f96e 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012548:	8921      	ldrh	r1, [r4, #8]
 801254a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801254e:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8012552:	eba1 010a 	sub.w	r1, r1, sl
 8012556:	2200      	movs	r2, #0
 8012558:	9300      	str	r3, [sp, #0]
 801255a:	464b      	mov	r3, r9
 801255c:	b209      	sxth	r1, r1
 801255e:	f7f3 f961 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012562:	8962      	ldrh	r2, [r4, #10]
 8012564:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8012568:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801256c:	eba2 0208 	sub.w	r2, r2, r8
 8012570:	9700      	str	r7, [sp, #0]
 8012572:	2100      	movs	r1, #0
 8012574:	b212      	sxth	r2, r2
 8012576:	f7f3 f955 	bl	8005824 <_ZN8touchgfx8Drawable11setPositionEssss>
 801257a:	4620      	mov	r0, r4
 801257c:	b002      	add	sp, #8
 801257e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012582:	f7ff bf35 	b.w	80123f0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08012588 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8012588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258c:	b085      	sub	sp, #20
 801258e:	4604      	mov	r4, r0
 8012590:	2601      	movs	r6, #1
 8012592:	2500      	movs	r5, #0
 8012594:	9103      	str	r1, [sp, #12]
 8012596:	f7ff fe21 	bl	80121dc <_ZN8touchgfx9ContainerC1Ev>
 801259a:	4b2c      	ldr	r3, [pc, #176]	@ (801264c <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 801259c:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 80125a0:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 80125a4:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 80125a8:	6023      	str	r3, [r4, #0]
 80125aa:	23ff      	movs	r3, #255	@ 0xff
 80125ac:	4658      	mov	r0, fp
 80125ae:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 80125b2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80125b6:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 80125ba:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80125be:	f7ff fe0d 	bl	80121dc <_ZN8touchgfx9ContainerC1Ev>
 80125c2:	4648      	mov	r0, r9
 80125c4:	f7ff fe0a 	bl	80121dc <_ZN8touchgfx9ContainerC1Ev>
 80125c8:	4640      	mov	r0, r8
 80125ca:	f7ff fe07 	bl	80121dc <_ZN8touchgfx9ContainerC1Ev>
 80125ce:	4650      	mov	r0, sl
 80125d0:	f7ff fe04 	bl	80121dc <_ZN8touchgfx9ContainerC1Ev>
 80125d4:	4638      	mov	r0, r7
 80125d6:	f7ff fe01 	bl	80121dc <_ZN8touchgfx9ContainerC1Ev>
 80125da:	9903      	ldr	r1, [sp, #12]
 80125dc:	4620      	mov	r0, r4
 80125de:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80125e2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80125e6:	4659      	mov	r1, fp
 80125e8:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80125ec:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 80125f0:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 80125f4:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 80125f8:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 80125fc:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8012600:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8012604:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8012608:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 801260c:	f7fd fc8c 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012610:	4651      	mov	r1, sl
 8012612:	4620      	mov	r0, r4
 8012614:	f7fd fc88 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012618:	4649      	mov	r1, r9
 801261a:	4620      	mov	r0, r4
 801261c:	f7fd fc84 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012620:	4641      	mov	r1, r8
 8012622:	4620      	mov	r0, r4
 8012624:	f7fd fc80 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012628:	4639      	mov	r1, r7
 801262a:	4620      	mov	r0, r4
 801262c:	f7fd fc7c 	bl	800ff28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012630:	4620      	mov	r0, r4
 8012632:	9500      	str	r5, [sp, #0]
 8012634:	462b      	mov	r3, r5
 8012636:	462a      	mov	r2, r5
 8012638:	4629      	mov	r1, r5
 801263a:	f7ff ff56 	bl	80124ea <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801263e:	4620      	mov	r0, r4
 8012640:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8012644:	b005      	add	sp, #20
 8012646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264a:	bf00      	nop
 801264c:	0802dbf8 	.word	0x0802dbf8

08012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012650:	4291      	cmp	r1, r2
 8012652:	4613      	mov	r3, r2
 8012654:	d003      	beq.n	801265e <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8012656:	460a      	mov	r2, r1
 8012658:	4619      	mov	r1, r3
 801265a:	f005 ba92 	b.w	8017b82 <_ZN8touchgfx6muldivElll>
 801265e:	4770      	bx	lr

08012660 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	6803      	ldr	r3, [r0, #0]
 8012666:	460d      	mov	r5, r1
 8012668:	4604      	mov	r4, r0
 801266a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801266e:	4798      	blx	r3
 8012670:	42a8      	cmp	r0, r5
 8012672:	4606      	mov	r6, r0
 8012674:	d024      	beq.n	80126c0 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8012676:	6823      	ldr	r3, [r4, #0]
 8012678:	4601      	mov	r1, r0
 801267a:	462a      	mov	r2, r5
 801267c:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8012680:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8012684:	f7ff ffe4 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012688:	4680      	mov	r8, r0
 801268a:	462a      	mov	r2, r5
 801268c:	4631      	mov	r1, r6
 801268e:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8012692:	f7ff ffdd 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012696:	4641      	mov	r1, r8
 8012698:	4602      	mov	r2, r0
 801269a:	4620      	mov	r0, r4
 801269c:	47b8      	blx	r7
 801269e:	462a      	mov	r2, r5
 80126a0:	4631      	mov	r1, r6
 80126a2:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 80126a6:	f7ff ffd3 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126aa:	462a      	mov	r2, r5
 80126ac:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 80126b0:	4631      	mov	r1, r6
 80126b2:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80126b6:	f7ff ffcb 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126ba:	6325      	str	r5, [r4, #48]	@ 0x30
 80126bc:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 80126c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126c4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 80126c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c8:	4604      	mov	r4, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	b1b2      	cbz	r2, 80126fc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80126ce:	6803      	ldr	r3, [r0, #0]
 80126d0:	2600      	movs	r6, #0
 80126d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80126d6:	4798      	blx	r3
 80126d8:	4681      	mov	r9, r0
 80126da:	b235      	sxth	r5, r6
 80126dc:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80126e0:	3601      	adds	r6, #1
 80126e2:	42ab      	cmp	r3, r5
 80126e4:	dd0a      	ble.n	80126fc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80126e6:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 80126ea:	463a      	mov	r2, r7
 80126ec:	4649      	mov	r1, r9
 80126ee:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80126f2:	f7ff ffad 	bl	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80126f6:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80126fa:	e7ee      	b.n	80126da <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 80126fc:	6367      	str	r7, [r4, #52]	@ 0x34
 80126fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012702 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012702:	b570      	push	{r4, r5, r6, lr}
 8012704:	6803      	ldr	r3, [r0, #0]
 8012706:	4604      	mov	r4, r0
 8012708:	460d      	mov	r5, r1
 801270a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801270e:	4798      	blx	r3
 8012710:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8012714:	4629      	mov	r1, r5
 8012716:	4620      	mov	r0, r4
 8012718:	3301      	adds	r3, #1
 801271a:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 801271e:	6823      	ldr	r3, [r4, #0]
 8012720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012724:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8012728:	4718      	bx	r3

0801272a <_ZN8touchgfx16GraphElementLineD1Ev>:
 801272a:	4770      	bx	lr

0801272c <_ZN8touchgfx16GraphElementLineD0Ev>:
 801272c:	b510      	push	{r4, lr}
 801272e:	4604      	mov	r4, r0
 8012730:	2130      	movs	r1, #48	@ 0x30
 8012732:	f016 fa3a 	bl	8028baa <_ZdlPvj>
 8012736:	4620      	mov	r0, r4
 8012738:	bd10      	pop	{r4, pc}

0801273a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801273a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801273c:	4604      	mov	r4, r0
 801273e:	4608      	mov	r0, r1
 8012740:	460d      	mov	r5, r1
 8012742:	f7fd fdb8 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012746:	b978      	cbnz	r0, 8012768 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012748:	4620      	mov	r0, r4
 801274a:	f7fd fdb4 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801274e:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012752:	b150      	cbz	r0, 801276a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012754:	8026      	strh	r6, [r4, #0]
 8012756:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801275a:	8063      	strh	r3, [r4, #2]
 801275c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012760:	80a3      	strh	r3, [r4, #4]
 8012762:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012766:	80e3      	strh	r3, [r4, #6]
 8012768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801276a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801276e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012772:	42b1      	cmp	r1, r6
 8012774:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012778:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801277c:	460f      	mov	r7, r1
 801277e:	88ed      	ldrh	r5, [r5, #6]
 8012780:	bfa8      	it	ge
 8012782:	4637      	movge	r7, r6
 8012784:	4293      	cmp	r3, r2
 8012786:	4618      	mov	r0, r3
 8012788:	4466      	add	r6, ip
 801278a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801278e:	bfa8      	it	ge
 8012790:	4610      	movge	r0, r2
 8012792:	442a      	add	r2, r5
 8012794:	88e5      	ldrh	r5, [r4, #6]
 8012796:	4461      	add	r1, ip
 8012798:	b236      	sxth	r6, r6
 801279a:	8027      	strh	r7, [r4, #0]
 801279c:	442b      	add	r3, r5
 801279e:	b209      	sxth	r1, r1
 80127a0:	b212      	sxth	r2, r2
 80127a2:	8060      	strh	r0, [r4, #2]
 80127a4:	b21b      	sxth	r3, r3
 80127a6:	428e      	cmp	r6, r1
 80127a8:	bfac      	ite	ge
 80127aa:	ebc7 0106 	rsbge	r1, r7, r6
 80127ae:	ebc7 0101 	rsblt	r1, r7, r1
 80127b2:	429a      	cmp	r2, r3
 80127b4:	bfac      	ite	ge
 80127b6:	ebc0 0202 	rsbge	r2, r0, r2
 80127ba:	ebc0 0203 	rsblt	r2, r0, r3
 80127be:	80a1      	strh	r1, [r4, #4]
 80127c0:	80e2      	strh	r2, [r4, #6]
 80127c2:	e7d1      	b.n	8012768 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080127c4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 80127c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c8:	6803      	ldr	r3, [r0, #0]
 80127ca:	b093      	sub	sp, #76	@ 0x4c
 80127cc:	6945      	ldr	r5, [r0, #20]
 80127ce:	4604      	mov	r4, r0
 80127d0:	460f      	mov	r7, r1
 80127d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80127d4:	2d00      	cmp	r5, #0
 80127d6:	f000 81ad 	beq.w	8012b34 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 80127da:	696d      	ldr	r5, [r5, #20]
 80127dc:	4798      	blx	r3
 80127de:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d077      	beq.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80127e6:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80127ea:	fb13 f000 	smulbb	r0, r3, r0
 80127ee:	b283      	uxth	r3, r0
 80127f0:	1c58      	adds	r0, r3, #1
 80127f2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80127f6:	1200      	asrs	r0, r0, #8
 80127f8:	d06d      	beq.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80127fa:	b2c3      	uxtb	r3, r0
 80127fc:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8012800:	462a      	mov	r2, r5
 8012802:	4621      	mov	r1, r4
 8012804:	9308      	str	r3, [sp, #32]
 8012806:	4640      	mov	r0, r8
 8012808:	6823      	ldr	r3, [r4, #0]
 801280a:	ae0e      	add	r6, sp, #56	@ 0x38
 801280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012810:	4798      	blx	r3
 8012812:	e898 0003 	ldmia.w	r8, {r0, r1}
 8012816:	e886 0003 	stmia.w	r6, {r0, r1}
 801281a:	4639      	mov	r1, r7
 801281c:	4630      	mov	r0, r6
 801281e:	f7fd fd07 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	4629      	mov	r1, r5
 8012826:	4620      	mov	r0, r4
 8012828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801282c:	4798      	blx	r3
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	4607      	mov	r7, r0
 8012832:	4629      	mov	r1, r5
 8012834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012838:	4620      	mov	r0, r4
 801283a:	4798      	blx	r3
 801283c:	4681      	mov	r9, r0
 801283e:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 8012842:	4629      	mov	r1, r5
 8012844:	0103      	lsls	r3, r0, #4
 8012846:	4620      	mov	r0, r4
 8012848:	9309      	str	r3, [sp, #36]	@ 0x24
 801284a:	6823      	ldr	r3, [r4, #0]
 801284c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012850:	4798      	blx	r3
 8012852:	4629      	mov	r1, r5
 8012854:	b203      	sxth	r3, r0
 8012856:	4620      	mov	r0, r4
 8012858:	9306      	str	r3, [sp, #24]
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012860:	4798      	blx	r3
 8012862:	2f00      	cmp	r7, #0
 8012864:	b203      	sxth	r3, r0
 8012866:	9307      	str	r3, [sp, #28]
 8012868:	d138      	bne.n	80128dc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 801286a:	f1b9 0f00 	cmp.w	r9, #0
 801286e:	d132      	bne.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012870:	6823      	ldr	r3, [r4, #0]
 8012872:	464a      	mov	r2, r9
 8012874:	4629      	mov	r1, r5
 8012876:	4620      	mov	r0, r4
 8012878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801287c:	4798      	blx	r3
 801287e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012880:	1ac0      	subs	r0, r0, r3
 8012882:	9010      	str	r0, [sp, #64]	@ 0x40
 8012884:	4640      	mov	r0, r8
 8012886:	f7ff fcc3 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801288a:	6823      	ldr	r3, [r4, #0]
 801288c:	4607      	mov	r7, r0
 801288e:	4629      	mov	r1, r5
 8012890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012894:	4620      	mov	r0, r4
 8012896:	4798      	blx	r3
 8012898:	1a38      	subs	r0, r7, r0
 801289a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801289e:	fa0f f880 	sxth.w	r8, r0
 80128a2:	eb13 0f08 	cmn.w	r3, r8
 80128a6:	d416      	bmi.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128a8:	6823      	ldr	r3, [r4, #0]
 80128aa:	4629      	mov	r1, r5
 80128ac:	4620      	mov	r0, r4
 80128ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80128b2:	4798      	blx	r3
 80128b4:	4580      	cmp	r8, r0
 80128b6:	da0e      	bge.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128b8:	9a08      	ldr	r2, [sp, #32]
 80128ba:	b23f      	sxth	r7, r7
 80128bc:	6823      	ldr	r3, [r4, #0]
 80128be:	4631      	mov	r1, r6
 80128c0:	9202      	str	r2, [sp, #8]
 80128c2:	4620      	mov	r0, r4
 80128c4:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80128c8:	9700      	str	r7, [sp, #0]
 80128ca:	9201      	str	r2, [sp, #4]
 80128cc:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80128d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128d4:	47a8      	blx	r5
 80128d6:	b013      	add	sp, #76	@ 0x4c
 80128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128dc:	ddfb      	ble.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	4629      	mov	r1, r5
 80128e2:	4620      	mov	r0, r4
 80128e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80128e8:	4798      	blx	r3
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	4683      	mov	fp, r0
 80128ee:	4629      	mov	r1, r5
 80128f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80128f4:	4620      	mov	r0, r4
 80128f6:	4798      	blx	r3
 80128f8:	eba0 030b 	sub.w	r3, r0, fp
 80128fc:	4680      	mov	r8, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	bfb8      	it	lt
 8012902:	425b      	neglt	r3, r3
 8012904:	fb93 f3f7 	sdiv	r3, r3, r7
 8012908:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801290c:	dce3      	bgt.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801290e:	6823      	ldr	r3, [r4, #0]
 8012910:	465a      	mov	r2, fp
 8012912:	4629      	mov	r1, r5
 8012914:	4620      	mov	r0, r4
 8012916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801291a:	4798      	blx	r3
 801291c:	6823      	ldr	r3, [r4, #0]
 801291e:	4606      	mov	r6, r0
 8012920:	4642      	mov	r2, r8
 8012922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012926:	4629      	mov	r1, r5
 8012928:	4620      	mov	r0, r4
 801292a:	4798      	blx	r3
 801292c:	42b0      	cmp	r0, r6
 801292e:	bfa2      	ittt	ge
 8012930:	4643      	movge	r3, r8
 8012932:	46d8      	movge	r8, fp
 8012934:	469b      	movge	fp, r3
 8012936:	fb98 f6f7 	sdiv	r6, r8, r7
 801293a:	fb9b f2f7 	sdiv	r2, fp, r7
 801293e:	45d8      	cmp	r8, fp
 8012940:	bfac      	ite	ge
 8012942:	f04f 33ff 	movge.w	r3, #4294967295
 8012946:	2301      	movlt	r3, #1
 8012948:	1af6      	subs	r6, r6, r3
 801294a:	441a      	add	r2, r3
 801294c:	4296      	cmp	r6, r2
 801294e:	bfac      	ite	ge
 8012950:	f04f 3aff 	movge.w	sl, #4294967295
 8012954:	f04f 0a01 	movlt.w	sl, #1
 8012958:	f1b9 0f00 	cmp.w	r9, #0
 801295c:	d13e      	bne.n	80129dc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 801295e:	fb07 fb0a 	mul.w	fp, r7, sl
 8012962:	eb0a 0802 	add.w	r8, sl, r2
 8012966:	4377      	muls	r7, r6
 8012968:	45b0      	cmp	r8, r6
 801296a:	d0b4      	beq.n	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801296c:	6823      	ldr	r3, [r4, #0]
 801296e:	463a      	mov	r2, r7
 8012970:	4629      	mov	r1, r5
 8012972:	4620      	mov	r0, r4
 8012974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012978:	4798      	blx	r3
 801297a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801297c:	1ac0      	subs	r0, r0, r3
 801297e:	9010      	str	r0, [sp, #64]	@ 0x40
 8012980:	a810      	add	r0, sp, #64	@ 0x40
 8012982:	f7ff fc45 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	4681      	mov	r9, r0
 801298a:	4629      	mov	r1, r5
 801298c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012990:	4620      	mov	r0, r4
 8012992:	4798      	blx	r3
 8012994:	eba9 0000 	sub.w	r0, r9, r0
 8012998:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801299c:	b203      	sxth	r3, r0
 801299e:	42da      	cmn	r2, r3
 80129a0:	9304      	str	r3, [sp, #16]
 80129a2:	d418      	bmi.n	80129d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80129a4:	6822      	ldr	r2, [r4, #0]
 80129a6:	4629      	mov	r1, r5
 80129a8:	4620      	mov	r0, r4
 80129aa:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 80129ae:	4790      	blx	r2
 80129b0:	9b04      	ldr	r3, [sp, #16]
 80129b2:	4283      	cmp	r3, r0
 80129b4:	da0f      	bge.n	80129d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80129b6:	9b08      	ldr	r3, [sp, #32]
 80129b8:	a90e      	add	r1, sp, #56	@ 0x38
 80129ba:	6822      	ldr	r2, [r4, #0]
 80129bc:	4620      	mov	r0, r4
 80129be:	9302      	str	r3, [sp, #8]
 80129c0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80129c4:	9301      	str	r3, [sp, #4]
 80129c6:	fa0f f389 	sxth.w	r3, r9
 80129ca:	9300      	str	r3, [sp, #0]
 80129cc:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 80129d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129d4:	47c8      	blx	r9
 80129d6:	4456      	add	r6, sl
 80129d8:	445f      	add	r7, fp
 80129da:	e7c5      	b.n	8012968 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 80129dc:	fb98 f8f9 	sdiv	r8, r8, r9
 80129e0:	eba8 0203 	sub.w	r2, r8, r3
 80129e4:	4629      	mov	r1, r5
 80129e6:	4620      	mov	r0, r4
 80129e8:	9204      	str	r2, [sp, #16]
 80129ea:	fb9b f8f9 	sdiv	r8, fp, r9
 80129ee:	4498      	add	r8, r3
 80129f0:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80129f4:	4542      	cmp	r2, r8
 80129f6:	bfac      	ite	ge
 80129f8:	f04f 33ff 	movge.w	r3, #4294967295
 80129fc:	2301      	movlt	r3, #1
 80129fe:	fb02 f209 	mul.w	r2, r2, r9
 8012a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a04:	6823      	ldr	r3, [r4, #0]
 8012a06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012a0a:	4798      	blx	r3
 8012a0c:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8012a10:	4658      	mov	r0, fp
 8012a12:	f7ff fbfd 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a16:	fb06 f207 	mul.w	r2, r6, r7
 8012a1a:	b203      	sxth	r3, r0
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	4620      	mov	r0, r4
 8012a20:	9305      	str	r3, [sp, #20]
 8012a22:	6823      	ldr	r3, [r4, #0]
 8012a24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012a28:	4798      	blx	r3
 8012a2a:	9010      	str	r0, [sp, #64]	@ 0x40
 8012a2c:	4658      	mov	r0, fp
 8012a2e:	f7ff fbef 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a32:	fb07 f20a 	mul.w	r2, r7, sl
 8012a36:	b203      	sxth	r3, r0
 8012a38:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012a3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a3c:	4442      	add	r2, r8
 8012a3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012a40:	9a05      	ldr	r2, [sp, #20]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	dc16      	bgt.n	8012a74 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8012a46:	eb06 080a 	add.w	r8, r6, sl
 8012a4a:	fb07 f808 	mul.w	r8, r7, r8
 8012a4e:	9a05      	ldr	r2, [sp, #20]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	db54      	blt.n	8012afe <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8012a54:	6823      	ldr	r3, [r4, #0]
 8012a56:	4642      	mov	r2, r8
 8012a58:	4629      	mov	r1, r5
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012a60:	4456      	add	r6, sl
 8012a62:	4798      	blx	r3
 8012a64:	9010      	str	r0, [sp, #64]	@ 0x40
 8012a66:	4658      	mov	r0, fp
 8012a68:	f7ff fbd2 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a6e:	b203      	sxth	r3, r0
 8012a70:	4490      	add	r8, r2
 8012a72:	e7ec      	b.n	8012a4e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8012a74:	6823      	ldr	r3, [r4, #0]
 8012a76:	fb07 f206 	mul.w	r2, r7, r6
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012a82:	4798      	blx	r3
 8012a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a86:	1ac0      	subs	r0, r0, r3
 8012a88:	9010      	str	r0, [sp, #64]	@ 0x40
 8012a8a:	4658      	mov	r0, fp
 8012a8c:	f7ff fbc0 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012a90:	6823      	ldr	r3, [r4, #0]
 8012a92:	4680      	mov	r8, r0
 8012a94:	4629      	mov	r1, r5
 8012a96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	4798      	blx	r3
 8012a9e:	eba8 0000 	sub.w	r0, r8, r0
 8012aa2:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8012aa6:	b203      	sxth	r3, r0
 8012aa8:	42da      	cmn	r2, r3
 8012aaa:	930d      	str	r3, [sp, #52]	@ 0x34
 8012aac:	d418      	bmi.n	8012ae0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012aae:	6822      	ldr	r2, [r4, #0]
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8012ab8:	4790      	blx	r2
 8012aba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012abc:	4283      	cmp	r3, r0
 8012abe:	da0f      	bge.n	8012ae0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8012ac0:	9b08      	ldr	r3, [sp, #32]
 8012ac2:	a90e      	add	r1, sp, #56	@ 0x38
 8012ac4:	6822      	ldr	r2, [r4, #0]
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	9302      	str	r3, [sp, #8]
 8012aca:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012ace:	9301      	str	r3, [sp, #4]
 8012ad0:	fa0f f388 	sxth.w	r3, r8
 8012ad4:	9300      	str	r3, [sp, #0]
 8012ad6:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 8012ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ade:	47c0      	blx	r8
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	4456      	add	r6, sl
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012aec:	fb06 f207 	mul.w	r2, r6, r7
 8012af0:	4798      	blx	r3
 8012af2:	9010      	str	r0, [sp, #64]	@ 0x40
 8012af4:	4658      	mov	r0, fp
 8012af6:	f7ff fb8b 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012afa:	b203      	sxth	r3, r0
 8012afc:	e7a0      	b.n	8012a40 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b00:	930d      	str	r3, [sp, #52]	@ 0x34
 8012b02:	9b04      	ldr	r3, [sp, #16]
 8012b04:	4413      	add	r3, r2
 8012b06:	9304      	str	r3, [sp, #16]
 8012b08:	9a04      	ldr	r2, [sp, #16]
 8012b0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	f43f aee2 	beq.w	80128d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012b12:	9b04      	ldr	r3, [sp, #16]
 8012b14:	4629      	mov	r1, r5
 8012b16:	6822      	ldr	r2, [r4, #0]
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 8012b1e:	fb03 f209 	mul.w	r2, r3, r9
 8012b22:	47c0      	blx	r8
 8012b24:	9010      	str	r0, [sp, #64]	@ 0x40
 8012b26:	4658      	mov	r0, fp
 8012b28:	f7ff fb72 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012b2c:	b203      	sxth	r3, r0
 8012b2e:	9305      	str	r3, [sp, #20]
 8012b30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b32:	e785      	b.n	8012a40 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012b34:	4798      	blx	r3
 8012b36:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012b3a:	deff      	udf	#255	@ 0xff

08012b3c <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8012b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3e:	9906      	ldr	r1, [sp, #24]
 8012b40:	4606      	mov	r6, r0
 8012b42:	461c      	mov	r4, r3
 8012b44:	2020      	movs	r0, #32
 8012b46:	4291      	cmp	r1, r2
 8012b48:	bfbc      	itt	lt
 8012b4a:	9206      	strlt	r2, [sp, #24]
 8012b4c:	460a      	movlt	r2, r1
 8012b4e:	9907      	ldr	r1, [sp, #28]
 8012b50:	428b      	cmp	r3, r1
 8012b52:	bfc4      	itt	gt
 8012b54:	460c      	movgt	r4, r1
 8012b56:	9307      	strgt	r3, [sp, #28]
 8012b58:	fb92 f5f0 	sdiv	r5, r2, r0
 8012b5c:	fb94 f4f0 	sdiv	r4, r4, r0
 8012b60:	a806      	add	r0, sp, #24
 8012b62:	f7fe fdde 	bl	8011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012b66:	4607      	mov	r7, r0
 8012b68:	a807      	add	r0, sp, #28
 8012b6a:	f7fe fdda 	bl	8011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012b6e:	1b7a      	subs	r2, r7, r5
 8012b70:	1b00      	subs	r0, r0, r4
 8012b72:	8035      	strh	r5, [r6, #0]
 8012b74:	8074      	strh	r4, [r6, #2]
 8012b76:	80f0      	strh	r0, [r6, #6]
 8012b78:	4630      	mov	r0, r6
 8012b7a:	80b2      	strh	r2, [r6, #4]
 8012b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b7e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8012b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b80:	9c08      	ldr	r4, [sp, #32]
 8012b82:	2602      	movs	r6, #2
 8012b84:	4605      	mov	r5, r0
 8012b86:	3401      	adds	r4, #1
 8012b88:	fb94 f4f6 	sdiv	r4, r4, r6
 8012b8c:	18a6      	adds	r6, r4, r2
 8012b8e:	191f      	adds	r7, r3, r4
 8012b90:	1b12      	subs	r2, r2, r4
 8012b92:	1b1b      	subs	r3, r3, r4
 8012b94:	e9cd 6700 	strd	r6, r7, [sp]
 8012b98:	f7ff ffd0 	bl	8012b3c <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	b003      	add	sp, #12
 8012ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ba2 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8012ba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ba6:	6943      	ldr	r3, [r0, #20]
 8012ba8:	b087      	sub	sp, #28
 8012baa:	4606      	mov	r6, r0
 8012bac:	460d      	mov	r5, r1
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d072      	beq.n	8012c98 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8012bb2:	695c      	ldr	r4, [r3, #20]
 8012bb4:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8012bb8:	6823      	ldr	r3, [r4, #0]
 8012bba:	4620      	mov	r0, r4
 8012bbc:	017f      	lsls	r7, r7, #5
 8012bbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012bc2:	4798      	blx	r3
 8012bc4:	6823      	ldr	r3, [r4, #0]
 8012bc6:	4680      	mov	r8, r0
 8012bc8:	4629      	mov	r1, r5
 8012bca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012bce:	4620      	mov	r0, r4
 8012bd0:	4798      	blx	r3
 8012bd2:	9700      	str	r7, [sp, #0]
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	4642      	mov	r2, r8
 8012bd8:	4631      	mov	r1, r6
 8012bda:	a802      	add	r0, sp, #8
 8012bdc:	f7ff ffcf 	bl	8012b7e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012be0:	2d00      	cmp	r5, #0
 8012be2:	dd1b      	ble.n	8012c1c <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8012be4:	f105 38ff 	add.w	r8, r5, #4294967295
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	4620      	mov	r0, r4
 8012bec:	fa0f f888 	sxth.w	r8, r8
 8012bf0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012bf4:	4641      	mov	r1, r8
 8012bf6:	4798      	blx	r3
 8012bf8:	6823      	ldr	r3, [r4, #0]
 8012bfa:	4681      	mov	r9, r0
 8012bfc:	4641      	mov	r1, r8
 8012bfe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012c02:	4620      	mov	r0, r4
 8012c04:	4798      	blx	r3
 8012c06:	4631      	mov	r1, r6
 8012c08:	4603      	mov	r3, r0
 8012c0a:	9700      	str	r7, [sp, #0]
 8012c0c:	a804      	add	r0, sp, #16
 8012c0e:	464a      	mov	r2, r9
 8012c10:	f7ff ffb5 	bl	8012b7e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012c14:	a904      	add	r1, sp, #16
 8012c16:	a802      	add	r0, sp, #8
 8012c18:	f7ff fd8f 	bl	801273a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c1c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8012c20:	3b01      	subs	r3, #1
 8012c22:	429d      	cmp	r5, r3
 8012c24:	da19      	bge.n	8012c5a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8012c26:	3501      	adds	r5, #1
 8012c28:	6823      	ldr	r3, [r4, #0]
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	b22d      	sxth	r5, r5
 8012c2e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012c32:	4629      	mov	r1, r5
 8012c34:	4798      	blx	r3
 8012c36:	6823      	ldr	r3, [r4, #0]
 8012c38:	4680      	mov	r8, r0
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012c40:	4620      	mov	r0, r4
 8012c42:	4798      	blx	r3
 8012c44:	4631      	mov	r1, r6
 8012c46:	4603      	mov	r3, r0
 8012c48:	9700      	str	r7, [sp, #0]
 8012c4a:	a804      	add	r0, sp, #16
 8012c4c:	4642      	mov	r2, r8
 8012c4e:	f7ff ff96 	bl	8012b7e <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012c52:	a904      	add	r1, sp, #16
 8012c54:	a802      	add	r0, sp, #8
 8012c56:	f7ff fd70 	bl	801273a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c5a:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8012c5e:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8012c62:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8012c66:	18ca      	adds	r2, r1, r3
 8012c68:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8012c6c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012c70:	a904      	add	r1, sp, #16
 8012c72:	1a9b      	subs	r3, r3, r2
 8012c74:	2200      	movs	r2, #0
 8012c76:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012c7a:	a802      	add	r0, sp, #8
 8012c7c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012c80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012c84:	f7fd fad4 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8012c88:	6833      	ldr	r3, [r6, #0]
 8012c8a:	a902      	add	r1, sp, #8
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	4798      	blx	r3
 8012c92:	b007      	add	sp, #28
 8012c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	deff      	udf	#255	@ 0xff

08012c9c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8012c9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	da05      	bge.n	8012cb0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	880a      	ldrh	r2, [r1, #0]
 8012ca8:	441a      	add	r2, r3
 8012caa:	425b      	negs	r3, r3
 8012cac:	800a      	strh	r2, [r1, #0]
 8012cae:	808b      	strh	r3, [r1, #4]
 8012cb0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	da05      	bge.n	8012cc4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	884a      	ldrh	r2, [r1, #2]
 8012cbc:	441a      	add	r2, r3
 8012cbe:	425b      	negs	r3, r3
 8012cc0:	804a      	strh	r2, [r1, #2]
 8012cc2:	80cb      	strh	r3, [r1, #6]
 8012cc4:	4770      	bx	lr

08012cc6 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8012cc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012cc8:	4604      	mov	r4, r0
 8012cca:	460d      	mov	r5, r1
 8012ccc:	6801      	ldr	r1, [r0, #0]
 8012cce:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 8012cd2:	9001      	str	r0, [sp, #4]
 8012cd4:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8012cd8:	9000      	str	r0, [sp, #0]
 8012cda:	a802      	add	r0, sp, #8
 8012cdc:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	47b0      	blx	r6
 8012ce4:	a902      	add	r1, sp, #8
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7ff ffd8 	bl	8012c9c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8012cec:	a802      	add	r0, sp, #8
 8012cee:	4629      	mov	r1, r5
 8012cf0:	f7fd fa9e 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8012cf4:	a802      	add	r0, sp, #8
 8012cf6:	f7fd fade 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cfa:	b968      	cbnz	r0, 8012d18 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8012cfc:	6823      	ldr	r3, [r4, #0]
 8012cfe:	a902      	add	r1, sp, #8
 8012d00:	4620      	mov	r0, r4
 8012d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d04:	4798      	blx	r3
 8012d06:	f7f2 ff45 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8012d0a:	6803      	ldr	r3, [r0, #0]
 8012d0c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012d0e:	a902      	add	r1, sp, #8
 8012d10:	6a1d      	ldr	r5, [r3, #32]
 8012d12:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012d16:	47a8      	blx	r5
 8012d18:	b004      	add	sp, #16
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}

08012d1c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8012d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d20:	b08b      	sub	sp, #44	@ 0x2c
 8012d22:	461e      	mov	r6, r3
 8012d24:	460f      	mov	r7, r1
 8012d26:	4615      	mov	r5, r2
 8012d28:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8012d2c:	429e      	cmp	r6, r3
 8012d2e:	9304      	str	r3, [sp, #16]
 8012d30:	d074      	beq.n	8012e1c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8012d32:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012d36:	4631      	mov	r1, r6
 8012d38:	4610      	mov	r0, r2
 8012d3a:	4634      	mov	r4, r6
 8012d3c:	015b      	lsls	r3, r3, #5
 8012d3e:	9303      	str	r3, [sp, #12]
 8012d40:	6813      	ldr	r3, [r2, #0]
 8012d42:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012d46:	4798      	blx	r3
 8012d48:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d4a:	f843 0d10 	str.w	r0, [r3, #-16]!
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7ff fa5e 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012d54:	682b      	ldr	r3, [r5, #0]
 8012d56:	4631      	mov	r1, r6
 8012d58:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012d5c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012d60:	4628      	mov	r0, r5
 8012d62:	4798      	blx	r3
 8012d64:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d66:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fa50 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012d70:	4641      	mov	r1, r8
 8012d72:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8012d76:	4638      	mov	r0, r7
 8012d78:	464a      	mov	r2, r9
 8012d7a:	f015 fd8b 	bl	8028894 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	4628      	mov	r0, r5
 8012d84:	9b00      	ldr	r3, [sp, #0]
 8012d86:	441c      	add	r4, r3
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	b224      	sxth	r4, r4
 8012d8c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012d90:	4621      	mov	r1, r4
 8012d92:	4798      	blx	r3
 8012d94:	9008      	str	r0, [sp, #32]
 8012d96:	a808      	add	r0, sp, #32
 8012d98:	f7ff fa3a 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	0143      	lsls	r3, r0, #5
 8012da0:	4628      	mov	r0, r5
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	682b      	ldr	r3, [r5, #0]
 8012da6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8012daa:	4798      	blx	r3
 8012dac:	9009      	str	r0, [sp, #36]	@ 0x24
 8012dae:	a809      	add	r0, sp, #36	@ 0x24
 8012db0:	f7ff fa2e 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012db4:	0143      	lsls	r3, r0, #5
 8012db6:	9302      	str	r3, [sp, #8]
 8012db8:	9b01      	ldr	r3, [sp, #4]
 8012dba:	eba3 0b08 	sub.w	fp, r3, r8
 8012dbe:	9b02      	ldr	r3, [sp, #8]
 8012dc0:	eba3 0a09 	sub.w	sl, r3, r9
 8012dc4:	4658      	mov	r0, fp
 8012dc6:	4651      	mov	r1, sl
 8012dc8:	f7fe fdec 	bl	80119a4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8012dcc:	b320      	cbz	r0, 8012e18 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	4651      	mov	r1, sl
 8012dd2:	9005      	str	r0, [sp, #20]
 8012dd4:	9803      	ldr	r0, [sp, #12]
 8012dd6:	f004 fed4 	bl	8017b82 <_ZN8touchgfx6muldivElll>
 8012dda:	2302      	movs	r3, #2
 8012ddc:	4659      	mov	r1, fp
 8012dde:	fb90 faf3 	sdiv	sl, r0, r3
 8012de2:	9b05      	ldr	r3, [sp, #20]
 8012de4:	9803      	ldr	r0, [sp, #12]
 8012de6:	461a      	mov	r2, r3
 8012de8:	f004 fecb 	bl	8017b82 <_ZN8touchgfx6muldivElll>
 8012dec:	2302      	movs	r3, #2
 8012dee:	eba8 010a 	sub.w	r1, r8, sl
 8012df2:	fb90 fbf3 	sdiv	fp, r0, r3
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	eb0b 0209 	add.w	r2, fp, r9
 8012dfc:	4638      	mov	r0, r7
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	4798      	blx	r3
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	9a02      	ldr	r2, [sp, #8]
 8012e06:	4638      	mov	r0, r7
 8012e08:	9901      	ldr	r1, [sp, #4]
 8012e0a:	689b      	ldr	r3, [r3, #8]
 8012e0c:	445a      	add	r2, fp
 8012e0e:	eba1 010a 	sub.w	r1, r1, sl
 8012e12:	4798      	blx	r3
 8012e14:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8012e18:	42a6      	cmp	r6, r4
 8012e1a:	db02      	blt.n	8012e22 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8012e1c:	b00b      	add	sp, #44	@ 0x2c
 8012e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e22:	9b00      	ldr	r3, [sp, #0]
 8012e24:	9a04      	ldr	r2, [sp, #16]
 8012e26:	42a2      	cmp	r2, r4
 8012e28:	bf08      	it	eq
 8012e2a:	f04f 33ff 	moveq.w	r3, #4294967295
 8012e2e:	e7a7      	b.n	8012d80 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08012e30 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8012e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e34:	6943      	ldr	r3, [r0, #20]
 8012e36:	b0a4      	sub	sp, #144	@ 0x90
 8012e38:	4605      	mov	r5, r0
 8012e3a:	460f      	mov	r7, r1
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d077      	beq.n	8012f30 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8012e40:	695c      	ldr	r4, [r3, #20]
 8012e42:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	dc04      	bgt.n	8012e54 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8012e4a:	2401      	movs	r4, #1
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	b024      	add	sp, #144	@ 0x90
 8012e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e54:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012e58:	ae24      	add	r6, sp, #144	@ 0x90
 8012e5a:	011b      	lsls	r3, r3, #4
 8012e5c:	f846 3d74 	str.w	r3, [r6, #-116]!
 8012e60:	4630      	mov	r0, r6
 8012e62:	f7fe fc5e 	bl	8011722 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8012e66:	8839      	ldrh	r1, [r7, #0]
 8012e68:	88ba      	ldrh	r2, [r7, #4]
 8012e6a:	b280      	uxth	r0, r0
 8012e6c:	6823      	ldr	r3, [r4, #0]
 8012e6e:	440a      	add	r2, r1
 8012e70:	1a09      	subs	r1, r1, r0
 8012e72:	4402      	add	r2, r0
 8012e74:	f10d 000a 	add.w	r0, sp, #10
 8012e78:	b209      	sxth	r1, r1
 8012e7a:	9000      	str	r0, [sp, #0]
 8012e7c:	b212      	sxth	r2, r2
 8012e7e:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8012e82:	4620      	mov	r0, r4
 8012e84:	ab02      	add	r3, sp, #8
 8012e86:	47c0      	blx	r8
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	d0de      	beq.n	8012e4a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8012e8c:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8012e90:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8012e94:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8012e98:	18ca      	adds	r2, r1, r3
 8012e9a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8012e9e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8012ea2:	4639      	mov	r1, r7
 8012ea4:	1a9b      	subs	r3, r3, r2
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012eac:	a803      	add	r0, sp, #12
 8012eae:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012eb2:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012eb6:	f7fd f9bb 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8012eba:	4629      	mov	r1, r5
 8012ebc:	a805      	add	r0, sp, #20
 8012ebe:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8012ec0:	f004 fd0e 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ec4:	682b      	ldr	r3, [r5, #0]
 8012ec6:	4628      	mov	r0, r5
 8012ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012eca:	4798      	blx	r3
 8012ecc:	ab03      	add	r3, sp, #12
 8012ece:	9000      	str	r0, [sp, #0]
 8012ed0:	aa05      	add	r2, sp, #20
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	4630      	mov	r0, r6
 8012ed6:	f015 fb91 	bl	80285fc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012eda:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8012ede:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8012ee2:	2f00      	cmp	r7, #0
 8012ee4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8012ee8:	dd03      	ble.n	8012ef2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8012eea:	42bb      	cmp	r3, r7
 8012eec:	da01      	bge.n	8012ef2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8012eee:	42ba      	cmp	r2, r7
 8012ef0:	da11      	bge.n	8012f16 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8012ef2:	9200      	str	r2, [sp, #0]
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f7ff ff0f 	bl	8012d1c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012efe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012f02:	4630      	mov	r0, r6
 8012f04:	f015 fc0e 	bl	8028724 <_ZN8touchgfx6Canvas6renderEh>
 8012f08:	4b0b      	ldr	r3, [pc, #44]	@ (8012f38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	a80c      	add	r0, sp, #48	@ 0x30
 8012f0e:	9307      	str	r3, [sp, #28]
 8012f10:	f001 f80a 	bl	8013f28 <_ZN8touchgfx7OutlineD1Ev>
 8012f14:	e79a      	b.n	8012e4c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8012f16:	1e7a      	subs	r2, r7, #1
 8012f18:	4631      	mov	r1, r6
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	b212      	sxth	r2, r2
 8012f1e:	9200      	str	r2, [sp, #0]
 8012f20:	4622      	mov	r2, r4
 8012f22:	f7ff fefb 	bl	8012d1c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012f26:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	463b      	mov	r3, r7
 8012f2e:	e7e1      	b.n	8012ef4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8012f30:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8012f34:	deff      	udf	#255	@ 0xff
 8012f36:	bf00      	nop
 8012f38:	0802e558 	.word	0x0802e558

08012f3c <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8012f3c:	4770      	bx	lr

08012f3e <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8012f3e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8012f40:	b118      	cbz	r0, 8012f4a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8012f42:	6803      	ldr	r3, [r0, #0]
 8012f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f48:	4718      	bx	r3
 8012f4a:	4770      	bx	lr

08012f4c <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8012f4c:	680b      	ldr	r3, [r1, #0]
 8012f4e:	4608      	mov	r0, r1
 8012f50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012f54:	4718      	bx	r3

08012f56 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8012f56:	680b      	ldr	r3, [r1, #0]
 8012f58:	4608      	mov	r0, r1
 8012f5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8012f5e:	4718      	bx	r3

08012f60 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8012f60:	4a38      	ldr	r2, [pc, #224]	@ (8013044 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8012f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f66:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8012f68:	b087      	sub	sp, #28
 8012f6a:	8812      	ldrh	r2, [r2, #0]
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	4689      	mov	r9, r1
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d937      	bls.n	8012fe4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f74:	4a34      	ldr	r2, [pc, #208]	@ (8013048 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8012f76:	6812      	ldr	r2, [r2, #0]
 8012f78:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012f7c:	4b33      	ldr	r3, [pc, #204]	@ (801304c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8012f84:	f1b8 0f00 	cmp.w	r8, #0
 8012f88:	d02c      	beq.n	8012fe4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012f8a:	6803      	ldr	r3, [r0, #0]
 8012f8c:	6945      	ldr	r5, [r0, #20]
 8012f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f90:	2d00      	cmp	r5, #0
 8012f92:	d052      	beq.n	801303a <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8012f94:	696f      	ldr	r7, [r5, #20]
 8012f96:	4798      	blx	r3
 8012f98:	f897 502c 	ldrb.w	r5, [r7, #44]	@ 0x2c
 8012f9c:	fb15 f000 	smulbb	r0, r5, r0
 8012fa0:	b280      	uxth	r0, r0
 8012fa2:	1c45      	adds	r5, r0, #1
 8012fa4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8012fa8:	122d      	asrs	r5, r5, #8
 8012faa:	d01b      	beq.n	8012fe4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012fac:	6823      	ldr	r3, [r4, #0]
 8012fae:	4639      	mov	r1, r7
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	b2ed      	uxtb	r5, r5
 8012fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012fb8:	4798      	blx	r3
 8012fba:	6823      	ldr	r3, [r4, #0]
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	4639      	mov	r1, r7
 8012fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	4798      	blx	r3
 8012fc8:	4683      	mov	fp, r0
 8012fca:	b970      	cbnz	r0, 8012fea <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012fcc:	b96e      	cbnz	r6, 8012fea <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012fce:	6823      	ldr	r3, [r4, #0]
 8012fd0:	4642      	mov	r2, r8
 8012fd2:	9600      	str	r6, [sp, #0]
 8012fd4:	4649      	mov	r1, r9
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8012fdc:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8012fe0:	463b      	mov	r3, r7
 8012fe2:	47a8      	blx	r5
 8012fe4:	b007      	add	sp, #28
 8012fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fea:	2e00      	cmp	r6, #0
 8012fec:	ddfa      	ble.n	8012fe4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	4639      	mov	r1, r7
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ff8:	4798      	blx	r3
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	4682      	mov	sl, r0
 8012ffe:	4639      	mov	r1, r7
 8013000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013004:	4620      	mov	r0, r4
 8013006:	4798      	blx	r3
 8013008:	4582      	cmp	sl, r0
 801300a:	bfde      	ittt	le
 801300c:	4603      	movle	r3, r0
 801300e:	4650      	movle	r0, sl
 8013010:	469a      	movle	sl, r3
 8013012:	ebaa 0300 	sub.w	r3, sl, r0
 8013016:	fb93 f3f6 	sdiv	r3, r3, r6
 801301a:	2b64      	cmp	r3, #100	@ 0x64
 801301c:	dce2      	bgt.n	8012fe4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801301e:	6823      	ldr	r3, [r4, #0]
 8013020:	4642      	mov	r2, r8
 8013022:	9000      	str	r0, [sp, #0]
 8013024:	4649      	mov	r1, r9
 8013026:	4620      	mov	r0, r4
 8013028:	e9cd b503 	strd	fp, r5, [sp, #12]
 801302c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8013030:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8013034:	463b      	mov	r3, r7
 8013036:	47a8      	blx	r5
 8013038:	e7d4      	b.n	8012fe4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801303a:	4798      	blx	r3
 801303c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013040:	deff      	udf	#255	@ 0xff
 8013042:	bf00      	nop
 8013044:	20027e1c 	.word	0x20027e1c
 8013048:	20027e18 	.word	0x20027e18
 801304c:	20027e20 	.word	0x20027e20

08013050 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 8013050:	4770      	bx	lr

08013052 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8013052:	b538      	push	{r3, r4, r5, lr}
 8013054:	680a      	ldr	r2, [r1, #0]
 8013056:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 801305a:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 801305e:	4608      	mov	r0, r1
 8013060:	4790      	blx	r2
 8013062:	4629      	mov	r1, r5
 8013064:	4602      	mov	r2, r0
 8013066:	4620      	mov	r0, r4
 8013068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801306c:	f7ff baf0 	b.w	8012650 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08013070 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8013070:	b510      	push	{r4, lr}
 8013072:	4604      	mov	r4, r0
 8013074:	214c      	movs	r1, #76	@ 0x4c
 8013076:	f015 fd98 	bl	8028baa <_ZdlPvj>
 801307a:	4620      	mov	r0, r4
 801307c:	bd10      	pop	{r4, pc}

0801307e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 801307e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013082:	b08d      	sub	sp, #52	@ 0x34
 8013084:	4606      	mov	r6, r0
 8013086:	9309      	str	r3, [sp, #36]	@ 0x24
 8013088:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 801308c:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	@ 0x60
 8013090:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8013094:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	@ 0x58
 8013098:	930a      	str	r3, [sp, #40]	@ 0x28
 801309a:	f1b9 0f00 	cmp.w	r9, #0
 801309e:	d117      	bne.n	80130d0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 80130a0:	2f00      	cmp	r7, #0
 80130a2:	dc7c      	bgt.n	801319e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 80130a4:	f1b8 0f00 	cmp.w	r8, #0
 80130a8:	da01      	bge.n	80130ae <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80130aa:	2f00      	cmp	r7, #0
 80130ac:	d17a      	bne.n	80131a4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80130ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130b0:	4630      	mov	r0, r6
 80130b2:	6832      	ldr	r2, [r6, #0]
 80130b4:	9318      	str	r3, [sp, #96]	@ 0x60
 80130b6:	2300      	movs	r3, #0
 80130b8:	9907      	ldr	r1, [sp, #28]
 80130ba:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 80130be:	f8d2 408c 	ldr.w	r4, [r2, #140]	@ 0x8c
 80130c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80130c6:	46a4      	mov	ip, r4
 80130c8:	b00d      	add	sp, #52	@ 0x34
 80130ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ce:	4760      	bx	ip
 80130d0:	fb97 f4f9 	sdiv	r4, r7, r9
 80130d4:	1e63      	subs	r3, r4, #1
 80130d6:	9305      	str	r3, [sp, #20]
 80130d8:	f1ba 0f00 	cmp.w	sl, #0
 80130dc:	d122      	bne.n	8013124 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 80130de:	fb03 f509 	mul.w	r5, r3, r9
 80130e2:	fb98 faf9 	sdiv	sl, r8, r9
 80130e6:	f10a 0a02 	add.w	sl, sl, #2
 80130ea:	9b05      	ldr	r3, [sp, #20]
 80130ec:	459a      	cmp	sl, r3
 80130ee:	d059      	beq.n	80131a4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80130f0:	42af      	cmp	r7, r5
 80130f2:	dc5a      	bgt.n	80131aa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 80130f4:	45a8      	cmp	r8, r5
 80130f6:	da01      	bge.n	80130fc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 80130f8:	42af      	cmp	r7, r5
 80130fa:	db0e      	blt.n	801311a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80130fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130fe:	4630      	mov	r0, r6
 8013100:	9905      	ldr	r1, [sp, #20]
 8013102:	9302      	str	r3, [sp, #8]
 8013104:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8013106:	6832      	ldr	r2, [r6, #0]
 8013108:	434b      	muls	r3, r1
 801310a:	9907      	ldr	r1, [sp, #28]
 801310c:	e9cd 5300 	strd	r5, r3, [sp]
 8013110:	f8d2 b08c 	ldr.w	fp, [r2, #140]	@ 0x8c
 8013114:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013118:	47d8      	blx	fp
 801311a:	9b05      	ldr	r3, [sp, #20]
 801311c:	444d      	add	r5, r9
 801311e:	3301      	adds	r3, #1
 8013120:	9305      	str	r3, [sp, #20]
 8013122:	e7e2      	b.n	80130ea <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8013124:	fb97 f3fa 	sdiv	r3, r7, sl
 8013128:	3b01      	subs	r3, #1
 801312a:	9306      	str	r3, [sp, #24]
 801312c:	9a06      	ldr	r2, [sp, #24]
 801312e:	fb98 f3fa 	sdiv	r3, r8, sl
 8013132:	fb02 fb0a 	mul.w	fp, r2, sl
 8013136:	9a05      	ldr	r2, [sp, #20]
 8013138:	3302      	adds	r3, #2
 801313a:	fb02 f509 	mul.w	r5, r2, r9
 801313e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013140:	45ab      	cmp	fp, r5
 8013142:	dd1d      	ble.n	8013180 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8013144:	42af      	cmp	r7, r5
 8013146:	dc08      	bgt.n	801315a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8013148:	45a8      	cmp	r8, r5
 801314a:	da08      	bge.n	801315e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 801314c:	42af      	cmp	r7, r5
 801314e:	da06      	bge.n	801315e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013150:	9b05      	ldr	r3, [sp, #20]
 8013152:	444d      	add	r5, r9
 8013154:	3301      	adds	r3, #1
 8013156:	9305      	str	r3, [sp, #20]
 8013158:	e7f2      	b.n	8013140 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 801315a:	45a8      	cmp	r8, r5
 801315c:	dcf8      	bgt.n	8013150 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 801315e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013160:	4630      	mov	r0, r6
 8013162:	9905      	ldr	r1, [sp, #20]
 8013164:	9302      	str	r3, [sp, #8]
 8013166:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8013168:	6832      	ldr	r2, [r6, #0]
 801316a:	434b      	muls	r3, r1
 801316c:	9907      	ldr	r1, [sp, #28]
 801316e:	e9cd 5300 	strd	r5, r3, [sp]
 8013172:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8013176:	461c      	mov	r4, r3
 8013178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801317c:	47a0      	blx	r4
 801317e:	e7e7      	b.n	8013150 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013180:	45ab      	cmp	fp, r5
 8013182:	db04      	blt.n	801318e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 8013184:	9b05      	ldr	r3, [sp, #20]
 8013186:	444d      	add	r5, r9
 8013188:	3301      	adds	r3, #1
 801318a:	9305      	str	r3, [sp, #20]
 801318c:	e7f8      	b.n	8013180 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 801318e:	9b06      	ldr	r3, [sp, #24]
 8013190:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013192:	3301      	adds	r3, #1
 8013194:	4293      	cmp	r3, r2
 8013196:	9306      	str	r3, [sp, #24]
 8013198:	d004      	beq.n	80131a4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 801319a:	44d3      	add	fp, sl
 801319c:	e7d0      	b.n	8013140 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 801319e:	f1b8 0f00 	cmp.w	r8, #0
 80131a2:	dd84      	ble.n	80130ae <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80131a4:	b00d      	add	sp, #52	@ 0x34
 80131a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131aa:	45a8      	cmp	r8, r5
 80131ac:	dcb5      	bgt.n	801311a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80131ae:	e7a5      	b.n	80130fc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

080131b0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 80131b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131b4:	f1b3 0900 	subs.w	r9, r3, #0
 80131b8:	460d      	mov	r5, r1
 80131ba:	4690      	mov	r8, r2
 80131bc:	9f08      	ldr	r7, [sp, #32]
 80131be:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 80131c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80131c4:	da18      	bge.n	80131f8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80131c6:	2a01      	cmp	r2, #1
 80131c8:	dd16      	ble.n	80131f8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80131ca:	232d      	movs	r3, #45	@ 0x2d
 80131cc:	f1c9 0900 	rsb	r9, r9, #0
 80131d0:	2001      	movs	r0, #1
 80131d2:	800b      	strh	r3, [r1, #0]
 80131d4:	2f00      	cmp	r7, #0
 80131d6:	d111      	bne.n	80131fc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 80131d8:	2302      	movs	r3, #2
 80131da:	eba8 0100 	sub.w	r1, r8, r0
 80131de:	4a26      	ldr	r2, [pc, #152]	@ (8013278 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80131e0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80131e4:	b289      	uxth	r1, r1
 80131e6:	fb96 f3f3 	sdiv	r3, r6, r3
 80131ea:	444b      	add	r3, r9
 80131ec:	fb93 f3f6 	sdiv	r3, r3, r6
 80131f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131f4:	f006 bb76 	b.w	80198e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80131f8:	2000      	movs	r0, #0
 80131fa:	e7eb      	b.n	80131d4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 80131fc:	dd39      	ble.n	8013272 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 80131fe:	eba8 0100 	sub.w	r1, r8, r0
 8013202:	4a1d      	ldr	r2, [pc, #116]	@ (8013278 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8013204:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013208:	f108 38ff 	add.w	r8, r8, #4294967295
 801320c:	b289      	uxth	r1, r1
 801320e:	fb99 f4f6 	sdiv	r4, r9, r6
 8013212:	4623      	mov	r3, r4
 8013214:	f006 fb66 	bl	80198e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013218:	4628      	mov	r0, r5
 801321a:	f005 ffeb 	bl	80191f4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801321e:	4580      	cmp	r8, r0
 8013220:	dd27      	ble.n	8013272 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8013222:	f04f 0e02 	mov.w	lr, #2
 8013226:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 801322a:	fb06 9314 	mls	r3, r6, r4, r9
 801322e:	3001      	adds	r0, #1
 8013230:	2200      	movs	r2, #0
 8013232:	f04f 090a 	mov.w	r9, #10
 8013236:	f107 3aff 	add.w	sl, r7, #4294967295
 801323a:	fb96 fefe 	sdiv	lr, r6, lr
 801323e:	4580      	cmp	r8, r0
 8013240:	4684      	mov	ip, r0
 8013242:	dd13      	ble.n	801326c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8013244:	fb09 f303 	mul.w	r3, r9, r3
 8013248:	4592      	cmp	sl, r2
 801324a:	f102 0201 	add.w	r2, r2, #1
 801324e:	f100 0c01 	add.w	ip, r0, #1
 8013252:	bf08      	it	eq
 8013254:	4473      	addeq	r3, lr
 8013256:	4297      	cmp	r7, r2
 8013258:	fb93 f4f6 	sdiv	r4, r3, r6
 801325c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013260:	fb06 3314 	mls	r3, r6, r4, r3
 8013264:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8013268:	4660      	mov	r0, ip
 801326a:	d1e8      	bne.n	801323e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 801326c:	2300      	movs	r3, #0
 801326e:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 8013272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013276:	bf00      	nop
 8013278:	0802de54 	.word	0x0802de54

0801327c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 801327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013280:	b09b      	sub	sp, #108	@ 0x6c
 8013282:	4698      	mov	r8, r3
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	4604      	mov	r4, r0
 8013288:	ae1a      	add	r6, sp, #104	@ 0x68
 801328a:	9104      	str	r1, [sp, #16]
 801328c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013290:	4640      	mov	r0, r8
 8013292:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8013294:	4617      	mov	r7, r2
 8013296:	4798      	blx	r3
 8013298:	f846 0d28 	str.w	r0, [r6, #-40]!
 801329c:	4630      	mov	r0, r6
 801329e:	f7fe ffb7 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80132a2:	f8b8 3114 	ldrh.w	r3, [r8, #276]	@ 0x114
 80132a6:	1ac0      	subs	r0, r0, r3
 80132a8:	b200      	sxth	r0, r0
 80132aa:	2800      	cmp	r0, #0
 80132ac:	f2c0 80ba 	blt.w	8013424 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80132b0:	f8b8 211a 	ldrh.w	r2, [r8, #282]	@ 0x11a
 80132b4:	441a      	add	r2, r3
 80132b6:	f8b8 3042 	ldrh.w	r3, [r8, #66]	@ 0x42
 80132ba:	1a9b      	subs	r3, r3, r2
 80132bc:	b21b      	sxth	r3, r3
 80132be:	4298      	cmp	r0, r3
 80132c0:	f280 80b0 	bge.w	8013424 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80132c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132c6:	2214      	movs	r2, #20
 80132c8:	4631      	mov	r1, r6
 80132ca:	4620      	mov	r0, r4
 80132cc:	9302      	str	r3, [sp, #8]
 80132ce:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 80132d2:	9301      	str	r3, [sp, #4]
 80132d4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80132dc:	f7ff ff68 	bl	80131b0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80132e0:	4b55      	ldr	r3, [pc, #340]	@ (8013438 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 80132e2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80132e4:	6818      	ldr	r0, [r3, #0]
 80132e6:	f7f4 f909 	bl	80074fc <_ZNK8touchgfx5Texts7getTextEt>
 80132ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80132ee:	4681      	mov	r9, r0
 80132f0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	f040 8098 	bne.w	801342a <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 80132fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132fc:	4638      	mov	r0, r7
 80132fe:	4798      	blx	r3
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	4605      	mov	r5, r0
 8013304:	4632      	mov	r2, r6
 8013306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013308:	4649      	mov	r1, r9
 801330a:	4638      	mov	r0, r7
 801330c:	4798      	blx	r3
 801330e:	fb15 f500 	smulbb	r5, r5, r0
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	4632      	mov	r2, r6
 8013316:	b2ad      	uxth	r5, r5
 8013318:	4649      	mov	r1, r9
 801331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801331c:	4638      	mov	r0, r7
 801331e:	4798      	blx	r3
 8013320:	4405      	add	r5, r0
 8013322:	b22d      	sxth	r5, r5
 8013324:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013328:	2002      	movs	r0, #2
 801332a:	f8d8 2000 	ldr.w	r2, [r8]
 801332e:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 8013332:	2b01      	cmp	r3, #1
 8013334:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	@ 0xc6
 8013338:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 801333c:	bf88      	it	hi
 801333e:	f105 0b01 	addhi.w	fp, r5, #1
 8013342:	9305      	str	r3, [sp, #20]
 8013344:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8013346:	bf8c      	ite	hi
 8013348:	fb9b fbf0 	sdivhi	fp, fp, r0
 801334c:	fb95 fbf0 	sdivls	fp, r5, r0
 8013350:	4640      	mov	r0, r8
 8013352:	bf88      	it	hi
 8013354:	fa0f fb8b 	sxthhi.w	fp, fp
 8013358:	4790      	blx	r2
 801335a:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 801335e:	4650      	mov	r0, sl
 8013360:	f04f 0800 	mov.w	r8, #0
 8013364:	f7fe ff54 	bl	8012210 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013368:	9b05      	ldr	r3, [sp, #20]
 801336a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801336e:	4418      	add	r0, r3
 8013370:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
 8013374:	ad07      	add	r5, sp, #28
 8013376:	f8ad 801c 	strh.w	r8, [sp, #28]
 801337a:	eba0 0b0b 	sub.w	fp, r0, fp
 801337e:	f8ad 1020 	strh.w	r1, [sp, #32]
 8013382:	f8ad b01e 	strh.w	fp, [sp, #30]
 8013386:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 801338a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801338e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013392:	9904      	ldr	r1, [sp, #16]
 8013394:	4658      	mov	r0, fp
 8013396:	f7fc ff4b 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801339a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801339e:	4543      	cmp	r3, r8
 80133a0:	dd40      	ble.n	8013424 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80133a2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80133a6:	4543      	cmp	r3, r8
 80133a8:	dd3c      	ble.n	8013424 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80133aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 80133ae:	4620      	mov	r0, r4
 80133b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80133b4:	1a5b      	subs	r3, r3, r1
 80133b6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80133ba:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80133be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80133c2:	1a5b      	subs	r3, r3, r1
 80133c4:	4629      	mov	r1, r5
 80133c6:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133ce:	4798      	blx	r3
 80133d0:	4b1a      	ldr	r3, [pc, #104]	@ (801343c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 80133d2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80133da:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80133de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80133e0:	785b      	ldrb	r3, [r3, #1]
 80133e2:	910d      	str	r1, [sp, #52]	@ 0x34
 80133e4:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 80133e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80133ec:	970b      	str	r7, [sp, #44]	@ 0x2c
 80133ee:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 80133f2:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 80133f6:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 80133fa:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80133fe:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8013402:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 8013406:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 801340a:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 801340e:	f7f2 fbc1 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8013412:	465b      	mov	r3, fp
 8013414:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8013418:	e9cd a900 	strd	sl, r9, [sp]
 801341c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8013420:	f7f4 f81e 	bl	8007460 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013424:	b01b      	add	sp, #108	@ 0x6c
 8013426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342a:	4601      	mov	r1, r0
 801342c:	699b      	ldr	r3, [r3, #24]
 801342e:	4632      	mov	r2, r6
 8013430:	4638      	mov	r0, r7
 8013432:	4798      	blx	r3
 8013434:	b205      	sxth	r5, r0
 8013436:	e775      	b.n	8013324 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8013438:	20027e24 	.word	0x20027e24
 801343c:	20027e18 	.word	0x20027e18

08013440 <_ZN8touchgfx15GraphScrollData5clearEv>:
 8013440:	b510      	push	{r4, lr}
 8013442:	4604      	mov	r4, r0
 8013444:	f7fe fd81 	bl	8011f4a <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8013448:	2300      	movs	r3, #0
 801344a:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 801344e:	bd10      	pop	{r4, pc}

08013450 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 8013450:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8013454:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	@ 0x11c
 8013458:	429a      	cmp	r2, r3
 801345a:	d101      	bne.n	8013460 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 801345c:	f7fe bfb1 	b.w	80123c2 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013460:	4770      	bx	lr

08013462 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 8013462:	b538      	push	{r3, r4, r5, lr}
 8013464:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	@ 0x11c
 8013468:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 801346c:	42a5      	cmp	r5, r4
 801346e:	da04      	bge.n	801347a <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8013470:	6803      	ldr	r3, [r0, #0]
 8013472:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8013476:	4798      	blx	r3
 8013478:	bd38      	pop	{r3, r4, r5, pc}
 801347a:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 801347e:	4408      	add	r0, r1
 8013480:	1b00      	subs	r0, r0, r4
 8013482:	e7f9      	b.n	8013478 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

08013484 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 8013484:	b570      	push	{r4, r5, r6, lr}
 8013486:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 801348a:	4604      	mov	r4, r0
 801348c:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8013490:	1c6b      	adds	r3, r5, #1
 8013492:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	@ 0x11e
 8013496:	b21b      	sxth	r3, r3
 8013498:	42ae      	cmp	r6, r5
 801349a:	fb93 f0f2 	sdiv	r0, r3, r2
 801349e:	bf08      	it	eq
 80134a0:	f8a4 311e 	strheq.w	r3, [r4, #286]	@ 0x11e
 80134a4:	4296      	cmp	r6, r2
 80134a6:	fb02 3010 	mls	r0, r2, r0, r3
 80134aa:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 80134ae:	f8a4 014c 	strh.w	r0, [r4, #332]	@ 0x14c
 80134b2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80134b6:	d108      	bne.n	80134ca <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 80134b8:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80134bc:	f004 f975 	bl	80177aa <_ZNK8touchgfx8Drawable10invalidateEv>
 80134c0:	4620      	mov	r0, r4
 80134c2:	f7fe ff7e 	bl	80123c2 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80134c6:	4628      	mov	r0, r5
 80134c8:	bd70      	pop	{r4, r5, r6, pc}
 80134ca:	4629      	mov	r1, r5
 80134cc:	4620      	mov	r0, r4
 80134ce:	f7fe ff50 	bl	8012372 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 80134d2:	e7f8      	b.n	80134c6 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

080134d4 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80134d4:	b508      	push	{r3, lr}
 80134d6:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80134da:	b10b      	cbz	r3, 80134e0 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 80134dc:	f7ee ff91 	bl	8002402 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80134e0:	bd08      	pop	{r3, pc}

080134e2 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 80134e2:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80134e6:	4770      	bx	lr

080134e8 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 80134e8:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80134ec:	4770      	bx	lr

080134ee <_ZN8touchgfx13ScalableImageD1Ev>:
 80134ee:	4770      	bx	lr

080134f0 <_ZN8touchgfx13ScalableImageD0Ev>:
 80134f0:	b510      	push	{r4, lr}
 80134f2:	4604      	mov	r4, r0
 80134f4:	212c      	movs	r1, #44	@ 0x2c
 80134f6:	f015 fb58 	bl	8028baa <_ZdlPvj>
 80134fa:	4620      	mov	r0, r4
 80134fc:	bd10      	pop	{r4, pc}

080134fe <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 80134fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013500:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8013504:	b085      	sub	sp, #20
 8013506:	4604      	mov	r4, r0
 8013508:	460d      	mov	r5, r1
 801350a:	2bff      	cmp	r3, #255	@ 0xff
 801350c:	d128      	bne.n	8013560 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 801350e:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 8013512:	4668      	mov	r0, sp
 8013514:	4631      	mov	r1, r6
 8013516:	f006 fd01 	bl	8019f1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801351a:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 801351e:	4630      	mov	r0, r6
 8013520:	f006 fc94 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013524:	4287      	cmp	r7, r0
 8013526:	d11b      	bne.n	8013560 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8013528:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801352c:	4630      	mov	r0, r6
 801352e:	f006 fcc1 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013532:	4287      	cmp	r7, r0
 8013534:	d114      	bne.n	8013560 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8013536:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801353a:	2100      	movs	r1, #0
 801353c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013540:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013544:	466b      	mov	r3, sp
 8013546:	9102      	str	r1, [sp, #8]
 8013548:	f8ad 200c 	strh.w	r2, [sp, #12]
 801354c:	cb03      	ldmia	r3!, {r0, r1}
 801354e:	6020      	str	r0, [r4, #0]
 8013550:	4620      	mov	r0, r4
 8013552:	6061      	str	r1, [r4, #4]
 8013554:	4619      	mov	r1, r3
 8013556:	f7fc fe6b 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801355a:	4620      	mov	r0, r4
 801355c:	b005      	add	sp, #20
 801355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013560:	2300      	movs	r3, #0
 8013562:	8023      	strh	r3, [r4, #0]
 8013564:	8063      	strh	r3, [r4, #2]
 8013566:	80a3      	strh	r3, [r4, #4]
 8013568:	80e3      	strh	r3, [r4, #6]
 801356a:	e7f6      	b.n	801355a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

0801356c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801356c:	b538      	push	{r3, r4, r5, lr}
 801356e:	2300      	movs	r3, #0
 8013570:	2501      	movs	r5, #1
 8013572:	4604      	mov	r4, r0
 8013574:	8083      	strh	r3, [r0, #4]
 8013576:	80c3      	strh	r3, [r0, #6]
 8013578:	8103      	strh	r3, [r0, #8]
 801357a:	8143      	strh	r3, [r0, #10]
 801357c:	8183      	strh	r3, [r0, #12]
 801357e:	81c3      	strh	r3, [r0, #14]
 8013580:	8203      	strh	r3, [r0, #16]
 8013582:	8243      	strh	r3, [r0, #18]
 8013584:	61c3      	str	r3, [r0, #28]
 8013586:	8403      	strh	r3, [r0, #32]
 8013588:	8443      	strh	r3, [r0, #34]	@ 0x22
 801358a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801358e:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 8013592:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013596:	4b07      	ldr	r3, [pc, #28]	@ (80135b4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8013598:	6003      	str	r3, [r0, #0]
 801359a:	880b      	ldrh	r3, [r1, #0]
 801359c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801359e:	23ff      	movs	r3, #255	@ 0xff
 80135a0:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80135a4:	f000 fc4d 	bl	8013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80135a8:	4b03      	ldr	r3, [pc, #12]	@ (80135b8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 80135aa:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 80135ae:	4620      	mov	r0, r4
 80135b0:	6023      	str	r3, [r4, #0]
 80135b2:	bd38      	pop	{r3, r4, r5, pc}
 80135b4:	0802e054 	.word	0x0802e054
 80135b8:	0802df00 	.word	0x0802df00

080135bc <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 80135bc:	4603      	mov	r3, r0
 80135be:	3026      	adds	r0, #38	@ 0x26
 80135c0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80135c4:	b90b      	cbnz	r3, 80135ca <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 80135c6:	f004 ba2f 	b.w	8017a28 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80135ca:	f004 ba3d 	b.w	8017a48 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080135d0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d4:	4604      	mov	r4, r0
 80135d6:	b0b3      	sub	sp, #204	@ 0xcc
 80135d8:	469b      	mov	fp, r3
 80135da:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80135de:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80135e2:	2500      	movs	r5, #0
 80135e4:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80135e8:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80135ec:	ab11      	add	r3, sp, #68	@ 0x44
 80135ee:	9206      	str	r2, [sp, #24]
 80135f0:	4618      	mov	r0, r3
 80135f2:	9511      	str	r5, [sp, #68]	@ 0x44
 80135f4:	9307      	str	r3, [sp, #28]
 80135f6:	ad13      	add	r5, sp, #76	@ 0x4c
 80135f8:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 80135fc:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 8013600:	f7fc fe16 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8013604:	9b07      	ldr	r3, [sp, #28]
 8013606:	e893 0003 	ldmia.w	r3, {r0, r1}
 801360a:	e885 0003 	stmia.w	r5, {r0, r1}
 801360e:	6821      	ldr	r1, [r4, #0]
 8013610:	4620      	mov	r0, r4
 8013612:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8013614:	4629      	mov	r1, r5
 8013616:	47b0      	blx	r6
 8013618:	4621      	mov	r1, r4
 801361a:	a815      	add	r0, sp, #84	@ 0x54
 801361c:	1d26      	adds	r6, r4, #4
 801361e:	f004 f95f 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013622:	a815      	add	r0, sp, #84	@ 0x54
 8013624:	f002 fe68 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013628:	9b07      	ldr	r3, [sp, #28]
 801362a:	4631      	mov	r1, r6
 801362c:	4618      	mov	r0, r3
 801362e:	f002 fea7 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013632:	4628      	mov	r0, r5
 8013634:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8013638:	f002 fe5e 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801363c:	4628      	mov	r0, r5
 801363e:	f006 fcf7 	bl	801a030 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013642:	9007      	str	r0, [sp, #28]
 8013644:	2800      	cmp	r0, #0
 8013646:	f000 80ce 	beq.w	80137e6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 801364a:	f8db 200c 	ldr.w	r2, [fp, #12]
 801364e:	a809      	add	r0, sp, #36	@ 0x24
 8013650:	f8db 1000 	ldr.w	r1, [fp]
 8013654:	920c      	str	r2, [sp, #48]	@ 0x30
 8013656:	f8da 2000 	ldr.w	r2, [sl]
 801365a:	9109      	str	r1, [sp, #36]	@ 0x24
 801365c:	920d      	str	r2, [sp, #52]	@ 0x34
 801365e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8013662:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013666:	920e      	str	r2, [sp, #56]	@ 0x38
 8013668:	f8da 2008 	ldr.w	r2, [sl, #8]
 801366c:	910a      	str	r1, [sp, #40]	@ 0x28
 801366e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013670:	f8db 1008 	ldr.w	r1, [fp, #8]
 8013674:	f8da 200c 	ldr.w	r2, [sl, #12]
 8013678:	910b      	str	r1, [sp, #44]	@ 0x2c
 801367a:	a90d      	add	r1, sp, #52	@ 0x34
 801367c:	9210      	str	r2, [sp, #64]	@ 0x40
 801367e:	4632      	mov	r2, r6
 8013680:	f002 fe62 	bl	8016348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8013684:	4632      	mov	r2, r6
 8013686:	a90e      	add	r1, sp, #56	@ 0x38
 8013688:	a80a      	add	r0, sp, #40	@ 0x28
 801368a:	f002 fe5d 	bl	8016348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801368e:	4632      	mov	r2, r6
 8013690:	a90f      	add	r1, sp, #60	@ 0x3c
 8013692:	a80b      	add	r0, sp, #44	@ 0x2c
 8013694:	f002 fe58 	bl	8016348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8013698:	4632      	mov	r2, r6
 801369a:	a910      	add	r1, sp, #64	@ 0x40
 801369c:	a80c      	add	r0, sp, #48	@ 0x30
 801369e:	f002 fe53 	bl	8016348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80136a2:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80136a6:	ed97 3a00 	vldr	s6, [r7]
 80136aa:	eef0 6a67 	vmov.f32	s13, s15
 80136ae:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80136b2:	edd7 4a01 	vldr	s9, [r7, #4]
 80136b6:	eeb0 7a67 	vmov.f32	s14, s15
 80136ba:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80136be:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80136c2:	ed99 2a00 	vldr	s4, [r9]
 80136c6:	eeb0 6a67 	vmov.f32	s12, s15
 80136ca:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80136ce:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80136d2:	edd8 2a00 	vldr	s5, [r8]
 80136d6:	edd9 3a01 	vldr	s7, [r9, #4]
 80136da:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80136de:	ed98 4a01 	vldr	s8, [r8, #4]
 80136e2:	ed99 5a02 	vldr	s10, [r9, #8]
 80136e6:	edd8 5a02 	vldr	s11, [r8, #8]
 80136ea:	ee16 6a10 	vmov	r6, s12
 80136ee:	eeb0 6a67 	vmov.f32	s12, s15
 80136f2:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80136f6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80136fa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80136fe:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8013702:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8013706:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 801370a:	ee16 0a10 	vmov	r0, s12
 801370e:	eeb0 6a67 	vmov.f32	s12, s15
 8013712:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8013716:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 801371a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801371e:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 8013722:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8013726:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 801372a:	ee16 1a10 	vmov	r1, s12
 801372e:	eeb0 6a67 	vmov.f32	s12, s15
 8013732:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8013736:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 801373a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801373e:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 8013742:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013746:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801374a:	68ff      	ldr	r7, [r7, #12]
 801374c:	ee16 2a10 	vmov	r2, s12
 8013750:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8013754:	9624      	str	r6, [sp, #144]	@ 0x90
 8013756:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801375a:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 801375e:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8013762:	4628      	mov	r0, r5
 8013764:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8013768:	9b06      	ldr	r3, [sp, #24]
 801376a:	922d      	str	r2, [sp, #180]	@ 0xb4
 801376c:	4a1f      	ldr	r2, [pc, #124]	@ (80137ec <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 801376e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8013770:	8812      	ldrh	r2, [r2, #0]
 8013772:	9b07      	ldr	r3, [sp, #28]
 8013774:	9218      	str	r2, [sp, #96]	@ 0x60
 8013776:	9319      	str	r3, [sp, #100]	@ 0x64
 8013778:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 801377c:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8013780:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8013784:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8013788:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 801378c:	9731      	str	r7, [sp, #196]	@ 0xc4
 801378e:	f006 fc7f 	bl	801a090 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8013792:	901a      	str	r0, [sp, #104]	@ 0x68
 8013794:	4628      	mov	r0, r5
 8013796:	f006 fb59 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801379a:	901b      	str	r0, [sp, #108]	@ 0x6c
 801379c:	4628      	mov	r0, r5
 801379e:	f006 fb89 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80137a2:	901c      	str	r0, [sp, #112]	@ 0x70
 80137a4:	4628      	mov	r0, r5
 80137a6:	f006 fb51 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80137aa:	4b11      	ldr	r3, [pc, #68]	@ (80137f0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 80137ac:	901d      	str	r0, [sp, #116]	@ 0x74
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80137b4:	b10a      	cbz	r2, 80137ba <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 80137b6:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80137b8:	b905      	cbnz	r5, 80137bc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 80137ba:	689d      	ldr	r5, [r3, #8]
 80137bc:	682b      	ldr	r3, [r5, #0]
 80137be:	4620      	mov	r0, r4
 80137c0:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80137c2:	f7ff fefb 	bl	80135bc <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 80137c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80137ca:	aa1e      	add	r2, sp, #120	@ 0x78
 80137cc:	a917      	add	r1, sp, #92	@ 0x5c
 80137ce:	9304      	str	r3, [sp, #16]
 80137d0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80137d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80137d8:	ab13      	add	r3, sp, #76	@ 0x4c
 80137da:	4628      	mov	r0, r5
 80137dc:	9301      	str	r3, [sp, #4]
 80137de:	ab15      	add	r3, sp, #84	@ 0x54
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	ab19      	add	r3, sp, #100	@ 0x64
 80137e4:	47b0      	blx	r6
 80137e6:	b033      	add	sp, #204	@ 0xcc
 80137e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ec:	20027dba 	.word	0x20027dba
 80137f0:	20027dc0 	.word	0x20027dc0

080137f4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80137f4:	b570      	push	{r4, r5, r6, lr}
 80137f6:	ed2d 8b04 	vpush	{d8-d9}
 80137fa:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80137fe:	b098      	sub	sp, #96	@ 0x60
 8013800:	4604      	mov	r4, r0
 8013802:	460e      	mov	r6, r1
 8013804:	2b00      	cmp	r3, #0
 8013806:	d065      	beq.n	80138d4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8013808:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801380c:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8013810:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 80138f0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8013814:	ee09 3a10 	vmov	s18, r3
 8013818:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801381c:	4628      	mov	r0, r5
 801381e:	ee08 3a90 	vmov	s17, r3
 8013822:	4b34      	ldr	r3, [pc, #208]	@ (80138f4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8013824:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8013828:	930c      	str	r3, [sp, #48]	@ 0x30
 801382a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801382e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013830:	930e      	str	r3, [sp, #56]	@ 0x38
 8013832:	ee39 9a08 	vadd.f32	s18, s18, s16
 8013836:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013838:	f006 fb08 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801383c:	ee07 0a90 	vmov	s15, r0
 8013840:	4628      	mov	r0, r5
 8013842:	ee78 8a88 	vadd.f32	s17, s17, s16
 8013846:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801384a:	f006 fb33 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801384e:	4b2a      	ldr	r3, [pc, #168]	@ (80138f8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8013850:	ee07 0a90 	vmov	s15, r0
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801385a:	eef0 7a48 	vmov.f32	s15, s16
 801385e:	2b01      	cmp	r3, #1
 8013860:	d13c      	bne.n	80138dc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8013862:	eef0 6a69 	vmov.f32	s13, s19
 8013866:	ee19 3a90 	vmov	r3, s19
 801386a:	eeb0 6a47 	vmov.f32	s12, s14
 801386e:	eef0 5a47 	vmov.f32	s11, s14
 8013872:	eef0 9a48 	vmov.f32	s19, s16
 8013876:	eeb0 7a48 	vmov.f32	s14, s16
 801387a:	9314      	str	r3, [sp, #80]	@ 0x50
 801387c:	ab14      	add	r3, sp, #80	@ 0x50
 801387e:	2200      	movs	r2, #0
 8013880:	4631      	mov	r1, r6
 8013882:	9303      	str	r3, [sp, #12]
 8013884:	ab10      	add	r3, sp, #64	@ 0x40
 8013886:	4620      	mov	r0, r4
 8013888:	edcd 7a04 	vstr	s15, [sp, #16]
 801388c:	9302      	str	r3, [sp, #8]
 801388e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013890:	ed8d 9a05 	vstr	s18, [sp, #20]
 8013894:	9301      	str	r3, [sp, #4]
 8013896:	ab08      	add	r3, sp, #32
 8013898:	ed8d 9a06 	vstr	s18, [sp, #24]
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	ab04      	add	r3, sp, #16
 80138a0:	edcd 7a07 	vstr	s15, [sp, #28]
 80138a4:	edcd 7a08 	vstr	s15, [sp, #32]
 80138a8:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 80138ac:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 80138b0:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 80138b4:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 80138b8:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 80138bc:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 80138c0:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 80138c4:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 80138c8:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 80138cc:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 80138d0:	f7ff fe7e 	bl	80135d0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80138d4:	b018      	add	sp, #96	@ 0x60
 80138d6:	ecbd 8b04 	vpop	{d8-d9}
 80138da:	bd70      	pop	{r4, r5, r6, pc}
 80138dc:	eef0 6a47 	vmov.f32	s13, s14
 80138e0:	ee18 3a10 	vmov	r3, s16
 80138e4:	eef0 5a69 	vmov.f32	s11, s19
 80138e8:	eeb0 6a48 	vmov.f32	s12, s16
 80138ec:	e7c5      	b.n	801387a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 80138ee:	bf00      	nop
 80138f0:	00000000 	.word	0x00000000
 80138f4:	42c80000 	.word	0x42c80000
 80138f8:	20027db8 	.word	0x20027db8

080138fc <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80138fc:	4b07      	ldr	r3, [pc, #28]	@ (801391c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80138fe:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013900:	881b      	ldrh	r3, [r3, #0]
 8013902:	4293      	cmp	r3, r2
 8013904:	bf81      	itttt	hi
 8013906:	4b06      	ldrhi	r3, [pc, #24]	@ (8013920 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013908:	681b      	ldrhi	r3, [r3, #0]
 801390a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801390e:	7858      	ldrbhi	r0, [r3, #1]
 8013910:	bf8c      	ite	hi
 8013912:	f000 0003 	andhi.w	r0, r0, #3
 8013916:	2000      	movls	r0, #0
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop
 801391c:	20027e1c 	.word	0x20027e1c
 8013920:	20027e18 	.word	0x20027e18

08013924 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013924:	4b11      	ldr	r3, [pc, #68]	@ (801396c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8013926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801392c:	4604      	mov	r4, r0
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	428b      	cmp	r3, r1
 8013932:	d918      	bls.n	8013966 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013934:	6803      	ldr	r3, [r0, #0]
 8013936:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8013938:	4b0d      	ldr	r3, [pc, #52]	@ (8013970 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801393a:	6818      	ldr	r0, [r3, #0]
 801393c:	f7f3 fdde 	bl	80074fc <_ZNK8touchgfx5Texts7getTextEt>
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	4606      	mov	r6, r0
 8013944:	4620      	mov	r0, r4
 8013946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013948:	4798      	blx	r3
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	4607      	mov	r7, r0
 801394e:	4620      	mov	r0, r4
 8013950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013954:	4798      	blx	r3
 8013956:	463a      	mov	r2, r7
 8013958:	4603      	mov	r3, r0
 801395a:	4631      	mov	r1, r6
 801395c:	4620      	mov	r0, r4
 801395e:	46ac      	mov	ip, r5
 8013960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013964:	4760      	bx	ip
 8013966:	2000      	movs	r0, #0
 8013968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801396c:	20027e1c 	.word	0x20027e1c
 8013970:	20027e24 	.word	0x20027e24

08013974 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013974:	4b18      	ldr	r3, [pc, #96]	@ (80139d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013976:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801397a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801397c:	4604      	mov	r4, r0
 801397e:	881b      	ldrh	r3, [r3, #0]
 8013980:	428b      	cmp	r3, r1
 8013982:	d926      	bls.n	80139d2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013984:	4b15      	ldr	r3, [pc, #84]	@ (80139dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801398c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013990:	4b13      	ldr	r3, [pc, #76]	@ (80139e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013992:	7855      	ldrb	r5, [r2, #1]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801399a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801399e:	6833      	ldr	r3, [r6, #0]
 80139a0:	69df      	ldr	r7, [r3, #28]
 80139a2:	4b10      	ldr	r3, [pc, #64]	@ (80139e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80139a4:	6818      	ldr	r0, [r3, #0]
 80139a6:	f7f3 fda9 	bl	80074fc <_ZNK8touchgfx5Texts7getTextEt>
 80139aa:	6823      	ldr	r3, [r4, #0]
 80139ac:	4680      	mov	r8, r0
 80139ae:	4620      	mov	r0, r4
 80139b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80139b2:	4798      	blx	r3
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	4681      	mov	r9, r0
 80139b8:	4620      	mov	r0, r4
 80139ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80139be:	4798      	blx	r3
 80139c0:	464b      	mov	r3, r9
 80139c2:	9000      	str	r0, [sp, #0]
 80139c4:	4642      	mov	r2, r8
 80139c6:	4629      	mov	r1, r5
 80139c8:	4630      	mov	r0, r6
 80139ca:	47b8      	blx	r7
 80139cc:	b003      	add	sp, #12
 80139ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139d2:	2000      	movs	r0, #0
 80139d4:	e7fa      	b.n	80139cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80139d6:	bf00      	nop
 80139d8:	20027e1c 	.word	0x20027e1c
 80139dc:	20027e18 	.word	0x20027e18
 80139e0:	20027e20 	.word	0x20027e20
 80139e4:	20027e24 	.word	0x20027e24

080139e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80139e8:	b40e      	push	{r1, r2, r3}
 80139ea:	4b30      	ldr	r3, [pc, #192]	@ (8013aac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80139ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139f0:	881a      	ldrh	r2, [r3, #0]
 80139f2:	b09d      	sub	sp, #116	@ 0x74
 80139f4:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80139f6:	4604      	mov	r4, r0
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d954      	bls.n	8013aa6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80139fc:	aa26      	add	r2, sp, #152	@ 0x98
 80139fe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8013ab0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013a02:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8013ab4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013a06:	9202      	str	r2, [sp, #8]
 8013a08:	f8d9 2000 	ldr.w	r2, [r9]
 8013a0c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013a10:	f8d8 3000 	ldr.w	r3, [r8]
 8013a14:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a1e:	4798      	blx	r3
 8013a20:	4606      	mov	r6, r0
 8013a22:	b207      	sxth	r7, r0
 8013a24:	a803      	add	r0, sp, #12
 8013a26:	f004 fc69 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 8013a2a:	682b      	ldr	r3, [r5, #0]
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a30:	4798      	blx	r3
 8013a32:	682b      	ldr	r3, [r5, #0]
 8013a34:	4682      	mov	sl, r0
 8013a36:	4628      	mov	r0, r5
 8013a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a3a:	4798      	blx	r3
 8013a3c:	4653      	mov	r3, sl
 8013a3e:	9000      	str	r0, [sp, #0]
 8013a40:	a803      	add	r0, sp, #12
 8013a42:	9a02      	ldr	r2, [sp, #8]
 8013a44:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8013a46:	f004 fcac 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013a4a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013a4c:	f8d9 3000 	ldr.w	r3, [r9]
 8013a50:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8013a54:	8925      	ldrh	r5, [r4, #8]
 8013a56:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8013a5a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013a5e:	eba5 050c 	sub.w	r5, r5, ip
 8013a62:	784a      	ldrb	r2, [r1, #1]
 8013a64:	f8d8 3000 	ldr.w	r3, [r8]
 8013a68:	b22d      	sxth	r5, r5
 8013a6a:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8013a6e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013a72:	9500      	str	r5, [sp, #0]
 8013a74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013a78:	a803      	add	r0, sp, #12
 8013a7a:	f002 f943 	bl	8015d04 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013a7e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8013a82:	b203      	sxth	r3, r0
 8013a84:	18b9      	adds	r1, r7, r2
 8013a86:	2900      	cmp	r1, #0
 8013a88:	dd0b      	ble.n	8013aa2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	fb13 f302 	smulbb	r3, r3, r2
 8013a90:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013a94:	b21f      	sxth	r7, r3
 8013a96:	4638      	mov	r0, r7
 8013a98:	b01d      	add	sp, #116	@ 0x74
 8013a9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a9e:	b003      	add	sp, #12
 8013aa0:	4770      	bx	lr
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dcf7      	bgt.n	8013a96 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013aa6:	2700      	movs	r7, #0
 8013aa8:	e7f5      	b.n	8013a96 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013aaa:	bf00      	nop
 8013aac:	20027e1c 	.word	0x20027e1c
 8013ab0:	20027e18 	.word	0x20027e18
 8013ab4:	20027e20 	.word	0x20027e20

08013ab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4b0e      	ldr	r3, [pc, #56]	@ (8013af4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013abc:	4604      	mov	r4, r0
 8013abe:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013ac0:	881b      	ldrh	r3, [r3, #0]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d214      	bcs.n	8013af0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013ac6:	6803      	ldr	r3, [r0, #0]
 8013ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013aca:	4798      	blx	r3
 8013acc:	6823      	ldr	r3, [r4, #0]
 8013ace:	4605      	mov	r5, r0
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ad4:	4798      	blx	r3
 8013ad6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013ada:	b22d      	sxth	r5, r5
 8013adc:	4601      	mov	r1, r0
 8013ade:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013ae2:	bf06      	itte	eq
 8013ae4:	4602      	moveq	r2, r0
 8013ae6:	4629      	moveq	r1, r5
 8013ae8:	462a      	movne	r2, r5
 8013aea:	4620      	mov	r0, r4
 8013aec:	f7fc f810 	bl	800fb10 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013af0:	bd38      	pop	{r3, r4, r5, pc}
 8013af2:	bf00      	nop
 8013af4:	20027e1c 	.word	0x20027e1c

08013af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013af8:	b530      	push	{r4, r5, lr}
 8013afa:	888b      	ldrh	r3, [r1, #4]
 8013afc:	b085      	sub	sp, #20
 8013afe:	4604      	mov	r4, r0
 8013b00:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013b02:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013b06:	b923      	cbnz	r3, 8013b12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013b08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013b0c:	b90b      	cbnz	r3, 8013b12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013b0e:	f7ff ffd3 	bl	8013ab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013b12:	6823      	ldr	r3, [r4, #0]
 8013b14:	466d      	mov	r5, sp
 8013b16:	4621      	mov	r1, r4
 8013b18:	343c      	adds	r4, #60	@ 0x3c
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b20:	4798      	blx	r3
 8013b22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013b2a:	b005      	add	sp, #20
 8013b2c:	bd30      	pop	{r4, r5, pc}

08013b2e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013b2e:	2300      	movs	r3, #0
 8013b30:	8083      	strh	r3, [r0, #4]
 8013b32:	80c3      	strh	r3, [r0, #6]
 8013b34:	8003      	strh	r3, [r0, #0]
 8013b36:	8043      	strh	r3, [r0, #2]
 8013b38:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8013b3c:	2bff      	cmp	r3, #255	@ 0xff
 8013b3e:	bf01      	itttt	eq
 8013b40:	890b      	ldrheq	r3, [r1, #8]
 8013b42:	8083      	strheq	r3, [r0, #4]
 8013b44:	894b      	ldrheq	r3, [r1, #10]
 8013b46:	80c3      	strheq	r3, [r0, #6]
 8013b48:	4770      	bx	lr
	...

08013b4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b4e:	4604      	mov	r4, r0
 8013b50:	466b      	mov	r3, sp
 8013b52:	6808      	ldr	r0, [r1, #0]
 8013b54:	6849      	ldr	r1, [r1, #4]
 8013b56:	c303      	stmia	r3!, {r0, r1}
 8013b58:	6823      	ldr	r3, [r4, #0]
 8013b5a:	4669      	mov	r1, sp
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b60:	4798      	blx	r3
 8013b62:	4b08      	ldr	r3, [pc, #32]	@ (8013b84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013b6a:	b10a      	cbz	r2, 8013b70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013b6c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013b6e:	b900      	cbnz	r0, 8013b72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013b70:	6898      	ldr	r0, [r3, #8]
 8013b72:	6803      	ldr	r3, [r0, #0]
 8013b74:	4669      	mov	r1, sp
 8013b76:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013b78:	6a1d      	ldr	r5, [r3, #32]
 8013b7a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8013b7e:	47a8      	blx	r5
 8013b80:	b003      	add	sp, #12
 8013b82:	bd30      	pop	{r4, r5, pc}
 8013b84:	20027dc0 	.word	0x20027dc0

08013b88 <_ZN8touchgfx3BoxD1Ev>:
 8013b88:	4770      	bx	lr

08013b8a <_ZN8touchgfx3BoxD0Ev>:
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	212c      	movs	r1, #44	@ 0x2c
 8013b90:	f015 f80b 	bl	8028baa <_ZdlPvj>
 8013b94:	4620      	mov	r0, r4
 8013b96:	bd10      	pop	{r4, pc}

08013b98 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013b98:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8013b9c:	b12a      	cbz	r2, 8013baa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013b9e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013ba2:	b112      	cbz	r2, 8013baa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013ba4:	6803      	ldr	r3, [r0, #0]
 8013ba6:	695b      	ldr	r3, [r3, #20]
 8013ba8:	4718      	bx	r3
 8013baa:	4770      	bx	lr

08013bac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8013bac:	4b30      	ldr	r3, [pc, #192]	@ (8013c70 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8013bae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bb2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013bb4:	b08d      	sub	sp, #52	@ 0x34
 8013bb6:	881b      	ldrh	r3, [r3, #0]
 8013bb8:	4604      	mov	r4, r0
 8013bba:	460f      	mov	r7, r1
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	d954      	bls.n	8013c6a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8013c74 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8013bc2:	6819      	ldr	r1, [r3, #0]
 8013bc4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013bc8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8013c78 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8013bce:	6812      	ldr	r2, [r2, #0]
 8013bd0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013bd4:	2900      	cmp	r1, #0
 8013bd6:	d048      	beq.n	8013c6a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013bd8:	785a      	ldrb	r2, [r3, #1]
 8013bda:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8013bde:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013be2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013be6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013bea:	4b24      	ldr	r3, [pc, #144]	@ (8013c7c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013bec:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8013bf6:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8013bfa:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8013bfe:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013c00:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8013c04:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8013c08:	9107      	str	r1, [sp, #28]
 8013c0a:	f88d 8020 	strb.w	r8, [sp, #32]
 8013c0e:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8013c12:	9609      	str	r6, [sp, #36]	@ 0x24
 8013c14:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8013c18:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013c1c:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8013c20:	b10b      	cbz	r3, 8013c26 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013c22:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8013c24:	b905      	cbnz	r5, 8013c28 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013c26:	6895      	ldr	r5, [r2, #8]
 8013c28:	ae05      	add	r6, sp, #20
 8013c2a:	4621      	mov	r1, r4
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f003 fe57 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c32:	4b13      	ldr	r3, [pc, #76]	@ (8013c80 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013c34:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013c36:	6818      	ldr	r0, [r3, #0]
 8013c38:	f7f3 fc60 	bl	80074fc <_ZNK8touchgfx5Texts7getTextEt>
 8013c3c:	6823      	ldr	r3, [r4, #0]
 8013c3e:	4680      	mov	r8, r0
 8013c40:	4620      	mov	r0, r4
 8013c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013c44:	4798      	blx	r3
 8013c46:	6823      	ldr	r3, [r4, #0]
 8013c48:	4681      	mov	r9, r0
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c50:	4798      	blx	r3
 8013c52:	ab07      	add	r3, sp, #28
 8013c54:	f8cd 8004 	str.w	r8, [sp, #4]
 8013c58:	9300      	str	r3, [sp, #0]
 8013c5a:	463b      	mov	r3, r7
 8013c5c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013c60:	4628      	mov	r0, r5
 8013c62:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013c66:	f7f3 fbfb 	bl	8007460 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013c6a:	b00d      	add	sp, #52	@ 0x34
 8013c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c70:	20027e1c 	.word	0x20027e1c
 8013c74:	20027e18 	.word	0x20027e18
 8013c78:	20027e20 	.word	0x20027e20
 8013c7c:	20027dc0 	.word	0x20027dc0
 8013c80:	20027e24 	.word	0x20027e24

08013c84 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013c84:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8013c88:	4770      	bx	lr

08013c8a <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013c8a:	b508      	push	{r3, lr}
 8013c8c:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8013c90:	b10b      	cbz	r3, 8013c96 <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
 8013c92:	f7ee fbb6 	bl	8002402 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8013c96:	bd08      	pop	{r3, pc}

08013c98 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 8013c98:	4770      	bx	lr

08013c9a <_ZN8touchgfx14ButtonWithIconD1Ev>:
 8013c9a:	4770      	bx	lr

08013c9c <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8013c9c:	b510      	push	{r4, lr}
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	213c      	movs	r1, #60	@ 0x3c
 8013ca2:	f014 ff82 	bl	8028baa <_ZdlPvj>
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	bd10      	pop	{r4, pc}

08013caa <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8013caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cae:	461c      	mov	r4, r3
 8013cb0:	4606      	mov	r6, r0
 8013cb2:	9f06      	ldr	r7, [sp, #24]
 8013cb4:	f014 fec9 	bl	8028a4a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8013cb8:	8823      	ldrh	r3, [r4, #0]
 8013cba:	f04f 0802 	mov.w	r8, #2
 8013cbe:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8013cc6:	883b      	ldrh	r3, [r7, #0]
 8013cc8:	fb95 f5f8 	sdiv	r5, r5, r8
 8013ccc:	86f3      	strh	r3, [r6, #54]	@ 0x36
 8013cce:	b2ad      	uxth	r5, r5
 8013cd0:	f006 f8bc 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013cd4:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8013cd8:	fb90 f0f8 	sdiv	r0, r0, r8
 8013cdc:	1a2d      	subs	r5, r5, r0
 8013cde:	4638      	mov	r0, r7
 8013ce0:	fb94 f4f8 	sdiv	r4, r4, r8
 8013ce4:	8735      	strh	r5, [r6, #56]	@ 0x38
 8013ce6:	b2a4      	uxth	r4, r4
 8013ce8:	f006 f8e4 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013cec:	fb90 f0f8 	sdiv	r0, r0, r8
 8013cf0:	1a24      	subs	r4, r4, r0
 8013cf2:	8774      	strh	r4, [r6, #58]	@ 0x3a
 8013cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013cf8 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013cf8:	b510      	push	{r4, lr}
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013cfe:	b150      	cbz	r0, 8013d16 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013d00:	6803      	ldr	r3, [r0, #0]
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	4798      	blx	r3
 8013d06:	b130      	cbz	r0, 8013d16 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013d08:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	6803      	ldr	r3, [r0, #0]
 8013d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d12:	689b      	ldr	r3, [r3, #8]
 8013d14:	4718      	bx	r3
 8013d16:	bd10      	pop	{r4, pc}

08013d18 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8013d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	b08c      	sub	sp, #48	@ 0x30
 8013d20:	460d      	mov	r5, r1
 8013d22:	f014 fec5 	bl	8028ab0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8013d26:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d05d      	beq.n	8013dea <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 8013d2e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013d30:	a805      	add	r0, sp, #20
 8013d32:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d36:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	@ 0x38
 8013d3a:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	@ 0x3a
 8013d3e:	f006 f885 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013d42:	4606      	mov	r6, r0
 8013d44:	a805      	add	r0, sp, #20
 8013d46:	f006 f8b5 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013d4a:	6869      	ldr	r1, [r5, #4]
 8013d4c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013d50:	ab08      	add	r3, sp, #32
 8013d52:	6828      	ldr	r0, [r5, #0]
 8013d54:	ad08      	add	r5, sp, #32
 8013d56:	f8ad 8018 	strh.w	r8, [sp, #24]
 8013d5a:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013d5e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013d62:	c303      	stmia	r3!, {r0, r1}
 8013d64:	a906      	add	r1, sp, #24
 8013d66:	4628      	mov	r0, r5
 8013d68:	f7fc fa62 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8013d6c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013d70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d035      	beq.n	8013de4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013d78:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	dd31      	ble.n	8013de4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013d80:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	dd2d      	ble.n	8013de4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	a90a      	add	r1, sp, #40	@ 0x28
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8013d92:	6823      	ldr	r3, [r4, #0]
 8013d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d96:	4798      	blx	r3
 8013d98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013d9c:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 8013d9e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8013da2:	1a9b      	subs	r3, r3, r2
 8013da4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013da8:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8013daa:	1ac9      	subs	r1, r1, r3
 8013dac:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8013db0:	490f      	ldr	r1, [pc, #60]	@ (8013df0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 8013db2:	6809      	ldr	r1, [r1, #0]
 8013db4:	f891 0058 	ldrb.w	r0, [r1, #88]	@ 0x58
 8013db8:	b108      	cbz	r0, 8013dbe <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 8013dba:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8013dbc:	b900      	cbnz	r0, 8013dc0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 8013dbe:	6888      	ldr	r0, [r1, #8]
 8013dc0:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
 8013dc4:	2601      	movs	r6, #1
 8013dc6:	440b      	add	r3, r1
 8013dc8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8013dcc:	440a      	add	r2, r1
 8013dce:	6801      	ldr	r1, [r0, #0]
 8013dd0:	9602      	str	r6, [sp, #8]
 8013dd2:	b21b      	sxth	r3, r3
 8013dd4:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8013dd8:	b212      	sxth	r2, r2
 8013dda:	e9cd 5400 	strd	r5, r4, [sp]
 8013dde:	688c      	ldr	r4, [r1, #8]
 8013de0:	a905      	add	r1, sp, #20
 8013de2:	47a0      	blx	r4
 8013de4:	b00c      	add	sp, #48	@ 0x30
 8013de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dea:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013dec:	e7a0      	b.n	8013d30 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 8013dee:	bf00      	nop
 8013df0:	20027dc0 	.word	0x20027dc0

08013df4 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8013df4:	2101      	movs	r1, #1
 8013df6:	2200      	movs	r2, #0
 8013df8:	b510      	push	{r4, lr}
 8013dfa:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013dfe:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8013e02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013e06:	4c0d      	ldr	r4, [pc, #52]	@ (8013e3c <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 8013e08:	8082      	strh	r2, [r0, #4]
 8013e0a:	80c2      	strh	r2, [r0, #6]
 8013e0c:	8102      	strh	r2, [r0, #8]
 8013e0e:	8142      	strh	r2, [r0, #10]
 8013e10:	8182      	strh	r2, [r0, #12]
 8013e12:	81c2      	strh	r2, [r0, #14]
 8013e14:	8202      	strh	r2, [r0, #16]
 8013e16:	8242      	strh	r2, [r0, #18]
 8013e18:	61c2      	str	r2, [r0, #28]
 8013e1a:	8402      	strh	r2, [r0, #32]
 8013e1c:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013e1e:	6282      	str	r2, [r0, #40]	@ 0x28
 8013e20:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8013e24:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8013e26:	8601      	strh	r1, [r0, #48]	@ 0x30
 8013e28:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8013e2c:	6004      	str	r4, [r0, #0]
 8013e2e:	8681      	strh	r1, [r0, #52]	@ 0x34
 8013e30:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8013e32:	8702      	strh	r2, [r0, #56]	@ 0x38
 8013e34:	8742      	strh	r2, [r0, #58]	@ 0x3a
 8013e36:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013e3a:	bd10      	pop	{r4, pc}
 8013e3c:	0802dfdc 	.word	0x0802dfdc

08013e40 <_ZN8touchgfx5ImageD1Ev>:
 8013e40:	4770      	bx	lr

08013e42 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013e42:	b570      	push	{r4, r5, r6, lr}
 8013e44:	880b      	ldrh	r3, [r1, #0]
 8013e46:	460d      	mov	r5, r1
 8013e48:	4604      	mov	r4, r0
 8013e4a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013e4c:	4608      	mov	r0, r1
 8013e4e:	f005 fffd 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013e52:	4606      	mov	r6, r0
 8013e54:	4628      	mov	r0, r5
 8013e56:	f006 f82d 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013e5a:	6823      	ldr	r3, [r4, #0]
 8013e5c:	4605      	mov	r5, r0
 8013e5e:	4631      	mov	r1, r6
 8013e60:	4620      	mov	r0, r4
 8013e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e64:	4798      	blx	r3
 8013e66:	6823      	ldr	r3, [r4, #0]
 8013e68:	4629      	mov	r1, r5
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e72:	4718      	bx	r3

08013e74 <_ZN8touchgfx5ImageD0Ev>:
 8013e74:	b510      	push	{r4, lr}
 8013e76:	4604      	mov	r4, r0
 8013e78:	212c      	movs	r1, #44	@ 0x2c
 8013e7a:	f014 fe96 	bl	8028baa <_ZdlPvj>
 8013e7e:	4620      	mov	r0, r4
 8013e80:	bd10      	pop	{r4, pc}

08013e82 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013e82:	b510      	push	{r4, lr}
 8013e84:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8013e88:	4604      	mov	r4, r0
 8013e8a:	2bff      	cmp	r3, #255	@ 0xff
 8013e8c:	d006      	beq.n	8013e9c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013e8e:	2300      	movs	r3, #0
 8013e90:	8003      	strh	r3, [r0, #0]
 8013e92:	8043      	strh	r3, [r0, #2]
 8013e94:	8083      	strh	r3, [r0, #4]
 8013e96:	80c3      	strh	r3, [r0, #6]
 8013e98:	4620      	mov	r0, r4
 8013e9a:	bd10      	pop	{r4, pc}
 8013e9c:	3126      	adds	r1, #38	@ 0x26
 8013e9e:	f006 f83d 	bl	8019f1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013ea2:	e7f9      	b.n	8013e98 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013ea4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	b088      	sub	sp, #32
 8013eac:	2500      	movs	r5, #0
 8013eae:	460f      	mov	r7, r1
 8013eb0:	f854 3b26 	ldr.w	r3, [r4], #38
 8013eb4:	a904      	add	r1, sp, #16
 8013eb6:	4606      	mov	r6, r0
 8013eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013ebe:	4798      	blx	r3
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f005 ffc3 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ec6:	4680      	mov	r8, r0
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f005 fff3 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013ece:	9506      	str	r5, [sp, #24]
 8013ed0:	ad06      	add	r5, sp, #24
 8013ed2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013ed6:	4639      	mov	r1, r7
 8013ed8:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013edc:	4628      	mov	r0, r5
 8013ede:	f7fc f9a7 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8013ee2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	dd19      	ble.n	8013f1e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013eea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	dd15      	ble.n	8013f1e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8013f24 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013efa:	b10a      	cbz	r2, 8013f00 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013efc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013efe:	b900      	cbnz	r0, 8013f02 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013f00:	6898      	ldr	r0, [r3, #8]
 8013f02:	2701      	movs	r7, #1
 8013f04:	6801      	ldr	r1, [r0, #0]
 8013f06:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013f0a:	9702      	str	r7, [sp, #8]
 8013f0c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8013f10:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013f14:	e9cd 5600 	strd	r5, r6, [sp]
 8013f18:	688d      	ldr	r5, [r1, #8]
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	47a8      	blx	r5
 8013f1e:	b008      	add	sp, #32
 8013f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f24:	20027dc0 	.word	0x20027dc0

08013f28 <_ZN8touchgfx7OutlineD1Ev>:
 8013f28:	4770      	bx	lr

08013f2a <_ZN8touchgfx7OutlineD0Ev>:
 8013f2a:	b510      	push	{r4, lr}
 8013f2c:	4604      	mov	r4, r0
 8013f2e:	2130      	movs	r1, #48	@ 0x30
 8013f30:	f014 fe3b 	bl	8028baa <_ZdlPvj>
 8013f34:	4620      	mov	r0, r4
 8013f36:	bd10      	pop	{r4, pc}

08013f38 <_ZN8touchgfx7Outline5resetEv>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	f000 fe86 	bl	8014c4c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8013f40:	60e0      	str	r0, [r4, #12]
 8013f42:	f000 fe89 	bl	8014c58 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013f46:	68e3      	ldr	r3, [r4, #12]
 8013f48:	08c0      	lsrs	r0, r0, #3
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8013f50:	6123      	str	r3, [r4, #16]
 8013f52:	3801      	subs	r0, #1
 8013f54:	60a2      	str	r2, [r4, #8]
 8013f56:	6060      	str	r0, [r4, #4]
 8013f58:	8019      	strh	r1, [r3, #0]
 8013f5a:	8059      	strh	r1, [r3, #2]
 8013f5c:	809a      	strh	r2, [r3, #4]
 8013f5e:	80da      	strh	r2, [r3, #6]
 8013f60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013f62:	f023 0301 	bic.w	r3, r3, #1
 8013f66:	f043 0302 	orr.w	r3, r3, #2
 8013f6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8013f6c:	bd10      	pop	{r4, pc}
	...

08013f70 <_ZN8touchgfx7OutlineC1Ev>:
 8013f70:	4b0a      	ldr	r3, [pc, #40]	@ (8013f9c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8013f72:	b510      	push	{r4, lr}
 8013f74:	6003      	str	r3, [r0, #0]
 8013f76:	2300      	movs	r3, #0
 8013f78:	4604      	mov	r4, r0
 8013f7a:	6243      	str	r3, [r0, #36]	@ 0x24
 8013f7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8013f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013f84:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013f88:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8013f8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013f90:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8013f94:	f7ff ffd0 	bl	8013f38 <_ZN8touchgfx7Outline5resetEv>
 8013f98:	4620      	mov	r0, r4
 8013f9a:	bd10      	pop	{r4, pc}
 8013f9c:	0802e0c0 	.word	0x0802e0c0

08013fa0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8013fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa4:	b093      	sub	sp, #76	@ 0x4c
 8013fa6:	1156      	asrs	r6, r2, #5
 8013fa8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8013faa:	9305      	str	r3, [sp, #20]
 8013fac:	1153      	asrs	r3, r2, #5
 8013fae:	f004 051f 	and.w	r5, r4, #31
 8013fb2:	9303      	str	r3, [sp, #12]
 8013fb4:	1163      	asrs	r3, r4, #5
 8013fb6:	9504      	str	r5, [sp, #16]
 8013fb8:	1165      	asrs	r5, r4, #5
 8013fba:	9306      	str	r3, [sp, #24]
 8013fbc:	f002 031f 	and.w	r3, r2, #31
 8013fc0:	42ae      	cmp	r6, r5
 8013fc2:	f040 80f4 	bne.w	80141ae <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8013fc6:	9c04      	ldr	r4, [sp, #16]
 8013fc8:	9a05      	ldr	r2, [sp, #20]
 8013fca:	42a3      	cmp	r3, r4
 8013fcc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8013fd0:	6902      	ldr	r2, [r0, #16]
 8013fd2:	d125      	bne.n	8014020 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8013fd4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013fd8:	459e      	cmp	lr, r3
 8013fda:	d103      	bne.n	8013fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8013fdc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013fe0:	429e      	cmp	r6, r3
 8013fe2:	d035      	beq.n	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013fe4:	88d1      	ldrh	r1, [r2, #6]
 8013fe6:	8893      	ldrh	r3, [r2, #4]
 8013fe8:	430b      	orrs	r3, r1
 8013fea:	d010      	beq.n	801400e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013fec:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	db0c      	blt.n	801400e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013ff4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013ff6:	428b      	cmp	r3, r1
 8013ff8:	da09      	bge.n	801400e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013ffa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013ffe:	428b      	cmp	r3, r1
 8014000:	f103 0301 	add.w	r3, r3, #1
 8014004:	bf38      	it	cc
 8014006:	3208      	addcc	r2, #8
 8014008:	6083      	str	r3, [r0, #8]
 801400a:	bf38      	it	cc
 801400c:	6102      	strcc	r2, [r0, #16]
 801400e:	6903      	ldr	r3, [r0, #16]
 8014010:	9a03      	ldr	r2, [sp, #12]
 8014012:	f8a3 e000 	strh.w	lr, [r3]
 8014016:	805a      	strh	r2, [r3, #2]
 8014018:	2200      	movs	r2, #0
 801401a:	809a      	strh	r2, [r3, #4]
 801401c:	80da      	strh	r2, [r3, #6]
 801401e:	e017      	b.n	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014020:	9c05      	ldr	r4, [sp, #20]
 8014022:	114e      	asrs	r6, r1, #5
 8014024:	f001 0c1f 	and.w	ip, r1, #31
 8014028:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801402c:	f004 041f 	and.w	r4, r4, #31
 8014030:	4576      	cmp	r6, lr
 8014032:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8014036:	9402      	str	r4, [sp, #8]
 8014038:	9c04      	ldr	r4, [sp, #16]
 801403a:	eba4 0403 	sub.w	r4, r4, r3
 801403e:	d10a      	bne.n	8014056 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014040:	9b02      	ldr	r3, [sp, #8]
 8014042:	44a0      	add	r8, r4
 8014044:	449c      	add	ip, r3
 8014046:	f8a2 8004 	strh.w	r8, [r2, #4]
 801404a:	fb04 a40c 	mla	r4, r4, ip, sl
 801404e:	80d4      	strh	r4, [r2, #6]
 8014050:	b013      	add	sp, #76	@ 0x4c
 8014052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014056:	9d05      	ldr	r5, [sp, #20]
 8014058:	1a69      	subs	r1, r5, r1
 801405a:	bf51      	iteee	pl
 801405c:	f1cc 0520 	rsbpl	r5, ip, #32
 8014060:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014064:	4249      	negmi	r1, r1
 8014066:	2500      	movmi	r5, #0
 8014068:	bf5d      	ittte	pl
 801406a:	436c      	mulpl	r4, r5
 801406c:	2520      	movpl	r5, #32
 801406e:	f04f 0901 	movpl.w	r9, #1
 8014072:	f04f 39ff 	movmi.w	r9, #4294967295
 8014076:	9501      	str	r5, [sp, #4]
 8014078:	9f01      	ldr	r7, [sp, #4]
 801407a:	444e      	add	r6, r9
 801407c:	fb94 f5f1 	sdiv	r5, r4, r1
 8014080:	fb01 4415 	mls	r4, r1, r5, r4
 8014084:	44bc      	add	ip, r7
 8014086:	2c00      	cmp	r4, #0
 8014088:	bfbc      	itt	lt
 801408a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801408e:	1864      	addlt	r4, r4, r1
 8014090:	44a8      	add	r8, r5
 8014092:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014096:	f8a2 8004 	strh.w	r8, [r2, #4]
 801409a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801409e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140a2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80140a6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80140aa:	ea58 0202 	orrs.w	r2, r8, r2
 80140ae:	d011      	beq.n	80140d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80140b0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80140b4:	f1b8 0f00 	cmp.w	r8, #0
 80140b8:	db0c      	blt.n	80140d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80140ba:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80140bc:	4590      	cmp	r8, r2
 80140be:	da09      	bge.n	80140d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80140c0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80140c4:	4590      	cmp	r8, r2
 80140c6:	bf3c      	itt	cc
 80140c8:	f10c 0208 	addcc.w	r2, ip, #8
 80140cc:	6102      	strcc	r2, [r0, #16]
 80140ce:	f108 0201 	add.w	r2, r8, #1
 80140d2:	6082      	str	r2, [r0, #8]
 80140d4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140d8:	2700      	movs	r7, #0
 80140da:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80140de:	45b6      	cmp	lr, r6
 80140e0:	f8ac 6000 	strh.w	r6, [ip]
 80140e4:	442b      	add	r3, r5
 80140e6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80140ea:	f8ac 7004 	strh.w	r7, [ip, #4]
 80140ee:	f8ac 7006 	strh.w	r7, [ip, #6]
 80140f2:	d04b      	beq.n	801418c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80140f4:	9f04      	ldr	r7, [sp, #16]
 80140f6:	1a64      	subs	r4, r4, r1
 80140f8:	f04f 0a00 	mov.w	sl, #0
 80140fc:	1aff      	subs	r7, r7, r3
 80140fe:	443d      	add	r5, r7
 8014100:	016d      	lsls	r5, r5, #5
 8014102:	fb95 f8f1 	sdiv	r8, r5, r1
 8014106:	fb01 5518 	mls	r5, r1, r8, r5
 801410a:	2d00      	cmp	r5, #0
 801410c:	bfbc      	itt	lt
 801410e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014112:	186d      	addlt	r5, r5, r1
 8014114:	f108 0701 	add.w	r7, r8, #1
 8014118:	9703      	str	r7, [sp, #12]
 801411a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801411e:	1964      	adds	r4, r4, r5
 8014120:	444e      	add	r6, r9
 8014122:	bf54      	ite	pl
 8014124:	9f03      	ldrpl	r7, [sp, #12]
 8014126:	4647      	movmi	r7, r8
 8014128:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801412c:	bf58      	it	pl
 801412e:	1a64      	subpl	r4, r4, r1
 8014130:	443b      	add	r3, r7
 8014132:	44bb      	add	fp, r7
 8014134:	f8ac b004 	strh.w	fp, [ip, #4]
 8014138:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801413c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014140:	f8ac b006 	strh.w	fp, [ip, #6]
 8014144:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014148:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801414c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014150:	ea5b 0707 	orrs.w	r7, fp, r7
 8014154:	d011      	beq.n	801417a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014156:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801415a:	f1bb 0f00 	cmp.w	fp, #0
 801415e:	db0c      	blt.n	801417a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014160:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014162:	45bb      	cmp	fp, r7
 8014164:	da09      	bge.n	801417a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014166:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801416a:	45bb      	cmp	fp, r7
 801416c:	bf3c      	itt	cc
 801416e:	f10c 0708 	addcc.w	r7, ip, #8
 8014172:	6107      	strcc	r7, [r0, #16]
 8014174:	f10b 0701 	add.w	r7, fp, #1
 8014178:	6087      	str	r7, [r0, #8]
 801417a:	6907      	ldr	r7, [r0, #16]
 801417c:	45b6      	cmp	lr, r6
 801417e:	803e      	strh	r6, [r7, #0]
 8014180:	807a      	strh	r2, [r7, #2]
 8014182:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014186:	f8a7 a006 	strh.w	sl, [r7, #6]
 801418a:	d1c6      	bne.n	801411a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801418c:	9a04      	ldr	r2, [sp, #16]
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	6902      	ldr	r2, [r0, #16]
 8014192:	8891      	ldrh	r1, [r2, #4]
 8014194:	88d6      	ldrh	r6, [r2, #6]
 8014196:	4419      	add	r1, r3
 8014198:	8091      	strh	r1, [r2, #4]
 801419a:	9902      	ldr	r1, [sp, #8]
 801419c:	f101 0c20 	add.w	ip, r1, #32
 80141a0:	9901      	ldr	r1, [sp, #4]
 80141a2:	ebac 0c01 	sub.w	ip, ip, r1
 80141a6:	fb03 630c 	mla	r3, r3, ip, r6
 80141aa:	80d3      	strh	r3, [r2, #6]
 80141ac:	e750      	b.n	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80141ae:	9d05      	ldr	r5, [sp, #20]
 80141b0:	1aa2      	subs	r2, r4, r2
 80141b2:	eba5 0501 	sub.w	r5, r5, r1
 80141b6:	9202      	str	r2, [sp, #8]
 80141b8:	9508      	str	r5, [sp, #32]
 80141ba:	f140 8128 	bpl.w	801440e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80141be:	9a03      	ldr	r2, [sp, #12]
 80141c0:	2a00      	cmp	r2, #0
 80141c2:	f6ff af45 	blt.w	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80141c6:	9a02      	ldr	r2, [sp, #8]
 80141c8:	f04f 34ff 	mov.w	r4, #4294967295
 80141cc:	4252      	negs	r2, r2
 80141ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80141d0:	2400      	movs	r4, #0
 80141d2:	9202      	str	r2, [sp, #8]
 80141d4:	9a06      	ldr	r2, [sp, #24]
 80141d6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80141da:	9206      	str	r2, [sp, #24]
 80141dc:	462a      	mov	r2, r5
 80141de:	435a      	muls	r2, r3
 80141e0:	9401      	str	r4, [sp, #4]
 80141e2:	9c02      	ldr	r4, [sp, #8]
 80141e4:	9d02      	ldr	r5, [sp, #8]
 80141e6:	fb92 f4f4 	sdiv	r4, r2, r4
 80141ea:	fb05 2214 	mls	r2, r5, r4, r2
 80141ee:	2a00      	cmp	r2, #0
 80141f0:	9207      	str	r2, [sp, #28]
 80141f2:	bfbc      	itt	lt
 80141f4:	1952      	addlt	r2, r2, r5
 80141f6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80141fa:	6905      	ldr	r5, [r0, #16]
 80141fc:	bfb8      	it	lt
 80141fe:	9207      	strlt	r2, [sp, #28]
 8014200:	eb04 0901 	add.w	r9, r4, r1
 8014204:	9a01      	ldr	r2, [sp, #4]
 8014206:	ea4f 1669 	mov.w	r6, r9, asr #5
 801420a:	429a      	cmp	r2, r3
 801420c:	f040 8111 	bne.w	8014432 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8014210:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014214:	429e      	cmp	r6, r3
 8014216:	d104      	bne.n	8014222 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8014218:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801421c:	9a03      	ldr	r2, [sp, #12]
 801421e:	429a      	cmp	r2, r3
 8014220:	d01b      	beq.n	801425a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014222:	88ea      	ldrh	r2, [r5, #6]
 8014224:	88ab      	ldrh	r3, [r5, #4]
 8014226:	4313      	orrs	r3, r2
 8014228:	d010      	beq.n	801424c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801422a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801422e:	2a00      	cmp	r2, #0
 8014230:	db0c      	blt.n	801424c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014232:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014234:	429a      	cmp	r2, r3
 8014236:	da09      	bge.n	801424c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014238:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801423c:	429a      	cmp	r2, r3
 801423e:	f102 0201 	add.w	r2, r2, #1
 8014242:	bf38      	it	cc
 8014244:	3508      	addcc	r5, #8
 8014246:	6082      	str	r2, [r0, #8]
 8014248:	bf38      	it	cc
 801424a:	6105      	strcc	r5, [r0, #16]
 801424c:	6903      	ldr	r3, [r0, #16]
 801424e:	9a03      	ldr	r2, [sp, #12]
 8014250:	801e      	strh	r6, [r3, #0]
 8014252:	805a      	strh	r2, [r3, #2]
 8014254:	2200      	movs	r2, #0
 8014256:	809a      	strh	r2, [r3, #4]
 8014258:	80da      	strh	r2, [r3, #6]
 801425a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801425c:	9a03      	ldr	r2, [sp, #12]
 801425e:	6901      	ldr	r1, [r0, #16]
 8014260:	441a      	add	r2, r3
 8014262:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014266:	42b3      	cmp	r3, r6
 8014268:	d103      	bne.n	8014272 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801426a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801426e:	429a      	cmp	r2, r3
 8014270:	d01a      	beq.n	80142a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8014272:	88cc      	ldrh	r4, [r1, #6]
 8014274:	888b      	ldrh	r3, [r1, #4]
 8014276:	4323      	orrs	r3, r4
 8014278:	d010      	beq.n	801429c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801427a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801427e:	2c00      	cmp	r4, #0
 8014280:	db0c      	blt.n	801429c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014282:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014284:	429c      	cmp	r4, r3
 8014286:	da09      	bge.n	801429c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014288:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801428c:	429c      	cmp	r4, r3
 801428e:	f104 0401 	add.w	r4, r4, #1
 8014292:	bf38      	it	cc
 8014294:	3108      	addcc	r1, #8
 8014296:	6084      	str	r4, [r0, #8]
 8014298:	bf38      	it	cc
 801429a:	6101      	strcc	r1, [r0, #16]
 801429c:	6903      	ldr	r3, [r0, #16]
 801429e:	2100      	movs	r1, #0
 80142a0:	801e      	strh	r6, [r3, #0]
 80142a2:	805a      	strh	r2, [r3, #2]
 80142a4:	8099      	strh	r1, [r3, #4]
 80142a6:	80d9      	strh	r1, [r3, #6]
 80142a8:	9b06      	ldr	r3, [sp, #24]
 80142aa:	4293      	cmp	r3, r2
 80142ac:	f000 8082 	beq.w	80143b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80142b0:	9b08      	ldr	r3, [sp, #32]
 80142b2:	9902      	ldr	r1, [sp, #8]
 80142b4:	015b      	lsls	r3, r3, #5
 80142b6:	9c02      	ldr	r4, [sp, #8]
 80142b8:	fb93 f1f1 	sdiv	r1, r3, r1
 80142bc:	fb04 3311 	mls	r3, r4, r1, r3
 80142c0:	9103      	str	r1, [sp, #12]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	9308      	str	r3, [sp, #32]
 80142c6:	da04      	bge.n	80142d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80142c8:	1e4b      	subs	r3, r1, #1
 80142ca:	9303      	str	r3, [sp, #12]
 80142cc:	9b08      	ldr	r3, [sp, #32]
 80142ce:	4423      	add	r3, r4
 80142d0:	9308      	str	r3, [sp, #32]
 80142d2:	9b07      	ldr	r3, [sp, #28]
 80142d4:	464f      	mov	r7, r9
 80142d6:	9902      	ldr	r1, [sp, #8]
 80142d8:	2600      	movs	r6, #0
 80142da:	1a5b      	subs	r3, r3, r1
 80142dc:	9307      	str	r3, [sp, #28]
 80142de:	9b01      	ldr	r3, [sp, #4]
 80142e0:	f1c3 0320 	rsb	r3, r3, #32
 80142e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80142e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80142e8:	9b01      	ldr	r3, [sp, #4]
 80142ea:	1a5b      	subs	r3, r3, r1
 80142ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80142ee:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80142f2:	185b      	adds	r3, r3, r1
 80142f4:	bf58      	it	pl
 80142f6:	9902      	ldrpl	r1, [sp, #8]
 80142f8:	9307      	str	r3, [sp, #28]
 80142fa:	bf57      	itett	pl
 80142fc:	1a5b      	subpl	r3, r3, r1
 80142fe:	9903      	ldrmi	r1, [sp, #12]
 8014300:	9307      	strpl	r3, [sp, #28]
 8014302:	9b03      	ldrpl	r3, [sp, #12]
 8014304:	bf58      	it	pl
 8014306:	1c59      	addpl	r1, r3, #1
 8014308:	2a00      	cmp	r2, #0
 801430a:	4489      	add	r9, r1
 801430c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8014310:	db2e      	blt.n	8014370 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014312:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014314:	4293      	cmp	r3, r2
 8014316:	dd2b      	ble.n	8014370 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014318:	9c01      	ldr	r4, [sp, #4]
 801431a:	6905      	ldr	r5, [r0, #16]
 801431c:	46a0      	mov	r8, r4
 801431e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014320:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8014324:	45a0      	cmp	r8, r4
 8014326:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801432a:	f040 814c 	bne.w	80145c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801432e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014332:	4551      	cmp	r1, sl
 8014334:	d103      	bne.n	801433e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8014336:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801433a:	4291      	cmp	r1, r2
 801433c:	d018      	beq.n	8014370 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801433e:	ea5c 010e 	orrs.w	r1, ip, lr
 8014342:	d00f      	beq.n	8014364 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014344:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014348:	2900      	cmp	r1, #0
 801434a:	db0b      	blt.n	8014364 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801434c:	428b      	cmp	r3, r1
 801434e:	dd09      	ble.n	8014364 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014350:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014354:	4299      	cmp	r1, r3
 8014356:	f101 0101 	add.w	r1, r1, #1
 801435a:	bf38      	it	cc
 801435c:	3508      	addcc	r5, #8
 801435e:	6081      	str	r1, [r0, #8]
 8014360:	bf38      	it	cc
 8014362:	6105      	strcc	r5, [r0, #16]
 8014364:	6903      	ldr	r3, [r0, #16]
 8014366:	f8a3 a000 	strh.w	sl, [r3]
 801436a:	805a      	strh	r2, [r3, #2]
 801436c:	809e      	strh	r6, [r3, #4]
 801436e:	80de      	strh	r6, [r3, #6]
 8014370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014372:	6901      	ldr	r1, [r0, #16]
 8014374:	441a      	add	r2, r3
 8014376:	88cc      	ldrh	r4, [r1, #6]
 8014378:	888b      	ldrh	r3, [r1, #4]
 801437a:	4323      	orrs	r3, r4
 801437c:	d010      	beq.n	80143a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801437e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014382:	2c00      	cmp	r4, #0
 8014384:	db0c      	blt.n	80143a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014386:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014388:	429c      	cmp	r4, r3
 801438a:	da09      	bge.n	80143a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801438c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014390:	429c      	cmp	r4, r3
 8014392:	f104 0401 	add.w	r4, r4, #1
 8014396:	bf38      	it	cc
 8014398:	3108      	addcc	r1, #8
 801439a:	6084      	str	r4, [r0, #8]
 801439c:	bf38      	it	cc
 801439e:	6101      	strcc	r1, [r0, #16]
 80143a0:	6903      	ldr	r3, [r0, #16]
 80143a2:	464f      	mov	r7, r9
 80143a4:	f8a3 a000 	strh.w	sl, [r3]
 80143a8:	805a      	strh	r2, [r3, #2]
 80143aa:	809e      	strh	r6, [r3, #4]
 80143ac:	80de      	strh	r6, [r3, #6]
 80143ae:	9b06      	ldr	r3, [sp, #24]
 80143b0:	4293      	cmp	r3, r2
 80143b2:	d19c      	bne.n	80142ee <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80143b4:	9b01      	ldr	r3, [sp, #4]
 80143b6:	6907      	ldr	r7, [r0, #16]
 80143b8:	f1c3 0620 	rsb	r6, r3, #32
 80143bc:	9b05      	ldr	r3, [sp, #20]
 80143be:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80143c2:	9b04      	ldr	r3, [sp, #16]
 80143c4:	429e      	cmp	r6, r3
 80143c6:	f040 81c7 	bne.w	8014758 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80143ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80143ce:	459e      	cmp	lr, r3
 80143d0:	d104      	bne.n	80143dc <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80143d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	f43f ae3a 	beq.w	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80143dc:	88f9      	ldrh	r1, [r7, #6]
 80143de:	88bb      	ldrh	r3, [r7, #4]
 80143e0:	430b      	orrs	r3, r1
 80143e2:	d010      	beq.n	8014406 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80143e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	db0c      	blt.n	8014406 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80143ec:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80143ee:	428b      	cmp	r3, r1
 80143f0:	da09      	bge.n	8014406 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80143f2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80143f6:	428b      	cmp	r3, r1
 80143f8:	f103 0301 	add.w	r3, r3, #1
 80143fc:	bf38      	it	cc
 80143fe:	3708      	addcc	r7, #8
 8014400:	6083      	str	r3, [r0, #8]
 8014402:	bf38      	it	cc
 8014404:	6107      	strcc	r7, [r0, #16]
 8014406:	6903      	ldr	r3, [r0, #16]
 8014408:	f8a3 e000 	strh.w	lr, [r3]
 801440c:	e603      	b.n	8014016 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801440e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014410:	9c03      	ldr	r4, [sp, #12]
 8014412:	42a2      	cmp	r2, r4
 8014414:	f6ff ae1c 	blt.w	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014418:	9c06      	ldr	r4, [sp, #24]
 801441a:	42a2      	cmp	r2, r4
 801441c:	9c08      	ldr	r4, [sp, #32]
 801441e:	bfbc      	itt	lt
 8014420:	3201      	addlt	r2, #1
 8014422:	9206      	strlt	r2, [sp, #24]
 8014424:	f1c3 0220 	rsb	r2, r3, #32
 8014428:	4362      	muls	r2, r4
 801442a:	2401      	movs	r4, #1
 801442c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801442e:	2420      	movs	r4, #32
 8014430:	e6d6      	b.n	80141e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8014432:	ea4f 1861 	mov.w	r8, r1, asr #5
 8014436:	f009 021f 	and.w	r2, r9, #31
 801443a:	f001 011f 	and.w	r1, r1, #31
 801443e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014442:	920c      	str	r2, [sp, #48]	@ 0x30
 8014444:	45b0      	cmp	r8, r6
 8014446:	9a01      	ldr	r2, [sp, #4]
 8014448:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801444c:	eba2 0203 	sub.w	r2, r2, r3
 8014450:	d108      	bne.n	8014464 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014452:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014454:	4496      	add	lr, r2
 8014456:	4419      	add	r1, r3
 8014458:	f8a5 e004 	strh.w	lr, [r5, #4]
 801445c:	fb02 a101 	mla	r1, r2, r1, sl
 8014460:	80e9      	strh	r1, [r5, #6]
 8014462:	e6fa      	b.n	801425a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014464:	2c00      	cmp	r4, #0
 8014466:	f2c0 80a7 	blt.w	80145b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801446a:	2701      	movs	r7, #1
 801446c:	f1c1 0c20 	rsb	ip, r1, #32
 8014470:	970a      	str	r7, [sp, #40]	@ 0x28
 8014472:	2720      	movs	r7, #32
 8014474:	fb02 f20c 	mul.w	r2, r2, ip
 8014478:	9709      	str	r7, [sp, #36]	@ 0x24
 801447a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801447c:	fb92 fcf4 	sdiv	ip, r2, r4
 8014480:	fb04 221c 	mls	r2, r4, ip, r2
 8014484:	4439      	add	r1, r7
 8014486:	2a00      	cmp	r2, #0
 8014488:	bfbc      	itt	lt
 801448a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801448e:	1912      	addlt	r2, r2, r4
 8014490:	fb0c a101 	mla	r1, ip, r1, sl
 8014494:	44e6      	add	lr, ip
 8014496:	80e9      	strh	r1, [r5, #6]
 8014498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801449a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801449e:	eb08 0501 	add.w	r5, r8, r1
 80144a2:	6901      	ldr	r1, [r0, #16]
 80144a4:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80144a8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80144ac:	ea58 070e 	orrs.w	r7, r8, lr
 80144b0:	d010      	beq.n	80144d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80144b2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80144b6:	f1be 0f00 	cmp.w	lr, #0
 80144ba:	db0b      	blt.n	80144d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80144bc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80144be:	45be      	cmp	lr, r7
 80144c0:	da08      	bge.n	80144d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80144c2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80144c6:	45be      	cmp	lr, r7
 80144c8:	bf3c      	itt	cc
 80144ca:	3108      	addcc	r1, #8
 80144cc:	6101      	strcc	r1, [r0, #16]
 80144ce:	f10e 0101 	add.w	r1, lr, #1
 80144d2:	6081      	str	r1, [r0, #8]
 80144d4:	6901      	ldr	r1, [r0, #16]
 80144d6:	f04f 0e00 	mov.w	lr, #0
 80144da:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80144de:	42ae      	cmp	r6, r5
 80144e0:	800d      	strh	r5, [r1, #0]
 80144e2:	4463      	add	r3, ip
 80144e4:	f8a1 8002 	strh.w	r8, [r1, #2]
 80144e8:	f8a1 e004 	strh.w	lr, [r1, #4]
 80144ec:	f8a1 e006 	strh.w	lr, [r1, #6]
 80144f0:	d053      	beq.n	801459a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80144f2:	9901      	ldr	r1, [sp, #4]
 80144f4:	1b12      	subs	r2, r2, r4
 80144f6:	1ac9      	subs	r1, r1, r3
 80144f8:	4461      	add	r1, ip
 80144fa:	0149      	lsls	r1, r1, #5
 80144fc:	fb91 fef4 	sdiv	lr, r1, r4
 8014500:	fb04 111e 	mls	r1, r4, lr, r1
 8014504:	2900      	cmp	r1, #0
 8014506:	bfbc      	itt	lt
 8014508:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801450c:	1909      	addlt	r1, r1, r4
 801450e:	f10e 0701 	add.w	r7, lr, #1
 8014512:	970d      	str	r7, [sp, #52]	@ 0x34
 8014514:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014518:	1852      	adds	r2, r2, r1
 801451a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801451c:	bf54      	ite	pl
 801451e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8014522:	46f4      	movmi	ip, lr
 8014524:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014528:	bf58      	it	pl
 801452a:	1b12      	subpl	r2, r2, r4
 801452c:	4463      	add	r3, ip
 801452e:	443d      	add	r5, r7
 8014530:	44e3      	add	fp, ip
 8014532:	f8aa b004 	strh.w	fp, [sl, #4]
 8014536:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801453a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801453e:	f8aa b006 	strh.w	fp, [sl, #6]
 8014542:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014546:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801454a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801454e:	ea5b 070a 	orrs.w	r7, fp, sl
 8014552:	d014      	beq.n	801457e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014554:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014558:	f1ba 0f00 	cmp.w	sl, #0
 801455c:	db0f      	blt.n	801457e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801455e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014560:	45ba      	cmp	sl, r7
 8014562:	da0c      	bge.n	801457e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014564:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014568:	45ba      	cmp	sl, r7
 801456a:	f10a 0a01 	add.w	sl, sl, #1
 801456e:	bf38      	it	cc
 8014570:	f10c 0c08 	addcc.w	ip, ip, #8
 8014574:	f8c0 a008 	str.w	sl, [r0, #8]
 8014578:	bf38      	it	cc
 801457a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801457e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014582:	f04f 0700 	mov.w	r7, #0
 8014586:	42ae      	cmp	r6, r5
 8014588:	f8ac 5000 	strh.w	r5, [ip]
 801458c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014590:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014594:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014598:	d1bc      	bne.n	8014514 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801459a:	6904      	ldr	r4, [r0, #16]
 801459c:	9a01      	ldr	r2, [sp, #4]
 801459e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80145a0:	1ad3      	subs	r3, r2, r3
 80145a2:	88a2      	ldrh	r2, [r4, #4]
 80145a4:	3120      	adds	r1, #32
 80145a6:	441a      	add	r2, r3
 80145a8:	80a2      	strh	r2, [r4, #4]
 80145aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145ac:	1a89      	subs	r1, r1, r2
 80145ae:	88e2      	ldrh	r2, [r4, #6]
 80145b0:	fb03 2301 	mla	r3, r3, r1, r2
 80145b4:	80e3      	strh	r3, [r4, #6]
 80145b6:	e650      	b.n	801425a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80145b8:	f04f 37ff 	mov.w	r7, #4294967295
 80145bc:	434a      	muls	r2, r1
 80145be:	4264      	negs	r4, r4
 80145c0:	970a      	str	r7, [sp, #40]	@ 0x28
 80145c2:	2700      	movs	r7, #0
 80145c4:	e758      	b.n	8014478 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80145c6:	ea4f 1867 	mov.w	r8, r7, asr #5
 80145ca:	f009 031f 	and.w	r3, r9, #31
 80145ce:	f007 071f 	and.w	r7, r7, #31
 80145d2:	fa1f fc8c 	uxth.w	ip, ip
 80145d6:	45d0      	cmp	r8, sl
 80145d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80145da:	fa1f fe8e 	uxth.w	lr, lr
 80145de:	d10a      	bne.n	80145f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80145e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145e2:	449c      	add	ip, r3
 80145e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145e6:	441f      	add	r7, r3
 80145e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145ea:	f8a5 c004 	strh.w	ip, [r5, #4]
 80145ee:	fb03 e707 	mla	r7, r3, r7, lr
 80145f2:	80ef      	strh	r7, [r5, #6]
 80145f4:	e6bc      	b.n	8014370 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80145f6:	2900      	cmp	r1, #0
 80145f8:	f2c0 80a6 	blt.w	8014748 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80145fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80145fe:	f1c7 0320 	rsb	r3, r7, #32
 8014602:	4363      	muls	r3, r4
 8014604:	2401      	movs	r4, #1
 8014606:	940d      	str	r4, [sp, #52]	@ 0x34
 8014608:	2420      	movs	r4, #32
 801460a:	940c      	str	r4, [sp, #48]	@ 0x30
 801460c:	fb93 f4f1 	sdiv	r4, r3, r1
 8014610:	fb01 3b14 	mls	fp, r1, r4, r3
 8014614:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014616:	f1bb 0f00 	cmp.w	fp, #0
 801461a:	441f      	add	r7, r3
 801461c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801461e:	bfbc      	itt	lt
 8014620:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014624:	448b      	addlt	fp, r1
 8014626:	fb04 e707 	mla	r7, r4, r7, lr
 801462a:	44a4      	add	ip, r4
 801462c:	80ef      	strh	r7, [r5, #6]
 801462e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014632:	eb08 0503 	add.w	r5, r8, r3
 8014636:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801463a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801463e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014642:	ea5e 0307 	orrs.w	r3, lr, r7
 8014646:	d011      	beq.n	801466c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014648:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801464c:	f1be 0f00 	cmp.w	lr, #0
 8014650:	db0c      	blt.n	801466c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014652:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014654:	45be      	cmp	lr, r7
 8014656:	da09      	bge.n	801466c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014658:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801465c:	45be      	cmp	lr, r7
 801465e:	bf3c      	itt	cc
 8014660:	f10c 0708 	addcc.w	r7, ip, #8
 8014664:	6107      	strcc	r7, [r0, #16]
 8014666:	f10e 0701 	add.w	r7, lr, #1
 801466a:	6087      	str	r7, [r0, #8]
 801466c:	6907      	ldr	r7, [r0, #16]
 801466e:	b213      	sxth	r3, r2
 8014670:	4555      	cmp	r5, sl
 8014672:	9310      	str	r3, [sp, #64]	@ 0x40
 8014674:	807b      	strh	r3, [r7, #2]
 8014676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014678:	803d      	strh	r5, [r7, #0]
 801467a:	80be      	strh	r6, [r7, #4]
 801467c:	eb04 0c03 	add.w	ip, r4, r3
 8014680:	80fe      	strh	r6, [r7, #6]
 8014682:	d050      	beq.n	8014726 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014684:	9b01      	ldr	r3, [sp, #4]
 8014686:	eba3 070c 	sub.w	r7, r3, ip
 801468a:	ebab 0301 	sub.w	r3, fp, r1
 801468e:	443c      	add	r4, r7
 8014690:	9309      	str	r3, [sp, #36]	@ 0x24
 8014692:	0164      	lsls	r4, r4, #5
 8014694:	fb94 f8f1 	sdiv	r8, r4, r1
 8014698:	fb01 4418 	mls	r4, r1, r8, r4
 801469c:	2c00      	cmp	r4, #0
 801469e:	bfbc      	itt	lt
 80146a0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80146a4:	1864      	addlt	r4, r4, r1
 80146a6:	f108 0701 	add.w	r7, r8, #1
 80146aa:	9711      	str	r7, [sp, #68]	@ 0x44
 80146ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ae:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80146b2:	191b      	adds	r3, r3, r4
 80146b4:	f8be b004 	ldrh.w	fp, [lr, #4]
 80146b8:	bf54      	ite	pl
 80146ba:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80146bc:	4647      	movmi	r7, r8
 80146be:	9309      	str	r3, [sp, #36]	@ 0x24
 80146c0:	bf58      	it	pl
 80146c2:	1a5b      	subpl	r3, r3, r1
 80146c4:	44bb      	add	fp, r7
 80146c6:	44bc      	add	ip, r7
 80146c8:	bf58      	it	pl
 80146ca:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80146cc:	f8ae b004 	strh.w	fp, [lr, #4]
 80146d0:	f8be b006 	ldrh.w	fp, [lr, #6]
 80146d4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80146d8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80146da:	f8ae b006 	strh.w	fp, [lr, #6]
 80146de:	443d      	add	r5, r7
 80146e0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80146e4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80146e8:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80146ec:	ea5b 0307 	orrs.w	r3, fp, r7
 80146f0:	d011      	beq.n	8014716 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80146f2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80146f6:	f1bb 0f00 	cmp.w	fp, #0
 80146fa:	db0c      	blt.n	8014716 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80146fc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80146fe:	45bb      	cmp	fp, r7
 8014700:	da09      	bge.n	8014716 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014702:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014706:	45bb      	cmp	fp, r7
 8014708:	bf3c      	itt	cc
 801470a:	f10e 0708 	addcc.w	r7, lr, #8
 801470e:	6107      	strcc	r7, [r0, #16]
 8014710:	f10b 0701 	add.w	r7, fp, #1
 8014714:	6087      	str	r7, [r0, #8]
 8014716:	6907      	ldr	r7, [r0, #16]
 8014718:	4555      	cmp	r5, sl
 801471a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801471c:	803d      	strh	r5, [r7, #0]
 801471e:	807b      	strh	r3, [r7, #2]
 8014720:	80be      	strh	r6, [r7, #4]
 8014722:	80fe      	strh	r6, [r7, #6]
 8014724:	d1c2      	bne.n	80146ac <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8014726:	9b01      	ldr	r3, [sp, #4]
 8014728:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801472a:	eba3 0c0c 	sub.w	ip, r3, ip
 801472e:	6903      	ldr	r3, [r0, #16]
 8014730:	3720      	adds	r7, #32
 8014732:	8899      	ldrh	r1, [r3, #4]
 8014734:	4461      	add	r1, ip
 8014736:	8099      	strh	r1, [r3, #4]
 8014738:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801473a:	1a7f      	subs	r7, r7, r1
 801473c:	88d9      	ldrh	r1, [r3, #6]
 801473e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014742:	f8a3 c006 	strh.w	ip, [r3, #6]
 8014746:	e613      	b.n	8014370 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014748:	f04f 34ff 	mov.w	r4, #4294967295
 801474c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801474e:	4249      	negs	r1, r1
 8014750:	940d      	str	r4, [sp, #52]	@ 0x34
 8014752:	2400      	movs	r4, #0
 8014754:	437b      	muls	r3, r7
 8014756:	e758      	b.n	801460a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014758:	9905      	ldr	r1, [sp, #20]
 801475a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801475e:	f009 0c1f 	and.w	ip, r9, #31
 8014762:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014766:	f001 011f 	and.w	r1, r1, #31
 801476a:	45f3      	cmp	fp, lr
 801476c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014770:	9102      	str	r1, [sp, #8]
 8014772:	9904      	ldr	r1, [sp, #16]
 8014774:	eba1 0406 	sub.w	r4, r1, r6
 8014778:	d108      	bne.n	801478c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801477a:	9b02      	ldr	r3, [sp, #8]
 801477c:	44a0      	add	r8, r4
 801477e:	449c      	add	ip, r3
 8014780:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014784:	fb04 a40c 	mla	r4, r4, ip, sl
 8014788:	80fc      	strh	r4, [r7, #6]
 801478a:	e461      	b.n	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801478c:	9905      	ldr	r1, [sp, #20]
 801478e:	ebb1 0109 	subs.w	r1, r1, r9
 8014792:	bf51      	iteee	pl
 8014794:	f1cc 0520 	rsbpl	r5, ip, #32
 8014798:	fb04 f40c 	mulmi.w	r4, r4, ip
 801479c:	4249      	negmi	r1, r1
 801479e:	2500      	movmi	r5, #0
 80147a0:	bf5d      	ittte	pl
 80147a2:	436c      	mulpl	r4, r5
 80147a4:	2520      	movpl	r5, #32
 80147a6:	f04f 0901 	movpl.w	r9, #1
 80147aa:	f04f 39ff 	movmi.w	r9, #4294967295
 80147ae:	9501      	str	r5, [sp, #4]
 80147b0:	9b01      	ldr	r3, [sp, #4]
 80147b2:	fb94 f5f1 	sdiv	r5, r4, r1
 80147b6:	fb01 4415 	mls	r4, r1, r5, r4
 80147ba:	449c      	add	ip, r3
 80147bc:	eb0b 0309 	add.w	r3, fp, r9
 80147c0:	2c00      	cmp	r4, #0
 80147c2:	bfbc      	itt	lt
 80147c4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80147c8:	1864      	addlt	r4, r4, r1
 80147ca:	44a8      	add	r8, r5
 80147cc:	fb05 ac0c 	mla	ip, r5, ip, sl
 80147d0:	f8a7 8004 	strh.w	r8, [r7, #4]
 80147d4:	f8a7 c006 	strh.w	ip, [r7, #6]
 80147d8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80147dc:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80147e0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80147e4:	ea58 0707 	orrs.w	r7, r8, r7
 80147e8:	d011      	beq.n	801480e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80147ea:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80147ee:	f1b8 0f00 	cmp.w	r8, #0
 80147f2:	db0c      	blt.n	801480e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80147f4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80147f6:	45b8      	cmp	r8, r7
 80147f8:	da09      	bge.n	801480e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80147fa:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80147fe:	45b8      	cmp	r8, r7
 8014800:	bf3c      	itt	cc
 8014802:	f10c 0708 	addcc.w	r7, ip, #8
 8014806:	6107      	strcc	r7, [r0, #16]
 8014808:	f108 0701 	add.w	r7, r8, #1
 801480c:	6087      	str	r7, [r0, #8]
 801480e:	6907      	ldr	r7, [r0, #16]
 8014810:	f04f 0c00 	mov.w	ip, #0
 8014814:	b212      	sxth	r2, r2
 8014816:	459e      	cmp	lr, r3
 8014818:	803b      	strh	r3, [r7, #0]
 801481a:	442e      	add	r6, r5
 801481c:	807a      	strh	r2, [r7, #2]
 801481e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8014822:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014826:	d04b      	beq.n	80148c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8014828:	9f04      	ldr	r7, [sp, #16]
 801482a:	1a64      	subs	r4, r4, r1
 801482c:	f04f 0a00 	mov.w	sl, #0
 8014830:	1bbf      	subs	r7, r7, r6
 8014832:	443d      	add	r5, r7
 8014834:	016d      	lsls	r5, r5, #5
 8014836:	fb95 f8f1 	sdiv	r8, r5, r1
 801483a:	fb01 5518 	mls	r5, r1, r8, r5
 801483e:	4565      	cmp	r5, ip
 8014840:	bfbc      	itt	lt
 8014842:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014846:	186d      	addlt	r5, r5, r1
 8014848:	f108 0701 	add.w	r7, r8, #1
 801484c:	9703      	str	r7, [sp, #12]
 801484e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014852:	1964      	adds	r4, r4, r5
 8014854:	444b      	add	r3, r9
 8014856:	bf54      	ite	pl
 8014858:	9f03      	ldrpl	r7, [sp, #12]
 801485a:	4647      	movmi	r7, r8
 801485c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014860:	bf58      	it	pl
 8014862:	1a64      	subpl	r4, r4, r1
 8014864:	443e      	add	r6, r7
 8014866:	44bb      	add	fp, r7
 8014868:	f8ac b004 	strh.w	fp, [ip, #4]
 801486c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014870:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014874:	f8ac b006 	strh.w	fp, [ip, #6]
 8014878:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801487c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014880:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014884:	ea5b 0707 	orrs.w	r7, fp, r7
 8014888:	d011      	beq.n	80148ae <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801488a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801488e:	f1bb 0f00 	cmp.w	fp, #0
 8014892:	db0c      	blt.n	80148ae <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014894:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014896:	45bb      	cmp	fp, r7
 8014898:	da09      	bge.n	80148ae <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801489a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801489e:	45bb      	cmp	fp, r7
 80148a0:	bf3c      	itt	cc
 80148a2:	f10c 0708 	addcc.w	r7, ip, #8
 80148a6:	6107      	strcc	r7, [r0, #16]
 80148a8:	f10b 0701 	add.w	r7, fp, #1
 80148ac:	6087      	str	r7, [r0, #8]
 80148ae:	6907      	ldr	r7, [r0, #16]
 80148b0:	459e      	cmp	lr, r3
 80148b2:	803b      	strh	r3, [r7, #0]
 80148b4:	807a      	strh	r2, [r7, #2]
 80148b6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80148ba:	f8a7 a006 	strh.w	sl, [r7, #6]
 80148be:	d1c6      	bne.n	801484e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80148c0:	9b04      	ldr	r3, [sp, #16]
 80148c2:	1b9e      	subs	r6, r3, r6
 80148c4:	6903      	ldr	r3, [r0, #16]
 80148c6:	889a      	ldrh	r2, [r3, #4]
 80148c8:	4432      	add	r2, r6
 80148ca:	809a      	strh	r2, [r3, #4]
 80148cc:	9a02      	ldr	r2, [sp, #8]
 80148ce:	f102 0c20 	add.w	ip, r2, #32
 80148d2:	9a01      	ldr	r2, [sp, #4]
 80148d4:	ebac 0c02 	sub.w	ip, ip, r2
 80148d8:	88da      	ldrh	r2, [r3, #6]
 80148da:	fb06 260c 	mla	r6, r6, ip, r2
 80148de:	80de      	strh	r6, [r3, #6]
 80148e0:	f7ff bbb6 	b.w	8014050 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080148e4 <_ZN8touchgfx7Outline6lineToEii>:
 80148e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80148e6:	079b      	lsls	r3, r3, #30
 80148e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148ea:	460e      	mov	r6, r1
 80148ec:	4615      	mov	r5, r2
 80148ee:	d511      	bpl.n	8014914 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80148f0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80148f4:	ea86 0701 	eor.w	r7, r6, r1
 80148f8:	ea85 0302 	eor.w	r3, r5, r2
 80148fc:	433b      	orrs	r3, r7
 80148fe:	d009      	beq.n	8014914 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014900:	4633      	mov	r3, r6
 8014902:	9500      	str	r5, [sp, #0]
 8014904:	f7ff fb4c 	bl	8013fa0 <_ZN8touchgfx7Outline10renderLineEiiii>
 8014908:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801490a:	f043 0301 	orr.w	r3, r3, #1
 801490e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8014912:	6243      	str	r3, [r0, #36]	@ 0x24
 8014914:	b003      	add	sp, #12
 8014916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014918 <_ZN8touchgfx7Outline6moveToEii>:
 8014918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801491a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801491c:	4615      	mov	r5, r2
 801491e:	4604      	mov	r4, r0
 8014920:	460e      	mov	r6, r1
 8014922:	079a      	lsls	r2, r3, #30
 8014924:	d401      	bmi.n	801492a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8014926:	f7ff fb07 	bl	8013f38 <_ZN8touchgfx7Outline5resetEv>
 801492a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801492c:	07db      	lsls	r3, r3, #31
 801492e:	d504      	bpl.n	801493a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014930:	4620      	mov	r0, r4
 8014932:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8014936:	f7ff ffd5 	bl	80148e4 <_ZN8touchgfx7Outline6lineToEii>
 801493a:	6923      	ldr	r3, [r4, #16]
 801493c:	1170      	asrs	r0, r6, #5
 801493e:	1169      	asrs	r1, r5, #5
 8014940:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014944:	4290      	cmp	r0, r2
 8014946:	d103      	bne.n	8014950 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014948:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801494c:	4291      	cmp	r1, r2
 801494e:	d01a      	beq.n	8014986 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014950:	88df      	ldrh	r7, [r3, #6]
 8014952:	889a      	ldrh	r2, [r3, #4]
 8014954:	433a      	orrs	r2, r7
 8014956:	d010      	beq.n	801497a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014958:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801495c:	2a00      	cmp	r2, #0
 801495e:	db0c      	blt.n	801497a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014960:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8014962:	42ba      	cmp	r2, r7
 8014964:	da09      	bge.n	801497a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014966:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801496a:	42ba      	cmp	r2, r7
 801496c:	f102 0201 	add.w	r2, r2, #1
 8014970:	bf38      	it	cc
 8014972:	3308      	addcc	r3, #8
 8014974:	60a2      	str	r2, [r4, #8]
 8014976:	bf38      	it	cc
 8014978:	6123      	strcc	r3, [r4, #16]
 801497a:	6923      	ldr	r3, [r4, #16]
 801497c:	2200      	movs	r2, #0
 801497e:	8018      	strh	r0, [r3, #0]
 8014980:	8059      	strh	r1, [r3, #2]
 8014982:	809a      	strh	r2, [r3, #4]
 8014984:	80da      	strh	r2, [r3, #6]
 8014986:	6166      	str	r6, [r4, #20]
 8014988:	6225      	str	r5, [r4, #32]
 801498a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014990 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014994:	b0d0      	sub	sp, #320	@ 0x140
 8014996:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801499a:	466c      	mov	r4, sp
 801499c:	4627      	mov	r7, r4
 801499e:	1a0d      	subs	r5, r1, r0
 80149a0:	f100 0308 	add.w	r3, r0, #8
 80149a4:	2d48      	cmp	r5, #72	@ 0x48
 80149a6:	f340 80d5 	ble.w	8014b54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80149aa:	112d      	asrs	r5, r5, #4
 80149ac:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80149b0:	f9b0 9000 	ldrsh.w	r9, [r0]
 80149b4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80149b8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80149bc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80149c0:	6816      	ldr	r6, [r2, #0]
 80149c2:	6006      	str	r6, [r0, #0]
 80149c4:	6856      	ldr	r6, [r2, #4]
 80149c6:	6046      	str	r6, [r0, #4]
 80149c8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80149cc:	f8a2 8002 	strh.w	r8, [r2, #2]
 80149d0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80149d4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80149d8:	f1a1 0208 	sub.w	r2, r1, #8
 80149dc:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80149e0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80149e4:	4565      	cmp	r5, ip
 80149e6:	db06      	blt.n	80149f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80149e8:	d119      	bne.n	8014a1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80149ea:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80149ee:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80149f2:	42ae      	cmp	r6, r5
 80149f4:	dd13      	ble.n	8014a1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80149f6:	460e      	mov	r6, r1
 80149f8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80149fc:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014a00:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014a04:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014a08:	601d      	str	r5, [r3, #0]
 8014a0a:	6875      	ldr	r5, [r6, #4]
 8014a0c:	605d      	str	r5, [r3, #4]
 8014a0e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014a12:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014a16:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014a1a:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014a1e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014a22:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8014a26:	42ae      	cmp	r6, r5
 8014a28:	db06      	blt.n	8014a38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014a2a:	d116      	bne.n	8014a5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014a2c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014a30:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8014a34:	45ac      	cmp	ip, r5
 8014a36:	da10      	bge.n	8014a5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014a38:	681d      	ldr	r5, [r3, #0]
 8014a3a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014a3e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014a42:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014a46:	6005      	str	r5, [r0, #0]
 8014a48:	685d      	ldr	r5, [r3, #4]
 8014a4a:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014a4e:	6045      	str	r5, [r0, #4]
 8014a50:	8146      	strh	r6, [r0, #10]
 8014a52:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014a56:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014a5a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014a5e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014a62:	4565      	cmp	r5, ip
 8014a64:	db06      	blt.n	8014a74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8014a66:	d119      	bne.n	8014a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014a68:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014a6c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014a70:	42ae      	cmp	r6, r5
 8014a72:	da13      	bge.n	8014a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014a74:	460e      	mov	r6, r1
 8014a76:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014a7a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014a7e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014a82:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8014a86:	6005      	str	r5, [r0, #0]
 8014a88:	6875      	ldr	r5, [r6, #4]
 8014a8a:	6045      	str	r5, [r0, #4]
 8014a8c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014a90:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014a94:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014a98:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014a9c:	3308      	adds	r3, #8
 8014a9e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014aa2:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8014aa6:	45e6      	cmp	lr, ip
 8014aa8:	dbf8      	blt.n	8014a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014aaa:	d105      	bne.n	8014ab8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014aac:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014ab0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014ab4:	42ae      	cmp	r6, r5
 8014ab6:	dbf1      	blt.n	8014a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014ab8:	4615      	mov	r5, r2
 8014aba:	3a08      	subs	r2, #8
 8014abc:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014ac0:	45b4      	cmp	ip, r6
 8014ac2:	dbf9      	blt.n	8014ab8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014ac4:	d105      	bne.n	8014ad2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8014ac6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014aca:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014ace:	45b0      	cmp	r8, r6
 8014ad0:	dbf2      	blt.n	8014ab8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	f1a5 0608 	sub.w	r6, r5, #8
 8014ad8:	d816      	bhi.n	8014b08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014ada:	f8d6 c000 	ldr.w	ip, [r6]
 8014ade:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014ae2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8014ae6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014aea:	f8c3 c000 	str.w	ip, [r3]
 8014aee:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014af2:	f8c3 c004 	str.w	ip, [r3, #4]
 8014af6:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014afa:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014afe:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014b02:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014b06:	e7c9      	b.n	8014a9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014b08:	f8d6 e000 	ldr.w	lr, [r6]
 8014b0c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014b10:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8014b14:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014b18:	f8c0 e000 	str.w	lr, [r0]
 8014b1c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014b20:	1a16      	subs	r6, r2, r0
 8014b22:	f8c0 e004 	str.w	lr, [r0, #4]
 8014b26:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014b2a:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014b2e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014b32:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014b36:	1acd      	subs	r5, r1, r3
 8014b38:	10ed      	asrs	r5, r5, #3
 8014b3a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014b3e:	bfb5      	itete	lt
 8014b40:	e9c4 0200 	strdlt	r0, r2, [r4]
 8014b44:	e9c4 3100 	strdge	r3, r1, [r4]
 8014b48:	460a      	movlt	r2, r1
 8014b4a:	4603      	movge	r3, r0
 8014b4c:	3408      	adds	r4, #8
 8014b4e:	4618      	mov	r0, r3
 8014b50:	4611      	mov	r1, r2
 8014b52:	e724      	b.n	801499e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014b54:	4299      	cmp	r1, r3
 8014b56:	d927      	bls.n	8014ba8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8014b58:	f1a3 0210 	sub.w	r2, r3, #16
 8014b5c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014b60:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8014b64:	45ac      	cmp	ip, r5
 8014b66:	db06      	blt.n	8014b76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8014b68:	d11c      	bne.n	8014ba4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014b6a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014b6e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8014b72:	42ae      	cmp	r6, r5
 8014b74:	da16      	bge.n	8014ba4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014b76:	4615      	mov	r5, r2
 8014b78:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014b7c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014b80:	3a08      	subs	r2, #8
 8014b82:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8014b86:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8014b8a:	6196      	str	r6, [r2, #24]
 8014b8c:	42a8      	cmp	r0, r5
 8014b8e:	686e      	ldr	r6, [r5, #4]
 8014b90:	f8a2 9010 	strh.w	r9, [r2, #16]
 8014b94:	61d6      	str	r6, [r2, #28]
 8014b96:	f8a2 c012 	strh.w	ip, [r2, #18]
 8014b9a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8014b9e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8014ba2:	d1db      	bne.n	8014b5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8014ba4:	3308      	adds	r3, #8
 8014ba6:	e7d5      	b.n	8014b54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014ba8:	42bc      	cmp	r4, r7
 8014baa:	d903      	bls.n	8014bb4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8014bac:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8014bb0:	3c08      	subs	r4, #8
 8014bb2:	e6f4      	b.n	801499e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014bb4:	b050      	add	sp, #320	@ 0x140
 8014bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014bba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8014bba:	b510      	push	{r4, lr}
 8014bbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	07da      	lsls	r2, r3, #31
 8014bc2:	d507      	bpl.n	8014bd4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014bc4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014bc8:	f7ff fe8c 	bl	80148e4 <_ZN8touchgfx7Outline6lineToEii>
 8014bcc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014bce:	f023 0301 	bic.w	r3, r3, #1
 8014bd2:	6243      	str	r3, [r0, #36]	@ 0x24
 8014bd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014bd6:	079b      	lsls	r3, r3, #30
 8014bd8:	d521      	bpl.n	8014c1e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014bda:	6923      	ldr	r3, [r4, #16]
 8014bdc:	88d9      	ldrh	r1, [r3, #6]
 8014bde:	889a      	ldrh	r2, [r3, #4]
 8014be0:	430a      	orrs	r2, r1
 8014be2:	d010      	beq.n	8014c06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014be4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014be8:	2a00      	cmp	r2, #0
 8014bea:	db0c      	blt.n	8014c06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014bec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014bee:	428a      	cmp	r2, r1
 8014bf0:	da09      	bge.n	8014c06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014bf2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8014bf6:	4291      	cmp	r1, r2
 8014bf8:	f102 0201 	add.w	r2, r2, #1
 8014bfc:	bf88      	it	hi
 8014bfe:	3308      	addhi	r3, #8
 8014c00:	60a2      	str	r2, [r4, #8]
 8014c02:	bf88      	it	hi
 8014c04:	6123      	strhi	r3, [r4, #16]
 8014c06:	68a1      	ldr	r1, [r4, #8]
 8014c08:	b129      	cbz	r1, 8014c16 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014c0a:	6863      	ldr	r3, [r4, #4]
 8014c0c:	4299      	cmp	r1, r3
 8014c0e:	d802      	bhi.n	8014c16 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014c10:	68e0      	ldr	r0, [r4, #12]
 8014c12:	f7ff febd 	bl	8014990 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8014c16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014c18:	f023 0302 	bic.w	r3, r3, #2
 8014c1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8014c1e:	68e0      	ldr	r0, [r4, #12]
 8014c20:	bd10      	pop	{r4, pc}
	...

08014c24 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8014c24:	4b02      	ldr	r3, [pc, #8]	@ (8014c30 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8014c26:	6018      	str	r0, [r3, #0]
 8014c28:	4b02      	ldr	r3, [pc, #8]	@ (8014c34 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014c2a:	6019      	str	r1, [r3, #0]
 8014c2c:	4770      	bx	lr
 8014c2e:	bf00      	nop
 8014c30:	20027dc8 	.word	0x20027dc8
 8014c34:	20027dcc 	.word	0x20027dcc

08014c38 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8014c38:	2300      	movs	r3, #0
 8014c3a:	4a02      	ldr	r2, [pc, #8]	@ (8014c44 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	4a02      	ldr	r2, [pc, #8]	@ (8014c48 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8014c40:	6013      	str	r3, [r2, #0]
 8014c42:	4770      	bx	lr
 8014c44:	20027dc8 	.word	0x20027dc8
 8014c48:	20027dcc 	.word	0x20027dcc

08014c4c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014c4c:	4b01      	ldr	r3, [pc, #4]	@ (8014c54 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014c4e:	6818      	ldr	r0, [r3, #0]
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	20027dc8 	.word	0x20027dc8

08014c58 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014c58:	4b01      	ldr	r3, [pc, #4]	@ (8014c60 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014c5a:	6818      	ldr	r0, [r3, #0]
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	20027dcc 	.word	0x20027dcc

08014c64 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014c64:	b510      	push	{r4, lr}
 8014c66:	6803      	ldr	r3, [r0, #0]
 8014c68:	460c      	mov	r4, r1
 8014c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c6c:	4798      	blx	r3
 8014c6e:	1b03      	subs	r3, r0, r4
 8014c70:	4258      	negs	r0, r3
 8014c72:	4158      	adcs	r0, r3
 8014c74:	bd10      	pop	{r4, pc}
	...

08014c78 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014c78:	4b01      	ldr	r3, [pc, #4]	@ (8014c80 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014c7a:	6019      	str	r1, [r3, #0]
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop
 8014c80:	20027dd0 	.word	0x20027dd0

08014c84 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c88:	4696      	mov	lr, r2
 8014c8a:	b097      	sub	sp, #92	@ 0x5c
 8014c8c:	4605      	mov	r5, r0
 8014c8e:	4614      	mov	r4, r2
 8014c90:	460e      	mov	r6, r1
 8014c92:	461f      	mov	r7, r3
 8014c94:	f10d 0c1c 	add.w	ip, sp, #28
 8014c98:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8014c9c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8014ca0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8014ca4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cac:	f8de 3000 	ldr.w	r3, [lr]
 8014cb0:	f104 0e14 	add.w	lr, r4, #20
 8014cb4:	f8cc 3000 	str.w	r3, [ip]
 8014cb8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014cbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cc4:	f8de 3000 	ldr.w	r3, [lr]
 8014cc8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014ccc:	f8cc 3000 	str.w	r3, [ip]
 8014cd0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014cd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cdc:	f8de 3000 	ldr.w	r3, [lr]
 8014ce0:	4631      	mov	r1, r6
 8014ce2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	f8cc 3000 	str.w	r3, [ip]
 8014cea:	682b      	ldr	r3, [r5, #0]
 8014cec:	9201      	str	r2, [sp, #4]
 8014cee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014cf0:	f8cd 8008 	str.w	r8, [sp, #8]
 8014cf4:	9200      	str	r2, [sp, #0]
 8014cf6:	aa07      	add	r2, sp, #28
 8014cf8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014cfc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8014d00:	463b      	mov	r3, r7
 8014d02:	47d8      	blx	fp
 8014d04:	46a6      	mov	lr, r4
 8014d06:	f10d 0c1c 	add.w	ip, sp, #28
 8014d0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d12:	f8de 3000 	ldr.w	r3, [lr]
 8014d16:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014d1a:	343c      	adds	r4, #60	@ 0x3c
 8014d1c:	f8cc 3000 	str.w	r3, [ip]
 8014d20:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d2c:	f8de 3000 	ldr.w	r3, [lr]
 8014d30:	f8cc 3000 	str.w	r3, [ip]
 8014d34:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d3e:	6823      	ldr	r3, [r4, #0]
 8014d40:	4631      	mov	r1, r6
 8014d42:	4628      	mov	r0, r5
 8014d44:	f8cc 3000 	str.w	r3, [ip]
 8014d48:	682b      	ldr	r3, [r5, #0]
 8014d4a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014d4e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014d50:	f8cd 8008 	str.w	r8, [sp, #8]
 8014d54:	9201      	str	r2, [sp, #4]
 8014d56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014d58:	9200      	str	r2, [sp, #0]
 8014d5a:	aa07      	add	r2, sp, #28
 8014d5c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8014d5e:	463b      	mov	r3, r7
 8014d60:	47a0      	blx	r4
 8014d62:	b017      	add	sp, #92	@ 0x5c
 8014d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	b08d      	sub	sp, #52	@ 0x34
 8014d6e:	4688      	mov	r8, r1
 8014d70:	f8d3 c000 	ldr.w	ip, [r3]
 8014d74:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8014d76:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8014d7a:	680f      	ldr	r7, [r1, #0]
 8014d7c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8014d80:	eba7 070c 	sub.w	r7, r7, ip
 8014d84:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8014d88:	edd3 6a07 	vldr	s13, [r3, #28]
 8014d8c:	42bc      	cmp	r4, r7
 8014d8e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014d90:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8014d94:	bfa8      	it	ge
 8014d96:	463c      	movge	r4, r7
 8014d98:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014d9c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014da0:	ee07 4a90 	vmov	s15, r4
 8014da4:	eb09 0e0c 	add.w	lr, r9, ip
 8014da8:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8014dac:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014db0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8014db4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8014db8:	4571      	cmp	r1, lr
 8014dba:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014dbe:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014dc2:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014dc6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014dca:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014dce:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014dd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014dd6:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014dda:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014dde:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014de2:	f340 808c 	ble.w	8014efe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014de6:	eba1 060e 	sub.w	r6, r1, lr
 8014dea:	fb96 f5f4 	sdiv	r5, r6, r4
 8014dee:	ee07 5a10 	vmov	s14, r5
 8014df2:	2d00      	cmp	r5, #0
 8014df4:	fb04 6615 	mls	r6, r4, r5, r6
 8014df8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014dfc:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014e00:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014e04:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014e08:	dd12      	ble.n	8014e30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014e0a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014e0e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014e12:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014e16:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e1e:	bf14      	ite	ne
 8014e20:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014e24:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014e28:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014e2c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014e30:	fb05 f204 	mul.w	r2, r5, r4
 8014e34:	1abf      	subs	r7, r7, r2
 8014e36:	4494      	add	ip, r2
 8014e38:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014e3c:	4411      	add	r1, r2
 8014e3e:	eb09 020c 	add.w	r2, r9, ip
 8014e42:	b209      	sxth	r1, r1
 8014e44:	443a      	add	r2, r7
 8014e46:	428a      	cmp	r2, r1
 8014e48:	bfc4      	itt	gt
 8014e4a:	eba1 0209 	subgt.w	r2, r1, r9
 8014e4e:	eba2 070c 	subgt.w	r7, r2, ip
 8014e52:	2f00      	cmp	r7, #0
 8014e54:	dd50      	ble.n	8014ef8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014e56:	fb97 f1f4 	sdiv	r1, r7, r4
 8014e5a:	fb04 7211 	mls	r2, r4, r1, r7
 8014e5e:	b90a      	cbnz	r2, 8014e64 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014e60:	3901      	subs	r1, #1
 8014e62:	4622      	mov	r2, r4
 8014e64:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014e68:	6840      	ldr	r0, [r0, #4]
 8014e6a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8014e6e:	44b6      	add	lr, r6
 8014e70:	f8d0 a000 	ldr.w	sl, [r0]
 8014e74:	2900      	cmp	r1, #0
 8014e76:	bfcc      	ite	gt
 8014e78:	46a1      	movgt	r9, r4
 8014e7a:	4691      	movle	r9, r2
 8014e7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e7e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014e80:	fb04 e505 	mla	r5, r4, r5, lr
 8014e84:	eef0 6a42 	vmov.f32	s13, s4
 8014e88:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014e8c:	9008      	str	r0, [sp, #32]
 8014e8e:	eeb0 7a61 	vmov.f32	s14, s3
 8014e92:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8014e94:	695b      	ldr	r3, [r3, #20]
 8014e96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014e9a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014e9e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014ea2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014ea4:	445b      	add	r3, fp
 8014ea6:	9307      	str	r3, [sp, #28]
 8014ea8:	ee16 3a90 	vmov	r3, s13
 8014eac:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014eb0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014eb4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014eb8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014ebc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014ec0:	ee17 7a90 	vmov	r7, s15
 8014ec4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014ec8:	fb97 f7f4 	sdiv	r7, r7, r4
 8014ecc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014ed0:	ee17 ca90 	vmov	ip, s15
 8014ed4:	fb9c fcf4 	sdiv	ip, ip, r4
 8014ed8:	fb0c 3306 	mla	r3, ip, r6, r3
 8014edc:	9302      	str	r3, [sp, #8]
 8014ede:	ee17 3a10 	vmov	r3, s14
 8014ee2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014ee6:	fb07 3706 	mla	r7, r7, r6, r3
 8014eea:	eba9 0306 	sub.w	r3, r9, r6
 8014eee:	e9cd 4700 	strd	r4, r7, [sp]
 8014ef2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014ef6:	47a0      	blx	r4
 8014ef8:	b00d      	add	sp, #52	@ 0x34
 8014efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efe:	2500      	movs	r5, #0
 8014f00:	462e      	mov	r6, r5
 8014f02:	e799      	b.n	8014e38 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f08:	b0db      	sub	sp, #364	@ 0x16c
 8014f0a:	461d      	mov	r5, r3
 8014f0c:	4614      	mov	r4, r2
 8014f0e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8014f12:	910f      	str	r1, [sp, #60]	@ 0x3c
 8014f14:	4629      	mov	r1, r5
 8014f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f18:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8014f1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8014f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f20:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8014f24:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8014f28:	9310      	str	r3, [sp, #64]	@ 0x40
 8014f2a:	6803      	ldr	r3, [r0, #0]
 8014f2c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8014f2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014f32:	47b8      	blx	r7
 8014f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f36:	6058      	str	r0, [r3, #4]
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	f000 83a1 	beq.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f3e:	682b      	ldr	r3, [r5, #0]
 8014f40:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8014f44:	ed94 7a02 	vldr	s14, [r4, #8]
 8014f48:	9314      	str	r3, [sp, #80]	@ 0x50
 8014f4a:	686b      	ldr	r3, [r5, #4]
 8014f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f50:	9315      	str	r3, [sp, #84]	@ 0x54
 8014f52:	4bc1      	ldr	r3, [pc, #772]	@ (8015258 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014f54:	7819      	ldrb	r1, [r3, #0]
 8014f56:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014f5a:	2900      	cmp	r1, #0
 8014f5c:	bf16      	itet	ne
 8014f5e:	4619      	movne	r1, r3
 8014f60:	4611      	moveq	r1, r2
 8014f62:	4613      	movne	r3, r2
 8014f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f68:	9116      	str	r1, [sp, #88]	@ 0x58
 8014f6a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8014f6e:	f240 8387 	bls.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f72:	ed94 7a07 	vldr	s14, [r4, #28]
 8014f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f7e:	f240 837f 	bls.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f82:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8014f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8e:	f240 8377 	bls.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f92:	6822      	ldr	r2, [r4, #0]
 8014f94:	4bb1      	ldr	r3, [pc, #708]	@ (801525c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014f96:	429a      	cmp	r2, r3
 8014f98:	f2c0 8372 	blt.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f9c:	49b0      	ldr	r1, [pc, #704]	@ (8015260 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014f9e:	6963      	ldr	r3, [r4, #20]
 8014fa0:	428a      	cmp	r2, r1
 8014fa2:	f300 836d 	bgt.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fa6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014faa:	48ae      	ldr	r0, [pc, #696]	@ (8015264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014fac:	33ff      	adds	r3, #255	@ 0xff
 8014fae:	4283      	cmp	r3, r0
 8014fb0:	f200 8366 	bhi.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fb4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014fb6:	4dac      	ldr	r5, [pc, #688]	@ (8015268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014fb8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014fbc:	33ff      	adds	r3, #255	@ 0xff
 8014fbe:	42ab      	cmp	r3, r5
 8014fc0:	f200 835e 	bhi.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fc4:	6862      	ldr	r2, [r4, #4]
 8014fc6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8014fca:	33ff      	adds	r3, #255	@ 0xff
 8014fcc:	4283      	cmp	r3, r0
 8014fce:	f200 8357 	bhi.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fd2:	69a1      	ldr	r1, [r4, #24]
 8014fd4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8014fd8:	33ff      	adds	r3, #255	@ 0xff
 8014fda:	4283      	cmp	r3, r0
 8014fdc:	f200 8350 	bhi.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fe0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014fe2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8014fe6:	30ff      	adds	r0, #255	@ 0xff
 8014fe8:	42a8      	cmp	r0, r5
 8014fea:	f200 8349 	bhi.w	8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fee:	428a      	cmp	r2, r1
 8014ff0:	f280 8110 	bge.w	8015214 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	f300 8119 	bgt.w	801522c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014ffa:	4299      	cmp	r1, r3
 8014ffc:	f280 811d 	bge.w	801523a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015000:	2502      	movs	r5, #2
 8015002:	2701      	movs	r7, #1
 8015004:	46a9      	mov	r9, r5
 8015006:	46b8      	mov	r8, r7
 8015008:	f04f 0a00 	mov.w	sl, #0
 801500c:	4621      	mov	r1, r4
 801500e:	a849      	add	r0, sp, #292	@ 0x124
 8015010:	f003 fed4 	bl	8018dbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015014:	4622      	mov	r2, r4
 8015016:	4653      	mov	r3, sl
 8015018:	a949      	add	r1, sp, #292	@ 0x124
 801501a:	f8cd 9000 	str.w	r9, [sp]
 801501e:	a819      	add	r0, sp, #100	@ 0x64
 8015020:	f003 fffc 	bl	801901c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015024:	4622      	mov	r2, r4
 8015026:	4653      	mov	r3, sl
 8015028:	a949      	add	r1, sp, #292	@ 0x124
 801502a:	f8cd 8000 	str.w	r8, [sp]
 801502e:	a829      	add	r0, sp, #164	@ 0xa4
 8015030:	f003 fff4 	bl	801901c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015034:	4643      	mov	r3, r8
 8015036:	4622      	mov	r2, r4
 8015038:	a949      	add	r1, sp, #292	@ 0x124
 801503a:	f8cd 9000 	str.w	r9, [sp]
 801503e:	a839      	add	r0, sp, #228	@ 0xe4
 8015040:	f003 ffec 	bl	801901c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015044:	42af      	cmp	r7, r5
 8015046:	af12      	add	r7, sp, #72	@ 0x48
 8015048:	bfb7      	itett	lt
 801504a:	2300      	movlt	r3, #0
 801504c:	2301      	movge	r3, #1
 801504e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015050:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015052:	bfb1      	iteee	lt
 8015054:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015056:	ad19      	addge	r5, sp, #100	@ 0x64
 8015058:	930e      	strge	r3, [sp, #56]	@ 0x38
 801505a:	ac29      	addge	r4, sp, #164	@ 0xa4
 801505c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801505e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015062:	e887 0003 	stmia.w	r7, {r0, r1}
 8015066:	b928      	cbnz	r0, 8015074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015068:	4b80      	ldr	r3, [pc, #512]	@ (801526c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801506a:	6818      	ldr	r0, [r3, #0]
 801506c:	6803      	ldr	r3, [r0, #0]
 801506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015070:	4798      	blx	r3
 8015072:	6038      	str	r0, [r7, #0]
 8015074:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015076:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801507a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801507e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015080:	930c      	str	r3, [sp, #48]	@ 0x30
 8015082:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015084:	6963      	ldr	r3, [r4, #20]
 8015086:	440b      	add	r3, r1
 8015088:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801508c:	4408      	add	r0, r1
 801508e:	b200      	sxth	r0, r0
 8015090:	4283      	cmp	r3, r0
 8015092:	900d      	str	r0, [sp, #52]	@ 0x34
 8015094:	f280 80dd 	bge.w	8015252 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015098:	428b      	cmp	r3, r1
 801509a:	da08      	bge.n	80150ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801509c:	2a00      	cmp	r2, #0
 801509e:	dd06      	ble.n	80150ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80150a0:	1acb      	subs	r3, r1, r3
 80150a2:	429a      	cmp	r2, r3
 80150a4:	f2c0 80e4 	blt.w	8015270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f300 80e2 	bgt.w	8015272 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80150ae:	6967      	ldr	r7, [r4, #20]
 80150b0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80150b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150b6:	443b      	add	r3, r7
 80150b8:	461f      	mov	r7, r3
 80150ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80150bc:	1bdf      	subs	r7, r3, r7
 80150be:	4297      	cmp	r7, r2
 80150c0:	bfa8      	it	ge
 80150c2:	4617      	movge	r7, r2
 80150c4:	2f00      	cmp	r7, #0
 80150c6:	f340 8166 	ble.w	8015396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80150ca:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80150cc:	6829      	ldr	r1, [r5, #0]
 80150ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80150d2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80150d6:	4411      	add	r1, r2
 80150d8:	6820      	ldr	r0, [r4, #0]
 80150da:	4299      	cmp	r1, r3
 80150dc:	dd1a      	ble.n	8015114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80150de:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80150e2:	4402      	add	r2, r0
 80150e4:	440b      	add	r3, r1
 80150e6:	b21b      	sxth	r3, r3
 80150e8:	429a      	cmp	r2, r3
 80150ea:	dc13      	bgt.n	8015114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80150ec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80150ee:	a912      	add	r1, sp, #72	@ 0x48
 80150f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	9206      	str	r2, [sp, #24]
 80150f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80150fa:	9500      	str	r5, [sp, #0]
 80150fc:	9205      	str	r2, [sp, #20]
 80150fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015100:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015104:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015106:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801510a:	aa49      	add	r2, sp, #292	@ 0x124
 801510c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015110:	4623      	mov	r3, r4
 8015112:	47c8      	blx	r9
 8015114:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015118:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801511c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015124:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015128:	68a1      	ldr	r1, [r4, #8]
 801512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801512e:	ed94 6a08 	vldr	s12, [r4, #32]
 8015132:	edd4 6a07 	vldr	s13, [r4, #28]
 8015136:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801513a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801513e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015142:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015146:	edc4 6a07 	vstr	s13, [r4, #28]
 801514a:	441a      	add	r2, r3
 801514c:	6963      	ldr	r3, [r4, #20]
 801514e:	3301      	adds	r3, #1
 8015150:	6022      	str	r2, [r4, #0]
 8015152:	6163      	str	r3, [r4, #20]
 8015154:	69a3      	ldr	r3, [r4, #24]
 8015156:	3b01      	subs	r3, #1
 8015158:	61a3      	str	r3, [r4, #24]
 801515a:	6923      	ldr	r3, [r4, #16]
 801515c:	440b      	add	r3, r1
 801515e:	68e1      	ldr	r1, [r4, #12]
 8015160:	428b      	cmp	r3, r1
 8015162:	6123      	str	r3, [r4, #16]
 8015164:	db15      	blt.n	8015192 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015166:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801516a:	3201      	adds	r2, #1
 801516c:	1a5b      	subs	r3, r3, r1
 801516e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015172:	6022      	str	r2, [r4, #0]
 8015174:	6123      	str	r3, [r4, #16]
 8015176:	edc4 6a07 	vstr	s13, [r4, #28]
 801517a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801517e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015182:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015186:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801518a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801518e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015192:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015196:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801519a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801519e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151a2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80151a6:	68a9      	ldr	r1, [r5, #8]
 80151a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80151ac:	ed95 6a08 	vldr	s12, [r5, #32]
 80151b0:	edd5 6a07 	vldr	s13, [r5, #28]
 80151b4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80151b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80151bc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80151c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151c4:	edc5 6a07 	vstr	s13, [r5, #28]
 80151c8:	441a      	add	r2, r3
 80151ca:	696b      	ldr	r3, [r5, #20]
 80151cc:	3301      	adds	r3, #1
 80151ce:	602a      	str	r2, [r5, #0]
 80151d0:	616b      	str	r3, [r5, #20]
 80151d2:	69ab      	ldr	r3, [r5, #24]
 80151d4:	3b01      	subs	r3, #1
 80151d6:	61ab      	str	r3, [r5, #24]
 80151d8:	692b      	ldr	r3, [r5, #16]
 80151da:	440b      	add	r3, r1
 80151dc:	68e9      	ldr	r1, [r5, #12]
 80151de:	428b      	cmp	r3, r1
 80151e0:	612b      	str	r3, [r5, #16]
 80151e2:	db15      	blt.n	8015210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80151e4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80151e8:	3201      	adds	r2, #1
 80151ea:	1a5b      	subs	r3, r3, r1
 80151ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 80151f0:	602a      	str	r2, [r5, #0]
 80151f2:	612b      	str	r3, [r5, #16]
 80151f4:	edc5 6a07 	vstr	s13, [r5, #28]
 80151f8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80151fc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015200:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015204:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015208:	ee77 7a27 	vadd.f32	s15, s14, s15
 801520c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015210:	3f01      	subs	r7, #1
 8015212:	e757      	b.n	80150c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015214:	4299      	cmp	r1, r3
 8015216:	dc13      	bgt.n	8015240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015218:	429a      	cmp	r2, r3
 801521a:	da14      	bge.n	8015246 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801521c:	2502      	movs	r5, #2
 801521e:	2703      	movs	r7, #3
 8015220:	f04f 0800 	mov.w	r8, #0
 8015224:	46a9      	mov	r9, r5
 8015226:	f04f 0a01 	mov.w	sl, #1
 801522a:	e6ef      	b.n	801500c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801522c:	2501      	movs	r5, #1
 801522e:	2700      	movs	r7, #0
 8015230:	46a9      	mov	r9, r5
 8015232:	46b8      	mov	r8, r7
 8015234:	f04f 0a02 	mov.w	sl, #2
 8015238:	e6e8      	b.n	801500c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801523a:	2501      	movs	r5, #1
 801523c:	2702      	movs	r7, #2
 801523e:	e6e1      	b.n	8015004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015240:	2500      	movs	r5, #0
 8015242:	2701      	movs	r7, #1
 8015244:	e7f4      	b.n	8015230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015246:	2702      	movs	r7, #2
 8015248:	2503      	movs	r5, #3
 801524a:	f04f 0900 	mov.w	r9, #0
 801524e:	46b8      	mov	r8, r7
 8015250:	e7e9      	b.n	8015226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015252:	4613      	mov	r3, r2
 8015254:	e728      	b.n	80150a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015256:	bf00      	nop
 8015258:	20027db8 	.word	0x20027db8
 801525c:	fffd8f01 	.word	0xfffd8f01
 8015260:	00027100 	.word	0x00027100
 8015264:	0004e1ff 	.word	0x0004e1ff
 8015268:	0004e1fe 	.word	0x0004e1fe
 801526c:	20027dc0 	.word	0x20027dc0
 8015270:	4613      	mov	r3, r2
 8015272:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015274:	469e      	mov	lr, r3
 8015276:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015278:	469c      	mov	ip, r3
 801527a:	9111      	str	r1, [sp, #68]	@ 0x44
 801527c:	f04f 0900 	mov.w	r9, #0
 8015280:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015284:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015288:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801528c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015290:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015294:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015298:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801529c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80152a0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80152a4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80152a8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80152ac:	f1bc 0f00 	cmp.w	ip, #0
 80152b0:	d147      	bne.n	8015342 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80152b2:	eb03 0c07 	add.w	ip, r3, r7
 80152b6:	1ad7      	subs	r7, r2, r3
 80152b8:	f1b9 0f00 	cmp.w	r9, #0
 80152bc:	d009      	beq.n	80152d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80152be:	9029      	str	r0, [sp, #164]	@ 0xa4
 80152c0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80152c4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80152c8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80152cc:	912d      	str	r1, [sp, #180]	@ 0xb4
 80152ce:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80152d2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80152d4:	f04f 0800 	mov.w	r8, #0
 80152d8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80152dc:	9111      	str	r1, [sp, #68]	@ 0x44
 80152de:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80152e2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80152e6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80152ea:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80152ee:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80152f2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80152f6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80152fa:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80152fe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015302:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015306:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801530a:	f1be 0f00 	cmp.w	lr, #0
 801530e:	d031      	beq.n	8015374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015310:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015312:	4450      	add	r0, sl
 8015314:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015318:	4431      	add	r1, r6
 801531a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801531e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015322:	4549      	cmp	r1, r9
 8015324:	db08      	blt.n	8015338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015326:	ee77 7a85 	vadd.f32	s15, s15, s10
 801532a:	3001      	adds	r0, #1
 801532c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015330:	eba1 0109 	sub.w	r1, r1, r9
 8015334:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015338:	f10e 3eff 	add.w	lr, lr, #4294967295
 801533c:	f04f 0801 	mov.w	r8, #1
 8015340:	e7e3      	b.n	801530a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015342:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015344:	4450      	add	r0, sl
 8015346:	ee37 7a24 	vadd.f32	s14, s14, s9
 801534a:	4431      	add	r1, r6
 801534c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015350:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015354:	4541      	cmp	r1, r8
 8015356:	db08      	blt.n	801536a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015358:	ee76 6a85 	vadd.f32	s13, s13, s10
 801535c:	3001      	adds	r0, #1
 801535e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015362:	eba1 0108 	sub.w	r1, r1, r8
 8015366:	ee77 7a86 	vadd.f32	s15, s15, s12
 801536a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801536e:	f04f 0901 	mov.w	r9, #1
 8015372:	e79b      	b.n	80152ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015374:	449c      	add	ip, r3
 8015376:	1aff      	subs	r7, r7, r3
 8015378:	f1b8 0f00 	cmp.w	r8, #0
 801537c:	d009      	beq.n	8015392 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801537e:	9019      	str	r0, [sp, #100]	@ 0x64
 8015380:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015384:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015388:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801538c:	911d      	str	r1, [sp, #116]	@ 0x74
 801538e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015392:	1ad2      	subs	r2, r2, r3
 8015394:	e68b      	b.n	80150ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015398:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801539a:	2b00      	cmp	r3, #0
 801539c:	f000 80d1 	beq.w	8015542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80153a0:	ad19      	add	r5, sp, #100	@ 0x64
 80153a2:	ac39      	add	r4, sp, #228	@ 0xe4
 80153a4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80153a6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80153aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80153ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80153b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80153b2:	6963      	ldr	r3, [r4, #20]
 80153b4:	440b      	add	r3, r1
 80153b6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80153ba:	4408      	add	r0, r1
 80153bc:	b200      	sxth	r0, r0
 80153be:	4283      	cmp	r3, r0
 80153c0:	900d      	str	r0, [sp, #52]	@ 0x34
 80153c2:	f280 80c1 	bge.w	8015548 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80153c6:	428b      	cmp	r3, r1
 80153c8:	da08      	bge.n	80153dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153ca:	2a00      	cmp	r2, #0
 80153cc:	dd06      	ble.n	80153dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153ce:	1acb      	subs	r3, r1, r3
 80153d0:	429a      	cmp	r2, r3
 80153d2:	f2c0 80bb 	blt.w	801554c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	f300 80b9 	bgt.w	801554e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80153dc:	6967      	ldr	r7, [r4, #20]
 80153de:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80153e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153e4:	443b      	add	r3, r7
 80153e6:	461f      	mov	r7, r3
 80153e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80153ea:	1bdf      	subs	r7, r3, r7
 80153ec:	4297      	cmp	r7, r2
 80153ee:	bfa8      	it	ge
 80153f0:	4617      	movge	r7, r2
 80153f2:	2f00      	cmp	r7, #0
 80153f4:	f340 813c 	ble.w	8015670 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80153f8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80153fa:	6829      	ldr	r1, [r5, #0]
 80153fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015400:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015404:	4411      	add	r1, r2
 8015406:	6820      	ldr	r0, [r4, #0]
 8015408:	4299      	cmp	r1, r3
 801540a:	dd1a      	ble.n	8015442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801540c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015410:	4402      	add	r2, r0
 8015412:	440b      	add	r3, r1
 8015414:	b21b      	sxth	r3, r3
 8015416:	429a      	cmp	r2, r3
 8015418:	dc13      	bgt.n	8015442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801541a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801541c:	a912      	add	r1, sp, #72	@ 0x48
 801541e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015420:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	9206      	str	r2, [sp, #24]
 8015426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015428:	9500      	str	r5, [sp, #0]
 801542a:	9205      	str	r2, [sp, #20]
 801542c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801542e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015432:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015434:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015438:	aa49      	add	r2, sp, #292	@ 0x124
 801543a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801543e:	4623      	mov	r3, r4
 8015440:	47c8      	blx	r9
 8015442:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015446:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801544a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801544e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015452:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015456:	68a1      	ldr	r1, [r4, #8]
 8015458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801545c:	ed94 6a08 	vldr	s12, [r4, #32]
 8015460:	edd4 6a07 	vldr	s13, [r4, #28]
 8015464:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015468:	ee76 6a86 	vadd.f32	s13, s13, s12
 801546c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015470:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015474:	edc4 6a07 	vstr	s13, [r4, #28]
 8015478:	441a      	add	r2, r3
 801547a:	6963      	ldr	r3, [r4, #20]
 801547c:	3301      	adds	r3, #1
 801547e:	6022      	str	r2, [r4, #0]
 8015480:	6163      	str	r3, [r4, #20]
 8015482:	69a3      	ldr	r3, [r4, #24]
 8015484:	3b01      	subs	r3, #1
 8015486:	61a3      	str	r3, [r4, #24]
 8015488:	6923      	ldr	r3, [r4, #16]
 801548a:	440b      	add	r3, r1
 801548c:	68e1      	ldr	r1, [r4, #12]
 801548e:	428b      	cmp	r3, r1
 8015490:	6123      	str	r3, [r4, #16]
 8015492:	db15      	blt.n	80154c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015494:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015498:	3201      	adds	r2, #1
 801549a:	1a5b      	subs	r3, r3, r1
 801549c:	ee76 6a26 	vadd.f32	s13, s12, s13
 80154a0:	6022      	str	r2, [r4, #0]
 80154a2:	6123      	str	r3, [r4, #16]
 80154a4:	edc4 6a07 	vstr	s13, [r4, #28]
 80154a8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80154ac:	ee36 7a87 	vadd.f32	s14, s13, s14
 80154b0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80154b4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80154b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154bc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80154c0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80154c4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80154c8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80154cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80154d0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80154d4:	68a9      	ldr	r1, [r5, #8]
 80154d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154da:	ed95 6a08 	vldr	s12, [r5, #32]
 80154de:	edd5 6a07 	vldr	s13, [r5, #28]
 80154e2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80154e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80154ea:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80154ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154f2:	edc5 6a07 	vstr	s13, [r5, #28]
 80154f6:	441a      	add	r2, r3
 80154f8:	696b      	ldr	r3, [r5, #20]
 80154fa:	3301      	adds	r3, #1
 80154fc:	602a      	str	r2, [r5, #0]
 80154fe:	616b      	str	r3, [r5, #20]
 8015500:	69ab      	ldr	r3, [r5, #24]
 8015502:	3b01      	subs	r3, #1
 8015504:	61ab      	str	r3, [r5, #24]
 8015506:	692b      	ldr	r3, [r5, #16]
 8015508:	440b      	add	r3, r1
 801550a:	68e9      	ldr	r1, [r5, #12]
 801550c:	428b      	cmp	r3, r1
 801550e:	612b      	str	r3, [r5, #16]
 8015510:	db15      	blt.n	801553e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015512:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015516:	3201      	adds	r2, #1
 8015518:	1a5b      	subs	r3, r3, r1
 801551a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801551e:	602a      	str	r2, [r5, #0]
 8015520:	612b      	str	r3, [r5, #16]
 8015522:	edc5 6a07 	vstr	s13, [r5, #28]
 8015526:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801552a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801552e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015532:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015536:	ee77 7a27 	vadd.f32	s15, s14, s15
 801553a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801553e:	3f01      	subs	r7, #1
 8015540:	e757      	b.n	80153f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015542:	ad39      	add	r5, sp, #228	@ 0xe4
 8015544:	ac19      	add	r4, sp, #100	@ 0x64
 8015546:	e72d      	b.n	80153a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015548:	4613      	mov	r3, r2
 801554a:	e744      	b.n	80153d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801554c:	4613      	mov	r3, r2
 801554e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8015550:	469e      	mov	lr, r3
 8015552:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015556:	461f      	mov	r7, r3
 8015558:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801555c:	f04f 0900 	mov.w	r9, #0
 8015560:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015564:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015568:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801556c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015570:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015574:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015576:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801557a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801557e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015582:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8015586:	960e      	str	r6, [sp, #56]	@ 0x38
 8015588:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801558c:	2f00      	cmp	r7, #0
 801558e:	d146      	bne.n	801561e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015590:	449c      	add	ip, r3
 8015592:	1ad7      	subs	r7, r2, r3
 8015594:	f1b9 0f00 	cmp.w	r9, #0
 8015598:	d009      	beq.n	80155ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801559a:	9039      	str	r0, [sp, #228]	@ 0xe4
 801559c:	913d      	str	r1, [sp, #244]	@ 0xf4
 801559e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80155a2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80155a6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80155aa:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80155ae:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80155b0:	f04f 0800 	mov.w	r8, #0
 80155b4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80155b8:	910e      	str	r1, [sp, #56]	@ 0x38
 80155ba:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80155be:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80155c2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80155c6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80155ca:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80155ce:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80155d2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80155d6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80155da:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80155de:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80155e2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80155e6:	f1be 0f00 	cmp.w	lr, #0
 80155ea:	d030      	beq.n	801564e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80155ec:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80155ee:	4450      	add	r0, sl
 80155f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80155f4:	4431      	add	r1, r6
 80155f6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80155fa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80155fe:	4549      	cmp	r1, r9
 8015600:	db08      	blt.n	8015614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015602:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015606:	3001      	adds	r0, #1
 8015608:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801560c:	eba1 0109 	sub.w	r1, r1, r9
 8015610:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015614:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015618:	f04f 0801 	mov.w	r8, #1
 801561c:	e7e3      	b.n	80155e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801561e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015620:	4450      	add	r0, sl
 8015622:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015626:	4431      	add	r1, r6
 8015628:	ee77 7a84 	vadd.f32	s15, s15, s8
 801562c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015630:	4541      	cmp	r1, r8
 8015632:	db08      	blt.n	8015646 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015634:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015638:	3001      	adds	r0, #1
 801563a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801563e:	eba1 0108 	sub.w	r1, r1, r8
 8015642:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015646:	3f01      	subs	r7, #1
 8015648:	f04f 0901 	mov.w	r9, #1
 801564c:	e79e      	b.n	801558c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801564e:	449c      	add	ip, r3
 8015650:	1aff      	subs	r7, r7, r3
 8015652:	f1b8 0f00 	cmp.w	r8, #0
 8015656:	d009      	beq.n	801566c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015658:	9019      	str	r0, [sp, #100]	@ 0x64
 801565a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801565e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015662:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015666:	911d      	str	r1, [sp, #116]	@ 0x74
 8015668:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801566c:	1ad2      	subs	r2, r2, r3
 801566e:	e6b5      	b.n	80153dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	b923      	cbnz	r3, 8015680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015676:	4b04      	ldr	r3, [pc, #16]	@ (8015688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015678:	6818      	ldr	r0, [r3, #0]
 801567a:	6803      	ldr	r3, [r0, #0]
 801567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801567e:	4798      	blx	r3
 8015680:	b05b      	add	sp, #364	@ 0x16c
 8015682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015686:	bf00      	nop
 8015688:	20027dc0 	.word	0x20027dc0

0801568c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801568c:	b570      	push	{r4, r5, r6, lr}
 801568e:	4604      	mov	r4, r0
 8015690:	2500      	movs	r5, #0
 8015692:	9805      	ldr	r0, [sp, #20]
 8015694:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015698:	6061      	str	r1, [r4, #4]
 801569a:	8263      	strh	r3, [r4, #18]
 801569c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80156a0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80156a4:	8025      	strh	r5, [r4, #0]
 80156a6:	7221      	strb	r1, [r4, #8]
 80156a8:	7266      	strb	r6, [r4, #9]
 80156aa:	60e0      	str	r0, [r4, #12]
 80156ac:	8222      	strh	r2, [r4, #16]
 80156ae:	82a3      	strh	r3, [r4, #20]
 80156b0:	82e5      	strh	r5, [r4, #22]
 80156b2:	8325      	strh	r5, [r4, #24]
 80156b4:	8365      	strh	r5, [r4, #26]
 80156b6:	83a5      	strh	r5, [r4, #28]
 80156b8:	83e5      	strh	r5, [r4, #30]
 80156ba:	8425      	strh	r5, [r4, #32]
 80156bc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 80156c0:	b32e      	cbz	r6, 801570e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156c2:	6803      	ldr	r3, [r0, #0]
 80156c4:	695b      	ldr	r3, [r3, #20]
 80156c6:	4798      	blx	r3
 80156c8:	4606      	mov	r6, r0
 80156ca:	b300      	cbz	r0, 801570e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156cc:	68e0      	ldr	r0, [r4, #12]
 80156ce:	4631      	mov	r1, r6
 80156d0:	6803      	ldr	r3, [r0, #0]
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	4798      	blx	r3
 80156d6:	4605      	mov	r5, r0
 80156d8:	b1c8      	cbz	r0, 801570e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156da:	7b43      	ldrb	r3, [r0, #13]
 80156dc:	7a82      	ldrb	r2, [r0, #10]
 80156de:	005b      	lsls	r3, r3, #1
 80156e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156e4:	4313      	orrs	r3, r2
 80156e6:	8423      	strh	r3, [r4, #32]
 80156e8:	7a63      	ldrb	r3, [r4, #9]
 80156ea:	2b06      	cmp	r3, #6
 80156ec:	d10f      	bne.n	801570e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156ee:	68e0      	ldr	r0, [r4, #12]
 80156f0:	462a      	mov	r2, r5
 80156f2:	4631      	mov	r1, r6
 80156f4:	6803      	ldr	r3, [r0, #0]
 80156f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156f8:	4798      	blx	r3
 80156fa:	7b6b      	ldrb	r3, [r5, #13]
 80156fc:	005b      	lsls	r3, r3, #1
 80156fe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015702:	7aab      	ldrb	r3, [r5, #10]
 8015704:	4313      	orrs	r3, r2
 8015706:	4418      	add	r0, r3
 8015708:	8c23      	ldrh	r3, [r4, #32]
 801570a:	4418      	add	r0, r3
 801570c:	8420      	strh	r0, [r4, #32]
 801570e:	4620      	mov	r0, r4
 8015710:	bd70      	pop	{r4, r5, r6, pc}

08015712 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015716:	2400      	movs	r4, #0
 8015718:	b085      	sub	sp, #20
 801571a:	4681      	mov	r9, r0
 801571c:	4688      	mov	r8, r1
 801571e:	4692      	mov	sl, r2
 8015720:	469b      	mov	fp, r3
 8015722:	4627      	mov	r7, r4
 8015724:	4625      	mov	r5, r4
 8015726:	4626      	mov	r6, r4
 8015728:	4554      	cmp	r4, sl
 801572a:	da2a      	bge.n	8015782 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801572c:	2300      	movs	r3, #0
 801572e:	9303      	str	r3, [sp, #12]
 8015730:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015734:	429d      	cmp	r5, r3
 8015736:	d004      	beq.n	8015742 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015738:	f242 030b 	movw	r3, #8203	@ 0x200b
 801573c:	429d      	cmp	r5, r3
 801573e:	bf18      	it	ne
 8015740:	462f      	movne	r7, r5
 8015742:	ab03      	add	r3, sp, #12
 8015744:	4642      	mov	r2, r8
 8015746:	4659      	mov	r1, fp
 8015748:	4648      	mov	r0, r9
 801574a:	f003 f94d 	bl	80189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801574e:	4605      	mov	r5, r0
 8015750:	b1b8      	cbz	r0, 8015782 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015752:	280a      	cmp	r0, #10
 8015754:	d015      	beq.n	8015782 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015756:	9a03      	ldr	r2, [sp, #12]
 8015758:	b18a      	cbz	r2, 801577e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801575a:	7b50      	ldrb	r0, [r2, #13]
 801575c:	4639      	mov	r1, r7
 801575e:	7a93      	ldrb	r3, [r2, #10]
 8015760:	0040      	lsls	r0, r0, #1
 8015762:	8895      	ldrh	r5, [r2, #4]
 8015764:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015768:	4303      	orrs	r3, r0
 801576a:	4640      	mov	r0, r8
 801576c:	9301      	str	r3, [sp, #4]
 801576e:	f8d8 3000 	ldr.w	r3, [r8]
 8015772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015774:	4798      	blx	r3
 8015776:	9b01      	ldr	r3, [sp, #4]
 8015778:	4418      	add	r0, r3
 801577a:	4406      	add	r6, r0
 801577c:	b2b6      	uxth	r6, r6
 801577e:	3401      	adds	r4, #1
 8015780:	e7d2      	b.n	8015728 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015782:	4630      	mov	r0, r6
 8015784:	b005      	add	sp, #20
 8015786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801578a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801578a:	2a02      	cmp	r2, #2
 801578c:	b530      	push	{r4, r5, lr}
 801578e:	d011      	beq.n	80157b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015790:	2a03      	cmp	r2, #3
 8015792:	d01c      	beq.n	80157ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015794:	2a01      	cmp	r2, #1
 8015796:	d10c      	bne.n	80157b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015798:	888b      	ldrh	r3, [r1, #4]
 801579a:	8801      	ldrh	r1, [r0, #0]
 801579c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80157a0:	1a5b      	subs	r3, r3, r1
 80157a2:	8844      	ldrh	r4, [r0, #2]
 80157a4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80157a8:	1a9b      	subs	r3, r3, r2
 80157aa:	8004      	strh	r4, [r0, #0]
 80157ac:	8081      	strh	r1, [r0, #4]
 80157ae:	8043      	strh	r3, [r0, #2]
 80157b0:	80c2      	strh	r2, [r0, #6]
 80157b2:	bd30      	pop	{r4, r5, pc}
 80157b4:	88cb      	ldrh	r3, [r1, #6]
 80157b6:	8842      	ldrh	r2, [r0, #2]
 80157b8:	1a9b      	subs	r3, r3, r2
 80157ba:	88c2      	ldrh	r2, [r0, #6]
 80157bc:	1a9b      	subs	r3, r3, r2
 80157be:	888a      	ldrh	r2, [r1, #4]
 80157c0:	8801      	ldrh	r1, [r0, #0]
 80157c2:	8043      	strh	r3, [r0, #2]
 80157c4:	1a52      	subs	r2, r2, r1
 80157c6:	8881      	ldrh	r1, [r0, #4]
 80157c8:	1a52      	subs	r2, r2, r1
 80157ca:	8002      	strh	r2, [r0, #0]
 80157cc:	e7f1      	b.n	80157b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80157ce:	88cb      	ldrh	r3, [r1, #6]
 80157d0:	8841      	ldrh	r1, [r0, #2]
 80157d2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80157d6:	1a5b      	subs	r3, r3, r1
 80157d8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80157dc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80157e0:	1a9b      	subs	r3, r3, r2
 80157e2:	8045      	strh	r5, [r0, #2]
 80157e4:	8082      	strh	r2, [r0, #4]
 80157e6:	8003      	strh	r3, [r0, #0]
 80157e8:	80c4      	strh	r4, [r0, #6]
 80157ea:	e7e2      	b.n	80157b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080157ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80157ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f0:	b09f      	sub	sp, #124	@ 0x7c
 80157f2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80157f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80157f6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80157f8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80157fa:	8812      	ldrh	r2, [r2, #0]
 80157fc:	889b      	ldrh	r3, [r3, #4]
 80157fe:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8015800:	4413      	add	r3, r2
 8015802:	900e      	str	r0, [sp, #56]	@ 0x38
 8015804:	6828      	ldr	r0, [r5, #0]
 8015806:	b21b      	sxth	r3, r3
 8015808:	9117      	str	r1, [sp, #92]	@ 0x5c
 801580a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801580e:	9311      	str	r3, [sp, #68]	@ 0x44
 8015810:	6803      	ldr	r3, [r0, #0]
 8015812:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8015816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015818:	4798      	blx	r3
 801581a:	682b      	ldr	r3, [r5, #0]
 801581c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801581e:	7b1a      	ldrb	r2, [r3, #12]
 8015820:	7adb      	ldrb	r3, [r3, #11]
 8015822:	9215      	str	r2, [sp, #84]	@ 0x54
 8015824:	9316      	str	r3, [sp, #88]	@ 0x58
 8015826:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801582a:	2c00      	cmp	r4, #0
 801582c:	d067      	beq.n	80158fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801582e:	7c2b      	ldrb	r3, [r5, #16]
 8015830:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8015832:	2b06      	cmp	r3, #6
 8015834:	bf14      	ite	ne
 8015836:	2301      	movne	r3, #1
 8015838:	2302      	moveq	r3, #2
 801583a:	4413      	add	r3, r2
 801583c:	f04f 0900 	mov.w	r9, #0
 8015840:	9310      	str	r3, [sp, #64]	@ 0x40
 8015842:	464c      	mov	r4, r9
 8015844:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8015848:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801584c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801584e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015850:	4293      	cmp	r3, r2
 8015852:	f280 808b 	bge.w	801596c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015856:	2300      	movs	r3, #0
 8015858:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801585c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8015860:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015864:	429c      	cmp	r4, r3
 8015866:	d006      	beq.n	8015876 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8015868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801586a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801586e:	4294      	cmp	r4, r2
 8015870:	bf18      	it	ne
 8015872:	4623      	movne	r3, r4
 8015874:	930c      	str	r3, [sp, #48]	@ 0x30
 8015876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015878:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801587a:	682a      	ldr	r2, [r5, #0]
 801587c:	428b      	cmp	r3, r1
 801587e:	db40      	blt.n	8015902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015880:	6813      	ldr	r3, [r2, #0]
 8015882:	4610      	mov	r0, r2
 8015884:	695b      	ldr	r3, [r3, #20]
 8015886:	4798      	blx	r3
 8015888:	4604      	mov	r4, r0
 801588a:	6828      	ldr	r0, [r5, #0]
 801588c:	aa1d      	add	r2, sp, #116	@ 0x74
 801588e:	4621      	mov	r1, r4
 8015890:	6803      	ldr	r3, [r0, #0]
 8015892:	689f      	ldr	r7, [r3, #8]
 8015894:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015898:	47b8      	blx	r7
 801589a:	901c      	str	r0, [sp, #112]	@ 0x70
 801589c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80158a0:	429c      	cmp	r4, r3
 80158a2:	f000 80eb 	beq.w	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80158a6:	f242 030b 	movw	r3, #8203	@ 0x200b
 80158aa:	429c      	cmp	r4, r3
 80158ac:	f000 80e6 	beq.w	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80158b0:	2c00      	cmp	r4, #0
 80158b2:	f000 810d 	beq.w	8015ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80158b6:	2c0a      	cmp	r4, #10
 80158b8:	d05e      	beq.n	8015978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80158ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80158bc:	b36a      	cbz	r2, 801591a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80158be:	8894      	ldrh	r4, [r2, #4]
 80158c0:	f1bb 0f00 	cmp.w	fp, #0
 80158c4:	d03a      	beq.n	801593c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80158c6:	f892 900d 	ldrb.w	r9, [r2, #13]
 80158ca:	f1bb 0f01 	cmp.w	fp, #1
 80158ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80158d2:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80158d6:	f892 900a 	ldrb.w	r9, [r2, #10]
 80158da:	ea49 0903 	orr.w	r9, r9, r3
 80158de:	d133      	bne.n	8015948 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 80158e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158e2:	eba6 0609 	sub.w	r6, r6, r9
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d14d      	bne.n	8015986 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80158ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80158ec:	eb09 0306 	add.w	r3, r9, r6
 80158f0:	4413      	add	r3, r2
 80158f2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80158f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80158f8:	4293      	cmp	r3, r2
 80158fa:	da4e      	bge.n	801599a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80158fc:	e036      	b.n	801596c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80158fe:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015900:	e79c      	b.n	801583c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8015902:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015906:	4659      	mov	r1, fp
 8015908:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801590a:	9301      	str	r3, [sp, #4]
 801590c:	ab1d      	add	r3, sp, #116	@ 0x74
 801590e:	9300      	str	r3, [sp, #0]
 8015910:	ab1c      	add	r3, sp, #112	@ 0x70
 8015912:	f003 f8b2 	bl	8018a7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015916:	4604      	mov	r4, r0
 8015918:	e7c0      	b.n	801589c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801591a:	6828      	ldr	r0, [r5, #0]
 801591c:	6803      	ldr	r3, [r0, #0]
 801591e:	691b      	ldr	r3, [r3, #16]
 8015920:	4798      	blx	r3
 8015922:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015926:	4298      	cmp	r0, r3
 8015928:	f000 80a8 	beq.w	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801592c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015930:	4298      	cmp	r0, r3
 8015932:	f000 80a3 	beq.w	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015936:	f1bb 0f00 	cmp.w	fp, #0
 801593a:	d100      	bne.n	801593e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801593c:	444e      	add	r6, r9
 801593e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015940:	2a00      	cmp	r2, #0
 8015942:	d1c0      	bne.n	80158c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015944:	4691      	mov	r9, r2
 8015946:	e099      	b.n	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801594a:	2b00      	cmp	r3, #0
 801594c:	f000 80c2 	beq.w	8015ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8015950:	f1bb 0f00 	cmp.w	fp, #0
 8015954:	d117      	bne.n	8015986 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015956:	6828      	ldr	r0, [r5, #0]
 8015958:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801595a:	6803      	ldr	r3, [r0, #0]
 801595c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801595e:	4798      	blx	r3
 8015960:	4406      	add	r6, r0
 8015962:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015964:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015966:	1af3      	subs	r3, r6, r3
 8015968:	4293      	cmp	r3, r2
 801596a:	dd16      	ble.n	801599a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801596c:	2c00      	cmp	r4, #0
 801596e:	f000 80af 	beq.w	8015ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015972:	2c0a      	cmp	r4, #10
 8015974:	f040 809d 	bne.w	8015ab2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8015978:	240a      	movs	r4, #10
 801597a:	fab4 f084 	clz	r0, r4
 801597e:	0940      	lsrs	r0, r0, #5
 8015980:	b01f      	add	sp, #124	@ 0x7c
 8015982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015986:	6828      	ldr	r0, [r5, #0]
 8015988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801598a:	6803      	ldr	r3, [r0, #0]
 801598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801598e:	4798      	blx	r3
 8015990:	f1bb 0f01 	cmp.w	fp, #1
 8015994:	eba6 0600 	sub.w	r6, r6, r0
 8015998:	d0a7      	beq.n	80158ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801599a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801599c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801599e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80159a2:	f9b3 8000 	ldrsh.w	r8, [r3]
 80159a6:	7b43      	ldrb	r3, [r0, #13]
 80159a8:	4431      	add	r1, r6
 80159aa:	015b      	lsls	r3, r3, #5
 80159ac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80159b0:	7983      	ldrb	r3, [r0, #6]
 80159b2:	4313      	orrs	r3, r2
 80159b4:	440b      	add	r3, r1
 80159b6:	4543      	cmp	r3, r8
 80159b8:	db60      	blt.n	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159bc:	4299      	cmp	r1, r3
 80159be:	da5d      	bge.n	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159c0:	6828      	ldr	r0, [r5, #0]
 80159c2:	45b0      	cmp	r8, r6
 80159c4:	6803      	ldr	r3, [r0, #0]
 80159c6:	bfcc      	ite	gt
 80159c8:	eba8 0806 	subgt.w	r8, r8, r6
 80159cc:	f04f 0800 	movle.w	r8, #0
 80159d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159d2:	bfc8      	it	gt
 80159d4:	fa1f f888 	uxthgt.w	r8, r8
 80159d8:	4798      	blx	r3
 80159da:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80159dc:	7b53      	ldrb	r3, [r2, #13]
 80159de:	00d9      	lsls	r1, r3, #3
 80159e0:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 80159e4:	7a11      	ldrb	r1, [r2, #8]
 80159e6:	4339      	orrs	r1, r7
 80159e8:	065f      	lsls	r7, r3, #25
 80159ea:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80159ec:	bf48      	it	mi
 80159ee:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 80159f2:	4407      	add	r7, r0
 80159f4:	bf48      	it	mi
 80159f6:	b209      	sxthmi	r1, r1
 80159f8:	1a7f      	subs	r7, r7, r1
 80159fa:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80159fc:	b2bf      	uxth	r7, r7
 80159fe:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015a02:	fa0f fa87 	sxth.w	sl, r7
 8015a06:	4551      	cmp	r1, sl
 8015a08:	dd3c      	ble.n	8015a84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8015a0a:	011b      	lsls	r3, r3, #4
 8015a0c:	79d0      	ldrb	r0, [r2, #7]
 8015a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a12:	4303      	orrs	r3, r0
 8015a14:	449a      	add	sl, r3
 8015a16:	4551      	cmp	r1, sl
 8015a18:	dc30      	bgt.n	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015a1a:	1bcf      	subs	r7, r1, r7
 8015a1c:	468a      	mov	sl, r1
 8015a1e:	b23f      	sxth	r7, r7
 8015a20:	9219      	str	r2, [sp, #100]	@ 0x64
 8015a22:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015a24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015a26:	6828      	ldr	r0, [r5, #0]
 8015a28:	2a00      	cmp	r2, #0
 8015a2a:	d12d      	bne.n	8015a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8015a2c:	9318      	str	r3, [sp, #96]	@ 0x60
 8015a2e:	b2bf      	uxth	r7, r7
 8015a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a32:	6819      	ldr	r1, [r3, #0]
 8015a34:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8015a36:	6801      	ldr	r1, [r0, #0]
 8015a38:	9314      	str	r3, [sp, #80]	@ 0x50
 8015a3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015a3c:	4788      	blx	r1
 8015a3e:	79a9      	ldrb	r1, [r5, #6]
 8015a40:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015a42:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015a44:	7ba9      	ldrb	r1, [r5, #14]
 8015a46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015a48:	910a      	str	r1, [sp, #40]	@ 0x28
 8015a4a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8015a4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015a50:	68a9      	ldr	r1, [r5, #8]
 8015a52:	9306      	str	r3, [sp, #24]
 8015a54:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015a56:	9205      	str	r2, [sp, #20]
 8015a58:	9304      	str	r3, [sp, #16]
 8015a5a:	f8cd a004 	str.w	sl, [sp, #4]
 8015a5e:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8015a62:	44b0      	add	r8, r6
 8015a64:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8015a66:	fa0f f388 	sxth.w	r3, r8
 8015a6a:	9300      	str	r3, [sp, #0]
 8015a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a6e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015a72:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	47b8      	blx	r7
 8015a7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a7e:	3301      	adds	r3, #1
 8015a80:	930d      	str	r3, [sp, #52]	@ 0x34
 8015a82:	e6e3      	b.n	801584c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8015a84:	2700      	movs	r7, #0
 8015a86:	e7cb      	b.n	8015a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8015a88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a8a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8015a8e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015a90:	f8dc 1000 	ldr.w	r1, [ip]
 8015a94:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8015a98:	79aa      	ldrb	r2, [r5, #6]
 8015a9a:	9203      	str	r2, [sp, #12]
 8015a9c:	7baa      	ldrb	r2, [r5, #14]
 8015a9e:	9202      	str	r2, [sp, #8]
 8015aa0:	68aa      	ldr	r2, [r5, #8]
 8015aa2:	e9cd 0200 	strd	r0, r2, [sp]
 8015aa6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015aa8:	4660      	mov	r0, ip
 8015aaa:	688f      	ldr	r7, [r1, #8]
 8015aac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015aae:	47b8      	blx	r7
 8015ab0:	e7e4      	b.n	8015a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015ab2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015ab4:	3501      	adds	r5, #1
 8015ab6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015ab8:	429d      	cmp	r5, r3
 8015aba:	f6bf af5e 	bge.w	801597a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015abe:	4659      	mov	r1, fp
 8015ac0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015ac2:	f7f1 fc89 	bl	80073d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	b110      	cbz	r0, 8015ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015aca:	280a      	cmp	r0, #10
 8015acc:	d1f2      	bne.n	8015ab4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8015ace:	e753      	b.n	8015978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015ad0:	2400      	movs	r4, #0
 8015ad2:	e752      	b.n	801597a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015ad4:	f1bb 0f00 	cmp.w	fp, #0
 8015ad8:	f43f af43 	beq.w	8015962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015adc:	e75d      	b.n	801599a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08015ade <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015ade:	b530      	push	{r4, r5, lr}
 8015ae0:	8ac4      	ldrh	r4, [r0, #22]
 8015ae2:	8b45      	ldrh	r5, [r0, #26]
 8015ae4:	8343      	strh	r3, [r0, #26]
 8015ae6:	442c      	add	r4, r5
 8015ae8:	1ae4      	subs	r4, r4, r3
 8015aea:	8b83      	ldrh	r3, [r0, #28]
 8015aec:	82c4      	strh	r4, [r0, #22]
 8015aee:	8b04      	ldrh	r4, [r0, #24]
 8015af0:	4422      	add	r2, r4
 8015af2:	440c      	add	r4, r1
 8015af4:	1a59      	subs	r1, r3, r1
 8015af6:	83c2      	strh	r2, [r0, #30]
 8015af8:	8304      	strh	r4, [r0, #24]
 8015afa:	8381      	strh	r1, [r0, #28]
 8015afc:	bd30      	pop	{r4, r5, pc}

08015afe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b02:	4604      	mov	r4, r0
 8015b04:	8a47      	ldrh	r7, [r0, #18]
 8015b06:	68c0      	ldr	r0, [r0, #12]
 8015b08:	b085      	sub	sp, #20
 8015b0a:	6803      	ldr	r3, [r0, #0]
 8015b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b0e:	4798      	blx	r3
 8015b10:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015b14:	7a63      	ldrb	r3, [r4, #9]
 8015b16:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	42b7      	cmp	r7, r6
 8015b1e:	bfac      	ite	ge
 8015b20:	f04f 0900 	movge.w	r9, #0
 8015b24:	f04f 0901 	movlt.w	r9, #1
 8015b28:	2b05      	cmp	r3, #5
 8015b2a:	d804      	bhi.n	8015b36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8015b2c:	e8df f003 	tbb	[pc, r3]
 8015b30:	470f0854 	.word	0x470f0854
 8015b34:	4c4c      	.short	0x4c4c
 8015b36:	2500      	movs	r5, #0
 8015b38:	46a9      	mov	r9, r5
 8015b3a:	462e      	mov	r6, r5
 8015b3c:	462f      	mov	r7, r5
 8015b3e:	e00e      	b.n	8015b5e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015b40:	42b7      	cmp	r7, r6
 8015b42:	f04f 0500 	mov.w	r5, #0
 8015b46:	bfb4      	ite	lt
 8015b48:	2600      	movlt	r6, #0
 8015b4a:	2601      	movge	r6, #1
 8015b4c:	e7f6      	b.n	8015b3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015b4e:	42b7      	cmp	r7, r6
 8015b50:	464d      	mov	r5, r9
 8015b52:	f04f 0900 	mov.w	r9, #0
 8015b56:	bfb4      	ite	lt
 8015b58:	2600      	movlt	r6, #0
 8015b5a:	2601      	movge	r6, #1
 8015b5c:	464f      	mov	r7, r9
 8015b5e:	f04f 0800 	mov.w	r8, #0
 8015b62:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015b66:	f8a4 8018 	strh.w	r8, [r4, #24]
 8015b6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8015b6e:	2300      	movs	r3, #0
 8015b70:	9303      	str	r3, [sp, #12]
 8015b72:	8823      	ldrh	r3, [r4, #0]
 8015b74:	2b20      	cmp	r3, #32
 8015b76:	d033      	beq.n	8015be0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015b78:	f242 010b 	movw	r1, #8203	@ 0x200b
 8015b7c:	1a5a      	subs	r2, r3, r1
 8015b7e:	f1d2 0a00 	rsbs	sl, r2, #0
 8015b82:	eb4a 0a02 	adc.w	sl, sl, r2
 8015b86:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015b8a:	4293      	cmp	r3, r2
 8015b8c:	d008      	beq.n	8015ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015b8e:	428b      	cmp	r3, r1
 8015b90:	9a01      	ldr	r2, [sp, #4]
 8015b92:	bf0e      	itee	eq
 8015b94:	f04f 0a01 	moveq.w	sl, #1
 8015b98:	461a      	movne	r2, r3
 8015b9a:	f04f 0a00 	movne.w	sl, #0
 8015b9e:	9201      	str	r2, [sp, #4]
 8015ba0:	ab03      	add	r3, sp, #12
 8015ba2:	68e2      	ldr	r2, [r4, #12]
 8015ba4:	7a21      	ldrb	r1, [r4, #8]
 8015ba6:	6860      	ldr	r0, [r4, #4]
 8015ba8:	f002 ff1e 	bl	80189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015bac:	8020      	strh	r0, [r4, #0]
 8015bae:	b9d8      	cbnz	r0, 8015be8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8015bb0:	8ba2      	ldrh	r2, [r4, #28]
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	4611      	mov	r1, r2
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f7ff ff91 	bl	8015ade <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015bbc:	e06e      	b.n	8015c9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015bbe:	2500      	movs	r5, #0
 8015bc0:	2701      	movs	r7, #1
 8015bc2:	46a9      	mov	r9, r5
 8015bc4:	462e      	mov	r6, r5
 8015bc6:	e7ca      	b.n	8015b5e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015bc8:	42b7      	cmp	r7, r6
 8015bca:	f04f 0500 	mov.w	r5, #0
 8015bce:	bfb4      	ite	lt
 8015bd0:	2700      	movlt	r7, #0
 8015bd2:	2701      	movge	r7, #1
 8015bd4:	462e      	mov	r6, r5
 8015bd6:	e7c2      	b.n	8015b5e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015bd8:	2500      	movs	r5, #0
 8015bda:	2601      	movs	r6, #1
 8015bdc:	46a9      	mov	r9, r5
 8015bde:	e7ad      	b.n	8015b3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015be0:	9301      	str	r3, [sp, #4]
 8015be2:	f04f 0a01 	mov.w	sl, #1
 8015be6:	e7db      	b.n	8015ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015be8:	8b63      	ldrh	r3, [r4, #26]
 8015bea:	280a      	cmp	r0, #10
 8015bec:	f103 0301 	add.w	r3, r3, #1
 8015bf0:	8363      	strh	r3, [r4, #26]
 8015bf2:	d0dd      	beq.n	8015bb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015bf4:	9a03      	ldr	r2, [sp, #12]
 8015bf6:	bb62      	cbnz	r2, 8015c52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015bf8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015bfc:	4298      	cmp	r0, r3
 8015bfe:	d003      	beq.n	8015c08 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015c00:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015c04:	4298      	cmp	r0, r3
 8015c06:	d1b2      	bne.n	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c08:	8823      	ldrh	r3, [r4, #0]
 8015c0a:	8ba1      	ldrh	r1, [r4, #28]
 8015c0c:	2b20      	cmp	r3, #32
 8015c0e:	d003      	beq.n	8015c18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015c10:	f242 000b 	movw	r0, #8203	@ 0x200b
 8015c14:	4283      	cmp	r3, r0
 8015c16:	d131      	bne.n	8015c7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015c18:	f1ba 0f00 	cmp.w	sl, #0
 8015c1c:	bf0a      	itet	eq
 8015c1e:	4688      	moveq	r8, r1
 8015c20:	4650      	movne	r0, sl
 8015c22:	2001      	moveq	r0, #1
 8015c24:	440a      	add	r2, r1
 8015c26:	8b23      	ldrh	r3, [r4, #24]
 8015c28:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015c2c:	b292      	uxth	r2, r2
 8015c2e:	83a2      	strh	r2, [r4, #28]
 8015c30:	4413      	add	r3, r2
 8015c32:	f1b9 0f00 	cmp.w	r9, #0
 8015c36:	d102      	bne.n	8015c3e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015c38:	2d00      	cmp	r5, #0
 8015c3a:	d042      	beq.n	8015cc2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015c3c:	b300      	cbz	r0, 8015c80 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8015c3e:	8c21      	ldrh	r1, [r4, #32]
 8015c40:	4419      	add	r1, r3
 8015c42:	458c      	cmp	ip, r1
 8015c44:	da37      	bge.n	8015cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015c46:	8ae1      	ldrh	r1, [r4, #22]
 8015c48:	2900      	cmp	r1, #0
 8015c4a:	d034      	beq.n	8015cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015c4c:	4563      	cmp	r3, ip
 8015c4e:	dd8e      	ble.n	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c50:	e01d      	b.n	8015c8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015c52:	8893      	ldrh	r3, [r2, #4]
 8015c54:	9901      	ldr	r1, [sp, #4]
 8015c56:	8023      	strh	r3, [r4, #0]
 8015c58:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015c5c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015c60:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8015c64:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015c68:	ea4b 0b00 	orr.w	fp, fp, r0
 8015c6c:	68e0      	ldr	r0, [r4, #12]
 8015c6e:	6803      	ldr	r3, [r0, #0]
 8015c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c72:	4798      	blx	r3
 8015c74:	eb0b 0200 	add.w	r2, fp, r0
 8015c78:	b292      	uxth	r2, r2
 8015c7a:	e7c5      	b.n	8015c08 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015c7c:	2000      	movs	r0, #0
 8015c7e:	e7d1      	b.n	8015c24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015c80:	4563      	cmp	r3, ip
 8015c82:	f77f af74 	ble.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c86:	8ae3      	ldrh	r3, [r4, #22]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	f43f af70 	beq.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c8e:	2301      	movs	r3, #1
 8015c90:	8c22      	ldrh	r2, [r4, #32]
 8015c92:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8015c96:	8be3      	ldrh	r3, [r4, #30]
 8015c98:	4413      	add	r3, r2
 8015c9a:	83e3      	strh	r3, [r4, #30]
 8015c9c:	68e0      	ldr	r0, [r4, #12]
 8015c9e:	6803      	ldr	r3, [r0, #0]
 8015ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ca2:	4798      	blx	r3
 8015ca4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015ca8:	4418      	add	r0, r3
 8015caa:	8a63      	ldrh	r3, [r4, #18]
 8015cac:	1a18      	subs	r0, r3, r0
 8015cae:	8260      	strh	r0, [r4, #18]
 8015cb0:	b005      	add	sp, #20
 8015cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	4611      	mov	r1, r2
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f7ff ff0f 	bl	8015ade <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015cc0:	e755      	b.n	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cc2:	4563      	cmp	r3, ip
 8015cc4:	dd14      	ble.n	8015cf0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015cc6:	b117      	cbz	r7, 8015cce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015cc8:	2301      	movs	r3, #1
 8015cca:	460a      	mov	r2, r1
 8015ccc:	e772      	b.n	8015bb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8015cce:	2e00      	cmp	r6, #0
 8015cd0:	f43f af4d 	beq.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	f47f af4a 	bne.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cda:	f1ba 0f00 	cmp.w	sl, #0
 8015cde:	d002      	beq.n	8015ce6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	4642      	mov	r2, r8
 8015ce4:	e767      	b.n	8015bb6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015ce6:	8ae3      	ldrh	r3, [r4, #22]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f43f af40 	beq.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cee:	e7d5      	b.n	8015c9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	f47f af3c 	bne.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cf6:	f1ba 0f00 	cmp.w	sl, #0
 8015cfa:	f43f af38 	beq.w	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cfe:	2301      	movs	r3, #1
 8015d00:	4642      	mov	r2, r8
 8015d02:	e7da      	b.n	8015cba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015d04 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d06:	4605      	mov	r5, r0
 8015d08:	b08f      	sub	sp, #60	@ 0x3c
 8015d0a:	4617      	mov	r7, r2
 8015d0c:	461c      	mov	r4, r3
 8015d0e:	460e      	mov	r6, r1
 8015d10:	b1d1      	cbz	r1, 8015d48 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	4620      	mov	r0, r4
 8015d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d18:	4798      	blx	r3
 8015d1a:	4240      	negs	r0, r0
 8015d1c:	9603      	str	r6, [sp, #12]
 8015d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d22:	b200      	sxth	r0, r0
 8015d24:	9700      	str	r7, [sp, #0]
 8015d26:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8015d2a:	4629      	mov	r1, r5
 8015d2c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015d30:	2401      	movs	r4, #1
 8015d32:	a805      	add	r0, sp, #20
 8015d34:	f7ff fcaa 	bl	801568c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015d38:	a805      	add	r0, sp, #20
 8015d3a:	f7ff fee0 	bl	8015afe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015d3e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015d42:	b163      	cbz	r3, 8015d5e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015d44:	3401      	adds	r4, #1
 8015d46:	e7f7      	b.n	8015d38 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015d48:	2401      	movs	r4, #1
 8015d4a:	f002 ff19 	bl	8018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d4e:	280a      	cmp	r0, #10
 8015d50:	4628      	mov	r0, r5
 8015d52:	bf08      	it	eq
 8015d54:	3401      	addeq	r4, #1
 8015d56:	f002 ff13 	bl	8018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d1f7      	bne.n	8015d4e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8015d5e:	b2a0      	uxth	r0, r4
 8015d60:	b00f      	add	sp, #60	@ 0x3c
 8015d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d68:	b0e3      	sub	sp, #396	@ 0x18c
 8015d6a:	461c      	mov	r4, r3
 8015d6c:	4683      	mov	fp, r0
 8015d6e:	4688      	mov	r8, r1
 8015d70:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	f000 8112 	beq.w	8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015d78:	6823      	ldr	r3, [r4, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	f000 810e 	beq.w	8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015d80:	7ba3      	ldrb	r3, [r4, #14]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	f000 810a 	beq.w	8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015d88:	ad0a      	add	r5, sp, #40	@ 0x28
 8015d8a:	6810      	ldr	r0, [r2, #0]
 8015d8c:	6851      	ldr	r1, [r2, #4]
 8015d8e:	462b      	mov	r3, r5
 8015d90:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015d94:	c303      	stmia	r3!, {r0, r1}
 8015d96:	2100      	movs	r1, #0
 8015d98:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015d9c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015da0:	4628      	mov	r0, r5
 8015da2:	910c      	str	r1, [sp, #48]	@ 0x30
 8015da4:	a90c      	add	r1, sp, #48	@ 0x30
 8015da6:	79a2      	ldrb	r2, [r4, #6]
 8015da8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015dac:	f7ff fced 	bl	801578a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015db0:	a90c      	add	r1, sp, #48	@ 0x30
 8015db2:	79a2      	ldrb	r2, [r4, #6]
 8015db4:	4608      	mov	r0, r1
 8015db6:	f7ff fce8 	bl	801578a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015dba:	a817      	add	r0, sp, #92	@ 0x5c
 8015dbc:	f002 fa9e 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 8015dc0:	6820      	ldr	r0, [r4, #0]
 8015dc2:	6803      	ldr	r3, [r0, #0]
 8015dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015dc6:	4798      	blx	r3
 8015dc8:	4606      	mov	r6, r0
 8015dca:	6820      	ldr	r0, [r4, #0]
 8015dcc:	6803      	ldr	r3, [r0, #0]
 8015dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dd0:	4798      	blx	r3
 8015dd2:	4633      	mov	r3, r6
 8015dd4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015dd6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015dd8:	9000      	str	r0, [sp, #0]
 8015dda:	a817      	add	r0, sp, #92	@ 0x5c
 8015ddc:	f002 fae1 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015de0:	6820      	ldr	r0, [r4, #0]
 8015de2:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015de6:	6803      	ldr	r3, [r0, #0]
 8015de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dea:	4798      	blx	r3
 8015dec:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015df0:	6823      	ldr	r3, [r4, #0]
 8015df2:	4607      	mov	r7, r0
 8015df4:	4406      	add	r6, r0
 8015df6:	a830      	add	r0, sp, #192	@ 0xc0
 8015df8:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015dfc:	f002 fa7e 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 8015e00:	7c23      	ldrb	r3, [r4, #16]
 8015e02:	b17b      	cbz	r3, 8015e24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015e04:	6820      	ldr	r0, [r4, #0]
 8015e06:	6803      	ldr	r3, [r0, #0]
 8015e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e0a:	4798      	blx	r3
 8015e0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8015e0e:	6820      	ldr	r0, [r4, #0]
 8015e10:	6802      	ldr	r2, [r0, #0]
 8015e12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015e14:	4790      	blx	r2
 8015e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e18:	9000      	str	r0, [sp, #0]
 8015e1a:	a830      	add	r0, sp, #192	@ 0xc0
 8015e1c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015e1e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015e20:	f002 fabf 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e24:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015e28:	a80e      	add	r0, sp, #56	@ 0x38
 8015e2a:	7be2      	ldrb	r2, [r4, #15]
 8015e2c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015e30:	1a8a      	subs	r2, r1, r2
 8015e32:	7c21      	ldrb	r1, [r4, #16]
 8015e34:	9103      	str	r1, [sp, #12]
 8015e36:	b292      	uxth	r2, r2
 8015e38:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015e3c:	9102      	str	r1, [sp, #8]
 8015e3e:	6821      	ldr	r1, [r4, #0]
 8015e40:	9101      	str	r1, [sp, #4]
 8015e42:	7961      	ldrb	r1, [r4, #5]
 8015e44:	9100      	str	r1, [sp, #0]
 8015e46:	a930      	add	r1, sp, #192	@ 0xc0
 8015e48:	f7ff fc20 	bl	801568c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015e4c:	2e00      	cmp	r6, #0
 8015e4e:	dc5b      	bgt.n	8015f08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015e50:	af17      	add	r7, sp, #92	@ 0x5c
 8015e52:	f04f 0900 	mov.w	r9, #0
 8015e56:	7c23      	ldrb	r3, [r4, #16]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	f000 80b1 	beq.w	8015fc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8015e5e:	a80e      	add	r0, sp, #56	@ 0x38
 8015e60:	f7ff fe4d 	bl	8015afe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015e64:	f1ba 0f00 	cmp.w	sl, #0
 8015e68:	f000 80a5 	beq.w	8015fb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015e6c:	7c23      	ldrb	r3, [r4, #16]
 8015e6e:	2264      	movs	r2, #100	@ 0x64
 8015e70:	4639      	mov	r1, r7
 8015e72:	a849      	add	r0, sp, #292	@ 0x124
 8015e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e76:	f013 fa9a 	bl	80293ae <memcpy>
 8015e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	f000 80a7 	beq.w	8015fd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8015e82:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8015e86:	7922      	ldrb	r2, [r4, #4]
 8015e88:	2a01      	cmp	r2, #1
 8015e8a:	f040 808a 	bne.w	8015fa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8015e8e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8015e92:	1ac0      	subs	r0, r0, r3
 8015e94:	2302      	movs	r3, #2
 8015e96:	fb90 f0f3 	sdiv	r0, r0, r3
 8015e9a:	b200      	sxth	r0, r0
 8015e9c:	7c23      	ldrb	r3, [r4, #16]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	f000 808b 	beq.w	8015fba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015ea4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8015ea8:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8015eac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015eb0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015eb4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8015eb8:	2100      	movs	r1, #0
 8015eba:	4410      	add	r0, r2
 8015ebc:	4642      	mov	r2, r8
 8015ebe:	b200      	sxth	r0, r0
 8015ec0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015ec4:	9000      	str	r0, [sp, #0]
 8015ec6:	4658      	mov	r0, fp
 8015ec8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015ecc:	f7ff fc8e 	bl	80157ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	d163      	bne.n	8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015ed4:	b2b2      	uxth	r2, r6
 8015ed6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015eda:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8015ede:	4413      	add	r3, r2
 8015ee0:	1a8a      	subs	r2, r1, r2
 8015ee2:	b21b      	sxth	r3, r3
 8015ee4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015ee8:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8015eec:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015ef0:	2a00      	cmp	r2, #0
 8015ef2:	d153      	bne.n	8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015ef4:	6822      	ldr	r2, [r4, #0]
 8015ef6:	8869      	ldrh	r1, [r5, #2]
 8015ef8:	7a12      	ldrb	r2, [r2, #8]
 8015efa:	1a9b      	subs	r3, r3, r2
 8015efc:	88ea      	ldrh	r2, [r5, #6]
 8015efe:	440a      	add	r2, r1
 8015f00:	b212      	sxth	r2, r2
 8015f02:	4293      	cmp	r3, r2
 8015f04:	dda7      	ble.n	8015e56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015f06:	e049      	b.n	8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f08:	7c23      	ldrb	r3, [r4, #16]
 8015f0a:	444f      	add	r7, r9
 8015f0c:	b1c3      	cbz	r3, 8015f40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015f0e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8015f12:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015f16:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015f1a:	443b      	add	r3, r7
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	da97      	bge.n	8015e50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015f20:	a80e      	add	r0, sp, #56	@ 0x38
 8015f22:	f7ff fdec 	bl	8015afe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015f26:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8015f2a:	3b01      	subs	r3, #1
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	454b      	cmp	r3, r9
 8015f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f32:	d021      	beq.n	8015f78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015f34:	7961      	ldrb	r1, [r4, #5]
 8015f36:	a817      	add	r0, sp, #92	@ 0x5c
 8015f38:	f7f1 fa4e 	bl	80073d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f3e:	e7f4      	b.n	8015f2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015f40:	fa1f f986 	uxth.w	r9, r6
 8015f44:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015f48:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015f4c:	443b      	add	r3, r7
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	f6bf af7e 	bge.w	8015e50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015f54:	a817      	add	r0, sp, #92	@ 0x5c
 8015f56:	f002 fe13 	bl	8018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015f5a:	b1f8      	cbz	r0, 8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f5c:	280a      	cmp	r0, #10
 8015f5e:	d1f1      	bne.n	8015f44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015f60:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015f64:	444b      	add	r3, r9
 8015f66:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015f6a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015f6e:	eba3 0309 	sub.w	r3, r3, r9
 8015f72:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015f76:	e7e5      	b.n	8015f44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015f78:	b2b3      	uxth	r3, r6
 8015f7a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8015f7e:	441a      	add	r2, r3
 8015f80:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015f84:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8015f88:	1ad3      	subs	r3, r2, r3
 8015f8a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015f8e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015f92:	b11b      	cbz	r3, 8015f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f94:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d0ba      	beq.n	8015f12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015f9c:	b063      	add	sp, #396	@ 0x18c
 8015f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa2:	2a02      	cmp	r2, #2
 8015fa4:	d105      	bne.n	8015fb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8015fa6:	7be2      	ldrb	r2, [r4, #15]
 8015fa8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8015fac:	1a80      	subs	r0, r0, r2
 8015fae:	1ac0      	subs	r0, r0, r3
 8015fb0:	e773      	b.n	8015e9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	e772      	b.n	8015e9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015fb6:	7be0      	ldrb	r0, [r4, #15]
 8015fb8:	e770      	b.n	8015e9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015fba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015fbe:	e773      	b.n	8015ea8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015fc0:	f1ba 0f00 	cmp.w	sl, #0
 8015fc4:	d0f7      	beq.n	8015fb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015fc6:	2264      	movs	r2, #100	@ 0x64
 8015fc8:	4639      	mov	r1, r7
 8015fca:	a849      	add	r0, sp, #292	@ 0x124
 8015fcc:	f013 f9ef 	bl	80293ae <memcpy>
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015fd6:	6821      	ldr	r1, [r4, #0]
 8015fd8:	a849      	add	r0, sp, #292	@ 0x124
 8015fda:	f7ff fb9a 	bl	8015712 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015fde:	b203      	sxth	r3, r0
 8015fe0:	e751      	b.n	8015e86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015fe2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015fe2:	2b03      	cmp	r3, #3
 8015fe4:	d818      	bhi.n	8016018 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015fe6:	e8df f003 	tbb	[pc, r3]
 8015fea:	0602      	.short	0x0602
 8015fec:	130d      	.short	0x130d
 8015fee:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015ff2:	1850      	adds	r0, r2, r1
 8015ff4:	4770      	bx	lr
 8015ff6:	8803      	ldrh	r3, [r0, #0]
 8015ff8:	8880      	ldrh	r0, [r0, #4]
 8015ffa:	4418      	add	r0, r3
 8015ffc:	b200      	sxth	r0, r0
 8015ffe:	1a80      	subs	r0, r0, r2
 8016000:	3801      	subs	r0, #1
 8016002:	4770      	bx	lr
 8016004:	8803      	ldrh	r3, [r0, #0]
 8016006:	8880      	ldrh	r0, [r0, #4]
 8016008:	4418      	add	r0, r3
 801600a:	b200      	sxth	r0, r0
 801600c:	1a40      	subs	r0, r0, r1
 801600e:	e7f7      	b.n	8016000 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016010:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016014:	4410      	add	r0, r2
 8016016:	4770      	bx	lr
 8016018:	2000      	movs	r0, #0
 801601a:	4770      	bx	lr

0801601c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801601c:	2b03      	cmp	r3, #3
 801601e:	d817      	bhi.n	8016050 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016020:	e8df f003 	tbb	[pc, r3]
 8016024:	10090602 	.word	0x10090602
 8016028:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801602c:	1850      	adds	r0, r2, r1
 801602e:	4770      	bx	lr
 8016030:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016034:	e7fa      	b.n	801602c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016036:	8843      	ldrh	r3, [r0, #2]
 8016038:	88c0      	ldrh	r0, [r0, #6]
 801603a:	4418      	add	r0, r3
 801603c:	b200      	sxth	r0, r0
 801603e:	1a80      	subs	r0, r0, r2
 8016040:	3801      	subs	r0, #1
 8016042:	4770      	bx	lr
 8016044:	8843      	ldrh	r3, [r0, #2]
 8016046:	88c0      	ldrh	r0, [r0, #6]
 8016048:	4418      	add	r0, r3
 801604a:	b200      	sxth	r0, r0
 801604c:	1a40      	subs	r0, r0, r1
 801604e:	e7f7      	b.n	8016040 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016050:	2000      	movs	r0, #0
 8016052:	4770      	bx	lr

08016054 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016054:	4b01      	ldr	r3, [pc, #4]	@ (801605c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016056:	2200      	movs	r2, #0
 8016058:	601a      	str	r2, [r3, #0]
 801605a:	4770      	bx	lr
 801605c:	20027dd0 	.word	0x20027dd0

08016060 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016060:	4603      	mov	r3, r0
 8016062:	b1c8      	cbz	r0, 8016098 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016064:	0c02      	lsrs	r2, r0, #16
 8016066:	0412      	lsls	r2, r2, #16
 8016068:	b9a2      	cbnz	r2, 8016094 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801606a:	0403      	lsls	r3, r0, #16
 801606c:	2010      	movs	r0, #16
 801606e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016072:	bf04      	itt	eq
 8016074:	021b      	lsleq	r3, r3, #8
 8016076:	3008      	addeq	r0, #8
 8016078:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801607c:	bf04      	itt	eq
 801607e:	011b      	lsleq	r3, r3, #4
 8016080:	3004      	addeq	r0, #4
 8016082:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016086:	bf04      	itt	eq
 8016088:	009b      	lsleq	r3, r3, #2
 801608a:	3002      	addeq	r0, #2
 801608c:	2b00      	cmp	r3, #0
 801608e:	db04      	blt.n	801609a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016090:	3001      	adds	r0, #1
 8016092:	4770      	bx	lr
 8016094:	2000      	movs	r0, #0
 8016096:	e7ea      	b.n	801606e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016098:	2020      	movs	r0, #32
 801609a:	4770      	bx	lr

0801609c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a0:	b087      	sub	sp, #28
 80160a2:	460d      	mov	r5, r1
 80160a4:	4616      	mov	r6, r2
 80160a6:	4698      	mov	r8, r3
 80160a8:	4601      	mov	r1, r0
 80160aa:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80160ae:	b120      	cbz	r0, 80160ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80160b0:	b11a      	cbz	r2, 80160ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80160b2:	2d1f      	cmp	r5, #31
 80160b4:	d801      	bhi.n	80160ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80160b6:	2b1f      	cmp	r3, #31
 80160b8:	d904      	bls.n	80160c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80160ba:	2000      	movs	r0, #0
 80160bc:	6038      	str	r0, [r7, #0]
 80160be:	b007      	add	sp, #28
 80160c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c4:	b97d      	cbnz	r5, 80160e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80160c6:	b143      	cbz	r3, 80160da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80160c8:	4602      	mov	r2, r0
 80160ca:	462b      	mov	r3, r5
 80160cc:	4641      	mov	r1, r8
 80160ce:	4630      	mov	r0, r6
 80160d0:	e9cd 4700 	strd	r4, r7, [sp]
 80160d4:	f7ff ffe2 	bl	801609c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80160d8:	e7f1      	b.n	80160be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80160da:	f04f 33ff 	mov.w	r3, #4294967295
 80160de:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80160e2:	603b      	str	r3, [r7, #0]
 80160e4:	e7eb      	b.n	80160be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80160e6:	fa32 fa05 	lsrs.w	sl, r2, r5
 80160ea:	d106      	bne.n	80160fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80160ec:	4346      	muls	r6, r0
 80160ee:	fbb6 f0f4 	udiv	r0, r6, r4
 80160f2:	fb04 6610 	mls	r6, r4, r0, r6
 80160f6:	603e      	str	r6, [r7, #0]
 80160f8:	e7e1      	b.n	80160be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80160fa:	2201      	movs	r2, #1
 80160fc:	fa00 fb05 	lsl.w	fp, r0, r5
 8016100:	40aa      	lsls	r2, r5
 8016102:	fbbb f9f4 	udiv	r9, fp, r4
 8016106:	3a01      	subs	r2, #1
 8016108:	fb0a f309 	mul.w	r3, sl, r9
 801610c:	fb04 b919 	mls	r9, r4, r9, fp
 8016110:	4016      	ands	r6, r2
 8016112:	9303      	str	r3, [sp, #12]
 8016114:	4630      	mov	r0, r6
 8016116:	f7ff ffa3 	bl	8016060 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801611a:	462b      	mov	r3, r5
 801611c:	460a      	mov	r2, r1
 801611e:	4601      	mov	r1, r0
 8016120:	4630      	mov	r0, r6
 8016122:	e9cd 4700 	strd	r4, r7, [sp]
 8016126:	f7ff ffb9 	bl	801609c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801612a:	4606      	mov	r6, r0
 801612c:	4648      	mov	r0, r9
 801612e:	eb05 0108 	add.w	r1, r5, r8
 8016132:	f7ff ff95 	bl	8016060 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016136:	ab05      	add	r3, sp, #20
 8016138:	464a      	mov	r2, r9
 801613a:	e9cd 4300 	strd	r4, r3, [sp]
 801613e:	4603      	mov	r3, r0
 8016140:	4650      	mov	r0, sl
 8016142:	f7ff ffab 	bl	801609c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016146:	6839      	ldr	r1, [r7, #0]
 8016148:	9a05      	ldr	r2, [sp, #20]
 801614a:	9b03      	ldr	r3, [sp, #12]
 801614c:	4411      	add	r1, r2
 801614e:	fbb1 f2f4 	udiv	r2, r1, r4
 8016152:	18d3      	adds	r3, r2, r3
 8016154:	fb04 1412 	mls	r4, r4, r2, r1
 8016158:	441e      	add	r6, r3
 801615a:	603c      	str	r4, [r7, #0]
 801615c:	4430      	add	r0, r6
 801615e:	e7ae      	b.n	80160be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08016160 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016164:	b085      	sub	sp, #20
 8016166:	f1b0 0900 	subs.w	r9, r0, #0
 801616a:	461d      	mov	r5, r3
 801616c:	4617      	mov	r7, r2
 801616e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016170:	bfbb      	ittet	lt
 8016172:	f1c9 0900 	rsblt	r9, r9, #0
 8016176:	f04f 36ff 	movlt.w	r6, #4294967295
 801617a:	2601      	movge	r6, #1
 801617c:	6823      	ldrlt	r3, [r4, #0]
 801617e:	bfbc      	itt	lt
 8016180:	425b      	neglt	r3, r3
 8016182:	6023      	strlt	r3, [r4, #0]
 8016184:	2a00      	cmp	r2, #0
 8016186:	da04      	bge.n	8016192 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016188:	6823      	ldr	r3, [r4, #0]
 801618a:	4257      	negs	r7, r2
 801618c:	4276      	negs	r6, r6
 801618e:	425b      	negs	r3, r3
 8016190:	6023      	str	r3, [r4, #0]
 8016192:	2d00      	cmp	r5, #0
 8016194:	4638      	mov	r0, r7
 8016196:	bfba      	itte	lt
 8016198:	426d      	neglt	r5, r5
 801619a:	f04f 38ff 	movlt.w	r8, #4294967295
 801619e:	f04f 0801 	movge.w	r8, #1
 80161a2:	f7ff ff5d 	bl	8016060 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80161a6:	ab03      	add	r3, sp, #12
 80161a8:	463a      	mov	r2, r7
 80161aa:	e9cd 5300 	strd	r5, r3, [sp]
 80161ae:	4603      	mov	r3, r0
 80161b0:	4648      	mov	r0, r9
 80161b2:	f7ff ff73 	bl	801609c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80161b6:	6823      	ldr	r3, [r4, #0]
 80161b8:	9a03      	ldr	r2, [sp, #12]
 80161ba:	4546      	cmp	r6, r8
 80161bc:	441a      	add	r2, r3
 80161be:	fb92 f3f5 	sdiv	r3, r2, r5
 80161c2:	4418      	add	r0, r3
 80161c4:	fb05 2313 	mls	r3, r5, r3, r2
 80161c8:	bf18      	it	ne
 80161ca:	4240      	negne	r0, r0
 80161cc:	1c72      	adds	r2, r6, #1
 80161ce:	6023      	str	r3, [r4, #0]
 80161d0:	d105      	bne.n	80161de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f1c3 0200 	rsb	r2, r3, #0
 80161d8:	db0b      	blt.n	80161f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80161da:	6022      	str	r2, [r4, #0]
 80161dc:	e006      	b.n	80161ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80161de:	2e01      	cmp	r6, #1
 80161e0:	d104      	bne.n	80161ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	da02      	bge.n	80161ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80161e6:	442b      	add	r3, r5
 80161e8:	3801      	subs	r0, #1
 80161ea:	6023      	str	r3, [r4, #0]
 80161ec:	b005      	add	sp, #20
 80161ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161f2:	3801      	subs	r0, #1
 80161f4:	1b52      	subs	r2, r2, r5
 80161f6:	e7f0      	b.n	80161da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080161f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80161f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80161fc:	4c1c      	ldr	r4, [pc, #112]	@ (8016270 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80161fe:	4605      	mov	r5, r0
 8016200:	6807      	ldr	r7, [r0, #0]
 8016202:	69a3      	ldr	r3, [r4, #24]
 8016204:	b92b      	cbnz	r3, 8016212 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016206:	6840      	ldr	r0, [r0, #4]
 8016208:	e9c5 7000 	strd	r7, r0, [r5]
 801620c:	b004      	add	sp, #16
 801620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016212:	f04f 0802 	mov.w	r8, #2
 8016216:	68a2      	ldr	r2, [r4, #8]
 8016218:	ae04      	add	r6, sp, #16
 801621a:	6820      	ldr	r0, [r4, #0]
 801621c:	fb93 f1f8 	sdiv	r1, r3, r8
 8016220:	440a      	add	r2, r1
 8016222:	69e1      	ldr	r1, [r4, #28]
 8016224:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016228:	463a      	mov	r2, r7
 801622a:	9600      	str	r6, [sp, #0]
 801622c:	f7ff ff98 	bl	8016160 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016230:	69a3      	ldr	r3, [r4, #24]
 8016232:	4607      	mov	r7, r0
 8016234:	686a      	ldr	r2, [r5, #4]
 8016236:	6a21      	ldr	r1, [r4, #32]
 8016238:	9600      	str	r6, [sp, #0]
 801623a:	6860      	ldr	r0, [r4, #4]
 801623c:	f7ff ff90 	bl	8016160 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016240:	69a3      	ldr	r3, [r4, #24]
 8016242:	6962      	ldr	r2, [r4, #20]
 8016244:	4407      	add	r7, r0
 8016246:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016248:	9600      	str	r6, [sp, #0]
 801624a:	68e0      	ldr	r0, [r4, #12]
 801624c:	fb93 f8f8 	sdiv	r8, r3, r8
 8016250:	4442      	add	r2, r8
 8016252:	9203      	str	r2, [sp, #12]
 8016254:	682a      	ldr	r2, [r5, #0]
 8016256:	f7ff ff83 	bl	8016160 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801625a:	4680      	mov	r8, r0
 801625c:	9600      	str	r6, [sp, #0]
 801625e:	69a3      	ldr	r3, [r4, #24]
 8016260:	686a      	ldr	r2, [r5, #4]
 8016262:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016264:	6920      	ldr	r0, [r4, #16]
 8016266:	f7ff ff7b 	bl	8016160 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801626a:	4440      	add	r0, r8
 801626c:	e7cc      	b.n	8016208 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801626e:	bf00      	nop
 8016270:	20027dd4 	.word	0x20027dd4

08016274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016274:	4b07      	ldr	r3, [pc, #28]	@ (8016294 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	2b01      	cmp	r3, #1
 801627a:	d109      	bne.n	8016290 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801627c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016280:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016284:	8003      	strh	r3, [r0, #0]
 8016286:	4b04      	ldr	r3, [pc, #16]	@ (8016298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	3b01      	subs	r3, #1
 801628c:	1a9b      	subs	r3, r3, r2
 801628e:	800b      	strh	r3, [r1, #0]
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop
 8016294:	20027db8 	.word	0x20027db8
 8016298:	20027db4 	.word	0x20027db4

0801629c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801629c:	4b07      	ldr	r3, [pc, #28]	@ (80162bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801629e:	b510      	push	{r4, lr}
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d108      	bne.n	80162b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80162a6:	4b06      	ldr	r3, [pc, #24]	@ (80162c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80162a8:	880c      	ldrh	r4, [r1, #0]
 80162aa:	881b      	ldrh	r3, [r3, #0]
 80162ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 80162b0:	3b01      	subs	r3, #1
 80162b2:	1b1b      	subs	r3, r3, r4
 80162b4:	8003      	strh	r3, [r0, #0]
 80162b6:	800a      	strh	r2, [r1, #0]
 80162b8:	bd10      	pop	{r4, pc}
 80162ba:	bf00      	nop
 80162bc:	20027db8 	.word	0x20027db8
 80162c0:	20027db4 	.word	0x20027db4

080162c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80162c4:	4b0a      	ldr	r3, [pc, #40]	@ (80162f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80162c6:	b510      	push	{r4, lr}
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d10e      	bne.n	80162ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80162ce:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80162d2:	8843      	ldrh	r3, [r0, #2]
 80162d4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80162d8:	18ca      	adds	r2, r1, r3
 80162da:	4b06      	ldr	r3, [pc, #24]	@ (80162f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80162dc:	8044      	strh	r4, [r0, #2]
 80162de:	881b      	ldrh	r3, [r3, #0]
 80162e0:	1a9b      	subs	r3, r3, r2
 80162e2:	8003      	strh	r3, [r0, #0]
 80162e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80162e8:	8081      	strh	r1, [r0, #4]
 80162ea:	80c3      	strh	r3, [r0, #6]
 80162ec:	bd10      	pop	{r4, pc}
 80162ee:	bf00      	nop
 80162f0:	20027db8 	.word	0x20027db8
 80162f4:	20027db4 	.word	0x20027db4

080162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80162f8:	4b08      	ldr	r3, [pc, #32]	@ (801631c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	d10c      	bne.n	801631a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016300:	8803      	ldrh	r3, [r0, #0]
 8016302:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016306:	8842      	ldrh	r2, [r0, #2]
 8016308:	8002      	strh	r2, [r0, #0]
 801630a:	185a      	adds	r2, r3, r1
 801630c:	4b04      	ldr	r3, [pc, #16]	@ (8016320 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801630e:	881b      	ldrh	r3, [r3, #0]
 8016310:	1a9b      	subs	r3, r3, r2
 8016312:	8043      	strh	r3, [r0, #2]
 8016314:	88c3      	ldrh	r3, [r0, #6]
 8016316:	80c1      	strh	r1, [r0, #6]
 8016318:	8083      	strh	r3, [r0, #4]
 801631a:	4770      	bx	lr
 801631c:	20027db8 	.word	0x20027db8
 8016320:	20027db4 	.word	0x20027db4

08016324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016324:	4b07      	ldr	r3, [pc, #28]	@ (8016344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016326:	b510      	push	{r4, lr}
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	2b01      	cmp	r3, #1
 801632c:	d108      	bne.n	8016340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801632e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016332:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016336:	8003      	strh	r3, [r0, #0]
 8016338:	8893      	ldrh	r3, [r2, #4]
 801633a:	3b01      	subs	r3, #1
 801633c:	1b1b      	subs	r3, r3, r4
 801633e:	800b      	strh	r3, [r1, #0]
 8016340:	bd10      	pop	{r4, pc}
 8016342:	bf00      	nop
 8016344:	20027db8 	.word	0x20027db8

08016348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8016348:	4b0b      	ldr	r3, [pc, #44]	@ (8016378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d111      	bne.n	8016374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8016350:	680b      	ldr	r3, [r1, #0]
 8016352:	ed90 7a00 	vldr	s14, [r0]
 8016356:	6003      	str	r3, [r0, #0]
 8016358:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801635c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 801637c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8016360:	ee07 3a90 	vmov	s15, r3
 8016364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016368:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801636c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016370:	edc1 7a00 	vstr	s15, [r1]
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop
 8016378:	20027db8 	.word	0x20027db8
 801637c:	38d1b717 	.word	0x38d1b717

08016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016380:	4b0a      	ldr	r3, [pc, #40]	@ (80163ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016382:	460a      	mov	r2, r1
 8016384:	b510      	push	{r4, lr}
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	2b01      	cmp	r3, #1
 801638a:	d10d      	bne.n	80163a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801638c:	8881      	ldrh	r1, [r0, #4]
 801638e:	8803      	ldrh	r3, [r0, #0]
 8016390:	440b      	add	r3, r1
 8016392:	4601      	mov	r1, r0
 8016394:	3b01      	subs	r3, #1
 8016396:	f821 3b02 	strh.w	r3, [r1], #2
 801639a:	f7ff ffc3 	bl	8016324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801639e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80163a2:	88c2      	ldrh	r2, [r0, #6]
 80163a4:	80c3      	strh	r3, [r0, #6]
 80163a6:	8082      	strh	r2, [r0, #4]
 80163a8:	bd10      	pop	{r4, pc}
 80163aa:	bf00      	nop
 80163ac:	20027db8 	.word	0x20027db8

080163b0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80163b0:	4b06      	ldr	r3, [pc, #24]	@ (80163cc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80163b2:	2100      	movs	r1, #0
 80163b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163b8:	4b05      	ldr	r3, [pc, #20]	@ (80163d0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80163ba:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80163be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163c2:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80163c6:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80163ca:	4770      	bx	lr
 80163cc:	20027db4 	.word	0x20027db4
 80163d0:	20027db6 	.word	0x20027db6

080163d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80163d4:	4b03      	ldr	r3, [pc, #12]	@ (80163e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80163d6:	6818      	ldr	r0, [r3, #0]
 80163d8:	b110      	cbz	r0, 80163e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80163da:	6803      	ldr	r3, [r0, #0]
 80163dc:	699b      	ldr	r3, [r3, #24]
 80163de:	4718      	bx	r3
 80163e0:	4770      	bx	lr
 80163e2:	bf00      	nop
 80163e4:	20027e04 	.word	0x20027e04

080163e8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80163e8:	4770      	bx	lr
	...

080163ec <_ZN8touchgfx11Application4drawEv>:
 80163ec:	4b09      	ldr	r3, [pc, #36]	@ (8016414 <_ZN8touchgfx11Application4drawEv+0x28>)
 80163ee:	b507      	push	{r0, r1, r2, lr}
 80163f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163f4:	2100      	movs	r1, #0
 80163f6:	4b08      	ldr	r3, [pc, #32]	@ (8016418 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80163f8:	9100      	str	r1, [sp, #0]
 80163fa:	4669      	mov	r1, sp
 80163fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016400:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016404:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016408:	6803      	ldr	r3, [r0, #0]
 801640a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801640c:	4798      	blx	r3
 801640e:	b003      	add	sp, #12
 8016410:	f85d fb04 	ldr.w	pc, [sp], #4
 8016414:	20027db4 	.word	0x20027db4
 8016418:	20027db6 	.word	0x20027db6

0801641c <_ZN8touchgfx11Application10invalidateEv>:
 801641c:	4b09      	ldr	r3, [pc, #36]	@ (8016444 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801641e:	b082      	sub	sp, #8
 8016420:	2100      	movs	r1, #0
 8016422:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016426:	4b08      	ldr	r3, [pc, #32]	@ (8016448 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016428:	f8ad 2004 	strh.w	r2, [sp, #4]
 801642c:	aa02      	add	r2, sp, #8
 801642e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016432:	9100      	str	r1, [sp, #0]
 8016434:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016438:	6803      	ldr	r3, [r0, #0]
 801643a:	e912 0006 	ldmdb	r2, {r1, r2}
 801643e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016440:	b002      	add	sp, #8
 8016442:	4718      	bx	r3
 8016444:	20027db4 	.word	0x20027db4
 8016448:	20027db6 	.word	0x20027db6

0801644c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801644c:	4b03      	ldr	r3, [pc, #12]	@ (801645c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	b110      	cbz	r0, 8016458 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016452:	6803      	ldr	r3, [r0, #0]
 8016454:	69db      	ldr	r3, [r3, #28]
 8016456:	4718      	bx	r3
 8016458:	4770      	bx	lr
 801645a:	bf00      	nop
 801645c:	20027e04 	.word	0x20027e04

08016460 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016460:	4b03      	ldr	r3, [pc, #12]	@ (8016470 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016462:	6818      	ldr	r0, [r3, #0]
 8016464:	b110      	cbz	r0, 801646c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016466:	6803      	ldr	r3, [r0, #0]
 8016468:	6a1b      	ldr	r3, [r3, #32]
 801646a:	4718      	bx	r3
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	20027e04 	.word	0x20027e04

08016474 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016474:	2300      	movs	r3, #0
 8016476:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801647a:	4770      	bx	lr

0801647c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801647c:	4b03      	ldr	r3, [pc, #12]	@ (801648c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801647e:	6818      	ldr	r0, [r3, #0]
 8016480:	b110      	cbz	r0, 8016488 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016482:	6803      	ldr	r3, [r0, #0]
 8016484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016486:	4718      	bx	r3
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop
 801648c:	20027e04 	.word	0x20027e04

08016490 <_ZN8touchgfx11ApplicationD1Ev>:
 8016490:	4770      	bx	lr

08016492 <_ZN8touchgfx11ApplicationD0Ev>:
 8016492:	b510      	push	{r4, lr}
 8016494:	4604      	mov	r4, r0
 8016496:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801649a:	f012 fb86 	bl	8028baa <_ZdlPvj>
 801649e:	4620      	mov	r0, r4
 80164a0:	bd10      	pop	{r4, pc}

080164a2 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80164a2:	b510      	push	{r4, lr}
 80164a4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80164a8:	888a      	ldrh	r2, [r1, #4]
 80164aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80164ae:	4422      	add	r2, r4
 80164b0:	b212      	sxth	r2, r2
 80164b2:	4293      	cmp	r3, r2
 80164b4:	da15      	bge.n	80164e2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80164b6:	8882      	ldrh	r2, [r0, #4]
 80164b8:	4413      	add	r3, r2
 80164ba:	b21b      	sxth	r3, r3
 80164bc:	429c      	cmp	r4, r3
 80164be:	da10      	bge.n	80164e2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80164c0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80164c4:	88c9      	ldrh	r1, [r1, #6]
 80164c6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80164ca:	4419      	add	r1, r3
 80164cc:	b209      	sxth	r1, r1
 80164ce:	428a      	cmp	r2, r1
 80164d0:	da07      	bge.n	80164e2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80164d2:	88c0      	ldrh	r0, [r0, #6]
 80164d4:	4410      	add	r0, r2
 80164d6:	b200      	sxth	r0, r0
 80164d8:	4283      	cmp	r3, r0
 80164da:	bfac      	ite	ge
 80164dc:	2000      	movge	r0, #0
 80164de:	2001      	movlt	r0, #1
 80164e0:	bd10      	pop	{r4, pc}
 80164e2:	2000      	movs	r0, #0
 80164e4:	e7fc      	b.n	80164e0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080164e6 <_ZN8touchgfx4Rect10restrictToEss>:
 80164e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	b510      	push	{r4, lr}
 80164ee:	da04      	bge.n	80164fa <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80164f0:	8884      	ldrh	r4, [r0, #4]
 80164f2:	4423      	add	r3, r4
 80164f4:	8083      	strh	r3, [r0, #4]
 80164f6:	2300      	movs	r3, #0
 80164f8:	8003      	strh	r3, [r0, #0]
 80164fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 80164fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016502:	1b09      	subs	r1, r1, r4
 8016504:	428b      	cmp	r3, r1
 8016506:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801650a:	bfc8      	it	gt
 801650c:	8081      	strhgt	r1, [r0, #4]
 801650e:	2b00      	cmp	r3, #0
 8016510:	da04      	bge.n	801651c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016512:	88c1      	ldrh	r1, [r0, #6]
 8016514:	440b      	add	r3, r1
 8016516:	80c3      	strh	r3, [r0, #6]
 8016518:	2300      	movs	r3, #0
 801651a:	8043      	strh	r3, [r0, #2]
 801651c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016520:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016524:	1a52      	subs	r2, r2, r1
 8016526:	4293      	cmp	r3, r2
 8016528:	bfc8      	it	gt
 801652a:	80c2      	strhgt	r2, [r0, #6]
 801652c:	bd10      	pop	{r4, pc}
	...

08016530 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016530:	4b10      	ldr	r3, [pc, #64]	@ (8016574 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016532:	b510      	push	{r4, lr}
 8016534:	460c      	mov	r4, r1
 8016536:	f9b3 2000 	ldrsh.w	r2, [r3]
 801653a:	4b0f      	ldr	r3, [pc, #60]	@ (8016578 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801653c:	4620      	mov	r0, r4
 801653e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016542:	f7ff ffd0 	bl	80164e6 <_ZN8touchgfx4Rect10restrictToEss>
 8016546:	4b0d      	ldr	r3, [pc, #52]	@ (801657c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016548:	6818      	ldr	r0, [r3, #0]
 801654a:	b190      	cbz	r0, 8016572 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	4621      	mov	r1, r4
 8016550:	689b      	ldr	r3, [r3, #8]
 8016552:	4798      	blx	r3
 8016554:	4b0a      	ldr	r3, [pc, #40]	@ (8016580 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016556:	6818      	ldr	r0, [r3, #0]
 8016558:	b118      	cbz	r0, 8016562 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801655a:	6803      	ldr	r3, [r0, #0]
 801655c:	4621      	mov	r1, r4
 801655e:	689b      	ldr	r3, [r3, #8]
 8016560:	4798      	blx	r3
 8016562:	4b08      	ldr	r3, [pc, #32]	@ (8016584 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016564:	4621      	mov	r1, r4
 8016566:	6818      	ldr	r0, [r3, #0]
 8016568:	6803      	ldr	r3, [r0, #0]
 801656a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801656e:	69db      	ldr	r3, [r3, #28]
 8016570:	4718      	bx	r3
 8016572:	bd10      	pop	{r4, pc}
 8016574:	20027db6 	.word	0x20027db6
 8016578:	20027db4 	.word	0x20027db4
 801657c:	20027e04 	.word	0x20027e04
 8016580:	20027e00 	.word	0x20027e00
 8016584:	20027dc0 	.word	0x20027dc0

08016588 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658a:	4606      	mov	r6, r0
 801658c:	4608      	mov	r0, r1
 801658e:	460f      	mov	r7, r1
 8016590:	f7f9 fe91 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016594:	b9e8      	cbnz	r0, 80165d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016596:	f9b7 5000 	ldrsh.w	r5, [r7]
 801659a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801659e:	42a5      	cmp	r5, r4
 80165a0:	db17      	blt.n	80165d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80165a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80165a6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	db11      	blt.n	80165d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80165ae:	88b9      	ldrh	r1, [r7, #4]
 80165b0:	440d      	add	r5, r1
 80165b2:	88b1      	ldrh	r1, [r6, #4]
 80165b4:	440c      	add	r4, r1
 80165b6:	b22d      	sxth	r5, r5
 80165b8:	b224      	sxth	r4, r4
 80165ba:	42a5      	cmp	r5, r4
 80165bc:	dc09      	bgt.n	80165d2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80165be:	88f8      	ldrh	r0, [r7, #6]
 80165c0:	4410      	add	r0, r2
 80165c2:	88f2      	ldrh	r2, [r6, #6]
 80165c4:	4413      	add	r3, r2
 80165c6:	b200      	sxth	r0, r0
 80165c8:	b21b      	sxth	r3, r3
 80165ca:	4298      	cmp	r0, r3
 80165cc:	bfcc      	ite	gt
 80165ce:	2000      	movgt	r0, #0
 80165d0:	2001      	movle	r0, #1
 80165d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165d4 <_ZN8touchgfx11Application11getInstanceEv>:
 80165d4:	4b01      	ldr	r3, [pc, #4]	@ (80165dc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80165d6:	6818      	ldr	r0, [r3, #0]
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop
 80165dc:	20027e14 	.word	0x20027e14

080165e0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 80165e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165e2:	4b10      	ldr	r3, [pc, #64]	@ (8016624 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 80165e4:	4605      	mov	r5, r0
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	b1d3      	cbz	r3, 8016620 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 80165ea:	4b0f      	ldr	r3, [pc, #60]	@ (8016628 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 80165ec:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 80165f0:	4f0e      	ldr	r7, [pc, #56]	@ (801662c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 80165f2:	881c      	ldrh	r4, [r3, #0]
 80165f4:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 80165f8:	42a3      	cmp	r3, r4
 80165fa:	d90e      	bls.n	801661a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016602:	b10a      	cbz	r2, 8016608 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8016604:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016606:	b900      	cbnz	r0, 801660a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8016608:	6898      	ldr	r0, [r3, #8]
 801660a:	6803      	ldr	r3, [r0, #0]
 801660c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8016610:	3401      	adds	r4, #1
 8016612:	69db      	ldr	r3, [r3, #28]
 8016614:	4798      	blx	r3
 8016616:	b2a4      	uxth	r4, r4
 8016618:	e7ec      	b.n	80165f4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801661a:	2300      	movs	r3, #0
 801661c:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 8016620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016622:	bf00      	nop
 8016624:	20027dbe 	.word	0x20027dbe
 8016628:	20000070 	.word	0x20000070
 801662c:	20027dc0 	.word	0x20027dc0

08016630 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016630:	2300      	movs	r3, #0
 8016632:	b510      	push	{r4, lr}
 8016634:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8016638:	4604      	mov	r4, r0
 801663a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801663e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016642:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016646:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801664a:	429a      	cmp	r2, r3
 801664c:	d90e      	bls.n	801666c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801664e:	18e2      	adds	r2, r4, r3
 8016650:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016654:	b122      	cbz	r2, 8016660 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016656:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801665a:	6803      	ldr	r3, [r0, #0]
 801665c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801665e:	4798      	blx	r3
 8016660:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016664:	3301      	adds	r3, #1
 8016666:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801666a:	e7ea      	b.n	8016642 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801666c:	bd10      	pop	{r4, pc}

0801666e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801666e:	b530      	push	{r4, r5, lr}
 8016670:	2200      	movs	r2, #0
 8016672:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8016676:	b293      	uxth	r3, r2
 8016678:	429d      	cmp	r5, r3
 801667a:	d90e      	bls.n	801669a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801667c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8016680:	428b      	cmp	r3, r1
 8016682:	d10b      	bne.n	801669c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016684:	1884      	adds	r4, r0, r2
 8016686:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801668a:	b13b      	cbz	r3, 801669c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801668c:	3b01      	subs	r3, #1
 801668e:	b2db      	uxtb	r3, r3
 8016690:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8016694:	b90b      	cbnz	r3, 801669a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016696:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801669a:	bd30      	pop	{r4, r5, pc}
 801669c:	3201      	adds	r2, #1
 801669e:	e7ea      	b.n	8016676 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080166a0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80166a0:	2300      	movs	r3, #0
 80166a2:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80166a6:	30a4      	adds	r0, #164	@ 0xa4
 80166a8:	f820 3c24 	strh.w	r3, [r0, #-36]
 80166ac:	f802 3b01 	strb.w	r3, [r2], #1
 80166b0:	4282      	cmp	r2, r0
 80166b2:	d1fb      	bne.n	80166ac <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80166b4:	4770      	bx	lr
	...

080166b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80166b8:	b570      	push	{r4, r5, r6, lr}
 80166ba:	4c0b      	ldr	r4, [pc, #44]	@ (80166e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80166bc:	4605      	mov	r5, r0
 80166be:	460e      	mov	r6, r1
 80166c0:	6820      	ldr	r0, [r4, #0]
 80166c2:	b110      	cbz	r0, 80166ca <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80166c4:	6803      	ldr	r3, [r0, #0]
 80166c6:	695b      	ldr	r3, [r3, #20]
 80166c8:	4798      	blx	r3
 80166ca:	1d28      	adds	r0, r5, #4
 80166cc:	f7ff ffe8 	bl	80166a0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80166d0:	6026      	str	r6, [r4, #0]
 80166d2:	6833      	ldr	r3, [r6, #0]
 80166d4:	4630      	mov	r0, r6
 80166d6:	68db      	ldr	r3, [r3, #12]
 80166d8:	4798      	blx	r3
 80166da:	682b      	ldr	r3, [r5, #0]
 80166dc:	4628      	mov	r0, r5
 80166de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166e4:	4718      	bx	r3
 80166e6:	bf00      	nop
 80166e8:	20027e04 	.word	0x20027e04

080166ec <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80166ec:	2300      	movs	r3, #0
 80166ee:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80166f2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80166f6:	461a      	mov	r2, r3
 80166f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166fa:	461c      	mov	r4, r3
 80166fc:	461d      	mov	r5, r3
 80166fe:	459c      	cmp	ip, r3
 8016700:	dd1a      	ble.n	8016738 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016702:	18c6      	adds	r6, r0, r3
 8016704:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016708:	b16e      	cbz	r6, 8016726 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801670a:	429a      	cmp	r2, r3
 801670c:	d008      	beq.n	8016720 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801670e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016712:	fa1f fe82 	uxth.w	lr, r2
 8016716:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801671a:	1887      	adds	r7, r0, r2
 801671c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8016720:	3201      	adds	r2, #1
 8016722:	3301      	adds	r3, #1
 8016724:	e7eb      	b.n	80166fe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016726:	4299      	cmp	r1, r3
 8016728:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801672c:	bfa8      	it	ge
 801672e:	3501      	addge	r5, #1
 8016730:	429e      	cmp	r6, r3
 8016732:	bfc8      	it	gt
 8016734:	3401      	addgt	r4, #1
 8016736:	e7f4      	b.n	8016722 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016738:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801673c:	1b49      	subs	r1, r1, r5
 801673e:	1b1b      	subs	r3, r3, r4
 8016740:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016744:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016748:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801674c:	4293      	cmp	r3, r2
 801674e:	dd03      	ble.n	8016758 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016750:	3b01      	subs	r3, #1
 8016752:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8016756:	e7f7      	b.n	8016748 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801675c <_ZN8touchgfx11Application15handleTickEventEv>:
 801675c:	b570      	push	{r4, r5, r6, lr}
 801675e:	4d16      	ldr	r5, [pc, #88]	@ (80167b8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016760:	4604      	mov	r4, r0
 8016762:	6828      	ldr	r0, [r5, #0]
 8016764:	b140      	cbz	r0, 8016778 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016766:	7a03      	ldrb	r3, [r0, #8]
 8016768:	b933      	cbnz	r3, 8016778 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801676a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801676e:	6803      	ldr	r3, [r0, #0]
 8016770:	689b      	ldr	r3, [r3, #8]
 8016772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016776:	4718      	bx	r3
 8016778:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801677c:	4e0f      	ldr	r6, [pc, #60]	@ (80167bc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801677e:	b973      	cbnz	r3, 801679e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016780:	b168      	cbz	r0, 801679e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016782:	7a03      	ldrb	r3, [r0, #8]
 8016784:	b15b      	cbz	r3, 801679e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016786:	6830      	ldr	r0, [r6, #0]
 8016788:	b110      	cbz	r0, 8016790 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801678a:	6803      	ldr	r3, [r0, #0]
 801678c:	691b      	ldr	r3, [r3, #16]
 801678e:	4798      	blx	r3
 8016790:	6828      	ldr	r0, [r5, #0]
 8016792:	6803      	ldr	r3, [r0, #0]
 8016794:	68db      	ldr	r3, [r3, #12]
 8016796:	4798      	blx	r3
 8016798:	2301      	movs	r3, #1
 801679a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801679e:	3404      	adds	r4, #4
 80167a0:	4620      	mov	r0, r4
 80167a2:	f7ff ff45 	bl	8016630 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80167a6:	4620      	mov	r0, r4
 80167a8:	f7ff ffa0 	bl	80166ec <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80167ac:	6830      	ldr	r0, [r6, #0]
 80167ae:	b110      	cbz	r0, 80167b6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80167b0:	6803      	ldr	r3, [r0, #0]
 80167b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167b4:	e7dd      	b.n	8016772 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80167b6:	bd70      	pop	{r4, r5, r6, pc}
 80167b8:	20027e08 	.word	0x20027e08
 80167bc:	20027e04 	.word	0x20027e04

080167c0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80167c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c2:	2300      	movs	r3, #0
 80167c4:	4604      	mov	r4, r0
 80167c6:	460d      	mov	r5, r1
 80167c8:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80167cc:	4618      	mov	r0, r3
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	4291      	cmp	r1, r2
 80167d2:	d912      	bls.n	80167fa <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80167d4:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80167d8:	18e6      	adds	r6, r4, r3
 80167da:	42af      	cmp	r7, r5
 80167dc:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 80167e0:	d105      	bne.n	80167ee <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 80167e2:	2aff      	cmp	r2, #255	@ 0xff
 80167e4:	d002      	beq.n	80167ec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80167e6:	3201      	adds	r2, #1
 80167e8:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 80167ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167ee:	2a00      	cmp	r2, #0
 80167f0:	f103 0301 	add.w	r3, r3, #1
 80167f4:	bf08      	it	eq
 80167f6:	2001      	moveq	r0, #1
 80167f8:	e7e9      	b.n	80167ce <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80167fa:	b120      	cbz	r0, 8016806 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80167fc:	2920      	cmp	r1, #32
 80167fe:	d102      	bne.n	8016806 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016800:	4620      	mov	r0, r4
 8016802:	f7ff ff73 	bl	80166ec <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016806:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801680a:	2b1f      	cmp	r3, #31
 801680c:	d8ee      	bhi.n	80167ec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801680e:	18e2      	adds	r2, r4, r3
 8016810:	2101      	movs	r1, #1
 8016812:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8016816:	185a      	adds	r2, r3, r1
 8016818:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801681c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016820:	e7e4      	b.n	80167ec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08016822 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016822:	4603      	mov	r3, r0
 8016824:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8016828:	2200      	movs	r2, #0
 801682a:	801a      	strh	r2, [r3, #0]
 801682c:	3308      	adds	r3, #8
 801682e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016832:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016836:	f823 2c02 	strh.w	r2, [r3, #-2]
 801683a:	428b      	cmp	r3, r1
 801683c:	d1f5      	bne.n	801682a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801683e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016842:	4770      	bx	lr

08016844 <_ZN8touchgfx11ApplicationC1Ev>:
 8016844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016846:	4b1d      	ldr	r3, [pc, #116]	@ (80168bc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016848:	4606      	mov	r6, r0
 801684a:	4604      	mov	r4, r0
 801684c:	2500      	movs	r5, #0
 801684e:	f846 3b04 	str.w	r3, [r6], #4
 8016852:	22a8      	movs	r2, #168	@ 0xa8
 8016854:	2100      	movs	r1, #0
 8016856:	4630      	mov	r0, r6
 8016858:	f012 fc72 	bl	8029140 <memset>
 801685c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016860:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016864:	4f16      	ldr	r7, [pc, #88]	@ (80168c0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016866:	f7ff ffdc 	bl	8016822 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801686a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801686e:	f7ff ffd8 	bl	8016822 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016872:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8016876:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801687a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801687e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8016882:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8016886:	490f      	ldr	r1, [pc, #60]	@ (80168c4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016888:	480f      	ldr	r0, [pc, #60]	@ (80168c8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801688a:	f011 fca7 	bl	80281dc <CRC_Lock>
 801688e:	4b0f      	ldr	r3, [pc, #60]	@ (80168cc <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016890:	b158      	cbz	r0, 80168aa <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016892:	801d      	strh	r5, [r3, #0]
 8016894:	2300      	movs	r3, #0
 8016896:	4a0e      	ldr	r2, [pc, #56]	@ (80168d0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016898:	4630      	mov	r0, r6
 801689a:	6013      	str	r3, [r2, #0]
 801689c:	4a0d      	ldr	r2, [pc, #52]	@ (80168d4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801689e:	603b      	str	r3, [r7, #0]
 80168a0:	6013      	str	r3, [r2, #0]
 80168a2:	f7ff fefd 	bl	80166a0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80168a6:	4620      	mov	r0, r4
 80168a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80168ae:	2002      	movs	r0, #2
 80168b0:	801a      	strh	r2, [r3, #0]
 80168b2:	6038      	str	r0, [r7, #0]
 80168b4:	f001 fb48 	bl	8017f48 <_ZN8touchgfx6Screen4drawEv>
 80168b8:	e7ec      	b.n	8016894 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80168ba:	bf00      	nop
 80168bc:	0802e0d0 	.word	0x0802e0d0
 80168c0:	20027e04 	.word	0x20027e04
 80168c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80168c8:	f407a5c2 	.word	0xf407a5c2
 80168cc:	20000070 	.word	0x20000070
 80168d0:	20027e14 	.word	0x20027e14
 80168d4:	20027e08 	.word	0x20027e08

080168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80168d8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80168dc:	3b01      	subs	r3, #1
 80168de:	b29b      	uxth	r3, r3
 80168e0:	428b      	cmp	r3, r1
 80168e2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 80168e6:	b510      	push	{r4, lr}
 80168e8:	d908      	bls.n	80168fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80168ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80168ee:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80168f2:	681a      	ldr	r2, [r3, #0]
 80168f4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80168f8:	685a      	ldr	r2, [r3, #4]
 80168fa:	6062      	str	r2, [r4, #4]
 80168fc:	bd10      	pop	{r4, pc}
	...

08016900 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016904:	b08f      	sub	sp, #60	@ 0x3c
 8016906:	4b8f      	ldr	r3, [pc, #572]	@ (8016b44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016908:	4683      	mov	fp, r0
 801690a:	ac0a      	add	r4, sp, #40	@ 0x28
 801690c:	e884 0006 	stmia.w	r4, {r1, r2}
 8016910:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016914:	4620      	mov	r0, r4
 8016916:	4b8c      	ldr	r3, [pc, #560]	@ (8016b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016918:	f9b3 1000 	ldrsh.w	r1, [r3]
 801691c:	f7ff fde3 	bl	80164e6 <_ZN8touchgfx4Rect10restrictToEss>
 8016920:	4620      	mov	r0, r4
 8016922:	f7f9 fcc8 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016926:	2800      	cmp	r0, #0
 8016928:	d16a      	bne.n	8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801692a:	9403      	str	r4, [sp, #12]
 801692c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016930:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016934:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016938:	9301      	str	r3, [sp, #4]
 801693a:	35a4      	adds	r5, #164	@ 0xa4
 801693c:	b15c      	cbz	r4, 8016956 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801693e:	4629      	mov	r1, r5
 8016940:	9803      	ldr	r0, [sp, #12]
 8016942:	f7ff fe21 	bl	8016588 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016946:	3c01      	subs	r4, #1
 8016948:	b118      	cbz	r0, 8016952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801694a:	b2a1      	uxth	r1, r4
 801694c:	9801      	ldr	r0, [sp, #4]
 801694e:	f7ff ffc3 	bl	80168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016952:	3d08      	subs	r5, #8
 8016954:	e7f2      	b.n	801693c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016956:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801695a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801695e:	f8cd a010 	str.w	sl, [sp, #16]
 8016962:	9302      	str	r3, [sp, #8]
 8016964:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016968:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801696c:	9306      	str	r3, [sp, #24]
 801696e:	445c      	add	r4, fp
 8016970:	2500      	movs	r5, #0
 8016972:	4626      	mov	r6, r4
 8016974:	f8cd a014 	str.w	sl, [sp, #20]
 8016978:	462f      	mov	r7, r5
 801697a:	9b05      	ldr	r3, [sp, #20]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d073      	beq.n	8016a68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016980:	9903      	ldr	r1, [sp, #12]
 8016982:	4630      	mov	r0, r6
 8016984:	f7ff fd8d 	bl	80164a2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016988:	b350      	cbz	r0, 80169e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801698a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801698e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016992:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8016996:	45e6      	cmp	lr, ip
 8016998:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801699c:	db33      	blt.n	8016a06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801699e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80169a2:	88b3      	ldrh	r3, [r6, #4]
 80169a4:	4472      	add	r2, lr
 80169a6:	4463      	add	r3, ip
 80169a8:	b212      	sxth	r2, r2
 80169aa:	b21b      	sxth	r3, r3
 80169ac:	429a      	cmp	r2, r3
 80169ae:	dc2a      	bgt.n	8016a06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169b0:	fa1f f289 	uxth.w	r2, r9
 80169b4:	88f3      	ldrh	r3, [r6, #6]
 80169b6:	45c8      	cmp	r8, r9
 80169b8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80169bc:	4413      	add	r3, r2
 80169be:	fa1f fc88 	uxth.w	ip, r8
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	fa0f fe83 	sxth.w	lr, r3
 80169c8:	db0f      	blt.n	80169ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80169ca:	eba3 030c 	sub.w	r3, r3, ip
 80169ce:	1ac9      	subs	r1, r1, r3
 80169d0:	b209      	sxth	r1, r1
 80169d2:	2900      	cmp	r1, #0
 80169d4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80169d8:	dd12      	ble.n	8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80169da:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80169de:	4605      	mov	r5, r0
 80169e0:	9b05      	ldr	r3, [sp, #20]
 80169e2:	3e08      	subs	r6, #8
 80169e4:	3b01      	subs	r3, #1
 80169e6:	9305      	str	r3, [sp, #20]
 80169e8:	e7c7      	b.n	801697a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80169ea:	4461      	add	r1, ip
 80169ec:	b209      	sxth	r1, r1
 80169ee:	4571      	cmp	r1, lr
 80169f0:	dc38      	bgt.n	8016a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80169f2:	eba2 020c 	sub.w	r2, r2, ip
 80169f6:	b212      	sxth	r2, r2
 80169f8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80169fc:	2a00      	cmp	r2, #0
 80169fe:	dcee      	bgt.n	80169de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a00:	b00f      	add	sp, #60	@ 0x3c
 8016a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a06:	45c8      	cmp	r8, r9
 8016a08:	db2c      	blt.n	8016a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a0a:	88f3      	ldrh	r3, [r6, #6]
 8016a0c:	4499      	add	r9, r3
 8016a0e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016a12:	4498      	add	r8, r3
 8016a14:	fa0f f989 	sxth.w	r9, r9
 8016a18:	fa0f f888 	sxth.w	r8, r8
 8016a1c:	45c1      	cmp	r9, r8
 8016a1e:	db21      	blt.n	8016a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a20:	fa1f f28c 	uxth.w	r2, ip
 8016a24:	88b3      	ldrh	r3, [r6, #4]
 8016a26:	45e6      	cmp	lr, ip
 8016a28:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016a2c:	4413      	add	r3, r2
 8016a2e:	fa1f f88e 	uxth.w	r8, lr
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	fa0f f983 	sxth.w	r9, r3
 8016a38:	db0a      	blt.n	8016a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016a3a:	eba3 0308 	sub.w	r3, r3, r8
 8016a3e:	1ac9      	subs	r1, r1, r3
 8016a40:	b209      	sxth	r1, r1
 8016a42:	2900      	cmp	r1, #0
 8016a44:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8016a48:	ddda      	ble.n	8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016a4a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016a4e:	e7c6      	b.n	80169de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a50:	4441      	add	r1, r8
 8016a52:	b209      	sxth	r1, r1
 8016a54:	4549      	cmp	r1, r9
 8016a56:	dc05      	bgt.n	8016a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a58:	eba2 0208 	sub.w	r2, r2, r8
 8016a5c:	b212      	sxth	r2, r2
 8016a5e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016a62:	e7cb      	b.n	80169fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016a64:	4607      	mov	r7, r0
 8016a66:	e7bb      	b.n	80169e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016a68:	2d00      	cmp	r5, #0
 8016a6a:	d181      	bne.n	8016970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016a6c:	2f00      	cmp	r7, #0
 8016a6e:	f000 81dd 	beq.w	8016e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016a72:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8016a76:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8016a7a:	b2b3      	uxth	r3, r6
 8016a7c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8016a80:	9305      	str	r3, [sp, #20]
 8016a82:	9a05      	ldr	r2, [sp, #20]
 8016a84:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016a88:	4413      	add	r3, r2
 8016a8a:	b2ba      	uxth	r2, r7
 8016a8c:	4492      	add	sl, r2
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	fa1f fa8a 	uxth.w	sl, sl
 8016a94:	fa0f f883 	sxth.w	r8, r3
 8016a98:	fa0f f98a 	sxth.w	r9, sl
 8016a9c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016aa0:	9b04      	ldr	r3, [sp, #16]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d052      	beq.n	8016b4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016aa6:	9903      	ldr	r1, [sp, #12]
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	f7ff fcfa 	bl	80164a2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016aae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ab2:	b1c0      	cbz	r0, 8016ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016ab4:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016ab8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016abc:	4576      	cmp	r6, lr
 8016abe:	dc22      	bgt.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016ac0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016ac4:	44f4      	add	ip, lr
 8016ac6:	fa0f fc8c 	sxth.w	ip, ip
 8016aca:	45e0      	cmp	r8, ip
 8016acc:	db1b      	blt.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016ace:	428f      	cmp	r7, r1
 8016ad0:	fa1f fc81 	uxth.w	ip, r1
 8016ad4:	88e1      	ldrh	r1, [r4, #6]
 8016ad6:	dc0d      	bgt.n	8016af4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8016ad8:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016adc:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016ae0:	eba1 010c 	sub.w	r1, r1, ip
 8016ae4:	80e1      	strh	r1, [r4, #6]
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	9904      	ldr	r1, [sp, #16]
 8016aea:	3c08      	subs	r4, #8
 8016aec:	4605      	mov	r5, r0
 8016aee:	3901      	subs	r1, #1
 8016af0:	9104      	str	r1, [sp, #16]
 8016af2:	e7d3      	b.n	8016a9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8016af4:	4461      	add	r1, ip
 8016af6:	b209      	sxth	r1, r1
 8016af8:	4549      	cmp	r1, r9
 8016afa:	dcf5      	bgt.n	8016ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016afc:	eba2 0c0c 	sub.w	ip, r2, ip
 8016b00:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b04:	e7ef      	b.n	8016ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b06:	428f      	cmp	r7, r1
 8016b08:	dcee      	bgt.n	8016ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b0a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016b0e:	4461      	add	r1, ip
 8016b10:	b209      	sxth	r1, r1
 8016b12:	4589      	cmp	r9, r1
 8016b14:	dbe8      	blt.n	8016ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b16:	4576      	cmp	r6, lr
 8016b18:	fa1f fc8e 	uxth.w	ip, lr
 8016b1c:	88a1      	ldrh	r1, [r4, #4]
 8016b1e:	dc07      	bgt.n	8016b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016b20:	eba3 0c0c 	sub.w	ip, r3, ip
 8016b24:	f8a4 8000 	strh.w	r8, [r4]
 8016b28:	eba1 010c 	sub.w	r1, r1, ip
 8016b2c:	80a1      	strh	r1, [r4, #4]
 8016b2e:	e7da      	b.n	8016ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b30:	4461      	add	r1, ip
 8016b32:	b209      	sxth	r1, r1
 8016b34:	4588      	cmp	r8, r1
 8016b36:	dbd7      	blt.n	8016ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b38:	9905      	ldr	r1, [sp, #20]
 8016b3a:	eba1 0c0c 	sub.w	ip, r1, ip
 8016b3e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8016b42:	e7d0      	b.n	8016ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b44:	20027db6 	.word	0x20027db6
 8016b48:	20027db4 	.word	0x20027db4
 8016b4c:	2d00      	cmp	r5, #0
 8016b4e:	f000 816d 	beq.w	8016e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b52:	9b06      	ldr	r3, [sp, #24]
 8016b54:	445b      	add	r3, fp
 8016b56:	461c      	mov	r4, r3
 8016b58:	9b02      	ldr	r3, [sp, #8]
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	f000 8166 	beq.w	8016e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b60:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8016b64:	9803      	ldr	r0, [sp, #12]
 8016b66:	4629      	mov	r1, r5
 8016b68:	f7ff fd0e 	bl	8016588 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b6c:	b120      	cbz	r0, 8016b78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016b6e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016b72:	9801      	ldr	r0, [sp, #4]
 8016b74:	f7ff feb0 	bl	80168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b78:	9903      	ldr	r1, [sp, #12]
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	f7ff fc91 	bl	80164a2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016b80:	2800      	cmp	r0, #0
 8016b82:	f000 809c 	beq.w	8016cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016b86:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8016b8a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016b8e:	fa1f f189 	uxth.w	r1, r9
 8016b92:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b98:	eb01 0c03 	add.w	ip, r1, r3
 8016b9c:	b283      	uxth	r3, r0
 8016b9e:	4548      	cmp	r0, r9
 8016ba0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8016ba4:	fa1f fa8c 	uxth.w	sl, ip
 8016ba8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8016bac:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8016bb0:	eb03 050c 	add.w	r5, r3, ip
 8016bb4:	b2ad      	uxth	r5, r5
 8016bb6:	9505      	str	r5, [sp, #20]
 8016bb8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016bbc:	9504      	str	r5, [sp, #16]
 8016bbe:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8016bc2:	f340 8099 	ble.w	8016cf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016bc6:	1a5b      	subs	r3, r3, r1
 8016bc8:	4596      	cmp	lr, r2
 8016bca:	fa0f f08a 	sxth.w	r0, sl
 8016bce:	b29b      	uxth	r3, r3
 8016bd0:	b21e      	sxth	r6, r3
 8016bd2:	dd2e      	ble.n	8016c32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016bd4:	9f02      	ldr	r7, [sp, #8]
 8016bd6:	fa1f fe8e 	uxth.w	lr, lr
 8016bda:	b292      	uxth	r2, r2
 8016bdc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8016be0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016be4:	9f04      	ldr	r7, [sp, #16]
 8016be6:	ebae 0102 	sub.w	r1, lr, r2
 8016bea:	44a6      	add	lr, r4
 8016bec:	1a3f      	subs	r7, r7, r0
 8016bee:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8016bf2:	b289      	uxth	r1, r1
 8016bf4:	4402      	add	r2, r0
 8016bf6:	fa0f fe8e 	sxth.w	lr, lr
 8016bfa:	b20d      	sxth	r5, r1
 8016bfc:	b212      	sxth	r2, r2
 8016bfe:	436f      	muls	r7, r5
 8016c00:	ebae 0202 	sub.w	r2, lr, r2
 8016c04:	4372      	muls	r2, r6
 8016c06:	4297      	cmp	r7, r2
 8016c08:	db09      	blt.n	8016c1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016c0a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8016c0e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8016c12:	449c      	add	ip, r3
 8016c14:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016c18:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016c1c:	e686      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c1e:	4421      	add	r1, r4
 8016c20:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8016c24:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8016c28:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016c2c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016c30:	e67c      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c32:	9f04      	ldr	r7, [sp, #16]
 8016c34:	42b8      	cmp	r0, r7
 8016c36:	da27      	bge.n	8016c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016c38:	9902      	ldr	r1, [sp, #8]
 8016c3a:	1a3f      	subs	r7, r7, r0
 8016c3c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8016c40:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016c44:	eb05 010e 	add.w	r1, r5, lr
 8016c48:	fa1f f881 	uxth.w	r8, r1
 8016c4c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8016c50:	4411      	add	r1, r2
 8016c52:	fa0f f988 	sxth.w	r9, r8
 8016c56:	eba2 020e 	sub.w	r2, r2, lr
 8016c5a:	eba1 0108 	sub.w	r1, r1, r8
 8016c5e:	4372      	muls	r2, r6
 8016c60:	b289      	uxth	r1, r1
 8016c62:	fa0f f881 	sxth.w	r8, r1
 8016c66:	fb08 f707 	mul.w	r7, r8, r7
 8016c6a:	42ba      	cmp	r2, r7
 8016c6c:	dc06      	bgt.n	8016c7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016c6e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8016c72:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8016c76:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8016c7a:	e7ca      	b.n	8016c12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016c7c:	4429      	add	r1, r5
 8016c7e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8016c82:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016c86:	e651      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c88:	9805      	ldr	r0, [sp, #20]
 8016c8a:	2d06      	cmp	r5, #6
 8016c8c:	ebaa 0000 	sub.w	r0, sl, r0
 8016c90:	b280      	uxth	r0, r0
 8016c92:	fa0f fe80 	sxth.w	lr, r0
 8016c96:	d817      	bhi.n	8016cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016c98:	9b04      	ldr	r3, [sp, #16]
 8016c9a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8016c9e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016ca2:	1c6b      	adds	r3, r5, #1
 8016ca4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8016ca8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016cac:	9b01      	ldr	r3, [sp, #4]
 8016cae:	9801      	ldr	r0, [sp, #4]
 8016cb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016cb4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016cb8:	805a      	strh	r2, [r3, #2]
 8016cba:	809e      	strh	r6, [r3, #4]
 8016cbc:	80d9      	strh	r1, [r3, #6]
 8016cbe:	9b02      	ldr	r3, [sp, #8]
 8016cc0:	3c08      	subs	r4, #8
 8016cc2:	3b01      	subs	r3, #1
 8016cc4:	9302      	str	r3, [sp, #8]
 8016cc6:	e747      	b.n	8016b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016cc8:	9a02      	ldr	r2, [sp, #8]
 8016cca:	45b6      	cmp	lr, r6
 8016ccc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016cd0:	db0d      	blt.n	8016cee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016cd2:	449c      	add	ip, r3
 8016cd4:	445a      	add	r2, fp
 8016cd6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016cda:	fa1f fc8c 	uxth.w	ip, ip
 8016cde:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8016ce2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016ce6:	448c      	add	ip, r1
 8016ce8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8016cec:	e61e      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016cee:	445a      	add	r2, fp
 8016cf0:	4484      	add	ip, r0
 8016cf2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8016cf6:	e78f      	b.n	8016c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016cf8:	fa1f f18e 	uxth.w	r1, lr
 8016cfc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016d00:	b293      	uxth	r3, r2
 8016d02:	4596      	cmp	lr, r2
 8016d04:	eb01 0806 	add.w	r8, r1, r6
 8016d08:	9306      	str	r3, [sp, #24]
 8016d0a:	fa1f f888 	uxth.w	r8, r8
 8016d0e:	9f06      	ldr	r7, [sp, #24]
 8016d10:	fa0f f388 	sxth.w	r3, r8
 8016d14:	9307      	str	r3, [sp, #28]
 8016d16:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016d1a:	443b      	add	r3, r7
 8016d1c:	b29b      	uxth	r3, r3
 8016d1e:	9308      	str	r3, [sp, #32]
 8016d20:	da24      	bge.n	8016d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016d22:	9905      	ldr	r1, [sp, #20]
 8016d24:	eba3 0308 	sub.w	r3, r3, r8
 8016d28:	eba2 020e 	sub.w	r2, r2, lr
 8016d2c:	eba9 0000 	sub.w	r0, r9, r0
 8016d30:	ebaa 0401 	sub.w	r4, sl, r1
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	b2a4      	uxth	r4, r4
 8016d38:	b219      	sxth	r1, r3
 8016d3a:	b225      	sxth	r5, r4
 8016d3c:	4348      	muls	r0, r1
 8016d3e:	436a      	muls	r2, r5
 8016d40:	4282      	cmp	r2, r0
 8016d42:	9a02      	ldr	r2, [sp, #8]
 8016d44:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016d48:	445a      	add	r2, fp
 8016d4a:	dc06      	bgt.n	8016d5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016d4c:	9b07      	ldr	r3, [sp, #28]
 8016d4e:	44a4      	add	ip, r4
 8016d50:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8016d54:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8016d58:	e75e      	b.n	8016c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d5a:	9904      	ldr	r1, [sp, #16]
 8016d5c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8016d60:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8016d64:	4433      	add	r3, r6
 8016d66:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016d6a:	e5df      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d6c:	9f06      	ldr	r7, [sp, #24]
 8016d6e:	9b04      	ldr	r3, [sp, #16]
 8016d70:	1bc9      	subs	r1, r1, r7
 8016d72:	fa0f f78a 	sxth.w	r7, sl
 8016d76:	b289      	uxth	r1, r1
 8016d78:	429f      	cmp	r7, r3
 8016d7a:	fa0f fe81 	sxth.w	lr, r1
 8016d7e:	dd23      	ble.n	8016dc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016d80:	9a05      	ldr	r2, [sp, #20]
 8016d82:	eba9 0000 	sub.w	r0, r9, r0
 8016d86:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016d8a:	ebaa 0202 	sub.w	r2, sl, r2
 8016d8e:	9d07      	ldr	r5, [sp, #28]
 8016d90:	fb0e f000 	mul.w	r0, lr, r0
 8016d94:	b292      	uxth	r2, r2
 8016d96:	eba5 0a03 	sub.w	sl, r5, r3
 8016d9a:	9b02      	ldr	r3, [sp, #8]
 8016d9c:	b214      	sxth	r4, r2
 8016d9e:	00db      	lsls	r3, r3, #3
 8016da0:	fb04 fa0a 	mul.w	sl, r4, sl
 8016da4:	445b      	add	r3, fp
 8016da6:	4550      	cmp	r0, sl
 8016da8:	db03      	blt.n	8016db2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016daa:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8016dae:	4494      	add	ip, r2
 8016db0:	e732      	b.n	8016c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016db2:	9a04      	ldr	r2, [sp, #16]
 8016db4:	4431      	add	r1, r6
 8016db6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8016dba:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8016dbe:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8016dc2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016dc6:	e75c      	b.n	8016c82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016dc8:	9b08      	ldr	r3, [sp, #32]
 8016dca:	2d06      	cmp	r5, #6
 8016dcc:	eba3 0308 	sub.w	r3, r3, r8
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	b218      	sxth	r0, r3
 8016dd4:	d813      	bhi.n	8016dfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8016dd6:	9b07      	ldr	r3, [sp, #28]
 8016dd8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8016ddc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8016de0:	1c6b      	adds	r3, r5, #1
 8016de2:	9901      	ldr	r1, [sp, #4]
 8016de4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016de8:	9b01      	ldr	r3, [sp, #4]
 8016dea:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016dee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016df2:	805a      	strh	r2, [r3, #2]
 8016df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016df6:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016dfa:	809a      	strh	r2, [r3, #4]
 8016dfc:	e75f      	b.n	8016cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016dfe:	9c02      	ldr	r4, [sp, #8]
 8016e00:	4570      	cmp	r0, lr
 8016e02:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016e06:	db0d      	blt.n	8016e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016e08:	4431      	add	r1, r6
 8016e0a:	9b06      	ldr	r3, [sp, #24]
 8016e0c:	445c      	add	r4, fp
 8016e0e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016e12:	b289      	uxth	r1, r1
 8016e14:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8016e18:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016e1c:	4419      	add	r1, r3
 8016e1e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016e22:	e583      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016e24:	445c      	add	r4, fp
 8016e26:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8016e2a:	e79b      	b.n	8016d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016e2c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016e30:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8016e34:	1e65      	subs	r5, r4, #1
 8016e36:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016e3a:	b2ad      	uxth	r5, r5
 8016e3c:	42b5      	cmp	r5, r6
 8016e3e:	d044      	beq.n	8016eca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8016e40:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8016e44:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8016e48:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8016e4c:	4282      	cmp	r2, r0
 8016e4e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8016e52:	d11f      	bne.n	8016e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016e54:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8016e58:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016e5c:	459c      	cmp	ip, r3
 8016e5e:	d119      	bne.n	8016e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016e60:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8016e64:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016e68:	19d8      	adds	r0, r3, r7
 8016e6a:	b200      	sxth	r0, r0
 8016e6c:	4288      	cmp	r0, r1
 8016e6e:	d109      	bne.n	8016e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8016e70:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8016e74:	4413      	add	r3, r2
 8016e76:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8016e7a:	4629      	mov	r1, r5
 8016e7c:	9801      	ldr	r0, [sp, #4]
 8016e7e:	f7ff fd2b 	bl	80168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016e82:	e003      	b.n	8016e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016e84:	4411      	add	r1, r2
 8016e86:	b209      	sxth	r1, r1
 8016e88:	42b9      	cmp	r1, r7
 8016e8a:	d0f3      	beq.n	8016e74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8016e8c:	3d01      	subs	r5, #1
 8016e8e:	3c08      	subs	r4, #8
 8016e90:	b2ad      	uxth	r5, r5
 8016e92:	e7d3      	b.n	8016e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8016e94:	42b9      	cmp	r1, r7
 8016e96:	d1f9      	bne.n	8016e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016e98:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8016e9c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016ea0:	4299      	cmp	r1, r3
 8016ea2:	d1f3      	bne.n	8016e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ea4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016ea8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016eac:	181f      	adds	r7, r3, r0
 8016eae:	b23f      	sxth	r7, r7
 8016eb0:	42ba      	cmp	r2, r7
 8016eb2:	d105      	bne.n	8016ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8016eb4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8016eb8:	440b      	add	r3, r1
 8016eba:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016ebe:	e7dc      	b.n	8016e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8016ec0:	440a      	add	r2, r1
 8016ec2:	b212      	sxth	r2, r2
 8016ec4:	4290      	cmp	r0, r2
 8016ec6:	d1e1      	bne.n	8016e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ec8:	e7f6      	b.n	8016eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8016eca:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8016ece:	2e07      	cmp	r6, #7
 8016ed0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016ed4:	d812      	bhi.n	8016efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8016ed6:	1c75      	adds	r5, r6, #1
 8016ed8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016edc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8016ee0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8016ee4:	9d01      	ldr	r5, [sp, #4]
 8016ee6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8016eea:	442c      	add	r4, r5
 8016eec:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016ef0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016ef4:	8061      	strh	r1, [r4, #2]
 8016ef6:	80a2      	strh	r2, [r4, #4]
 8016ef8:	80e3      	strh	r3, [r4, #6]
 8016efa:	e581      	b.n	8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016efc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016f00:	3e01      	subs	r6, #1
 8016f02:	445c      	add	r4, fp
 8016f04:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016f08:	f04f 37ff 	mov.w	r7, #4294967295
 8016f0c:	2500      	movs	r5, #0
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016f14:	1e72      	subs	r2, r6, #1
 8016f16:	9302      	str	r3, [sp, #8]
 8016f18:	4691      	mov	r9, r2
 8016f1a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016f1e:	9304      	str	r3, [sp, #16]
 8016f20:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8016f24:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016f28:	6818      	ldr	r0, [r3, #0]
 8016f2a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016f2e:	9207      	str	r2, [sp, #28]
 8016f30:	bf16      	itet	ne
 8016f32:	9905      	ldrne	r1, [sp, #20]
 8016f34:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016f38:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016f3c:	9306      	str	r3, [sp, #24]
 8016f3e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016f42:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016f46:	fb18 f801 	smulbb	r8, r8, r1
 8016f4a:	6859      	ldr	r1, [r3, #4]
 8016f4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016f50:	4671      	mov	r1, lr
 8016f52:	a80c      	add	r0, sp, #48	@ 0x30
 8016f54:	f7fb fbf1 	bl	801273a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f58:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8016f5c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016f60:	f04f 0c08 	mov.w	ip, #8
 8016f64:	9b04      	ldr	r3, [sp, #16]
 8016f66:	9a02      	ldr	r2, [sp, #8]
 8016f68:	fb10 f001 	smulbb	r0, r0, r1
 8016f6c:	fb02 8803 	mla	r8, r2, r3, r8
 8016f70:	eba0 0108 	sub.w	r1, r0, r8
 8016f74:	fb90 f0fc 	sdiv	r0, r0, ip
 8016f78:	4288      	cmp	r0, r1
 8016f7a:	dc20      	bgt.n	8016fbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8016f7c:	4551      	cmp	r1, sl
 8016f7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016f82:	da03      	bge.n	8016f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8016f84:	b1d9      	cbz	r1, 8016fbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8016f86:	468a      	mov	sl, r1
 8016f88:	464f      	mov	r7, r9
 8016f8a:	4635      	mov	r5, r6
 8016f8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016f90:	f119 0f02 	cmn.w	r9, #2
 8016f94:	d1c6      	bne.n	8016f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8016f96:	4616      	mov	r6, r2
 8016f98:	3201      	adds	r2, #1
 8016f9a:	f1a4 0408 	sub.w	r4, r4, #8
 8016f9e:	d1b7      	bne.n	8016f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8016fa0:	9b01      	ldr	r3, [sp, #4]
 8016fa2:	b2ac      	uxth	r4, r5
 8016fa4:	00ed      	lsls	r5, r5, #3
 8016fa6:	1958      	adds	r0, r3, r5
 8016fa8:	1c7b      	adds	r3, r7, #1
 8016faa:	d10b      	bne.n	8016fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8016fac:	4601      	mov	r1, r0
 8016fae:	9803      	ldr	r0, [sp, #12]
 8016fb0:	f7fb fbc3 	bl	801273a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	9801      	ldr	r0, [sp, #4]
 8016fb8:	f7ff fc8e 	bl	80168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016fbc:	e4b6      	b.n	801692c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016fbe:	464f      	mov	r7, r9
 8016fc0:	4635      	mov	r5, r6
 8016fc2:	e7ed      	b.n	8016fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8016fc4:	9b01      	ldr	r3, [sp, #4]
 8016fc6:	00ff      	lsls	r7, r7, #3
 8016fc8:	445d      	add	r5, fp
 8016fca:	19d9      	adds	r1, r3, r7
 8016fcc:	445f      	add	r7, fp
 8016fce:	f7fb fbb4 	bl	801273a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016fd2:	9b03      	ldr	r3, [sp, #12]
 8016fd4:	cb03      	ldmia	r3!, {r0, r1}
 8016fd6:	9b03      	ldr	r3, [sp, #12]
 8016fd8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8016fdc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8016fe0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016fe4:	6869      	ldr	r1, [r5, #4]
 8016fe6:	c303      	stmia	r3!, {r0, r1}
 8016fe8:	e7e4      	b.n	8016fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8016fea:	bf00      	nop

08016fec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8016ff4:	b09b      	sub	sp, #108	@ 0x6c
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	f7f9 f95c 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ffe:	4605      	mov	r5, r0
 8017000:	b948      	cbnz	r0, 8017016 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	4620      	mov	r0, r4
 8017006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017008:	e896 0006 	ldmia.w	r6, {r1, r2}
 801700c:	4798      	blx	r3
 801700e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017012:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017016:	4bc5      	ldr	r3, [pc, #788]	@ (801732c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d03f      	beq.n	801709e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801701e:	4dc4      	ldr	r5, [pc, #784]	@ (8017330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017020:	4628      	mov	r0, r5
 8017022:	f7f9 f948 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017026:	4606      	mov	r6, r0
 8017028:	2800      	cmp	r0, #0
 801702a:	d138      	bne.n	801709e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801702c:	4628      	mov	r0, r5
 801702e:	f7ff f949 	bl	80162c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	6829      	ldr	r1, [r5, #0]
 8017036:	4620      	mov	r0, r4
 8017038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801703a:	686a      	ldr	r2, [r5, #4]
 801703c:	4798      	blx	r3
 801703e:	802e      	strh	r6, [r5, #0]
 8017040:	806e      	strh	r6, [r5, #2]
 8017042:	80ae      	strh	r6, [r5, #4]
 8017044:	80ee      	strh	r6, [r5, #6]
 8017046:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801704a:	4dba      	ldr	r5, [pc, #744]	@ (8017334 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801704c:	4640      	mov	r0, r8
 801704e:	f7ff fbe8 	bl	8016822 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017052:	882e      	ldrh	r6, [r5, #0]
 8017054:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017058:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801705c:	4633      	mov	r3, r6
 801705e:	42bb      	cmp	r3, r7
 8017060:	d224      	bcs.n	80170ac <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017062:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8017066:	2907      	cmp	r1, #7
 8017068:	d816      	bhi.n	8017098 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801706a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801706e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017072:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017076:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801707a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801707e:	1c4a      	adds	r2, r1, #1
 8017080:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8017084:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8017088:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801708c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8017090:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017094:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017098:	3301      	adds	r3, #1
 801709a:	b29b      	uxth	r3, r3
 801709c:	e7df      	b.n	801705e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801709e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d1cf      	bne.n	8017046 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80170a6:	b01b      	add	sp, #108	@ 0x6c
 80170a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ac:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80170b0:	42b3      	cmp	r3, r6
 80170b2:	d90c      	bls.n	80170ce <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80170b4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80170b8:	6822      	ldr	r2, [r4, #0]
 80170ba:	3601      	adds	r6, #1
 80170bc:	4620      	mov	r0, r4
 80170be:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80170c0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80170c4:	b2b6      	uxth	r6, r6
 80170c6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80170ca:	47b8      	blx	r7
 80170cc:	e7ee      	b.n	80170ac <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80170ce:	4a9a      	ldr	r2, [pc, #616]	@ (8017338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80170d0:	6813      	ldr	r3, [r2, #0]
 80170d2:	4691      	mov	r9, r2
 80170d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80170d8:	2b01      	cmp	r3, #1
 80170da:	f040 80e0 	bne.w	801729e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80170de:	8829      	ldrh	r1, [r5, #0]
 80170e0:	2600      	movs	r6, #0
 80170e2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80170e6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80170ea:	33ae      	adds	r3, #174	@ 0xae
 80170ec:	428f      	cmp	r7, r1
 80170ee:	f103 0308 	add.w	r3, r3, #8
 80170f2:	dd0a      	ble.n	801710a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80170f4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80170f8:	3101      	adds	r1, #1
 80170fa:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80170fe:	4402      	add	r2, r0
 8017100:	b212      	sxth	r2, r2
 8017102:	4296      	cmp	r6, r2
 8017104:	bfb8      	it	lt
 8017106:	4616      	movlt	r6, r2
 8017108:	e7f0      	b.n	80170ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801710a:	4b8c      	ldr	r3, [pc, #560]	@ (801733c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801710c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8017338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8017110:	881b      	ldrh	r3, [r3, #0]
 8017112:	2b0f      	cmp	r3, #15
 8017114:	bf8c      	ite	hi
 8017116:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801711a:	f04f 0b01 	movls.w	fp, #1
 801711e:	2300      	movs	r3, #0
 8017120:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017124:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017128:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801712c:	4b82      	ldr	r3, [pc, #520]	@ (8017338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801712e:	4438      	add	r0, r7
 8017130:	b207      	sxth	r7, r0
 8017132:	6818      	ldr	r0, [r3, #0]
 8017134:	42b7      	cmp	r7, r6
 8017136:	6803      	ldr	r3, [r0, #0]
 8017138:	f280 8083 	bge.w	8017242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801713c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017140:	4798      	blx	r3
 8017142:	eb07 030b 	add.w	r3, r7, fp
 8017146:	4298      	cmp	r0, r3
 8017148:	da07      	bge.n	801715a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801714a:	42b0      	cmp	r0, r6
 801714c:	da05      	bge.n	801715a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801714e:	4287      	cmp	r7, r0
 8017150:	dd6c      	ble.n	801722c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017152:	2f00      	cmp	r7, #0
 8017154:	dd6a      	ble.n	801722c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017156:	4630      	mov	r0, r6
 8017158:	e004      	b.n	8017164 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801715a:	4287      	cmp	r7, r0
 801715c:	dcfb      	bgt.n	8017156 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801715e:	42b0      	cmp	r0, r6
 8017160:	bfa8      	it	ge
 8017162:	4630      	movge	r0, r6
 8017164:	4b76      	ldr	r3, [pc, #472]	@ (8017340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017166:	1bc0      	subs	r0, r0, r7
 8017168:	2200      	movs	r2, #0
 801716a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801716e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017172:	882f      	ldrh	r7, [r5, #0]
 8017174:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017178:	f8ad 3018 	strh.w	r3, [sp, #24]
 801717c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017180:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017184:	42bb      	cmp	r3, r7
 8017186:	d9cd      	bls.n	8017124 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8017188:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801718c:	ab07      	add	r3, sp, #28
 801718e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017192:	6851      	ldr	r1, [r2, #4]
 8017194:	c303      	stmia	r3!, {r0, r1}
 8017196:	a905      	add	r1, sp, #20
 8017198:	a807      	add	r0, sp, #28
 801719a:	f7ff f982 	bl	80164a2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801719e:	2800      	cmp	r0, #0
 80171a0:	d04c      	beq.n	801723c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80171a2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80171a6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80171aa:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80171ae:	4686      	mov	lr, r0
 80171b0:	4290      	cmp	r0, r2
 80171b2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80171b6:	4450      	add	r0, sl
 80171b8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80171bc:	bfb8      	it	lt
 80171be:	4696      	movlt	lr, r2
 80171c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80171c4:	4452      	add	r2, sl
 80171c6:	b280      	uxth	r0, r0
 80171c8:	4299      	cmp	r1, r3
 80171ca:	468c      	mov	ip, r1
 80171cc:	b292      	uxth	r2, r2
 80171ce:	9302      	str	r3, [sp, #8]
 80171d0:	bfb8      	it	lt
 80171d2:	469c      	movlt	ip, r3
 80171d4:	b203      	sxth	r3, r0
 80171d6:	fa0f fa82 	sxth.w	sl, r2
 80171da:	f8ad e01c 	strh.w	lr, [sp, #28]
 80171de:	f8ad c01e 	strh.w	ip, [sp, #30]
 80171e2:	4553      	cmp	r3, sl
 80171e4:	bfb8      	it	lt
 80171e6:	4602      	movlt	r2, r0
 80171e8:	9b02      	ldr	r3, [sp, #8]
 80171ea:	eba2 020e 	sub.w	r2, r2, lr
 80171ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 80171f2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80171f6:	4411      	add	r1, r2
 80171f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80171fc:	4413      	add	r3, r2
 80171fe:	b289      	uxth	r1, r1
 8017200:	b29b      	uxth	r3, r3
 8017202:	b208      	sxth	r0, r1
 8017204:	b21a      	sxth	r2, r3
 8017206:	4290      	cmp	r0, r2
 8017208:	bfb8      	it	lt
 801720a:	460b      	movlt	r3, r1
 801720c:	eba3 030c 	sub.w	r3, r3, ip
 8017210:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017214:	a807      	add	r0, sp, #28
 8017216:	f7f9 f84e 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801721a:	b920      	cbnz	r0, 8017226 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801721c:	6823      	ldr	r3, [r4, #0]
 801721e:	a907      	add	r1, sp, #28
 8017220:	4620      	mov	r0, r4
 8017222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017224:	4798      	blx	r3
 8017226:	3701      	adds	r7, #1
 8017228:	b2bf      	uxth	r7, r7
 801722a:	e7a9      	b.n	8017180 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801722c:	f8d9 0000 	ldr.w	r0, [r9]
 8017230:	2101      	movs	r1, #1
 8017232:	6803      	ldr	r3, [r0, #0]
 8017234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017238:	4798      	blx	r3
 801723a:	e773      	b.n	8017124 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801723c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017240:	e7e8      	b.n	8017214 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017244:	4798      	blx	r3
 8017246:	4b3f      	ldr	r3, [pc, #252]	@ (8017344 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017248:	781b      	ldrb	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	f43f af2b 	beq.w	80170a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017250:	2300      	movs	r3, #0
 8017252:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017256:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801725a:	882b      	ldrh	r3, [r5, #0]
 801725c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017260:	42ab      	cmp	r3, r5
 8017262:	f4bf af20 	bcs.w	80170a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017266:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801726a:	2907      	cmp	r1, #7
 801726c:	d814      	bhi.n	8017298 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801726e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017272:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8017276:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801727a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801727e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8017282:	1c4a      	adds	r2, r1, #1
 8017284:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8017288:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801728c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8017290:	f8a2 c002 	strh.w	ip, [r2, #2]
 8017294:	8097      	strh	r7, [r2, #4]
 8017296:	80d6      	strh	r6, [r2, #6]
 8017298:	3301      	adds	r3, #1
 801729a:	b29b      	uxth	r3, r3
 801729c:	e7e0      	b.n	8017260 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801729e:	2b02      	cmp	r3, #2
 80172a0:	f040 8133 	bne.w	801750a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80172a4:	4b28      	ldr	r3, [pc, #160]	@ (8017348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80172a6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80172aa:	781b      	ldrb	r3, [r3, #0]
 80172ac:	2b01      	cmp	r3, #1
 80172ae:	f000 8098 	beq.w	80173e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80172b2:	882a      	ldrh	r2, [r5, #0]
 80172b4:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80172b8:	3201      	adds	r2, #1
 80172ba:	b292      	uxth	r2, r2
 80172bc:	2900      	cmp	r1, #0
 80172be:	d0c2      	beq.n	8017246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80172c0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80172c4:	4694      	mov	ip, r2
 80172c6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80172ca:	f04f 0900 	mov.w	r9, #0
 80172ce:	441e      	add	r6, r3
 80172d0:	b236      	sxth	r6, r6
 80172d2:	fa1f f38c 	uxth.w	r3, ip
 80172d6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80172da:	4299      	cmp	r1, r3
 80172dc:	f240 80be 	bls.w	801745c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80172e0:	4427      	add	r7, r4
 80172e2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80172e6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80172ea:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80172ee:	4283      	cmp	r3, r0
 80172f0:	f340 80a0 	ble.w	8017434 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80172f4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80172f8:	46e1      	mov	r9, ip
 80172fa:	4406      	add	r6, r0
 80172fc:	b236      	sxth	r6, r6
 80172fe:	429e      	cmp	r6, r3
 8017300:	bfa8      	it	ge
 8017302:	461e      	movge	r6, r3
 8017304:	f10c 0c01 	add.w	ip, ip, #1
 8017308:	e7e3      	b.n	80172d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801730a:	d10a      	bne.n	8017322 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801730c:	4562      	cmp	r2, ip
 801730e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8017312:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8017316:	bfb8      	it	lt
 8017318:	4662      	movlt	r2, ip
 801731a:	4288      	cmp	r0, r1
 801731c:	bfb8      	it	lt
 801731e:	461f      	movlt	r7, r3
 8017320:	e086      	b.n	8017430 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017322:	428a      	cmp	r2, r1
 8017324:	bfb8      	it	lt
 8017326:	460a      	movlt	r2, r1
 8017328:	e082      	b.n	8017430 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801732a:	bf00      	nop
 801732c:	20027e00 	.word	0x20027e00
 8017330:	20027e0c 	.word	0x20027e0c
 8017334:	20000070 	.word	0x20000070
 8017338:	20027dc0 	.word	0x20027dc0
 801733c:	20027db6 	.word	0x20027db6
 8017340:	20027db4 	.word	0x20027db4
 8017344:	20027dbe 	.word	0x20027dbe
 8017348:	20027db8 	.word	0x20027db8
 801734c:	19a1      	adds	r1, r4, r6
 801734e:	ab07      	add	r3, sp, #28
 8017350:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017354:	6849      	ldr	r1, [r1, #4]
 8017356:	c303      	stmia	r3!, {r0, r1}
 8017358:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801735c:	a807      	add	r0, sp, #28
 801735e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017362:	2b13      	cmp	r3, #19
 8017364:	440b      	add	r3, r1
 8017366:	bfd8      	it	le
 8017368:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801736c:	1a9b      	subs	r3, r3, r2
 801736e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017372:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017376:	f7fe ffbf 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801737a:	a807      	add	r0, sp, #28
 801737c:	f7f8 ff9b 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017380:	bb78      	cbnz	r0, 80173e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017382:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8017386:	4426      	add	r6, r4
 8017388:	f8d9 0000 	ldr.w	r0, [r9]
 801738c:	f1bc 0f14 	cmp.w	ip, #20
 8017390:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017394:	f8d0 e000 	ldr.w	lr, [r0]
 8017398:	bfa8      	it	ge
 801739a:	f04f 0c14 	movge.w	ip, #20
 801739e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80173a2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80173a6:	fa1f fc8c 	uxth.w	ip, ip
 80173aa:	f8cd c000 	str.w	ip, [sp]
 80173ae:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80173b2:	47d8      	blx	fp
 80173b4:	4683      	mov	fp, r0
 80173b6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80173ba:	a807      	add	r0, sp, #28
 80173bc:	f7fe ff82 	bl	80162c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	4620      	mov	r0, r4
 80173c4:	a907      	add	r1, sp, #28
 80173c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80173c8:	4798      	blx	r3
 80173ca:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80173ce:	eba0 000b 	sub.w	r0, r0, fp
 80173d2:	b200      	sxth	r0, r0
 80173d4:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80173d8:	b918      	cbnz	r0, 80173e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80173da:	b2b9      	uxth	r1, r7
 80173dc:	4650      	mov	r0, sl
 80173de:	f7ff fa7b 	bl	80168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80173e2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80173e6:	f1bb 0f00 	cmp.w	fp, #0
 80173ea:	f43f af2c 	beq.w	8017246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80173ee:	882b      	ldrh	r3, [r5, #0]
 80173f0:	2700      	movs	r7, #0
 80173f2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80173f6:	3301      	adds	r3, #1
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	b299      	uxth	r1, r3
 80173fc:	00fe      	lsls	r6, r7, #3
 80173fe:	458b      	cmp	fp, r1
 8017400:	d9a4      	bls.n	801734c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8017402:	4426      	add	r6, r4
 8017404:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8017408:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801740c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017410:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8017414:	4408      	add	r0, r1
 8017416:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801741a:	4461      	add	r1, ip
 801741c:	b200      	sxth	r0, r0
 801741e:	b209      	sxth	r1, r1
 8017420:	4288      	cmp	r0, r1
 8017422:	f6bf af72 	bge.w	801730a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017426:	4584      	cmp	ip, r0
 8017428:	4662      	mov	r2, ip
 801742a:	461f      	mov	r7, r3
 801742c:	bfb8      	it	lt
 801742e:	4602      	movlt	r2, r0
 8017430:	3301      	adds	r3, #1
 8017432:	e7e2      	b.n	80173fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017434:	d10e      	bne.n	8017454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8017436:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801743a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801743e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8017442:	4473      	add	r3, lr
 8017444:	b21b      	sxth	r3, r3
 8017446:	429e      	cmp	r6, r3
 8017448:	bfa8      	it	ge
 801744a:	461e      	movge	r6, r3
 801744c:	4287      	cmp	r7, r0
 801744e:	bfb8      	it	lt
 8017450:	46e1      	movlt	r9, ip
 8017452:	e757      	b.n	8017304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017454:	4286      	cmp	r6, r0
 8017456:	bfa8      	it	ge
 8017458:	4606      	movge	r6, r0
 801745a:	e753      	b.n	8017304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801745c:	eb0a 0007 	add.w	r0, sl, r7
 8017460:	4427      	add	r7, r4
 8017462:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8017466:	f1bb 0f13 	cmp.w	fp, #19
 801746a:	bfdc      	itt	le
 801746c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8017470:	445e      	addle	r6, fp
 8017472:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017476:	bfd8      	it	le
 8017478:	b236      	sxthle	r6, r6
 801747a:	f7f8 ff1c 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801747e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017482:	2800      	cmp	r0, #0
 8017484:	f47f af1a 	bne.w	80172bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8017488:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801748c:	fa1f fb8b 	uxth.w	fp, fp
 8017490:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017494:	1ab6      	subs	r6, r6, r2
 8017496:	4829      	ldr	r0, [pc, #164]	@ (801753c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8017498:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801749c:	2e14      	cmp	r6, #20
 801749e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80174a2:	6800      	ldr	r0, [r0, #0]
 80174a4:	bfa8      	it	ge
 80174a6:	2614      	movge	r6, #20
 80174a8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80174ac:	f8ad 201e 	strh.w	r2, [sp, #30]
 80174b0:	b289      	uxth	r1, r1
 80174b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80174b6:	b2b6      	uxth	r6, r6
 80174b8:	f8d0 c000 	ldr.w	ip, [r0]
 80174bc:	b292      	uxth	r2, r2
 80174be:	455e      	cmp	r6, fp
 80174c0:	bf94      	ite	ls
 80174c2:	9600      	strls	r6, [sp, #0]
 80174c4:	f8cd b000 	strhi.w	fp, [sp]
 80174c8:	b29b      	uxth	r3, r3
 80174ca:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80174ce:	47b0      	blx	r6
 80174d0:	6823      	ldr	r3, [r4, #0]
 80174d2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80174d6:	a907      	add	r1, sp, #28
 80174d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174da:	4620      	mov	r0, r4
 80174dc:	4798      	blx	r3
 80174de:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80174e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80174e6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80174ea:	1a5b      	subs	r3, r3, r1
 80174ec:	440a      	add	r2, r1
 80174ee:	b21b      	sxth	r3, r3
 80174f0:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80174f4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f47f aeda 	bne.w	80172b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80174fe:	fa1f f189 	uxth.w	r1, r9
 8017502:	4650      	mov	r0, sl
 8017504:	f7ff f9e8 	bl	80168d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017508:	e6d3      	b.n	80172b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801750a:	882e      	ldrh	r6, [r5, #0]
 801750c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017510:	42b3      	cmp	r3, r6
 8017512:	f67f ae98 	bls.w	8017246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017516:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801751a:	ab07      	add	r3, sp, #28
 801751c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017520:	6851      	ldr	r1, [r2, #4]
 8017522:	c303      	stmia	r3!, {r0, r1}
 8017524:	a807      	add	r0, sp, #28
 8017526:	f7f8 fec6 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801752a:	b920      	cbnz	r0, 8017536 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801752c:	6823      	ldr	r3, [r4, #0]
 801752e:	a907      	add	r1, sp, #28
 8017530:	4620      	mov	r0, r4
 8017532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017534:	4798      	blx	r3
 8017536:	3601      	adds	r6, #1
 8017538:	b2b6      	uxth	r6, r6
 801753a:	e7e7      	b.n	801750c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801753c:	20027dc0 	.word	0x20027dc0

08017540 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017540:	4b03      	ldr	r3, [pc, #12]	@ (8017550 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017542:	2200      	movs	r2, #0
 8017544:	801a      	strh	r2, [r3, #0]
 8017546:	805a      	strh	r2, [r3, #2]
 8017548:	809a      	strh	r2, [r3, #4]
 801754a:	80da      	strh	r2, [r3, #6]
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	20027e0c 	.word	0x20027e0c

08017554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017558:	b09d      	sub	sp, #116	@ 0x74
 801755a:	4606      	mov	r6, r0
 801755c:	4614      	mov	r4, r2
 801755e:	468a      	mov	sl, r1
 8017560:	a803      	add	r0, sp, #12
 8017562:	461d      	mov	r5, r3
 8017564:	f000 feca 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 8017568:	6833      	ldr	r3, [r6, #0]
 801756a:	4630      	mov	r0, r6
 801756c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8017570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017572:	4798      	blx	r3
 8017574:	6833      	ldr	r3, [r6, #0]
 8017576:	4607      	mov	r7, r0
 8017578:	4630      	mov	r0, r6
 801757a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801757c:	4798      	blx	r3
 801757e:	462a      	mov	r2, r5
 8017580:	2500      	movs	r5, #0
 8017582:	4621      	mov	r1, r4
 8017584:	9000      	str	r0, [sp, #0]
 8017586:	463b      	mov	r3, r7
 8017588:	462c      	mov	r4, r5
 801758a:	46a9      	mov	r9, r5
 801758c:	46a8      	mov	r8, r5
 801758e:	a803      	add	r0, sp, #12
 8017590:	f000 ff07 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017594:	2300      	movs	r3, #0
 8017596:	9302      	str	r3, [sp, #8]
 8017598:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801759c:	429c      	cmp	r4, r3
 801759e:	d002      	beq.n	80175a6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80175a0:	455c      	cmp	r4, fp
 80175a2:	bf18      	it	ne
 80175a4:	4625      	movne	r5, r4
 80175a6:	ab02      	add	r3, sp, #8
 80175a8:	4632      	mov	r2, r6
 80175aa:	4651      	mov	r1, sl
 80175ac:	a803      	add	r0, sp, #12
 80175ae:	f001 fa1b 	bl	80189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175b2:	4604      	mov	r4, r0
 80175b4:	b108      	cbz	r0, 80175ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80175b6:	280a      	cmp	r0, #10
 80175b8:	d10a      	bne.n	80175d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80175ba:	45c1      	cmp	r9, r8
 80175bc:	bf38      	it	cc
 80175be:	46c1      	movcc	r9, r8
 80175c0:	f04f 0800 	mov.w	r8, #0
 80175c4:	2c00      	cmp	r4, #0
 80175c6:	d1e5      	bne.n	8017594 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80175c8:	4648      	mov	r0, r9
 80175ca:	b01d      	add	sp, #116	@ 0x74
 80175cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175d0:	9a02      	ldr	r2, [sp, #8]
 80175d2:	2a00      	cmp	r2, #0
 80175d4:	d0de      	beq.n	8017594 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80175d6:	7b57      	ldrb	r7, [r2, #13]
 80175d8:	4629      	mov	r1, r5
 80175da:	6833      	ldr	r3, [r6, #0]
 80175dc:	007f      	lsls	r7, r7, #1
 80175de:	8894      	ldrh	r4, [r2, #4]
 80175e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175e2:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80175e6:	7a97      	ldrb	r7, [r2, #10]
 80175e8:	4307      	orrs	r7, r0
 80175ea:	4630      	mov	r0, r6
 80175ec:	4798      	blx	r3
 80175ee:	4438      	add	r0, r7
 80175f0:	4480      	add	r8, r0
 80175f2:	fa1f f888 	uxth.w	r8, r8
 80175f6:	e7e5      	b.n	80175c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080175f8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80175f8:	b508      	push	{r3, lr}
 80175fa:	6803      	ldr	r3, [r0, #0]
 80175fc:	68db      	ldr	r3, [r3, #12]
 80175fe:	4798      	blx	r3
 8017600:	b128      	cbz	r0, 801760e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017602:	7b43      	ldrb	r3, [r0, #13]
 8017604:	7a80      	ldrb	r0, [r0, #10]
 8017606:	005b      	lsls	r3, r3, #1
 8017608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801760c:	4318      	orrs	r0, r3
 801760e:	bd08      	pop	{r3, pc}

08017610 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017610:	b40e      	push	{r1, r2, r3}
 8017612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017614:	b09e      	sub	sp, #120	@ 0x78
 8017616:	4605      	mov	r5, r0
 8017618:	ab23      	add	r3, sp, #140	@ 0x8c
 801761a:	a805      	add	r0, sp, #20
 801761c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017620:	9303      	str	r3, [sp, #12]
 8017622:	f000 fe6b 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 8017626:	682b      	ldr	r3, [r5, #0]
 8017628:	4628      	mov	r0, r5
 801762a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801762c:	4798      	blx	r3
 801762e:	682b      	ldr	r3, [r5, #0]
 8017630:	4606      	mov	r6, r0
 8017632:	4628      	mov	r0, r5
 8017634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017636:	4798      	blx	r3
 8017638:	4633      	mov	r3, r6
 801763a:	4621      	mov	r1, r4
 801763c:	ae1e      	add	r6, sp, #120	@ 0x78
 801763e:	2400      	movs	r4, #0
 8017640:	9000      	str	r0, [sp, #0]
 8017642:	9a03      	ldr	r2, [sp, #12]
 8017644:	a805      	add	r0, sp, #20
 8017646:	f000 feac 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801764a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801764e:	462a      	mov	r2, r5
 8017650:	4633      	mov	r3, r6
 8017652:	4621      	mov	r1, r4
 8017654:	a805      	add	r0, sp, #20
 8017656:	f001 f9c7 	bl	80189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801765a:	b300      	cbz	r0, 801769e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801765c:	280a      	cmp	r0, #10
 801765e:	d01a      	beq.n	8017696 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017660:	9f04      	ldr	r7, [sp, #16]
 8017662:	b1c7      	cbz	r7, 8017696 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017664:	7b78      	ldrb	r0, [r7, #13]
 8017666:	7a3b      	ldrb	r3, [r7, #8]
 8017668:	00c1      	lsls	r1, r0, #3
 801766a:	88ea      	ldrh	r2, [r5, #6]
 801766c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017670:	4319      	orrs	r1, r3
 8017672:	0643      	lsls	r3, r0, #25
 8017674:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017678:	bf48      	it	mi
 801767a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801767e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8017682:	bf48      	it	mi
 8017684:	b219      	sxthmi	r1, r3
 8017686:	79fb      	ldrb	r3, [r7, #7]
 8017688:	4303      	orrs	r3, r0
 801768a:	4413      	add	r3, r2
 801768c:	1a5b      	subs	r3, r3, r1
 801768e:	b21b      	sxth	r3, r3
 8017690:	429c      	cmp	r4, r3
 8017692:	bfb8      	it	lt
 8017694:	461c      	movlt	r4, r3
 8017696:	4633      	mov	r3, r6
 8017698:	462a      	mov	r2, r5
 801769a:	2100      	movs	r1, #0
 801769c:	e7da      	b.n	8017654 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801769e:	b2a0      	uxth	r0, r4
 80176a0:	b01e      	add	sp, #120	@ 0x78
 80176a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80176a6:	b003      	add	sp, #12
 80176a8:	4770      	bx	lr

080176aa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80176aa:	7a43      	ldrb	r3, [r0, #9]
 80176ac:	8880      	ldrh	r0, [r0, #4]
 80176ae:	4418      	add	r0, r3
 80176b0:	b280      	uxth	r0, r0
 80176b2:	4770      	bx	lr

080176b4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80176b4:	6803      	ldr	r3, [r0, #0]
 80176b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80176b8:	4718      	bx	r3

080176ba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80176ba:	b40e      	push	{r1, r2, r3}
 80176bc:	b570      	push	{r4, r5, r6, lr}
 80176be:	b09d      	sub	sp, #116	@ 0x74
 80176c0:	4604      	mov	r4, r0
 80176c2:	ab21      	add	r3, sp, #132	@ 0x84
 80176c4:	a803      	add	r0, sp, #12
 80176c6:	f853 5b04 	ldr.w	r5, [r3], #4
 80176ca:	9302      	str	r3, [sp, #8]
 80176cc:	f000 fe16 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 80176d0:	6823      	ldr	r3, [r4, #0]
 80176d2:	4620      	mov	r0, r4
 80176d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176d6:	4798      	blx	r3
 80176d8:	6823      	ldr	r3, [r4, #0]
 80176da:	4606      	mov	r6, r0
 80176dc:	4620      	mov	r0, r4
 80176de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80176e0:	2401      	movs	r4, #1
 80176e2:	4798      	blx	r3
 80176e4:	4633      	mov	r3, r6
 80176e6:	9000      	str	r0, [sp, #0]
 80176e8:	4629      	mov	r1, r5
 80176ea:	9a02      	ldr	r2, [sp, #8]
 80176ec:	a803      	add	r0, sp, #12
 80176ee:	f000 fe58 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80176f2:	a803      	add	r0, sp, #12
 80176f4:	f001 fa44 	bl	8018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80176f8:	b2a3      	uxth	r3, r4
 80176fa:	b138      	cbz	r0, 801770c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80176fc:	280a      	cmp	r0, #10
 80176fe:	a803      	add	r0, sp, #12
 8017700:	bf04      	itt	eq
 8017702:	3301      	addeq	r3, #1
 8017704:	b21c      	sxtheq	r4, r3
 8017706:	f001 fa3b 	bl	8018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801770a:	e7f5      	b.n	80176f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801770c:	4618      	mov	r0, r3
 801770e:	b01d      	add	sp, #116	@ 0x74
 8017710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017714:	b003      	add	sp, #12
 8017716:	4770      	bx	lr

08017718 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017718:	b40e      	push	{r1, r2, r3}
 801771a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801771c:	b09e      	sub	sp, #120	@ 0x78
 801771e:	4604      	mov	r4, r0
 8017720:	ab23      	add	r3, sp, #140	@ 0x8c
 8017722:	a805      	add	r0, sp, #20
 8017724:	f853 5b04 	ldr.w	r5, [r3], #4
 8017728:	9303      	str	r3, [sp, #12]
 801772a:	f000 fde7 	bl	80182fc <_ZN8touchgfx12TextProviderC1Ev>
 801772e:	6823      	ldr	r3, [r4, #0]
 8017730:	4620      	mov	r0, r4
 8017732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017734:	4798      	blx	r3
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	4606      	mov	r6, r0
 801773a:	4620      	mov	r0, r4
 801773c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801773e:	4798      	blx	r3
 8017740:	4633      	mov	r3, r6
 8017742:	4629      	mov	r1, r5
 8017744:	9000      	str	r0, [sp, #0]
 8017746:	9a03      	ldr	r2, [sp, #12]
 8017748:	a805      	add	r0, sp, #20
 801774a:	f000 fe2a 	bl	80183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801774e:	ad1e      	add	r5, sp, #120	@ 0x78
 8017750:	2100      	movs	r1, #0
 8017752:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8017756:	4622      	mov	r2, r4
 8017758:	a805      	add	r0, sp, #20
 801775a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801775e:	462b      	mov	r3, r5
 8017760:	f001 f942 	bl	80189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017764:	b1d8      	cbz	r0, 801779e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017766:	280a      	cmp	r0, #10
 8017768:	d012      	beq.n	8017790 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801776a:	9804      	ldr	r0, [sp, #16]
 801776c:	b180      	cbz	r0, 8017790 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801776e:	7b47      	ldrb	r7, [r0, #13]
 8017770:	88e2      	ldrh	r2, [r4, #6]
 8017772:	00fb      	lsls	r3, r7, #3
 8017774:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017778:	7a03      	ldrb	r3, [r0, #8]
 801777a:	430b      	orrs	r3, r1
 801777c:	0679      	lsls	r1, r7, #25
 801777e:	bf44      	itt	mi
 8017780:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017784:	b21b      	sxthmi	r3, r3
 8017786:	1ad3      	subs	r3, r2, r3
 8017788:	b21b      	sxth	r3, r3
 801778a:	429e      	cmp	r6, r3
 801778c:	bfa8      	it	ge
 801778e:	461e      	movge	r6, r3
 8017790:	462b      	mov	r3, r5
 8017792:	4622      	mov	r2, r4
 8017794:	2100      	movs	r1, #0
 8017796:	a805      	add	r0, sp, #20
 8017798:	f001 f926 	bl	80189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801779c:	e7e2      	b.n	8017764 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801779e:	4630      	mov	r0, r6
 80177a0:	b01e      	add	sp, #120	@ 0x78
 80177a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80177a6:	b003      	add	sp, #12
 80177a8:	4770      	bx	lr

080177aa <_ZNK8touchgfx8Drawable10invalidateEv>:
 80177aa:	b513      	push	{r0, r1, r4, lr}
 80177ac:	6803      	ldr	r3, [r0, #0]
 80177ae:	2400      	movs	r4, #0
 80177b0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80177b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80177b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80177bc:	4669      	mov	r1, sp
 80177be:	691b      	ldr	r3, [r3, #16]
 80177c0:	9400      	str	r4, [sp, #0]
 80177c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80177c6:	4798      	blx	r3
 80177c8:	b002      	add	sp, #8
 80177ca:	bd10      	pop	{r4, pc}

080177cc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80177cc:	b538      	push	{r3, r4, r5, lr}
 80177ce:	680b      	ldr	r3, [r1, #0]
 80177d0:	460c      	mov	r4, r1
 80177d2:	4605      	mov	r5, r0
 80177d4:	68db      	ldr	r3, [r3, #12]
 80177d6:	4798      	blx	r3
 80177d8:	6823      	ldr	r3, [r4, #0]
 80177da:	4620      	mov	r0, r4
 80177dc:	4629      	mov	r1, r5
 80177de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177e0:	4798      	blx	r3
 80177e2:	4628      	mov	r0, r5
 80177e4:	bd38      	pop	{r3, r4, r5, pc}

080177e6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80177e6:	b410      	push	{r4}
 80177e8:	880a      	ldrh	r2, [r1, #0]
 80177ea:	8884      	ldrh	r4, [r0, #4]
 80177ec:	4422      	add	r2, r4
 80177ee:	800a      	strh	r2, [r1, #0]
 80177f0:	884a      	ldrh	r2, [r1, #2]
 80177f2:	88c4      	ldrh	r4, [r0, #6]
 80177f4:	4422      	add	r2, r4
 80177f6:	804a      	strh	r2, [r1, #2]
 80177f8:	6940      	ldr	r0, [r0, #20]
 80177fa:	b120      	cbz	r0, 8017806 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80177fc:	6803      	ldr	r3, [r0, #0]
 80177fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017804:	4718      	bx	r3
 8017806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801780a:	4770      	bx	lr

0801780c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801780c:	b570      	push	{r4, r5, r6, lr}
 801780e:	8882      	ldrh	r2, [r0, #4]
 8017810:	460c      	mov	r4, r1
 8017812:	880b      	ldrh	r3, [r1, #0]
 8017814:	4605      	mov	r5, r0
 8017816:	4413      	add	r3, r2
 8017818:	800b      	strh	r3, [r1, #0]
 801781a:	884b      	ldrh	r3, [r1, #2]
 801781c:	88c2      	ldrh	r2, [r0, #6]
 801781e:	4413      	add	r3, r2
 8017820:	804b      	strh	r3, [r1, #2]
 8017822:	1d01      	adds	r1, r0, #4
 8017824:	4620      	mov	r0, r4
 8017826:	f7f8 fd03 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801782a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801782e:	2b00      	cmp	r3, #0
 8017830:	dd0b      	ble.n	801784a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017832:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017836:	2b00      	cmp	r3, #0
 8017838:	dd07      	ble.n	801784a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801783a:	6968      	ldr	r0, [r5, #20]
 801783c:	b128      	cbz	r0, 801784a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801783e:	6803      	ldr	r3, [r0, #0]
 8017840:	4621      	mov	r1, r4
 8017842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017848:	4718      	bx	r3
 801784a:	bd70      	pop	{r4, r5, r6, pc}

0801784c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801784c:	b570      	push	{r4, r5, r6, lr}
 801784e:	8882      	ldrh	r2, [r0, #4]
 8017850:	460c      	mov	r4, r1
 8017852:	880b      	ldrh	r3, [r1, #0]
 8017854:	4605      	mov	r5, r0
 8017856:	4413      	add	r3, r2
 8017858:	800b      	strh	r3, [r1, #0]
 801785a:	884b      	ldrh	r3, [r1, #2]
 801785c:	88c2      	ldrh	r2, [r0, #6]
 801785e:	4413      	add	r3, r2
 8017860:	804b      	strh	r3, [r1, #2]
 8017862:	1d01      	adds	r1, r0, #4
 8017864:	4620      	mov	r0, r4
 8017866:	f7f8 fce3 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801786a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801786e:	2b00      	cmp	r3, #0
 8017870:	dd19      	ble.n	80178a6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017872:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017876:	2b00      	cmp	r3, #0
 8017878:	dd15      	ble.n	80178a6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801787a:	6968      	ldr	r0, [r5, #20]
 801787c:	b128      	cbz	r0, 801788a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801787e:	6803      	ldr	r3, [r0, #0]
 8017880:	4621      	mov	r1, r4
 8017882:	691b      	ldr	r3, [r3, #16]
 8017884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017888:	4718      	bx	r3
 801788a:	4b07      	ldr	r3, [pc, #28]	@ (80178a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	3304      	adds	r3, #4
 8017890:	429d      	cmp	r5, r3
 8017892:	d108      	bne.n	80178a6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017894:	f7fe fe9e 	bl	80165d4 <_ZN8touchgfx11Application11getInstanceEv>
 8017898:	6803      	ldr	r3, [r0, #0]
 801789a:	6821      	ldr	r1, [r4, #0]
 801789c:	6862      	ldr	r2, [r4, #4]
 801789e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a4:	4718      	bx	r3
 80178a6:	bd70      	pop	{r4, r5, r6, pc}
 80178a8:	20027e04 	.word	0x20027e04

080178ac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80178ac:	b570      	push	{r4, r5, r6, lr}
 80178ae:	4604      	mov	r4, r0
 80178b0:	4616      	mov	r6, r2
 80178b2:	460d      	mov	r5, r1
 80178b4:	b901      	cbnz	r1, 80178b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80178b6:	b192      	cbz	r2, 80178de <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80178b8:	6823      	ldr	r3, [r4, #0]
 80178ba:	4620      	mov	r0, r4
 80178bc:	699b      	ldr	r3, [r3, #24]
 80178be:	4798      	blx	r3
 80178c0:	88e2      	ldrh	r2, [r4, #6]
 80178c2:	88a1      	ldrh	r1, [r4, #4]
 80178c4:	4620      	mov	r0, r4
 80178c6:	4432      	add	r2, r6
 80178c8:	4429      	add	r1, r5
 80178ca:	b212      	sxth	r2, r2
 80178cc:	b209      	sxth	r1, r1
 80178ce:	f7ee ff7c 	bl	80067ca <_ZN8touchgfx8Drawable5setXYEss>
 80178d2:	6823      	ldr	r3, [r4, #0]
 80178d4:	4620      	mov	r0, r4
 80178d6:	699b      	ldr	r3, [r3, #24]
 80178d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178dc:	4718      	bx	r3
 80178de:	bd70      	pop	{r4, r5, r6, pc}

080178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80178e0:	b510      	push	{r4, lr}
 80178e2:	2300      	movs	r3, #0
 80178e4:	4604      	mov	r4, r0
 80178e6:	4608      	mov	r0, r1
 80178e8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80178ec:	8023      	strh	r3, [r4, #0]
 80178ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80178f2:	8063      	strh	r3, [r4, #2]
 80178f4:	6803      	ldr	r3, [r0, #0]
 80178f6:	80a1      	strh	r1, [r4, #4]
 80178f8:	4621      	mov	r1, r4
 80178fa:	80e2      	strh	r2, [r4, #6]
 80178fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80178fe:	4798      	blx	r3
 8017900:	4620      	mov	r0, r4
 8017902:	bd10      	pop	{r4, pc}

08017904 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017904:	b530      	push	{r4, r5, lr}
 8017906:	8083      	strh	r3, [r0, #4]
 8017908:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801790c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017910:	80c3      	strh	r3, [r0, #6]
 8017912:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017916:	6141      	str	r1, [r0, #20]
 8017918:	7203      	strb	r3, [r0, #8]
 801791a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801791e:	8302      	strh	r2, [r0, #24]
 8017920:	7243      	strb	r3, [r0, #9]
 8017922:	7a83      	ldrb	r3, [r0, #10]
 8017924:	f365 0306 	bfi	r3, r5, #0, #7
 8017928:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801792c:	f365 13c7 	bfi	r3, r5, #7, #1
 8017930:	7283      	strb	r3, [r0, #10]
 8017932:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017936:	72c3      	strb	r3, [r0, #11]
 8017938:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801793c:	7303      	strb	r3, [r0, #12]
 801793e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017942:	81c3      	strh	r3, [r0, #14]
 8017944:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017948:	8203      	strh	r3, [r0, #16]
 801794a:	4b01      	ldr	r3, [pc, #4]	@ (8017950 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801794c:	6003      	str	r3, [r0, #0]
 801794e:	bd30      	pop	{r4, r5, pc}
 8017950:	0802e18c 	.word	0x0802e18c

08017954 <_ZNK8touchgfx9ConstFont4findEt>:
 8017954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017956:	6944      	ldr	r4, [r0, #20]
 8017958:	b3bc      	cbz	r4, 80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801795a:	88a3      	ldrh	r3, [r4, #4]
 801795c:	8b02      	ldrh	r2, [r0, #24]
 801795e:	1acb      	subs	r3, r1, r3
 8017960:	f102 32ff 	add.w	r2, r2, #4294967295
 8017964:	d431      	bmi.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017966:	4293      	cmp	r3, r2
 8017968:	dd0c      	ble.n	8017984 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801796a:	230e      	movs	r3, #14
 801796c:	fb03 4302 	mla	r3, r3, r2, r4
 8017970:	889b      	ldrh	r3, [r3, #4]
 8017972:	1a5b      	subs	r3, r3, r1
 8017974:	1ad3      	subs	r3, r2, r3
 8017976:	429a      	cmp	r2, r3
 8017978:	db27      	blt.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801797a:	2b00      	cmp	r3, #0
 801797c:	bfbc      	itt	lt
 801797e:	2302      	movlt	r3, #2
 8017980:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017984:	2500      	movs	r5, #0
 8017986:	260e      	movs	r6, #14
 8017988:	4295      	cmp	r5, r2
 801798a:	dc1e      	bgt.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801798c:	fb06 4003 	mla	r0, r6, r3, r4
 8017990:	8887      	ldrh	r7, [r0, #4]
 8017992:	42b9      	cmp	r1, r7
 8017994:	d01a      	beq.n	80179cc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017996:	d20d      	bcs.n	80179b4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017998:	1e5a      	subs	r2, r3, #1
 801799a:	4295      	cmp	r5, r2
 801799c:	dc15      	bgt.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801799e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80179a2:	1a5b      	subs	r3, r3, r1
 80179a4:	1ad3      	subs	r3, r2, r3
 80179a6:	429a      	cmp	r2, r3
 80179a8:	db0f      	blt.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80179aa:	429d      	cmp	r5, r3
 80179ac:	ddec      	ble.n	8017988 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80179ae:	1953      	adds	r3, r2, r5
 80179b0:	105b      	asrs	r3, r3, #1
 80179b2:	e7e9      	b.n	8017988 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80179b4:	1c5d      	adds	r5, r3, #1
 80179b6:	42aa      	cmp	r2, r5
 80179b8:	db07      	blt.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80179ba:	8a43      	ldrh	r3, [r0, #18]
 80179bc:	1acb      	subs	r3, r1, r3
 80179be:	442b      	add	r3, r5
 80179c0:	429d      	cmp	r5, r3
 80179c2:	dc02      	bgt.n	80179ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80179c4:	429a      	cmp	r2, r3
 80179c6:	dadf      	bge.n	8017988 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80179c8:	e7f1      	b.n	80179ae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80179ca:	2000      	movs	r0, #0
 80179cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080179ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80179ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179d0:	4604      	mov	r4, r0
 80179d2:	4617      	mov	r7, r2
 80179d4:	461e      	mov	r6, r3
 80179d6:	b911      	cbnz	r1, 80179de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80179d8:	2500      	movs	r5, #0
 80179da:	4628      	mov	r0, r5
 80179dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179de:	290a      	cmp	r1, #10
 80179e0:	d0fa      	beq.n	80179d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80179e2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80179e6:	4291      	cmp	r1, r2
 80179e8:	d0f6      	beq.n	80179d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80179ea:	f242 020b 	movw	r2, #8203	@ 0x200b
 80179ee:	4291      	cmp	r1, r2
 80179f0:	d0f2      	beq.n	80179d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80179f2:	f7ff ffaf 	bl	8017954 <_ZNK8touchgfx9ConstFont4findEt>
 80179f6:	4605      	mov	r5, r0
 80179f8:	b950      	cbnz	r0, 8017a10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80179fa:	6823      	ldr	r3, [r4, #0]
 80179fc:	4620      	mov	r0, r4
 80179fe:	691b      	ldr	r3, [r3, #16]
 8017a00:	4798      	blx	r3
 8017a02:	4601      	mov	r1, r0
 8017a04:	4620      	mov	r0, r4
 8017a06:	f7ff ffa5 	bl	8017954 <_ZNK8touchgfx9ConstFont4findEt>
 8017a0a:	4605      	mov	r5, r0
 8017a0c:	2800      	cmp	r0, #0
 8017a0e:	d0e3      	beq.n	80179d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017a10:	6823      	ldr	r3, [r4, #0]
 8017a12:	4629      	mov	r1, r5
 8017a14:	4620      	mov	r0, r4
 8017a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017a18:	4798      	blx	r3
 8017a1a:	6038      	str	r0, [r7, #0]
 8017a1c:	6823      	ldr	r3, [r4, #0]
 8017a1e:	4620      	mov	r0, r4
 8017a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a22:	4798      	blx	r3
 8017a24:	7030      	strb	r0, [r6, #0]
 8017a26:	e7d8      	b.n	80179da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017a28 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8017a28:	b538      	push	{r3, r4, r5, lr}
 8017a2a:	4605      	mov	r5, r0
 8017a2c:	f002 fb84 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017a30:	4604      	mov	r4, r0
 8017a32:	4628      	mov	r0, r5
 8017a34:	f002 fac4 	bl	8019fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	bf14      	ite	ne
 8017a3c:	2002      	movne	r0, #2
 8017a3e:	2000      	moveq	r0, #0
 8017a40:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8017a44:	b280      	uxth	r0, r0
 8017a46:	bd38      	pop	{r3, r4, r5, pc}

08017a48 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8017a48:	b538      	push	{r3, r4, r5, lr}
 8017a4a:	4605      	mov	r5, r0
 8017a4c:	f002 fb74 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017a50:	4604      	mov	r4, r0
 8017a52:	4628      	mov	r0, r5
 8017a54:	f002 fab4 	bl	8019fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	bf14      	ite	ne
 8017a5c:	2002      	movne	r0, #2
 8017a5e:	2000      	moveq	r0, #0
 8017a60:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8017a64:	f040 0001 	orr.w	r0, r0, #1
 8017a68:	b280      	uxth	r0, r0
 8017a6a:	bd38      	pop	{r3, r4, r5, pc}

08017a6c <_ZN8touchgfx4clzuEm>:
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	b1c8      	cbz	r0, 8017aa4 <_ZN8touchgfx4clzuEm+0x38>
 8017a70:	0c02      	lsrs	r2, r0, #16
 8017a72:	0412      	lsls	r2, r2, #16
 8017a74:	b9a2      	cbnz	r2, 8017aa0 <_ZN8touchgfx4clzuEm+0x34>
 8017a76:	0403      	lsls	r3, r0, #16
 8017a78:	2010      	movs	r0, #16
 8017a7a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8017a7e:	bf04      	itt	eq
 8017a80:	021b      	lsleq	r3, r3, #8
 8017a82:	3008      	addeq	r0, #8
 8017a84:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8017a88:	bf04      	itt	eq
 8017a8a:	011b      	lsleq	r3, r3, #4
 8017a8c:	3004      	addeq	r0, #4
 8017a8e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8017a92:	bf04      	itt	eq
 8017a94:	009b      	lsleq	r3, r3, #2
 8017a96:	3002      	addeq	r0, #2
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	db04      	blt.n	8017aa6 <_ZN8touchgfx4clzuEm+0x3a>
 8017a9c:	3001      	adds	r0, #1
 8017a9e:	4770      	bx	lr
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	e7ea      	b.n	8017a7a <_ZN8touchgfx4clzuEm+0xe>
 8017aa4:	2020      	movs	r0, #32
 8017aa6:	4770      	bx	lr

08017aa8 <_ZN8touchgfx7muldivuEmmmRm>:
 8017aa8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017aac:	460f      	mov	r7, r1
 8017aae:	4615      	mov	r5, r2
 8017ab0:	461e      	mov	r6, r3
 8017ab2:	4601      	mov	r1, r0
 8017ab4:	b100      	cbz	r0, 8017ab8 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 8017ab6:	b927      	cbnz	r7, 8017ac2 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8017ab8:	2000      	movs	r0, #0
 8017aba:	6030      	str	r0, [r6, #0]
 8017abc:	b002      	add	sp, #8
 8017abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac2:	f7ff ffd3 	bl	8017a6c <_ZN8touchgfx4clzuEm>
 8017ac6:	b980      	cbnz	r0, 8017aea <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8017ac8:	4638      	mov	r0, r7
 8017aca:	f7ff ffcf 	bl	8017a6c <_ZN8touchgfx4clzuEm>
 8017ace:	2800      	cmp	r0, #0
 8017ad0:	dd05      	ble.n	8017ade <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8017ad2:	4633      	mov	r3, r6
 8017ad4:	462a      	mov	r2, r5
 8017ad6:	4638      	mov	r0, r7
 8017ad8:	f7ff ffe6 	bl	8017aa8 <_ZN8touchgfx7muldivuEmmmRm>
 8017adc:	e7ee      	b.n	8017abc <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8017ade:	f04f 33ff 	mov.w	r3, #4294967295
 8017ae2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017ae6:	6033      	str	r3, [r6, #0]
 8017ae8:	e7e8      	b.n	8017abc <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8017aea:	fa37 f800 	lsrs.w	r8, r7, r0
 8017aee:	fb07 f301 	mul.w	r3, r7, r1
 8017af2:	d105      	bne.n	8017b00 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8017af4:	fbb3 f0f5 	udiv	r0, r3, r5
 8017af8:	fb05 3510 	mls	r5, r5, r0, r3
 8017afc:	6035      	str	r5, [r6, #0]
 8017afe:	e7dd      	b.n	8017abc <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8017b00:	2301      	movs	r3, #1
 8017b02:	fa01 fa00 	lsl.w	sl, r1, r0
 8017b06:	462a      	mov	r2, r5
 8017b08:	fa03 f000 	lsl.w	r0, r3, r0
 8017b0c:	4633      	mov	r3, r6
 8017b0e:	fbba f9f5 	udiv	r9, sl, r5
 8017b12:	3801      	subs	r0, #1
 8017b14:	fb08 f409 	mul.w	r4, r8, r9
 8017b18:	4038      	ands	r0, r7
 8017b1a:	f7ff ffc5 	bl	8017aa8 <_ZN8touchgfx7muldivuEmmmRm>
 8017b1e:	462a      	mov	r2, r5
 8017b20:	4607      	mov	r7, r0
 8017b22:	ab01      	add	r3, sp, #4
 8017b24:	fb05 a119 	mls	r1, r5, r9, sl
 8017b28:	4640      	mov	r0, r8
 8017b2a:	f7ff ffbd 	bl	8017aa8 <_ZN8touchgfx7muldivuEmmmRm>
 8017b2e:	9b01      	ldr	r3, [sp, #4]
 8017b30:	6832      	ldr	r2, [r6, #0]
 8017b32:	441a      	add	r2, r3
 8017b34:	fbb2 f3f5 	udiv	r3, r2, r5
 8017b38:	441c      	add	r4, r3
 8017b3a:	fb05 2513 	mls	r5, r5, r3, r2
 8017b3e:	443c      	add	r4, r7
 8017b40:	4420      	add	r0, r4
 8017b42:	e7db      	b.n	8017afc <_ZN8touchgfx7muldivuEmmmRm+0x54>

08017b44 <_ZN8touchgfx6muldivElllRl>:
 8017b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b46:	2800      	cmp	r0, #0
 8017b48:	461e      	mov	r6, r3
 8017b4a:	bfba      	itte	lt
 8017b4c:	4240      	neglt	r0, r0
 8017b4e:	f04f 34ff 	movlt.w	r4, #4294967295
 8017b52:	2401      	movge	r4, #1
 8017b54:	2900      	cmp	r1, #0
 8017b56:	bfbc      	itt	lt
 8017b58:	4249      	neglt	r1, r1
 8017b5a:	4264      	neglt	r4, r4
 8017b5c:	2a00      	cmp	r2, #0
 8017b5e:	bfb6      	itet	lt
 8017b60:	4265      	neglt	r5, r4
 8017b62:	4625      	movge	r5, r4
 8017b64:	4252      	neglt	r2, r2
 8017b66:	4288      	cmp	r0, r1
 8017b68:	bfc2      	ittt	gt
 8017b6a:	4603      	movgt	r3, r0
 8017b6c:	4608      	movgt	r0, r1
 8017b6e:	4619      	movgt	r1, r3
 8017b70:	ab01      	add	r3, sp, #4
 8017b72:	f7ff ff99 	bl	8017aa8 <_ZN8touchgfx7muldivuEmmmRm>
 8017b76:	9b01      	ldr	r3, [sp, #4]
 8017b78:	4368      	muls	r0, r5
 8017b7a:	435c      	muls	r4, r3
 8017b7c:	6034      	str	r4, [r6, #0]
 8017b7e:	b002      	add	sp, #8
 8017b80:	bd70      	pop	{r4, r5, r6, pc}

08017b82 <_ZN8touchgfx6muldivElll>:
 8017b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b84:	4606      	mov	r6, r0
 8017b86:	ab01      	add	r3, sp, #4
 8017b88:	460d      	mov	r5, r1
 8017b8a:	4614      	mov	r4, r2
 8017b8c:	f7ff ffda 	bl	8017b44 <_ZN8touchgfx6muldivElllRl>
 8017b90:	2e00      	cmp	r6, #0
 8017b92:	db20      	blt.n	8017bd6 <_ZN8touchgfx6muldivElll+0x54>
 8017b94:	bf14      	ite	ne
 8017b96:	2301      	movne	r3, #1
 8017b98:	2300      	moveq	r3, #0
 8017b9a:	2d00      	cmp	r5, #0
 8017b9c:	db1e      	blt.n	8017bdc <_ZN8touchgfx6muldivElll+0x5a>
 8017b9e:	bf14      	ite	ne
 8017ba0:	2201      	movne	r2, #1
 8017ba2:	2200      	moveq	r2, #0
 8017ba4:	2c00      	cmp	r4, #0
 8017ba6:	fb03 f202 	mul.w	r2, r3, r2
 8017baa:	db1a      	blt.n	8017be2 <_ZN8touchgfx6muldivElll+0x60>
 8017bac:	bf14      	ite	ne
 8017bae:	2301      	movne	r3, #1
 8017bb0:	2300      	moveq	r3, #0
 8017bb2:	4353      	muls	r3, r2
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	d117      	bne.n	8017be8 <_ZN8touchgfx6muldivElll+0x66>
 8017bb8:	2c00      	cmp	r4, #0
 8017bba:	9b01      	ldr	r3, [sp, #4]
 8017bbc:	bfb8      	it	lt
 8017bbe:	4264      	neglt	r4, r4
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	f104 0401 	add.w	r4, r4, #1
 8017bc6:	bfb8      	it	lt
 8017bc8:	425b      	neglt	r3, r3
 8017bca:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017bce:	db00      	blt.n	8017bd2 <_ZN8touchgfx6muldivElll+0x50>
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	b002      	add	sp, #8
 8017bd4:	bd70      	pop	{r4, r5, r6, pc}
 8017bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8017bda:	e7de      	b.n	8017b9a <_ZN8touchgfx6muldivElll+0x18>
 8017bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8017be0:	e7e0      	b.n	8017ba4 <_ZN8touchgfx6muldivElll+0x22>
 8017be2:	f04f 33ff 	mov.w	r3, #4294967295
 8017be6:	e7e4      	b.n	8017bb2 <_ZN8touchgfx6muldivElll+0x30>
 8017be8:	3301      	adds	r3, #1
 8017bea:	d1f2      	bne.n	8017bd2 <_ZN8touchgfx6muldivElll+0x50>
 8017bec:	9b01      	ldr	r3, [sp, #4]
 8017bee:	2c00      	cmp	r4, #0
 8017bf0:	bfb8      	it	lt
 8017bf2:	4264      	neglt	r4, r4
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	bfb8      	it	lt
 8017bf8:	425b      	neglt	r3, r3
 8017bfa:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017bfe:	bfc8      	it	gt
 8017c00:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8017c04:	e7e5      	b.n	8017bd2 <_ZN8touchgfx6muldivElll+0x50>

08017c06 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8017c06:	2000      	movs	r0, #0
 8017c08:	4770      	bx	lr

08017c0a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8017c0a:	2001      	movs	r0, #1
 8017c0c:	4770      	bx	lr

08017c0e <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017c0e:	2002      	movs	r0, #2
 8017c10:	4770      	bx	lr

08017c12 <_ZN8touchgfx6ScreenD1Ev>:
 8017c12:	4770      	bx	lr

08017c14 <_ZN8touchgfx12GestureEventD1Ev>:
 8017c14:	4770      	bx	lr

08017c16 <_ZN8touchgfx9DragEventD1Ev>:
 8017c16:	4770      	bx	lr

08017c18 <_ZN8touchgfx10ClickEventD1Ev>:
 8017c18:	4770      	bx	lr

08017c1a <_ZN8touchgfx10ClickEventD0Ev>:
 8017c1a:	b510      	push	{r4, lr}
 8017c1c:	4604      	mov	r4, r0
 8017c1e:	210c      	movs	r1, #12
 8017c20:	f010 ffc3 	bl	8028baa <_ZdlPvj>
 8017c24:	4620      	mov	r0, r4
 8017c26:	bd10      	pop	{r4, pc}

08017c28 <_ZN8touchgfx9DragEventD0Ev>:
 8017c28:	b510      	push	{r4, lr}
 8017c2a:	4604      	mov	r4, r0
 8017c2c:	2110      	movs	r1, #16
 8017c2e:	f010 ffbc 	bl	8028baa <_ZdlPvj>
 8017c32:	4620      	mov	r0, r4
 8017c34:	bd10      	pop	{r4, pc}

08017c36 <_ZN8touchgfx12GestureEventD0Ev>:
 8017c36:	b510      	push	{r4, lr}
 8017c38:	4604      	mov	r4, r0
 8017c3a:	210c      	movs	r1, #12
 8017c3c:	f010 ffb5 	bl	8028baa <_ZdlPvj>
 8017c40:	4620      	mov	r0, r4
 8017c42:	bd10      	pop	{r4, pc}

08017c44 <_ZN8touchgfx6ScreenD0Ev>:
 8017c44:	b510      	push	{r4, lr}
 8017c46:	4604      	mov	r4, r0
 8017c48:	213c      	movs	r1, #60	@ 0x3c
 8017c4a:	f010 ffae 	bl	8028baa <_ZdlPvj>
 8017c4e:	4620      	mov	r0, r4
 8017c50:	bd10      	pop	{r4, pc}
	...

08017c54 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017c54:	b530      	push	{r4, r5, lr}
 8017c56:	460d      	mov	r5, r1
 8017c58:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8017c5a:	b087      	sub	sp, #28
 8017c5c:	4604      	mov	r4, r0
 8017c5e:	b301      	cbz	r1, 8017ca2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017c60:	a801      	add	r0, sp, #4
 8017c62:	f7ff fe3d 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c66:	892a      	ldrh	r2, [r5, #8]
 8017c68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017c6c:	7928      	ldrb	r0, [r5, #4]
 8017c6e:	1ad2      	subs	r2, r2, r3
 8017c70:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017c72:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017c76:	441a      	add	r2, r3
 8017c78:	896b      	ldrh	r3, [r5, #10]
 8017c7a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017c7e:	f88d 0010 	strb.w	r0, [sp, #16]
 8017c82:	1b5b      	subs	r3, r3, r5
 8017c84:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8017c86:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017c88:	442b      	add	r3, r5
 8017c8a:	4d07      	ldr	r5, [pc, #28]	@ (8017ca8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017c8c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017c90:	a903      	add	r1, sp, #12
 8017c92:	9503      	str	r5, [sp, #12]
 8017c94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017c98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017ca0:	4798      	blx	r3
 8017ca2:	b007      	add	sp, #28
 8017ca4:	bd30      	pop	{r4, r5, pc}
 8017ca6:	bf00      	nop
 8017ca8:	0802e21c 	.word	0x0802e21c

08017cac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017cb2:	b08a      	sub	sp, #40	@ 0x28
 8017cb4:	4604      	mov	r4, r0
 8017cb6:	460d      	mov	r5, r1
 8017cb8:	b113      	cbz	r3, 8017cc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8017cba:	790b      	ldrb	r3, [r1, #4]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d044      	beq.n	8017d4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017cc0:	f104 0804 	add.w	r8, r4, #4
 8017cc4:	a803      	add	r0, sp, #12
 8017cc6:	4641      	mov	r1, r8
 8017cc8:	f7ff fe0a 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017ccc:	792b      	ldrb	r3, [r5, #4]
 8017cce:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017cd2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017cd6:	b983      	cbnz	r3, 8017cfa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017cd8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8017cdc:	892a      	ldrh	r2, [r5, #8]
 8017cde:	88e9      	ldrh	r1, [r5, #6]
 8017ce0:	4640      	mov	r0, r8
 8017ce2:	1b92      	subs	r2, r2, r6
 8017ce4:	9301      	str	r3, [sp, #4]
 8017ce6:	1bc9      	subs	r1, r1, r7
 8017ce8:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8017cec:	b212      	sxth	r2, r2
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	b209      	sxth	r1, r1
 8017cf2:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8017cf6:	f7f8 f9b9 	bl	801006c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8017cfa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017cfc:	b329      	cbz	r1, 8017d4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017cfe:	a805      	add	r0, sp, #20
 8017d00:	f7ff fdee 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017d08:	792b      	ldrb	r3, [r5, #4]
 8017d0a:	a907      	add	r1, sp, #28
 8017d0c:	1abf      	subs	r7, r7, r2
 8017d0e:	88ea      	ldrh	r2, [r5, #6]
 8017d10:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017d12:	4417      	add	r7, r2
 8017d14:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8017d16:	f88d 3020 	strb.w	r3, [sp, #32]
 8017d1a:	4417      	add	r7, r2
 8017d1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017d20:	1ab6      	subs	r6, r6, r2
 8017d22:	892a      	ldrh	r2, [r5, #8]
 8017d24:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8017d28:	4416      	add	r6, r2
 8017d2a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017d2c:	4416      	add	r6, r2
 8017d2e:	4a08      	ldr	r2, [pc, #32]	@ (8017d50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017d30:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8017d34:	2600      	movs	r6, #0
 8017d36:	9207      	str	r2, [sp, #28]
 8017d38:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8017d3c:	6803      	ldr	r3, [r0, #0]
 8017d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d40:	4798      	blx	r3
 8017d42:	792b      	ldrb	r3, [r5, #4]
 8017d44:	b10b      	cbz	r3, 8017d4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017d46:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8017d4a:	b00a      	add	sp, #40	@ 0x28
 8017d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d50:	0802e1f4 	.word	0x0802e1f4

08017d54 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d58:	460c      	mov	r4, r1
 8017d5a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8017d5c:	b088      	sub	sp, #32
 8017d5e:	4605      	mov	r5, r0
 8017d60:	2900      	cmp	r1, #0
 8017d62:	d06d      	beq.n	8017e40 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017d64:	4668      	mov	r0, sp
 8017d66:	f7ff fdbb 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d6a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8017d6c:	88e3      	ldrh	r3, [r4, #6]
 8017d6e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017d72:	440b      	add	r3, r1
 8017d74:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017d78:	b21b      	sxth	r3, r3
 8017d7a:	4543      	cmp	r3, r8
 8017d7c:	db31      	blt.n	8017de2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d7e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8017d82:	44c4      	add	ip, r8
 8017d84:	fa0f fc8c 	sxth.w	ip, ip
 8017d88:	4563      	cmp	r3, ip
 8017d8a:	da2a      	bge.n	8017de2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d8c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8017d8e:	8926      	ldrh	r6, [r4, #8]
 8017d90:	4416      	add	r6, r2
 8017d92:	b236      	sxth	r6, r6
 8017d94:	42be      	cmp	r6, r7
 8017d96:	db24      	blt.n	8017de2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d98:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017d9c:	4438      	add	r0, r7
 8017d9e:	b200      	sxth	r0, r0
 8017da0:	4286      	cmp	r6, r0
 8017da2:	da1e      	bge.n	8017de2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017da4:	8963      	ldrh	r3, [r4, #10]
 8017da6:	4419      	add	r1, r3
 8017da8:	b209      	sxth	r1, r1
 8017daa:	4541      	cmp	r1, r8
 8017dac:	db08      	blt.n	8017dc0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017dae:	4561      	cmp	r1, ip
 8017db0:	da06      	bge.n	8017dc0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017db2:	89a3      	ldrh	r3, [r4, #12]
 8017db4:	441a      	add	r2, r3
 8017db6:	b212      	sxth	r2, r2
 8017db8:	42ba      	cmp	r2, r7
 8017dba:	db01      	blt.n	8017dc0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017dbc:	4282      	cmp	r2, r0
 8017dbe:	db10      	blt.n	8017de2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017dc0:	4b21      	ldr	r3, [pc, #132]	@ (8017e48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017dc2:	a904      	add	r1, sp, #16
 8017dc4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017dc6:	9304      	str	r3, [sp, #16]
 8017dc8:	2302      	movs	r3, #2
 8017dca:	f88d 3014 	strb.w	r3, [sp, #20]
 8017dce:	2300      	movs	r3, #0
 8017dd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017dd4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017dd8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017ddc:	6803      	ldr	r3, [r0, #0]
 8017dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017de0:	4798      	blx	r3
 8017de2:	1d29      	adds	r1, r5, #4
 8017de4:	a802      	add	r0, sp, #8
 8017de6:	f7ff fd7b 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017dea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017dee:	88e0      	ldrh	r0, [r4, #6]
 8017df0:	eba3 0808 	sub.w	r8, r3, r8
 8017df4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017df8:	7921      	ldrb	r1, [r4, #4]
 8017dfa:	fa1f f888 	uxth.w	r8, r8
 8017dfe:	1bdf      	subs	r7, r3, r7
 8017e00:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8017e04:	b2bb      	uxth	r3, r7
 8017e06:	4440      	add	r0, r8
 8017e08:	8922      	ldrh	r2, [r4, #8]
 8017e0a:	8967      	ldrh	r7, [r4, #10]
 8017e0c:	4460      	add	r0, ip
 8017e0e:	89a4      	ldrh	r4, [r4, #12]
 8017e10:	441a      	add	r2, r3
 8017e12:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8017e14:	44b8      	add	r8, r7
 8017e16:	4423      	add	r3, r4
 8017e18:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017e1c:	4432      	add	r2, r6
 8017e1e:	44e0      	add	r8, ip
 8017e20:	4433      	add	r3, r6
 8017e22:	4c0a      	ldr	r4, [pc, #40]	@ (8017e4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017e24:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017e26:	f88d 1014 	strb.w	r1, [sp, #20]
 8017e2a:	a904      	add	r1, sp, #16
 8017e2c:	9404      	str	r4, [sp, #16]
 8017e2e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017e32:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017e36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017e3a:	6803      	ldr	r3, [r0, #0]
 8017e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e3e:	4798      	blx	r3
 8017e40:	b008      	add	sp, #32
 8017e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e46:	bf00      	nop
 8017e48:	0802e1f4 	.word	0x0802e1f4
 8017e4c:	0802e208 	.word	0x0802e208

08017e50 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e52:	4604      	mov	r4, r0
 8017e54:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017e58:	3201      	adds	r2, #1
 8017e5a:	d112      	bne.n	8017e82 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017e5c:	2500      	movs	r5, #0
 8017e5e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017e62:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e66:	6803      	ldr	r3, [r0, #0]
 8017e68:	9500      	str	r5, [sp, #0]
 8017e6a:	466d      	mov	r5, sp
 8017e6c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017e70:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017e74:	4629      	mov	r1, r5
 8017e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e78:	4798      	blx	r3
 8017e7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017e7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8017e82:	4620      	mov	r0, r4
 8017e84:	b003      	add	sp, #12
 8017e86:	bd30      	pop	{r4, r5, pc}

08017e88 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017e88:	b513      	push	{r0, r1, r4, lr}
 8017e8a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017e8e:	4604      	mov	r4, r0
 8017e90:	3301      	adds	r3, #1
 8017e92:	d109      	bne.n	8017ea8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017e94:	4601      	mov	r1, r0
 8017e96:	4668      	mov	r0, sp
 8017e98:	f7ff fd22 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017ea0:	8423      	strh	r3, [r4, #32]
 8017ea2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017ea6:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017ea8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017eac:	b002      	add	sp, #8
 8017eae:	bd10      	pop	{r4, pc}

08017eb0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017eb0:	b513      	push	{r0, r1, r4, lr}
 8017eb2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8017eb6:	4604      	mov	r4, r0
 8017eb8:	3301      	adds	r3, #1
 8017eba:	d109      	bne.n	8017ed0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017ebc:	4601      	mov	r1, r0
 8017ebe:	4668      	mov	r0, sp
 8017ec0:	f7ff fd0e 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017ec4:	f8bd 3000 	ldrh.w	r3, [sp]
 8017ec8:	8423      	strh	r3, [r4, #32]
 8017eca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017ece:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017ed0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8017ed4:	b002      	add	sp, #8
 8017ed6:	bd10      	pop	{r4, pc}

08017ed8 <_ZN8touchgfx6ScreenC1Ev>:
 8017ed8:	b570      	push	{r4, r5, r6, lr}
 8017eda:	4b17      	ldr	r3, [pc, #92]	@ (8017f38 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017edc:	4605      	mov	r5, r0
 8017ede:	4a17      	ldr	r2, [pc, #92]	@ (8017f3c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017ee0:	2101      	movs	r1, #1
 8017ee2:	f845 3b04 	str.w	r3, [r5], #4
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	6042      	str	r2, [r0, #4]
 8017eea:	4604      	mov	r4, r0
 8017eec:	8103      	strh	r3, [r0, #8]
 8017eee:	8143      	strh	r3, [r0, #10]
 8017ef0:	8183      	strh	r3, [r0, #12]
 8017ef2:	81c3      	strh	r3, [r0, #14]
 8017ef4:	8203      	strh	r3, [r0, #16]
 8017ef6:	8243      	strh	r3, [r0, #18]
 8017ef8:	8283      	strh	r3, [r0, #20]
 8017efa:	82c3      	strh	r3, [r0, #22]
 8017efc:	6203      	str	r3, [r0, #32]
 8017efe:	8483      	strh	r3, [r0, #36]	@ 0x24
 8017f00:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017f02:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8017f06:	6343      	str	r3, [r0, #52]	@ 0x34
 8017f08:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8017f0c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017f10:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017f14:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8017f18:	4b09      	ldr	r3, [pc, #36]	@ (8017f40 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017f1a:	4628      	mov	r0, r5
 8017f1c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017f20:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8017f22:	4a08      	ldr	r2, [pc, #32]	@ (8017f44 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017f24:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017f28:	4798      	blx	r3
 8017f2a:	6863      	ldr	r3, [r4, #4]
 8017f2c:	4628      	mov	r0, r5
 8017f2e:	4631      	mov	r1, r6
 8017f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f32:	4798      	blx	r3
 8017f34:	4620      	mov	r0, r4
 8017f36:	bd70      	pop	{r4, r5, r6, pc}
 8017f38:	0802e230 	.word	0x0802e230
 8017f3c:	0802d724 	.word	0x0802d724
 8017f40:	20027db6 	.word	0x20027db6
 8017f44:	20027db4 	.word	0x20027db4

08017f48 <_ZN8touchgfx6Screen4drawEv>:
 8017f48:	4b09      	ldr	r3, [pc, #36]	@ (8017f70 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017f4a:	b507      	push	{r0, r1, r2, lr}
 8017f4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f50:	2100      	movs	r1, #0
 8017f52:	4b08      	ldr	r3, [pc, #32]	@ (8017f74 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017f54:	9100      	str	r1, [sp, #0]
 8017f56:	4669      	mov	r1, sp
 8017f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f5c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017f60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f64:	6803      	ldr	r3, [r0, #0]
 8017f66:	689b      	ldr	r3, [r3, #8]
 8017f68:	4798      	blx	r3
 8017f6a:	b003      	add	sp, #12
 8017f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f70:	20027db4 	.word	0x20027db4
 8017f74:	20027db6 	.word	0x20027db6

08017f78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f7c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017f80:	b089      	sub	sp, #36	@ 0x24
 8017f82:	4680      	mov	r8, r0
 8017f84:	460c      	mov	r4, r1
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	4615      	mov	r5, r2
 8017f8a:	dd0e      	ble.n	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017f8c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	dd0a      	ble.n	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017f94:	4628      	mov	r0, r5
 8017f96:	f7ff ff5b 	bl	8017e50 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017f9a:	4621      	mov	r1, r4
 8017f9c:	f7fe fa81 	bl	80164a2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017fa0:	69eb      	ldr	r3, [r5, #28]
 8017fa2:	b928      	cbnz	r0, 8017fb0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017fa4:	461d      	mov	r5, r3
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d1f4      	bne.n	8017f94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017faa:	b009      	add	sp, #36	@ 0x24
 8017fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fb0:	ae04      	add	r6, sp, #16
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f000 80b5 	beq.w	8018122 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017fb8:	682b      	ldr	r3, [r5, #0]
 8017fba:	4629      	mov	r1, r5
 8017fbc:	a802      	add	r0, sp, #8
 8017fbe:	68db      	ldr	r3, [r3, #12]
 8017fc0:	4798      	blx	r3
 8017fc2:	4628      	mov	r0, r5
 8017fc4:	f7ff ff60 	bl	8017e88 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017fc8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017fcc:	4407      	add	r7, r0
 8017fce:	4628      	mov	r0, r5
 8017fd0:	f7ff ff6e 	bl	8017eb0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017fd4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017fd8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017fdc:	b23f      	sxth	r7, r7
 8017fde:	4418      	add	r0, r3
 8017fe0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017fe4:	4621      	mov	r1, r4
 8017fe6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017fea:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017fee:	4630      	mov	r0, r6
 8017ff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ff4:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017ff8:	f7f8 f91a 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	f7ff ff27 	bl	8017e50 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018002:	ab06      	add	r3, sp, #24
 8018004:	4602      	mov	r2, r0
 8018006:	e896 0003 	ldmia.w	r6, {r0, r1}
 801800a:	e883 0003 	stmia.w	r3, {r0, r1}
 801800e:	4611      	mov	r1, r2
 8018010:	4618      	mov	r0, r3
 8018012:	f7f8 f90d 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8018016:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801801a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801801e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018022:	4299      	cmp	r1, r3
 8018024:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018028:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801802c:	d10b      	bne.n	8018046 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801802e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018032:	4552      	cmp	r2, sl
 8018034:	d107      	bne.n	8018046 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018036:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801803a:	455a      	cmp	r2, fp
 801803c:	d103      	bne.n	8018046 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801803e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018042:	454a      	cmp	r2, r9
 8018044:	d06d      	beq.n	8018122 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018046:	f1bb 0f00 	cmp.w	fp, #0
 801804a:	dd65      	ble.n	8018118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801804c:	f1b9 0f00 	cmp.w	r9, #0
 8018050:	dd62      	ble.n	8018118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018052:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018056:	fa1f f08a 	uxth.w	r0, sl
 801805a:	4552      	cmp	r2, sl
 801805c:	9000      	str	r0, [sp, #0]
 801805e:	da12      	bge.n	8018086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018060:	9301      	str	r3, [sp, #4]
 8018062:	9b00      	ldr	r3, [sp, #0]
 8018064:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018068:	f8ad 2012 	strh.w	r2, [sp, #18]
 801806c:	1a9a      	subs	r2, r3, r2
 801806e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018072:	4631      	mov	r1, r6
 8018074:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018078:	4640      	mov	r0, r8
 801807a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801807e:	69ea      	ldr	r2, [r5, #28]
 8018080:	f7ff ff7a 	bl	8017f78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018084:	9b01      	ldr	r3, [sp, #4]
 8018086:	f9b4 2000 	ldrsh.w	r2, [r4]
 801808a:	b29f      	uxth	r7, r3
 801808c:	429a      	cmp	r2, r3
 801808e:	da0d      	bge.n	80180ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018090:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018094:	1aba      	subs	r2, r7, r2
 8018096:	f8ad a012 	strh.w	sl, [sp, #18]
 801809a:	4631      	mov	r1, r6
 801809c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80180a0:	4640      	mov	r0, r8
 80180a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80180a6:	69ea      	ldr	r2, [r5, #28]
 80180a8:	f7ff ff66 	bl	8017f78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80180ac:	8822      	ldrh	r2, [r4, #0]
 80180ae:	445f      	add	r7, fp
 80180b0:	88a3      	ldrh	r3, [r4, #4]
 80180b2:	b2bf      	uxth	r7, r7
 80180b4:	4413      	add	r3, r2
 80180b6:	b23a      	sxth	r2, r7
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	b219      	sxth	r1, r3
 80180bc:	4291      	cmp	r1, r2
 80180be:	dd0d      	ble.n	80180dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80180c0:	1bdb      	subs	r3, r3, r7
 80180c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80180c6:	f8ad a012 	strh.w	sl, [sp, #18]
 80180ca:	4631      	mov	r1, r6
 80180cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80180d0:	4640      	mov	r0, r8
 80180d2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80180d6:	69ea      	ldr	r2, [r5, #28]
 80180d8:	f7ff ff4e 	bl	8017f78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80180dc:	88e2      	ldrh	r2, [r4, #6]
 80180de:	8863      	ldrh	r3, [r4, #2]
 80180e0:	4413      	add	r3, r2
 80180e2:	9a00      	ldr	r2, [sp, #0]
 80180e4:	444a      	add	r2, r9
 80180e6:	b29b      	uxth	r3, r3
 80180e8:	fa1f f982 	uxth.w	r9, r2
 80180ec:	b219      	sxth	r1, r3
 80180ee:	fa0f f289 	sxth.w	r2, r9
 80180f2:	428a      	cmp	r2, r1
 80180f4:	da15      	bge.n	8018122 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80180f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80180fa:	eba3 0309 	sub.w	r3, r3, r9
 80180fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018102:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018106:	4631      	mov	r1, r6
 8018108:	f8ad 0010 	strh.w	r0, [sp, #16]
 801810c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018110:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018114:	69ea      	ldr	r2, [r5, #28]
 8018116:	e001      	b.n	801811c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018118:	69ea      	ldr	r2, [r5, #28]
 801811a:	4621      	mov	r1, r4
 801811c:	4640      	mov	r0, r8
 801811e:	f7ff ff2b 	bl	8017f78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018122:	4628      	mov	r0, r5
 8018124:	f7ff fe94 	bl	8017e50 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018128:	6861      	ldr	r1, [r4, #4]
 801812a:	4602      	mov	r2, r0
 801812c:	4633      	mov	r3, r6
 801812e:	6820      	ldr	r0, [r4, #0]
 8018130:	c303      	stmia	r3!, {r0, r1}
 8018132:	4611      	mov	r1, r2
 8018134:	4630      	mov	r0, r6
 8018136:	f7f8 f87b 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801813a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801813e:	2b00      	cmp	r3, #0
 8018140:	f77f af33 	ble.w	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018144:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018148:	2b00      	cmp	r3, #0
 801814a:	f77f af2e 	ble.w	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801814e:	4628      	mov	r0, r5
 8018150:	f7ff fe9a 	bl	8017e88 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018154:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018158:	1a18      	subs	r0, r3, r0
 801815a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801815e:	4628      	mov	r0, r5
 8018160:	f7ff fea6 	bl	8017eb0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018164:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018168:	4631      	mov	r1, r6
 801816a:	1a18      	subs	r0, r3, r0
 801816c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018170:	4628      	mov	r0, r5
 8018172:	682b      	ldr	r3, [r5, #0]
 8018174:	689b      	ldr	r3, [r3, #8]
 8018176:	4798      	blx	r3
 8018178:	e717      	b.n	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801817a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801817a:	b570      	push	{r4, r5, r6, lr}
 801817c:	1d06      	adds	r6, r0, #4
 801817e:	b086      	sub	sp, #24
 8018180:	460c      	mov	r4, r1
 8018182:	2300      	movs	r3, #0
 8018184:	4631      	mov	r1, r6
 8018186:	4605      	mov	r5, r0
 8018188:	a802      	add	r0, sp, #8
 801818a:	9301      	str	r3, [sp, #4]
 801818c:	f7ff fba8 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018190:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018194:	8822      	ldrh	r2, [r4, #0]
 8018196:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801819a:	1ad2      	subs	r2, r2, r3
 801819c:	8863      	ldrh	r3, [r4, #2]
 801819e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80181a2:	1a5b      	subs	r3, r3, r1
 80181a4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80181a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80181ac:	aa01      	add	r2, sp, #4
 80181ae:	f8ad 0014 	strh.w	r0, [sp, #20]
 80181b2:	4630      	mov	r0, r6
 80181b4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80181b8:	a904      	add	r1, sp, #16
 80181ba:	f8ad 3012 	strh.w	r3, [sp, #18]
 80181be:	f7f8 f90f 	bl	80103e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80181c2:	9a01      	ldr	r2, [sp, #4]
 80181c4:	b11a      	cbz	r2, 80181ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80181c6:	4621      	mov	r1, r4
 80181c8:	4628      	mov	r0, r5
 80181ca:	f7ff fed5 	bl	8017f78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80181ce:	b006      	add	sp, #24
 80181d0:	bd70      	pop	{r4, r5, r6, pc}

080181d2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80181d2:	4602      	mov	r2, r0
 80181d4:	b530      	push	{r4, r5, lr}
 80181d6:	4604      	mov	r4, r0
 80181d8:	b085      	sub	sp, #20
 80181da:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80181de:	460d      	mov	r5, r1
 80181e0:	466b      	mov	r3, sp
 80181e2:	6851      	ldr	r1, [r2, #4]
 80181e4:	c303      	stmia	r3!, {r0, r1}
 80181e6:	4629      	mov	r1, r5
 80181e8:	4668      	mov	r0, sp
 80181ea:	f7f8 f821 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 80181ee:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80181f2:	b12b      	cbz	r3, 8018200 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80181f4:	4669      	mov	r1, sp
 80181f6:	4620      	mov	r0, r4
 80181f8:	f7ff ffbf 	bl	801817a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80181fc:	b005      	add	sp, #20
 80181fe:	bd30      	pop	{r4, r5, pc}
 8018200:	3404      	adds	r4, #4
 8018202:	a802      	add	r0, sp, #8
 8018204:	4621      	mov	r1, r4
 8018206:	f7ff fb6b 	bl	80178e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801820a:	f8bd 3000 	ldrh.w	r3, [sp]
 801820e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018212:	4669      	mov	r1, sp
 8018214:	4620      	mov	r0, r4
 8018216:	1a9b      	subs	r3, r3, r2
 8018218:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801821c:	f8ad 3000 	strh.w	r3, [sp]
 8018220:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018224:	1a9b      	subs	r3, r3, r2
 8018226:	f8ad 3002 	strh.w	r3, [sp, #2]
 801822a:	f7f8 f8a0 	bl	801036e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801822e:	e7e5      	b.n	80181fc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018230 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018230:	460b      	mov	r3, r1
 8018232:	680a      	ldr	r2, [r1, #0]
 8018234:	1d01      	adds	r1, r0, #4
 8018236:	6992      	ldr	r2, [r2, #24]
 8018238:	4618      	mov	r0, r3
 801823a:	4710      	bx	r2

0801823c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801823c:	4298      	cmp	r0, r3
 801823e:	d200      	bcs.n	8018242 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8018240:	b913      	cbnz	r3, 8018248 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8018242:	440a      	add	r2, r1
 8018244:	b210      	sxth	r0, r2
 8018246:	4770      	bx	lr
 8018248:	ee07 0a90 	vmov	s15, r0
 801824c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018250:	ee07 3a90 	vmov	s15, r3
 8018254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801825c:	ee07 2a90 	vmov	s15, r2
 8018260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018264:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018268:	ee07 1a90 	vmov	s15, r1
 801826c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018270:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018274:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018278:	eee5 6a87 	vfma.f32	s13, s11, s14
 801827c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018280:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801828c:	bfcc      	ite	gt
 801828e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018292:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801829a:	ee17 3a90 	vmov	r3, s15
 801829e:	b218      	sxth	r0, r3
 80182a0:	4770      	bx	lr

080182a2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 80182a2:	4298      	cmp	r0, r3
 80182a4:	d200      	bcs.n	80182a8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 80182a6:	b913      	cbnz	r3, 80182ae <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 80182a8:	440a      	add	r2, r1
 80182aa:	b210      	sxth	r0, r2
 80182ac:	4770      	bx	lr
 80182ae:	ee07 2a90 	vmov	s15, r2
 80182b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80182b6:	ee07 0a90 	vmov	s15, r0
 80182ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80182be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80182c2:	ee07 3a10 	vmov	s14, r3
 80182c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80182ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80182ce:	ee07 1a90 	vmov	s15, r1
 80182d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80182de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80182e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e6:	bfcc      	ite	gt
 80182e8:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80182ec:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80182f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182f4:	ee17 3a90 	vmov	r3, s15
 80182f8:	b218      	sxth	r0, r3
 80182fa:	4770      	bx	lr

080182fc <_ZN8touchgfx12TextProviderC1Ev>:
 80182fc:	b538      	push	{r3, r4, r5, lr}
 80182fe:	2500      	movs	r5, #0
 8018300:	2302      	movs	r3, #2
 8018302:	4604      	mov	r4, r0
 8018304:	220e      	movs	r2, #14
 8018306:	7403      	strb	r3, [r0, #16]
 8018308:	4629      	mov	r1, r5
 801830a:	6145      	str	r5, [r0, #20]
 801830c:	7605      	strb	r5, [r0, #24]
 801830e:	83c5      	strh	r5, [r0, #30]
 8018310:	8405      	strh	r5, [r0, #32]
 8018312:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018314:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018316:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8018318:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801831c:	e9c0 5500 	strd	r5, r5, [r0]
 8018320:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8018324:	304c      	adds	r0, #76	@ 0x4c
 8018326:	f010 ff0b 	bl	8029140 <memset>
 801832a:	2301      	movs	r3, #1
 801832c:	4620      	mov	r0, r4
 801832e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8018332:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018336:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801833a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801833e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8018342:	f7ef f88b 	bl	800745c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018346:	4620      	mov	r0, r4
 8018348:	bd38      	pop	{r3, r4, r5, pc}

0801834a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801834a:	b530      	push	{r4, r5, lr}
 801834c:	2500      	movs	r5, #0
 801834e:	2401      	movs	r4, #1
 8018350:	6843      	ldr	r3, [r0, #4]
 8018352:	b913      	cbnz	r3, 801835a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018354:	6803      	ldr	r3, [r0, #0]
 8018356:	b313      	cbz	r3, 801839e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018358:	6043      	str	r3, [r0, #4]
 801835a:	7e03      	ldrb	r3, [r0, #24]
 801835c:	b143      	cbz	r3, 8018370 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801835e:	6943      	ldr	r3, [r0, #20]
 8018360:	b12b      	cbz	r3, 801836e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018362:	881a      	ldrh	r2, [r3, #0]
 8018364:	b11a      	cbz	r2, 801836e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018366:	1c9a      	adds	r2, r3, #2
 8018368:	6142      	str	r2, [r0, #20]
 801836a:	8818      	ldrh	r0, [r3, #0]
 801836c:	bd30      	pop	{r4, r5, pc}
 801836e:	7605      	strb	r5, [r0, #24]
 8018370:	6843      	ldr	r3, [r0, #4]
 8018372:	8819      	ldrh	r1, [r3, #0]
 8018374:	b199      	cbz	r1, 801839e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018376:	1c9a      	adds	r2, r3, #2
 8018378:	2902      	cmp	r1, #2
 801837a:	6042      	str	r2, [r0, #4]
 801837c:	d1f5      	bne.n	801836a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801837e:	7c03      	ldrb	r3, [r0, #16]
 8018380:	2b01      	cmp	r3, #1
 8018382:	d8e5      	bhi.n	8018350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018384:	1c5a      	adds	r2, r3, #1
 8018386:	3302      	adds	r3, #2
 8018388:	7402      	strb	r2, [r0, #16]
 801838a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801838e:	6143      	str	r3, [r0, #20]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d0dd      	beq.n	8018350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018394:	881b      	ldrh	r3, [r3, #0]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d0da      	beq.n	8018350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801839a:	7604      	strb	r4, [r0, #24]
 801839c:	e7d8      	b.n	8018350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801839e:	2000      	movs	r0, #0
 80183a0:	e7e4      	b.n	801836c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080183a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80183a2:	6001      	str	r1, [r0, #0]
 80183a4:	2100      	movs	r1, #0
 80183a6:	b430      	push	{r4, r5}
 80183a8:	6041      	str	r1, [r0, #4]
 80183aa:	6815      	ldr	r5, [r2, #0]
 80183ac:	6085      	str	r5, [r0, #8]
 80183ae:	6852      	ldr	r2, [r2, #4]
 80183b0:	6443      	str	r3, [r0, #68]	@ 0x44
 80183b2:	9b02      	ldr	r3, [sp, #8]
 80183b4:	60c2      	str	r2, [r0, #12]
 80183b6:	7401      	strb	r1, [r0, #16]
 80183b8:	6141      	str	r1, [r0, #20]
 80183ba:	7601      	strb	r1, [r0, #24]
 80183bc:	8701      	strh	r1, [r0, #56]	@ 0x38
 80183be:	8401      	strh	r1, [r0, #32]
 80183c0:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80183c4:	6483      	str	r3, [r0, #72]	@ 0x48
 80183c6:	bc30      	pop	{r4, r5}
 80183c8:	f7ef b848 	b.w	800745c <_ZN8touchgfx12TextProvider18initializeInternalEv>

080183cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80183cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ce:	4605      	mov	r5, r0
 80183d0:	4608      	mov	r0, r1
 80183d2:	b1f1      	cbz	r1, 8018412 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80183d4:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80183d8:	460b      	mov	r3, r1
 80183da:	f101 0708 	add.w	r7, r1, #8
 80183de:	4622      	mov	r2, r4
 80183e0:	6818      	ldr	r0, [r3, #0]
 80183e2:	3308      	adds	r3, #8
 80183e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80183e8:	4626      	mov	r6, r4
 80183ea:	42bb      	cmp	r3, r7
 80183ec:	c603      	stmia	r6!, {r0, r1}
 80183ee:	4634      	mov	r4, r6
 80183f0:	d1f6      	bne.n	80183e0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80183f2:	6818      	ldr	r0, [r3, #0]
 80183f4:	6030      	str	r0, [r6, #0]
 80183f6:	4610      	mov	r0, r2
 80183f8:	889b      	ldrh	r3, [r3, #4]
 80183fa:	80b3      	strh	r3, [r6, #4]
 80183fc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018400:	015b      	lsls	r3, r3, #5
 8018402:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018406:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801840a:	430b      	orrs	r3, r1
 801840c:	425b      	negs	r3, r3
 801840e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018414 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018414:	b538      	push	{r3, r4, r5, lr}
 8018416:	460c      	mov	r4, r1
 8018418:	6811      	ldr	r1, [r2, #0]
 801841a:	4610      	mov	r0, r2
 801841c:	68cd      	ldr	r5, [r1, #12]
 801841e:	4619      	mov	r1, r3
 8018420:	47a8      	blx	r5
 8018422:	2800      	cmp	r0, #0
 8018424:	bf08      	it	eq
 8018426:	4620      	moveq	r0, r4
 8018428:	bd38      	pop	{r3, r4, r5, pc}
	...

0801842c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801842c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018430:	468c      	mov	ip, r1
 8018432:	4605      	mov	r5, r0
 8018434:	4614      	mov	r4, r2
 8018436:	b942      	cbnz	r2, 801844a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8018438:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801843c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8018440:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8018444:	4620      	mov	r0, r4
 8018446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801844a:	7b50      	ldrb	r0, [r2, #13]
 801844c:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8018450:	8893      	ldrh	r3, [r2, #4]
 8018452:	0106      	lsls	r6, r0, #4
 8018454:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018458:	79e6      	ldrb	r6, [r4, #7]
 801845a:	4316      	orrs	r6, r2
 801845c:	185a      	adds	r2, r3, r1
 801845e:	b291      	uxth	r1, r2
 8018460:	b2b7      	uxth	r7, r6
 8018462:	291d      	cmp	r1, #29
 8018464:	d87f      	bhi.n	8018566 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018466:	2201      	movs	r2, #1
 8018468:	10f6      	asrs	r6, r6, #3
 801846a:	408a      	lsls	r2, r1
 801846c:	498b      	ldr	r1, [pc, #556]	@ (801869c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801846e:	420a      	tst	r2, r1
 8018470:	d12e      	bne.n	80184d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018472:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8018476:	d076      	beq.n	8018566 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018478:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801847c:	4623      	mov	r3, r4
 801847e:	f104 0e08 	add.w	lr, r4, #8
 8018482:	4614      	mov	r4, r2
 8018484:	6818      	ldr	r0, [r3, #0]
 8018486:	3308      	adds	r3, #8
 8018488:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801848c:	4694      	mov	ip, r2
 801848e:	4573      	cmp	r3, lr
 8018490:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018494:	4662      	mov	r2, ip
 8018496:	d1f5      	bne.n	8018484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018498:	6818      	ldr	r0, [r3, #0]
 801849a:	f8cc 0000 	str.w	r0, [ip]
 801849e:	889b      	ldrh	r3, [r3, #4]
 80184a0:	f8ac 3004 	strh.w	r3, [ip, #4]
 80184a4:	b2b3      	uxth	r3, r6
 80184a6:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80184aa:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80184ae:	1aca      	subs	r2, r1, r3
 80184b0:	1bcf      	subs	r7, r1, r7
 80184b2:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80184b6:	b292      	uxth	r2, r2
 80184b8:	1afb      	subs	r3, r7, r3
 80184ba:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80184be:	10d2      	asrs	r2, r2, #3
 80184c0:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80184c4:	4302      	orrs	r2, r0
 80184c6:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80184ca:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80184ce:	e7b9      	b.n	8018444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80184d0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80184d4:	4623      	mov	r3, r4
 80184d6:	f104 0808 	add.w	r8, r4, #8
 80184da:	4614      	mov	r4, r2
 80184dc:	6818      	ldr	r0, [r3, #0]
 80184de:	3308      	adds	r3, #8
 80184e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80184e4:	4696      	mov	lr, r2
 80184e6:	4543      	cmp	r3, r8
 80184e8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80184ec:	4672      	mov	r2, lr
 80184ee:	d1f5      	bne.n	80184dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80184f0:	6818      	ldr	r0, [r3, #0]
 80184f2:	f8ce 0000 	str.w	r0, [lr]
 80184f6:	889b      	ldrh	r3, [r3, #4]
 80184f8:	f8ae 3004 	strh.w	r3, [lr, #4]
 80184fc:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80184fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8018502:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8018504:	f640 6333 	movw	r3, #3635	@ 0xe33
 8018508:	4299      	cmp	r1, r3
 801850a:	d111      	bne.n	8018530 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801850c:	f8dc 3000 	ldr.w	r3, [ip]
 8018510:	4660      	mov	r0, ip
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	4798      	blx	r3
 8018516:	7b41      	ldrb	r1, [r0, #13]
 8018518:	00cb      	lsls	r3, r1, #3
 801851a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801851e:	7a03      	ldrb	r3, [r0, #8]
 8018520:	4313      	orrs	r3, r2
 8018522:	064a      	lsls	r2, r1, #25
 8018524:	bf44      	itt	mi
 8018526:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801852a:	b21b      	sxthmi	r3, r3
 801852c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018530:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8018534:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8018538:	443b      	add	r3, r7
 801853a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801853e:	4433      	add	r3, r6
 8018540:	b29b      	uxth	r3, r3
 8018542:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018546:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801854a:	10db      	asrs	r3, r3, #3
 801854c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018550:	4313      	orrs	r3, r2
 8018552:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8018556:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801855a:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801855e:	1a9b      	subs	r3, r3, r2
 8018560:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018564:	e76e      	b.n	8018444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018566:	f023 0204 	bic.w	r2, r3, #4
 801856a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801856e:	428a      	cmp	r2, r1
 8018570:	d003      	beq.n	801857a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8018572:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8018576:	4293      	cmp	r3, r2
 8018578:	d138      	bne.n	80185ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801857a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801857e:	4622      	mov	r2, r4
 8018580:	f104 0808 	add.w	r8, r4, #8
 8018584:	4634      	mov	r4, r6
 8018586:	6810      	ldr	r0, [r2, #0]
 8018588:	3208      	adds	r2, #8
 801858a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801858e:	46b6      	mov	lr, r6
 8018590:	4542      	cmp	r2, r8
 8018592:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018596:	4676      	mov	r6, lr
 8018598:	d1f5      	bne.n	8018586 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801859a:	6810      	ldr	r0, [r2, #0]
 801859c:	3b01      	subs	r3, #1
 801859e:	4621      	mov	r1, r4
 80185a0:	f8ce 0000 	str.w	r0, [lr]
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	8892      	ldrh	r2, [r2, #4]
 80185a8:	4628      	mov	r0, r5
 80185aa:	f8ae 2004 	strh.w	r2, [lr, #4]
 80185ae:	4662      	mov	r2, ip
 80185b0:	f7ff ff30 	bl	8018414 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80185b4:	7b41      	ldrb	r1, [r0, #13]
 80185b6:	00cb      	lsls	r3, r1, #3
 80185b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80185bc:	7a03      	ldrb	r3, [r0, #8]
 80185be:	0648      	lsls	r0, r1, #25
 80185c0:	ea43 0302 	orr.w	r3, r3, r2
 80185c4:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80185c8:	bf44      	itt	mi
 80185ca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80185ce:	b21b      	sxthmi	r3, r3
 80185d0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80185d4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80185d8:	005b      	lsls	r3, r3, #1
 80185da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80185de:	4313      	orrs	r3, r2
 80185e0:	115a      	asrs	r2, r3, #5
 80185e2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80185e6:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80185ea:	e047      	b.n	801867c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80185ec:	00c2      	lsls	r2, r0, #3
 80185ee:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80185f2:	7a22      	ldrb	r2, [r4, #8]
 80185f4:	430a      	orrs	r2, r1
 80185f6:	0641      	lsls	r1, r0, #25
 80185f8:	f640 6109 	movw	r1, #3593	@ 0xe09
 80185fc:	bf44      	itt	mi
 80185fe:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8018602:	b212      	sxthmi	r2, r2
 8018604:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018608:	f023 0210 	bic.w	r2, r3, #16
 801860c:	428a      	cmp	r2, r1
 801860e:	d003      	beq.n	8018618 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8018610:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018614:	4293      	cmp	r3, r2
 8018616:	d13e      	bne.n	8018696 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8018618:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801861c:	f104 0808 	add.w	r8, r4, #8
 8018620:	4696      	mov	lr, r2
 8018622:	6820      	ldr	r0, [r4, #0]
 8018624:	3408      	adds	r4, #8
 8018626:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801862a:	4616      	mov	r6, r2
 801862c:	4544      	cmp	r4, r8
 801862e:	c603      	stmia	r6!, {r0, r1}
 8018630:	4632      	mov	r2, r6
 8018632:	d1f6      	bne.n	8018622 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8018634:	6820      	ldr	r0, [r4, #0]
 8018636:	6030      	str	r0, [r6, #0]
 8018638:	4628      	mov	r0, r5
 801863a:	88a1      	ldrh	r1, [r4, #4]
 801863c:	4674      	mov	r4, lr
 801863e:	80b1      	strh	r1, [r6, #4]
 8018640:	4671      	mov	r1, lr
 8018642:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8018646:	0076      	lsls	r6, r6, #1
 8018648:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801864c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8018650:	4316      	orrs	r6, r2
 8018652:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018656:	4293      	cmp	r3, r2
 8018658:	4662      	mov	r2, ip
 801865a:	bf16      	itet	ne
 801865c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018660:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8018664:	b29b      	uxthne	r3, r3
 8018666:	f7ff fed5 	bl	8018414 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801866a:	7b43      	ldrb	r3, [r0, #13]
 801866c:	7a82      	ldrb	r2, [r0, #10]
 801866e:	005b      	lsls	r3, r3, #1
 8018670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018674:	4313      	orrs	r3, r2
 8018676:	1af6      	subs	r6, r6, r3
 8018678:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801867c:	7b61      	ldrb	r1, [r4, #13]
 801867e:	00cb      	lsls	r3, r1, #3
 8018680:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018684:	7a23      	ldrb	r3, [r4, #8]
 8018686:	4313      	orrs	r3, r2
 8018688:	064a      	lsls	r2, r1, #25
 801868a:	bf44      	itt	mi
 801868c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018690:	b21b      	sxthmi	r3, r3
 8018692:	1bdb      	subs	r3, r3, r7
 8018694:	e719      	b.n	80184ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018696:	2300      	movs	r3, #0
 8018698:	e7a5      	b.n	80185e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801869a:	bf00      	nop
 801869c:	3fc00079 	.word	0x3fc00079

080186a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80186a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186a4:	4604      	mov	r4, r0
 80186a6:	b942      	cbnz	r2, 80186ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80186a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80186ac:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80186b0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80186b4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80186b8:	e047      	b.n	801874a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80186ba:	7b51      	ldrb	r1, [r2, #13]
 80186bc:	8893      	ldrh	r3, [r2, #4]
 80186be:	010d      	lsls	r5, r1, #4
 80186c0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80186c4:	79d5      	ldrb	r5, [r2, #7]
 80186c6:	4305      	orrs	r5, r0
 80186c8:	2d04      	cmp	r5, #4
 80186ca:	bfcc      	ite	gt
 80186cc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80186d0:	f04f 0e01 	movle.w	lr, #1
 80186d4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80186d8:	f200 80ab 	bhi.w	8018832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80186dc:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80186e0:	4283      	cmp	r3, r0
 80186e2:	d216      	bcs.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80186e4:	f240 605b 	movw	r0, #1627	@ 0x65b
 80186e8:	4283      	cmp	r3, r0
 80186ea:	d859      	bhi.n	80187a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80186ec:	f240 6057 	movw	r0, #1623	@ 0x657
 80186f0:	4283      	cmp	r3, r0
 80186f2:	d20e      	bcs.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80186f4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80186f8:	d24a      	bcs.n	8018790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80186fa:	f240 604e 	movw	r0, #1614	@ 0x64e
 80186fe:	4283      	cmp	r3, r0
 8018700:	d207      	bcs.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018702:	f240 601a 	movw	r0, #1562	@ 0x61a
 8018706:	4283      	cmp	r3, r0
 8018708:	d02a      	beq.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801870a:	d821      	bhi.n	8018750 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801870c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8018710:	d35b      	bcc.n	80187ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018712:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8018716:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801871a:	f040 80d0 	bne.w	80188be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801871e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8018722:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018726:	f040 80ca 	bne.w	80188be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801872a:	00cb      	lsls	r3, r1, #3
 801872c:	0649      	lsls	r1, r1, #25
 801872e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018732:	7a13      	ldrb	r3, [r2, #8]
 8018734:	ea43 0300 	orr.w	r3, r3, r0
 8018738:	bf44      	itt	mi
 801873a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801873e:	b21b      	sxthmi	r3, r3
 8018740:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018744:	1b5d      	subs	r5, r3, r5
 8018746:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801874a:	4610      	mov	r0, r2
 801874c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018750:	f240 604b 	movw	r0, #1611	@ 0x64b
 8018754:	4283      	cmp	r3, r0
 8018756:	d338      	bcc.n	80187ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018758:	f240 604c 	movw	r0, #1612	@ 0x64c
 801875c:	4283      	cmp	r3, r0
 801875e:	d9d8      	bls.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018760:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8018764:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8018768:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801876c:	f040 80f3 	bne.w	8018956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018770:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018774:	f040 80ef 	bne.w	8018956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018778:	00cb      	lsls	r3, r1, #3
 801877a:	064e      	lsls	r6, r1, #25
 801877c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018780:	7a13      	ldrb	r3, [r2, #8]
 8018782:	ea43 0300 	orr.w	r3, r3, r0
 8018786:	bf44      	itt	mi
 8018788:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801878c:	b21b      	sxthmi	r3, r3
 801878e:	e7d9      	b.n	8018744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018790:	f240 6054 	movw	r0, #1620	@ 0x654
 8018794:	4283      	cmp	r3, r0
 8018796:	d8e3      	bhi.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018798:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801879c:	d9e0      	bls.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801879e:	e7b8      	b.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80187a0:	f240 6074 	movw	r0, #1652	@ 0x674
 80187a4:	4283      	cmp	r3, r0
 80187a6:	d0b4      	beq.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80187a8:	d82d      	bhi.n	8018806 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80187aa:	f240 605e 	movw	r0, #1630	@ 0x65e
 80187ae:	4283      	cmp	r3, r0
 80187b0:	d804      	bhi.n	80187bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80187b2:	f240 605d 	movw	r0, #1629	@ 0x65d
 80187b6:	4283      	cmp	r3, r0
 80187b8:	d3d2      	bcc.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80187ba:	e7aa      	b.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80187bc:	f240 605f 	movw	r0, #1631	@ 0x65f
 80187c0:	4283      	cmp	r3, r0
 80187c2:	d0cd      	beq.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80187c4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80187c8:	d0a3      	beq.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80187ca:	00cb      	lsls	r3, r1, #3
 80187cc:	0649      	lsls	r1, r1, #25
 80187ce:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80187d2:	7a13      	ldrb	r3, [r2, #8]
 80187d4:	ea43 0300 	orr.w	r3, r3, r0
 80187d8:	bf44      	itt	mi
 80187da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80187de:	b21b      	sxthmi	r3, r3
 80187e0:	1b5d      	subs	r5, r3, r5
 80187e2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80187e6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80187ea:	7b53      	ldrb	r3, [r2, #13]
 80187ec:	015b      	lsls	r3, r3, #5
 80187ee:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80187f2:	7993      	ldrb	r3, [r2, #6]
 80187f4:	430b      	orrs	r3, r1
 80187f6:	2105      	movs	r1, #5
 80187f8:	005b      	lsls	r3, r3, #1
 80187fa:	fb93 f3f1 	sdiv	r3, r3, r1
 80187fe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018802:	440b      	add	r3, r1
 8018804:	e756      	b.n	80186b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018806:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801880a:	4283      	cmp	r3, r0
 801880c:	d809      	bhi.n	8018822 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801880e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8018812:	4283      	cmp	r3, r0
 8018814:	f4bf af7d 	bcs.w	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018818:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801881c:	2b05      	cmp	r3, #5
 801881e:	d8d4      	bhi.n	80187ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018820:	e777      	b.n	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018822:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8018826:	4283      	cmp	r3, r0
 8018828:	d09a      	beq.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801882a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801882e:	4283      	cmp	r3, r0
 8018830:	e7ca      	b.n	80187c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018832:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8018836:	d22b      	bcs.n	8018890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018838:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801883c:	4283      	cmp	r3, r0
 801883e:	d28f      	bcs.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018840:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018844:	4283      	cmp	r3, r0
 8018846:	d816      	bhi.n	8018876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018848:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801884c:	4283      	cmp	r3, r0
 801884e:	f4bf af60 	bcs.w	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018852:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8018856:	4283      	cmp	r3, r0
 8018858:	d80a      	bhi.n	8018870 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801885a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801885e:	4283      	cmp	r3, r0
 8018860:	f4bf af57 	bcs.w	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018864:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8018868:	4283      	cmp	r3, r0
 801886a:	f43f af79 	beq.w	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801886e:	e7ac      	b.n	80187ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018870:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8018874:	e7f8      	b.n	8018868 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018876:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801887a:	4283      	cmp	r3, r0
 801887c:	d802      	bhi.n	8018884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801887e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018882:	e798      	b.n	80187b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018884:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8018888:	4283      	cmp	r3, r0
 801888a:	f47f af42 	bne.w	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801888e:	e767      	b.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018890:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8018894:	4283      	cmp	r3, r0
 8018896:	f43f af63 	beq.w	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801889a:	d802      	bhi.n	80188a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801889c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80188a0:	e7f2      	b.n	8018888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80188a2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80188a6:	4283      	cmp	r3, r0
 80188a8:	d805      	bhi.n	80188b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80188aa:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80188ae:	4283      	cmp	r3, r0
 80188b0:	f4ff af2f 	bcc.w	8018712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80188b4:	e754      	b.n	8018760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80188b6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80188ba:	4283      	cmp	r3, r0
 80188bc:	e7af      	b.n	801881e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80188be:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80188c2:	4617      	mov	r7, r2
 80188c4:	f102 0808 	add.w	r8, r2, #8
 80188c8:	4666      	mov	r6, ip
 80188ca:	6838      	ldr	r0, [r7, #0]
 80188cc:	3708      	adds	r7, #8
 80188ce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80188d2:	46e6      	mov	lr, ip
 80188d4:	4547      	cmp	r7, r8
 80188d6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80188da:	46f4      	mov	ip, lr
 80188dc:	d1f5      	bne.n	80188ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80188de:	6838      	ldr	r0, [r7, #0]
 80188e0:	f8ce 0000 	str.w	r0, [lr]
 80188e4:	88b9      	ldrh	r1, [r7, #4]
 80188e6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80188ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80188ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80188f2:	d009      	beq.n	8018908 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80188f4:	7b51      	ldrb	r1, [r2, #13]
 80188f6:	7992      	ldrb	r2, [r2, #6]
 80188f8:	0149      	lsls	r1, r1, #5
 80188fa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80188fe:	4311      	orrs	r1, r2
 8018900:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018904:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018908:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801890c:	b2ad      	uxth	r5, r5
 801890e:	d00d      	beq.n	801892c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018910:	442b      	add	r3, r5
 8018912:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8018916:	b29b      	uxth	r3, r3
 8018918:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801891c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018920:	10db      	asrs	r3, r3, #3
 8018922:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018926:	4313      	orrs	r3, r2
 8018928:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801892c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018930:	00cb      	lsls	r3, r1, #3
 8018932:	064f      	lsls	r7, r1, #25
 8018934:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018938:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801893c:	ea43 0302 	orr.w	r3, r3, r2
 8018940:	bf44      	itt	mi
 8018942:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018946:	b21b      	sxthmi	r3, r3
 8018948:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801894c:	1b5b      	subs	r3, r3, r5
 801894e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8018952:	4632      	mov	r2, r6
 8018954:	e6f9      	b.n	801874a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018956:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801895a:	4617      	mov	r7, r2
 801895c:	f102 0908 	add.w	r9, r2, #8
 8018960:	4666      	mov	r6, ip
 8018962:	6838      	ldr	r0, [r7, #0]
 8018964:	3708      	adds	r7, #8
 8018966:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801896a:	46e0      	mov	r8, ip
 801896c:	454f      	cmp	r7, r9
 801896e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018972:	46c4      	mov	ip, r8
 8018974:	d1f5      	bne.n	8018962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018976:	6838      	ldr	r0, [r7, #0]
 8018978:	f8c8 0000 	str.w	r0, [r8]
 801897c:	88b9      	ldrh	r1, [r7, #4]
 801897e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018982:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018986:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801898a:	d009      	beq.n	80189a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801898c:	7b51      	ldrb	r1, [r2, #13]
 801898e:	7992      	ldrb	r2, [r2, #6]
 8018990:	0149      	lsls	r1, r1, #5
 8018992:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018996:	4311      	orrs	r1, r2
 8018998:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801899c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80189a0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80189a4:	d00e      	beq.n	80189c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80189a6:	eba3 030e 	sub.w	r3, r3, lr
 80189aa:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80189ae:	b29b      	uxth	r3, r3
 80189b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80189b4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80189b8:	10db      	asrs	r3, r3, #3
 80189ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80189be:	4313      	orrs	r3, r2
 80189c0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80189c4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80189c8:	00cb      	lsls	r3, r1, #3
 80189ca:	0648      	lsls	r0, r1, #25
 80189cc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80189d0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80189d4:	ea43 0302 	orr.w	r3, r3, r2
 80189d8:	bf44      	itt	mi
 80189da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80189de:	b21b      	sxthmi	r3, r3
 80189e0:	1b5d      	subs	r5, r3, r5
 80189e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80189e6:	e7b4      	b.n	8018952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080189e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80189e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189ec:	461e      	mov	r6, r3
 80189ee:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80189f0:	4604      	mov	r4, r0
 80189f2:	4617      	mov	r7, r2
 80189f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80189f8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80189fc:	f7ee fcec 	bl	80073d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018a00:	4605      	mov	r5, r0
 8018a02:	b918      	cbnz	r0, 8018a0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018a04:	6030      	str	r0, [r6, #0]
 8018a06:	4628      	mov	r0, r5
 8018a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	4601      	mov	r1, r0
 8018a10:	4638      	mov	r0, r7
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	4798      	blx	r3
 8018a16:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8018a1a:	4602      	mov	r2, r0
 8018a1c:	6030      	str	r0, [r6, #0]
 8018a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018a22:	d213      	bcs.n	8018a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018a24:	4643      	mov	r3, r8
 8018a26:	4639      	mov	r1, r7
 8018a28:	4620      	mov	r0, r4
 8018a2a:	f7ff fe39 	bl	80186a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018a2e:	6030      	str	r0, [r6, #0]
 8018a30:	6833      	ldr	r3, [r6, #0]
 8018a32:	b143      	cbz	r3, 8018a46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018a34:	7b5a      	ldrb	r2, [r3, #13]
 8018a36:	7a9b      	ldrb	r3, [r3, #10]
 8018a38:	0052      	lsls	r2, r2, #1
 8018a3a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8018a3e:	4313      	orrs	r3, r2
 8018a40:	bf0c      	ite	eq
 8018a42:	2301      	moveq	r3, #1
 8018a44:	2300      	movne	r3, #0
 8018a46:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8018a4a:	e7dc      	b.n	8018a06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018a4c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8018a54:	d804      	bhi.n	8018a60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018a56:	4639      	mov	r1, r7
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f7ff fce7 	bl	801842c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018a5e:	e7e6      	b.n	8018a2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018a60:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d0e3      	beq.n	8018a30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018a68:	f640 1302 	movw	r3, #2306	@ 0x902
 8018a6c:	429d      	cmp	r5, r3
 8018a6e:	d1df      	bne.n	8018a30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018a70:	4601      	mov	r1, r0
 8018a72:	4620      	mov	r0, r4
 8018a74:	f7ff fcaa 	bl	80183cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018a78:	e7d9      	b.n	8018a2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018a7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018a7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a7e:	461e      	mov	r6, r3
 8018a80:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018a82:	4604      	mov	r4, r0
 8018a84:	4617      	mov	r7, r2
 8018a86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018a8a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018a8e:	f7ee fca3 	bl	80073d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018a92:	4605      	mov	r5, r0
 8018a94:	b918      	cbnz	r0, 8018a9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018a96:	6030      	str	r0, [r6, #0]
 8018a98:	4628      	mov	r0, r5
 8018a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a9e:	683b      	ldr	r3, [r7, #0]
 8018aa0:	4601      	mov	r1, r0
 8018aa2:	4638      	mov	r0, r7
 8018aa4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018aa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018aac:	47c8      	blx	r9
 8018aae:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8018ab2:	4602      	mov	r2, r0
 8018ab4:	6030      	str	r0, [r6, #0]
 8018ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018aba:	d213      	bcs.n	8018ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018abc:	4643      	mov	r3, r8
 8018abe:	4639      	mov	r1, r7
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f7ff fded 	bl	80186a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018ac6:	6030      	str	r0, [r6, #0]
 8018ac8:	6833      	ldr	r3, [r6, #0]
 8018aca:	b143      	cbz	r3, 8018ade <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018acc:	7b5a      	ldrb	r2, [r3, #13]
 8018ace:	7a9b      	ldrb	r3, [r3, #10]
 8018ad0:	0052      	lsls	r2, r2, #1
 8018ad2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8018ad6:	4313      	orrs	r3, r2
 8018ad8:	bf0c      	ite	eq
 8018ada:	2301      	moveq	r3, #1
 8018adc:	2300      	movne	r3, #0
 8018ade:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8018ae2:	e7d9      	b.n	8018a98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8018ae4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8018ae8:	b29b      	uxth	r3, r3
 8018aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8018aec:	d804      	bhi.n	8018af8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018aee:	4639      	mov	r1, r7
 8018af0:	4620      	mov	r0, r4
 8018af2:	f7ff fc9b 	bl	801842c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018af6:	e7e6      	b.n	8018ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018af8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d0e3      	beq.n	8018ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018b00:	f640 1302 	movw	r3, #2306	@ 0x902
 8018b04:	429d      	cmp	r5, r3
 8018b06:	d1df      	bne.n	8018ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018b08:	4601      	mov	r1, r0
 8018b0a:	4620      	mov	r0, r4
 8018b0c:	f7ff fc5e 	bl	80183cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018b10:	e7d9      	b.n	8018ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08018b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018b12:	b510      	push	{r4, lr}
 8018b14:	4604      	mov	r4, r0
 8018b16:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8018b1a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018b1c:	b1e1      	cbz	r1, 8018b58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018b1e:	2b0a      	cmp	r3, #10
 8018b20:	d02d      	beq.n	8018b7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018b22:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018b24:	3901      	subs	r1, #1
 8018b26:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018b2a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8018b2c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8018b30:	1c51      	adds	r1, r2, #1
 8018b32:	b289      	uxth	r1, r1
 8018b34:	2901      	cmp	r1, #1
 8018b36:	bf8a      	itet	hi
 8018b38:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018b3c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8018b3e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8018b40:	1c5a      	adds	r2, r3, #1
 8018b42:	8722      	strh	r2, [r4, #56]	@ 0x38
 8018b44:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018b46:	4413      	add	r3, r2
 8018b48:	b29b      	uxth	r3, r3
 8018b4a:	2b09      	cmp	r3, #9
 8018b4c:	bf88      	it	hi
 8018b4e:	3b0a      	subhi	r3, #10
 8018b50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018b54:	8458      	strh	r0, [r3, #34]	@ 0x22
 8018b56:	e7de      	b.n	8018b16 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018b58:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018b5a:	2b0a      	cmp	r3, #10
 8018b5c:	d00f      	beq.n	8018b7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f7ff fbf3 	bl	801834a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018b64:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018b66:	1c5a      	adds	r2, r3, #1
 8018b68:	8722      	strh	r2, [r4, #56]	@ 0x38
 8018b6a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018b6c:	4413      	add	r3, r2
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	2b09      	cmp	r3, #9
 8018b72:	bf88      	it	hi
 8018b74:	3b0a      	subhi	r3, #10
 8018b76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018b7a:	8458      	strh	r0, [r3, #34]	@ 0x22
 8018b7c:	e7ec      	b.n	8018b58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018b7e:	bd10      	pop	{r4, pc}

08018b80 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018b80:	b538      	push	{r3, r4, r5, lr}
 8018b82:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018b84:	4604      	mov	r4, r0
 8018b86:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018b8a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8018b8c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8018b8e:	3a01      	subs	r2, #1
 8018b90:	8702      	strh	r2, [r0, #56]	@ 0x38
 8018b92:	1c5a      	adds	r2, r3, #1
 8018b94:	b292      	uxth	r2, r2
 8018b96:	2a09      	cmp	r2, #9
 8018b98:	bf8a      	itet	hi
 8018b9a:	3b09      	subhi	r3, #9
 8018b9c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8018b9e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8018ba0:	f7ff ffb7 	bl	8018b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018ba4:	8c23      	ldrh	r3, [r4, #32]
 8018ba6:	2b01      	cmp	r3, #1
 8018ba8:	bf9c      	itt	ls
 8018baa:	3301      	addls	r3, #1
 8018bac:	8423      	strhls	r3, [r4, #32]
 8018bae:	8be3      	ldrh	r3, [r4, #30]
 8018bb0:	b90b      	cbnz	r3, 8018bb6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018bb2:	2302      	movs	r3, #2
 8018bb4:	83e3      	strh	r3, [r4, #30]
 8018bb6:	8be3      	ldrh	r3, [r4, #30]
 8018bb8:	4628      	mov	r0, r5
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	83e3      	strh	r3, [r4, #30]
 8018bc0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018bc4:	8365      	strh	r5, [r4, #26]
 8018bc6:	bd38      	pop	{r3, r4, r5, pc}

08018bc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018bc8:	428a      	cmp	r2, r1
 8018bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bce:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8018bd0:	d932      	bls.n	8018c38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8018bd2:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8018bd4:	1a54      	subs	r4, r2, r1
 8018bd6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8018bda:	19ee      	adds	r6, r5, r7
 8018bdc:	fa1f fe84 	uxth.w	lr, r4
 8018be0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8018be4:	3e01      	subs	r6, #1
 8018be6:	b2b4      	uxth	r4, r6
 8018be8:	eba4 090e 	sub.w	r9, r4, lr
 8018bec:	fa1f f989 	uxth.w	r9, r9
 8018bf0:	2c09      	cmp	r4, #9
 8018bf2:	4626      	mov	r6, r4
 8018bf4:	bf88      	it	hi
 8018bf6:	f1a4 060a 	subhi.w	r6, r4, #10
 8018bfa:	f1bc 0f00 	cmp.w	ip, #0
 8018bfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8018c02:	bf08      	it	eq
 8018c04:	f04f 0c02 	moveq.w	ip, #2
 8018c08:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018c0c:	b2a4      	uxth	r4, r4
 8018c0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018c12:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8018c16:	454c      	cmp	r4, r9
 8018c18:	fa1f fc8c 	uxth.w	ip, ip
 8018c1c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018c20:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8018c24:	d1e4      	bne.n	8018bf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018c26:	eba5 050e 	sub.w	r5, r5, lr
 8018c2a:	eb0e 0408 	add.w	r4, lr, r8
 8018c2e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8018c32:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018c34:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8018c38:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8018c3a:	250a      	movs	r5, #10
 8018c3c:	1a64      	subs	r4, r4, r1
 8018c3e:	4439      	add	r1, r7
 8018c40:	b289      	uxth	r1, r1
 8018c42:	8704      	strh	r4, [r0, #56]	@ 0x38
 8018c44:	2909      	cmp	r1, #9
 8018c46:	bf88      	it	hi
 8018c48:	390a      	subhi	r1, #10
 8018c4a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8018c4c:	b18a      	cbz	r2, 8018c72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018c4e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8018c50:	3a01      	subs	r2, #1
 8018c52:	3101      	adds	r1, #1
 8018c54:	b292      	uxth	r2, r2
 8018c56:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018c5a:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018c5c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8018c5e:	b901      	cbnz	r1, 8018c62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8018c60:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018c62:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8018c64:	3901      	subs	r1, #1
 8018c66:	b289      	uxth	r1, r1
 8018c68:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8018c6a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018c6e:	844c      	strh	r4, [r1, #34]	@ 0x22
 8018c70:	e7ec      	b.n	8018c4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8018c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c76:	f7ff bf4c 	b.w	8018b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018c7a:	b570      	push	{r4, r5, r6, lr}
 8018c7c:	2500      	movs	r5, #0
 8018c7e:	4295      	cmp	r5, r2
 8018c80:	d011      	beq.n	8018ca6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018c82:	8bc4      	ldrh	r4, [r0, #30]
 8018c84:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018c88:	4414      	add	r4, r2
 8018c8a:	3c01      	subs	r4, #1
 8018c8c:	1b64      	subs	r4, r4, r5
 8018c8e:	b2a4      	uxth	r4, r4
 8018c90:	2c01      	cmp	r4, #1
 8018c92:	bf88      	it	hi
 8018c94:	3c02      	subhi	r4, #2
 8018c96:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018c9a:	8b64      	ldrh	r4, [r4, #26]
 8018c9c:	42b4      	cmp	r4, r6
 8018c9e:	d117      	bne.n	8018cd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018ca0:	3501      	adds	r5, #1
 8018ca2:	b2ad      	uxth	r5, r5
 8018ca4:	e7eb      	b.n	8018c7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018ca6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018caa:	2400      	movs	r4, #0
 8018cac:	4413      	add	r3, r2
 8018cae:	b2a2      	uxth	r2, r4
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	da0f      	bge.n	8018cd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018cb4:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8018cb6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018cba:	3401      	adds	r4, #1
 8018cbc:	4432      	add	r2, r6
 8018cbe:	b292      	uxth	r2, r2
 8018cc0:	2a09      	cmp	r2, #9
 8018cc2:	bf88      	it	hi
 8018cc4:	3a0a      	subhi	r2, #10
 8018cc6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018cca:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8018ccc:	42aa      	cmp	r2, r5
 8018cce:	d0ee      	beq.n	8018cae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018cd0:	2000      	movs	r0, #0
 8018cd2:	bd70      	pop	{r4, r5, r6, pc}
 8018cd4:	2001      	movs	r0, #1
 8018cd6:	e7fc      	b.n	8018cd2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018cd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cdc:	4605      	mov	r5, r0
 8018cde:	4616      	mov	r6, r2
 8018ce0:	1c8c      	adds	r4, r1, #2
 8018ce2:	8809      	ldrh	r1, [r1, #0]
 8018ce4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018ce8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018cec:	42b3      	cmp	r3, r6
 8018cee:	d124      	bne.n	8018d3a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018cf0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018cf4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018cf8:	f001 070f 	and.w	r7, r1, #15
 8018cfc:	4652      	mov	r2, sl
 8018cfe:	f8cd 8000 	str.w	r8, [sp]
 8018d02:	464b      	mov	r3, r9
 8018d04:	4621      	mov	r1, r4
 8018d06:	4628      	mov	r0, r5
 8018d08:	f7ff ffb7 	bl	8018c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018d0c:	4683      	mov	fp, r0
 8018d0e:	b168      	cbz	r0, 8018d2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018d10:	eb0a 0109 	add.w	r1, sl, r9
 8018d14:	463a      	mov	r2, r7
 8018d16:	4628      	mov	r0, r5
 8018d18:	4441      	add	r1, r8
 8018d1a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018d1e:	4649      	mov	r1, r9
 8018d20:	f7ff ff52 	bl	8018bc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018d24:	4658      	mov	r0, fp
 8018d26:	b003      	add	sp, #12
 8018d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2c:	eb07 010a 	add.w	r1, r7, sl
 8018d30:	4449      	add	r1, r9
 8018d32:	4441      	add	r1, r8
 8018d34:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018d38:	e7d2      	b.n	8018ce0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018d3a:	f04f 0b00 	mov.w	fp, #0
 8018d3e:	e7f1      	b.n	8018d24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018d40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018d40:	b570      	push	{r4, r5, r6, lr}
 8018d42:	8810      	ldrh	r0, [r2, #0]
 8018d44:	4298      	cmp	r0, r3
 8018d46:	d817      	bhi.n	8018d78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018d48:	1e48      	subs	r0, r1, #1
 8018d4a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018d4e:	4298      	cmp	r0, r3
 8018d50:	d312      	bcc.n	8018d78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018d52:	2400      	movs	r4, #0
 8018d54:	428c      	cmp	r4, r1
 8018d56:	d20f      	bcs.n	8018d78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018d58:	1860      	adds	r0, r4, r1
 8018d5a:	1040      	asrs	r0, r0, #1
 8018d5c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018d60:	0085      	lsls	r5, r0, #2
 8018d62:	42b3      	cmp	r3, r6
 8018d64:	d902      	bls.n	8018d6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018d66:	3001      	adds	r0, #1
 8018d68:	b284      	uxth	r4, r0
 8018d6a:	e7f3      	b.n	8018d54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018d6c:	d201      	bcs.n	8018d72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018d6e:	b281      	uxth	r1, r0
 8018d70:	e7f0      	b.n	8018d54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018d72:	442a      	add	r2, r5
 8018d74:	8850      	ldrh	r0, [r2, #2]
 8018d76:	bd70      	pop	{r4, r5, r6, pc}
 8018d78:	2000      	movs	r0, #0
 8018d7a:	e7fc      	b.n	8018d76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018d7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d80:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8018d82:	4604      	mov	r4, r0
 8018d84:	260b      	movs	r6, #11
 8018d86:	886f      	ldrh	r7, [r5, #2]
 8018d88:	087f      	lsrs	r7, r7, #1
 8018d8a:	3e01      	subs	r6, #1
 8018d8c:	d013      	beq.n	8018db6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018d8e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018d90:	462a      	mov	r2, r5
 8018d92:	4639      	mov	r1, r7
 8018d94:	4620      	mov	r0, r4
 8018d96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018d9a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018d9e:	4643      	mov	r3, r8
 8018da0:	f7ff ffce 	bl	8018d40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018da4:	b138      	cbz	r0, 8018db6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018da6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018daa:	4642      	mov	r2, r8
 8018dac:	4620      	mov	r0, r4
 8018dae:	f7ff ff93 	bl	8018cd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018db2:	2800      	cmp	r0, #0
 8018db4:	d1e9      	bne.n	8018d8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018dbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018dbc:	b570      	push	{r4, r5, r6, lr}
 8018dbe:	694a      	ldr	r2, [r1, #20]
 8018dc0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8018dc2:	684b      	ldr	r3, [r1, #4]
 8018dc4:	1b54      	subs	r4, r2, r5
 8018dc6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8018dc8:	f000 8106 	beq.w	8018fd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018dcc:	1b9b      	subs	r3, r3, r6
 8018dce:	d003      	beq.n	8018dd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018dd0:	4363      	muls	r3, r4
 8018dd2:	2210      	movs	r2, #16
 8018dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8018dd8:	680c      	ldr	r4, [r1, #0]
 8018dda:	698a      	ldr	r2, [r1, #24]
 8018ddc:	1b65      	subs	r5, r4, r5
 8018dde:	f000 80fd 	beq.w	8018fdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8018de2:	1b92      	subs	r2, r2, r6
 8018de4:	d003      	beq.n	8018dee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018de6:	436a      	muls	r2, r5
 8018de8:	2410      	movs	r4, #16
 8018dea:	fb92 f2f4 	sdiv	r2, r2, r4
 8018dee:	1a9b      	subs	r3, r3, r2
 8018df0:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8019018 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018df4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018df8:	460a      	mov	r2, r1
 8018dfa:	ee07 3a90 	vmov	s15, r3
 8018dfe:	f100 040c 	add.w	r4, r0, #12
 8018e02:	4603      	mov	r3, r0
 8018e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e08:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018e0c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018e10:	eeb1 6a43 	vneg.f32	s12, s6
 8018e14:	edd2 7a02 	vldr	s15, [r2, #8]
 8018e18:	3214      	adds	r2, #20
 8018e1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018e1e:	ece3 6a01 	vstmia	r3!, {s13}
 8018e22:	429c      	cmp	r4, r3
 8018e24:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018e28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018e2c:	edc3 7a02 	vstr	s15, [r3, #8]
 8018e30:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018e34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018e38:	edc3 7a05 	vstr	s15, [r3, #20]
 8018e3c:	d1ea      	bne.n	8018e14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018e3e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018e40:	698b      	ldr	r3, [r1, #24]
 8018e42:	edd0 4a02 	vldr	s9, [r0, #8]
 8018e46:	1a9b      	subs	r3, r3, r2
 8018e48:	edd0 3a00 	vldr	s7, [r0]
 8018e4c:	edd0 6a01 	vldr	s13, [r0, #4]
 8018e50:	ee07 3a90 	vmov	s15, r3
 8018e54:	684b      	ldr	r3, [r1, #4]
 8018e56:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018e5a:	ed90 5a05 	vldr	s10, [r0, #20]
 8018e5e:	1a9b      	subs	r3, r3, r2
 8018e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e64:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018e68:	ed90 2a03 	vldr	s4, [r0, #12]
 8018e6c:	ee07 3a10 	vmov	s14, r3
 8018e70:	edd0 5a04 	vldr	s11, [r0, #16]
 8018e74:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018e78:	ed90 1a07 	vldr	s2, [r0, #28]
 8018e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e80:	edd0 2a06 	vldr	s5, [r0, #24]
 8018e84:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018e88:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018e8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018e90:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018e94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e98:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018e9c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8018ea0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018ea2:	694a      	ldr	r2, [r1, #20]
 8018ea4:	1b13      	subs	r3, r2, r4
 8018ea6:	ee07 3a10 	vmov	s14, r3
 8018eaa:	680b      	ldr	r3, [r1, #0]
 8018eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018eb0:	1b1b      	subs	r3, r3, r4
 8018eb2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018eb6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018eba:	ee07 3a10 	vmov	s14, r3
 8018ebe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018ec6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018eca:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018ece:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8018ed2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018ed4:	698b      	ldr	r3, [r1, #24]
 8018ed6:	1a9b      	subs	r3, r3, r2
 8018ed8:	ee06 3a90 	vmov	s13, r3
 8018edc:	684b      	ldr	r3, [r1, #4]
 8018ede:	1a9b      	subs	r3, r3, r2
 8018ee0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018ee4:	ee07 3a10 	vmov	s14, r3
 8018ee8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ef0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018ef4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018ef8:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018efc:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018f00:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8018f04:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018f06:	694a      	ldr	r2, [r1, #20]
 8018f08:	1b13      	subs	r3, r2, r4
 8018f0a:	ee07 3a10 	vmov	s14, r3
 8018f0e:	680b      	ldr	r3, [r1, #0]
 8018f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f14:	1b1b      	subs	r3, r3, r4
 8018f16:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018f1a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018f1e:	ee07 3a10 	vmov	s14, r3
 8018f22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018f2a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018f2e:	edd0 5a08 	vldr	s11, [r0, #32]
 8018f32:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018f36:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018f3a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018f3e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8018f42:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018f44:	698b      	ldr	r3, [r1, #24]
 8018f46:	1a9b      	subs	r3, r3, r2
 8018f48:	ee07 3a10 	vmov	s14, r3
 8018f4c:	684b      	ldr	r3, [r1, #4]
 8018f4e:	1a9b      	subs	r3, r3, r2
 8018f50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f54:	ee01 3a90 	vmov	s3, r3
 8018f58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018f5c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018f60:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018f64:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018f68:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018f6c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018f70:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018f74:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018f76:	694a      	ldr	r2, [r1, #20]
 8018f78:	1b13      	subs	r3, r2, r4
 8018f7a:	ee03 3a10 	vmov	s6, r3
 8018f7e:	680b      	ldr	r3, [r1, #0]
 8018f80:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018f84:	1b1b      	subs	r3, r3, r4
 8018f86:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018f8a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018f8e:	ee03 3a10 	vmov	s6, r3
 8018f92:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018f96:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018f9a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018f9e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018fa2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018fa6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8018faa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018fae:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fb6:	dd13      	ble.n	8018fe0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018fb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018fbc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018fc0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018fc2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fce:	dd15      	ble.n	8018ffc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018fd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018fd4:	6403      	str	r3, [r0, #64]	@ 0x40
 8018fd6:	bd70      	pop	{r4, r5, r6, pc}
 8018fd8:	4623      	mov	r3, r4
 8018fda:	e6fd      	b.n	8018dd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018fdc:	462a      	mov	r2, r5
 8018fde:	e706      	b.n	8018dee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018fe0:	d502      	bpl.n	8018fe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018fe2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018fe6:	e7e9      	b.n	8018fbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018fe8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018fec:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018ff0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff8:	dade      	bge.n	8018fb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018ffa:	e7f2      	b.n	8018fe2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018ffc:	d502      	bpl.n	8019004 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018ffe:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019002:	e7e7      	b.n	8018fd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019004:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019008:	eee3 4a86 	vfma.f32	s9, s7, s12
 801900c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019014:	dadc      	bge.n	8018fd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019016:	e7f2      	b.n	8018ffe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019018:	3d800000 	.word	0x3d800000

0801901c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019020:	2714      	movs	r7, #20
 8019022:	435f      	muls	r7, r3
 8019024:	eb02 0c07 	add.w	ip, r2, r7
 8019028:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801902c:	f115 0e0f 	adds.w	lr, r5, #15
 8019030:	f100 80a2 	bmi.w	8019178 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019034:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019038:	9c08      	ldr	r4, [sp, #32]
 801903a:	2614      	movs	r6, #20
 801903c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019040:	4366      	muls	r6, r4
 8019042:	eb02 0806 	add.w	r8, r2, r6
 8019046:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801904a:	f115 040f 	adds.w	r4, r5, #15
 801904e:	f100 809f 	bmi.w	8019190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019052:	1124      	asrs	r4, r4, #4
 8019054:	eba4 040e 	sub.w	r4, r4, lr
 8019058:	6184      	str	r4, [r0, #24]
 801905a:	2c00      	cmp	r4, #0
 801905c:	f000 808a 	beq.w	8019174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019060:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019064:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019068:	5995      	ldr	r5, [r2, r6]
 801906a:	eba4 0809 	sub.w	r8, r4, r9
 801906e:	59d4      	ldr	r4, [r2, r7]
 8019070:	eba5 0a04 	sub.w	sl, r5, r4
 8019074:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019078:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801907c:	fb0e fe05 	mul.w	lr, lr, r5
 8019080:	fb0a ee19 	mls	lr, sl, r9, lr
 8019084:	fb08 e404 	mla	r4, r8, r4, lr
 8019088:	3c01      	subs	r4, #1
 801908a:	19a4      	adds	r4, r4, r6
 801908c:	f100 808c 	bmi.w	80191a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019090:	fb94 fef6 	sdiv	lr, r4, r6
 8019094:	fb06 441e 	mls	r4, r6, lr, r4
 8019098:	f8c0 e000 	str.w	lr, [r0]
 801909c:	6104      	str	r4, [r0, #16]
 801909e:	2d00      	cmp	r5, #0
 80190a0:	f2c0 8095 	blt.w	80191ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80190a4:	fb95 f4f6 	sdiv	r4, r5, r6
 80190a8:	fb06 5514 	mls	r5, r6, r4, r5
 80190ac:	6044      	str	r4, [r0, #4]
 80190ae:	6085      	str	r5, [r0, #8]
 80190b0:	60c6      	str	r6, [r0, #12]
 80190b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80190b6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80190ba:	6945      	ldr	r5, [r0, #20]
 80190bc:	59d2      	ldr	r2, [r2, r7]
 80190be:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80190c2:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80191f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80190c6:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80190ca:	ee07 4a10 	vmov	s14, r4
 80190ce:	6804      	ldr	r4, [r0, #0]
 80190d0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80190d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80190d8:	ee07 2a90 	vmov	s15, r2
 80190dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80190e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80190e8:	edd3 6a00 	vldr	s13, [r3]
 80190ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 80190f0:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80190f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80190f8:	edc0 6a07 	vstr	s13, [r0, #28]
 80190fc:	edd0 6a01 	vldr	s13, [r0, #4]
 8019100:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8019104:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019108:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801910c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019110:	ed80 6a08 	vstr	s12, [r0, #32]
 8019114:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8019116:	6242      	str	r2, [r0, #36]	@ 0x24
 8019118:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801911c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019120:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019124:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019128:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801912c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8019130:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019134:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8019138:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801913c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8019140:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019142:	6302      	str	r2, [r0, #48]	@ 0x30
 8019144:	ed93 6a06 	vldr	s12, [r3, #24]
 8019148:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801914c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019150:	eeb0 7a46 	vmov.f32	s14, s12
 8019154:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8019158:	eea6 7a27 	vfma.f32	s14, s12, s15
 801915c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019160:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8019164:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8019168:	eee6 7a87 	vfma.f32	s15, s13, s14
 801916c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019170:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019172:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019178:	2410      	movs	r4, #16
 801917a:	f1c5 0501 	rsb	r5, r5, #1
 801917e:	fb9e fef4 	sdiv	lr, lr, r4
 8019182:	f015 050f 	ands.w	r5, r5, #15
 8019186:	bf18      	it	ne
 8019188:	2501      	movne	r5, #1
 801918a:	ebae 0e05 	sub.w	lr, lr, r5
 801918e:	e753      	b.n	8019038 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019190:	f04f 0910 	mov.w	r9, #16
 8019194:	f1c5 0501 	rsb	r5, r5, #1
 8019198:	fb94 f4f9 	sdiv	r4, r4, r9
 801919c:	f015 050f 	ands.w	r5, r5, #15
 80191a0:	bf18      	it	ne
 80191a2:	2501      	movne	r5, #1
 80191a4:	1b64      	subs	r4, r4, r5
 80191a6:	e755      	b.n	8019054 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80191a8:	4264      	negs	r4, r4
 80191aa:	fb94 fef6 	sdiv	lr, r4, r6
 80191ae:	f1ce 0800 	rsb	r8, lr, #0
 80191b2:	fb06 441e 	mls	r4, r6, lr, r4
 80191b6:	f8c0 8000 	str.w	r8, [r0]
 80191ba:	6104      	str	r4, [r0, #16]
 80191bc:	2c00      	cmp	r4, #0
 80191be:	f43f af6e 	beq.w	801909e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80191c2:	ea6f 0e0e 	mvn.w	lr, lr
 80191c6:	1b34      	subs	r4, r6, r4
 80191c8:	f8c0 e000 	str.w	lr, [r0]
 80191cc:	e766      	b.n	801909c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80191ce:	426d      	negs	r5, r5
 80191d0:	fb95 f4f6 	sdiv	r4, r5, r6
 80191d4:	f1c4 0e00 	rsb	lr, r4, #0
 80191d8:	fb06 5514 	mls	r5, r6, r4, r5
 80191dc:	f8c0 e004 	str.w	lr, [r0, #4]
 80191e0:	6085      	str	r5, [r0, #8]
 80191e2:	2d00      	cmp	r5, #0
 80191e4:	f43f af64 	beq.w	80190b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80191e8:	43e4      	mvns	r4, r4
 80191ea:	1b75      	subs	r5, r6, r5
 80191ec:	6044      	str	r4, [r0, #4]
 80191ee:	e75e      	b.n	80190ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80191f0:	3d800000 	.word	0x3d800000

080191f4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80191f4:	4602      	mov	r2, r0
 80191f6:	b148      	cbz	r0, 801920c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80191f8:	2300      	movs	r3, #0
 80191fa:	b298      	uxth	r0, r3
 80191fc:	3301      	adds	r3, #1
 80191fe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019202:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8019206:	2900      	cmp	r1, #0
 8019208:	d1f7      	bne.n	80191fa <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801920a:	4770      	bx	lr
 801920c:	4770      	bx	lr

0801920e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801920e:	b530      	push	{r4, r5, lr}
 8019210:	4604      	mov	r4, r0
 8019212:	b159      	cbz	r1, 801922c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8019214:	b148      	cbz	r0, 801922a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019216:	2300      	movs	r3, #0
 8019218:	b298      	uxth	r0, r3
 801921a:	4282      	cmp	r2, r0
 801921c:	d905      	bls.n	801922a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801921e:	5ccd      	ldrb	r5, [r1, r3]
 8019220:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019224:	3301      	adds	r3, #1
 8019226:	2d00      	cmp	r5, #0
 8019228:	d1f6      	bne.n	8019218 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801922a:	bd30      	pop	{r4, r5, pc}
 801922c:	4608      	mov	r0, r1
 801922e:	e7fc      	b.n	801922a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08019230 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8019230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019232:	b08b      	sub	sp, #44	@ 0x2c
 8019234:	468c      	mov	ip, r1
 8019236:	4604      	mov	r4, r0
 8019238:	2100      	movs	r1, #0
 801923a:	261f      	movs	r6, #31
 801923c:	af01      	add	r7, sp, #4
 801923e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8019242:	1e71      	subs	r1, r6, #1
 8019244:	fb94 fef3 	sdiv	lr, r4, r3
 8019248:	fb03 441e 	mls	r4, r3, lr, r4
 801924c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8019250:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8019254:	b2ec      	uxtb	r4, r5
 8019256:	2d09      	cmp	r5, #9
 8019258:	bfd4      	ite	le
 801925a:	3430      	addle	r4, #48	@ 0x30
 801925c:	3457      	addgt	r4, #87	@ 0x57
 801925e:	b2e4      	uxtb	r4, r4
 8019260:	55bc      	strb	r4, [r7, r6]
 8019262:	4674      	mov	r4, lr
 8019264:	b974      	cbnz	r4, 8019284 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8019266:	2800      	cmp	r0, #0
 8019268:	da05      	bge.n	8019276 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801926a:	ab0a      	add	r3, sp, #40	@ 0x28
 801926c:	4419      	add	r1, r3
 801926e:	232d      	movs	r3, #45	@ 0x2d
 8019270:	f801 3c24 	strb.w	r3, [r1, #-36]
 8019274:	1eb1      	subs	r1, r6, #2
 8019276:	3101      	adds	r1, #1
 8019278:	4660      	mov	r0, ip
 801927a:	4439      	add	r1, r7
 801927c:	f7ff ffc7 	bl	801920e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019280:	b00b      	add	sp, #44	@ 0x2c
 8019282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019284:	460e      	mov	r6, r1
 8019286:	e7dc      	b.n	8019242 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

08019288 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8019288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801928a:	468c      	mov	ip, r1
 801928c:	b08b      	sub	sp, #44	@ 0x2c
 801928e:	2100      	movs	r1, #0
 8019290:	ae01      	add	r6, sp, #4
 8019292:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8019296:	211f      	movs	r1, #31
 8019298:	fbb0 f7f3 	udiv	r7, r0, r3
 801929c:	fb03 0517 	mls	r5, r3, r7, r0
 80192a0:	4638      	mov	r0, r7
 80192a2:	b2ec      	uxtb	r4, r5
 80192a4:	2d09      	cmp	r5, #9
 80192a6:	bfd4      	ite	le
 80192a8:	3430      	addle	r4, #48	@ 0x30
 80192aa:	3457      	addgt	r4, #87	@ 0x57
 80192ac:	b2e4      	uxtb	r4, r4
 80192ae:	558c      	strb	r4, [r1, r6]
 80192b0:	1e4c      	subs	r4, r1, #1
 80192b2:	b92f      	cbnz	r7, 80192c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80192b4:	4431      	add	r1, r6
 80192b6:	4660      	mov	r0, ip
 80192b8:	f7ff ffa9 	bl	801920e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80192bc:	b00b      	add	sp, #44	@ 0x2c
 80192be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192c0:	4621      	mov	r1, r4
 80192c2:	e7e9      	b.n	8019298 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080192c4 <_ZN8touchgfx7Unicode4itoaElPtti>:
 80192c4:	b410      	push	{r4}
 80192c6:	b131      	cbz	r1, 80192d6 <_ZN8touchgfx7Unicode4itoaElPtti+0x12>
 80192c8:	1e9c      	subs	r4, r3, #2
 80192ca:	2c22      	cmp	r4, #34	@ 0x22
 80192cc:	d803      	bhi.n	80192d6 <_ZN8touchgfx7Unicode4itoaElPtti+0x12>
 80192ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192d2:	f7ff bfad 	b.w	8019230 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 80192d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192da:	4770      	bx	lr

080192dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80192dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e0:	b085      	sub	sp, #20
 80192e2:	4691      	mov	r9, r2
 80192e4:	6802      	ldr	r2, [r0, #0]
 80192e6:	4688      	mov	r8, r1
 80192e8:	461c      	mov	r4, r3
 80192ea:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 80192ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 80192f2:	4683      	mov	fp, r0
 80192f4:	4610      	mov	r0, r2
 80192f6:	9103      	str	r1, [sp, #12]
 80192f8:	9302      	str	r3, [sp, #8]
 80192fa:	9201      	str	r2, [sp, #4]
 80192fc:	f7ff ff7a 	bl	80191f4 <_ZN8touchgfx7Unicode6strlenEPKt>
 8019300:	f1b8 0f00 	cmp.w	r8, #0
 8019304:	bf0c      	ite	eq
 8019306:	4684      	moveq	ip, r0
 8019308:	f100 0c01 	addne.w	ip, r0, #1
 801930c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8019310:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8019314:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019316:	fa1f fc8c 	uxth.w	ip, ip
 801931a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801931c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8019320:	9903      	ldr	r1, [sp, #12]
 8019322:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019326:	d041      	beq.n	80193ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8019328:	d834      	bhi.n	8019394 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801932a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801932e:	d059      	beq.n	80193e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8019330:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8019334:	d03a      	beq.n	80193ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8019336:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801933a:	d034      	beq.n	80193a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801933c:	2400      	movs	r4, #0
 801933e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8019342:	3a01      	subs	r2, #1
 8019344:	b169      	cbz	r1, 8019362 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019346:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019348:	458c      	cmp	ip, r1
 801934a:	da09      	bge.n	8019360 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801934c:	eba1 010c 	sub.w	r1, r1, ip
 8019350:	b289      	uxth	r1, r1
 8019352:	b933      	cbnz	r3, 8019362 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019354:	2e00      	cmp	r6, #0
 8019356:	d051      	beq.n	80193fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8019358:	2800      	cmp	r0, #0
 801935a:	d04f      	beq.n	80193fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801935c:	440c      	add	r4, r1
 801935e:	b2a4      	uxth	r4, r4
 8019360:	2100      	movs	r1, #0
 8019362:	682b      	ldr	r3, [r5, #0]
 8019364:	4293      	cmp	r3, r2
 8019366:	da07      	bge.n	8019378 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8019368:	f1b8 0f00 	cmp.w	r8, #0
 801936c:	d004      	beq.n	8019378 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801936e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8019372:	682b      	ldr	r3, [r5, #0]
 8019374:	3301      	adds	r3, #1
 8019376:	602b      	str	r3, [r5, #0]
 8019378:	2730      	movs	r7, #48	@ 0x30
 801937a:	2c00      	cmp	r4, #0
 801937c:	d04e      	beq.n	801941c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801937e:	682e      	ldr	r6, [r5, #0]
 8019380:	3c01      	subs	r4, #1
 8019382:	42b2      	cmp	r2, r6
 8019384:	b2a4      	uxth	r4, r4
 8019386:	dd49      	ble.n	801941c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019388:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801938c:	682b      	ldr	r3, [r5, #0]
 801938e:	3301      	adds	r3, #1
 8019390:	602b      	str	r3, [r5, #0]
 8019392:	e7f2      	b.n	801937a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8019394:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8019398:	d01d      	beq.n	80193d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801939a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801939e:	d002      	beq.n	80193a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80193a0:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 80193a4:	e7c9      	b.n	801933a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80193a6:	4684      	mov	ip, r0
 80193a8:	f04f 0800 	mov.w	r8, #0
 80193ac:	2c00      	cmp	r4, #0
 80193ae:	d0c6      	beq.n	801933e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80193b0:	b947      	cbnz	r7, 80193c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80193b2:	2801      	cmp	r0, #1
 80193b4:	d106      	bne.n	80193c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80193b6:	8814      	ldrh	r4, [r2, #0]
 80193b8:	2c30      	cmp	r4, #48	@ 0x30
 80193ba:	bf02      	ittt	eq
 80193bc:	3202      	addeq	r2, #2
 80193be:	4638      	moveq	r0, r7
 80193c0:	f8cb 2000 	streq.w	r2, [fp]
 80193c4:	45bc      	cmp	ip, r7
 80193c6:	da14      	bge.n	80193f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80193c8:	b2bf      	uxth	r7, r7
 80193ca:	eba7 040c 	sub.w	r4, r7, ip
 80193ce:	46bc      	mov	ip, r7
 80193d0:	b2a4      	uxth	r4, r4
 80193d2:	2600      	movs	r6, #0
 80193d4:	e7b3      	b.n	801933e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80193d6:	4684      	mov	ip, r0
 80193d8:	b16c      	cbz	r4, 80193f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80193da:	42b8      	cmp	r0, r7
 80193dc:	dd00      	ble.n	80193e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80193de:	b2b8      	uxth	r0, r7
 80193e0:	2400      	movs	r4, #0
 80193e2:	e003      	b.n	80193ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80193e4:	f04f 0c01 	mov.w	ip, #1
 80193e8:	2400      	movs	r4, #0
 80193ea:	4660      	mov	r0, ip
 80193ec:	4626      	mov	r6, r4
 80193ee:	46a0      	mov	r8, r4
 80193f0:	e7a5      	b.n	801933e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80193f2:	2400      	movs	r4, #0
 80193f4:	e7ed      	b.n	80193d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80193f6:	4626      	mov	r6, r4
 80193f8:	46a0      	mov	r8, r4
 80193fa:	e7a0      	b.n	801933e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80193fc:	2900      	cmp	r1, #0
 80193fe:	d0b0      	beq.n	8019362 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019400:	2720      	movs	r7, #32
 8019402:	682e      	ldr	r6, [r5, #0]
 8019404:	2900      	cmp	r1, #0
 8019406:	d0ac      	beq.n	8019362 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019408:	3901      	subs	r1, #1
 801940a:	4296      	cmp	r6, r2
 801940c:	b289      	uxth	r1, r1
 801940e:	daa7      	bge.n	8019360 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8019410:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019414:	682b      	ldr	r3, [r5, #0]
 8019416:	3301      	adds	r3, #1
 8019418:	602b      	str	r3, [r5, #0]
 801941a:	e7f2      	b.n	8019402 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801941c:	b188      	cbz	r0, 8019442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801941e:	682b      	ldr	r3, [r5, #0]
 8019420:	3801      	subs	r0, #1
 8019422:	429a      	cmp	r2, r3
 8019424:	b280      	uxth	r0, r0
 8019426:	dd0c      	ble.n	8019442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8019428:	f8db 3000 	ldr.w	r3, [fp]
 801942c:	1c9c      	adds	r4, r3, #2
 801942e:	f8cb 4000 	str.w	r4, [fp]
 8019432:	881c      	ldrh	r4, [r3, #0]
 8019434:	682b      	ldr	r3, [r5, #0]
 8019436:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801943a:	682b      	ldr	r3, [r5, #0]
 801943c:	3301      	adds	r3, #1
 801943e:	602b      	str	r3, [r5, #0]
 8019440:	e7ec      	b.n	801941c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019442:	2620      	movs	r6, #32
 8019444:	b151      	cbz	r1, 801945c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019446:	6828      	ldr	r0, [r5, #0]
 8019448:	3901      	subs	r1, #1
 801944a:	4282      	cmp	r2, r0
 801944c:	b289      	uxth	r1, r1
 801944e:	dd05      	ble.n	801945c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019450:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8019454:	682b      	ldr	r3, [r5, #0]
 8019456:	3301      	adds	r3, #1
 8019458:	602b      	str	r3, [r5, #0]
 801945a:	e7f3      	b.n	8019444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801945c:	b005      	add	sp, #20
 801945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019462 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8019462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019466:	2400      	movs	r4, #0
 8019468:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801946c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8019470:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8019474:	8014      	strh	r4, [r2, #0]
 8019476:	701c      	strb	r4, [r3, #0]
 8019478:	f888 4000 	strb.w	r4, [r8]
 801947c:	f88c 4000 	strb.w	r4, [ip]
 8019480:	f88e 4000 	strb.w	r4, [lr]
 8019484:	703c      	strb	r4, [r7, #0]
 8019486:	6804      	ldr	r4, [r0, #0]
 8019488:	b1a4      	cbz	r4, 80194b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801948a:	8824      	ldrh	r4, [r4, #0]
 801948c:	f04f 0901 	mov.w	r9, #1
 8019490:	b314      	cbz	r4, 80194d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019492:	2c2b      	cmp	r4, #43	@ 0x2b
 8019494:	d001      	beq.n	801949a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8019496:	2c20      	cmp	r4, #32
 8019498:	d110      	bne.n	80194bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801949a:	8014      	strh	r4, [r2, #0]
 801949c:	6804      	ldr	r4, [r0, #0]
 801949e:	b10c      	cbz	r4, 80194a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80194a0:	3402      	adds	r4, #2
 80194a2:	6004      	str	r4, [r0, #0]
 80194a4:	680c      	ldr	r4, [r1, #0]
 80194a6:	b10c      	cbz	r4, 80194ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80194a8:	3401      	adds	r4, #1
 80194aa:	600c      	str	r4, [r1, #0]
 80194ac:	6804      	ldr	r4, [r0, #0]
 80194ae:	b17c      	cbz	r4, 80194d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80194b0:	8824      	ldrh	r4, [r4, #0]
 80194b2:	e7ed      	b.n	8019490 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80194b4:	680c      	ldr	r4, [r1, #0]
 80194b6:	b17c      	cbz	r4, 80194d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80194b8:	7824      	ldrb	r4, [r4, #0]
 80194ba:	e7e7      	b.n	801948c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80194bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80194be:	d102      	bne.n	80194c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80194c0:	f883 9000 	strb.w	r9, [r3]
 80194c4:	e7ea      	b.n	801949c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80194c6:	2c23      	cmp	r4, #35	@ 0x23
 80194c8:	d107      	bne.n	80194da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80194ca:	f888 9000 	strb.w	r9, [r8]
 80194ce:	e7e5      	b.n	801949c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80194d0:	680c      	ldr	r4, [r1, #0]
 80194d2:	b10c      	cbz	r4, 80194d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80194d4:	7824      	ldrb	r4, [r4, #0]
 80194d6:	e7db      	b.n	8019490 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80194d8:	2400      	movs	r4, #0
 80194da:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80194de:	2b09      	cmp	r3, #9
 80194e0:	d901      	bls.n	80194e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80194e2:	2c2a      	cmp	r4, #42	@ 0x2a
 80194e4:	d122      	bne.n	801952c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80194e6:	2301      	movs	r3, #1
 80194e8:	2c30      	cmp	r4, #48	@ 0x30
 80194ea:	f88e 3000 	strb.w	r3, [lr]
 80194ee:	d10d      	bne.n	801950c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80194f0:	f88c 3000 	strb.w	r3, [ip]
 80194f4:	6803      	ldr	r3, [r0, #0]
 80194f6:	b10b      	cbz	r3, 80194fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80194f8:	3302      	adds	r3, #2
 80194fa:	6003      	str	r3, [r0, #0]
 80194fc:	680b      	ldr	r3, [r1, #0]
 80194fe:	b10b      	cbz	r3, 8019504 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8019500:	3301      	adds	r3, #1
 8019502:	600b      	str	r3, [r1, #0]
 8019504:	6803      	ldr	r3, [r0, #0]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d02f      	beq.n	801956a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801950a:	881c      	ldrh	r4, [r3, #0]
 801950c:	2c2a      	cmp	r4, #42	@ 0x2a
 801950e:	d135      	bne.n	801957c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019510:	f04f 33ff 	mov.w	r3, #4294967295
 8019514:	6033      	str	r3, [r6, #0]
 8019516:	6803      	ldr	r3, [r0, #0]
 8019518:	b10b      	cbz	r3, 801951e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801951a:	3302      	adds	r3, #2
 801951c:	6003      	str	r3, [r0, #0]
 801951e:	680b      	ldr	r3, [r1, #0]
 8019520:	b10b      	cbz	r3, 8019526 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8019522:	3301      	adds	r3, #1
 8019524:	600b      	str	r3, [r1, #0]
 8019526:	6803      	ldr	r3, [r0, #0]
 8019528:	b31b      	cbz	r3, 8019572 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801952a:	881c      	ldrh	r4, [r3, #0]
 801952c:	2c2e      	cmp	r4, #46	@ 0x2e
 801952e:	d11a      	bne.n	8019566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019530:	2301      	movs	r3, #1
 8019532:	703b      	strb	r3, [r7, #0]
 8019534:	6803      	ldr	r3, [r0, #0]
 8019536:	b10b      	cbz	r3, 801953c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8019538:	3302      	adds	r3, #2
 801953a:	6003      	str	r3, [r0, #0]
 801953c:	680b      	ldr	r3, [r1, #0]
 801953e:	b10b      	cbz	r3, 8019544 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8019540:	3301      	adds	r3, #1
 8019542:	600b      	str	r3, [r1, #0]
 8019544:	6803      	ldr	r3, [r0, #0]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d036      	beq.n	80195b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801954a:	881b      	ldrh	r3, [r3, #0]
 801954c:	2b2a      	cmp	r3, #42	@ 0x2a
 801954e:	d137      	bne.n	80195c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019550:	f04f 33ff 	mov.w	r3, #4294967295
 8019554:	602b      	str	r3, [r5, #0]
 8019556:	6803      	ldr	r3, [r0, #0]
 8019558:	b10b      	cbz	r3, 801955e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801955a:	3302      	adds	r3, #2
 801955c:	6003      	str	r3, [r0, #0]
 801955e:	680b      	ldr	r3, [r1, #0]
 8019560:	b10b      	cbz	r3, 8019566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019562:	3301      	adds	r3, #1
 8019564:	600b      	str	r3, [r1, #0]
 8019566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801956a:	680c      	ldr	r4, [r1, #0]
 801956c:	b134      	cbz	r4, 801957c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801956e:	7824      	ldrb	r4, [r4, #0]
 8019570:	e7cc      	b.n	801950c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019572:	680b      	ldr	r3, [r1, #0]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d0f6      	beq.n	8019566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019578:	781c      	ldrb	r4, [r3, #0]
 801957a:	e7d7      	b.n	801952c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801957c:	2300      	movs	r3, #0
 801957e:	220a      	movs	r2, #10
 8019580:	6033      	str	r3, [r6, #0]
 8019582:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019586:	fa1f f38c 	uxth.w	r3, ip
 801958a:	2b09      	cmp	r3, #9
 801958c:	d8ce      	bhi.n	801952c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801958e:	6833      	ldr	r3, [r6, #0]
 8019590:	fb02 c303 	mla	r3, r2, r3, ip
 8019594:	6033      	str	r3, [r6, #0]
 8019596:	6803      	ldr	r3, [r0, #0]
 8019598:	b10b      	cbz	r3, 801959e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801959a:	3302      	adds	r3, #2
 801959c:	6003      	str	r3, [r0, #0]
 801959e:	680b      	ldr	r3, [r1, #0]
 80195a0:	b10b      	cbz	r3, 80195a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80195a2:	3301      	adds	r3, #1
 80195a4:	600b      	str	r3, [r1, #0]
 80195a6:	6803      	ldr	r3, [r0, #0]
 80195a8:	b10b      	cbz	r3, 80195ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80195aa:	881c      	ldrh	r4, [r3, #0]
 80195ac:	e7e9      	b.n	8019582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80195ae:	680c      	ldr	r4, [r1, #0]
 80195b0:	2c00      	cmp	r4, #0
 80195b2:	d0e6      	beq.n	8019582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80195b4:	7824      	ldrb	r4, [r4, #0]
 80195b6:	e7e4      	b.n	8019582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80195b8:	680b      	ldr	r3, [r1, #0]
 80195ba:	b10b      	cbz	r3, 80195c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	e7c5      	b.n	801954c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80195c0:	2200      	movs	r2, #0
 80195c2:	240a      	movs	r4, #10
 80195c4:	602a      	str	r2, [r5, #0]
 80195c6:	3b30      	subs	r3, #48	@ 0x30
 80195c8:	682a      	ldr	r2, [r5, #0]
 80195ca:	b29e      	uxth	r6, r3
 80195cc:	2e09      	cmp	r6, #9
 80195ce:	d813      	bhi.n	80195f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80195d0:	fb04 3302 	mla	r3, r4, r2, r3
 80195d4:	602b      	str	r3, [r5, #0]
 80195d6:	6803      	ldr	r3, [r0, #0]
 80195d8:	b10b      	cbz	r3, 80195de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80195da:	3302      	adds	r3, #2
 80195dc:	6003      	str	r3, [r0, #0]
 80195de:	680b      	ldr	r3, [r1, #0]
 80195e0:	b10b      	cbz	r3, 80195e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80195e2:	3301      	adds	r3, #1
 80195e4:	600b      	str	r3, [r1, #0]
 80195e6:	6803      	ldr	r3, [r0, #0]
 80195e8:	b10b      	cbz	r3, 80195ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80195ea:	881b      	ldrh	r3, [r3, #0]
 80195ec:	e7eb      	b.n	80195c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80195ee:	680b      	ldr	r3, [r1, #0]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d0e8      	beq.n	80195c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80195f4:	781b      	ldrb	r3, [r3, #0]
 80195f6:	e7e6      	b.n	80195c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80195f8:	2a06      	cmp	r2, #6
 80195fa:	bfa8      	it	ge
 80195fc:	2206      	movge	r2, #6
 80195fe:	602a      	str	r2, [r5, #0]
 8019600:	e7b1      	b.n	8019566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08019602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8019602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019606:	b0a3      	sub	sp, #140	@ 0x8c
 8019608:	2600      	movs	r6, #0
 801960a:	4607      	mov	r7, r0
 801960c:	4688      	mov	r8, r1
 801960e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8019612:	4631      	mov	r1, r6
 8019614:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8019616:	4648      	mov	r0, r9
 8019618:	960d      	str	r6, [sp, #52]	@ 0x34
 801961a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801961e:	2242      	movs	r2, #66	@ 0x42
 8019620:	f00f fd8e 	bl	8029140 <memset>
 8019624:	b15f      	cbz	r7, 801963e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8019626:	f108 3aff 	add.w	sl, r8, #4294967295
 801962a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801962c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801962e:	b152      	cbz	r2, 8019646 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8019630:	8812      	ldrh	r2, [r2, #0]
 8019632:	b10a      	cbz	r2, 8019638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019634:	459a      	cmp	sl, r3
 8019636:	dc2e      	bgt.n	8019696 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8019638:	2200      	movs	r2, #0
 801963a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801963e:	4638      	mov	r0, r7
 8019640:	b023      	add	sp, #140	@ 0x8c
 8019642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019646:	9a08      	ldr	r2, [sp, #32]
 8019648:	2a00      	cmp	r2, #0
 801964a:	d0f5      	beq.n	8019638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801964c:	7812      	ldrb	r2, [r2, #0]
 801964e:	e7f0      	b.n	8019632 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8019650:	2d00      	cmp	r5, #0
 8019652:	d0ea      	beq.n	801962a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019654:	782a      	ldrb	r2, [r5, #0]
 8019656:	b142      	cbz	r2, 801966a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8019658:	2a25      	cmp	r2, #37	@ 0x25
 801965a:	d001      	beq.n	8019660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801965c:	459a      	cmp	sl, r3
 801965e:	dc08      	bgt.n	8019672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8019660:	f1bb 0f00 	cmp.w	fp, #0
 8019664:	d121      	bne.n	80196aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8019666:	2d00      	cmp	r5, #0
 8019668:	d0df      	beq.n	801962a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801966a:	782a      	ldrb	r2, [r5, #0]
 801966c:	f04f 0b00 	mov.w	fp, #0
 8019670:	e01d      	b.n	80196ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8019672:	f1bb 0f00 	cmp.w	fp, #0
 8019676:	d077      	beq.n	8019768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019678:	f8bb 2000 	ldrh.w	r2, [fp]
 801967c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019680:	f1bb 0f00 	cmp.w	fp, #0
 8019684:	d002      	beq.n	801968c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019686:	f10b 0202 	add.w	r2, fp, #2
 801968a:	9209      	str	r2, [sp, #36]	@ 0x24
 801968c:	b10d      	cbz	r5, 8019692 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801968e:	3501      	adds	r5, #1
 8019690:	9508      	str	r5, [sp, #32]
 8019692:	3301      	adds	r3, #1
 8019694:	930d      	str	r3, [sp, #52]	@ 0x34
 8019696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019698:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801969c:	f1bb 0f00 	cmp.w	fp, #0
 80196a0:	d0d6      	beq.n	8019650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80196a2:	f8bb 2000 	ldrh.w	r2, [fp]
 80196a6:	2a00      	cmp	r2, #0
 80196a8:	d1d6      	bne.n	8019658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80196aa:	f8bb 2000 	ldrh.w	r2, [fp]
 80196ae:	2a00      	cmp	r2, #0
 80196b0:	d0bb      	beq.n	801962a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80196b2:	459a      	cmp	sl, r3
 80196b4:	ddb9      	ble.n	801962a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80196b6:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 80196ba:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80196be:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 80196c2:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 80196c6:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 80196ca:	960e      	str	r6, [sp, #56]	@ 0x38
 80196cc:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 80196d0:	960f      	str	r6, [sp, #60]	@ 0x3c
 80196d2:	f1bb 0f00 	cmp.w	fp, #0
 80196d6:	d002      	beq.n	80196de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80196d8:	f10b 0302 	add.w	r3, fp, #2
 80196dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80196de:	b10d      	cbz	r5, 80196e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80196e0:	1c6b      	adds	r3, r5, #1
 80196e2:	9308      	str	r3, [sp, #32]
 80196e4:	ab0f      	add	r3, sp, #60	@ 0x3c
 80196e6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80196ea:	a908      	add	r1, sp, #32
 80196ec:	a809      	add	r0, sp, #36	@ 0x24
 80196ee:	9305      	str	r3, [sp, #20]
 80196f0:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 80196f4:	9304      	str	r3, [sp, #16]
 80196f6:	ab0e      	add	r3, sp, #56	@ 0x38
 80196f8:	9303      	str	r3, [sp, #12]
 80196fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80196fc:	9302      	str	r3, [sp, #8]
 80196fe:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8019702:	9301      	str	r3, [sp, #4]
 8019704:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8019708:	9300      	str	r3, [sp, #0]
 801970a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801970e:	f7ff fea8 	bl	8019462 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8019712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019714:	2b00      	cmp	r3, #0
 8019716:	bfbf      	itttt	lt
 8019718:	6823      	ldrlt	r3, [r4, #0]
 801971a:	3404      	addlt	r4, #4
 801971c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019720:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019724:	2b00      	cmp	r3, #0
 8019726:	bfbe      	ittt	lt
 8019728:	6823      	ldrlt	r3, [r4, #0]
 801972a:	3404      	addlt	r4, #4
 801972c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019730:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8019734:	bfb8      	it	lt
 8019736:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8019738:	b1d9      	cbz	r1, 8019772 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801973a:	880b      	ldrh	r3, [r1, #0]
 801973c:	2b69      	cmp	r3, #105	@ 0x69
 801973e:	d01f      	beq.n	8019780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019740:	d82f      	bhi.n	80197a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8019742:	2b58      	cmp	r3, #88	@ 0x58
 8019744:	d01c      	beq.n	8019780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019746:	d818      	bhi.n	801977a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8019748:	2b25      	cmp	r3, #37	@ 0x25
 801974a:	d034      	beq.n	80197b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801974c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801974e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8019752:	f1bb 0f00 	cmp.w	fp, #0
 8019756:	f000 80b7 	beq.w	80198c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801975a:	f8bb 5000 	ldrh.w	r5, [fp]
 801975e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8019762:	3301      	adds	r3, #1
 8019764:	930d      	str	r3, [sp, #52]	@ 0x34
 8019766:	e029      	b.n	80197bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019768:	b10d      	cbz	r5, 801976e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801976a:	782a      	ldrb	r2, [r5, #0]
 801976c:	e786      	b.n	801967c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801976e:	462a      	mov	r2, r5
 8019770:	e784      	b.n	801967c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019772:	2a00      	cmp	r2, #0
 8019774:	d0ea      	beq.n	801974c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019776:	7813      	ldrb	r3, [r2, #0]
 8019778:	e7e0      	b.n	801973c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801977a:	3b63      	subs	r3, #99	@ 0x63
 801977c:	2b01      	cmp	r3, #1
 801977e:	d8e5      	bhi.n	801974c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019780:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8019784:	b329      	cbz	r1, 80197d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8019786:	880b      	ldrh	r3, [r1, #0]
 8019788:	2b69      	cmp	r3, #105	@ 0x69
 801978a:	d063      	beq.n	8019854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801978c:	d825      	bhi.n	80197da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801978e:	2b63      	cmp	r3, #99	@ 0x63
 8019790:	d038      	beq.n	8019804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8019792:	2b64      	cmp	r3, #100	@ 0x64
 8019794:	d05e      	beq.n	8019854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019796:	2b58      	cmp	r3, #88	@ 0x58
 8019798:	d07a      	beq.n	8019890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801979a:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801979e:	4625      	mov	r5, r4
 80197a0:	e036      	b.n	8019810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80197a2:	2b73      	cmp	r3, #115	@ 0x73
 80197a4:	d0ec      	beq.n	8019780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80197a6:	d802      	bhi.n	80197ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80197a8:	2b6f      	cmp	r3, #111	@ 0x6f
 80197aa:	d1cf      	bne.n	801974c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80197ac:	e7e8      	b.n	8019780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80197ae:	2b75      	cmp	r3, #117	@ 0x75
 80197b0:	d0e6      	beq.n	8019780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80197b2:	2b78      	cmp	r3, #120	@ 0x78
 80197b4:	e7f9      	b.n	80197aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 80197b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80197b8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80197bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197be:	b10b      	cbz	r3, 80197c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 80197c0:	3302      	adds	r3, #2
 80197c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80197c4:	9b08      	ldr	r3, [sp, #32]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	f43f af2f 	beq.w	801962a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80197cc:	3301      	adds	r3, #1
 80197ce:	9308      	str	r3, [sp, #32]
 80197d0:	e72b      	b.n	801962a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80197d2:	2a00      	cmp	r2, #0
 80197d4:	d0e1      	beq.n	801979a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80197d6:	7813      	ldrb	r3, [r2, #0]
 80197d8:	e7d6      	b.n	8019788 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80197da:	2b73      	cmp	r3, #115	@ 0x73
 80197dc:	d036      	beq.n	801984c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80197de:	d807      	bhi.n	80197f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80197e0:	2b6f      	cmp	r3, #111	@ 0x6f
 80197e2:	d1da      	bne.n	801979a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80197e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80197e6:	1d25      	adds	r5, r4, #4
 80197e8:	2308      	movs	r3, #8
 80197ea:	eba8 0202 	sub.w	r2, r8, r2
 80197ee:	e049      	b.n	8019884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80197f0:	2b75      	cmp	r3, #117	@ 0x75
 80197f2:	d042      	beq.n	801987a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80197f4:	2b78      	cmp	r3, #120	@ 0x78
 80197f6:	d1d0      	bne.n	801979a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80197f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80197fa:	1d25      	adds	r5, r4, #4
 80197fc:	2310      	movs	r3, #16
 80197fe:	eba8 0202 	sub.w	r2, r8, r2
 8019802:	e03f      	b.n	8019884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8019804:	6823      	ldr	r3, [r4, #0]
 8019806:	1d25      	adds	r5, r4, #4
 8019808:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801980c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8019810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019812:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8019816:	2b00      	cmp	r3, #0
 8019818:	d051      	beq.n	80198be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801981a:	881a      	ldrh	r2, [r3, #0]
 801981c:	a80d      	add	r0, sp, #52	@ 0x34
 801981e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8019822:	462c      	mov	r4, r5
 8019824:	9005      	str	r0, [sp, #20]
 8019826:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801982a:	9004      	str	r0, [sp, #16]
 801982c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801982e:	9003      	str	r0, [sp, #12]
 8019830:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8019834:	9002      	str	r0, [sp, #8]
 8019836:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019838:	9001      	str	r0, [sp, #4]
 801983a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801983e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8019842:	9000      	str	r0, [sp, #0]
 8019844:	a810      	add	r0, sp, #64	@ 0x40
 8019846:	f7ff fd49 	bl	80192dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801984a:	e7b7      	b.n	80197bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801984c:	1d25      	adds	r5, r4, #4
 801984e:	6823      	ldr	r3, [r4, #0]
 8019850:	9310      	str	r3, [sp, #64]	@ 0x40
 8019852:	e7dd      	b.n	8019810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019856:	230a      	movs	r3, #10
 8019858:	4649      	mov	r1, r9
 801985a:	6820      	ldr	r0, [r4, #0]
 801985c:	eba8 0202 	sub.w	r2, r8, r2
 8019860:	1d25      	adds	r5, r4, #4
 8019862:	b292      	uxth	r2, r2
 8019864:	f7ff fce4 	bl	8019230 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8019868:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801986c:	2b2d      	cmp	r3, #45	@ 0x2d
 801986e:	d1cf      	bne.n	8019810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019870:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019876:	3302      	adds	r3, #2
 8019878:	e7ea      	b.n	8019850 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801987a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801987c:	1d25      	adds	r5, r4, #4
 801987e:	230a      	movs	r3, #10
 8019880:	eba8 0202 	sub.w	r2, r8, r2
 8019884:	b292      	uxth	r2, r2
 8019886:	4649      	mov	r1, r9
 8019888:	6820      	ldr	r0, [r4, #0]
 801988a:	f7ff fcfd 	bl	8019288 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801988e:	e7bf      	b.n	8019810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019890:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019892:	2310      	movs	r3, #16
 8019894:	4649      	mov	r1, r9
 8019896:	6820      	ldr	r0, [r4, #0]
 8019898:	eba8 0202 	sub.w	r2, r8, r2
 801989c:	1d25      	adds	r5, r4, #4
 801989e:	b292      	uxth	r2, r2
 80198a0:	f7ff fcf2 	bl	8019288 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80198a4:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 80198a8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d0af      	beq.n	8019810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80198b0:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 80198b4:	2919      	cmp	r1, #25
 80198b6:	d8f7      	bhi.n	80198a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80198b8:	3b20      	subs	r3, #32
 80198ba:	8013      	strh	r3, [r2, #0]
 80198bc:	e7f4      	b.n	80198a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80198be:	9a08      	ldr	r2, [sp, #32]
 80198c0:	2a00      	cmp	r2, #0
 80198c2:	d0ab      	beq.n	801981c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80198c4:	7812      	ldrb	r2, [r2, #0]
 80198c6:	e7a9      	b.n	801981c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80198c8:	2d00      	cmp	r5, #0
 80198ca:	f43f af48 	beq.w	801975e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80198ce:	782d      	ldrb	r5, [r5, #0]
 80198d0:	e745      	b.n	801975e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080198d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80198d2:	b507      	push	{r0, r1, r2, lr}
 80198d4:	9300      	str	r3, [sp, #0]
 80198d6:	4613      	mov	r3, r2
 80198d8:	2200      	movs	r2, #0
 80198da:	f7ff fe92 	bl	8019602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80198de:	b003      	add	sp, #12
 80198e0:	f85d fb04 	ldr.w	pc, [sp], #4

080198e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80198e4:	b40c      	push	{r2, r3}
 80198e6:	b507      	push	{r0, r1, r2, lr}
 80198e8:	ab04      	add	r3, sp, #16
 80198ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80198ee:	9301      	str	r3, [sp, #4]
 80198f0:	f7ff ffef 	bl	80198d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80198f4:	b003      	add	sp, #12
 80198f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80198fa:	b002      	add	sp, #8
 80198fc:	4770      	bx	lr
	...

08019900 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 8019900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019904:	b0c5      	sub	sp, #276	@ 0x114
 8019906:	2400      	movs	r4, #0
 8019908:	4606      	mov	r6, r0
 801990a:	468a      	mov	sl, r1
 801990c:	af11      	add	r7, sp, #68	@ 0x44
 801990e:	4621      	mov	r1, r4
 8019910:	f8dd b138 	ldr.w	fp, [sp, #312]	@ 0x138
 8019914:	4638      	mov	r0, r7
 8019916:	940d      	str	r4, [sp, #52]	@ 0x34
 8019918:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801991c:	22c8      	movs	r2, #200	@ 0xc8
 801991e:	f00f fc0f 	bl	8029140 <memset>
 8019922:	b16e      	cbz	r6, 8019940 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 8019924:	ed9f 5aa7 	vldr	s10, [pc, #668]	@ 8019bc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 8019928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801992a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801992c:	b162      	cbz	r2, 8019948 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x48>
 801992e:	8812      	ldrh	r2, [r2, #0]
 8019930:	b11a      	cbz	r2, 801993a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3a>
 8019932:	f10a 31ff 	add.w	r1, sl, #4294967295
 8019936:	4299      	cmp	r1, r3
 8019938:	dc2e      	bgt.n	8019998 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x98>
 801993a:	2200      	movs	r2, #0
 801993c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019940:	4630      	mov	r0, r6
 8019942:	b045      	add	sp, #276	@ 0x114
 8019944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019948:	9a08      	ldr	r2, [sp, #32]
 801994a:	2a00      	cmp	r2, #0
 801994c:	d0f5      	beq.n	801993a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3a>
 801994e:	7812      	ldrb	r2, [r2, #0]
 8019950:	e7ee      	b.n	8019930 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x30>
 8019952:	2d00      	cmp	r5, #0
 8019954:	d0e8      	beq.n	8019928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8019956:	782a      	ldrb	r2, [r5, #0]
 8019958:	b142      	cbz	r2, 801996c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6c>
 801995a:	2a25      	cmp	r2, #37	@ 0x25
 801995c:	d001      	beq.n	8019962 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x62>
 801995e:	4299      	cmp	r1, r3
 8019960:	dc08      	bgt.n	8019974 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 8019962:	f1b8 0f00 	cmp.w	r8, #0
 8019966:	d121      	bne.n	80199ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xac>
 8019968:	2d00      	cmp	r5, #0
 801996a:	d0dd      	beq.n	8019928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 801996c:	782a      	ldrb	r2, [r5, #0]
 801996e:	f04f 0800 	mov.w	r8, #0
 8019972:	e01d      	b.n	80199b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xb0>
 8019974:	f1b8 0f00 	cmp.w	r8, #0
 8019978:	d07f      	beq.n	8019a7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17a>
 801997a:	f8b8 2000 	ldrh.w	r2, [r8]
 801997e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019982:	f1b8 0f00 	cmp.w	r8, #0
 8019986:	d002      	beq.n	801998e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 8019988:	f108 0202 	add.w	r2, r8, #2
 801998c:	9209      	str	r2, [sp, #36]	@ 0x24
 801998e:	b10d      	cbz	r5, 8019994 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x94>
 8019990:	3501      	adds	r5, #1
 8019992:	9508      	str	r5, [sp, #32]
 8019994:	3301      	adds	r3, #1
 8019996:	930d      	str	r3, [sp, #52]	@ 0x34
 8019998:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801999a:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
 801999e:	f1b8 0f00 	cmp.w	r8, #0
 80199a2:	d0d6      	beq.n	8019952 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x52>
 80199a4:	f8b8 2000 	ldrh.w	r2, [r8]
 80199a8:	2a00      	cmp	r2, #0
 80199aa:	d1d6      	bne.n	801995a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5a>
 80199ac:	f8b8 2000 	ldrh.w	r2, [r8]
 80199b0:	2a00      	cmp	r2, #0
 80199b2:	d0b9      	beq.n	8019928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 80199b4:	4299      	cmp	r1, r3
 80199b6:	ddb7      	ble.n	8019928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 80199b8:	2300      	movs	r3, #0
 80199ba:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80199be:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 80199c2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80199c6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 80199ca:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
 80199ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80199d0:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 80199d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80199d6:	f1b8 0f00 	cmp.w	r8, #0
 80199da:	d002      	beq.n	80199e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xe2>
 80199dc:	f108 0302 	add.w	r3, r8, #2
 80199e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80199e2:	b10d      	cbz	r5, 80199e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xe8>
 80199e4:	1c6b      	adds	r3, r5, #1
 80199e6:	9308      	str	r3, [sp, #32]
 80199e8:	ab0f      	add	r3, sp, #60	@ 0x3c
 80199ea:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80199ee:	a908      	add	r1, sp, #32
 80199f0:	a809      	add	r0, sp, #36	@ 0x24
 80199f2:	9305      	str	r3, [sp, #20]
 80199f4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 80199f8:	9304      	str	r3, [sp, #16]
 80199fa:	ab0e      	add	r3, sp, #56	@ 0x38
 80199fc:	9303      	str	r3, [sp, #12]
 80199fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8019a00:	9302      	str	r3, [sp, #8]
 8019a02:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8019a06:	9301      	str	r3, [sp, #4]
 8019a08:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8019a0c:	9300      	str	r3, [sp, #0]
 8019a0e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8019a12:	f7ff fd26 	bl	8019462 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8019a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	da0b      	bge.n	8019a34 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x134>
 8019a1c:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8019a20:	3401      	adds	r4, #1
 8019a22:	edd3 7a00 	vldr	s15, [r3]
 8019a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a2a:	ee17 3a90 	vmov	r3, s15
 8019a2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a32:	930e      	str	r3, [sp, #56]	@ 0x38
 8019a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	da0b      	bge.n	8019a52 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x152>
 8019a3a:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8019a3e:	3401      	adds	r4, #1
 8019a40:	edd3 7a00 	vldr	s15, [r3]
 8019a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a48:	ee17 3a90 	vmov	r3, s15
 8019a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a54:	b1b3      	cbz	r3, 8019a84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x184>
 8019a56:	881a      	ldrh	r2, [r3, #0]
 8019a58:	2a25      	cmp	r2, #37	@ 0x25
 8019a5a:	d018      	beq.n	8019a8e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x18e>
 8019a5c:	2a66      	cmp	r2, #102	@ 0x66
 8019a5e:	d01c      	beq.n	8019a9a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 8019a60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019a62:	e9cd 5808 	strd	r5, r8, [sp, #32]
 8019a66:	f1b8 0f00 	cmp.w	r8, #0
 8019a6a:	f000 8133 	beq.w	8019cd4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3d4>
 8019a6e:	f8b8 5000 	ldrh.w	r5, [r8]
 8019a72:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
 8019a76:	3301      	adds	r3, #1
 8019a78:	e00d      	b.n	8019a96 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x196>
 8019a7a:	b10d      	cbz	r5, 8019a80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 8019a7c:	782a      	ldrb	r2, [r5, #0]
 8019a7e:	e77e      	b.n	801997e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7e>
 8019a80:	462a      	mov	r2, r5
 8019a82:	e77c      	b.n	801997e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7e>
 8019a84:	9b08      	ldr	r3, [sp, #32]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d0ea      	beq.n	8019a60 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 8019a8a:	781a      	ldrb	r2, [r3, #0]
 8019a8c:	e7e4      	b.n	8019a58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 8019a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019a90:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019a94:	3302      	adds	r3, #2
 8019a96:	930d      	str	r3, [sp, #52]	@ 0x34
 8019a98:	e03f      	b.n	8019b1a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21a>
 8019a9a:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8019a9e:	9710      	str	r7, [sp, #64]	@ 0x40
 8019aa0:	3401      	adds	r4, #1
 8019aa2:	edd3 7a00 	vldr	s15, [r3]
 8019aa6:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8019aaa:	b923      	cbnz	r3, 8019ab6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1b6>
 8019aac:	2301      	movs	r3, #1
 8019aae:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8019ab2:	2306      	movs	r3, #6
 8019ab4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019abe:	bf42      	ittt	mi
 8019ac0:	eef1 7a67 	vnegmi.f32	s15, s15
 8019ac4:	232d      	movmi	r3, #45	@ 0x2d
 8019ac6:	f8ad 3032 	strhmi.w	r3, [sp, #50]	@ 0x32
 8019aca:	eeb0 7ae7 	vabs.f32	s14, s15
 8019ace:	eeb4 7a45 	vcmp.f32	s14, s10
 8019ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ad6:	dd2b      	ble.n	8019b30 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x230>
 8019ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8019bc8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c8>)
 8019ada:	9311      	str	r3, [sp, #68]	@ 0x44
 8019adc:	2366      	movs	r3, #102	@ 0x66
 8019ade:	9312      	str	r3, [sp, #72]	@ 0x48
 8019ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ae2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	f000 80ee 	beq.w	8019cc8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c8>
 8019aec:	881a      	ldrh	r2, [r3, #0]
 8019aee:	a80d      	add	r0, sp, #52	@ 0x34
 8019af0:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8019af4:	9005      	str	r0, [sp, #20]
 8019af6:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8019afa:	9004      	str	r0, [sp, #16]
 8019afc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019afe:	9003      	str	r0, [sp, #12]
 8019b00:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8019b04:	9002      	str	r0, [sp, #8]
 8019b06:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019b08:	9001      	str	r0, [sp, #4]
 8019b0a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8019b0e:	e9cd a606 	strd	sl, r6, [sp, #24]
 8019b12:	9000      	str	r0, [sp, #0]
 8019b14:	a810      	add	r0, sp, #64	@ 0x40
 8019b16:	f7ff fbe1 	bl	80192dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8019b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b1c:	b10b      	cbz	r3, 8019b22 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x222>
 8019b1e:	3302      	adds	r3, #2
 8019b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b22:	9b08      	ldr	r3, [sp, #32]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	f43f aeff 	beq.w	8019928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8019b2a:	3301      	adds	r3, #1
 8019b2c:	9308      	str	r3, [sp, #32]
 8019b2e:	e6fb      	b.n	8019928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8019b30:	eef4 7a67 	vcmp.f32	s15, s15
 8019b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b38:	d63a      	bvs.n	8019bb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b0>
 8019b3a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8019b3e:	f10d 0846 	add.w	r8, sp, #70	@ 0x46
 8019b42:	eeb0 6a67 	vmov.f32	s12, s15
 8019b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019b4a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8019b4e:	eef0 5a47 	vmov.f32	s11, s14
 8019b52:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8019b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b5a:	da2d      	bge.n	8019bb8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 8019b5c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019b60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019b62:	2100      	movs	r1, #0
 8019b64:	ebaa 0202 	sub.w	r2, sl, r2
 8019b68:	eef0 4a46 	vmov.f32	s9, s12
 8019b6c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8019b70:	b28b      	uxth	r3, r1
 8019b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b76:	db2c      	blt.n	8019bd2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d2>
 8019b78:	1a50      	subs	r0, r2, r1
 8019b7a:	2800      	cmp	r0, #0
 8019b7c:	dd29      	ble.n	8019bd2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d2>
 8019b7e:	3101      	adds	r1, #1
 8019b80:	2964      	cmp	r1, #100	@ 0x64
 8019b82:	d025      	beq.n	8019bd0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d0>
 8019b84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019b88:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019b8c:	ee17 3a10 	vmov	r3, s14
 8019b90:	2b09      	cmp	r3, #9
 8019b92:	bfa8      	it	ge
 8019b94:	2309      	movge	r3, #9
 8019b96:	ee07 3a10 	vmov	s14, r3
 8019b9a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8019b9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ba2:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 8019ba6:	eee7 7a66 	vfms.f32	s15, s14, s13
 8019baa:	eec6 6aa5 	vdiv.f32	s13, s13, s11
 8019bae:	e7dd      	b.n	8019b6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x26c>
 8019bb0:	4b06      	ldr	r3, [pc, #24]	@ (8019bcc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2cc>)
 8019bb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8019bb4:	236e      	movs	r3, #110	@ 0x6e
 8019bb6:	e792      	b.n	8019ade <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1de>
 8019bb8:	ee66 6a87 	vmul.f32	s13, s13, s14
 8019bbc:	ee86 6a07 	vdiv.f32	s12, s12, s14
 8019bc0:	e7c7      	b.n	8019b52 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x252>
 8019bc2:	bf00      	nop
 8019bc4:	7f7fffff 	.word	0x7f7fffff
 8019bc8:	006e0069 	.word	0x006e0069
 8019bcc:	0061006e 	.word	0x0061006e
 8019bd0:	2363      	movs	r3, #99	@ 0x63
 8019bd2:	2a63      	cmp	r2, #99	@ 0x63
 8019bd4:	bfd4      	ite	le
 8019bd6:	ebc3 0202 	rsble	r2, r3, r2
 8019bda:	f1c3 0263 	rsbgt	r2, r3, #99	@ 0x63
 8019bde:	1c5d      	adds	r5, r3, #1
 8019be0:	2a00      	cmp	r2, #0
 8019be2:	dd57      	ble.n	8019c94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 8019be4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019be6:	2900      	cmp	r1, #0
 8019be8:	dd2b      	ble.n	8019c42 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x342>
 8019bea:	f04f 0901 	mov.w	r9, #1
 8019bee:	230a      	movs	r3, #10
 8019bf0:	f111 31ff 	adds.w	r1, r1, #4294967295
 8019bf4:	d30c      	bcc.n	8019c10 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x310>
 8019bf6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019bfa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bfe:	ee17 0a10 	vmov	r0, s14
 8019c02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c06:	fb03 0909 	mla	r9, r3, r9, r0
 8019c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c0e:	e7ef      	b.n	8019bf0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f0>
 8019c10:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019c12:	230a      	movs	r3, #10
 8019c14:	b292      	uxth	r2, r2
 8019c16:	4648      	mov	r0, r9
 8019c18:	eb07 0145 	add.w	r1, r7, r5, lsl #1
 8019c1c:	f7ff fb52 	bl	80192c4 <_ZN8touchgfx7Unicode4itoaElPtti>
 8019c20:	f1b9 0f01 	cmp.w	r9, #1
 8019c24:	dc0b      	bgt.n	8019c3e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 8019c26:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	bf0c      	ite	eq
 8019c2e:	2300      	moveq	r3, #0
 8019c30:	232e      	movne	r3, #46	@ 0x2e
 8019c32:	aa44      	add	r2, sp, #272	@ 0x110
 8019c34:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019c38:	f825 3ccc 	strh.w	r3, [r5, #-204]
 8019c3c:	e015      	b.n	8019c6a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36a>
 8019c3e:	232e      	movs	r3, #46	@ 0x2e
 8019c40:	e7f7      	b.n	8019c32 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 8019c42:	2a01      	cmp	r2, #1
 8019c44:	d026      	beq.n	8019c94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 8019c46:	2b63      	cmp	r3, #99	@ 0x63
 8019c48:	d024      	beq.n	8019c94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 8019c4a:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 8019c4e:	b30a      	cbz	r2, 8019c94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 8019c50:	aa44      	add	r2, sp, #272	@ 0x110
 8019c52:	3302      	adds	r3, #2
 8019c54:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019c58:	222e      	movs	r2, #46	@ 0x2e
 8019c5a:	f825 2ccc 	strh.w	r2, [r5, #-204]
 8019c5e:	aa44      	add	r2, sp, #272	@ 0x110
 8019c60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019c64:	2200      	movs	r2, #0
 8019c66:	f823 2ccc 	strh.w	r2, [r3, #-204]
 8019c6a:	eef4 7ae4 	vcmpe.f32	s15, s9
 8019c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c72:	f6ff af35 	blt.w	8019ae0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e0>
 8019c76:	2300      	movs	r3, #0
 8019c78:	f838 2b02 	ldrh.w	r2, [r8], #2
 8019c7c:	1c59      	adds	r1, r3, #1
 8019c7e:	b972      	cbnz	r2, 8019c9e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x39e>
 8019c80:	b29b      	uxth	r3, r3
 8019c82:	2130      	movs	r1, #48	@ 0x30
 8019c84:	b96b      	cbnz	r3, 8019ca2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3a2>
 8019c86:	2331      	movs	r3, #49	@ 0x31
 8019c88:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8019c8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019c8e:	3b02      	subs	r3, #2
 8019c90:	9310      	str	r3, [sp, #64]	@ 0x40
 8019c92:	e725      	b.n	8019ae0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e0>
 8019c94:	ab44      	add	r3, sp, #272	@ 0x110
 8019c96:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	e7cc      	b.n	8019c38 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x338>
 8019c9e:	460b      	mov	r3, r1
 8019ca0:	e7ea      	b.n	8019c78 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x378>
 8019ca2:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 8019ca6:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
 8019caa:	2808      	cmp	r0, #8
 8019cac:	d806      	bhi.n	8019cbc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3bc>
 8019cae:	a944      	add	r1, sp, #272	@ 0x110
 8019cb0:	3201      	adds	r2, #1
 8019cb2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8019cb6:	f823 2ccc 	strh.w	r2, [r3, #-204]
 8019cba:	e711      	b.n	8019ae0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e0>
 8019cbc:	2a39      	cmp	r2, #57	@ 0x39
 8019cbe:	bf08      	it	eq
 8019cc0:	f827 1013 	strheq.w	r1, [r7, r3, lsl #1]
 8019cc4:	3b01      	subs	r3, #1
 8019cc6:	e7dd      	b.n	8019c84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x384>
 8019cc8:	9a08      	ldr	r2, [sp, #32]
 8019cca:	2a00      	cmp	r2, #0
 8019ccc:	f43f af0f 	beq.w	8019aee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1ee>
 8019cd0:	7812      	ldrb	r2, [r2, #0]
 8019cd2:	e70c      	b.n	8019aee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1ee>
 8019cd4:	2d00      	cmp	r5, #0
 8019cd6:	f43f aecc 	beq.w	8019a72 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x172>
 8019cda:	782d      	ldrb	r5, [r5, #0]
 8019cdc:	e6c9      	b.n	8019a72 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x172>
 8019cde:	bf00      	nop

08019ce0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8019ce0:	b507      	push	{r0, r1, r2, lr}
 8019ce2:	9300      	str	r3, [sp, #0]
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	f7ff fe0a 	bl	8019900 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 8019cec:	b003      	add	sp, #12
 8019cee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019cf4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019cf4:	4b01      	ldr	r3, [pc, #4]	@ (8019cfc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019cf6:	6018      	str	r0, [r3, #0]
 8019cf8:	4770      	bx	lr
 8019cfa:	bf00      	nop
 8019cfc:	20027e28 	.word	0x20027e28

08019d00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019d00:	4b06      	ldr	r3, [pc, #24]	@ (8019d1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019d02:	881a      	ldrh	r2, [r3, #0]
 8019d04:	4282      	cmp	r2, r0
 8019d06:	d807      	bhi.n	8019d18 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019d08:	4b05      	ldr	r3, [pc, #20]	@ (8019d20 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019d0a:	881b      	ldrh	r3, [r3, #0]
 8019d0c:	4413      	add	r3, r2
 8019d0e:	4298      	cmp	r0, r3
 8019d10:	bfac      	ite	ge
 8019d12:	2000      	movge	r0, #0
 8019d14:	2001      	movlt	r0, #1
 8019d16:	4770      	bx	lr
 8019d18:	2000      	movs	r0, #0
 8019d1a:	4770      	bx	lr
 8019d1c:	20027e48 	.word	0x20027e48
 8019d20:	20027e4c 	.word	0x20027e4c

08019d24 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019d24:	b508      	push	{r3, lr}
 8019d26:	4601      	mov	r1, r0
 8019d28:	f7ff ffea 	bl	8019d00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019d2c:	b118      	cbz	r0, 8019d36 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019d2e:	4b02      	ldr	r3, [pc, #8]	@ (8019d38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019d36:	bd08      	pop	{r3, pc}
 8019d38:	20027e2c 	.word	0x20027e2c

08019d3c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d3e:	4c24      	ldr	r4, [pc, #144]	@ (8019dd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019d40:	6823      	ldr	r3, [r4, #0]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d042      	beq.n	8019dcc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019d46:	4a23      	ldr	r2, [pc, #140]	@ (8019dd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019d48:	4d23      	ldr	r5, [pc, #140]	@ (8019dd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019d4a:	8811      	ldrh	r1, [r2, #0]
 8019d4c:	f8b5 c000 	ldrh.w	ip, [r5]
 8019d50:	4822      	ldr	r0, [pc, #136]	@ (8019ddc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019d52:	4461      	add	r1, ip
 8019d54:	1c4a      	adds	r2, r1, #1
 8019d56:	008f      	lsls	r7, r1, #2
 8019d58:	f022 0201 	bic.w	r2, r2, #1
 8019d5c:	19de      	adds	r6, r3, r7
 8019d5e:	0412      	lsls	r2, r2, #16
 8019d60:	6006      	str	r6, [r0, #0]
 8019d62:	4e1f      	ldr	r6, [pc, #124]	@ (8019de0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019d64:	0c12      	lsrs	r2, r2, #16
 8019d66:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019d6a:	19da      	adds	r2, r3, r7
 8019d6c:	6032      	str	r2, [r6, #0]
 8019d6e:	220e      	movs	r2, #14
 8019d70:	fb02 f20c 	mul.w	r2, r2, ip
 8019d74:	3203      	adds	r2, #3
 8019d76:	f022 0203 	bic.w	r2, r2, #3
 8019d7a:	443a      	add	r2, r7
 8019d7c:	4f19      	ldr	r7, [pc, #100]	@ (8019de4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019d7e:	4413      	add	r3, r2
 8019d80:	603b      	str	r3, [r7, #0]
 8019d82:	2300      	movs	r3, #0
 8019d84:	4f18      	ldr	r7, [pc, #96]	@ (8019de8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019d86:	469c      	mov	ip, r3
 8019d88:	803b      	strh	r3, [r7, #0]
 8019d8a:	4f18      	ldr	r7, [pc, #96]	@ (8019dec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019d8c:	683f      	ldr	r7, [r7, #0]
 8019d8e:	1aba      	subs	r2, r7, r2
 8019d90:	4f17      	ldr	r7, [pc, #92]	@ (8019df0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019d92:	603a      	str	r2, [r7, #0]
 8019d94:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8019d98:	4a16      	ldr	r2, [pc, #88]	@ (8019df4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019d9a:	8013      	strh	r3, [r2, #0]
 8019d9c:	428b      	cmp	r3, r1
 8019d9e:	d10d      	bne.n	8019dbc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019da0:	882d      	ldrh	r5, [r5, #0]
 8019da2:	2300      	movs	r3, #0
 8019da4:	6830      	ldr	r0, [r6, #0]
 8019da6:	240e      	movs	r4, #14
 8019da8:	429d      	cmp	r5, r3
 8019daa:	d90f      	bls.n	8019dcc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019dac:	fb04 0203 	mla	r2, r4, r3, r0
 8019db0:	3301      	adds	r3, #1
 8019db2:	7b11      	ldrb	r1, [r2, #12]
 8019db4:	f36f 1145 	bfc	r1, #5, #1
 8019db8:	7311      	strb	r1, [r2, #12]
 8019dba:	e7f5      	b.n	8019da8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019dbc:	6822      	ldr	r2, [r4, #0]
 8019dbe:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019dc2:	6802      	ldr	r2, [r0, #0]
 8019dc4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019dc8:	3301      	adds	r3, #1
 8019dca:	e7e7      	b.n	8019d9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019dce:	bf00      	nop
 8019dd0:	20027e2c 	.word	0x20027e2c
 8019dd4:	20027e48 	.word	0x20027e48
 8019dd8:	20027e4c 	.word	0x20027e4c
 8019ddc:	20027e40 	.word	0x20027e40
 8019de0:	20027e30 	.word	0x20027e30
 8019de4:	20027e38 	.word	0x20027e38
 8019de8:	20027e4a 	.word	0x20027e4a
 8019dec:	20027e34 	.word	0x20027e34
 8019df0:	20027e44 	.word	0x20027e44
 8019df4:	20027e3c 	.word	0x20027e3c

08019df8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019df8:	4b06      	ldr	r3, [pc, #24]	@ (8019e14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	b943      	cbnz	r3, 8019e10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019dfe:	b139      	cbz	r1, 8019e10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019e00:	4b05      	ldr	r3, [pc, #20]	@ (8019e18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019e02:	801a      	strh	r2, [r3, #0]
 8019e04:	4b05      	ldr	r3, [pc, #20]	@ (8019e1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019e06:	6019      	str	r1, [r3, #0]
 8019e08:	4b05      	ldr	r3, [pc, #20]	@ (8019e20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019e0a:	6018      	str	r0, [r3, #0]
 8019e0c:	f7ff bf96 	b.w	8019d3c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019e10:	4770      	bx	lr
 8019e12:	bf00      	nop
 8019e14:	20027e38 	.word	0x20027e38
 8019e18:	20027e4c 	.word	0x20027e4c
 8019e1c:	20027e34 	.word	0x20027e34
 8019e20:	20027e2c 	.word	0x20027e2c

08019e24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019e24:	b470      	push	{r4, r5, r6}
 8019e26:	4c07      	ldr	r4, [pc, #28]	@ (8019e44 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019e28:	4605      	mov	r5, r0
 8019e2a:	4610      	mov	r0, r2
 8019e2c:	9a03      	ldr	r2, [sp, #12]
 8019e2e:	6826      	ldr	r6, [r4, #0]
 8019e30:	b936      	cbnz	r6, 8019e40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019e32:	6025      	str	r5, [r4, #0]
 8019e34:	4c04      	ldr	r4, [pc, #16]	@ (8019e48 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019e36:	8021      	strh	r1, [r4, #0]
 8019e38:	4619      	mov	r1, r3
 8019e3a:	bc70      	pop	{r4, r5, r6}
 8019e3c:	f7ff bfdc 	b.w	8019df8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019e40:	bc70      	pop	{r4, r5, r6}
 8019e42:	4770      	bx	lr
 8019e44:	20027e50 	.word	0x20027e50
 8019e48:	20027e48 	.word	0x20027e48

08019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019e4c:	4a12      	ldr	r2, [pc, #72]	@ (8019e98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019e4e:	8803      	ldrh	r3, [r0, #0]
 8019e50:	8812      	ldrh	r2, [r2, #0]
 8019e52:	4293      	cmp	r3, r2
 8019e54:	d207      	bcs.n	8019e66 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019e56:	4a11      	ldr	r2, [pc, #68]	@ (8019e9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019e58:	2114      	movs	r1, #20
 8019e5a:	6812      	ldr	r2, [r2, #0]
 8019e5c:	fb01 2303 	mla	r3, r1, r3, r2
 8019e60:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019e64:	4770      	bx	lr
 8019e66:	490e      	ldr	r1, [pc, #56]	@ (8019ea0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019e68:	8809      	ldrh	r1, [r1, #0]
 8019e6a:	4411      	add	r1, r2
 8019e6c:	428b      	cmp	r3, r1
 8019e6e:	da04      	bge.n	8019e7a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019e70:	1a9b      	subs	r3, r3, r2
 8019e72:	4a0c      	ldr	r2, [pc, #48]	@ (8019ea4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019e74:	210e      	movs	r1, #14
 8019e76:	6812      	ldr	r2, [r2, #0]
 8019e78:	e7f0      	b.n	8019e5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019e7a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	d108      	bne.n	8019e94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8019e82:	4b09      	ldr	r3, [pc, #36]	@ (8019ea8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019e84:	781b      	ldrb	r3, [r3, #0]
 8019e86:	b91b      	cbnz	r3, 8019e90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019e88:	4b08      	ldr	r3, [pc, #32]	@ (8019eac <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019e8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019e8e:	4770      	bx	lr
 8019e90:	4b07      	ldr	r3, [pc, #28]	@ (8019eb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019e92:	e7fa      	b.n	8019e8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8019e94:	2000      	movs	r0, #0
 8019e96:	4770      	bx	lr
 8019e98:	20027e48 	.word	0x20027e48
 8019e9c:	20027e50 	.word	0x20027e50
 8019ea0:	20027e4c 	.word	0x20027e4c
 8019ea4:	20027e30 	.word	0x20027e30
 8019ea8:	20027db8 	.word	0x20027db8
 8019eac:	20027dba 	.word	0x20027dba
 8019eb0:	20027dbc 	.word	0x20027dbc

08019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019eb4:	4a12      	ldr	r2, [pc, #72]	@ (8019f00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019eb6:	8803      	ldrh	r3, [r0, #0]
 8019eb8:	8812      	ldrh	r2, [r2, #0]
 8019eba:	4293      	cmp	r3, r2
 8019ebc:	d207      	bcs.n	8019ece <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019ebe:	4a11      	ldr	r2, [pc, #68]	@ (8019f04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019ec0:	2114      	movs	r1, #20
 8019ec2:	6812      	ldr	r2, [r2, #0]
 8019ec4:	fb01 2303 	mla	r3, r1, r3, r2
 8019ec8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019ecc:	4770      	bx	lr
 8019ece:	490e      	ldr	r1, [pc, #56]	@ (8019f08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019ed0:	8809      	ldrh	r1, [r1, #0]
 8019ed2:	4411      	add	r1, r2
 8019ed4:	428b      	cmp	r3, r1
 8019ed6:	da04      	bge.n	8019ee2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019ed8:	1a9b      	subs	r3, r3, r2
 8019eda:	4a0c      	ldr	r2, [pc, #48]	@ (8019f0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019edc:	210e      	movs	r1, #14
 8019ede:	6812      	ldr	r2, [r2, #0]
 8019ee0:	e7f0      	b.n	8019ec4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019ee2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	d108      	bne.n	8019efc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8019eea:	4b09      	ldr	r3, [pc, #36]	@ (8019f10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019eec:	781b      	ldrb	r3, [r3, #0]
 8019eee:	b91b      	cbnz	r3, 8019ef8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019ef0:	4b08      	ldr	r3, [pc, #32]	@ (8019f14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019ef2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019ef6:	4770      	bx	lr
 8019ef8:	4b07      	ldr	r3, [pc, #28]	@ (8019f18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019efa:	e7fa      	b.n	8019ef2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019efc:	2000      	movs	r0, #0
 8019efe:	4770      	bx	lr
 8019f00:	20027e48 	.word	0x20027e48
 8019f04:	20027e50 	.word	0x20027e50
 8019f08:	20027e4c 	.word	0x20027e4c
 8019f0c:	20027e30 	.word	0x20027e30
 8019f10:	20027db8 	.word	0x20027db8
 8019f14:	20027dbc 	.word	0x20027dbc
 8019f18:	20027dba 	.word	0x20027dba

08019f1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019f1c:	4a22      	ldr	r2, [pc, #136]	@ (8019fa8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019f1e:	b530      	push	{r4, r5, lr}
 8019f20:	880b      	ldrh	r3, [r1, #0]
 8019f22:	8812      	ldrh	r2, [r2, #0]
 8019f24:	4293      	cmp	r3, r2
 8019f26:	d213      	bcs.n	8019f50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019f28:	4a20      	ldr	r2, [pc, #128]	@ (8019fac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019f2a:	2114      	movs	r1, #20
 8019f2c:	6812      	ldr	r2, [r2, #0]
 8019f2e:	fb01 2303 	mla	r3, r1, r3, r2
 8019f32:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019f36:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019f3a:	8a1a      	ldrh	r2, [r3, #16]
 8019f3c:	8a5b      	ldrh	r3, [r3, #18]
 8019f3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019f42:	8004      	strh	r4, [r0, #0]
 8019f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f48:	8041      	strh	r1, [r0, #2]
 8019f4a:	8082      	strh	r2, [r0, #4]
 8019f4c:	80c3      	strh	r3, [r0, #6]
 8019f4e:	e024      	b.n	8019f9a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8019f50:	4917      	ldr	r1, [pc, #92]	@ (8019fb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019f52:	8809      	ldrh	r1, [r1, #0]
 8019f54:	4411      	add	r1, r2
 8019f56:	428b      	cmp	r3, r1
 8019f58:	da10      	bge.n	8019f7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8019f5a:	1a9b      	subs	r3, r3, r2
 8019f5c:	220e      	movs	r2, #14
 8019f5e:	4353      	muls	r3, r2
 8019f60:	4a14      	ldr	r2, [pc, #80]	@ (8019fb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019f62:	6811      	ldr	r1, [r2, #0]
 8019f64:	18ca      	adds	r2, r1, r3
 8019f66:	5ecd      	ldrsh	r5, [r1, r3]
 8019f68:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8019f6c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8019f70:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8019f74:	8005      	strh	r5, [r0, #0]
 8019f76:	8044      	strh	r4, [r0, #2]
 8019f78:	8081      	strh	r1, [r0, #4]
 8019f7a:	e7e7      	b.n	8019f4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019f7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019f80:	4293      	cmp	r3, r2
 8019f82:	d10b      	bne.n	8019f9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8019f84:	4b0c      	ldr	r3, [pc, #48]	@ (8019fb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8019f86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8019fbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019f8c:	8081      	strh	r1, [r0, #4]
 8019f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f92:	2300      	movs	r3, #0
 8019f94:	80c2      	strh	r2, [r0, #6]
 8019f96:	8003      	strh	r3, [r0, #0]
 8019f98:	8043      	strh	r3, [r0, #2]
 8019f9a:	bd30      	pop	{r4, r5, pc}
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	8003      	strh	r3, [r0, #0]
 8019fa0:	8043      	strh	r3, [r0, #2]
 8019fa2:	8083      	strh	r3, [r0, #4]
 8019fa4:	e7d2      	b.n	8019f4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019fa6:	bf00      	nop
 8019fa8:	20027e48 	.word	0x20027e48
 8019fac:	20027e50 	.word	0x20027e50
 8019fb0:	20027e4c 	.word	0x20027e4c
 8019fb4:	20027e30 	.word	0x20027e30
 8019fb8:	20027db4 	.word	0x20027db4
 8019fbc:	20027db6 	.word	0x20027db6

08019fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019fc0:	4a17      	ldr	r2, [pc, #92]	@ (801a020 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8019fc2:	8803      	ldrh	r3, [r0, #0]
 8019fc4:	8812      	ldrh	r2, [r2, #0]
 8019fc6:	4293      	cmp	r3, r2
 8019fc8:	d213      	bcs.n	8019ff2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8019fca:	4a16      	ldr	r2, [pc, #88]	@ (801a024 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019fcc:	2114      	movs	r1, #20
 8019fce:	6812      	ldr	r2, [r2, #0]
 8019fd0:	fb01 2303 	mla	r3, r1, r3, r2
 8019fd4:	8a1a      	ldrh	r2, [r3, #16]
 8019fd6:	8919      	ldrh	r1, [r3, #8]
 8019fd8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019fdc:	428a      	cmp	r2, r1
 8019fde:	db1d      	blt.n	801a01c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019fe0:	8a58      	ldrh	r0, [r3, #18]
 8019fe2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019fe6:	895b      	ldrh	r3, [r3, #10]
 8019fe8:	4298      	cmp	r0, r3
 8019fea:	bfac      	ite	ge
 8019fec:	2000      	movge	r0, #0
 8019fee:	2001      	movlt	r0, #1
 8019ff0:	4770      	bx	lr
 8019ff2:	490d      	ldr	r1, [pc, #52]	@ (801a028 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019ff4:	8809      	ldrh	r1, [r1, #0]
 8019ff6:	4411      	add	r1, r2
 8019ff8:	428b      	cmp	r3, r1
 8019ffa:	da0d      	bge.n	801a018 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8019ffc:	1a9b      	subs	r3, r3, r2
 8019ffe:	4a0b      	ldr	r2, [pc, #44]	@ (801a02c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a000:	210e      	movs	r1, #14
 801a002:	6812      	ldr	r2, [r2, #0]
 801a004:	fb01 2303 	mla	r3, r1, r3, r2
 801a008:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a00c:	891a      	ldrh	r2, [r3, #8]
 801a00e:	4291      	cmp	r1, r2
 801a010:	db04      	blt.n	801a01c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a012:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a016:	e7e6      	b.n	8019fe6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801a018:	2000      	movs	r0, #0
 801a01a:	4770      	bx	lr
 801a01c:	2001      	movs	r0, #1
 801a01e:	4770      	bx	lr
 801a020:	20027e48 	.word	0x20027e48
 801a024:	20027e50 	.word	0x20027e50
 801a028:	20027e4c 	.word	0x20027e4c
 801a02c:	20027e30 	.word	0x20027e30

0801a030 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a030:	4a12      	ldr	r2, [pc, #72]	@ (801a07c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a032:	8803      	ldrh	r3, [r0, #0]
 801a034:	8811      	ldrh	r1, [r2, #0]
 801a036:	428b      	cmp	r3, r1
 801a038:	d20b      	bcs.n	801a052 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a03a:	4a11      	ldr	r2, [pc, #68]	@ (801a080 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a03c:	6812      	ldr	r2, [r2, #0]
 801a03e:	b112      	cbz	r2, 801a046 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a040:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a044:	b9c0      	cbnz	r0, 801a078 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a046:	4a0f      	ldr	r2, [pc, #60]	@ (801a084 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a048:	6811      	ldr	r1, [r2, #0]
 801a04a:	2214      	movs	r2, #20
 801a04c:	4353      	muls	r3, r2
 801a04e:	58c8      	ldr	r0, [r1, r3]
 801a050:	4770      	bx	lr
 801a052:	4a0d      	ldr	r2, [pc, #52]	@ (801a088 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a054:	8812      	ldrh	r2, [r2, #0]
 801a056:	440a      	add	r2, r1
 801a058:	4293      	cmp	r3, r2
 801a05a:	da04      	bge.n	801a066 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a05c:	4a08      	ldr	r2, [pc, #32]	@ (801a080 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a05e:	6812      	ldr	r2, [r2, #0]
 801a060:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a064:	4770      	bx	lr
 801a066:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a06a:	4293      	cmp	r3, r2
 801a06c:	d103      	bne.n	801a076 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a06e:	4b07      	ldr	r3, [pc, #28]	@ (801a08c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801a074:	4770      	bx	lr
 801a076:	2000      	movs	r0, #0
 801a078:	4770      	bx	lr
 801a07a:	bf00      	nop
 801a07c:	20027e48 	.word	0x20027e48
 801a080:	20027e2c 	.word	0x20027e2c
 801a084:	20027e50 	.word	0x20027e50
 801a088:	20027e4c 	.word	0x20027e4c
 801a08c:	20027dc0 	.word	0x20027dc0

0801a090 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a090:	4b24      	ldr	r3, [pc, #144]	@ (801a124 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a092:	8802      	ldrh	r2, [r0, #0]
 801a094:	8818      	ldrh	r0, [r3, #0]
 801a096:	4282      	cmp	r2, r0
 801a098:	d221      	bcs.n	801a0de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a09a:	4b23      	ldr	r3, [pc, #140]	@ (801a128 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a09c:	6819      	ldr	r1, [r3, #0]
 801a09e:	2314      	movs	r3, #20
 801a0a0:	fb03 1302 	mla	r3, r3, r2, r1
 801a0a4:	6858      	ldr	r0, [r3, #4]
 801a0a6:	2800      	cmp	r0, #0
 801a0a8:	d03a      	beq.n	801a120 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a0aa:	4920      	ldr	r1, [pc, #128]	@ (801a12c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a0ac:	6809      	ldr	r1, [r1, #0]
 801a0ae:	2900      	cmp	r1, #0
 801a0b0:	d036      	beq.n	801a120 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a0b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a0b6:	2900      	cmp	r1, #0
 801a0b8:	d032      	beq.n	801a120 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a0ba:	891a      	ldrh	r2, [r3, #8]
 801a0bc:	8958      	ldrh	r0, [r3, #10]
 801a0be:	4350      	muls	r0, r2
 801a0c0:	7c5a      	ldrb	r2, [r3, #17]
 801a0c2:	7cdb      	ldrb	r3, [r3, #19]
 801a0c4:	0952      	lsrs	r2, r2, #5
 801a0c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a0ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a0ce:	2b0b      	cmp	r3, #11
 801a0d0:	bf18      	it	ne
 801a0d2:	0040      	lslne	r0, r0, #1
 801a0d4:	3003      	adds	r0, #3
 801a0d6:	f020 0003 	bic.w	r0, r0, #3
 801a0da:	4408      	add	r0, r1
 801a0dc:	4770      	bx	lr
 801a0de:	4b14      	ldr	r3, [pc, #80]	@ (801a130 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a0e0:	881b      	ldrh	r3, [r3, #0]
 801a0e2:	4403      	add	r3, r0
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	da1a      	bge.n	801a11e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a0e8:	4b12      	ldr	r3, [pc, #72]	@ (801a134 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a0ea:	1a10      	subs	r0, r2, r0
 801a0ec:	210e      	movs	r1, #14
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	fb01 3000 	mla	r0, r1, r0, r3
 801a0f4:	7b03      	ldrb	r3, [r0, #12]
 801a0f6:	f003 031f 	and.w	r3, r3, #31
 801a0fa:	2b0b      	cmp	r3, #11
 801a0fc:	d10b      	bne.n	801a116 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a0fe:	8903      	ldrh	r3, [r0, #8]
 801a100:	8940      	ldrh	r0, [r0, #10]
 801a102:	4358      	muls	r0, r3
 801a104:	4b09      	ldr	r3, [pc, #36]	@ (801a12c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a106:	3003      	adds	r0, #3
 801a108:	6819      	ldr	r1, [r3, #0]
 801a10a:	f020 0303 	bic.w	r3, r0, #3
 801a10e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a112:	4418      	add	r0, r3
 801a114:	4770      	bx	lr
 801a116:	2b0d      	cmp	r3, #13
 801a118:	d101      	bne.n	801a11e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a11a:	300d      	adds	r0, #13
 801a11c:	4770      	bx	lr
 801a11e:	2000      	movs	r0, #0
 801a120:	4770      	bx	lr
 801a122:	bf00      	nop
 801a124:	20027e48 	.word	0x20027e48
 801a128:	20027e50 	.word	0x20027e50
 801a12c:	20027e2c 	.word	0x20027e2c
 801a130:	20027e4c 	.word	0x20027e4c
 801a134:	20027e30 	.word	0x20027e30

0801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a138:	4b1f      	ldr	r3, [pc, #124]	@ (801a1b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801a13a:	b510      	push	{r4, lr}
 801a13c:	8802      	ldrh	r2, [r0, #0]
 801a13e:	881b      	ldrh	r3, [r3, #0]
 801a140:	429a      	cmp	r2, r3
 801a142:	d21a      	bcs.n	801a17a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801a144:	4b1d      	ldr	r3, [pc, #116]	@ (801a1bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801a146:	2114      	movs	r1, #20
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	fb01 3102 	mla	r1, r1, r2, r3
 801a14e:	7c4b      	ldrb	r3, [r1, #17]
 801a150:	0958      	lsrs	r0, r3, #5
 801a152:	7ccb      	ldrb	r3, [r1, #19]
 801a154:	491a      	ldr	r1, [pc, #104]	@ (801a1c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801a156:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a15a:	6809      	ldr	r1, [r1, #0]
 801a15c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801a160:	b2d8      	uxtb	r0, r3
 801a162:	b149      	cbz	r1, 801a178 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a164:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a168:	b132      	cbz	r2, 801a178 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a16a:	2b0e      	cmp	r3, #14
 801a16c:	d021      	beq.n	801a1b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a16e:	280f      	cmp	r0, #15
 801a170:	d01d      	beq.n	801a1ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801a172:	2810      	cmp	r0, #16
 801a174:	bf08      	it	eq
 801a176:	2002      	moveq	r0, #2
 801a178:	bd10      	pop	{r4, pc}
 801a17a:	4912      	ldr	r1, [pc, #72]	@ (801a1c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801a17c:	8809      	ldrh	r1, [r1, #0]
 801a17e:	4419      	add	r1, r3
 801a180:	428a      	cmp	r2, r1
 801a182:	da09      	bge.n	801a198 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801a184:	1ad3      	subs	r3, r2, r3
 801a186:	4a10      	ldr	r2, [pc, #64]	@ (801a1c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801a188:	210e      	movs	r1, #14
 801a18a:	6812      	ldr	r2, [r2, #0]
 801a18c:	fb01 2303 	mla	r3, r1, r3, r2
 801a190:	7b18      	ldrb	r0, [r3, #12]
 801a192:	f000 001f 	and.w	r0, r0, #31
 801a196:	e7ef      	b.n	801a178 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a198:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801a19c:	429a      	cmp	r2, r3
 801a19e:	d108      	bne.n	801a1b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a1a0:	f7eb fcf8 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 801a1a4:	6803      	ldr	r3, [r0, #0]
 801a1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1ac:	4718      	bx	r3
 801a1ae:	2001      	movs	r0, #1
 801a1b0:	e7e2      	b.n	801a178 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	e7e0      	b.n	801a178 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a1b6:	bf00      	nop
 801a1b8:	20027e48 	.word	0x20027e48
 801a1bc:	20027e50 	.word	0x20027e50
 801a1c0:	20027e2c 	.word	0x20027e2c
 801a1c4:	20027e4c 	.word	0x20027e4c
 801a1c8:	20027e30 	.word	0x20027e30

0801a1cc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801a1cc:	2010      	movs	r0, #16
 801a1ce:	4770      	bx	lr

0801a1d0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	4770      	bx	lr

0801a1d4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a1d4:	4b02      	ldr	r3, [pc, #8]	@ (801a1e0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801a1d6:	8818      	ldrh	r0, [r3, #0]
 801a1d8:	0040      	lsls	r0, r0, #1
 801a1da:	b280      	uxth	r0, r0
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop
 801a1e0:	20027dba 	.word	0x20027dba

0801a1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a1e4:	2bff      	cmp	r3, #255	@ 0xff
 801a1e6:	d05e      	beq.n	801a2a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801a1e8:	2a0b      	cmp	r2, #11
 801a1ea:	d058      	beq.n	801a29e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801a1ec:	d80e      	bhi.n	801a20c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a1ee:	2a03      	cmp	r2, #3
 801a1f0:	d04d      	beq.n	801a28e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801a1f2:	d804      	bhi.n	801a1fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a1f4:	2a01      	cmp	r2, #1
 801a1f6:	d04c      	beq.n	801a292 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801a1f8:	d94d      	bls.n	801a296 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801a1fa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a1fc:	e031      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a1fe:	2a09      	cmp	r2, #9
 801a200:	d04d      	beq.n	801a29e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801a202:	d84a      	bhi.n	801a29a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801a204:	2a08      	cmp	r2, #8
 801a206:	d048      	beq.n	801a29a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801a208:	2300      	movs	r3, #0
 801a20a:	e02a      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a20c:	2a2f      	cmp	r2, #47	@ 0x2f
 801a20e:	d02c      	beq.n	801a26a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801a210:	d811      	bhi.n	801a236 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801a212:	2a2d      	cmp	r2, #45	@ 0x2d
 801a214:	d018      	beq.n	801a248 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801a216:	d831      	bhi.n	801a27c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801a218:	2a2c      	cmp	r2, #44	@ 0x2c
 801a21a:	d1f5      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a21c:	684a      	ldr	r2, [r1, #4]
 801a21e:	7813      	ldrb	r3, [r2, #0]
 801a220:	7852      	ldrb	r2, [r2, #1]
 801a222:	2a00      	cmp	r2, #0
 801a224:	d1f0      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a226:	2b01      	cmp	r3, #1
 801a228:	d01d      	beq.n	801a266 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d02d      	beq.n	801a28a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a22e:	2b02      	cmp	r3, #2
 801a230:	d1ea      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a232:	68c3      	ldr	r3, [r0, #12]
 801a234:	e015      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a236:	2a31      	cmp	r2, #49	@ 0x31
 801a238:	d004      	beq.n	801a244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801a23a:	d332      	bcc.n	801a2a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801a23c:	2a32      	cmp	r2, #50	@ 0x32
 801a23e:	d030      	beq.n	801a2a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801a240:	2a33      	cmp	r2, #51	@ 0x33
 801a242:	d1e1      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a244:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801a246:	e00c      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a248:	684a      	ldr	r2, [r1, #4]
 801a24a:	7813      	ldrb	r3, [r2, #0]
 801a24c:	7852      	ldrb	r2, [r2, #1]
 801a24e:	2a00      	cmp	r2, #0
 801a250:	d1da      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a252:	2b01      	cmp	r3, #1
 801a254:	d004      	beq.n	801a260 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801a256:	d30f      	bcc.n	801a278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801a258:	2b02      	cmp	r3, #2
 801a25a:	d1d5      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a25c:	6943      	ldr	r3, [r0, #20]
 801a25e:	e000      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a260:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a262:	4618      	mov	r0, r3
 801a264:	4770      	bx	lr
 801a266:	69c3      	ldr	r3, [r0, #28]
 801a268:	e7fb      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a26a:	684b      	ldr	r3, [r1, #4]
 801a26c:	781a      	ldrb	r2, [r3, #0]
 801a26e:	785b      	ldrb	r3, [r3, #1]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d1c9      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a274:	2a00      	cmp	r2, #0
 801a276:	d1f4      	bne.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a278:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801a27a:	e7f2      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a27c:	684b      	ldr	r3, [r1, #4]
 801a27e:	781a      	ldrb	r2, [r3, #0]
 801a280:	785b      	ldrb	r3, [r3, #1]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d1c0      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a286:	2a00      	cmp	r2, #0
 801a288:	d1eb      	bne.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a28a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a28c:	e7e9      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a28e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801a290:	e7e7      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a292:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a294:	e7e5      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a296:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801a298:	e7e3      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a29a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801a29c:	e7e1      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a29e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801a2a0:	e7df      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a2a2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a2a4:	e7dd      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a2a6:	2a0b      	cmp	r2, #11
 801a2a8:	d059      	beq.n	801a35e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801a2aa:	d80e      	bhi.n	801a2ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801a2ac:	2a03      	cmp	r2, #3
 801a2ae:	d050      	beq.n	801a352 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801a2b0:	d804      	bhi.n	801a2bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801a2b2:	2a01      	cmp	r2, #1
 801a2b4:	d04f      	beq.n	801a356 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801a2b6:	d950      	bls.n	801a35a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801a2b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a2ba:	e7d2      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a2bc:	2a09      	cmp	r2, #9
 801a2be:	d04e      	beq.n	801a35e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801a2c0:	d801      	bhi.n	801a2c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801a2c2:	2a08      	cmp	r2, #8
 801a2c4:	d1a0      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a2c6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801a2c8:	e7cb      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a2ca:	2a2f      	cmp	r2, #47	@ 0x2f
 801a2cc:	d02d      	beq.n	801a32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801a2ce:	d811      	bhi.n	801a2f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801a2d0:	2a2d      	cmp	r2, #45	@ 0x2d
 801a2d2:	d018      	beq.n	801a306 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801a2d4:	d833      	bhi.n	801a33e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801a2d6:	2a2c      	cmp	r2, #44	@ 0x2c
 801a2d8:	d196      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a2da:	684a      	ldr	r2, [r1, #4]
 801a2dc:	7813      	ldrb	r3, [r2, #0]
 801a2de:	7852      	ldrb	r2, [r2, #1]
 801a2e0:	2a00      	cmp	r2, #0
 801a2e2:	d191      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a2e4:	2b01      	cmp	r3, #1
 801a2e6:	d01e      	beq.n	801a326 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d030      	beq.n	801a34e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801a2ec:	2b02      	cmp	r3, #2
 801a2ee:	d18b      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a2f0:	6903      	ldr	r3, [r0, #16]
 801a2f2:	e7b6      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a2f4:	2a31      	cmp	r2, #49	@ 0x31
 801a2f6:	d004      	beq.n	801a302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801a2f8:	d333      	bcc.n	801a362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801a2fa:	2a32      	cmp	r2, #50	@ 0x32
 801a2fc:	d031      	beq.n	801a362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801a2fe:	2a33      	cmp	r2, #51	@ 0x33
 801a300:	d182      	bne.n	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a302:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801a304:	e7ad      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a306:	684a      	ldr	r2, [r1, #4]
 801a308:	7813      	ldrb	r3, [r2, #0]
 801a30a:	7852      	ldrb	r2, [r2, #1]
 801a30c:	2a00      	cmp	r2, #0
 801a30e:	f47f af7b 	bne.w	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a312:	2b01      	cmp	r3, #1
 801a314:	d005      	beq.n	801a322 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a316:	d310      	bcc.n	801a33a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801a318:	2b02      	cmp	r3, #2
 801a31a:	f47f af75 	bne.w	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a31e:	6983      	ldr	r3, [r0, #24]
 801a320:	e79f      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a322:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a324:	e79d      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a326:	6a03      	ldr	r3, [r0, #32]
 801a328:	e79b      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a32a:	684b      	ldr	r3, [r1, #4]
 801a32c:	781a      	ldrb	r2, [r3, #0]
 801a32e:	785b      	ldrb	r3, [r3, #1]
 801a330:	2b00      	cmp	r3, #0
 801a332:	f47f af69 	bne.w	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a336:	2a00      	cmp	r2, #0
 801a338:	d193      	bne.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a33a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801a33c:	e791      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a33e:	684b      	ldr	r3, [r1, #4]
 801a340:	781a      	ldrb	r2, [r3, #0]
 801a342:	785b      	ldrb	r3, [r3, #1]
 801a344:	2b00      	cmp	r3, #0
 801a346:	f47f af5f 	bne.w	801a208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	d189      	bne.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a34e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a350:	e787      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a352:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a354:	e785      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a356:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a358:	e783      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a35a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801a35c:	e781      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a35e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a360:	e77f      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a362:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801a364:	e77d      	b.n	801a262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801a366 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a36a:	b087      	sub	sp, #28
 801a36c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801a36e:	9205      	str	r2, [sp, #20]
 801a370:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a374:	9101      	str	r1, [sp, #4]
 801a376:	9202      	str	r2, [sp, #8]
 801a378:	6841      	ldr	r1, [r0, #4]
 801a37a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801a37e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801a382:	fb01 2404 	mla	r4, r1, r4, r2
 801a386:	6802      	ldr	r2, [r0, #0]
 801a388:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a38c:	f8de 2000 	ldr.w	r2, [lr]
 801a390:	9203      	str	r2, [sp, #12]
 801a392:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a396:	3204      	adds	r2, #4
 801a398:	9204      	str	r2, [sp, #16]
 801a39a:	9a02      	ldr	r2, [sp, #8]
 801a39c:	43d6      	mvns	r6, r2
 801a39e:	b2f6      	uxtb	r6, r6
 801a3a0:	9a01      	ldr	r2, [sp, #4]
 801a3a2:	2a00      	cmp	r2, #0
 801a3a4:	dc03      	bgt.n	801a3ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a3a6:	9a05      	ldr	r2, [sp, #20]
 801a3a8:	2a00      	cmp	r2, #0
 801a3aa:	f340 8129 	ble.w	801a600 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a3ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a3b0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a3b4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801a3b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a3ba:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a3be:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	dd0e      	ble.n	801a3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a3c6:	1408      	asrs	r0, r1, #16
 801a3c8:	d405      	bmi.n	801a3d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a3ca:	4560      	cmp	r0, ip
 801a3cc:	da03      	bge.n	801a3d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a3ce:	1410      	asrs	r0, r2, #16
 801a3d0:	d401      	bmi.n	801a3d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a3d2:	42b8      	cmp	r0, r7
 801a3d4:	db07      	blt.n	801a3e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a3d6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	3402      	adds	r4, #2
 801a3dc:	4401      	add	r1, r0
 801a3de:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a3e0:	4402      	add	r2, r0
 801a3e2:	e7ee      	b.n	801a3c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a3e4:	d071      	beq.n	801a4ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a3e6:	1e58      	subs	r0, r3, #1
 801a3e8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a3ea:	fb05 1500 	mla	r5, r5, r0, r1
 801a3ee:	142d      	asrs	r5, r5, #16
 801a3f0:	d45f      	bmi.n	801a4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a3f2:	4565      	cmp	r5, ip
 801a3f4:	da5d      	bge.n	801a4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a3f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801a3f8:	fb05 2000 	mla	r0, r5, r0, r2
 801a3fc:	1400      	asrs	r0, r0, #16
 801a3fe:	d458      	bmi.n	801a4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a400:	42b8      	cmp	r0, r7
 801a402:	da56      	bge.n	801a4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a404:	4699      	mov	r9, r3
 801a406:	46a2      	mov	sl, r4
 801a408:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801a40c:	f1b9 0f00 	cmp.w	r9, #0
 801a410:	dd57      	ble.n	801a4c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a412:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a416:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a41a:	9803      	ldr	r0, [sp, #12]
 801a41c:	140d      	asrs	r5, r1, #16
 801a41e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a422:	fb07 000c 	mla	r0, r7, ip, r0
 801a426:	5d40      	ldrb	r0, [r0, r5]
 801a428:	9d04      	ldr	r5, [sp, #16]
 801a42a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a42e:	f8ba 5000 	ldrh.w	r5, [sl]
 801a432:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a436:	122f      	asrs	r7, r5, #8
 801a438:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a43c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801a440:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a444:	00ed      	lsls	r5, r5, #3
 801a446:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801a44a:	fb17 f706 	smulbb	r7, r7, r6
 801a44e:	b2ed      	uxtb	r5, r5
 801a450:	fb18 f806 	smulbb	r8, r8, r6
 801a454:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a458:	10c7      	asrs	r7, r0, #3
 801a45a:	fb15 f506 	smulbb	r5, r5, r6
 801a45e:	00c0      	lsls	r0, r0, #3
 801a460:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801a464:	fa1f fc8c 	uxth.w	ip, ip
 801a468:	b2c0      	uxtb	r0, r0
 801a46a:	fb07 870b 	mla	r7, r7, fp, r8
 801a46e:	fb00 500b 	mla	r0, r0, fp, r5
 801a472:	f10c 0501 	add.w	r5, ip, #1
 801a476:	b2bf      	uxth	r7, r7
 801a478:	b280      	uxth	r0, r0
 801a47a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a47e:	f107 0801 	add.w	r8, r7, #1
 801a482:	1c45      	adds	r5, r0, #1
 801a484:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a488:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801a48c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a490:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a492:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a496:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a49a:	4401      	add	r1, r0
 801a49c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801a4a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a4a2:	ea45 0c0c 	orr.w	ip, r5, ip
 801a4a6:	4402      	add	r2, r0
 801a4a8:	ea4c 0c08 	orr.w	ip, ip, r8
 801a4ac:	f82a cb02 	strh.w	ip, [sl], #2
 801a4b0:	e7ac      	b.n	801a40c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a4b2:	f04f 0800 	mov.w	r8, #0
 801a4b6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801a4ba:	eb03 0008 	add.w	r0, r3, r8
 801a4be:	2800      	cmp	r0, #0
 801a4c0:	dc41      	bgt.n	801a546 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a4c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a4ca:	9b01      	ldr	r3, [sp, #4]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	f340 8097 	ble.w	801a600 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a4d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a4d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4e0:	eef0 6a62 	vmov.f32	s13, s5
 801a4e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a4e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a4f0:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801a4f4:	eef0 6a43 	vmov.f32	s13, s6
 801a4f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a4fc:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801a500:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a504:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a508:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a50c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a510:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a514:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a518:	ee12 2a90 	vmov	r2, s5
 801a51c:	eef0 2a47 	vmov.f32	s5, s14
 801a520:	fb92 f3f3 	sdiv	r3, r2, r3
 801a524:	ee13 2a10 	vmov	r2, s6
 801a528:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a52a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a52c:	eeb0 3a67 	vmov.f32	s6, s15
 801a530:	fb92 f3f3 	sdiv	r3, r2, r3
 801a534:	9314      	str	r3, [sp, #80]	@ 0x50
 801a536:	9b01      	ldr	r3, [sp, #4]
 801a538:	9a05      	ldr	r2, [sp, #20]
 801a53a:	3b01      	subs	r3, #1
 801a53c:	9301      	str	r3, [sp, #4]
 801a53e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a540:	bf08      	it	eq
 801a542:	4613      	moveq	r3, r2
 801a544:	e72c      	b.n	801a3a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a546:	140f      	asrs	r7, r1, #16
 801a548:	d453      	bmi.n	801a5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a54a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a54e:	42bd      	cmp	r5, r7
 801a550:	dd4f      	ble.n	801a5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a552:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a556:	d44c      	bmi.n	801a5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a558:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a55c:	4560      	cmp	r0, ip
 801a55e:	dd48      	ble.n	801a5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a560:	9803      	ldr	r0, [sp, #12]
 801a562:	b22d      	sxth	r5, r5
 801a564:	fb0c 0505 	mla	r5, ip, r5, r0
 801a568:	5de8      	ldrb	r0, [r5, r7]
 801a56a:	9d04      	ldr	r5, [sp, #16]
 801a56c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a570:	f06f 0501 	mvn.w	r5, #1
 801a574:	fb05 fb08 	mul.w	fp, r5, r8
 801a578:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a57c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a580:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801a584:	122f      	asrs	r7, r5, #8
 801a586:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a58a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a58e:	00ed      	lsls	r5, r5, #3
 801a590:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801a594:	fb17 f706 	smulbb	r7, r7, r6
 801a598:	b2ed      	uxtb	r5, r5
 801a59a:	fb19 f906 	smulbb	r9, r9, r6
 801a59e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a5a2:	10c7      	asrs	r7, r0, #3
 801a5a4:	fb15 f506 	smulbb	r5, r5, r6
 801a5a8:	00c0      	lsls	r0, r0, #3
 801a5aa:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801a5ae:	fa1f fc8c 	uxth.w	ip, ip
 801a5b2:	b2c0      	uxtb	r0, r0
 801a5b4:	fb07 970a 	mla	r7, r7, sl, r9
 801a5b8:	fb00 500a 	mla	r0, r0, sl, r5
 801a5bc:	f10c 0501 	add.w	r5, ip, #1
 801a5c0:	b2bf      	uxth	r7, r7
 801a5c2:	b280      	uxth	r0, r0
 801a5c4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a5c8:	f107 0901 	add.w	r9, r7, #1
 801a5cc:	1c45      	adds	r5, r0, #1
 801a5ce:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a5d2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801a5d6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a5da:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a5de:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a5e2:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801a5e6:	ea45 0c0c 	orr.w	ip, r5, ip
 801a5ea:	ea4c 0c09 	orr.w	ip, ip, r9
 801a5ee:	f824 c00b 	strh.w	ip, [r4, fp]
 801a5f2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a5f4:	f108 38ff 	add.w	r8, r8, #4294967295
 801a5f8:	4401      	add	r1, r0
 801a5fa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a5fc:	4402      	add	r2, r0
 801a5fe:	e75c      	b.n	801a4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a600:	b007      	add	sp, #28
 801a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a606 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60a:	b085      	sub	sp, #20
 801a60c:	4693      	mov	fp, r2
 801a60e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a612:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a614:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801a616:	6870      	ldr	r0, [r6, #4]
 801a618:	9100      	str	r1, [sp, #0]
 801a61a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a61e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801a622:	fb00 2404 	mla	r4, r0, r4, r2
 801a626:	6832      	ldr	r2, [r6, #0]
 801a628:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a62c:	682a      	ldr	r2, [r5, #0]
 801a62e:	9201      	str	r2, [sp, #4]
 801a630:	686a      	ldr	r2, [r5, #4]
 801a632:	3204      	adds	r2, #4
 801a634:	9202      	str	r2, [sp, #8]
 801a636:	9a00      	ldr	r2, [sp, #0]
 801a638:	2a00      	cmp	r2, #0
 801a63a:	dc03      	bgt.n	801a644 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a63c:	f1bb 0f00 	cmp.w	fp, #0
 801a640:	f340 80a0 	ble.w	801a784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a644:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a646:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a64a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a64e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a650:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a654:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a658:	2b00      	cmp	r3, #0
 801a65a:	dd0c      	ble.n	801a676 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a65c:	1406      	asrs	r6, r0, #16
 801a65e:	d405      	bmi.n	801a66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a660:	454e      	cmp	r6, r9
 801a662:	da03      	bge.n	801a66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a664:	1416      	asrs	r6, r2, #16
 801a666:	d401      	bmi.n	801a66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a668:	4546      	cmp	r6, r8
 801a66a:	db05      	blt.n	801a678 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a66c:	4470      	add	r0, lr
 801a66e:	4462      	add	r2, ip
 801a670:	3b01      	subs	r3, #1
 801a672:	3402      	adds	r4, #2
 801a674:	e7f0      	b.n	801a658 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a676:	d00f      	beq.n	801a698 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a678:	1e5e      	subs	r6, r3, #1
 801a67a:	fb0e 0706 	mla	r7, lr, r6, r0
 801a67e:	143f      	asrs	r7, r7, #16
 801a680:	d541      	bpl.n	801a706 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801a682:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a686:	4698      	mov	r8, r3
 801a688:	9603      	str	r6, [sp, #12]
 801a68a:	f1b8 0f00 	cmp.w	r8, #0
 801a68e:	dc59      	bgt.n	801a744 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a694:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a698:	9b00      	ldr	r3, [sp, #0]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	dd72      	ble.n	801a784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a69e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6a8:	eeb0 6a62 	vmov.f32	s12, s5
 801a6ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a6b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a6b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a6bc:	eeb0 6a43 	vmov.f32	s12, s6
 801a6c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a6c4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a6c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a6cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a6d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a6d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a6d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a6dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a6e0:	ee12 2a90 	vmov	r2, s5
 801a6e4:	eef0 2a47 	vmov.f32	s5, s14
 801a6e8:	fb92 fef3 	sdiv	lr, r2, r3
 801a6ec:	ee13 2a10 	vmov	r2, s6
 801a6f0:	eeb0 3a67 	vmov.f32	s6, s15
 801a6f4:	fb92 fcf3 	sdiv	ip, r2, r3
 801a6f8:	9b00      	ldr	r3, [sp, #0]
 801a6fa:	3b01      	subs	r3, #1
 801a6fc:	9300      	str	r3, [sp, #0]
 801a6fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a700:	bf08      	it	eq
 801a702:	465b      	moveq	r3, fp
 801a704:	e797      	b.n	801a636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a706:	454f      	cmp	r7, r9
 801a708:	dabb      	bge.n	801a682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a70a:	fb0c 2606 	mla	r6, ip, r6, r2
 801a70e:	1436      	asrs	r6, r6, #16
 801a710:	d4b7      	bmi.n	801a682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a712:	4546      	cmp	r6, r8
 801a714:	dab5      	bge.n	801a682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a716:	461e      	mov	r6, r3
 801a718:	46a0      	mov	r8, r4
 801a71a:	2e00      	cmp	r6, #0
 801a71c:	ddb8      	ble.n	801a690 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a71e:	1417      	asrs	r7, r2, #16
 801a720:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a724:	9901      	ldr	r1, [sp, #4]
 801a726:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a72a:	4462      	add	r2, ip
 801a72c:	4470      	add	r0, lr
 801a72e:	fb0a 1707 	mla	r7, sl, r7, r1
 801a732:	9902      	ldr	r1, [sp, #8]
 801a734:	3e01      	subs	r6, #1
 801a736:	f817 7009 	ldrb.w	r7, [r7, r9]
 801a73a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a73e:	f828 7b02 	strh.w	r7, [r8], #2
 801a742:	e7ea      	b.n	801a71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a744:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a748:	d417      	bmi.n	801a77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a74a:	68ae      	ldr	r6, [r5, #8]
 801a74c:	454e      	cmp	r6, r9
 801a74e:	dd14      	ble.n	801a77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a750:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a754:	d411      	bmi.n	801a77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a756:	68ef      	ldr	r7, [r5, #12]
 801a758:	4557      	cmp	r7, sl
 801a75a:	dd0e      	ble.n	801a77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a75c:	9f01      	ldr	r7, [sp, #4]
 801a75e:	b236      	sxth	r6, r6
 801a760:	f06f 0101 	mvn.w	r1, #1
 801a764:	fb0a 7606 	mla	r6, sl, r6, r7
 801a768:	9f02      	ldr	r7, [sp, #8]
 801a76a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a76e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a772:	fb01 f608 	mul.w	r6, r1, r8
 801a776:	9903      	ldr	r1, [sp, #12]
 801a778:	538f      	strh	r7, [r1, r6]
 801a77a:	4470      	add	r0, lr
 801a77c:	4462      	add	r2, ip
 801a77e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a782:	e782      	b.n	801a68a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a784:	b005      	add	sp, #20
 801a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a78a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a78a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a78e:	b087      	sub	sp, #28
 801a790:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801a792:	9205      	str	r2, [sp, #20]
 801a794:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a798:	9102      	str	r1, [sp, #8]
 801a79a:	9203      	str	r2, [sp, #12]
 801a79c:	6861      	ldr	r1, [r4, #4]
 801a79e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801a7a2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801a7a6:	fb01 2000 	mla	r0, r1, r0, r2
 801a7aa:	6822      	ldr	r2, [r4, #0]
 801a7ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a7b0:	9200      	str	r2, [sp, #0]
 801a7b2:	f8dc 2000 	ldr.w	r2, [ip]
 801a7b6:	9204      	str	r2, [sp, #16]
 801a7b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a7bc:	3204      	adds	r2, #4
 801a7be:	9201      	str	r2, [sp, #4]
 801a7c0:	9a03      	ldr	r2, [sp, #12]
 801a7c2:	43d5      	mvns	r5, r2
 801a7c4:	b2ed      	uxtb	r5, r5
 801a7c6:	9a02      	ldr	r2, [sp, #8]
 801a7c8:	2a00      	cmp	r2, #0
 801a7ca:	dc03      	bgt.n	801a7d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a7cc:	9a05      	ldr	r2, [sp, #20]
 801a7ce:	2a00      	cmp	r2, #0
 801a7d0:	f340 812c 	ble.w	801aa2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a7d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a7d6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a7da:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801a7de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a7e0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a7e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	dd10      	ble.n	801a80e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a7ec:	140c      	asrs	r4, r1, #16
 801a7ee:	d405      	bmi.n	801a7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7f0:	4574      	cmp	r4, lr
 801a7f2:	da03      	bge.n	801a7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7f4:	1414      	asrs	r4, r2, #16
 801a7f6:	d401      	bmi.n	801a7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7f8:	42bc      	cmp	r4, r7
 801a7fa:	db09      	blt.n	801a810 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a7fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a7fe:	3b01      	subs	r3, #1
 801a800:	9800      	ldr	r0, [sp, #0]
 801a802:	4421      	add	r1, r4
 801a804:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801a806:	3002      	adds	r0, #2
 801a808:	4422      	add	r2, r4
 801a80a:	9000      	str	r0, [sp, #0]
 801a80c:	e7ec      	b.n	801a7e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a80e:	d071      	beq.n	801a8f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a810:	1e5c      	subs	r4, r3, #1
 801a812:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a814:	fb06 1604 	mla	r6, r6, r4, r1
 801a818:	1436      	asrs	r6, r6, #16
 801a81a:	d45d      	bmi.n	801a8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a81c:	4576      	cmp	r6, lr
 801a81e:	da5b      	bge.n	801a8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a820:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a822:	fb06 2404 	mla	r4, r6, r4, r2
 801a826:	1424      	asrs	r4, r4, #16
 801a828:	d456      	bmi.n	801a8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a82a:	42bc      	cmp	r4, r7
 801a82c:	da54      	bge.n	801a8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a82e:	4698      	mov	r8, r3
 801a830:	f8dd 9000 	ldr.w	r9, [sp]
 801a834:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a838:	f1b8 0f00 	cmp.w	r8, #0
 801a83c:	dd54      	ble.n	801a8e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a83e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a842:	1414      	asrs	r4, r2, #16
 801a844:	9804      	ldr	r0, [sp, #16]
 801a846:	140e      	asrs	r6, r1, #16
 801a848:	f108 38ff 	add.w	r8, r8, #4294967295
 801a84c:	fb07 0404 	mla	r4, r7, r4, r0
 801a850:	9801      	ldr	r0, [sp, #4]
 801a852:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a856:	f8b9 4000 	ldrh.w	r4, [r9]
 801a85a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a85e:	1227      	asrs	r7, r4, #8
 801a860:	eb00 0b0e 	add.w	fp, r0, lr
 801a864:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a868:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a86c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a86e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a872:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a876:	4401      	add	r1, r0
 801a878:	fb16 f60a 	smulbb	r6, r6, sl
 801a87c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a87e:	fb1b fb0a 	smulbb	fp, fp, sl
 801a882:	fb07 6705 	mla	r7, r7, r5, r6
 801a886:	10e6      	asrs	r6, r4, #3
 801a888:	00e4      	lsls	r4, r4, #3
 801a88a:	4402      	add	r2, r0
 801a88c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a890:	b2bf      	uxth	r7, r7
 801a892:	b2e4      	uxtb	r4, r4
 801a894:	fb06 b605 	mla	r6, r6, r5, fp
 801a898:	fb14 f405 	smulbb	r4, r4, r5
 801a89c:	b2b6      	uxth	r6, r6
 801a89e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a8a2:	1c7c      	adds	r4, r7, #1
 801a8a4:	f106 0b01 	add.w	fp, r6, #1
 801a8a8:	fa1f fe8e 	uxth.w	lr, lr
 801a8ac:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a8b0:	f10e 0401 	add.w	r4, lr, #1
 801a8b4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a8b8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801a8bc:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a8c0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a8c4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a8c8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801a8cc:	4327      	orrs	r7, r4
 801a8ce:	ea47 070b 	orr.w	r7, r7, fp
 801a8d2:	f829 7b02 	strh.w	r7, [r9], #2
 801a8d6:	e7af      	b.n	801a838 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a8d8:	f04f 0e00 	mov.w	lr, #0
 801a8dc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a8e0:	eb03 040e 	add.w	r4, r3, lr
 801a8e4:	2c00      	cmp	r4, #0
 801a8e6:	dc43      	bgt.n	801a970 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a8e8:	9a00      	ldr	r2, [sp, #0]
 801a8ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a8ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a8f2:	9300      	str	r3, [sp, #0]
 801a8f4:	9b02      	ldr	r3, [sp, #8]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	f340 8098 	ble.w	801aa2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a8fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a902:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a906:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a90a:	eef0 6a62 	vmov.f32	s13, s5
 801a90e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a912:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a91a:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801a91e:	eef0 6a43 	vmov.f32	s13, s6
 801a922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a926:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801a92a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a92e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a932:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a93a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a93e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a942:	ee12 2a90 	vmov	r2, s5
 801a946:	eef0 2a47 	vmov.f32	s5, s14
 801a94a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a94e:	ee13 2a10 	vmov	r2, s6
 801a952:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a956:	eeb0 3a67 	vmov.f32	s6, s15
 801a95a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a95e:	9314      	str	r3, [sp, #80]	@ 0x50
 801a960:	9b02      	ldr	r3, [sp, #8]
 801a962:	9a05      	ldr	r2, [sp, #20]
 801a964:	3b01      	subs	r3, #1
 801a966:	9302      	str	r3, [sp, #8]
 801a968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a96a:	bf08      	it	eq
 801a96c:	4613      	moveq	r3, r2
 801a96e:	e72a      	b.n	801a7c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a970:	140f      	asrs	r7, r1, #16
 801a972:	d454      	bmi.n	801aa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a974:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a978:	42be      	cmp	r6, r7
 801a97a:	dd50      	ble.n	801aa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a97c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a980:	d44d      	bmi.n	801aa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a982:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a986:	4544      	cmp	r4, r8
 801a988:	dd49      	ble.n	801aa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a98a:	9c04      	ldr	r4, [sp, #16]
 801a98c:	b236      	sxth	r6, r6
 801a98e:	f06f 0001 	mvn.w	r0, #1
 801a992:	fb08 4606 	mla	r6, r8, r6, r4
 801a996:	9c01      	ldr	r4, [sp, #4]
 801a998:	fb00 fa0e 	mul.w	sl, r0, lr
 801a99c:	9800      	ldr	r0, [sp, #0]
 801a99e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a9a2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a9a6:	eb04 0b08 	add.w	fp, r4, r8
 801a9aa:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a9ae:	9801      	ldr	r0, [sp, #4]
 801a9b0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a9b4:	1227      	asrs	r7, r4, #8
 801a9b6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a9ba:	fb16 f609 	smulbb	r6, r6, r9
 801a9be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a9c2:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a9c6:	fb1b fb09 	smulbb	fp, fp, r9
 801a9ca:	fb07 6705 	mla	r7, r7, r5, r6
 801a9ce:	10e6      	asrs	r6, r4, #3
 801a9d0:	00e4      	lsls	r4, r4, #3
 801a9d2:	9800      	ldr	r0, [sp, #0]
 801a9d4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a9d8:	b2bf      	uxth	r7, r7
 801a9da:	b2e4      	uxtb	r4, r4
 801a9dc:	fb06 b605 	mla	r6, r6, r5, fp
 801a9e0:	fb14 f405 	smulbb	r4, r4, r5
 801a9e4:	b2b6      	uxth	r6, r6
 801a9e6:	fb08 4809 	mla	r8, r8, r9, r4
 801a9ea:	1c7c      	adds	r4, r7, #1
 801a9ec:	f106 0b01 	add.w	fp, r6, #1
 801a9f0:	fa1f f888 	uxth.w	r8, r8
 801a9f4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a9f8:	f108 0401 	add.w	r4, r8, #1
 801a9fc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801aa00:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801aa04:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801aa08:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801aa0c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801aa10:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801aa14:	4327      	orrs	r7, r4
 801aa16:	ea47 070b 	orr.w	r7, r7, fp
 801aa1a:	f820 700a 	strh.w	r7, [r0, sl]
 801aa1e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801aa20:	f10e 3eff 	add.w	lr, lr, #4294967295
 801aa24:	4401      	add	r1, r0
 801aa26:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801aa28:	4402      	add	r2, r0
 801aa2a:	e759      	b.n	801a8e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801aa2c:	b007      	add	sp, #28
 801aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa38:	b085      	sub	sp, #20
 801aa3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aa3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801aa40:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801aa42:	9203      	str	r2, [sp, #12]
 801aa44:	6870      	ldr	r0, [r6, #4]
 801aa46:	686f      	ldr	r7, [r5, #4]
 801aa48:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801aa4c:	3704      	adds	r7, #4
 801aa4e:	9101      	str	r1, [sp, #4]
 801aa50:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801aa54:	fb00 2404 	mla	r4, r0, r4, r2
 801aa58:	6832      	ldr	r2, [r6, #0]
 801aa5a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801aa5e:	682a      	ldr	r2, [r5, #0]
 801aa60:	9202      	str	r2, [sp, #8]
 801aa62:	9a01      	ldr	r2, [sp, #4]
 801aa64:	2a00      	cmp	r2, #0
 801aa66:	dc03      	bgt.n	801aa70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801aa68:	9a03      	ldr	r2, [sp, #12]
 801aa6a:	2a00      	cmp	r2, #0
 801aa6c:	f340 80cc 	ble.w	801ac08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801aa70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801aa72:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801aa76:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801aa7a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aa7c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801aa80:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	dd0d      	ble.n	801aaa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801aa88:	1406      	asrs	r6, r0, #16
 801aa8a:	d405      	bmi.n	801aa98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801aa8c:	454e      	cmp	r6, r9
 801aa8e:	da03      	bge.n	801aa98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801aa90:	1416      	asrs	r6, r2, #16
 801aa92:	d401      	bmi.n	801aa98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801aa94:	4546      	cmp	r6, r8
 801aa96:	db06      	blt.n	801aaa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aa98:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801aa9a:	4460      	add	r0, ip
 801aa9c:	3b01      	subs	r3, #1
 801aa9e:	3402      	adds	r4, #2
 801aaa0:	4432      	add	r2, r6
 801aaa2:	e7ef      	b.n	801aa84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801aaa4:	d00f      	beq.n	801aac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aaa6:	1e5e      	subs	r6, r3, #1
 801aaa8:	fb0c 0e06 	mla	lr, ip, r6, r0
 801aaac:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801aab0:	d543      	bpl.n	801ab3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801aab2:	4698      	mov	r8, r3
 801aab4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801aab8:	f1b8 0f00 	cmp.w	r8, #0
 801aabc:	dc71      	bgt.n	801aba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801aabe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aac2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aac6:	9b01      	ldr	r3, [sp, #4]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	f340 809d 	ble.w	801ac08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801aace:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aad4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aad8:	eeb0 6a62 	vmov.f32	s12, s5
 801aadc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aae0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aae4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aae8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801aaec:	eeb0 6a43 	vmov.f32	s12, s6
 801aaf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aaf4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801aaf8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aafc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab10:	ee12 2a90 	vmov	r2, s5
 801ab14:	eef0 2a47 	vmov.f32	s5, s14
 801ab18:	fb92 fcf3 	sdiv	ip, r2, r3
 801ab1c:	ee13 2a10 	vmov	r2, s6
 801ab20:	eeb0 3a67 	vmov.f32	s6, s15
 801ab24:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab28:	9312      	str	r3, [sp, #72]	@ 0x48
 801ab2a:	9b01      	ldr	r3, [sp, #4]
 801ab2c:	9a03      	ldr	r2, [sp, #12]
 801ab2e:	3b01      	subs	r3, #1
 801ab30:	9301      	str	r3, [sp, #4]
 801ab32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab34:	bf08      	it	eq
 801ab36:	4613      	moveq	r3, r2
 801ab38:	e793      	b.n	801aa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ab3a:	45ce      	cmp	lr, r9
 801ab3c:	dab9      	bge.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ab3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ab40:	fb01 2606 	mla	r6, r1, r6, r2
 801ab44:	1436      	asrs	r6, r6, #16
 801ab46:	d4b4      	bmi.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ab48:	4546      	cmp	r6, r8
 801ab4a:	dab2      	bge.n	801aab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ab4c:	4698      	mov	r8, r3
 801ab4e:	46a2      	mov	sl, r4
 801ab50:	f1b8 0f00 	cmp.w	r8, #0
 801ab54:	ddb3      	ble.n	801aabe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ab56:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ab5a:	1416      	asrs	r6, r2, #16
 801ab5c:	9902      	ldr	r1, [sp, #8]
 801ab5e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801ab62:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab66:	4460      	add	r0, ip
 801ab68:	fb09 1606 	mla	r6, r9, r6, r1
 801ab6c:	4928      	ldr	r1, [pc, #160]	@ (801ac10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801ab6e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ab72:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ab76:	eb07 0b0e 	add.w	fp, r7, lr
 801ab7a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ab7e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ab82:	00f6      	lsls	r6, r6, #3
 801ab84:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ab88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ab8a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ab8e:	440a      	add	r2, r1
 801ab90:	ea49 0606 	orr.w	r6, r9, r6
 801ab94:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ab98:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801ab9c:	f82a 6b02 	strh.w	r6, [sl], #2
 801aba0:	e7d6      	b.n	801ab50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801aba2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aba6:	d429      	bmi.n	801abfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801aba8:	68ae      	ldr	r6, [r5, #8]
 801abaa:	454e      	cmp	r6, r9
 801abac:	dd26      	ble.n	801abfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801abae:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801abb2:	d423      	bmi.n	801abfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801abb4:	68e9      	ldr	r1, [r5, #12]
 801abb6:	4559      	cmp	r1, fp
 801abb8:	dd20      	ble.n	801abfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801abba:	fa0f fe86 	sxth.w	lr, r6
 801abbe:	9902      	ldr	r1, [sp, #8]
 801abc0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801abc4:	f06f 0101 	mvn.w	r1, #1
 801abc8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801abcc:	fb01 f908 	mul.w	r9, r1, r8
 801abd0:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801abd4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801abd8:	eb07 060e 	add.w	r6, r7, lr
 801abdc:	f896 b002 	ldrb.w	fp, [r6, #2]
 801abe0:	7876      	ldrb	r6, [r6, #1]
 801abe2:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801abe6:	00f6      	lsls	r6, r6, #3
 801abe8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801abec:	ea4b 0606 	orr.w	r6, fp, r6
 801abf0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801abf4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801abf8:	f82a 6009 	strh.w	r6, [sl, r9]
 801abfc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801abfe:	4460      	add	r0, ip
 801ac00:	f108 38ff 	add.w	r8, r8, #4294967295
 801ac04:	440a      	add	r2, r1
 801ac06:	e757      	b.n	801aab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ac08:	b005      	add	sp, #20
 801ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac0e:	bf00      	nop
 801ac10:	fffff800 	.word	0xfffff800

0801ac14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac18:	b087      	sub	sp, #28
 801ac1a:	468b      	mov	fp, r1
 801ac1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ac20:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ac22:	9204      	str	r2, [sp, #16]
 801ac24:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ac28:	6841      	ldr	r1, [r0, #4]
 801ac2a:	9205      	str	r2, [sp, #20]
 801ac2c:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801ac30:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801ac34:	fb01 2404 	mla	r4, r1, r4, r2
 801ac38:	6802      	ldr	r2, [r0, #0]
 801ac3a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ac3e:	f8dc 2000 	ldr.w	r2, [ip]
 801ac42:	9201      	str	r2, [sp, #4]
 801ac44:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ac48:	3204      	adds	r2, #4
 801ac4a:	9202      	str	r2, [sp, #8]
 801ac4c:	f1bb 0f00 	cmp.w	fp, #0
 801ac50:	dc03      	bgt.n	801ac5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ac52:	9a04      	ldr	r2, [sp, #16]
 801ac54:	2a00      	cmp	r2, #0
 801ac56:	f340 8138 	ble.w	801aeca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ac5a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ac5c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ac60:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ac64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ac66:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801ac6a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	dd0e      	ble.n	801ac90 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ac72:	1402      	asrs	r2, r0, #16
 801ac74:	d405      	bmi.n	801ac82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ac76:	42ba      	cmp	r2, r7
 801ac78:	da03      	bge.n	801ac82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ac7a:	140a      	asrs	r2, r1, #16
 801ac7c:	d401      	bmi.n	801ac82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ac7e:	42b2      	cmp	r2, r6
 801ac80:	db07      	blt.n	801ac92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ac82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ac84:	3b01      	subs	r3, #1
 801ac86:	3402      	adds	r4, #2
 801ac88:	4410      	add	r0, r2
 801ac8a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ac8c:	4411      	add	r1, r2
 801ac8e:	e7ee      	b.n	801ac6e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ac90:	d019      	beq.n	801acc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ac92:	1e5a      	subs	r2, r3, #1
 801ac94:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ac96:	fb05 0502 	mla	r5, r5, r2, r0
 801ac9a:	142d      	asrs	r5, r5, #16
 801ac9c:	d409      	bmi.n	801acb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ac9e:	42bd      	cmp	r5, r7
 801aca0:	da07      	bge.n	801acb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aca2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801aca4:	fb05 1202 	mla	r2, r5, r2, r1
 801aca8:	1412      	asrs	r2, r2, #16
 801acaa:	d402      	bmi.n	801acb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801acac:	42b2      	cmp	r2, r6
 801acae:	f2c0 80ac 	blt.w	801ae0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801acb2:	f04f 0e00 	mov.w	lr, #0
 801acb6:	eb03 020e 	add.w	r2, r3, lr
 801acba:	2a00      	cmp	r2, #0
 801acbc:	dc3e      	bgt.n	801ad3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801acbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acc2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801acc6:	f1bb 0f00 	cmp.w	fp, #0
 801acca:	f340 80fe 	ble.w	801aeca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801acce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801acd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801acd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801acd8:	f1bb 0b01 	subs.w	fp, fp, #1
 801acdc:	eeb0 6a62 	vmov.f32	s12, s5
 801ace0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ace4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ace8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801acec:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801acf0:	eeb0 6a43 	vmov.f32	s12, s6
 801acf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801acf8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801acfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad14:	ee12 2a90 	vmov	r2, s5
 801ad18:	eef0 2a47 	vmov.f32	s5, s14
 801ad1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad20:	ee13 2a10 	vmov	r2, s6
 801ad24:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ad26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ad28:	eeb0 3a67 	vmov.f32	s6, s15
 801ad2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad30:	9a04      	ldr	r2, [sp, #16]
 801ad32:	9314      	str	r3, [sp, #80]	@ 0x50
 801ad34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ad36:	bf08      	it	eq
 801ad38:	4613      	moveq	r3, r2
 801ad3a:	e787      	b.n	801ac4c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ad3c:	1406      	asrs	r6, r0, #16
 801ad3e:	d45d      	bmi.n	801adfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ad40:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ad44:	42b5      	cmp	r5, r6
 801ad46:	dd59      	ble.n	801adfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ad48:	140f      	asrs	r7, r1, #16
 801ad4a:	d457      	bmi.n	801adfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ad4c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ad50:	42ba      	cmp	r2, r7
 801ad52:	dd53      	ble.n	801adfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ad54:	9a01      	ldr	r2, [sp, #4]
 801ad56:	b22d      	sxth	r5, r5
 801ad58:	fb07 2505 	mla	r5, r7, r5, r2
 801ad5c:	5daa      	ldrb	r2, [r5, r6]
 801ad5e:	9d02      	ldr	r5, [sp, #8]
 801ad60:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ad64:	0e2e      	lsrs	r6, r5, #24
 801ad66:	d049      	beq.n	801adfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ad68:	f06f 0201 	mvn.w	r2, #1
 801ad6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ad70:	fb02 f20e 	mul.w	r2, r2, lr
 801ad74:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ad78:	9203      	str	r2, [sp, #12]
 801ad7a:	9a05      	ldr	r2, [sp, #20]
 801ad7c:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ad80:	4356      	muls	r6, r2
 801ad82:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ad86:	1c72      	adds	r2, r6, #1
 801ad88:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ad8c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ad90:	b2ed      	uxtb	r5, r5
 801ad92:	1212      	asrs	r2, r2, #8
 801ad94:	fa1f f982 	uxth.w	r9, r2
 801ad98:	43d2      	mvns	r2, r2
 801ad9a:	fb16 f609 	smulbb	r6, r6, r9
 801ad9e:	b2d2      	uxtb	r2, r2
 801ada0:	fb15 f509 	smulbb	r5, r5, r9
 801ada4:	fb07 6702 	mla	r7, r7, r2, r6
 801ada8:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801adac:	fb1a fa09 	smulbb	sl, sl, r9
 801adb0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801adb4:	b2bf      	uxth	r7, r7
 801adb6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801adba:	fa5f f888 	uxtb.w	r8, r8
 801adbe:	fb06 a602 	mla	r6, r6, r2, sl
 801adc2:	fb08 5502 	mla	r5, r8, r2, r5
 801adc6:	1c7a      	adds	r2, r7, #1
 801adc8:	b2b6      	uxth	r6, r6
 801adca:	b2ad      	uxth	r5, r5
 801adcc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801add0:	9a03      	ldr	r2, [sp, #12]
 801add2:	f105 0a01 	add.w	sl, r5, #1
 801add6:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801adda:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801adde:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ade2:	ea4a 0707 	orr.w	r7, sl, r7
 801ade6:	f106 0a01 	add.w	sl, r6, #1
 801adea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801adee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801adf2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801adf6:	ea47 070a 	orr.w	r7, r7, sl
 801adfa:	52a7      	strh	r7, [r4, r2]
 801adfc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801adfe:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ae02:	4410      	add	r0, r2
 801ae04:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ae06:	4411      	add	r1, r2
 801ae08:	e755      	b.n	801acb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae0a:	f04f 0800 	mov.w	r8, #0
 801ae0e:	eba3 0208 	sub.w	r2, r3, r8
 801ae12:	2a00      	cmp	r2, #0
 801ae14:	f77f af53 	ble.w	801acbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ae18:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ae1c:	140a      	asrs	r2, r1, #16
 801ae1e:	9f01      	ldr	r7, [sp, #4]
 801ae20:	1405      	asrs	r5, r0, #16
 801ae22:	fb06 7202 	mla	r2, r6, r2, r7
 801ae26:	5d52      	ldrb	r2, [r2, r5]
 801ae28:	9d02      	ldr	r5, [sp, #8]
 801ae2a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ae2e:	0e2e      	lsrs	r6, r5, #24
 801ae30:	d044      	beq.n	801aebc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ae32:	9a05      	ldr	r2, [sp, #20]
 801ae34:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ae38:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ae3c:	4356      	muls	r6, r2
 801ae3e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ae42:	1c72      	adds	r2, r6, #1
 801ae44:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ae48:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ae4c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ae50:	b2ed      	uxtb	r5, r5
 801ae52:	1212      	asrs	r2, r2, #8
 801ae54:	fa1f f982 	uxth.w	r9, r2
 801ae58:	43d2      	mvns	r2, r2
 801ae5a:	fb16 f609 	smulbb	r6, r6, r9
 801ae5e:	b2d2      	uxtb	r2, r2
 801ae60:	fb15 f509 	smulbb	r5, r5, r9
 801ae64:	fb07 6702 	mla	r7, r7, r2, r6
 801ae68:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ae6c:	fb1a fa09 	smulbb	sl, sl, r9
 801ae70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ae74:	b2bf      	uxth	r7, r7
 801ae76:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ae7a:	fa5f fe8e 	uxtb.w	lr, lr
 801ae7e:	fb06 a602 	mla	r6, r6, r2, sl
 801ae82:	fb0e 5502 	mla	r5, lr, r2, r5
 801ae86:	1c7a      	adds	r2, r7, #1
 801ae88:	b2b6      	uxth	r6, r6
 801ae8a:	b2ad      	uxth	r5, r5
 801ae8c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ae90:	f105 0a01 	add.w	sl, r5, #1
 801ae94:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ae98:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ae9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aea0:	ea4a 0707 	orr.w	r7, sl, r7
 801aea4:	f106 0a01 	add.w	sl, r6, #1
 801aea8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801aeac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aeb0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801aeb4:	ea47 070a 	orr.w	r7, r7, sl
 801aeb8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801aebc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801aebe:	f108 0801 	add.w	r8, r8, #1
 801aec2:	4410      	add	r0, r2
 801aec4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801aec6:	4411      	add	r1, r2
 801aec8:	e7a1      	b.n	801ae0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801aeca:	b007      	add	sp, #28
 801aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aed0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	b085      	sub	sp, #20
 801aed6:	468b      	mov	fp, r1
 801aed8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aedc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801aede:	9203      	str	r2, [sp, #12]
 801aee0:	6841      	ldr	r1, [r0, #4]
 801aee2:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801aee6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801aeea:	fb01 2404 	mla	r4, r1, r4, r2
 801aeee:	6802      	ldr	r2, [r0, #0]
 801aef0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801aef4:	f8de 2000 	ldr.w	r2, [lr]
 801aef8:	9200      	str	r2, [sp, #0]
 801aefa:	f8de 2004 	ldr.w	r2, [lr, #4]
 801aefe:	3204      	adds	r2, #4
 801af00:	9201      	str	r2, [sp, #4]
 801af02:	f1bb 0f00 	cmp.w	fp, #0
 801af06:	dc03      	bgt.n	801af10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801af08:	9a03      	ldr	r2, [sp, #12]
 801af0a:	2a00      	cmp	r2, #0
 801af0c:	f340 8153 	ble.w	801b1b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801af10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af12:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801af16:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801af1a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801af1c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801af20:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801af24:	2b00      	cmp	r3, #0
 801af26:	dd0e      	ble.n	801af46 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af28:	1408      	asrs	r0, r1, #16
 801af2a:	d405      	bmi.n	801af38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af2c:	42b8      	cmp	r0, r7
 801af2e:	da03      	bge.n	801af38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af30:	1410      	asrs	r0, r2, #16
 801af32:	d401      	bmi.n	801af38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801af34:	42b0      	cmp	r0, r6
 801af36:	db07      	blt.n	801af48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af38:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801af3a:	3b01      	subs	r3, #1
 801af3c:	3402      	adds	r4, #2
 801af3e:	4401      	add	r1, r0
 801af40:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801af42:	4402      	add	r2, r0
 801af44:	e7ee      	b.n	801af24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801af46:	d017      	beq.n	801af78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801af48:	1e58      	subs	r0, r3, #1
 801af4a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801af4c:	fb05 1500 	mla	r5, r5, r0, r1
 801af50:	142d      	asrs	r5, r5, #16
 801af52:	d409      	bmi.n	801af68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801af54:	42bd      	cmp	r5, r7
 801af56:	da07      	bge.n	801af68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801af58:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801af5a:	fb05 2000 	mla	r0, r5, r0, r2
 801af5e:	1400      	asrs	r0, r0, #16
 801af60:	d402      	bmi.n	801af68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801af62:	42b0      	cmp	r0, r6
 801af64:	f2c0 80bc 	blt.w	801b0e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801af68:	2600      	movs	r6, #0
 801af6a:	1998      	adds	r0, r3, r6
 801af6c:	2800      	cmp	r0, #0
 801af6e:	dc3e      	bgt.n	801afee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801af70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801af78:	f1bb 0f00 	cmp.w	fp, #0
 801af7c:	f340 811b 	ble.w	801b1b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801af80:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af8a:	f1bb 0b01 	subs.w	fp, fp, #1
 801af8e:	eeb0 6a62 	vmov.f32	s12, s5
 801af92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801af96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801af9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801afa2:	eeb0 6a43 	vmov.f32	s12, s6
 801afa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afaa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801afae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801afb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801afb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801afba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801afbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afc6:	ee12 2a90 	vmov	r2, s5
 801afca:	eef0 2a47 	vmov.f32	s5, s14
 801afce:	fb92 f3f3 	sdiv	r3, r2, r3
 801afd2:	ee13 2a10 	vmov	r2, s6
 801afd6:	9311      	str	r3, [sp, #68]	@ 0x44
 801afd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afda:	eeb0 3a67 	vmov.f32	s6, s15
 801afde:	fb92 f3f3 	sdiv	r3, r2, r3
 801afe2:	9a03      	ldr	r2, [sp, #12]
 801afe4:	9312      	str	r3, [sp, #72]	@ 0x48
 801afe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afe8:	bf08      	it	eq
 801afea:	4613      	moveq	r3, r2
 801afec:	e789      	b.n	801af02 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801afee:	140f      	asrs	r7, r1, #16
 801aff0:	d426      	bmi.n	801b040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801aff2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801aff6:	42bd      	cmp	r5, r7
 801aff8:	dd22      	ble.n	801b040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801affa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801affe:	d41f      	bmi.n	801b040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b000:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b004:	4560      	cmp	r0, ip
 801b006:	dd1b      	ble.n	801b040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b008:	9800      	ldr	r0, [sp, #0]
 801b00a:	b22d      	sxth	r5, r5
 801b00c:	fb0c 0505 	mla	r5, ip, r5, r0
 801b010:	5de8      	ldrb	r0, [r5, r7]
 801b012:	9d01      	ldr	r5, [sp, #4]
 801b014:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801b018:	0e07      	lsrs	r7, r0, #24
 801b01a:	2fff      	cmp	r7, #255	@ 0xff
 801b01c:	d116      	bne.n	801b04c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b01e:	f06f 0501 	mvn.w	r5, #1
 801b022:	fb05 f706 	mul.w	r7, r5, r6
 801b026:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801b02a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b02e:	0945      	lsrs	r5, r0, #5
 801b030:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b034:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801b038:	ea4c 0505 	orr.w	r5, ip, r5
 801b03c:	4305      	orrs	r5, r0
 801b03e:	53e5      	strh	r5, [r4, r7]
 801b040:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b042:	3e01      	subs	r6, #1
 801b044:	4401      	add	r1, r0
 801b046:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b048:	4402      	add	r2, r0
 801b04a:	e78e      	b.n	801af6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b04c:	b2fd      	uxtb	r5, r7
 801b04e:	2f00      	cmp	r7, #0
 801b050:	d0f6      	beq.n	801b040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b052:	f06f 0701 	mvn.w	r7, #1
 801b056:	fa1f f985 	uxth.w	r9, r5
 801b05a:	43ed      	mvns	r5, r5
 801b05c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b060:	4377      	muls	r7, r6
 801b062:	fb1a fa09 	smulbb	sl, sl, r9
 801b066:	b2ed      	uxtb	r5, r5
 801b068:	f834 8007 	ldrh.w	r8, [r4, r7]
 801b06c:	9702      	str	r7, [sp, #8]
 801b06e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b072:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b076:	fb17 f709 	smulbb	r7, r7, r9
 801b07a:	b2c0      	uxtb	r0, r0
 801b07c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b080:	fb10 f009 	smulbb	r0, r0, r9
 801b084:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b088:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801b08c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b090:	fa1f fc8c 	uxth.w	ip, ip
 801b094:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b098:	fa5f f888 	uxtb.w	r8, r8
 801b09c:	fb07 a705 	mla	r7, r7, r5, sl
 801b0a0:	fb08 0005 	mla	r0, r8, r5, r0
 801b0a4:	f10c 0501 	add.w	r5, ip, #1
 801b0a8:	b2bf      	uxth	r7, r7
 801b0aa:	b280      	uxth	r0, r0
 801b0ac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b0b0:	f100 0a01 	add.w	sl, r0, #1
 801b0b4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b0b8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b0bc:	9802      	ldr	r0, [sp, #8]
 801b0be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b0c2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b0c6:	f107 0a01 	add.w	sl, r7, #1
 801b0ca:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b0ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b0d2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b0d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b0da:	f824 c000 	strh.w	ip, [r4, r0]
 801b0de:	e7af      	b.n	801b040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b0e0:	f04f 0800 	mov.w	r8, #0
 801b0e4:	eba3 0008 	sub.w	r0, r3, r8
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	f77f af41 	ble.w	801af70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b0ee:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b0f2:	1410      	asrs	r0, r2, #16
 801b0f4:	9f00      	ldr	r7, [sp, #0]
 801b0f6:	140d      	asrs	r5, r1, #16
 801b0f8:	fb06 7000 	mla	r0, r6, r0, r7
 801b0fc:	5d40      	ldrb	r0, [r0, r5]
 801b0fe:	9d01      	ldr	r5, [sp, #4]
 801b100:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b104:	0e2e      	lsrs	r6, r5, #24
 801b106:	2eff      	cmp	r6, #255	@ 0xff
 801b108:	d112      	bne.n	801b130 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801b10a:	482c      	ldr	r0, [pc, #176]	@ (801b1bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b10c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b110:	0968      	lsrs	r0, r5, #5
 801b112:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b116:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801b11a:	4330      	orrs	r0, r6
 801b11c:	4328      	orrs	r0, r5
 801b11e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801b122:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b124:	f108 0801 	add.w	r8, r8, #1
 801b128:	4401      	add	r1, r0
 801b12a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b12c:	4402      	add	r2, r0
 801b12e:	e7d9      	b.n	801b0e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b130:	b2f0      	uxtb	r0, r6
 801b132:	2e00      	cmp	r6, #0
 801b134:	d0f5      	beq.n	801b122 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b136:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801b13a:	fa1f f980 	uxth.w	r9, r0
 801b13e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b142:	43c0      	mvns	r0, r0
 801b144:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b148:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b14c:	fb16 f609 	smulbb	r6, r6, r9
 801b150:	b2c0      	uxtb	r0, r0
 801b152:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b156:	b2ed      	uxtb	r5, r5
 801b158:	fb1a fa09 	smulbb	sl, sl, r9
 801b15c:	fb07 6700 	mla	r7, r7, r0, r6
 801b160:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b164:	fb15 f509 	smulbb	r5, r5, r9
 801b168:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b16c:	b2bf      	uxth	r7, r7
 801b16e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b172:	fa5f fc8c 	uxtb.w	ip, ip
 801b176:	fb06 a600 	mla	r6, r6, r0, sl
 801b17a:	fb0c 5500 	mla	r5, ip, r0, r5
 801b17e:	1c78      	adds	r0, r7, #1
 801b180:	b2b6      	uxth	r6, r6
 801b182:	b2ad      	uxth	r5, r5
 801b184:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b188:	f105 0a01 	add.w	sl, r5, #1
 801b18c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b190:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b194:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b198:	ea4a 0707 	orr.w	r7, sl, r7
 801b19c:	f106 0a01 	add.w	sl, r6, #1
 801b1a0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b1a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b1a8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b1ac:	ea47 070a 	orr.w	r7, r7, sl
 801b1b0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b1b4:	e7b5      	b.n	801b122 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b1b6:	b005      	add	sp, #20
 801b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1bc:	fffff800 	.word	0xfffff800

0801b1c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c4:	b087      	sub	sp, #28
 801b1c6:	468b      	mov	fp, r1
 801b1c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b1cc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b1ce:	9204      	str	r2, [sp, #16]
 801b1d0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b1d4:	6861      	ldr	r1, [r4, #4]
 801b1d6:	9205      	str	r2, [sp, #20]
 801b1d8:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801b1dc:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801b1e0:	fb01 2000 	mla	r0, r1, r0, r2
 801b1e4:	6822      	ldr	r2, [r4, #0]
 801b1e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b1ea:	f8de 2000 	ldr.w	r2, [lr]
 801b1ee:	9201      	str	r2, [sp, #4]
 801b1f0:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b1f4:	9202      	str	r2, [sp, #8]
 801b1f6:	f1bb 0f00 	cmp.w	fp, #0
 801b1fa:	dc03      	bgt.n	801b204 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b1fc:	9a04      	ldr	r2, [sp, #16]
 801b1fe:	2a00      	cmp	r2, #0
 801b200:	f340 8142 	ble.w	801b488 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b204:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b206:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b20a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b20e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b210:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b214:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b218:	2b00      	cmp	r3, #0
 801b21a:	dd0e      	ble.n	801b23a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b21c:	140c      	asrs	r4, r1, #16
 801b21e:	d405      	bmi.n	801b22c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b220:	42bc      	cmp	r4, r7
 801b222:	da03      	bge.n	801b22c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b224:	1414      	asrs	r4, r2, #16
 801b226:	d401      	bmi.n	801b22c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b228:	42b4      	cmp	r4, r6
 801b22a:	db07      	blt.n	801b23c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b22c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b22e:	3b01      	subs	r3, #1
 801b230:	3002      	adds	r0, #2
 801b232:	4421      	add	r1, r4
 801b234:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b236:	4422      	add	r2, r4
 801b238:	e7ee      	b.n	801b218 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b23a:	d019      	beq.n	801b270 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b23c:	1e5c      	subs	r4, r3, #1
 801b23e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b240:	fb05 1504 	mla	r5, r5, r4, r1
 801b244:	142d      	asrs	r5, r5, #16
 801b246:	d409      	bmi.n	801b25c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b248:	42bd      	cmp	r5, r7
 801b24a:	da07      	bge.n	801b25c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b24c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b24e:	fb05 2404 	mla	r4, r5, r4, r2
 801b252:	1424      	asrs	r4, r4, #16
 801b254:	d402      	bmi.n	801b25c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b256:	42b4      	cmp	r4, r6
 801b258:	f2c0 80b1 	blt.w	801b3be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801b25c:	f04f 0800 	mov.w	r8, #0
 801b260:	eb03 0408 	add.w	r4, r3, r8
 801b264:	2c00      	cmp	r4, #0
 801b266:	dc3e      	bgt.n	801b2e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b26c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b270:	f1bb 0f00 	cmp.w	fp, #0
 801b274:	f340 8108 	ble.w	801b488 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b278:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b27c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b27e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b282:	f1bb 0b01 	subs.w	fp, fp, #1
 801b286:	eeb0 6a62 	vmov.f32	s12, s5
 801b28a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b28e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b292:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b296:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b29a:	eeb0 6a43 	vmov.f32	s12, s6
 801b29e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2a2:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b2a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b2aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2be:	ee12 2a90 	vmov	r2, s5
 801b2c2:	eef0 2a47 	vmov.f32	s5, s14
 801b2c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2ca:	ee13 2a10 	vmov	r2, s6
 801b2ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b2d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b2d2:	eeb0 3a67 	vmov.f32	s6, s15
 801b2d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2da:	9a04      	ldr	r2, [sp, #16]
 801b2dc:	9314      	str	r3, [sp, #80]	@ 0x50
 801b2de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b2e0:	bf08      	it	eq
 801b2e2:	4613      	moveq	r3, r2
 801b2e4:	e787      	b.n	801b1f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b2e6:	140e      	asrs	r6, r1, #16
 801b2e8:	d462      	bmi.n	801b3b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b2ea:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b2ee:	42b5      	cmp	r5, r6
 801b2f0:	dd5e      	ble.n	801b3b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b2f2:	1417      	asrs	r7, r2, #16
 801b2f4:	d45c      	bmi.n	801b3b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b2f6:	f8de 400c 	ldr.w	r4, [lr, #12]
 801b2fa:	42bc      	cmp	r4, r7
 801b2fc:	dd58      	ble.n	801b3b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b2fe:	b22d      	sxth	r5, r5
 801b300:	9c02      	ldr	r4, [sp, #8]
 801b302:	fb07 6505 	mla	r5, r7, r5, r6
 801b306:	5d66      	ldrb	r6, [r4, r5]
 801b308:	2e00      	cmp	r6, #0
 801b30a:	d051      	beq.n	801b3b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b30c:	9c01      	ldr	r4, [sp, #4]
 801b30e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801b312:	f06f 0401 	mvn.w	r4, #1
 801b316:	fb04 f408 	mul.w	r4, r4, r8
 801b31a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801b31e:	5b05      	ldrh	r5, [r0, r4]
 801b320:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b324:	9403      	str	r4, [sp, #12]
 801b326:	9c05      	ldr	r4, [sp, #20]
 801b328:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b32c:	4366      	muls	r6, r4
 801b32e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801b332:	1c74      	adds	r4, r6, #1
 801b334:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b338:	122e      	asrs	r6, r5, #8
 801b33a:	1224      	asrs	r4, r4, #8
 801b33c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801b340:	00ed      	lsls	r5, r5, #3
 801b342:	b2a7      	uxth	r7, r4
 801b344:	43e4      	mvns	r4, r4
 801b346:	b2ed      	uxtb	r5, r5
 801b348:	b2e4      	uxtb	r4, r4
 801b34a:	fb16 f604 	smulbb	r6, r6, r4
 801b34e:	fb15 f504 	smulbb	r5, r5, r4
 801b352:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b356:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801b35a:	fb1a fa04 	smulbb	sl, sl, r4
 801b35e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b362:	fa1f fc8c 	uxth.w	ip, ip
 801b366:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b36a:	fa5f f989 	uxtb.w	r9, r9
 801b36e:	fb06 a607 	mla	r6, r6, r7, sl
 801b372:	f10c 0401 	add.w	r4, ip, #1
 801b376:	fb09 5507 	mla	r5, r9, r7, r5
 801b37a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b37e:	9c03      	ldr	r4, [sp, #12]
 801b380:	b2ad      	uxth	r5, r5
 801b382:	b2b6      	uxth	r6, r6
 801b384:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b388:	f105 0a01 	add.w	sl, r5, #1
 801b38c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b390:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b394:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b398:	f106 0a01 	add.w	sl, r6, #1
 801b39c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b3a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b3a4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b3a8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b3ac:	f820 c004 	strh.w	ip, [r0, r4]
 801b3b0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b3b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3b6:	4421      	add	r1, r4
 801b3b8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b3ba:	4422      	add	r2, r4
 801b3bc:	e750      	b.n	801b260 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3be:	f04f 0900 	mov.w	r9, #0
 801b3c2:	eba3 0409 	sub.w	r4, r3, r9
 801b3c6:	2c00      	cmp	r4, #0
 801b3c8:	f77f af4e 	ble.w	801b268 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b3cc:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b3d0:	140d      	asrs	r5, r1, #16
 801b3d2:	1414      	asrs	r4, r2, #16
 801b3d4:	fb06 5404 	mla	r4, r6, r4, r5
 801b3d8:	9d02      	ldr	r5, [sp, #8]
 801b3da:	5d2e      	ldrb	r6, [r5, r4]
 801b3dc:	2e00      	cmp	r6, #0
 801b3de:	d04c      	beq.n	801b47a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b3e0:	9d01      	ldr	r5, [sp, #4]
 801b3e2:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801b3e6:	9c05      	ldr	r4, [sp, #20]
 801b3e8:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b3ec:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b3f0:	4366      	muls	r6, r4
 801b3f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b3f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b3fa:	1c74      	adds	r4, r6, #1
 801b3fc:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801b400:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b404:	122e      	asrs	r6, r5, #8
 801b406:	1224      	asrs	r4, r4, #8
 801b408:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801b40c:	00ed      	lsls	r5, r5, #3
 801b40e:	b2a7      	uxth	r7, r4
 801b410:	43e4      	mvns	r4, r4
 801b412:	b2ed      	uxtb	r5, r5
 801b414:	b2e4      	uxtb	r4, r4
 801b416:	fb16 f604 	smulbb	r6, r6, r4
 801b41a:	fb15 f504 	smulbb	r5, r5, r4
 801b41e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b422:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b426:	fb1a fa04 	smulbb	sl, sl, r4
 801b42a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b42e:	fa1f fc8c 	uxth.w	ip, ip
 801b432:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b436:	fa5f f888 	uxtb.w	r8, r8
 801b43a:	fb06 a607 	mla	r6, r6, r7, sl
 801b43e:	f10c 0401 	add.w	r4, ip, #1
 801b442:	fb08 5507 	mla	r5, r8, r7, r5
 801b446:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b44a:	b2ad      	uxth	r5, r5
 801b44c:	b2b6      	uxth	r6, r6
 801b44e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b452:	f105 0a01 	add.w	sl, r5, #1
 801b456:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b45a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b45e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b462:	f106 0a01 	add.w	sl, r6, #1
 801b466:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b46a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b46e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b472:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b476:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b47a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b47c:	f109 0901 	add.w	r9, r9, #1
 801b480:	4421      	add	r1, r4
 801b482:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b484:	4422      	add	r2, r4
 801b486:	e79c      	b.n	801b3c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b488:	b007      	add	sp, #28
 801b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b48e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b48e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b492:	b085      	sub	sp, #20
 801b494:	468b      	mov	fp, r1
 801b496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b49a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b49c:	9203      	str	r2, [sp, #12]
 801b49e:	6861      	ldr	r1, [r4, #4]
 801b4a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801b4a4:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801b4a8:	fb01 2000 	mla	r0, r1, r0, r2
 801b4ac:	6822      	ldr	r2, [r4, #0]
 801b4ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b4b2:	f8d8 2000 	ldr.w	r2, [r8]
 801b4b6:	9200      	str	r2, [sp, #0]
 801b4b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b4bc:	9201      	str	r2, [sp, #4]
 801b4be:	f1bb 0f00 	cmp.w	fp, #0
 801b4c2:	dc03      	bgt.n	801b4cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b4c4:	9a03      	ldr	r2, [sp, #12]
 801b4c6:	2a00      	cmp	r2, #0
 801b4c8:	f340 8146 	ble.w	801b758 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b4cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b4ce:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b4d2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b4d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b4d8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b4dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	dd0e      	ble.n	801b502 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b4e4:	140c      	asrs	r4, r1, #16
 801b4e6:	d405      	bmi.n	801b4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b4e8:	42bc      	cmp	r4, r7
 801b4ea:	da03      	bge.n	801b4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b4ec:	1414      	asrs	r4, r2, #16
 801b4ee:	d401      	bmi.n	801b4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b4f0:	42b4      	cmp	r4, r6
 801b4f2:	db07      	blt.n	801b504 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b4f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b4f6:	3b01      	subs	r3, #1
 801b4f8:	3002      	adds	r0, #2
 801b4fa:	4421      	add	r1, r4
 801b4fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b4fe:	4422      	add	r2, r4
 801b500:	e7ee      	b.n	801b4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b502:	d017      	beq.n	801b534 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b504:	1e5c      	subs	r4, r3, #1
 801b506:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b508:	fb05 1504 	mla	r5, r5, r4, r1
 801b50c:	142d      	asrs	r5, r5, #16
 801b50e:	d409      	bmi.n	801b524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b510:	42bd      	cmp	r5, r7
 801b512:	da07      	bge.n	801b524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b514:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b516:	fb05 2404 	mla	r4, r5, r4, r2
 801b51a:	1424      	asrs	r4, r4, #16
 801b51c:	d402      	bmi.n	801b524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b51e:	42b4      	cmp	r4, r6
 801b520:	f2c0 80b3 	blt.w	801b68a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801b524:	2600      	movs	r6, #0
 801b526:	199c      	adds	r4, r3, r6
 801b528:	2c00      	cmp	r4, #0
 801b52a:	dc3e      	bgt.n	801b5aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b52c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b530:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b534:	f1bb 0f00 	cmp.w	fp, #0
 801b538:	f340 810e 	ble.w	801b758 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b53c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b542:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b546:	f1bb 0b01 	subs.w	fp, fp, #1
 801b54a:	eeb0 6a62 	vmov.f32	s12, s5
 801b54e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b552:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b556:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b55a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b55e:	eeb0 6a43 	vmov.f32	s12, s6
 801b562:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b566:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b56a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b56e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b572:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b576:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b57a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b57e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b582:	ee12 2a90 	vmov	r2, s5
 801b586:	eef0 2a47 	vmov.f32	s5, s14
 801b58a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b58e:	ee13 2a10 	vmov	r2, s6
 801b592:	9311      	str	r3, [sp, #68]	@ 0x44
 801b594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b596:	eeb0 3a67 	vmov.f32	s6, s15
 801b59a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b59e:	9a03      	ldr	r2, [sp, #12]
 801b5a0:	9312      	str	r3, [sp, #72]	@ 0x48
 801b5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5a4:	bf08      	it	eq
 801b5a6:	4613      	moveq	r3, r2
 801b5a8:	e789      	b.n	801b4be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b5aa:	140f      	asrs	r7, r1, #16
 801b5ac:	d418      	bmi.n	801b5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b5ae:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b5b2:	42bd      	cmp	r5, r7
 801b5b4:	dd14      	ble.n	801b5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b5b6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b5ba:	d411      	bmi.n	801b5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b5bc:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b5c0:	4564      	cmp	r4, ip
 801b5c2:	dd0d      	ble.n	801b5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b5c4:	b22d      	sxth	r5, r5
 801b5c6:	9c01      	ldr	r4, [sp, #4]
 801b5c8:	fb0c 7505 	mla	r5, ip, r5, r7
 801b5cc:	5d64      	ldrb	r4, [r4, r5]
 801b5ce:	2cff      	cmp	r4, #255	@ 0xff
 801b5d0:	d10c      	bne.n	801b5ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b5d2:	9c00      	ldr	r4, [sp, #0]
 801b5d4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801b5d8:	f06f 0401 	mvn.w	r4, #1
 801b5dc:	4374      	muls	r4, r6
 801b5de:	5305      	strh	r5, [r0, r4]
 801b5e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b5e2:	3e01      	subs	r6, #1
 801b5e4:	4421      	add	r1, r4
 801b5e6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b5e8:	4422      	add	r2, r4
 801b5ea:	e79c      	b.n	801b526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b5ec:	2c00      	cmp	r4, #0
 801b5ee:	d0f7      	beq.n	801b5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b5f0:	9f00      	ldr	r7, [sp, #0]
 801b5f2:	fa1f fc84 	uxth.w	ip, r4
 801b5f6:	43e4      	mvns	r4, r4
 801b5f8:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801b5fc:	f06f 0501 	mvn.w	r5, #1
 801b600:	b2e4      	uxtb	r4, r4
 801b602:	4375      	muls	r5, r6
 801b604:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801b608:	9502      	str	r5, [sp, #8]
 801b60a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801b60e:	5b45      	ldrh	r5, [r0, r5]
 801b610:	122f      	asrs	r7, r5, #8
 801b612:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b616:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b61a:	00ed      	lsls	r5, r5, #3
 801b61c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801b620:	fb17 f704 	smulbb	r7, r7, r4
 801b624:	b2ed      	uxtb	r5, r5
 801b626:	fb1a fa04 	smulbb	sl, sl, r4
 801b62a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801b62e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801b632:	fb15 f504 	smulbb	r5, r5, r4
 801b636:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b63a:	fa1f fe8e 	uxth.w	lr, lr
 801b63e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b642:	fa5f f989 	uxtb.w	r9, r9
 801b646:	fb07 a70c 	mla	r7, r7, ip, sl
 801b64a:	f10e 0401 	add.w	r4, lr, #1
 801b64e:	fb09 550c 	mla	r5, r9, ip, r5
 801b652:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801b656:	9c02      	ldr	r4, [sp, #8]
 801b658:	b2ad      	uxth	r5, r5
 801b65a:	b2bf      	uxth	r7, r7
 801b65c:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801b660:	f105 0a01 	add.w	sl, r5, #1
 801b664:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b668:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b66c:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b670:	f107 0a01 	add.w	sl, r7, #1
 801b674:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b678:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b67c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b680:	ea4e 0e0a 	orr.w	lr, lr, sl
 801b684:	f820 e004 	strh.w	lr, [r0, r4]
 801b688:	e7aa      	b.n	801b5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b68a:	f04f 0900 	mov.w	r9, #0
 801b68e:	eba3 0409 	sub.w	r4, r3, r9
 801b692:	2c00      	cmp	r4, #0
 801b694:	f77f af4a 	ble.w	801b52c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b698:	1414      	asrs	r4, r2, #16
 801b69a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b69e:	140d      	asrs	r5, r1, #16
 801b6a0:	fb06 5504 	mla	r5, r6, r4, r5
 801b6a4:	9c01      	ldr	r4, [sp, #4]
 801b6a6:	5d64      	ldrb	r4, [r4, r5]
 801b6a8:	2cff      	cmp	r4, #255	@ 0xff
 801b6aa:	d10b      	bne.n	801b6c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b6ac:	9c00      	ldr	r4, [sp, #0]
 801b6ae:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801b6b2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801b6b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b6b8:	f109 0901 	add.w	r9, r9, #1
 801b6bc:	4421      	add	r1, r4
 801b6be:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b6c0:	4422      	add	r2, r4
 801b6c2:	e7e4      	b.n	801b68e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b6c4:	2c00      	cmp	r4, #0
 801b6c6:	d0f6      	beq.n	801b6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b6c8:	9e00      	ldr	r6, [sp, #0]
 801b6ca:	b2a7      	uxth	r7, r4
 801b6cc:	43e4      	mvns	r4, r4
 801b6ce:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801b6d2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b6d6:	b2e4      	uxtb	r4, r4
 801b6d8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b6dc:	122e      	asrs	r6, r5, #8
 801b6de:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b6e2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b6e6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801b6ea:	00ed      	lsls	r5, r5, #3
 801b6ec:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801b6f0:	fb16 f604 	smulbb	r6, r6, r4
 801b6f4:	b2ed      	uxtb	r5, r5
 801b6f6:	fb1a fa04 	smulbb	sl, sl, r4
 801b6fa:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b6fe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b702:	fb15 f504 	smulbb	r5, r5, r4
 801b706:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b70a:	fa1f fc8c 	uxth.w	ip, ip
 801b70e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b712:	fa5f fe8e 	uxtb.w	lr, lr
 801b716:	fb06 a607 	mla	r6, r6, r7, sl
 801b71a:	f10c 0401 	add.w	r4, ip, #1
 801b71e:	fb0e 5507 	mla	r5, lr, r7, r5
 801b722:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b726:	b2ad      	uxth	r5, r5
 801b728:	b2b6      	uxth	r6, r6
 801b72a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b72e:	f105 0a01 	add.w	sl, r5, #1
 801b732:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b736:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b73a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b73e:	f106 0a01 	add.w	sl, r6, #1
 801b742:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b746:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b74a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b74e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b752:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b756:	e7ae      	b.n	801b6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b758:	b005      	add	sp, #20
 801b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b75e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b75e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b762:	b085      	sub	sp, #20
 801b764:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b766:	9203      	str	r2, [sp, #12]
 801b768:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801b76c:	9100      	str	r1, [sp, #0]
 801b76e:	9201      	str	r2, [sp, #4]
 801b770:	6841      	ldr	r1, [r0, #4]
 801b772:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801b776:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b77a:	fb01 2404 	mla	r4, r1, r4, r2
 801b77e:	6802      	ldr	r2, [r0, #0]
 801b780:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b784:	f8de 2000 	ldr.w	r2, [lr]
 801b788:	9202      	str	r2, [sp, #8]
 801b78a:	9a01      	ldr	r2, [sp, #4]
 801b78c:	43d6      	mvns	r6, r2
 801b78e:	b2f6      	uxtb	r6, r6
 801b790:	9a00      	ldr	r2, [sp, #0]
 801b792:	2a00      	cmp	r2, #0
 801b794:	dc03      	bgt.n	801b79e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b796:	9a03      	ldr	r2, [sp, #12]
 801b798:	2a00      	cmp	r2, #0
 801b79a:	f340 8124 	ble.w	801b9e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b79e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b7a0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b7a4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b7a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b7aa:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b7ae:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	dd0e      	ble.n	801b7d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b7b6:	1408      	asrs	r0, r1, #16
 801b7b8:	d405      	bmi.n	801b7c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b7ba:	4560      	cmp	r0, ip
 801b7bc:	da03      	bge.n	801b7c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b7be:	1410      	asrs	r0, r2, #16
 801b7c0:	d401      	bmi.n	801b7c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b7c2:	42b8      	cmp	r0, r7
 801b7c4:	db07      	blt.n	801b7d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b7c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b7c8:	3b01      	subs	r3, #1
 801b7ca:	3402      	adds	r4, #2
 801b7cc:	4401      	add	r1, r0
 801b7ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b7d0:	4402      	add	r2, r0
 801b7d2:	e7ee      	b.n	801b7b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b7d4:	d06e      	beq.n	801b8b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b7d6:	1e58      	subs	r0, r3, #1
 801b7d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b7da:	fb05 1500 	mla	r5, r5, r0, r1
 801b7de:	142d      	asrs	r5, r5, #16
 801b7e0:	d45c      	bmi.n	801b89c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b7e2:	4565      	cmp	r5, ip
 801b7e4:	da5a      	bge.n	801b89c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b7e6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b7e8:	fb05 2000 	mla	r0, r5, r0, r2
 801b7ec:	1400      	asrs	r0, r0, #16
 801b7ee:	d455      	bmi.n	801b89c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b7f0:	42b8      	cmp	r0, r7
 801b7f2:	da53      	bge.n	801b89c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b7f4:	4699      	mov	r9, r3
 801b7f6:	46a2      	mov	sl, r4
 801b7f8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b7fc:	f1b9 0f00 	cmp.w	r9, #0
 801b800:	dd54      	ble.n	801b8ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b802:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b806:	140d      	asrs	r5, r1, #16
 801b808:	1410      	asrs	r0, r2, #16
 801b80a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b80e:	fb07 5000 	mla	r0, r7, r0, r5
 801b812:	9d02      	ldr	r5, [sp, #8]
 801b814:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b818:	f8ba 5000 	ldrh.w	r5, [sl]
 801b81c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b820:	122f      	asrs	r7, r5, #8
 801b822:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b826:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b82a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b82e:	00ed      	lsls	r5, r5, #3
 801b830:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801b834:	fb17 f706 	smulbb	r7, r7, r6
 801b838:	b2ed      	uxtb	r5, r5
 801b83a:	fb18 f806 	smulbb	r8, r8, r6
 801b83e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b842:	10c7      	asrs	r7, r0, #3
 801b844:	fb15 f506 	smulbb	r5, r5, r6
 801b848:	00c0      	lsls	r0, r0, #3
 801b84a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b84e:	fa1f fc8c 	uxth.w	ip, ip
 801b852:	b2c0      	uxtb	r0, r0
 801b854:	fb07 870b 	mla	r7, r7, fp, r8
 801b858:	fb00 500b 	mla	r0, r0, fp, r5
 801b85c:	f10c 0501 	add.w	r5, ip, #1
 801b860:	b2bf      	uxth	r7, r7
 801b862:	b280      	uxth	r0, r0
 801b864:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b868:	f107 0801 	add.w	r8, r7, #1
 801b86c:	1c45      	adds	r5, r0, #1
 801b86e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b872:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b876:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b87a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b87c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b880:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b884:	4401      	add	r1, r0
 801b886:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801b88a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b88c:	ea45 0c0c 	orr.w	ip, r5, ip
 801b890:	4402      	add	r2, r0
 801b892:	ea4c 0c08 	orr.w	ip, ip, r8
 801b896:	f82a cb02 	strh.w	ip, [sl], #2
 801b89a:	e7af      	b.n	801b7fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b89c:	f04f 0800 	mov.w	r8, #0
 801b8a0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b8a4:	eb03 0008 	add.w	r0, r3, r8
 801b8a8:	2800      	cmp	r0, #0
 801b8aa:	dc41      	bgt.n	801b930 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b8ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b8b4:	9b00      	ldr	r3, [sp, #0]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	f340 8095 	ble.w	801b9e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b8bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b8c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b8c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8ca:	eef0 6a62 	vmov.f32	s13, s5
 801b8ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b8d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8da:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801b8de:	eef0 6a43 	vmov.f32	s13, s6
 801b8e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8e6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801b8ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b902:	ee12 2a90 	vmov	r2, s5
 801b906:	eef0 2a47 	vmov.f32	s5, s14
 801b90a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b90e:	ee13 2a10 	vmov	r2, s6
 801b912:	9311      	str	r3, [sp, #68]	@ 0x44
 801b914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b916:	eeb0 3a67 	vmov.f32	s6, s15
 801b91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b91e:	9312      	str	r3, [sp, #72]	@ 0x48
 801b920:	9b00      	ldr	r3, [sp, #0]
 801b922:	9a03      	ldr	r2, [sp, #12]
 801b924:	3b01      	subs	r3, #1
 801b926:	9300      	str	r3, [sp, #0]
 801b928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b92a:	bf08      	it	eq
 801b92c:	4613      	moveq	r3, r2
 801b92e:	e72f      	b.n	801b790 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b930:	140f      	asrs	r7, r1, #16
 801b932:	d451      	bmi.n	801b9d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b934:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b938:	42bd      	cmp	r5, r7
 801b93a:	dd4d      	ble.n	801b9d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b93c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b940:	d44a      	bmi.n	801b9d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b942:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b946:	4560      	cmp	r0, ip
 801b948:	dd46      	ble.n	801b9d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b94a:	b22d      	sxth	r5, r5
 801b94c:	9802      	ldr	r0, [sp, #8]
 801b94e:	fb0c 7505 	mla	r5, ip, r5, r7
 801b952:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b956:	f06f 0501 	mvn.w	r5, #1
 801b95a:	fb05 fb08 	mul.w	fp, r5, r8
 801b95e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b962:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b966:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b96a:	122f      	asrs	r7, r5, #8
 801b96c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b970:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b974:	00ed      	lsls	r5, r5, #3
 801b976:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801b97a:	fb17 f706 	smulbb	r7, r7, r6
 801b97e:	b2ed      	uxtb	r5, r5
 801b980:	fb19 f906 	smulbb	r9, r9, r6
 801b984:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b988:	10c7      	asrs	r7, r0, #3
 801b98a:	fb15 f506 	smulbb	r5, r5, r6
 801b98e:	00c0      	lsls	r0, r0, #3
 801b990:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b994:	fa1f fc8c 	uxth.w	ip, ip
 801b998:	b2c0      	uxtb	r0, r0
 801b99a:	fb07 970a 	mla	r7, r7, sl, r9
 801b99e:	fb00 500a 	mla	r0, r0, sl, r5
 801b9a2:	f10c 0501 	add.w	r5, ip, #1
 801b9a6:	b2bf      	uxth	r7, r7
 801b9a8:	b280      	uxth	r0, r0
 801b9aa:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b9ae:	f107 0901 	add.w	r9, r7, #1
 801b9b2:	1c45      	adds	r5, r0, #1
 801b9b4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b9b8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b9bc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b9c0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b9c4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b9c8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801b9cc:	ea45 0c0c 	orr.w	ip, r5, ip
 801b9d0:	ea4c 0c09 	orr.w	ip, ip, r9
 801b9d4:	f824 c00b 	strh.w	ip, [r4, fp]
 801b9d8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b9da:	f108 38ff 	add.w	r8, r8, #4294967295
 801b9de:	4401      	add	r1, r0
 801b9e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b9e2:	4402      	add	r2, r0
 801b9e4:	e75e      	b.n	801b8a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b9e6:	b005      	add	sp, #20
 801b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f0:	b085      	sub	sp, #20
 801b9f2:	4693      	mov	fp, r2
 801b9f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b9f8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b9fa:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b9fc:	6870      	ldr	r0, [r6, #4]
 801b9fe:	9101      	str	r1, [sp, #4]
 801ba00:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ba04:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801ba08:	fb00 2404 	mla	r4, r0, r4, r2
 801ba0c:	6832      	ldr	r2, [r6, #0]
 801ba0e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba12:	682a      	ldr	r2, [r5, #0]
 801ba14:	9202      	str	r2, [sp, #8]
 801ba16:	9a01      	ldr	r2, [sp, #4]
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	dc03      	bgt.n	801ba24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ba1c:	f1bb 0f00 	cmp.w	fp, #0
 801ba20:	f340 809a 	ble.w	801bb58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ba24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ba26:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ba2a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ba2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ba30:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ba34:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	dd0c      	ble.n	801ba56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ba3c:	1406      	asrs	r6, r0, #16
 801ba3e:	d405      	bmi.n	801ba4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ba40:	454e      	cmp	r6, r9
 801ba42:	da03      	bge.n	801ba4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ba44:	1416      	asrs	r6, r2, #16
 801ba46:	d401      	bmi.n	801ba4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ba48:	4546      	cmp	r6, r8
 801ba4a:	db05      	blt.n	801ba58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ba4c:	4470      	add	r0, lr
 801ba4e:	4462      	add	r2, ip
 801ba50:	3b01      	subs	r3, #1
 801ba52:	3402      	adds	r4, #2
 801ba54:	e7f0      	b.n	801ba38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ba56:	d00f      	beq.n	801ba78 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ba58:	1e5e      	subs	r6, r3, #1
 801ba5a:	fb0e 0706 	mla	r7, lr, r6, r0
 801ba5e:	143f      	asrs	r7, r7, #16
 801ba60:	d541      	bpl.n	801bae6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ba62:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ba66:	4698      	mov	r8, r3
 801ba68:	9603      	str	r6, [sp, #12]
 801ba6a:	f1b8 0f00 	cmp.w	r8, #0
 801ba6e:	dc56      	bgt.n	801bb1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ba70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ba78:	9b01      	ldr	r3, [sp, #4]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	dd6c      	ble.n	801bb58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ba7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba88:	eeb0 6a62 	vmov.f32	s12, s5
 801ba8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba98:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ba9c:	eeb0 6a43 	vmov.f32	s12, s6
 801baa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baa4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801baa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801baac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bab0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bab4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bab8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801babc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bac0:	ee12 2a90 	vmov	r2, s5
 801bac4:	eef0 2a47 	vmov.f32	s5, s14
 801bac8:	fb92 fef3 	sdiv	lr, r2, r3
 801bacc:	ee13 2a10 	vmov	r2, s6
 801bad0:	eeb0 3a67 	vmov.f32	s6, s15
 801bad4:	fb92 fcf3 	sdiv	ip, r2, r3
 801bad8:	9b01      	ldr	r3, [sp, #4]
 801bada:	3b01      	subs	r3, #1
 801badc:	9301      	str	r3, [sp, #4]
 801bade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bae0:	bf08      	it	eq
 801bae2:	465b      	moveq	r3, fp
 801bae4:	e797      	b.n	801ba16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801bae6:	454f      	cmp	r7, r9
 801bae8:	dabb      	bge.n	801ba62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801baea:	fb0c 2606 	mla	r6, ip, r6, r2
 801baee:	1436      	asrs	r6, r6, #16
 801baf0:	d4b7      	bmi.n	801ba62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801baf2:	4546      	cmp	r6, r8
 801baf4:	dab5      	bge.n	801ba62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801baf6:	461e      	mov	r6, r3
 801baf8:	46a0      	mov	r8, r4
 801bafa:	2e00      	cmp	r6, #0
 801bafc:	ddb8      	ble.n	801ba70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bafe:	1417      	asrs	r7, r2, #16
 801bb00:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801bb04:	ea4f 4920 	mov.w	r9, r0, asr #16
 801bb08:	9902      	ldr	r1, [sp, #8]
 801bb0a:	4470      	add	r0, lr
 801bb0c:	4462      	add	r2, ip
 801bb0e:	fb0a 9707 	mla	r7, sl, r7, r9
 801bb12:	3e01      	subs	r6, #1
 801bb14:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801bb18:	f828 7b02 	strh.w	r7, [r8], #2
 801bb1c:	e7ed      	b.n	801bafa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801bb1e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bb22:	d414      	bmi.n	801bb4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bb24:	68ae      	ldr	r6, [r5, #8]
 801bb26:	454e      	cmp	r6, r9
 801bb28:	dd11      	ble.n	801bb4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bb2a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bb2e:	d40e      	bmi.n	801bb4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bb30:	68ef      	ldr	r7, [r5, #12]
 801bb32:	4557      	cmp	r7, sl
 801bb34:	dd0b      	ble.n	801bb4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bb36:	b236      	sxth	r6, r6
 801bb38:	f06f 0101 	mvn.w	r1, #1
 801bb3c:	9f02      	ldr	r7, [sp, #8]
 801bb3e:	fb0a 9606 	mla	r6, sl, r6, r9
 801bb42:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801bb46:	fb01 f608 	mul.w	r6, r1, r8
 801bb4a:	9903      	ldr	r1, [sp, #12]
 801bb4c:	538f      	strh	r7, [r1, r6]
 801bb4e:	4470      	add	r0, lr
 801bb50:	4462      	add	r2, ip
 801bb52:	f108 38ff 	add.w	r8, r8, #4294967295
 801bb56:	e788      	b.n	801ba6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bb58:	b005      	add	sp, #20
 801bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb62:	b087      	sub	sp, #28
 801bb64:	468b      	mov	fp, r1
 801bb66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bb6a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801bb6c:	9203      	str	r2, [sp, #12]
 801bb6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bb72:	6841      	ldr	r1, [r0, #4]
 801bb74:	9204      	str	r2, [sp, #16]
 801bb76:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801bb7a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801bb7e:	fb01 2505 	mla	r5, r1, r5, r2
 801bb82:	6802      	ldr	r2, [r0, #0]
 801bb84:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801bb88:	f8d9 2000 	ldr.w	r2, [r9]
 801bb8c:	9201      	str	r2, [sp, #4]
 801bb8e:	f1bb 0f00 	cmp.w	fp, #0
 801bb92:	dc03      	bgt.n	801bb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bb94:	9a03      	ldr	r2, [sp, #12]
 801bb96:	2a00      	cmp	r2, #0
 801bb98:	f340 8158 	ble.w	801be4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801bb9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bb9e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801bba2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bba6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bba8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801bbac:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	dd0e      	ble.n	801bbd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bbb4:	1402      	asrs	r2, r0, #16
 801bbb6:	d405      	bmi.n	801bbc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bbb8:	42ba      	cmp	r2, r7
 801bbba:	da03      	bge.n	801bbc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bbbc:	140a      	asrs	r2, r1, #16
 801bbbe:	d401      	bmi.n	801bbc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bbc0:	42b2      	cmp	r2, r6
 801bbc2:	db07      	blt.n	801bbd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bbc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bbc6:	3b01      	subs	r3, #1
 801bbc8:	3502      	adds	r5, #2
 801bbca:	4410      	add	r0, r2
 801bbcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bbce:	4411      	add	r1, r2
 801bbd0:	e7ee      	b.n	801bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bbd2:	d017      	beq.n	801bc04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bbd4:	1e5a      	subs	r2, r3, #1
 801bbd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bbd8:	fb04 0402 	mla	r4, r4, r2, r0
 801bbdc:	1424      	asrs	r4, r4, #16
 801bbde:	d409      	bmi.n	801bbf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bbe0:	42bc      	cmp	r4, r7
 801bbe2:	da07      	bge.n	801bbf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bbe4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bbe6:	fb04 1202 	mla	r2, r4, r2, r1
 801bbea:	1412      	asrs	r2, r2, #16
 801bbec:	d402      	bmi.n	801bbf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bbee:	42b2      	cmp	r2, r6
 801bbf0:	f2c0 80bf 	blt.w	801bd72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bbf4:	2700      	movs	r7, #0
 801bbf6:	19da      	adds	r2, r3, r7
 801bbf8:	2a00      	cmp	r2, #0
 801bbfa:	dc3e      	bgt.n	801bc7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bbfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc00:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801bc04:	f1bb 0f00 	cmp.w	fp, #0
 801bc08:	f340 8120 	ble.w	801be4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801bc0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bc12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc16:	f1bb 0b01 	subs.w	fp, fp, #1
 801bc1a:	eeb0 6a62 	vmov.f32	s12, s5
 801bc1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bc22:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc2a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801bc2e:	eeb0 6a43 	vmov.f32	s12, s6
 801bc32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc36:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801bc3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc52:	ee12 2a90 	vmov	r2, s5
 801bc56:	eef0 2a47 	vmov.f32	s5, s14
 801bc5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc5e:	ee13 2a10 	vmov	r2, s6
 801bc62:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bc64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bc66:	eeb0 3a67 	vmov.f32	s6, s15
 801bc6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc6e:	9a03      	ldr	r2, [sp, #12]
 801bc70:	9314      	str	r3, [sp, #80]	@ 0x50
 801bc72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bc74:	bf08      	it	eq
 801bc76:	4613      	moveq	r3, r2
 801bc78:	e789      	b.n	801bb8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bc7a:	1406      	asrs	r6, r0, #16
 801bc7c:	d42d      	bmi.n	801bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bc7e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801bc82:	42b4      	cmp	r4, r6
 801bc84:	dd29      	ble.n	801bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bc86:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801bc8a:	d426      	bmi.n	801bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bc8c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801bc90:	4562      	cmp	r2, ip
 801bc92:	dd22      	ble.n	801bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bc94:	b224      	sxth	r4, r4
 801bc96:	9a01      	ldr	r2, [sp, #4]
 801bc98:	fb0c 6404 	mla	r4, ip, r4, r6
 801bc9c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801bca0:	0e22      	lsrs	r2, r4, #24
 801bca2:	d01a      	beq.n	801bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bca4:	9e04      	ldr	r6, [sp, #16]
 801bca6:	4372      	muls	r2, r6
 801bca8:	1c56      	adds	r6, r2, #1
 801bcaa:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bcae:	0a26      	lsrs	r6, r4, #8
 801bcb0:	1212      	asrs	r2, r2, #8
 801bcb2:	9605      	str	r6, [sp, #20]
 801bcb4:	2aff      	cmp	r2, #255	@ 0xff
 801bcb6:	d116      	bne.n	801bce6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801bcb8:	f06f 0201 	mvn.w	r2, #1
 801bcbc:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801bcc0:	fb02 fc07 	mul.w	ip, r2, r7
 801bcc4:	0962      	lsrs	r2, r4, #5
 801bcc6:	f026 0607 	bic.w	r6, r6, #7
 801bcca:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bcce:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801bcd2:	4316      	orrs	r6, r2
 801bcd4:	4326      	orrs	r6, r4
 801bcd6:	f825 600c 	strh.w	r6, [r5, ip]
 801bcda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bcdc:	3f01      	subs	r7, #1
 801bcde:	4410      	add	r0, r2
 801bce0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bce2:	4411      	add	r1, r2
 801bce4:	e787      	b.n	801bbf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bce6:	f06f 0601 	mvn.w	r6, #1
 801bcea:	fa1f fa82 	uxth.w	sl, r2
 801bcee:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801bcf2:	43d2      	mvns	r2, r2
 801bcf4:	437e      	muls	r6, r7
 801bcf6:	b2e4      	uxtb	r4, r4
 801bcf8:	fb1c fc0a 	smulbb	ip, ip, sl
 801bcfc:	b2d2      	uxtb	r2, r2
 801bcfe:	f835 8006 	ldrh.w	r8, [r5, r6]
 801bd02:	fb14 f40a 	smulbb	r4, r4, sl
 801bd06:	9602      	str	r6, [sp, #8]
 801bd08:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bd0c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bd10:	fb16 f60a 	smulbb	r6, r6, sl
 801bd14:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801bd18:	fb0e ce02 	mla	lr, lr, r2, ip
 801bd1c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bd20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bd24:	fa1f fe8e 	uxth.w	lr, lr
 801bd28:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801bd2c:	fa5f f888 	uxtb.w	r8, r8
 801bd30:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bd34:	fb08 4402 	mla	r4, r8, r2, r4
 801bd38:	f10e 0201 	add.w	r2, lr, #1
 801bd3c:	fa1f fc8c 	uxth.w	ip, ip
 801bd40:	b2a4      	uxth	r4, r4
 801bd42:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bd46:	9a02      	ldr	r2, [sp, #8]
 801bd48:	1c66      	adds	r6, r4, #1
 801bd4a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801bd4e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801bd52:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bd56:	ea46 0e0e 	orr.w	lr, r6, lr
 801bd5a:	f10c 0601 	add.w	r6, ip, #1
 801bd5e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bd62:	0976      	lsrs	r6, r6, #5
 801bd64:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801bd68:	ea4e 0e06 	orr.w	lr, lr, r6
 801bd6c:	f825 e002 	strh.w	lr, [r5, r2]
 801bd70:	e7b3      	b.n	801bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bd72:	f04f 0800 	mov.w	r8, #0
 801bd76:	eba3 0208 	sub.w	r2, r3, r8
 801bd7a:	2a00      	cmp	r2, #0
 801bd7c:	f77f af3e 	ble.w	801bbfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bd80:	1404      	asrs	r4, r0, #16
 801bd82:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801bd86:	140a      	asrs	r2, r1, #16
 801bd88:	fb06 4202 	mla	r2, r6, r2, r4
 801bd8c:	9c01      	ldr	r4, [sp, #4]
 801bd8e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801bd92:	0e22      	lsrs	r2, r4, #24
 801bd94:	d015      	beq.n	801bdc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801bd96:	9e04      	ldr	r6, [sp, #16]
 801bd98:	4372      	muls	r2, r6
 801bd9a:	1c56      	adds	r6, r2, #1
 801bd9c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bda0:	0a26      	lsrs	r6, r4, #8
 801bda2:	1212      	asrs	r2, r2, #8
 801bda4:	2aff      	cmp	r2, #255	@ 0xff
 801bda6:	d113      	bne.n	801bdd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801bda8:	0962      	lsrs	r2, r4, #5
 801bdaa:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801bdae:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bdb2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801bdb6:	f026 0607 	bic.w	r6, r6, #7
 801bdba:	4316      	orrs	r6, r2
 801bdbc:	4326      	orrs	r6, r4
 801bdbe:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801bdc2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bdc4:	f108 0801 	add.w	r8, r8, #1
 801bdc8:	4410      	add	r0, r2
 801bdca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bdcc:	4411      	add	r1, r2
 801bdce:	e7d2      	b.n	801bd76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801bdd0:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801bdd4:	fa1f fa82 	uxth.w	sl, r2
 801bdd8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801bddc:	43d2      	mvns	r2, r2
 801bdde:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bde2:	fb17 f70a 	smulbb	r7, r7, sl
 801bde6:	b2d2      	uxtb	r2, r2
 801bde8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bdec:	b2e4      	uxtb	r4, r4
 801bdee:	b2f6      	uxtb	r6, r6
 801bdf0:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bdf4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bdf8:	fb14 f40a 	smulbb	r4, r4, sl
 801bdfc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801be00:	fa1f fc8c 	uxth.w	ip, ip
 801be04:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801be08:	fb16 f60a 	smulbb	r6, r6, sl
 801be0c:	fa5f fe8e 	uxtb.w	lr, lr
 801be10:	fb0e 4402 	mla	r4, lr, r2, r4
 801be14:	fb07 6702 	mla	r7, r7, r2, r6
 801be18:	f10c 0201 	add.w	r2, ip, #1
 801be1c:	b2a4      	uxth	r4, r4
 801be1e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801be22:	1c66      	adds	r6, r4, #1
 801be24:	b2bf      	uxth	r7, r7
 801be26:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801be2a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801be2e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801be32:	ea46 0c0c 	orr.w	ip, r6, ip
 801be36:	1c7e      	adds	r6, r7, #1
 801be38:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801be3c:	0976      	lsrs	r6, r6, #5
 801be3e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801be42:	ea4c 0c06 	orr.w	ip, ip, r6
 801be46:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801be4a:	e7ba      	b.n	801bdc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801be4c:	b007      	add	sp, #28
 801be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801be54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be58:	b085      	sub	sp, #20
 801be5a:	468b      	mov	fp, r1
 801be5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801be60:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801be62:	9203      	str	r2, [sp, #12]
 801be64:	6841      	ldr	r1, [r0, #4]
 801be66:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801be6a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801be6e:	fb01 2404 	mla	r4, r1, r4, r2
 801be72:	6802      	ldr	r2, [r0, #0]
 801be74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801be78:	f8d8 2000 	ldr.w	r2, [r8]
 801be7c:	9201      	str	r2, [sp, #4]
 801be7e:	f1bb 0f00 	cmp.w	fp, #0
 801be82:	dc03      	bgt.n	801be8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801be84:	9a03      	ldr	r2, [sp, #12]
 801be86:	2a00      	cmp	r2, #0
 801be88:	f340 814f 	ble.w	801c12a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801be8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801be8e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801be92:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801be96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801be98:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801be9c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	dd0e      	ble.n	801bec2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bea4:	1408      	asrs	r0, r1, #16
 801bea6:	d405      	bmi.n	801beb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bea8:	42b8      	cmp	r0, r7
 801beaa:	da03      	bge.n	801beb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801beac:	1410      	asrs	r0, r2, #16
 801beae:	d401      	bmi.n	801beb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801beb0:	42b0      	cmp	r0, r6
 801beb2:	db07      	blt.n	801bec4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801beb4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801beb6:	3b01      	subs	r3, #1
 801beb8:	3402      	adds	r4, #2
 801beba:	4401      	add	r1, r0
 801bebc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bebe:	4402      	add	r2, r0
 801bec0:	e7ee      	b.n	801bea0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bec2:	d017      	beq.n	801bef4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bec4:	1e58      	subs	r0, r3, #1
 801bec6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801bec8:	fb05 1500 	mla	r5, r5, r0, r1
 801becc:	142d      	asrs	r5, r5, #16
 801bece:	d409      	bmi.n	801bee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bed0:	42bd      	cmp	r5, r7
 801bed2:	da07      	bge.n	801bee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bed4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801bed6:	fb05 2000 	mla	r0, r5, r0, r2
 801beda:	1400      	asrs	r0, r0, #16
 801bedc:	d402      	bmi.n	801bee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bede:	42b0      	cmp	r0, r6
 801bee0:	f2c0 80ba 	blt.w	801c058 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bee4:	2600      	movs	r6, #0
 801bee6:	1998      	adds	r0, r3, r6
 801bee8:	2800      	cmp	r0, #0
 801beea:	dc3e      	bgt.n	801bf6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801beec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bef0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bef4:	f1bb 0f00 	cmp.w	fp, #0
 801bef8:	f340 8117 	ble.w	801c12a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801befc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf06:	f1bb 0b01 	subs.w	fp, fp, #1
 801bf0a:	eeb0 6a62 	vmov.f32	s12, s5
 801bf0e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf12:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf1a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bf1e:	eeb0 6a43 	vmov.f32	s12, s6
 801bf22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf26:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bf2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf32:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf42:	ee12 2a90 	vmov	r2, s5
 801bf46:	eef0 2a47 	vmov.f32	s5, s14
 801bf4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf4e:	ee13 2a10 	vmov	r2, s6
 801bf52:	9311      	str	r3, [sp, #68]	@ 0x44
 801bf54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf56:	eeb0 3a67 	vmov.f32	s6, s15
 801bf5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf5e:	9a03      	ldr	r2, [sp, #12]
 801bf60:	9312      	str	r3, [sp, #72]	@ 0x48
 801bf62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf64:	bf08      	it	eq
 801bf66:	4613      	moveq	r3, r2
 801bf68:	e789      	b.n	801be7e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801bf6a:	140f      	asrs	r7, r1, #16
 801bf6c:	d424      	bmi.n	801bfb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bf6e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801bf72:	42bd      	cmp	r5, r7
 801bf74:	dd20      	ble.n	801bfb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bf76:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bf7a:	d41d      	bmi.n	801bfb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bf7c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801bf80:	4560      	cmp	r0, ip
 801bf82:	dd19      	ble.n	801bfb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bf84:	b22d      	sxth	r5, r5
 801bf86:	9801      	ldr	r0, [sp, #4]
 801bf88:	fb0c 7505 	mla	r5, ip, r5, r7
 801bf8c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bf90:	0e07      	lsrs	r7, r0, #24
 801bf92:	2fff      	cmp	r7, #255	@ 0xff
 801bf94:	d116      	bne.n	801bfc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bf96:	f06f 0501 	mvn.w	r5, #1
 801bf9a:	fb05 f706 	mul.w	r7, r5, r6
 801bf9e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801bfa2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801bfa6:	0945      	lsrs	r5, r0, #5
 801bfa8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801bfac:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801bfb0:	ea4c 0505 	orr.w	r5, ip, r5
 801bfb4:	4305      	orrs	r5, r0
 801bfb6:	53e5      	strh	r5, [r4, r7]
 801bfb8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bfba:	3e01      	subs	r6, #1
 801bfbc:	4401      	add	r1, r0
 801bfbe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bfc0:	4402      	add	r2, r0
 801bfc2:	e790      	b.n	801bee6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bfc4:	b2fd      	uxtb	r5, r7
 801bfc6:	2f00      	cmp	r7, #0
 801bfc8:	d0f6      	beq.n	801bfb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bfca:	f06f 0701 	mvn.w	r7, #1
 801bfce:	fa1f f985 	uxth.w	r9, r5
 801bfd2:	43ed      	mvns	r5, r5
 801bfd4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bfd8:	4377      	muls	r7, r6
 801bfda:	fb1a fa09 	smulbb	sl, sl, r9
 801bfde:	b2ed      	uxtb	r5, r5
 801bfe0:	f834 e007 	ldrh.w	lr, [r4, r7]
 801bfe4:	9702      	str	r7, [sp, #8]
 801bfe6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bfea:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bfee:	fb17 f709 	smulbb	r7, r7, r9
 801bff2:	b2c0      	uxtb	r0, r0
 801bff4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bff8:	fb10 f009 	smulbb	r0, r0, r9
 801bffc:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c000:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c004:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c008:	fa1f fc8c 	uxth.w	ip, ip
 801c00c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c010:	fa5f fe8e 	uxtb.w	lr, lr
 801c014:	fb07 a705 	mla	r7, r7, r5, sl
 801c018:	fb0e 0005 	mla	r0, lr, r5, r0
 801c01c:	f10c 0501 	add.w	r5, ip, #1
 801c020:	b2bf      	uxth	r7, r7
 801c022:	b280      	uxth	r0, r0
 801c024:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c028:	f100 0a01 	add.w	sl, r0, #1
 801c02c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c030:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c034:	9802      	ldr	r0, [sp, #8]
 801c036:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c03a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c03e:	f107 0a01 	add.w	sl, r7, #1
 801c042:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c046:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c04a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c04e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c052:	f824 c000 	strh.w	ip, [r4, r0]
 801c056:	e7af      	b.n	801bfb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c058:	f04f 0e00 	mov.w	lr, #0
 801c05c:	eba3 000e 	sub.w	r0, r3, lr
 801c060:	2800      	cmp	r0, #0
 801c062:	f77f af43 	ble.w	801beec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c066:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c06a:	140d      	asrs	r5, r1, #16
 801c06c:	1410      	asrs	r0, r2, #16
 801c06e:	fb06 5000 	mla	r0, r6, r0, r5
 801c072:	9d01      	ldr	r5, [sp, #4]
 801c074:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c078:	0e2e      	lsrs	r6, r5, #24
 801c07a:	2eff      	cmp	r6, #255	@ 0xff
 801c07c:	d112      	bne.n	801c0a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801c07e:	482c      	ldr	r0, [pc, #176]	@ (801c130 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801c080:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801c084:	0968      	lsrs	r0, r5, #5
 801c086:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c08a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801c08e:	4330      	orrs	r0, r6
 801c090:	4328      	orrs	r0, r5
 801c092:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801c096:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c098:	f10e 0e01 	add.w	lr, lr, #1
 801c09c:	4401      	add	r1, r0
 801c09e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c0a0:	4402      	add	r2, r0
 801c0a2:	e7db      	b.n	801c05c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c0a4:	b2f0      	uxtb	r0, r6
 801c0a6:	2e00      	cmp	r6, #0
 801c0a8:	d0f5      	beq.n	801c096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c0aa:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c0ae:	fa1f f980 	uxth.w	r9, r0
 801c0b2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c0b6:	43c0      	mvns	r0, r0
 801c0b8:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c0bc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c0c0:	fb16 f609 	smulbb	r6, r6, r9
 801c0c4:	b2c0      	uxtb	r0, r0
 801c0c6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c0ca:	b2ed      	uxtb	r5, r5
 801c0cc:	fb1a fa09 	smulbb	sl, sl, r9
 801c0d0:	fb07 6700 	mla	r7, r7, r0, r6
 801c0d4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c0d8:	fb15 f509 	smulbb	r5, r5, r9
 801c0dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c0e0:	b2bf      	uxth	r7, r7
 801c0e2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c0e6:	fa5f fc8c 	uxtb.w	ip, ip
 801c0ea:	fb06 a600 	mla	r6, r6, r0, sl
 801c0ee:	fb0c 5500 	mla	r5, ip, r0, r5
 801c0f2:	1c78      	adds	r0, r7, #1
 801c0f4:	b2b6      	uxth	r6, r6
 801c0f6:	b2ad      	uxth	r5, r5
 801c0f8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801c0fc:	f105 0a01 	add.w	sl, r5, #1
 801c100:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c104:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c108:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c10c:	ea4a 0707 	orr.w	r7, sl, r7
 801c110:	f106 0a01 	add.w	sl, r6, #1
 801c114:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c118:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c11c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c120:	ea47 070a 	orr.w	r7, r7, sl
 801c124:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801c128:	e7b5      	b.n	801c096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c12a:	b005      	add	sp, #20
 801c12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c130:	fffff800 	.word	0xfffff800

0801c134 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c138:	b087      	sub	sp, #28
 801c13a:	468b      	mov	fp, r1
 801c13c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c140:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c142:	9203      	str	r2, [sp, #12]
 801c144:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c148:	6841      	ldr	r1, [r0, #4]
 801c14a:	9204      	str	r2, [sp, #16]
 801c14c:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801c150:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801c154:	fb01 2404 	mla	r4, r1, r4, r2
 801c158:	6802      	ldr	r2, [r0, #0]
 801c15a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c15e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c162:	3201      	adds	r2, #1
 801c164:	f022 0201 	bic.w	r2, r2, #1
 801c168:	9200      	str	r2, [sp, #0]
 801c16a:	f8d9 2000 	ldr.w	r2, [r9]
 801c16e:	9201      	str	r2, [sp, #4]
 801c170:	f1bb 0f00 	cmp.w	fp, #0
 801c174:	dc03      	bgt.n	801c17e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c176:	9a03      	ldr	r2, [sp, #12]
 801c178:	2a00      	cmp	r2, #0
 801c17a:	f340 816a 	ble.w	801c452 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c17e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c180:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c184:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c188:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c18a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c18e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c192:	2b00      	cmp	r3, #0
 801c194:	dd0e      	ble.n	801c1b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c196:	1402      	asrs	r2, r0, #16
 801c198:	d405      	bmi.n	801c1a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c19a:	42ba      	cmp	r2, r7
 801c19c:	da03      	bge.n	801c1a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c19e:	140a      	asrs	r2, r1, #16
 801c1a0:	d401      	bmi.n	801c1a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c1a2:	42b2      	cmp	r2, r6
 801c1a4:	db07      	blt.n	801c1b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c1a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c1a8:	3b01      	subs	r3, #1
 801c1aa:	3402      	adds	r4, #2
 801c1ac:	4410      	add	r0, r2
 801c1ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c1b0:	4411      	add	r1, r2
 801c1b2:	e7ee      	b.n	801c192 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c1b4:	d017      	beq.n	801c1e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c1b6:	1e5a      	subs	r2, r3, #1
 801c1b8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c1ba:	fb05 0502 	mla	r5, r5, r2, r0
 801c1be:	142d      	asrs	r5, r5, #16
 801c1c0:	d409      	bmi.n	801c1d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c1c2:	42bd      	cmp	r5, r7
 801c1c4:	da07      	bge.n	801c1d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c1c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c1c8:	fb05 1202 	mla	r2, r5, r2, r1
 801c1cc:	1412      	asrs	r2, r2, #16
 801c1ce:	d402      	bmi.n	801c1d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c1d0:	42b2      	cmp	r2, r6
 801c1d2:	f2c0 80c8 	blt.w	801c366 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801c1d6:	2700      	movs	r7, #0
 801c1d8:	19da      	adds	r2, r3, r7
 801c1da:	2a00      	cmp	r2, #0
 801c1dc:	dc3e      	bgt.n	801c25c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c1e6:	f1bb 0f00 	cmp.w	fp, #0
 801c1ea:	f340 8132 	ble.w	801c452 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c1ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c1f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1f8:	f1bb 0b01 	subs.w	fp, fp, #1
 801c1fc:	eeb0 6a62 	vmov.f32	s12, s5
 801c200:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c204:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c208:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c20c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c210:	eeb0 6a43 	vmov.f32	s12, s6
 801c214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c218:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801c21c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c220:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c224:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c228:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c22c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c230:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c234:	ee12 2a90 	vmov	r2, s5
 801c238:	eef0 2a47 	vmov.f32	s5, s14
 801c23c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c240:	ee13 2a10 	vmov	r2, s6
 801c244:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c248:	eeb0 3a67 	vmov.f32	s6, s15
 801c24c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c250:	9a03      	ldr	r2, [sp, #12]
 801c252:	9314      	str	r3, [sp, #80]	@ 0x50
 801c254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c256:	bf08      	it	eq
 801c258:	4613      	moveq	r3, r2
 801c25a:	e789      	b.n	801c170 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c25c:	1405      	asrs	r5, r0, #16
 801c25e:	d436      	bmi.n	801c2ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c260:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c264:	42aa      	cmp	r2, r5
 801c266:	dd32      	ble.n	801c2ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c268:	140e      	asrs	r6, r1, #16
 801c26a:	d430      	bmi.n	801c2ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c26c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c270:	42b2      	cmp	r2, r6
 801c272:	dd2c      	ble.n	801c2ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c274:	9a00      	ldr	r2, [sp, #0]
 801c276:	fb06 5502 	mla	r5, r6, r2, r5
 801c27a:	9e01      	ldr	r6, [sp, #4]
 801c27c:	086a      	lsrs	r2, r5, #1
 801c27e:	5cb2      	ldrb	r2, [r6, r2]
 801c280:	07ee      	lsls	r6, r5, #31
 801c282:	bf54      	ite	pl
 801c284:	f002 020f 	andpl.w	r2, r2, #15
 801c288:	1112      	asrmi	r2, r2, #4
 801c28a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c28e:	b2d2      	uxtb	r2, r2
 801c290:	b1ea      	cbz	r2, 801c2ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c292:	9d04      	ldr	r5, [sp, #16]
 801c294:	436a      	muls	r2, r5
 801c296:	1c55      	adds	r5, r2, #1
 801c298:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c29c:	4d6e      	ldr	r5, [pc, #440]	@ (801c458 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c29e:	1212      	asrs	r2, r2, #8
 801c2a0:	682d      	ldr	r5, [r5, #0]
 801c2a2:	2aff      	cmp	r2, #255	@ 0xff
 801c2a4:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801c2a8:	9605      	str	r6, [sp, #20]
 801c2aa:	d116      	bne.n	801c2da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c2ac:	f06f 0201 	mvn.w	r2, #1
 801c2b0:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801c2b4:	fb02 fc07 	mul.w	ip, r2, r7
 801c2b8:	096a      	lsrs	r2, r5, #5
 801c2ba:	f026 0607 	bic.w	r6, r6, #7
 801c2be:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c2c2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c2c6:	4316      	orrs	r6, r2
 801c2c8:	432e      	orrs	r6, r5
 801c2ca:	f824 600c 	strh.w	r6, [r4, ip]
 801c2ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c2d0:	3f01      	subs	r7, #1
 801c2d2:	4410      	add	r0, r2
 801c2d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c2d6:	4411      	add	r1, r2
 801c2d8:	e77e      	b.n	801c1d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c2da:	f06f 0601 	mvn.w	r6, #1
 801c2de:	fa1f fa82 	uxth.w	sl, r2
 801c2e2:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801c2e6:	43d2      	mvns	r2, r2
 801c2e8:	437e      	muls	r6, r7
 801c2ea:	b2ed      	uxtb	r5, r5
 801c2ec:	fb1c fc0a 	smulbb	ip, ip, sl
 801c2f0:	b2d2      	uxtb	r2, r2
 801c2f2:	f834 8006 	ldrh.w	r8, [r4, r6]
 801c2f6:	fb15 f50a 	smulbb	r5, r5, sl
 801c2fa:	9602      	str	r6, [sp, #8]
 801c2fc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c300:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c304:	fb16 f60a 	smulbb	r6, r6, sl
 801c308:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801c30c:	fb0e ce02 	mla	lr, lr, r2, ip
 801c310:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c314:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c318:	fa1f fe8e 	uxth.w	lr, lr
 801c31c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801c320:	fa5f f888 	uxtb.w	r8, r8
 801c324:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c328:	fb08 5502 	mla	r5, r8, r2, r5
 801c32c:	f10e 0201 	add.w	r2, lr, #1
 801c330:	fa1f fc8c 	uxth.w	ip, ip
 801c334:	b2ad      	uxth	r5, r5
 801c336:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c33a:	9a02      	ldr	r2, [sp, #8]
 801c33c:	1c6e      	adds	r6, r5, #1
 801c33e:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801c342:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801c346:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c34a:	ea46 0e0e 	orr.w	lr, r6, lr
 801c34e:	f10c 0601 	add.w	r6, ip, #1
 801c352:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c356:	0976      	lsrs	r6, r6, #5
 801c358:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c35c:	ea4e 0e06 	orr.w	lr, lr, r6
 801c360:	f824 e002 	strh.w	lr, [r4, r2]
 801c364:	e7b3      	b.n	801c2ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c366:	f04f 0800 	mov.w	r8, #0
 801c36a:	eba3 0208 	sub.w	r2, r3, r8
 801c36e:	2a00      	cmp	r2, #0
 801c370:	f77f af35 	ble.w	801c1de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c374:	1402      	asrs	r2, r0, #16
 801c376:	9e00      	ldr	r6, [sp, #0]
 801c378:	140d      	asrs	r5, r1, #16
 801c37a:	fb06 2505 	mla	r5, r6, r5, r2
 801c37e:	9e01      	ldr	r6, [sp, #4]
 801c380:	086a      	lsrs	r2, r5, #1
 801c382:	07ed      	lsls	r5, r5, #31
 801c384:	5cb2      	ldrb	r2, [r6, r2]
 801c386:	bf54      	ite	pl
 801c388:	f002 020f 	andpl.w	r2, r2, #15
 801c38c:	1112      	asrmi	r2, r2, #4
 801c38e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c392:	b2d2      	uxtb	r2, r2
 801c394:	b1c2      	cbz	r2, 801c3c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c396:	9d04      	ldr	r5, [sp, #16]
 801c398:	436a      	muls	r2, r5
 801c39a:	1c55      	adds	r5, r2, #1
 801c39c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c3a0:	4d2d      	ldr	r5, [pc, #180]	@ (801c458 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c3a2:	1212      	asrs	r2, r2, #8
 801c3a4:	682e      	ldr	r6, [r5, #0]
 801c3a6:	2aff      	cmp	r2, #255	@ 0xff
 801c3a8:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801c3ac:	d113      	bne.n	801c3d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c3ae:	0972      	lsrs	r2, r6, #5
 801c3b0:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801c3b4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c3b8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c3bc:	f025 0507 	bic.w	r5, r5, #7
 801c3c0:	4315      	orrs	r5, r2
 801c3c2:	4335      	orrs	r5, r6
 801c3c4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c3c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c3ca:	f108 0801 	add.w	r8, r8, #1
 801c3ce:	4410      	add	r0, r2
 801c3d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c3d2:	4411      	add	r1, r2
 801c3d4:	e7c9      	b.n	801c36a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c3d6:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c3da:	fa1f fa82 	uxth.w	sl, r2
 801c3de:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801c3e2:	43d2      	mvns	r2, r2
 801c3e4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c3e8:	fb17 f70a 	smulbb	r7, r7, sl
 801c3ec:	b2d2      	uxtb	r2, r2
 801c3ee:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c3f2:	b2f6      	uxtb	r6, r6
 801c3f4:	b2ed      	uxtb	r5, r5
 801c3f6:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c3fa:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c3fe:	fb16 f60a 	smulbb	r6, r6, sl
 801c402:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c406:	fa1f fc8c 	uxth.w	ip, ip
 801c40a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c40e:	fb15 f50a 	smulbb	r5, r5, sl
 801c412:	fa5f fe8e 	uxtb.w	lr, lr
 801c416:	fb0e 6602 	mla	r6, lr, r2, r6
 801c41a:	fb07 5702 	mla	r7, r7, r2, r5
 801c41e:	f10c 0201 	add.w	r2, ip, #1
 801c422:	b2b6      	uxth	r6, r6
 801c424:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c428:	1c75      	adds	r5, r6, #1
 801c42a:	b2bf      	uxth	r7, r7
 801c42c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c430:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c434:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c438:	ea45 0c0c 	orr.w	ip, r5, ip
 801c43c:	1c7d      	adds	r5, r7, #1
 801c43e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801c442:	096d      	lsrs	r5, r5, #5
 801c444:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801c448:	ea4c 0c05 	orr.w	ip, ip, r5
 801c44c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801c450:	e7ba      	b.n	801c3c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c452:	b007      	add	sp, #28
 801c454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c458:	20027dd0 	.word	0x20027dd0

0801c45c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c460:	b087      	sub	sp, #28
 801c462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c466:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 801c770 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c46a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c46c:	9101      	str	r1, [sp, #4]
 801c46e:	9205      	str	r2, [sp, #20]
 801c470:	6841      	ldr	r1, [r0, #4]
 801c472:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801c476:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801c47a:	fb01 2404 	mla	r4, r1, r4, r2
 801c47e:	6802      	ldr	r2, [r0, #0]
 801c480:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c484:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c488:	3201      	adds	r2, #1
 801c48a:	f022 0201 	bic.w	r2, r2, #1
 801c48e:	9202      	str	r2, [sp, #8]
 801c490:	f8db 2000 	ldr.w	r2, [fp]
 801c494:	9203      	str	r2, [sp, #12]
 801c496:	9a01      	ldr	r2, [sp, #4]
 801c498:	2a00      	cmp	r2, #0
 801c49a:	dc03      	bgt.n	801c4a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c49c:	9a05      	ldr	r2, [sp, #20]
 801c49e:	2a00      	cmp	r2, #0
 801c4a0:	f340 8162 	ble.w	801c768 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c4a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c4a6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801c4aa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c4ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4b0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801c4b4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	dd0e      	ble.n	801c4da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c4bc:	1402      	asrs	r2, r0, #16
 801c4be:	d405      	bmi.n	801c4cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c4c0:	42ba      	cmp	r2, r7
 801c4c2:	da03      	bge.n	801c4cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c4c4:	140a      	asrs	r2, r1, #16
 801c4c6:	d401      	bmi.n	801c4cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c4c8:	42b2      	cmp	r2, r6
 801c4ca:	db07      	blt.n	801c4dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c4cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c4ce:	3b01      	subs	r3, #1
 801c4d0:	3402      	adds	r4, #2
 801c4d2:	4410      	add	r0, r2
 801c4d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c4d6:	4411      	add	r1, r2
 801c4d8:	e7ee      	b.n	801c4b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c4da:	d017      	beq.n	801c50c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c4dc:	1e5a      	subs	r2, r3, #1
 801c4de:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c4e0:	fb05 0502 	mla	r5, r5, r2, r0
 801c4e4:	142d      	asrs	r5, r5, #16
 801c4e6:	d409      	bmi.n	801c4fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c4e8:	42bd      	cmp	r5, r7
 801c4ea:	da07      	bge.n	801c4fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c4ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c4ee:	fb05 1202 	mla	r2, r5, r2, r1
 801c4f2:	1412      	asrs	r2, r2, #16
 801c4f4:	d402      	bmi.n	801c4fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c4f6:	42b2      	cmp	r2, r6
 801c4f8:	f2c0 80c3 	blt.w	801c682 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801c4fc:	2500      	movs	r5, #0
 801c4fe:	195a      	adds	r2, r3, r5
 801c500:	2a00      	cmp	r2, #0
 801c502:	dc3f      	bgt.n	801c584 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c508:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c50c:	9b01      	ldr	r3, [sp, #4]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f340 812a 	ble.w	801c768 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c514:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c51a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c51e:	eeb0 6a62 	vmov.f32	s12, s5
 801c522:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c526:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c52a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c52e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c532:	eeb0 6a43 	vmov.f32	s12, s6
 801c536:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c53a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801c53e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c542:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c546:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c54a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c54e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c552:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c556:	ee12 2a90 	vmov	r2, s5
 801c55a:	eef0 2a47 	vmov.f32	s5, s14
 801c55e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c562:	ee13 2a10 	vmov	r2, s6
 801c566:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c56a:	eeb0 3a67 	vmov.f32	s6, s15
 801c56e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c572:	9314      	str	r3, [sp, #80]	@ 0x50
 801c574:	9b01      	ldr	r3, [sp, #4]
 801c576:	9a05      	ldr	r2, [sp, #20]
 801c578:	3b01      	subs	r3, #1
 801c57a:	9301      	str	r3, [sp, #4]
 801c57c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c57e:	bf08      	it	eq
 801c580:	4613      	moveq	r3, r2
 801c582:	e788      	b.n	801c496 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c584:	1406      	asrs	r6, r0, #16
 801c586:	d42c      	bmi.n	801c5e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c588:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c58c:	42b2      	cmp	r2, r6
 801c58e:	dd28      	ble.n	801c5e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c590:	140f      	asrs	r7, r1, #16
 801c592:	d426      	bmi.n	801c5e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c594:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c598:	42ba      	cmp	r2, r7
 801c59a:	dd22      	ble.n	801c5e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c59c:	9a02      	ldr	r2, [sp, #8]
 801c59e:	fb07 6602 	mla	r6, r7, r2, r6
 801c5a2:	9f03      	ldr	r7, [sp, #12]
 801c5a4:	0872      	lsrs	r2, r6, #1
 801c5a6:	07f6      	lsls	r6, r6, #31
 801c5a8:	5cba      	ldrb	r2, [r7, r2]
 801c5aa:	bf54      	ite	pl
 801c5ac:	f002 020f 	andpl.w	r2, r2, #15
 801c5b0:	1112      	asrmi	r2, r2, #4
 801c5b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c5b6:	b2d2      	uxtb	r2, r2
 801c5b8:	2aff      	cmp	r2, #255	@ 0xff
 801c5ba:	d118      	bne.n	801c5ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c5bc:	f06f 0601 	mvn.w	r6, #1
 801c5c0:	f8d8 2000 	ldr.w	r2, [r8]
 801c5c4:	fb06 f705 	mul.w	r7, r6, r5
 801c5c8:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801c5cc:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801c5d0:	0956      	lsrs	r6, r2, #5
 801c5d2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c5d6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c5da:	ea4c 0606 	orr.w	r6, ip, r6
 801c5de:	4316      	orrs	r6, r2
 801c5e0:	53e6      	strh	r6, [r4, r7]
 801c5e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c5e4:	3d01      	subs	r5, #1
 801c5e6:	4410      	add	r0, r2
 801c5e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c5ea:	4411      	add	r1, r2
 801c5ec:	e787      	b.n	801c4fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c5ee:	2a00      	cmp	r2, #0
 801c5f0:	d0f7      	beq.n	801c5e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c5f2:	f06f 0601 	mvn.w	r6, #1
 801c5f6:	f8d8 c000 	ldr.w	ip, [r8]
 801c5fa:	fa1f f982 	uxth.w	r9, r2
 801c5fe:	43d2      	mvns	r2, r2
 801c600:	436e      	muls	r6, r5
 801c602:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801c606:	b2d2      	uxtb	r2, r2
 801c608:	f834 e006 	ldrh.w	lr, [r4, r6]
 801c60c:	fb1a fa09 	smulbb	sl, sl, r9
 801c610:	9604      	str	r6, [sp, #16]
 801c612:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801c616:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c61a:	fb16 f609 	smulbb	r6, r6, r9
 801c61e:	fa5f fc8c 	uxtb.w	ip, ip
 801c622:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c626:	fb1c fc09 	smulbb	ip, ip, r9
 801c62a:	fb07 6702 	mla	r7, r7, r2, r6
 801c62e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c632:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c636:	b2bf      	uxth	r7, r7
 801c638:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c63c:	fa5f fe8e 	uxtb.w	lr, lr
 801c640:	fb06 a602 	mla	r6, r6, r2, sl
 801c644:	fb0e cc02 	mla	ip, lr, r2, ip
 801c648:	1c7a      	adds	r2, r7, #1
 801c64a:	b2b6      	uxth	r6, r6
 801c64c:	fa1f fc8c 	uxth.w	ip, ip
 801c650:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c654:	9a04      	ldr	r2, [sp, #16]
 801c656:	f10c 0a01 	add.w	sl, ip, #1
 801c65a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c65e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c662:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c666:	ea4a 0707 	orr.w	r7, sl, r7
 801c66a:	f106 0a01 	add.w	sl, r6, #1
 801c66e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c672:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c676:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c67a:	ea47 070a 	orr.w	r7, r7, sl
 801c67e:	52a7      	strh	r7, [r4, r2]
 801c680:	e7af      	b.n	801c5e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c682:	f04f 0e00 	mov.w	lr, #0
 801c686:	eba3 020e 	sub.w	r2, r3, lr
 801c68a:	2a00      	cmp	r2, #0
 801c68c:	f77f af3a 	ble.w	801c504 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c690:	1402      	asrs	r2, r0, #16
 801c692:	9e02      	ldr	r6, [sp, #8]
 801c694:	140d      	asrs	r5, r1, #16
 801c696:	fb06 2505 	mla	r5, r6, r5, r2
 801c69a:	9e03      	ldr	r6, [sp, #12]
 801c69c:	086a      	lsrs	r2, r5, #1
 801c69e:	07ed      	lsls	r5, r5, #31
 801c6a0:	5cb2      	ldrb	r2, [r6, r2]
 801c6a2:	bf54      	ite	pl
 801c6a4:	f002 020f 	andpl.w	r2, r2, #15
 801c6a8:	1112      	asrmi	r2, r2, #4
 801c6aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c6ae:	b2d2      	uxtb	r2, r2
 801c6b0:	2aff      	cmp	r2, #255	@ 0xff
 801c6b2:	d115      	bne.n	801c6e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c6b4:	f8d8 5000 	ldr.w	r5, [r8]
 801c6b8:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801c6bc:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801c6c0:	096a      	lsrs	r2, r5, #5
 801c6c2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c6c6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c6ca:	4332      	orrs	r2, r6
 801c6cc:	432a      	orrs	r2, r5
 801c6ce:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801c6d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c6d4:	f10e 0e01 	add.w	lr, lr, #1
 801c6d8:	4410      	add	r0, r2
 801c6da:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c6dc:	4411      	add	r1, r2
 801c6de:	e7d2      	b.n	801c686 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c6e0:	2a00      	cmp	r2, #0
 801c6e2:	d0f6      	beq.n	801c6d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c6e4:	f8d8 7000 	ldr.w	r7, [r8]
 801c6e8:	fa1f f982 	uxth.w	r9, r2
 801c6ec:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c6f0:	43d2      	mvns	r2, r2
 801c6f2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801c6f6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c6fa:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c6fe:	fb15 f509 	smulbb	r5, r5, r9
 801c702:	b2d2      	uxtb	r2, r2
 801c704:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801c708:	b2ff      	uxtb	r7, r7
 801c70a:	fb1a fa09 	smulbb	sl, sl, r9
 801c70e:	fb06 5602 	mla	r6, r6, r2, r5
 801c712:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c716:	fb17 f709 	smulbb	r7, r7, r9
 801c71a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c71e:	b2b6      	uxth	r6, r6
 801c720:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801c724:	fa5f fc8c 	uxtb.w	ip, ip
 801c728:	fb05 a502 	mla	r5, r5, r2, sl
 801c72c:	fb0c 7702 	mla	r7, ip, r2, r7
 801c730:	1c72      	adds	r2, r6, #1
 801c732:	b2ad      	uxth	r5, r5
 801c734:	b2bf      	uxth	r7, r7
 801c736:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c73a:	f107 0a01 	add.w	sl, r7, #1
 801c73e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801c742:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c746:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c74a:	ea4a 0606 	orr.w	r6, sl, r6
 801c74e:	f105 0a01 	add.w	sl, r5, #1
 801c752:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c756:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c75a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c75e:	ea46 060a 	orr.w	r6, r6, sl
 801c762:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c766:	e7b4      	b.n	801c6d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c768:	b007      	add	sp, #28
 801c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76e:	bf00      	nop
 801c770:	20027dd0 	.word	0x20027dd0

0801c774 <_ZN8touchgfx8LCD16bppD1Ev>:
 801c774:	4770      	bx	lr

0801c776 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801c776:	4770      	bx	lr

0801c778 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801c778:	4770      	bx	lr

0801c77a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801c77a:	4770      	bx	lr

0801c77c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801c77c:	4770      	bx	lr

0801c77e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c77e:	4770      	bx	lr

0801c780 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c780:	4770      	bx	lr

0801c782 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c782:	4770      	bx	lr

0801c784 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c784:	4770      	bx	lr

0801c786 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c786:	4770      	bx	lr

0801c788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c788:	4770      	bx	lr

0801c78a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c78a:	4770      	bx	lr

0801c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c78c:	4770      	bx	lr

0801c78e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c78e:	4770      	bx	lr

0801c790 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c790:	4770      	bx	lr

0801c792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c792:	4770      	bx	lr

0801c794 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c794:	4770      	bx	lr

0801c796 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c796:	4770      	bx	lr

0801c798 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c798:	4770      	bx	lr

0801c79a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c79a:	4770      	bx	lr

0801c79c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c79c:	4770      	bx	lr

0801c79e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c79e:	4770      	bx	lr

0801c7a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c7a0:	4770      	bx	lr

0801c7a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c7a2:	4770      	bx	lr

0801c7a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c7a4:	4770      	bx	lr

0801c7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c7a6:	4770      	bx	lr

0801c7a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c7a8:	4770      	bx	lr

0801c7aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c7aa:	4770      	bx	lr

0801c7ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c7ac:	4770      	bx	lr

0801c7ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c7ae:	4770      	bx	lr

0801c7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c7b0:	4770      	bx	lr

0801c7b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c7b2:	4770      	bx	lr

0801c7b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c7b4:	4770      	bx	lr

0801c7b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c7b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7ba:	b088      	sub	sp, #32
 801c7bc:	4606      	mov	r6, r0
 801c7be:	4688      	mov	r8, r1
 801c7c0:	4691      	mov	r9, r2
 801c7c2:	ac08      	add	r4, sp, #32
 801c7c4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c7c8:	4620      	mov	r0, r4
 801c7ca:	f7fd fc31 	bl	801a030 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c7ce:	6833      	ldr	r3, [r6, #0]
 801c7d0:	4605      	mov	r5, r0
 801c7d2:	4620      	mov	r0, r4
 801c7d4:	699f      	ldr	r7, [r3, #24]
 801c7d6:	f7fd fb39 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c7da:	4682      	mov	sl, r0
 801c7dc:	4620      	mov	r0, r4
 801c7de:	f7fd fb69 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c7e2:	9500      	str	r5, [sp, #0]
 801c7e4:	464b      	mov	r3, r9
 801c7e6:	4642      	mov	r2, r8
 801c7e8:	4631      	mov	r1, r6
 801c7ea:	e9cd a001 	strd	sl, r0, [sp, #4]
 801c7ee:	a806      	add	r0, sp, #24
 801c7f0:	47b8      	blx	r7
 801c7f2:	4628      	mov	r0, r5
 801c7f4:	b008      	add	sp, #32
 801c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c7fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c800:	2300      	movs	r3, #0
 801c802:	9300      	str	r3, [sp, #0]
 801c804:	4b3d      	ldr	r3, [pc, #244]	@ (801c8fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801c806:	781b      	ldrb	r3, [r3, #0]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d137      	bne.n	801c87c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801c80c:	4a3c      	ldr	r2, [pc, #240]	@ (801c900 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c80e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c812:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d132      	bne.n	801c880 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c81a:	4b3a      	ldr	r3, [pc, #232]	@ (801c904 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c820:	ac02      	add	r4, sp, #8
 801c822:	6808      	ldr	r0, [r1, #0]
 801c824:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c828:	ab02      	add	r3, sp, #8
 801c82a:	6849      	ldr	r1, [r1, #4]
 801c82c:	4d36      	ldr	r5, [pc, #216]	@ (801c908 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c82e:	c303      	stmia	r3!, {r0, r1}
 801c830:	4669      	mov	r1, sp
 801c832:	4620      	mov	r0, r4
 801c834:	f7f9 fda4 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c838:	4668      	mov	r0, sp
 801c83a:	f7f9 fd5d 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c83e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c842:	f8bd 2000 	ldrh.w	r2, [sp]
 801c846:	462f      	mov	r7, r5
 801c848:	6828      	ldr	r0, [r5, #0]
 801c84a:	4413      	add	r3, r2
 801c84c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c850:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c854:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c858:	4413      	add	r3, r2
 801c85a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c85e:	6803      	ldr	r3, [r0, #0]
 801c860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c862:	4798      	blx	r3
 801c864:	f010 0f01 	tst.w	r0, #1
 801c868:	d00c      	beq.n	801c884 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c86a:	6828      	ldr	r0, [r5, #0]
 801c86c:	6803      	ldr	r3, [r0, #0]
 801c86e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c874:	4798      	blx	r3
 801c876:	b004      	add	sp, #16
 801c878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c87c:	4a21      	ldr	r2, [pc, #132]	@ (801c904 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c87e:	e7c6      	b.n	801c80e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c880:	4b1f      	ldr	r3, [pc, #124]	@ (801c900 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c882:	e7cb      	b.n	801c81c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c884:	6838      	ldr	r0, [r7, #0]
 801c886:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c88a:	6803      	ldr	r3, [r0, #0]
 801c88c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c890:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c896:	4798      	blx	r3
 801c898:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c89c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c8a0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c8a4:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c8a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c8ac:	6838      	ldr	r0, [r7, #0]
 801c8ae:	6803      	ldr	r3, [r0, #0]
 801c8b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c8b2:	4798      	blx	r3
 801c8b4:	4a12      	ldr	r2, [pc, #72]	@ (801c900 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c8b6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c8ba:	8813      	ldrh	r3, [r2, #0]
 801c8bc:	4691      	mov	r9, r2
 801c8be:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c8c2:	435d      	muls	r5, r3
 801c8c4:	fb03 1404 	mla	r4, r3, r4, r1
 801c8c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c8cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c8d0:	6838      	ldr	r0, [r7, #0]
 801c8d2:	42ac      	cmp	r4, r5
 801c8d4:	6803      	ldr	r3, [r0, #0]
 801c8d6:	d20e      	bcs.n	801c8f6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c8d8:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801c8dc:	4632      	mov	r2, r6
 801c8de:	4643      	mov	r3, r8
 801c8e0:	4621      	mov	r1, r4
 801c8e2:	47d0      	blx	sl
 801c8e4:	f8b9 3000 	ldrh.w	r3, [r9]
 801c8e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c8ec:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c8f0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c8f4:	e7ec      	b.n	801c8d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8f8:	4798      	blx	r3
 801c8fa:	e7bc      	b.n	801c876 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c8fc:	20027db8 	.word	0x20027db8
 801c900:	20027dba 	.word	0x20027dba
 801c904:	20027dbc 	.word	0x20027dbc
 801c908:	20027dc0 	.word	0x20027dc0

0801c90c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c910:	b08b      	sub	sp, #44	@ 0x2c
 801c912:	460f      	mov	r7, r1
 801c914:	4616      	mov	r6, r2
 801c916:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801c91a:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801c91e:	f1bb 0f00 	cmp.w	fp, #0
 801c922:	d04a      	beq.n	801c9ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801c924:	6810      	ldr	r0, [r2, #0]
 801c926:	ad06      	add	r5, sp, #24
 801c928:	6851      	ldr	r1, [r2, #4]
 801c92a:	c503      	stmia	r5!, {r0, r1}
 801c92c:	6818      	ldr	r0, [r3, #0]
 801c92e:	ad08      	add	r5, sp, #32
 801c930:	6859      	ldr	r1, [r3, #4]
 801c932:	c503      	stmia	r5!, {r0, r1}
 801c934:	a806      	add	r0, sp, #24
 801c936:	f7f9 fcdf 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c93a:	4631      	mov	r1, r6
 801c93c:	a808      	add	r0, sp, #32
 801c93e:	f7f9 fd1f 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c942:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c946:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c94a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c94e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801c952:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c956:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801c95a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c95e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c962:	4f5f      	ldr	r7, [pc, #380]	@ (801cae0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c964:	440a      	add	r2, r1
 801c966:	6838      	ldr	r0, [r7, #0]
 801c968:	46b9      	mov	r9, r7
 801c96a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c96e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c972:	4413      	add	r3, r2
 801c974:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c978:	6803      	ldr	r3, [r0, #0]
 801c97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c97c:	4798      	blx	r3
 801c97e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801c982:	d11d      	bne.n	801c9c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801c984:	b9fc      	cbnz	r4, 801c9c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c986:	f010 0f01 	tst.w	r0, #1
 801c98a:	d01c      	beq.n	801c9c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c98c:	f8d9 0000 	ldr.w	r0, [r9]
 801c990:	2700      	movs	r7, #0
 801c992:	b2ad      	uxth	r5, r5
 801c994:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801c998:	6801      	ldr	r1, [r0, #0]
 801c99a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c99e:	f8cd b00c 	str.w	fp, [sp, #12]
 801c9a2:	9501      	str	r5, [sp, #4]
 801c9a4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c9a8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c9ac:	9402      	str	r4, [sp, #8]
 801c9ae:	fa1f f488 	uxth.w	r4, r8
 801c9b2:	9400      	str	r4, [sp, #0]
 801c9b4:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801c9b6:	4631      	mov	r1, r6
 801c9b8:	47a0      	blx	r4
 801c9ba:	b00b      	add	sp, #44	@ 0x2c
 801c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9c0:	f010 0f04 	tst.w	r0, #4
 801c9c4:	e7e1      	b.n	801c98a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801c9c6:	f8d9 0000 	ldr.w	r0, [r9]
 801c9ca:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c9ce:	6803      	ldr	r3, [r0, #0]
 801c9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c9d2:	4798      	blx	r3
 801c9d4:	4b43      	ldr	r3, [pc, #268]	@ (801cae4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c9d6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801c9da:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801c9de:	881a      	ldrh	r2, [r3, #0]
 801c9e0:	469a      	mov	sl, r3
 801c9e2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c9e6:	fb05 f502 	mul.w	r5, r5, r2
 801c9ea:	fb02 1404 	mla	r4, r2, r4, r1
 801c9ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c9f2:	d059      	beq.n	801caa8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c9f4:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801c9f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c9fc:	fa1f f28b 	uxth.w	r2, fp
 801ca00:	469e      	mov	lr, r3
 801ca02:	fa1f f989 	uxth.w	r9, r9
 801ca06:	42ac      	cmp	r4, r5
 801ca08:	d264      	bcs.n	801cad4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801ca0a:	eb04 0a07 	add.w	sl, r4, r7
 801ca0e:	4554      	cmp	r4, sl
 801ca10:	d23d      	bcs.n	801ca8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801ca12:	8821      	ldrh	r1, [r4, #0]
 801ca14:	f836 3b02 	ldrh.w	r3, [r6], #2
 801ca18:	1208      	asrs	r0, r1, #8
 801ca1a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ca1e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801ca22:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801ca26:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ca2a:	00c9      	lsls	r1, r1, #3
 801ca2c:	fb10 f009 	smulbb	r0, r0, r9
 801ca30:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801ca34:	b2c9      	uxtb	r1, r1
 801ca36:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ca3a:	10d8      	asrs	r0, r3, #3
 801ca3c:	fb1b fb09 	smulbb	fp, fp, r9
 801ca40:	00db      	lsls	r3, r3, #3
 801ca42:	fa1f fc8c 	uxth.w	ip, ip
 801ca46:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801ca4a:	fb11 f109 	smulbb	r1, r1, r9
 801ca4e:	b2db      	uxtb	r3, r3
 801ca50:	fb00 b002 	mla	r0, r0, r2, fp
 801ca54:	f10c 0b01 	add.w	fp, ip, #1
 801ca58:	fb03 1302 	mla	r3, r3, r2, r1
 801ca5c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ca60:	b29b      	uxth	r3, r3
 801ca62:	b280      	uxth	r0, r0
 801ca64:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801ca68:	f103 0c01 	add.w	ip, r3, #1
 801ca6c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ca70:	1c43      	adds	r3, r0, #1
 801ca72:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ca76:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ca7a:	0940      	lsrs	r0, r0, #5
 801ca7c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ca80:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ca84:	ea4c 0c00 	orr.w	ip, ip, r0
 801ca88:	f824 cb02 	strh.w	ip, [r4], #2
 801ca8c:	e7bf      	b.n	801ca0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801ca8e:	f8be 3000 	ldrh.w	r3, [lr]
 801ca92:	eba3 0308 	sub.w	r3, r3, r8
 801ca96:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ca9a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ca9e:	eba3 0308 	sub.w	r3, r3, r8
 801caa2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801caa6:	e7ae      	b.n	801ca06 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801caa8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801caac:	f8d9 0000 	ldr.w	r0, [r9]
 801cab0:	42ac      	cmp	r4, r5
 801cab2:	6803      	ldr	r3, [r0, #0]
 801cab4:	d20e      	bcs.n	801cad4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801cab6:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801caba:	4632      	mov	r2, r6
 801cabc:	463b      	mov	r3, r7
 801cabe:	4621      	mov	r1, r4
 801cac0:	47c0      	blx	r8
 801cac2:	f8ba 3000 	ldrh.w	r3, [sl]
 801cac6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801caca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cace:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801cad2:	e7eb      	b.n	801caac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801cad4:	4b02      	ldr	r3, [pc, #8]	@ (801cae0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801cad6:	6818      	ldr	r0, [r3, #0]
 801cad8:	6803      	ldr	r3, [r0, #0]
 801cada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cadc:	4798      	blx	r3
 801cade:	e76c      	b.n	801c9ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801cae0:	20027dc0 	.word	0x20027dc0
 801cae4:	20027dba 	.word	0x20027dba

0801cae8 <_ZN8touchgfx8LCD16bppD0Ev>:
 801cae8:	b510      	push	{r4, lr}
 801caea:	4604      	mov	r4, r0
 801caec:	218c      	movs	r1, #140	@ 0x8c
 801caee:	f00c f85c 	bl	8028baa <_ZdlPvj>
 801caf2:	4620      	mov	r0, r4
 801caf4:	bd10      	pop	{r4, pc}

0801caf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801caf6:	b510      	push	{r4, lr}
 801caf8:	4604      	mov	r4, r0
 801cafa:	2104      	movs	r1, #4
 801cafc:	f00c f855 	bl	8028baa <_ZdlPvj>
 801cb00:	4620      	mov	r0, r4
 801cb02:	bd10      	pop	{r4, pc}

0801cb04 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801cb04:	b510      	push	{r4, lr}
 801cb06:	4604      	mov	r4, r0
 801cb08:	2104      	movs	r1, #4
 801cb0a:	f00c f84e 	bl	8028baa <_ZdlPvj>
 801cb0e:	4620      	mov	r0, r4
 801cb10:	bd10      	pop	{r4, pc}

0801cb12 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801cb12:	b510      	push	{r4, lr}
 801cb14:	4604      	mov	r4, r0
 801cb16:	f640 0144 	movw	r1, #2116	@ 0x844
 801cb1a:	f00c f846 	bl	8028baa <_ZdlPvj>
 801cb1e:	4620      	mov	r0, r4
 801cb20:	bd10      	pop	{r4, pc}

0801cb22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801cb22:	b510      	push	{r4, lr}
 801cb24:	4604      	mov	r4, r0
 801cb26:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801cb2a:	f00c f83e 	bl	8028baa <_ZdlPvj>
 801cb2e:	4620      	mov	r0, r4
 801cb30:	bd10      	pop	{r4, pc}

0801cb32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cb32:	b510      	push	{r4, lr}
 801cb34:	4604      	mov	r4, r0
 801cb36:	2104      	movs	r1, #4
 801cb38:	f00c f837 	bl	8028baa <_ZdlPvj>
 801cb3c:	4620      	mov	r0, r4
 801cb3e:	bd10      	pop	{r4, pc}

0801cb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801cb40:	b510      	push	{r4, lr}
 801cb42:	4604      	mov	r4, r0
 801cb44:	2104      	movs	r1, #4
 801cb46:	f00c f830 	bl	8028baa <_ZdlPvj>
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	bd10      	pop	{r4, pc}

0801cb4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cb4e:	b510      	push	{r4, lr}
 801cb50:	4604      	mov	r4, r0
 801cb52:	2104      	movs	r1, #4
 801cb54:	f00c f829 	bl	8028baa <_ZdlPvj>
 801cb58:	4620      	mov	r0, r4
 801cb5a:	bd10      	pop	{r4, pc}

0801cb5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801cb5c:	b510      	push	{r4, lr}
 801cb5e:	4604      	mov	r4, r0
 801cb60:	2104      	movs	r1, #4
 801cb62:	f00c f822 	bl	8028baa <_ZdlPvj>
 801cb66:	4620      	mov	r0, r4
 801cb68:	bd10      	pop	{r4, pc}

0801cb6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cb6a:	b510      	push	{r4, lr}
 801cb6c:	4604      	mov	r4, r0
 801cb6e:	2104      	movs	r1, #4
 801cb70:	f00c f81b 	bl	8028baa <_ZdlPvj>
 801cb74:	4620      	mov	r0, r4
 801cb76:	bd10      	pop	{r4, pc}

0801cb78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cb78:	b510      	push	{r4, lr}
 801cb7a:	4604      	mov	r4, r0
 801cb7c:	2104      	movs	r1, #4
 801cb7e:	f00c f814 	bl	8028baa <_ZdlPvj>
 801cb82:	4620      	mov	r0, r4
 801cb84:	bd10      	pop	{r4, pc}

0801cb86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cb86:	b510      	push	{r4, lr}
 801cb88:	4604      	mov	r4, r0
 801cb8a:	2104      	movs	r1, #4
 801cb8c:	f00c f80d 	bl	8028baa <_ZdlPvj>
 801cb90:	4620      	mov	r0, r4
 801cb92:	bd10      	pop	{r4, pc}

0801cb94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cb94:	b510      	push	{r4, lr}
 801cb96:	4604      	mov	r4, r0
 801cb98:	2104      	movs	r1, #4
 801cb9a:	f00c f806 	bl	8028baa <_ZdlPvj>
 801cb9e:	4620      	mov	r0, r4
 801cba0:	bd10      	pop	{r4, pc}

0801cba2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cba2:	b510      	push	{r4, lr}
 801cba4:	4604      	mov	r4, r0
 801cba6:	2104      	movs	r1, #4
 801cba8:	f00b ffff 	bl	8028baa <_ZdlPvj>
 801cbac:	4620      	mov	r0, r4
 801cbae:	bd10      	pop	{r4, pc}

0801cbb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cbb0:	b510      	push	{r4, lr}
 801cbb2:	4604      	mov	r4, r0
 801cbb4:	2104      	movs	r1, #4
 801cbb6:	f00b fff8 	bl	8028baa <_ZdlPvj>
 801cbba:	4620      	mov	r0, r4
 801cbbc:	bd10      	pop	{r4, pc}

0801cbbe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cbbe:	b510      	push	{r4, lr}
 801cbc0:	4604      	mov	r4, r0
 801cbc2:	2104      	movs	r1, #4
 801cbc4:	f00b fff1 	bl	8028baa <_ZdlPvj>
 801cbc8:	4620      	mov	r0, r4
 801cbca:	bd10      	pop	{r4, pc}

0801cbcc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cbcc:	b510      	push	{r4, lr}
 801cbce:	4604      	mov	r4, r0
 801cbd0:	2104      	movs	r1, #4
 801cbd2:	f00b ffea 	bl	8028baa <_ZdlPvj>
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	bd10      	pop	{r4, pc}

0801cbda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cbda:	b510      	push	{r4, lr}
 801cbdc:	4604      	mov	r4, r0
 801cbde:	2104      	movs	r1, #4
 801cbe0:	f00b ffe3 	bl	8028baa <_ZdlPvj>
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	bd10      	pop	{r4, pc}

0801cbe8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801cbe8:	b510      	push	{r4, lr}
 801cbea:	4604      	mov	r4, r0
 801cbec:	2104      	movs	r1, #4
 801cbee:	f00b ffdc 	bl	8028baa <_ZdlPvj>
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	bd10      	pop	{r4, pc}

0801cbf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cbf6:	b510      	push	{r4, lr}
 801cbf8:	4604      	mov	r4, r0
 801cbfa:	2104      	movs	r1, #4
 801cbfc:	f00b ffd5 	bl	8028baa <_ZdlPvj>
 801cc00:	4620      	mov	r0, r4
 801cc02:	bd10      	pop	{r4, pc}

0801cc04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc04:	b510      	push	{r4, lr}
 801cc06:	4604      	mov	r4, r0
 801cc08:	2104      	movs	r1, #4
 801cc0a:	f00b ffce 	bl	8028baa <_ZdlPvj>
 801cc0e:	4620      	mov	r0, r4
 801cc10:	bd10      	pop	{r4, pc}

0801cc12 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cc12:	b510      	push	{r4, lr}
 801cc14:	4604      	mov	r4, r0
 801cc16:	2104      	movs	r1, #4
 801cc18:	f00b ffc7 	bl	8028baa <_ZdlPvj>
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	bd10      	pop	{r4, pc}

0801cc20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801cc20:	b510      	push	{r4, lr}
 801cc22:	4604      	mov	r4, r0
 801cc24:	2104      	movs	r1, #4
 801cc26:	f00b ffc0 	bl	8028baa <_ZdlPvj>
 801cc2a:	4620      	mov	r0, r4
 801cc2c:	bd10      	pop	{r4, pc}

0801cc2e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc2e:	b510      	push	{r4, lr}
 801cc30:	4604      	mov	r4, r0
 801cc32:	2104      	movs	r1, #4
 801cc34:	f00b ffb9 	bl	8028baa <_ZdlPvj>
 801cc38:	4620      	mov	r0, r4
 801cc3a:	bd10      	pop	{r4, pc}

0801cc3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc3c:	b510      	push	{r4, lr}
 801cc3e:	4604      	mov	r4, r0
 801cc40:	2104      	movs	r1, #4
 801cc42:	f00b ffb2 	bl	8028baa <_ZdlPvj>
 801cc46:	4620      	mov	r0, r4
 801cc48:	bd10      	pop	{r4, pc}

0801cc4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cc4a:	b510      	push	{r4, lr}
 801cc4c:	4604      	mov	r4, r0
 801cc4e:	2104      	movs	r1, #4
 801cc50:	f00b ffab 	bl	8028baa <_ZdlPvj>
 801cc54:	4620      	mov	r0, r4
 801cc56:	bd10      	pop	{r4, pc}

0801cc58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc58:	b510      	push	{r4, lr}
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	2104      	movs	r1, #4
 801cc5e:	f00b ffa4 	bl	8028baa <_ZdlPvj>
 801cc62:	4620      	mov	r0, r4
 801cc64:	bd10      	pop	{r4, pc}

0801cc66 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc66:	b510      	push	{r4, lr}
 801cc68:	4604      	mov	r4, r0
 801cc6a:	2104      	movs	r1, #4
 801cc6c:	f00b ff9d 	bl	8028baa <_ZdlPvj>
 801cc70:	4620      	mov	r0, r4
 801cc72:	bd10      	pop	{r4, pc}

0801cc74 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc74:	b510      	push	{r4, lr}
 801cc76:	4604      	mov	r4, r0
 801cc78:	2104      	movs	r1, #4
 801cc7a:	f00b ff96 	bl	8028baa <_ZdlPvj>
 801cc7e:	4620      	mov	r0, r4
 801cc80:	bd10      	pop	{r4, pc}

0801cc82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cc82:	b510      	push	{r4, lr}
 801cc84:	4604      	mov	r4, r0
 801cc86:	2104      	movs	r1, #4
 801cc88:	f00b ff8f 	bl	8028baa <_ZdlPvj>
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	bd10      	pop	{r4, pc}

0801cc90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801cc90:	b510      	push	{r4, lr}
 801cc92:	4604      	mov	r4, r0
 801cc94:	2104      	movs	r1, #4
 801cc96:	f00b ff88 	bl	8028baa <_ZdlPvj>
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	bd10      	pop	{r4, pc}

0801cc9e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801cc9e:	b510      	push	{r4, lr}
 801cca0:	4604      	mov	r4, r0
 801cca2:	2104      	movs	r1, #4
 801cca4:	f00b ff81 	bl	8028baa <_ZdlPvj>
 801cca8:	4620      	mov	r0, r4
 801ccaa:	bd10      	pop	{r4, pc}

0801ccac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ccac:	b510      	push	{r4, lr}
 801ccae:	4604      	mov	r4, r0
 801ccb0:	2104      	movs	r1, #4
 801ccb2:	f00b ff7a 	bl	8028baa <_ZdlPvj>
 801ccb6:	4620      	mov	r0, r4
 801ccb8:	bd10      	pop	{r4, pc}
	...

0801ccbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc0:	b08f      	sub	sp, #60	@ 0x3c
 801ccc2:	4616      	mov	r6, r2
 801ccc4:	4682      	mov	sl, r0
 801ccc6:	460d      	mov	r5, r1
 801ccc8:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801cccc:	9205      	str	r2, [sp, #20]
 801ccce:	2a00      	cmp	r2, #0
 801ccd0:	f000 82b7 	beq.w	801d242 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801ccd4:	6830      	ldr	r0, [r6, #0]
 801ccd6:	ac0a      	add	r4, sp, #40	@ 0x28
 801ccd8:	6871      	ldr	r1, [r6, #4]
 801ccda:	c403      	stmia	r4!, {r0, r1}
 801ccdc:	6818      	ldr	r0, [r3, #0]
 801ccde:	ac0c      	add	r4, sp, #48	@ 0x30
 801cce0:	6859      	ldr	r1, [r3, #4]
 801cce2:	c403      	stmia	r4!, {r0, r1}
 801cce4:	a80a      	add	r0, sp, #40	@ 0x28
 801cce6:	f7f9 fb07 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ccea:	4631      	mov	r1, r6
 801ccec:	a80c      	add	r0, sp, #48	@ 0x30
 801ccee:	f7f9 fb47 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ccf2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801ccf6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ccfa:	bfdb      	ittet	le
 801ccfc:	b293      	uxthle	r3, r2
 801ccfe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801cd02:	2301      	movgt	r3, #1
 801cd04:	fb91 f3f3 	sdivle	r3, r1, r3
 801cd08:	9300      	str	r3, [sp, #0]
 801cd0a:	f105 0308 	add.w	r3, r5, #8
 801cd0e:	9900      	ldr	r1, [sp, #0]
 801cd10:	9306      	str	r3, [sp, #24]
 801cd12:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801cd16:	440b      	add	r3, r1
 801cd18:	3b01      	subs	r3, #1
 801cd1a:	fb93 f3f1 	sdiv	r3, r3, r1
 801cd1e:	3b01      	subs	r3, #1
 801cd20:	9906      	ldr	r1, [sp, #24]
 801cd22:	b29b      	uxth	r3, r3
 801cd24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801cd28:	9900      	ldr	r1, [sp, #0]
 801cd2a:	9307      	str	r3, [sp, #28]
 801cd2c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801cd30:	fb93 f0f1 	sdiv	r0, r3, r1
 801cd34:	b284      	uxth	r4, r0
 801cd36:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801cd3a:	9402      	str	r4, [sp, #8]
 801cd3c:	9d02      	ldr	r5, [sp, #8]
 801cd3e:	9c00      	ldr	r4, [sp, #0]
 801cd40:	fb05 3414 	mls	r4, r5, r4, r3
 801cd44:	fb14 f402 	smulbb	r4, r4, r2
 801cd48:	440c      	add	r4, r1
 801cd4a:	b2a4      	uxth	r4, r4
 801cd4c:	2d00      	cmp	r5, #0
 801cd4e:	d06c      	beq.n	801ce2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801cd50:	1e6a      	subs	r2, r5, #1
 801cd52:	9806      	ldr	r0, [sp, #24]
 801cd54:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801cd58:	9a07      	ldr	r2, [sp, #28]
 801cd5a:	ba36      	rev	r6, r6
 801cd5c:	4416      	add	r6, r2
 801cd5e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801cd62:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801cd66:	4411      	add	r1, r2
 801cd68:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801cd6c:	f8df 932c 	ldr.w	r9, [pc, #812]	@ 801d09c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801cd70:	4413      	add	r3, r2
 801cd72:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801cd76:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801cd7a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801cd7e:	9301      	str	r3, [sp, #4]
 801cd80:	4bc4      	ldr	r3, [pc, #784]	@ (801d094 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801cd82:	6818      	ldr	r0, [r3, #0]
 801cd84:	6803      	ldr	r3, [r0, #0]
 801cd86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd88:	4798      	blx	r3
 801cd8a:	4bc3      	ldr	r3, [pc, #780]	@ (801d098 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801cd8c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801cd90:	881b      	ldrh	r3, [r3, #0]
 801cd92:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801cd96:	fb03 2808 	mla	r8, r3, r8, r2
 801cd9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cd9e:	436b      	muls	r3, r5
 801cda0:	2500      	movs	r5, #0
 801cda2:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801cda6:	4629      	mov	r1, r5
 801cda8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801cdac:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801cdb2:	fb94 f3f3 	sdiv	r3, r4, r3
 801cdb6:	9304      	str	r3, [sp, #16]
 801cdb8:	f10a 0304 	add.w	r3, sl, #4
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	9308      	str	r3, [sp, #32]
 801cdc0:	f00c f9be 	bl	8029140 <memset>
 801cdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdc6:	4543      	cmp	r3, r8
 801cdc8:	f240 8236 	bls.w	801d238 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801cdcc:	2203      	movs	r2, #3
 801cdce:	2107      	movs	r1, #7
 801cdd0:	200b      	movs	r0, #11
 801cdd2:	2c00      	cmp	r4, #0
 801cdd4:	f000 8131 	beq.w	801d03a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801cdd8:	7833      	ldrb	r3, [r6, #0]
 801cdda:	b2db      	uxtb	r3, r3
 801cddc:	2bfe      	cmp	r3, #254	@ 0xfe
 801cdde:	d126      	bne.n	801ce2e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801cde0:	f896 e001 	ldrb.w	lr, [r6, #1]
 801cde4:	3c01      	subs	r4, #1
 801cde6:	f896 c002 	ldrb.w	ip, [r6, #2]
 801cdea:	1d37      	adds	r7, r6, #4
 801cdec:	fa5f fe8e 	uxtb.w	lr, lr
 801cdf0:	f896 b003 	ldrb.w	fp, [r6, #3]
 801cdf4:	fa5f fc8c 	uxtb.w	ip, ip
 801cdf8:	f36e 0507 	bfi	r5, lr, #0, #8
 801cdfc:	fa5f fb8b 	uxtb.w	fp, fp
 801ce00:	b2a4      	uxth	r4, r4
 801ce02:	f36c 250f 	bfi	r5, ip, #8, #8
 801ce06:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801ce0a:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801ce0e:	f36b 4517 	bfi	r5, fp, #16, #8
 801ce12:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801ce16:	0e2b      	lsrs	r3, r5, #24
 801ce18:	fb10 c303 	smlabb	r3, r0, r3, ip
 801ce1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ce20:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801ce24:	605d      	str	r5, [r3, #4]
 801ce26:	463e      	mov	r6, r7
 801ce28:	e7d3      	b.n	801cdd2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801ce2a:	9e07      	ldr	r6, [sp, #28]
 801ce2c:	e797      	b.n	801cd5e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801ce2e:	2bff      	cmp	r3, #255	@ 0xff
 801ce30:	d127      	bne.n	801ce82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801ce32:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ce36:	3c01      	subs	r4, #1
 801ce38:	78b3      	ldrb	r3, [r6, #2]
 801ce3a:	1d77      	adds	r7, r6, #5
 801ce3c:	fa5f fc8c 	uxtb.w	ip, ip
 801ce40:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ce44:	b2db      	uxtb	r3, r3
 801ce46:	f896 b004 	ldrb.w	fp, [r6, #4]
 801ce4a:	f36c 0507 	bfi	r5, ip, #0, #8
 801ce4e:	fa5f fe8e 	uxtb.w	lr, lr
 801ce52:	fa5f fb8b 	uxtb.w	fp, fp
 801ce56:	f363 250f 	bfi	r5, r3, #8, #8
 801ce5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ce5e:	b2a4      	uxth	r4, r4
 801ce60:	fb12 330e 	smlabb	r3, r2, lr, r3
 801ce64:	f36e 4517 	bfi	r5, lr, #16, #8
 801ce68:	fb11 330c 	smlabb	r3, r1, ip, r3
 801ce6c:	f36b 651f 	bfi	r5, fp, #24, #8
 801ce70:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801ce74:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801ce78:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801ce7c:	f8cb 5004 	str.w	r5, [fp, #4]
 801ce80:	e7d1      	b.n	801ce26 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801ce82:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801ce86:	f106 0701 	add.w	r7, r6, #1
 801ce8a:	d107      	bne.n	801ce9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801ce8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ce90:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801ce94:	685d      	ldr	r5, [r3, #4]
 801ce96:	3c01      	subs	r4, #1
 801ce98:	b2a4      	uxth	r4, r4
 801ce9a:	e7c4      	b.n	801ce26 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801ce9c:	f1bc 0f01 	cmp.w	ip, #1
 801cea0:	d12c      	bne.n	801cefc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801cea2:	f003 0e03 	and.w	lr, r3, #3
 801cea6:	f003 0c0c 	and.w	ip, r3, #12
 801ceaa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ceae:	f1ae 0e02 	sub.w	lr, lr, #2
 801ceb2:	f1ac 0c08 	sub.w	ip, ip, #8
 801ceb6:	3b02      	subs	r3, #2
 801ceb8:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801cebc:	fa5f fe8e 	uxtb.w	lr, lr
 801cec0:	f36e 0507 	bfi	r5, lr, #0, #8
 801cec4:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801cec8:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801cecc:	f36c 250f 	bfi	r5, ip, #8, #8
 801ced0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801ced4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ced8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801cedc:	b2db      	uxtb	r3, r3
 801cede:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801cee2:	f363 4517 	bfi	r5, r3, #16, #8
 801cee6:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801ceea:	0e2e      	lsrs	r6, r5, #24
 801ceec:	fb10 c606 	smlabb	r6, r0, r6, ip
 801cef0:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801cef4:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801cef8:	6075      	str	r5, [r6, #4]
 801cefa:	e7cc      	b.n	801ce96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801cefc:	f1bc 0f02 	cmp.w	ip, #2
 801cf00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cf04:	d12a      	bne.n	801cf5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801cf06:	1cb7      	adds	r7, r6, #2
 801cf08:	7876      	ldrb	r6, [r6, #1]
 801cf0a:	3b20      	subs	r3, #32
 801cf0c:	b2f6      	uxtb	r6, r6
 801cf0e:	f006 0c0f 	and.w	ip, r6, #15
 801cf12:	1136      	asrs	r6, r6, #4
 801cf14:	f1ac 0c08 	sub.w	ip, ip, #8
 801cf18:	3e08      	subs	r6, #8
 801cf1a:	449c      	add	ip, r3
 801cf1c:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801cf20:	fa5f fc8c 	uxtb.w	ip, ip
 801cf24:	f36c 0507 	bfi	r5, ip, #0, #8
 801cf28:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801cf2c:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801cf30:	4433      	add	r3, r6
 801cf32:	fa5f fe8e 	uxtb.w	lr, lr
 801cf36:	f36e 250f 	bfi	r5, lr, #8, #8
 801cf3a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801cf3e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cf42:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801cf46:	b2db      	uxtb	r3, r3
 801cf48:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801cf4c:	f363 4517 	bfi	r5, r3, #16, #8
 801cf50:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801cf54:	0e2e      	lsrs	r6, r5, #24
 801cf56:	fb10 e606 	smlabb	r6, r0, r6, lr
 801cf5a:	e7c9      	b.n	801cef0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801cf5c:	1c5e      	adds	r6, r3, #1
 801cf5e:	42a6      	cmp	r6, r4
 801cf60:	dd4e      	ble.n	801d000 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801cf62:	1b36      	subs	r6, r6, r4
 801cf64:	2e00      	cmp	r6, #0
 801cf66:	dc4e      	bgt.n	801d006 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801cf68:	f8dd b004 	ldr.w	fp, [sp, #4]
 801cf6c:	2400      	movs	r4, #0
 801cf6e:	f1bb 0f00 	cmp.w	fp, #0
 801cf72:	f340 8122 	ble.w	801d1ba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801cf76:	1c7b      	adds	r3, r7, #1
 801cf78:	9303      	str	r3, [sp, #12]
 801cf7a:	783b      	ldrb	r3, [r7, #0]
 801cf7c:	b2db      	uxtb	r3, r3
 801cf7e:	2bfe      	cmp	r3, #254	@ 0xfe
 801cf80:	d160      	bne.n	801d044 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801cf82:	7879      	ldrb	r1, [r7, #1]
 801cf84:	1d3b      	adds	r3, r7, #4
 801cf86:	78ba      	ldrb	r2, [r7, #2]
 801cf88:	b2c9      	uxtb	r1, r1
 801cf8a:	78f8      	ldrb	r0, [r7, #3]
 801cf8c:	b2d2      	uxtb	r2, r2
 801cf8e:	9303      	str	r3, [sp, #12]
 801cf90:	f361 0507 	bfi	r5, r1, #0, #8
 801cf94:	b2c0      	uxtb	r0, r0
 801cf96:	2303      	movs	r3, #3
 801cf98:	f362 250f 	bfi	r5, r2, #8, #8
 801cf9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cfa0:	fb13 2200 	smlabb	r2, r3, r0, r2
 801cfa4:	f360 4517 	bfi	r5, r0, #16, #8
 801cfa8:	2307      	movs	r3, #7
 801cfaa:	0e2e      	lsrs	r6, r5, #24
 801cfac:	fb13 2101 	smlabb	r1, r3, r1, r2
 801cfb0:	230b      	movs	r3, #11
 801cfb2:	fb13 1306 	smlabb	r3, r3, r6, r1
 801cfb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cfba:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801cfbe:	605d      	str	r5, [r3, #4]
 801cfc0:	2601      	movs	r6, #1
 801cfc2:	4637      	mov	r7, r6
 801cfc4:	0e2b      	lsrs	r3, r5, #24
 801cfc6:	ebab 0b07 	sub.w	fp, fp, r7
 801cfca:	eba6 0607 	sub.w	r6, r6, r7
 801cfce:	f040 80d3 	bne.w	801d178 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801cfd2:	b18c      	cbz	r4, 801cff8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801cfd4:	4648      	mov	r0, r9
 801cfd6:	00a1      	lsls	r1, r4, #2
 801cfd8:	f7e4 ff80 	bl	8001edc <_ZN8touchgfx5paint9flushLineEPmi>
 801cfdc:	9b05      	ldr	r3, [sp, #20]
 801cfde:	4622      	mov	r2, r4
 801cfe0:	4649      	mov	r1, r9
 801cfe2:	4640      	mov	r0, r8
 801cfe4:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801cfe8:	f7e4 ffde 	bl	8001fa8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801cfec:	4b2b      	ldr	r3, [pc, #172]	@ (801d09c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801cfee:	4a2c      	ldr	r2, [pc, #176]	@ (801d0a0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801cff0:	4599      	cmp	r9, r3
 801cff2:	bf08      	it	eq
 801cff4:	4613      	moveq	r3, r2
 801cff6:	4699      	mov	r9, r3
 801cff8:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801cffc:	2400      	movs	r4, #0
 801cffe:	e0da      	b.n	801d1b6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801d000:	1ba6      	subs	r6, r4, r6
 801d002:	b2b4      	uxth	r4, r6
 801d004:	e70f      	b.n	801ce26 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801d006:	9b01      	ldr	r3, [sp, #4]
 801d008:	9a01      	ldr	r2, [sp, #4]
 801d00a:	42b3      	cmp	r3, r6
 801d00c:	bfa8      	it	ge
 801d00e:	4633      	movge	r3, r6
 801d010:	0e2c      	lsrs	r4, r5, #24
 801d012:	eba2 0b03 	sub.w	fp, r2, r3
 801d016:	eba6 0603 	sub.w	r6, r6, r3
 801d01a:	d00b      	beq.n	801d034 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801d01c:	f1a9 0104 	sub.w	r1, r9, #4
 801d020:	461a      	mov	r2, r3
 801d022:	2a00      	cmp	r2, #0
 801d024:	dc02      	bgt.n	801d02c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801d026:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d02a:	e7a0      	b.n	801cf6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801d02c:	f841 5f04 	str.w	r5, [r1, #4]!
 801d030:	3a01      	subs	r2, #1
 801d032:	e7f6      	b.n	801d022 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801d034:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801d038:	e799      	b.n	801cf6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801d03a:	4637      	mov	r7, r6
 801d03c:	f8dd b004 	ldr.w	fp, [sp, #4]
 801d040:	4626      	mov	r6, r4
 801d042:	e794      	b.n	801cf6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801d044:	2bff      	cmp	r3, #255	@ 0xff
 801d046:	d11d      	bne.n	801d084 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801d048:	7878      	ldrb	r0, [r7, #1]
 801d04a:	1d7b      	adds	r3, r7, #5
 801d04c:	78ba      	ldrb	r2, [r7, #2]
 801d04e:	b2c0      	uxtb	r0, r0
 801d050:	78fe      	ldrb	r6, [r7, #3]
 801d052:	b2d2      	uxtb	r2, r2
 801d054:	9303      	str	r3, [sp, #12]
 801d056:	f360 0507 	bfi	r5, r0, #0, #8
 801d05a:	793b      	ldrb	r3, [r7, #4]
 801d05c:	b2f6      	uxtb	r6, r6
 801d05e:	b2d9      	uxtb	r1, r3
 801d060:	f362 250f 	bfi	r5, r2, #8, #8
 801d064:	2303      	movs	r3, #3
 801d066:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d06a:	f366 4517 	bfi	r5, r6, #16, #8
 801d06e:	fb13 2206 	smlabb	r2, r3, r6, r2
 801d072:	2307      	movs	r3, #7
 801d074:	f361 651f 	bfi	r5, r1, #24, #8
 801d078:	fb13 2000 	smlabb	r0, r3, r0, r2
 801d07c:	230b      	movs	r3, #11
 801d07e:	fb13 0301 	smlabb	r3, r3, r1, r0
 801d082:	e798      	b.n	801cfb6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801d084:	119e      	asrs	r6, r3, #6
 801d086:	d10d      	bne.n	801d0a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801d088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d08c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801d090:	685d      	ldr	r5, [r3, #4]
 801d092:	e795      	b.n	801cfc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801d094:	20027dc0 	.word	0x20027dc0
 801d098:	20027dba 	.word	0x20027dba
 801d09c:	20000160 	.word	0x20000160
 801d0a0:	20000260 	.word	0x20000260
 801d0a4:	2e01      	cmp	r6, #1
 801d0a6:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801d0aa:	d12b      	bne.n	801d104 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801d0ac:	f003 0003 	and.w	r0, r3, #3
 801d0b0:	f003 020c 	and.w	r2, r3, #12
 801d0b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d0b8:	3802      	subs	r0, #2
 801d0ba:	3a08      	subs	r2, #8
 801d0bc:	1e9f      	subs	r7, r3, #2
 801d0be:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801d0c2:	b2c0      	uxtb	r0, r0
 801d0c4:	f360 0507 	bfi	r5, r0, #0, #8
 801d0c8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801d0cc:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d0d0:	f362 250f 	bfi	r5, r2, #8, #8
 801d0d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d0d8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d0dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d0e0:	2703      	movs	r7, #3
 801d0e2:	b2db      	uxtb	r3, r3
 801d0e4:	fb17 2203 	smlabb	r2, r7, r3, r2
 801d0e8:	2707      	movs	r7, #7
 801d0ea:	f363 4517 	bfi	r5, r3, #16, #8
 801d0ee:	230b      	movs	r3, #11
 801d0f0:	fb17 2000 	smlabb	r0, r7, r0, r2
 801d0f4:	fb13 0101 	smlabb	r1, r3, r1, r0
 801d0f8:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d0fc:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801d100:	604d      	str	r5, [r1, #4]
 801d102:	e75e      	b.n	801cfc2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801d104:	2e02      	cmp	r6, #2
 801d106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d10a:	d12f      	bne.n	801d16c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801d10c:	7878      	ldrb	r0, [r7, #1]
 801d10e:	1cba      	adds	r2, r7, #2
 801d110:	3b20      	subs	r3, #32
 801d112:	b2c0      	uxtb	r0, r0
 801d114:	9203      	str	r2, [sp, #12]
 801d116:	f000 020f 	and.w	r2, r0, #15
 801d11a:	1100      	asrs	r0, r0, #4
 801d11c:	3a08      	subs	r2, #8
 801d11e:	3808      	subs	r0, #8
 801d120:	441a      	add	r2, r3
 801d122:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801d126:	b2d2      	uxtb	r2, r2
 801d128:	f362 0507 	bfi	r5, r2, #0, #8
 801d12c:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801d130:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801d134:	4403      	add	r3, r0
 801d136:	b2f6      	uxtb	r6, r6
 801d138:	f366 250f 	bfi	r5, r6, #8, #8
 801d13c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801d140:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801d144:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801d148:	2003      	movs	r0, #3
 801d14a:	b2db      	uxtb	r3, r3
 801d14c:	fb10 6603 	smlabb	r6, r0, r3, r6
 801d150:	2007      	movs	r0, #7
 801d152:	f363 4517 	bfi	r5, r3, #16, #8
 801d156:	230b      	movs	r3, #11
 801d158:	fb10 6202 	smlabb	r2, r0, r2, r6
 801d15c:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d160:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d164:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801d168:	604d      	str	r5, [r1, #4]
 801d16a:	e729      	b.n	801cfc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801d16c:	1c5e      	adds	r6, r3, #1
 801d16e:	465f      	mov	r7, fp
 801d170:	45b3      	cmp	fp, r6
 801d172:	bfa8      	it	ge
 801d174:	4637      	movge	r7, r6
 801d176:	e725      	b.n	801cfc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801d178:	193b      	adds	r3, r7, r4
 801d17a:	2b40      	cmp	r3, #64	@ 0x40
 801d17c:	dd13      	ble.n	801d1a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801d17e:	4648      	mov	r0, r9
 801d180:	00a1      	lsls	r1, r4, #2
 801d182:	f7e4 feab 	bl	8001edc <_ZN8touchgfx5paint9flushLineEPmi>
 801d186:	4649      	mov	r1, r9
 801d188:	9b05      	ldr	r3, [sp, #20]
 801d18a:	4622      	mov	r2, r4
 801d18c:	4640      	mov	r0, r8
 801d18e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801d192:	f7e4 ff09 	bl	8001fa8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801d196:	4b2c      	ldr	r3, [pc, #176]	@ (801d248 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801d198:	2400      	movs	r4, #0
 801d19a:	4599      	cmp	r9, r3
 801d19c:	bf0c      	ite	eq
 801d19e:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801d254 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801d1a2:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801d248 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801d1a6:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801d1aa:	463b      	mov	r3, r7
 801d1ac:	3b01      	subs	r3, #1
 801d1ae:	f842 5b04 	str.w	r5, [r2], #4
 801d1b2:	d1fb      	bne.n	801d1ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801d1b4:	443c      	add	r4, r7
 801d1b6:	9f03      	ldr	r7, [sp, #12]
 801d1b8:	e6d9      	b.n	801cf6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801d1ba:	b15c      	cbz	r4, 801d1d4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801d1bc:	00a1      	lsls	r1, r4, #2
 801d1be:	4648      	mov	r0, r9
 801d1c0:	f7e4 fe8c 	bl	8001edc <_ZN8touchgfx5paint9flushLineEPmi>
 801d1c4:	4640      	mov	r0, r8
 801d1c6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801d1ca:	9b05      	ldr	r3, [sp, #20]
 801d1cc:	4622      	mov	r2, r4
 801d1ce:	4649      	mov	r1, r9
 801d1d0:	f7e4 feea 	bl	8001fa8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801d1d4:	4b1d      	ldr	r3, [pc, #116]	@ (801d24c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801d1d6:	9a01      	ldr	r2, [sp, #4]
 801d1d8:	881b      	ldrh	r3, [r3, #0]
 801d1da:	1a9b      	subs	r3, r3, r2
 801d1dc:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801d1e0:	9b04      	ldr	r3, [sp, #16]
 801d1e2:	3301      	adds	r3, #1
 801d1e4:	9304      	str	r3, [sp, #16]
 801d1e6:	9a04      	ldr	r2, [sp, #16]
 801d1e8:	9b00      	ldr	r3, [sp, #0]
 801d1ea:	4293      	cmp	r3, r2
 801d1ec:	d11d      	bne.n	801d22a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801d1ee:	9b02      	ldr	r3, [sp, #8]
 801d1f0:	2500      	movs	r5, #0
 801d1f2:	9a02      	ldr	r2, [sp, #8]
 801d1f4:	f103 0b01 	add.w	fp, r3, #1
 801d1f8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801d1fc:	9b06      	ldr	r3, [sp, #24]
 801d1fe:	4629      	mov	r1, r5
 801d200:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801d204:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801d208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d20c:	1ba4      	subs	r4, r4, r6
 801d20e:	9b07      	ldr	r3, [sp, #28]
 801d210:	ba3f      	rev	r7, r7
 801d212:	9808      	ldr	r0, [sp, #32]
 801d214:	b2a4      	uxth	r4, r4
 801d216:	441f      	add	r7, r3
 801d218:	f00b ff92 	bl	8029140 <memset>
 801d21c:	f8cd b008 	str.w	fp, [sp, #8]
 801d220:	9504      	str	r5, [sp, #16]
 801d222:	f7e4 fe51 	bl	8001ec8 <_ZN8touchgfx5paint8tearDownEv>
 801d226:	463e      	mov	r6, r7
 801d228:	e5cc      	b.n	801cdc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801d22a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801d22e:	9b01      	ldr	r3, [sp, #4]
 801d230:	1ae4      	subs	r4, r4, r3
 801d232:	1ba4      	subs	r4, r4, r6
 801d234:	b2a4      	uxth	r4, r4
 801d236:	e7f4      	b.n	801d222 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801d238:	4b05      	ldr	r3, [pc, #20]	@ (801d250 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801d23a:	6818      	ldr	r0, [r3, #0]
 801d23c:	6803      	ldr	r3, [r0, #0]
 801d23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d240:	4798      	blx	r3
 801d242:	b00f      	add	sp, #60	@ 0x3c
 801d244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d248:	20000160 	.word	0x20000160
 801d24c:	20027dba 	.word	0x20027dba
 801d250:	20027dc0 	.word	0x20027dc0
 801d254:	20000260 	.word	0x20000260

0801d258 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d25c:	b08f      	sub	sp, #60	@ 0x3c
 801d25e:	461c      	mov	r4, r3
 801d260:	9205      	str	r2, [sp, #20]
 801d262:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d266:	9100      	str	r1, [sp, #0]
 801d268:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d26a:	9201      	str	r2, [sp, #4]
 801d26c:	2a00      	cmp	r2, #0
 801d26e:	f000 8116 	beq.w	801d49e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801d272:	6820      	ldr	r0, [r4, #0]
 801d274:	aa0a      	add	r2, sp, #40	@ 0x28
 801d276:	6861      	ldr	r1, [r4, #4]
 801d278:	c203      	stmia	r2!, {r0, r1}
 801d27a:	6818      	ldr	r0, [r3, #0]
 801d27c:	aa0c      	add	r2, sp, #48	@ 0x30
 801d27e:	6859      	ldr	r1, [r3, #4]
 801d280:	c203      	stmia	r2!, {r0, r1}
 801d282:	a80a      	add	r0, sp, #40	@ 0x28
 801d284:	f7f9 f838 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d288:	4621      	mov	r1, r4
 801d28a:	a80c      	add	r0, sp, #48	@ 0x30
 801d28c:	f7f9 f878 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d290:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801d294:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801d298:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d29c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801d2a0:	bfdb      	ittet	le
 801d2a2:	b2b3      	uxthle	r3, r6
 801d2a4:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801d2a8:	2301      	movgt	r3, #1
 801d2aa:	fb92 f3f3 	sdivle	r3, r2, r3
 801d2ae:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d2b2:	441d      	add	r5, r3
 801d2b4:	fb92 f1f3 	sdiv	r1, r2, r3
 801d2b8:	fa1f fc81 	uxth.w	ip, r1
 801d2bc:	3d01      	subs	r5, #1
 801d2be:	fb0c 2413 	mls	r4, ip, r3, r2
 801d2c2:	4661      	mov	r1, ip
 801d2c4:	fb14 f406 	smulbb	r4, r4, r6
 801d2c8:	4404      	add	r4, r0
 801d2ca:	fb95 f5f3 	sdiv	r5, r5, r3
 801d2ce:	b2a4      	uxth	r4, r4
 801d2d0:	b131      	cbz	r1, 801d2e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801d2d2:	9b05      	ldr	r3, [sp, #20]
 801d2d4:	9900      	ldr	r1, [sp, #0]
 801d2d6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d2da:	ba1b      	rev	r3, r3
 801d2dc:	4419      	add	r1, r3
 801d2de:	9100      	str	r1, [sp, #0]
 801d2e0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d2e4:	b2ad      	uxth	r5, r5
 801d2e6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801d2ea:	4418      	add	r0, r3
 801d2ec:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801d2f0:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801d2f4:	00ad      	lsls	r5, r5, #2
 801d2f6:	441a      	add	r2, r3
 801d2f8:	4b6a      	ldr	r3, [pc, #424]	@ (801d4a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801d2fa:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801d2fe:	6818      	ldr	r0, [r3, #0]
 801d300:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801d304:	6803      	ldr	r3, [r0, #0]
 801d306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d308:	4798      	blx	r3
 801d30a:	4967      	ldr	r1, [pc, #412]	@ (801d4a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801d30c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d310:	2c00      	cmp	r4, #0
 801d312:	880b      	ldrh	r3, [r1, #0]
 801d314:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d318:	bf0c      	ite	eq
 801d31a:	46c6      	moveq	lr, r8
 801d31c:	f04f 0e00 	movne.w	lr, #0
 801d320:	9109      	str	r1, [sp, #36]	@ 0x24
 801d322:	fb03 c202 	mla	r2, r3, r2, ip
 801d326:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d32a:	4373      	muls	r3, r6
 801d32c:	fa1f fe8e 	uxth.w	lr, lr
 801d330:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d334:	9103      	str	r1, [sp, #12]
 801d336:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d33a:	9306      	str	r3, [sp, #24]
 801d33c:	1d2b      	adds	r3, r5, #4
 801d33e:	9307      	str	r3, [sp, #28]
 801d340:	9b01      	ldr	r3, [sp, #4]
 801d342:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801d346:	2300      	movs	r3, #0
 801d348:	b292      	uxth	r2, r2
 801d34a:	9302      	str	r3, [sp, #8]
 801d34c:	9204      	str	r2, [sp, #16]
 801d34e:	9a06      	ldr	r2, [sp, #24]
 801d350:	4282      	cmp	r2, r0
 801d352:	f240 809f 	bls.w	801d494 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801d356:	b963      	cbnz	r3, 801d372 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801d358:	9b00      	ldr	r3, [sp, #0]
 801d35a:	781a      	ldrb	r2, [r3, #0]
 801d35c:	0993      	lsrs	r3, r2, #6
 801d35e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d362:	9202      	str	r2, [sp, #8]
 801d364:	1e5a      	subs	r2, r3, #1
 801d366:	2a02      	cmp	r2, #2
 801d368:	d815      	bhi.n	801d396 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801d36a:	9a00      	ldr	r2, [sp, #0]
 801d36c:	b29b      	uxth	r3, r3
 801d36e:	3201      	adds	r2, #1
 801d370:	9200      	str	r2, [sp, #0]
 801d372:	b1b4      	cbz	r4, 801d3a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801d374:	429c      	cmp	r4, r3
 801d376:	bf91      	iteee	ls
 801d378:	1b1c      	subls	r4, r3, r4
 801d37a:	1ae4      	subhi	r4, r4, r3
 801d37c:	4671      	movhi	r1, lr
 801d37e:	f04f 0a00 	movhi.w	sl, #0
 801d382:	bf9b      	ittet	ls
 801d384:	fa1f fa84 	uxthls.w	sl, r4
 801d388:	2400      	movls	r4, #0
 801d38a:	b2a4      	uxthhi	r4, r4
 801d38c:	fa1f f188 	uxthls.w	r1, r8
 801d390:	4653      	mov	r3, sl
 801d392:	468e      	mov	lr, r1
 801d394:	e7db      	b.n	801d34e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801d396:	9a00      	ldr	r2, [sp, #0]
 801d398:	9b00      	ldr	r3, [sp, #0]
 801d39a:	3202      	adds	r2, #2
 801d39c:	785b      	ldrb	r3, [r3, #1]
 801d39e:	9200      	str	r2, [sp, #0]
 801d3a0:	e7e7      	b.n	801d372 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801d3a2:	2202      	movs	r2, #2
 801d3a4:	9907      	ldr	r1, [sp, #28]
 801d3a6:	4573      	cmp	r3, lr
 801d3a8:	4615      	mov	r5, r2
 801d3aa:	9a02      	ldr	r2, [sp, #8]
 801d3ac:	bf24      	itt	cs
 801d3ae:	eba3 0a0e 	subcs.w	sl, r3, lr
 801d3b2:	46f1      	movcs	r9, lr
 801d3b4:	fb15 1202 	smlabb	r2, r5, r2, r1
 801d3b8:	9905      	ldr	r1, [sp, #20]
 801d3ba:	bf34      	ite	cc
 801d3bc:	4699      	movcc	r9, r3
 801d3be:	fa1f fa8a 	uxthcs.w	sl, sl
 801d3c2:	f831 c002 	ldrh.w	ip, [r1, r2]
 801d3c6:	bf38      	it	cc
 801d3c8:	ebae 0103 	subcc.w	r1, lr, r3
 801d3cc:	9a01      	ldr	r2, [sp, #4]
 801d3ce:	bf2e      	itee	cs
 801d3d0:	4621      	movcs	r1, r4
 801d3d2:	b289      	uxthcc	r1, r1
 801d3d4:	46a2      	movcc	sl, r4
 801d3d6:	2aff      	cmp	r2, #255	@ 0xff
 801d3d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d3dc:	d105      	bne.n	801d3ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801d3de:	4481      	add	r9, r0
 801d3e0:	4581      	cmp	r9, r0
 801d3e2:	d045      	beq.n	801d470 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801d3e4:	f820 cb02 	strh.w	ip, [r0], #2
 801d3e8:	e7fa      	b.n	801d3e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801d3ea:	ea4f 222c 	mov.w	r2, ip, asr #8
 801d3ee:	9d03      	ldr	r5, [sp, #12]
 801d3f0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d3f4:	4481      	add	r9, r0
 801d3f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d3fa:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801d3fe:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801d402:	fa5f fc8c 	uxtb.w	ip, ip
 801d406:	436a      	muls	r2, r5
 801d408:	fb0b fb05 	mul.w	fp, fp, r5
 801d40c:	fb0c fc05 	mul.w	ip, ip, r5
 801d410:	9208      	str	r2, [sp, #32]
 801d412:	4581      	cmp	r9, r0
 801d414:	d02c      	beq.n	801d470 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801d416:	8802      	ldrh	r2, [r0, #0]
 801d418:	9d04      	ldr	r5, [sp, #16]
 801d41a:	1216      	asrs	r6, r2, #8
 801d41c:	9f04      	ldr	r7, [sp, #16]
 801d41e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d422:	fb16 f605 	smulbb	r6, r6, r5
 801d426:	9d08      	ldr	r5, [sp, #32]
 801d428:	442e      	add	r6, r5
 801d42a:	10d5      	asrs	r5, r2, #3
 801d42c:	00d2      	lsls	r2, r2, #3
 801d42e:	b2b6      	uxth	r6, r6
 801d430:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801d434:	b2d2      	uxtb	r2, r2
 801d436:	fb15 f507 	smulbb	r5, r5, r7
 801d43a:	fb12 f207 	smulbb	r2, r2, r7
 801d43e:	1c77      	adds	r7, r6, #1
 801d440:	445d      	add	r5, fp
 801d442:	4462      	add	r2, ip
 801d444:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801d448:	b2ad      	uxth	r5, r5
 801d44a:	b292      	uxth	r2, r2
 801d44c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801d450:	1c57      	adds	r7, r2, #1
 801d452:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801d456:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d45a:	4316      	orrs	r6, r2
 801d45c:	1c6a      	adds	r2, r5, #1
 801d45e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801d462:	096d      	lsrs	r5, r5, #5
 801d464:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d468:	432e      	orrs	r6, r5
 801d46a:	f820 6b02 	strh.w	r6, [r0], #2
 801d46e:	e7d0      	b.n	801d412 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801d470:	4573      	cmp	r3, lr
 801d472:	d38d      	bcc.n	801d390 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801d474:	fa1f f188 	uxth.w	r1, r8
 801d478:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801d47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d47e:	1a64      	subs	r4, r4, r1
 801d480:	881b      	ldrh	r3, [r3, #0]
 801d482:	b2a4      	uxth	r4, r4
 801d484:	eba3 0308 	sub.w	r3, r3, r8
 801d488:	2c00      	cmp	r4, #0
 801d48a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d48e:	bf18      	it	ne
 801d490:	2100      	movne	r1, #0
 801d492:	e77d      	b.n	801d390 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801d494:	4b03      	ldr	r3, [pc, #12]	@ (801d4a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801d496:	6818      	ldr	r0, [r3, #0]
 801d498:	6803      	ldr	r3, [r0, #0]
 801d49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d49c:	4798      	blx	r3
 801d49e:	b00f      	add	sp, #60	@ 0x3c
 801d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a4:	20027dc0 	.word	0x20027dc0
 801d4a8:	20027dba 	.word	0x20027dba

0801d4ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801d4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4b0:	b09f      	sub	sp, #124	@ 0x7c
 801d4b2:	461d      	mov	r5, r3
 801d4b4:	4604      	mov	r4, r0
 801d4b6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d4b8:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801d4bc:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801d4c0:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4c2:	2a00      	cmp	r2, #0
 801d4c4:	f000 81ed 	beq.w	801d8a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801d4c8:	6828      	ldr	r0, [r5, #0]
 801d4ca:	aa1a      	add	r2, sp, #104	@ 0x68
 801d4cc:	6869      	ldr	r1, [r5, #4]
 801d4ce:	c203      	stmia	r2!, {r0, r1}
 801d4d0:	6818      	ldr	r0, [r3, #0]
 801d4d2:	aa1c      	add	r2, sp, #112	@ 0x70
 801d4d4:	6859      	ldr	r1, [r3, #4]
 801d4d6:	c203      	stmia	r2!, {r0, r1}
 801d4d8:	a81a      	add	r0, sp, #104	@ 0x68
 801d4da:	f7f8 ff0d 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4de:	4629      	mov	r1, r5
 801d4e0:	a81c      	add	r0, sp, #112	@ 0x70
 801d4e2:	f7f8 ff4d 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4e6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801d4ea:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801d4ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d4f2:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801d4f6:	bfdb      	ittet	le
 801d4f8:	b29a      	uxthle	r2, r3
 801d4fa:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d4fe:	2201      	movgt	r2, #1
 801d500:	fb91 f2f2 	sdivle	r2, r1, r2
 801d504:	9202      	str	r2, [sp, #8]
 801d506:	9802      	ldr	r0, [sp, #8]
 801d508:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801d50c:	9902      	ldr	r1, [sp, #8]
 801d50e:	fb92 f0f0 	sdiv	r0, r2, r0
 801d512:	b280      	uxth	r0, r0
 801d514:	4488      	add	r8, r1
 801d516:	9010      	str	r0, [sp, #64]	@ 0x40
 801d518:	f108 38ff 	add.w	r8, r8, #4294967295
 801d51c:	9802      	ldr	r0, [sp, #8]
 801d51e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801d520:	fb05 2510 	mls	r5, r5, r0, r2
 801d524:	fb98 f8f1 	sdiv	r8, r8, r1
 801d528:	fb15 f503 	smulbb	r5, r5, r3
 801d52c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801d530:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801d534:	f108 0801 	add.w	r8, r8, #1
 801d538:	440d      	add	r5, r1
 801d53a:	4419      	add	r1, r3
 801d53c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801d540:	fa1f f888 	uxth.w	r8, r8
 801d544:	441a      	add	r2, r3
 801d546:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801d54a:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801d54e:	b2ad      	uxth	r5, r5
 801d550:	9304      	str	r3, [sp, #16]
 801d552:	4b94      	ldr	r3, [pc, #592]	@ (801d7a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801d554:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801d558:	6818      	ldr	r0, [r3, #0]
 801d55a:	6803      	ldr	r3, [r0, #0]
 801d55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d55e:	4798      	blx	r3
 801d560:	4b91      	ldr	r3, [pc, #580]	@ (801d7a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801d562:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801d566:	2d00      	cmp	r5, #0
 801d568:	881a      	ldrh	r2, [r3, #0]
 801d56a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801d56e:	fb02 f606 	mul.w	r6, r2, r6
 801d572:	fb02 7101 	mla	r1, r2, r1, r7
 801d576:	9318      	str	r3, [sp, #96]	@ 0x60
 801d578:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d57c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801d580:	f04f 0100 	mov.w	r1, #0
 801d584:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801d588:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d58a:	4b88      	ldr	r3, [pc, #544]	@ (801d7ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801d58c:	920a      	str	r2, [sp, #40]	@ 0x28
 801d58e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d590:	eba3 0304 	sub.w	r3, r3, r4
 801d594:	910d      	str	r1, [sp, #52]	@ 0x34
 801d596:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801d59a:	9319      	str	r3, [sp, #100]	@ 0x64
 801d59c:	f108 0204 	add.w	r2, r8, #4
 801d5a0:	9211      	str	r2, [sp, #68]	@ 0x44
 801d5a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d5a4:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801d5a8:	9215      	str	r2, [sp, #84]	@ 0x54
 801d5aa:	9a04      	ldr	r2, [sp, #16]
 801d5ac:	bf18      	it	ne
 801d5ae:	2200      	movne	r2, #0
 801d5b0:	b292      	uxth	r2, r2
 801d5b2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d5b6:	fa11 f383 	uxtah	r3, r1, r3
 801d5ba:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801d5bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d5c0:	3304      	adds	r3, #4
 801d5c2:	9306      	str	r3, [sp, #24]
 801d5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d5c6:	4283      	cmp	r3, r0
 801d5c8:	f240 8166 	bls.w	801d898 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801d5cc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801d5d0:	f04f 0a01 	mov.w	sl, #1
 801d5d4:	9902      	ldr	r1, [sp, #8]
 801d5d6:	9e06      	ldr	r6, [sp, #24]
 801d5d8:	46d3      	mov	fp, sl
 801d5da:	4657      	mov	r7, sl
 801d5dc:	7836      	ldrb	r6, [r6, #0]
 801d5de:	fbb5 f3f3 	udiv	r3, r5, r3
 801d5e2:	1acb      	subs	r3, r1, r3
 801d5e4:	9612      	str	r6, [sp, #72]	@ 0x48
 801d5e6:	3601      	adds	r6, #1
 801d5e8:	b29b      	uxth	r3, r3
 801d5ea:	9605      	str	r6, [sp, #20]
 801d5ec:	9316      	str	r3, [sp, #88]	@ 0x58
 801d5ee:	9b06      	ldr	r3, [sp, #24]
 801d5f0:	7859      	ldrb	r1, [r3, #1]
 801d5f2:	789b      	ldrb	r3, [r3, #2]
 801d5f4:	021b      	lsls	r3, r3, #8
 801d5f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801d5fa:	9906      	ldr	r1, [sp, #24]
 801d5fc:	78c9      	ldrb	r1, [r1, #3]
 801d5fe:	430b      	orrs	r3, r1
 801d600:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d602:	4419      	add	r1, r3
 801d604:	1c4e      	adds	r6, r1, #1
 801d606:	7849      	ldrb	r1, [r1, #1]
 801d608:	9603      	str	r6, [sp, #12]
 801d60a:	0209      	lsls	r1, r1, #8
 801d60c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d60e:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801d612:	5cf3      	ldrb	r3, [r6, r3]
 801d614:	4319      	orrs	r1, r3
 801d616:	b28b      	uxth	r3, r1
 801d618:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801d61c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d61e:	2300      	movs	r3, #0
 801d620:	9307      	str	r3, [sp, #28]
 801d622:	469c      	mov	ip, r3
 801d624:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801d628:	930e      	str	r3, [sp, #56]	@ 0x38
 801d62a:	2d00      	cmp	r5, #0
 801d62c:	d07e      	beq.n	801d72c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801d62e:	42af      	cmp	r7, r5
 801d630:	d26e      	bcs.n	801d710 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801d632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d634:	1bed      	subs	r5, r5, r7
 801d636:	9201      	str	r2, [sp, #4]
 801d638:	4283      	cmp	r3, r0
 801d63a:	b2ad      	uxth	r5, r5
 801d63c:	d802      	bhi.n	801d644 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801d63e:	e073      	b.n	801d728 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801d640:	2b00      	cmp	r3, #0
 801d642:	d15f      	bne.n	801d704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801d644:	9b03      	ldr	r3, [sp, #12]
 801d646:	f1cb 0207 	rsb	r2, fp, #7
 801d64a:	785b      	ldrb	r3, [r3, #1]
 801d64c:	4093      	lsls	r3, r2
 801d64e:	005b      	lsls	r3, r3, #1
 801d650:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801d654:	9b03      	ldr	r3, [sp, #12]
 801d656:	781b      	ldrb	r3, [r3, #0]
 801d658:	fa43 f30b 	asr.w	r3, r3, fp
 801d65c:	b2db      	uxtb	r3, r3
 801d65e:	4313      	orrs	r3, r2
 801d660:	f10b 0201 	add.w	r2, fp, #1
 801d664:	fa5f fb82 	uxtb.w	fp, r2
 801d668:	9a03      	ldr	r2, [sp, #12]
 801d66a:	b29f      	uxth	r7, r3
 801d66c:	f1bb 0f08 	cmp.w	fp, #8
 801d670:	bf13      	iteet	ne
 801d672:	3201      	addne	r2, #1
 801d674:	3202      	addeq	r2, #2
 801d676:	f04f 0b00 	moveq.w	fp, #0
 801d67a:	9203      	strne	r2, [sp, #12]
 801d67c:	bf08      	it	eq
 801d67e:	9203      	streq	r2, [sp, #12]
 801d680:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d682:	42ba      	cmp	r2, r7
 801d684:	d309      	bcc.n	801d69a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801d686:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801d68a:	2301      	movs	r3, #1
 801d68c:	9a05      	ldr	r2, [sp, #20]
 801d68e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801d692:	d30e      	bcc.n	801d6b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801d694:	469a      	mov	sl, r3
 801d696:	2600      	movs	r6, #0
 801d698:	e035      	b.n	801d706 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801d69a:	9b05      	ldr	r3, [sp, #20]
 801d69c:	429f      	cmp	r7, r3
 801d69e:	d318      	bcc.n	801d6d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801d6a0:	eb04 030a 	add.w	r3, r4, sl
 801d6a4:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801d6a8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801d6ac:	f10a 0301 	add.w	r3, sl, #1
 801d6b0:	b29b      	uxth	r3, r3
 801d6b2:	9a05      	ldr	r2, [sp, #20]
 801d6b4:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801d6b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d6bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d6be:	7116      	strb	r6, [r2, #4]
 801d6c0:	f10a 0601 	add.w	r6, sl, #1
 801d6c4:	80d1      	strh	r1, [r2, #6]
 801d6c6:	7156      	strb	r6, [r2, #5]
 801d6c8:	9a05      	ldr	r2, [sp, #20]
 801d6ca:	3201      	adds	r2, #1
 801d6cc:	b292      	uxth	r2, r2
 801d6ce:	9205      	str	r2, [sp, #20]
 801d6d0:	e7e0      	b.n	801d694 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801d6d2:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801d6d6:	463a      	mov	r2, r7
 801d6d8:	795b      	ldrb	r3, [r3, #5]
 801d6da:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801d6de:	4426      	add	r6, r4
 801d6e0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801d6e2:	eb01 0c06 	add.w	ip, r1, r6
 801d6e6:	f1bc 0f00 	cmp.w	ip, #0
 801d6ea:	dd07      	ble.n	801d6fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801d6ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d6f0:	f892 c004 	ldrb.w	ip, [r2, #4]
 801d6f4:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801d6f8:	88d2      	ldrh	r2, [r2, #6]
 801d6fa:	e7f1      	b.n	801d6e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801d6fc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801d700:	b29b      	uxth	r3, r3
 801d702:	e7c3      	b.n	801d68c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801d704:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d706:	970c      	str	r7, [sp, #48]	@ 0x30
 801d708:	46b4      	mov	ip, r6
 801d70a:	9a01      	ldr	r2, [sp, #4]
 801d70c:	461f      	mov	r7, r3
 801d70e:	e78c      	b.n	801d62a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801d710:	1b7b      	subs	r3, r7, r5
 801d712:	eb0c 0605 	add.w	r6, ip, r5
 801d716:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d71a:	b29b      	uxth	r3, r3
 801d71c:	b2b6      	uxth	r6, r6
 801d71e:	9201      	str	r2, [sp, #4]
 801d720:	2500      	movs	r5, #0
 801d722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d724:	4282      	cmp	r2, r0
 801d726:	d88b      	bhi.n	801d640 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801d728:	9a01      	ldr	r2, [sp, #4]
 801d72a:	e74b      	b.n	801d5c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801d72c:	4297      	cmp	r7, r2
 801d72e:	d332      	bcc.n	801d796 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801d730:	1abb      	subs	r3, r7, r2
 801d732:	9208      	str	r2, [sp, #32]
 801d734:	9501      	str	r5, [sp, #4]
 801d736:	b29b      	uxth	r3, r3
 801d738:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d73a:	29ff      	cmp	r1, #255	@ 0xff
 801d73c:	9908      	ldr	r1, [sp, #32]
 801d73e:	eb0c 0601 	add.w	r6, ip, r1
 801d742:	d135      	bne.n	801d7b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801d744:	f1a0 0e02 	sub.w	lr, r0, #2
 801d748:	b2b6      	uxth	r6, r6
 801d74a:	45b4      	cmp	ip, r6
 801d74c:	f040 808c 	bne.w	801d868 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801d750:	9908      	ldr	r1, [sp, #32]
 801d752:	4297      	cmp	r7, r2
 801d754:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d758:	d3e2      	bcc.n	801d720 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801d75a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d75c:	9904      	ldr	r1, [sp, #16]
 801d75e:	8812      	ldrh	r2, [r2, #0]
 801d760:	1a52      	subs	r2, r2, r1
 801d762:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d764:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d768:	9a07      	ldr	r2, [sp, #28]
 801d76a:	3201      	adds	r2, #1
 801d76c:	428a      	cmp	r2, r1
 801d76e:	9207      	str	r2, [sp, #28]
 801d770:	f040 8087 	bne.w	801d882 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801d774:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801d778:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801d77c:	9b04      	ldr	r3, [sp, #16]
 801d77e:	1bed      	subs	r5, r5, r7
 801d780:	b2ad      	uxth	r5, r5
 801d782:	2d00      	cmp	r5, #0
 801d784:	bf08      	it	eq
 801d786:	461a      	moveq	r2, r3
 801d788:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d78a:	bf18      	it	ne
 801d78c:	2200      	movne	r2, #0
 801d78e:	3301      	adds	r3, #1
 801d790:	b292      	uxth	r2, r2
 801d792:	930d      	str	r3, [sp, #52]	@ 0x34
 801d794:	e70d      	b.n	801d5b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801d796:	1bd1      	subs	r1, r2, r7
 801d798:	9708      	str	r7, [sp, #32]
 801d79a:	b28b      	uxth	r3, r1
 801d79c:	9301      	str	r3, [sp, #4]
 801d79e:	462b      	mov	r3, r5
 801d7a0:	e7ca      	b.n	801d738 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801d7a2:	bf00      	nop
 801d7a4:	20027dc0 	.word	0x20027dc0
 801d7a8:	20027dba 	.word	0x20027dba
 801d7ac:	fffff7fb 	.word	0xfffff7fb
 801d7b0:	b2b6      	uxth	r6, r6
 801d7b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d7b4:	45b4      	cmp	ip, r6
 801d7b6:	d0cb      	beq.n	801d750 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801d7b8:	f10c 0101 	add.w	r1, ip, #1
 801d7bc:	44a4      	add	ip, r4
 801d7be:	9117      	str	r1, [sp, #92]	@ 0x5c
 801d7c0:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801d7c4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d7c6:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801d7ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d7cc:	ea4f 2825 	mov.w	r8, r5, asr #8
 801d7d0:	f8b1 c000 	ldrh.w	ip, [r1]
 801d7d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d7d6:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801d7da:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801d7de:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801d7e2:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801d7e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d7ea:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d7ee:	fb1e fe01 	smulbb	lr, lr, r1
 801d7f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d7f4:	fa5f fc8c 	uxtb.w	ip, ip
 801d7f8:	fb08 e801 	mla	r8, r8, r1, lr
 801d7fc:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801d800:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d802:	00ed      	lsls	r5, r5, #3
 801d804:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801d808:	fa1f f888 	uxth.w	r8, r8
 801d80c:	fb19 f901 	smulbb	r9, r9, r1
 801d810:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d812:	b2ed      	uxtb	r5, r5
 801d814:	fb0e 9e01 	mla	lr, lr, r1, r9
 801d818:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d81a:	fb1c fc01 	smulbb	ip, ip, r1
 801d81e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d820:	fa1f fe8e 	uxth.w	lr, lr
 801d824:	fb05 c501 	mla	r5, r5, r1, ip
 801d828:	f108 0c01 	add.w	ip, r8, #1
 801d82c:	f10e 0901 	add.w	r9, lr, #1
 801d830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d832:	b2ad      	uxth	r5, r5
 801d834:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801d838:	f105 0c01 	add.w	ip, r5, #1
 801d83c:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801d840:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801d844:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801d848:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d84c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d850:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d854:	ea4c 0808 	orr.w	r8, ip, r8
 801d858:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801d85c:	ea48 0809 	orr.w	r8, r8, r9
 801d860:	f821 8b02 	strh.w	r8, [r1], #2
 801d864:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d866:	e7a5      	b.n	801d7b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801d868:	f10c 0801 	add.w	r8, ip, #1
 801d86c:	44a4      	add	ip, r4
 801d86e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d870:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801d874:	fa1f fc88 	uxth.w	ip, r8
 801d878:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801d87c:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801d880:	e763      	b.n	801d74a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801d882:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d886:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801d88a:	1aad      	subs	r5, r5, r2
 801d88c:	b2ad      	uxth	r5, r5
 801d88e:	2d00      	cmp	r5, #0
 801d890:	bf18      	it	ne
 801d892:	2200      	movne	r2, #0
 801d894:	9201      	str	r2, [sp, #4]
 801d896:	e744      	b.n	801d722 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801d898:	4b03      	ldr	r3, [pc, #12]	@ (801d8a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801d89a:	6818      	ldr	r0, [r3, #0]
 801d89c:	6803      	ldr	r3, [r0, #0]
 801d89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8a0:	4798      	blx	r3
 801d8a2:	b01f      	add	sp, #124	@ 0x7c
 801d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8a8:	20027dc0 	.word	0x20027dc0

0801d8ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 801d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8b0:	b093      	sub	sp, #76	@ 0x4c
 801d8b2:	4616      	mov	r6, r2
 801d8b4:	460d      	mov	r5, r1
 801d8b6:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 801d8ba:	9003      	str	r0, [sp, #12]
 801d8bc:	9201      	str	r2, [sp, #4]
 801d8be:	2a00      	cmp	r2, #0
 801d8c0:	f000 8303 	beq.w	801deca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x61e>
 801d8c4:	6830      	ldr	r0, [r6, #0]
 801d8c6:	ac0e      	add	r4, sp, #56	@ 0x38
 801d8c8:	6871      	ldr	r1, [r6, #4]
 801d8ca:	c403      	stmia	r4!, {r0, r1}
 801d8cc:	6818      	ldr	r0, [r3, #0]
 801d8ce:	ac10      	add	r4, sp, #64	@ 0x40
 801d8d0:	6859      	ldr	r1, [r3, #4]
 801d8d2:	c403      	stmia	r4!, {r0, r1}
 801d8d4:	a80e      	add	r0, sp, #56	@ 0x38
 801d8d6:	f7f8 fd0f 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8da:	4631      	mov	r1, r6
 801d8dc:	a810      	add	r0, sp, #64	@ 0x40
 801d8de:	f7f8 fd4f 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8e2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d8e6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d8ea:	bfdb      	ittet	le
 801d8ec:	b293      	uxthle	r3, r2
 801d8ee:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d8f2:	2301      	movgt	r3, #1
 801d8f4:	fb91 f3f3 	sdivle	r3, r1, r3
 801d8f8:	9304      	str	r3, [sp, #16]
 801d8fa:	f105 0308 	add.w	r3, r5, #8
 801d8fe:	9904      	ldr	r1, [sp, #16]
 801d900:	9308      	str	r3, [sp, #32]
 801d902:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801d906:	440b      	add	r3, r1
 801d908:	3b01      	subs	r3, #1
 801d90a:	fb93 f3f1 	sdiv	r3, r3, r1
 801d90e:	3b01      	subs	r3, #1
 801d910:	9908      	ldr	r1, [sp, #32]
 801d912:	b29b      	uxth	r3, r3
 801d914:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d918:	9904      	ldr	r1, [sp, #16]
 801d91a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d91c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801d920:	fb93 f0f1 	sdiv	r0, r3, r1
 801d924:	b284      	uxth	r4, r0
 801d926:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801d92a:	9405      	str	r4, [sp, #20]
 801d92c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801d930:	fb05 3914 	mls	r9, r5, r4, r3
 801d934:	fb19 f902 	smulbb	r9, r9, r2
 801d938:	4489      	add	r9, r1
 801d93a:	fa1f f989 	uxth.w	r9, r9
 801d93e:	2d00      	cmp	r5, #0
 801d940:	d05d      	beq.n	801d9fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 801d942:	1e6a      	subs	r2, r5, #1
 801d944:	9808      	ldr	r0, [sp, #32]
 801d946:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 801d94a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d94c:	fa9a fa8a 	rev.w	sl, sl
 801d950:	4492      	add	sl, r2
 801d952:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801d956:	f04f 0600 	mov.w	r6, #0
 801d95a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801d95e:	4411      	add	r1, r2
 801d960:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d964:	4413      	add	r3, r2
 801d966:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801d96a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801d96e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801d972:	9302      	str	r3, [sp, #8]
 801d974:	4bca      	ldr	r3, [pc, #808]	@ (801dca0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 801d976:	6818      	ldr	r0, [r3, #0]
 801d978:	6803      	ldr	r3, [r0, #0]
 801d97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d97c:	4798      	blx	r3
 801d97e:	4bc9      	ldr	r3, [pc, #804]	@ (801dca4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 801d980:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801d984:	2100      	movs	r1, #0
 801d986:	881b      	ldrh	r3, [r3, #0]
 801d988:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801d98c:	fb03 2404 	mla	r4, r3, r4, r2
 801d990:	2280      	movs	r2, #128	@ 0x80
 801d992:	436b      	muls	r3, r5
 801d994:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d998:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d99c:	930d      	str	r3, [sp, #52]	@ 0x34
 801d99e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801d9a2:	fb99 f3f3 	sdiv	r3, r9, r3
 801d9a6:	9306      	str	r3, [sp, #24]
 801d9a8:	9b01      	ldr	r3, [sp, #4]
 801d9aa:	43db      	mvns	r3, r3
 801d9ac:	b2db      	uxtb	r3, r3
 801d9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801d9b0:	9b03      	ldr	r3, [sp, #12]
 801d9b2:	3304      	adds	r3, #4
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d9b8:	f00b fbc2 	bl	8029140 <memset>
 801d9bc:	4bba      	ldr	r3, [pc, #744]	@ (801dca8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 801d9be:	9300      	str	r3, [sp, #0]
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	9307      	str	r3, [sp, #28]
 801d9c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9c6:	42a3      	cmp	r3, r4
 801d9c8:	f240 827a 	bls.w	801dec0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x614>
 801d9cc:	f04f 0e07 	mov.w	lr, #7
 801d9d0:	f1b9 0f00 	cmp.w	r9, #0
 801d9d4:	f000 8159 	beq.w	801dc8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 801d9d8:	f89a 5000 	ldrb.w	r5, [sl]
 801d9dc:	f10a 0701 	add.w	r7, sl, #1
 801d9e0:	b2ed      	uxtb	r5, r5
 801d9e2:	11aa      	asrs	r2, r5, #6
 801d9e4:	d10e      	bne.n	801da04 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 801d9e6:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801d9ea:	9b03      	ldr	r3, [sp, #12]
 801d9ec:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801d9f0:	88ae      	ldrh	r6, [r5, #4]
 801d9f2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d9f6:	fa1f f989 	uxth.w	r9, r9
 801d9fa:	46ba      	mov	sl, r7
 801d9fc:	e7e8      	b.n	801d9d0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 801d9fe:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801da02:	e7a6      	b.n	801d952 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 801da04:	2a01      	cmp	r2, #1
 801da06:	d129      	bne.n	801da5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 801da08:	f3c6 0304 	ubfx	r3, r6, #0, #5
 801da0c:	f005 0203 	and.w	r2, r5, #3
 801da10:	2103      	movs	r1, #3
 801da12:	3b02      	subs	r3, #2
 801da14:	4413      	add	r3, r2
 801da16:	f3c5 0281 	ubfx	r2, r5, #2, #2
 801da1a:	f3c5 1501 	ubfx	r5, r5, #4, #2
 801da1e:	f003 031f 	and.w	r3, r3, #31
 801da22:	3a02      	subs	r2, #2
 801da24:	3d02      	subs	r5, #2
 801da26:	f363 0604 	bfi	r6, r3, #0, #5
 801da2a:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 801da2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801da32:	f362 164a 	bfi	r6, r2, #5, #6
 801da36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801da3a:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 801da3e:	f005 051f 	and.w	r5, r5, #31
 801da42:	fb11 2205 	smlabb	r2, r1, r5, r2
 801da46:	f365 26cf 	bfi	r6, r5, #11, #5
 801da4a:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801da4e:	9a03      	ldr	r2, [sp, #12]
 801da50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801da54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801da58:	809e      	strh	r6, [r3, #4]
 801da5a:	e7ca      	b.n	801d9f2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 801da5c:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801da60:	2a02      	cmp	r2, #2
 801da62:	b2ab      	uxth	r3, r5
 801da64:	d136      	bne.n	801dad4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 801da66:	2101      	movs	r1, #1
 801da68:	fb12 1205 	smlabb	r2, r2, r5, r1
 801da6c:	4492      	add	sl, r2
 801da6e:	463a      	mov	r2, r7
 801da70:	4552      	cmp	r2, sl
 801da72:	d01c      	beq.n	801daae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 801da74:	4694      	mov	ip, r2
 801da76:	f04f 0b03 	mov.w	fp, #3
 801da7a:	f81c 1b02 	ldrb.w	r1, [ip], #2
 801da7e:	7852      	ldrb	r2, [r2, #1]
 801da80:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801da84:	f3c1 1045 	ubfx	r0, r1, #5, #6
 801da88:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 801da8c:	f001 021f 	and.w	r2, r1, #31
 801da90:	460e      	mov	r6, r1
 801da92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801da96:	fb1b 0008 	smlabb	r0, fp, r8, r0
 801da9a:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801da9e:	9a03      	ldr	r2, [sp, #12]
 801daa0:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801daa4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801daa8:	4662      	mov	r2, ip
 801daaa:	8081      	strh	r1, [r0, #4]
 801daac:	e7e0      	b.n	801da70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 801daae:	4599      	cmp	r9, r3
 801dab0:	d20b      	bcs.n	801daca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 801dab2:	eba5 0509 	sub.w	r5, r5, r9
 801dab6:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 801daba:	2d00      	cmp	r5, #0
 801dabc:	f300 8208 	bgt.w	801ded0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x624>
 801dac0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801dac4:	2301      	movs	r3, #1
 801dac6:	9307      	str	r3, [sp, #28]
 801dac8:	e00c      	b.n	801dae4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801daca:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801dace:	eba9 0903 	sub.w	r9, r9, r3
 801dad2:	e790      	b.n	801d9f6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 801dad4:	4599      	cmp	r9, r3
 801dad6:	d2fa      	bcs.n	801dace <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 801dad8:	eba5 0509 	sub.w	r5, r5, r9
 801dadc:	2d00      	cmp	r5, #0
 801dade:	dc1d      	bgt.n	801db1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 801dae0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801dae4:	f04f 0b00 	mov.w	fp, #0
 801dae8:	f1b8 0f00 	cmp.w	r8, #0
 801daec:	f340 81a0 	ble.w	801de30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x584>
 801daf0:	783b      	ldrb	r3, [r7, #0]
 801daf2:	f107 0a01 	add.w	sl, r7, #1
 801daf6:	b2db      	uxtb	r3, r3
 801daf8:	119a      	asrs	r2, r3, #6
 801dafa:	f040 80d7 	bne.w	801dcac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 801dafe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db02:	9a03      	ldr	r2, [sp, #12]
 801db04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801db08:	889e      	ldrh	r6, [r3, #4]
 801db0a:	9b01      	ldr	r3, [sp, #4]
 801db0c:	2bff      	cmp	r3, #255	@ 0xff
 801db0e:	f040 81e8 	bne.w	801dee2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x636>
 801db12:	8026      	strh	r6, [r4, #0]
 801db14:	f108 38ff 	add.w	r8, r8, #4294967295
 801db18:	3402      	adds	r4, #2
 801db1a:	e0be      	b.n	801dc9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801db1c:	9b02      	ldr	r3, [sp, #8]
 801db1e:	9a02      	ldr	r2, [sp, #8]
 801db20:	42ab      	cmp	r3, r5
 801db22:	bfa8      	it	ge
 801db24:	462b      	movge	r3, r5
 801db26:	eba2 0803 	sub.w	r8, r2, r3
 801db2a:	9a07      	ldr	r2, [sp, #28]
 801db2c:	1aed      	subs	r5, r5, r3
 801db2e:	2a00      	cmp	r2, #0
 801db30:	d05a      	beq.n	801dbe8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 801db32:	9a01      	ldr	r2, [sp, #4]
 801db34:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801db38:	2aff      	cmp	r2, #255	@ 0xff
 801db3a:	d049      	beq.n	801dbd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801db3c:	f8bd e004 	ldrh.w	lr, [sp, #4]
 801db40:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 801db44:	42a3      	cmp	r3, r4
 801db46:	f240 80a5 	bls.w	801dc94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801db4a:	46bc      	mov	ip, r7
 801db4c:	8820      	ldrh	r0, [r4, #0]
 801db4e:	f81c 2b02 	ldrb.w	r2, [ip], #2
 801db52:	ea4f 2a20 	mov.w	sl, r0, asr #8
 801db56:	7879      	ldrb	r1, [r7, #1]
 801db58:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801db5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801db60:	fb1a fa09 	smulbb	sl, sl, r9
 801db64:	b212      	sxth	r2, r2
 801db66:	b291      	uxth	r1, r2
 801db68:	00d2      	lsls	r2, r2, #3
 801db6a:	120f      	asrs	r7, r1, #8
 801db6c:	10c9      	asrs	r1, r1, #3
 801db6e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801db72:	b2d2      	uxtb	r2, r2
 801db74:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801db78:	fb07 a70e 	mla	r7, r7, lr, sl
 801db7c:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 801db80:	00c0      	lsls	r0, r0, #3
 801db82:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801db86:	b2bf      	uxth	r7, r7
 801db88:	b2c0      	uxtb	r0, r0
 801db8a:	fb1a fa09 	smulbb	sl, sl, r9
 801db8e:	fb10 f009 	smulbb	r0, r0, r9
 801db92:	fb01 a10e 	mla	r1, r1, lr, sl
 801db96:	fb02 020e 	mla	r2, r2, lr, r0
 801db9a:	1c78      	adds	r0, r7, #1
 801db9c:	b289      	uxth	r1, r1
 801db9e:	b292      	uxth	r2, r2
 801dba0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801dba4:	f101 0a01 	add.w	sl, r1, #1
 801dba8:	1c50      	adds	r0, r2, #1
 801dbaa:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 801dbae:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801dbb2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801dbb6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dbba:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801dbbe:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dbc2:	4307      	orrs	r7, r0
 801dbc4:	ea47 070a 	orr.w	r7, r7, sl
 801dbc8:	f824 7b02 	strh.w	r7, [r4], #2
 801dbcc:	4667      	mov	r7, ip
 801dbce:	e7b9      	b.n	801db44 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 801dbd0:	42a3      	cmp	r3, r4
 801dbd2:	d95f      	bls.n	801dc94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801dbd4:	463a      	mov	r2, r7
 801dbd6:	f812 1b02 	ldrb.w	r1, [r2], #2
 801dbda:	7878      	ldrb	r0, [r7, #1]
 801dbdc:	4617      	mov	r7, r2
 801dbde:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801dbe2:	f824 1b02 	strh.w	r1, [r4], #2
 801dbe6:	e7f3      	b.n	801dbd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801dbe8:	9901      	ldr	r1, [sp, #4]
 801dbea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbee:	b2b2      	uxth	r2, r6
 801dbf0:	29ff      	cmp	r1, #255	@ 0xff
 801dbf2:	d044      	beq.n	801dc7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801dbf4:	ea4f 2922 	mov.w	r9, r2, asr #8
 801dbf8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801dbfc:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801dc00:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 801dc04:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 801dc08:	4608      	mov	r0, r1
 801dc0a:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801dc0e:	fb09 f901 	mul.w	r9, r9, r1
 801dc12:	fb0e fe01 	mul.w	lr, lr, r1
 801dc16:	00d1      	lsls	r1, r2, #3
 801dc18:	b2c9      	uxtb	r1, r1
 801dc1a:	4341      	muls	r1, r0
 801dc1c:	429c      	cmp	r4, r3
 801dc1e:	f4bf af61 	bcs.w	801dae4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801dc22:	8822      	ldrh	r2, [r4, #0]
 801dc24:	1210      	asrs	r0, r2, #8
 801dc26:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801dc2a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801dc2e:	00d2      	lsls	r2, r2, #3
 801dc30:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801dc34:	fb00 900a 	mla	r0, r0, sl, r9
 801dc38:	b2d2      	uxtb	r2, r2
 801dc3a:	fb0c ec0a 	mla	ip, ip, sl, lr
 801dc3e:	b280      	uxth	r0, r0
 801dc40:	fb02 120a 	mla	r2, r2, sl, r1
 801dc44:	fa1f fc8c 	uxth.w	ip, ip
 801dc48:	b292      	uxth	r2, r2
 801dc4a:	f100 0b01 	add.w	fp, r0, #1
 801dc4e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801dc52:	1c50      	adds	r0, r2, #1
 801dc54:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801dc58:	f10c 0201 	add.w	r2, ip, #1
 801dc5c:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 801dc60:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801dc64:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801dc68:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801dc6c:	ea40 0b0b 	orr.w	fp, r0, fp
 801dc70:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801dc74:	ea4b 0b0c 	orr.w	fp, fp, ip
 801dc78:	f824 bb02 	strh.w	fp, [r4], #2
 801dc7c:	e7ce      	b.n	801dc1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 801dc7e:	429c      	cmp	r4, r3
 801dc80:	f4bf af30 	bcs.w	801dae4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801dc84:	f824 2b02 	strh.w	r2, [r4], #2
 801dc88:	e7f9      	b.n	801dc7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801dc8a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801dc8e:	4657      	mov	r7, sl
 801dc90:	464d      	mov	r5, r9
 801dc92:	e727      	b.n	801dae4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801dc94:	2300      	movs	r3, #0
 801dc96:	e716      	b.n	801dac6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 801dc98:	44bb      	add	fp, r7
 801dc9a:	4657      	mov	r7, sl
 801dc9c:	e724      	b.n	801dae8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 801dc9e:	bf00      	nop
 801dca0:	20027dc0 	.word	0x20027dc0
 801dca4:	20027dba 	.word	0x20027dba
 801dca8:	20000160 	.word	0x20000160
 801dcac:	2a01      	cmp	r2, #1
 801dcae:	d12a      	bne.n	801dd06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 801dcb0:	f3c6 0104 	ubfx	r1, r6, #0, #5
 801dcb4:	f003 0203 	and.w	r2, r3, #3
 801dcb8:	f3c3 0081 	ubfx	r0, r3, #2, #2
 801dcbc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801dcc0:	3902      	subs	r1, #2
 801dcc2:	3802      	subs	r0, #2
 801dcc4:	3b02      	subs	r3, #2
 801dcc6:	4411      	add	r1, r2
 801dcc8:	f001 011f 	and.w	r1, r1, #31
 801dccc:	f361 0604 	bfi	r6, r1, #0, #5
 801dcd0:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 801dcd4:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801dcd8:	f360 164a 	bfi	r6, r0, #5, #6
 801dcdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801dce0:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 801dce4:	f002 031f 	and.w	r3, r2, #31
 801dce8:	2203      	movs	r2, #3
 801dcea:	f363 26cf 	bfi	r6, r3, #11, #5
 801dcee:	fb12 0303 	smlabb	r3, r2, r3, r0
 801dcf2:	2207      	movs	r2, #7
 801dcf4:	fb12 3301 	smlabb	r3, r2, r1, r3
 801dcf8:	9a03      	ldr	r2, [sp, #12]
 801dcfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dcfe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dd02:	809e      	strh	r6, [r3, #4]
 801dd04:	e701      	b.n	801db0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 801dd06:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 801dd0a:	4647      	mov	r7, r8
 801dd0c:	45a8      	cmp	r8, r5
 801dd0e:	bfa8      	it	ge
 801dd10:	462f      	movge	r7, r5
 801dd12:	2a02      	cmp	r2, #2
 801dd14:	d154      	bne.n	801ddc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 801dd16:	9b01      	ldr	r3, [sp, #4]
 801dd18:	2bff      	cmp	r3, #255	@ 0xff
 801dd1a:	d01a      	beq.n	801dd52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801dd1c:	eb0b 0307 	add.w	r3, fp, r7
 801dd20:	2b40      	cmp	r3, #64	@ 0x40
 801dd22:	dd16      	ble.n	801dd52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801dd24:	ea4f 094b 	mov.w	r9, fp, lsl #1
 801dd28:	9800      	ldr	r0, [sp, #0]
 801dd2a:	4649      	mov	r1, r9
 801dd2c:	f7e4 f8d6 	bl	8001edc <_ZN8touchgfx5paint9flushLineEPmi>
 801dd30:	465a      	mov	r2, fp
 801dd32:	9b01      	ldr	r3, [sp, #4]
 801dd34:	4620      	mov	r0, r4
 801dd36:	9900      	ldr	r1, [sp, #0]
 801dd38:	444c      	add	r4, r9
 801dd3a:	f7e4 f90f 	bl	8001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801dd3e:	9b00      	ldr	r3, [sp, #0]
 801dd40:	f04f 0b00 	mov.w	fp, #0
 801dd44:	461a      	mov	r2, r3
 801dd46:	4b6a      	ldr	r3, [pc, #424]	@ (801def0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801dd48:	429a      	cmp	r2, r3
 801dd4a:	bf0c      	ite	eq
 801dd4c:	4b69      	ldreq	r3, [pc, #420]	@ (801def4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801dd4e:	4b68      	ldrne	r3, [pc, #416]	@ (801def0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801dd50:	9300      	str	r3, [sp, #0]
 801dd52:	4652      	mov	r2, sl
 801dd54:	2100      	movs	r1, #0
 801dd56:	42a9      	cmp	r1, r5
 801dd58:	da2c      	bge.n	801ddb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 801dd5a:	4694      	mov	ip, r2
 801dd5c:	f04f 0903 	mov.w	r9, #3
 801dd60:	42b9      	cmp	r1, r7
 801dd62:	f81c 3b02 	ldrb.w	r3, [ip], #2
 801dd66:	7852      	ldrb	r2, [r2, #1]
 801dd68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dd6c:	f3c3 1045 	ubfx	r0, r3, #5, #6
 801dd70:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 801dd74:	f003 021f 	and.w	r2, r3, #31
 801dd78:	461e      	mov	r6, r3
 801dd7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801dd7e:	fb19 000e 	smlabb	r0, r9, lr, r0
 801dd82:	f04f 0e07 	mov.w	lr, #7
 801dd86:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801dd8a:	9a03      	ldr	r2, [sp, #12]
 801dd8c:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801dd90:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801dd94:	8083      	strh	r3, [r0, #4]
 801dd96:	da0a      	bge.n	801ddae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 801dd98:	9a01      	ldr	r2, [sp, #4]
 801dd9a:	2aff      	cmp	r2, #255	@ 0xff
 801dd9c:	bf13      	iteet	ne
 801dd9e:	9a00      	ldrne	r2, [sp, #0]
 801dda0:	8023      	strheq	r3, [r4, #0]
 801dda2:	3402      	addeq	r4, #2
 801dda4:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 801dda8:	bf18      	it	ne
 801ddaa:	f10b 0b01 	addne.w	fp, fp, #1
 801ddae:	3101      	adds	r1, #1
 801ddb0:	4662      	mov	r2, ip
 801ddb2:	e7d0      	b.n	801dd56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 801ddb4:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801ddb8:	eba8 0807 	sub.w	r8, r8, r7
 801ddbc:	1bed      	subs	r5, r5, r7
 801ddbe:	e76c      	b.n	801dc9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801ddc0:	9b01      	ldr	r3, [sp, #4]
 801ddc2:	eba8 0807 	sub.w	r8, r8, r7
 801ddc6:	1bed      	subs	r5, r5, r7
 801ddc8:	fa1f f986 	uxth.w	r9, r6
 801ddcc:	2bff      	cmp	r3, #255	@ 0xff
 801ddce:	d027      	beq.n	801de20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x574>
 801ddd0:	eb0b 0307 	add.w	r3, fp, r7
 801ddd4:	2b40      	cmp	r3, #64	@ 0x40
 801ddd6:	dd18      	ble.n	801de0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x55e>
 801ddd8:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801dddc:	9800      	ldr	r0, [sp, #0]
 801ddde:	4619      	mov	r1, r3
 801dde0:	930c      	str	r3, [sp, #48]	@ 0x30
 801dde2:	f7e4 f87b 	bl	8001edc <_ZN8touchgfx5paint9flushLineEPmi>
 801dde6:	465a      	mov	r2, fp
 801dde8:	9b01      	ldr	r3, [sp, #4]
 801ddea:	4620      	mov	r0, r4
 801ddec:	9900      	ldr	r1, [sp, #0]
 801ddee:	f04f 0b00 	mov.w	fp, #0
 801ddf2:	f7e4 f8b3 	bl	8001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801ddf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddf8:	441c      	add	r4, r3
 801ddfa:	9b00      	ldr	r3, [sp, #0]
 801ddfc:	461a      	mov	r2, r3
 801ddfe:	4b3c      	ldr	r3, [pc, #240]	@ (801def0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801de00:	429a      	cmp	r2, r3
 801de02:	bf0c      	ite	eq
 801de04:	4b3b      	ldreq	r3, [pc, #236]	@ (801def4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801de06:	4b3a      	ldrne	r3, [pc, #232]	@ (801def0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801de08:	9300      	str	r3, [sp, #0]
 801de0a:	9b00      	ldr	r3, [sp, #0]
 801de0c:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 801de10:	463b      	mov	r3, r7
 801de12:	2b00      	cmp	r3, #0
 801de14:	f43f af40 	beq.w	801dc98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 801de18:	f822 9b02 	strh.w	r9, [r2], #2
 801de1c:	3b01      	subs	r3, #1
 801de1e:	e7f8      	b.n	801de12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x566>
 801de20:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801de24:	42a7      	cmp	r7, r4
 801de26:	f67f af38 	bls.w	801dc9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801de2a:	f824 9b02 	strh.w	r9, [r4], #2
 801de2e:	e7f9      	b.n	801de24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x578>
 801de30:	f1bb 0f00 	cmp.w	fp, #0
 801de34:	d00c      	beq.n	801de50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a4>
 801de36:	ea4f 084b 	mov.w	r8, fp, lsl #1
 801de3a:	9800      	ldr	r0, [sp, #0]
 801de3c:	4641      	mov	r1, r8
 801de3e:	f7e4 f84d 	bl	8001edc <_ZN8touchgfx5paint9flushLineEPmi>
 801de42:	4620      	mov	r0, r4
 801de44:	4444      	add	r4, r8
 801de46:	9b01      	ldr	r3, [sp, #4]
 801de48:	465a      	mov	r2, fp
 801de4a:	9900      	ldr	r1, [sp, #0]
 801de4c:	f7e4 f886 	bl	8001f5c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801de50:	4b29      	ldr	r3, [pc, #164]	@ (801def8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 801de52:	9a02      	ldr	r2, [sp, #8]
 801de54:	881b      	ldrh	r3, [r3, #0]
 801de56:	1a9b      	subs	r3, r3, r2
 801de58:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801de5c:	9b06      	ldr	r3, [sp, #24]
 801de5e:	3301      	adds	r3, #1
 801de60:	9306      	str	r3, [sp, #24]
 801de62:	9a06      	ldr	r2, [sp, #24]
 801de64:	9b04      	ldr	r3, [sp, #16]
 801de66:	4293      	cmp	r3, r2
 801de68:	d120      	bne.n	801deac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x600>
 801de6a:	9b05      	ldr	r3, [sp, #20]
 801de6c:	2100      	movs	r1, #0
 801de6e:	9a05      	ldr	r2, [sp, #20]
 801de70:	f04f 0600 	mov.w	r6, #0
 801de74:	f103 0801 	add.w	r8, r3, #1
 801de78:	9b08      	ldr	r3, [sp, #32]
 801de7a:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 801de7e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801de82:	2280      	movs	r2, #128	@ 0x80
 801de84:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801de88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de8a:	ba3f      	rev	r7, r7
 801de8c:	eba9 0905 	sub.w	r9, r9, r5
 801de90:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801de92:	441f      	add	r7, r3
 801de94:	f00b f954 	bl	8029140 <memset>
 801de98:	fa1f f989 	uxth.w	r9, r9
 801de9c:	2300      	movs	r3, #0
 801de9e:	f8cd 8014 	str.w	r8, [sp, #20]
 801dea2:	9306      	str	r3, [sp, #24]
 801dea4:	f7e4 f810 	bl	8001ec8 <_ZN8touchgfx5paint8tearDownEv>
 801dea8:	46ba      	mov	sl, r7
 801deaa:	e58b      	b.n	801d9c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 801deac:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 801deb0:	9b02      	ldr	r3, [sp, #8]
 801deb2:	eba9 0903 	sub.w	r9, r9, r3
 801deb6:	eba9 0505 	sub.w	r5, r9, r5
 801deba:	fa1f f985 	uxth.w	r9, r5
 801debe:	e7f1      	b.n	801dea4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5f8>
 801dec0:	4b0e      	ldr	r3, [pc, #56]	@ (801defc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 801dec2:	6818      	ldr	r0, [r3, #0]
 801dec4:	6803      	ldr	r3, [r0, #0]
 801dec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dec8:	4798      	blx	r3
 801deca:	b013      	add	sp, #76	@ 0x4c
 801decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ded0:	9b02      	ldr	r3, [sp, #8]
 801ded2:	9a02      	ldr	r2, [sp, #8]
 801ded4:	42ab      	cmp	r3, r5
 801ded6:	bfa8      	it	ge
 801ded8:	462b      	movge	r3, r5
 801deda:	eba2 0803 	sub.w	r8, r2, r3
 801dede:	1aed      	subs	r5, r5, r3
 801dee0:	e627      	b.n	801db32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 801dee2:	f108 38ff 	add.w	r8, r8, #4294967295
 801dee6:	fa1f f986 	uxth.w	r9, r6
 801deea:	2500      	movs	r5, #0
 801deec:	2701      	movs	r7, #1
 801deee:	e76f      	b.n	801ddd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x524>
 801def0:	20000160 	.word	0x20000160
 801def4:	20000260 	.word	0x20000260
 801def8:	20027dba 	.word	0x20027dba
 801defc:	20027dc0 	.word	0x20027dc0

0801df00 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df04:	b08f      	sub	sp, #60	@ 0x3c
 801df06:	461c      	mov	r4, r3
 801df08:	460f      	mov	r7, r1
 801df0a:	9203      	str	r2, [sp, #12]
 801df0c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801df10:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df12:	9202      	str	r2, [sp, #8]
 801df14:	2a00      	cmp	r2, #0
 801df16:	f000 8128 	beq.w	801e16a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801df1a:	6820      	ldr	r0, [r4, #0]
 801df1c:	aa0a      	add	r2, sp, #40	@ 0x28
 801df1e:	6861      	ldr	r1, [r4, #4]
 801df20:	c203      	stmia	r2!, {r0, r1}
 801df22:	6818      	ldr	r0, [r3, #0]
 801df24:	aa0c      	add	r2, sp, #48	@ 0x30
 801df26:	6859      	ldr	r1, [r3, #4]
 801df28:	c203      	stmia	r2!, {r0, r1}
 801df2a:	a80a      	add	r0, sp, #40	@ 0x28
 801df2c:	f7f8 f9e4 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df30:	4621      	mov	r1, r4
 801df32:	a80c      	add	r0, sp, #48	@ 0x30
 801df34:	f7f8 fa24 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df38:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801df3c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801df40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801df44:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801df48:	bfdb      	ittet	le
 801df4a:	b2b3      	uxthle	r3, r6
 801df4c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801df50:	2301      	movgt	r3, #1
 801df52:	fb92 f3f3 	sdivle	r3, r2, r3
 801df56:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801df5a:	441d      	add	r5, r3
 801df5c:	fb92 f1f3 	sdiv	r1, r2, r3
 801df60:	fa1f fc81 	uxth.w	ip, r1
 801df64:	3d01      	subs	r5, #1
 801df66:	fb0c 2413 	mls	r4, ip, r3, r2
 801df6a:	4661      	mov	r1, ip
 801df6c:	fb14 f406 	smulbb	r4, r4, r6
 801df70:	4404      	add	r4, r0
 801df72:	fb95 f5f3 	sdiv	r5, r5, r3
 801df76:	b2a4      	uxth	r4, r4
 801df78:	b121      	cbz	r1, 801df84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801df7a:	9b03      	ldr	r3, [sp, #12]
 801df7c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801df80:	ba1b      	rev	r3, r3
 801df82:	441f      	add	r7, r3
 801df84:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801df88:	b2ad      	uxth	r5, r5
 801df8a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801df8e:	4418      	add	r0, r3
 801df90:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801df94:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801df98:	00ad      	lsls	r5, r5, #2
 801df9a:	441a      	add	r2, r3
 801df9c:	4b74      	ldr	r3, [pc, #464]	@ (801e170 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801df9e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801dfa2:	6818      	ldr	r0, [r3, #0]
 801dfa4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801dfa8:	6803      	ldr	r3, [r0, #0]
 801dfaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfac:	4798      	blx	r3
 801dfae:	4a71      	ldr	r2, [pc, #452]	@ (801e174 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801dfb0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801dfb4:	2c00      	cmp	r4, #0
 801dfb6:	8813      	ldrh	r3, [r2, #0]
 801dfb8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801dfbc:	bf0c      	ite	eq
 801dfbe:	46c8      	moveq	r8, r9
 801dfc0:	f04f 0800 	movne.w	r8, #0
 801dfc4:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfc6:	fb03 c101 	mla	r1, r3, r1, ip
 801dfca:	4373      	muls	r3, r6
 801dfcc:	fa1f f888 	uxth.w	r8, r8
 801dfd0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801dfd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dfd8:	9304      	str	r3, [sp, #16]
 801dfda:	1d2b      	adds	r3, r5, #4
 801dfdc:	9305      	str	r3, [sp, #20]
 801dfde:	2300      	movs	r3, #0
 801dfe0:	9301      	str	r3, [sp, #4]
 801dfe2:	9a04      	ldr	r2, [sp, #16]
 801dfe4:	4282      	cmp	r2, r0
 801dfe6:	f240 80bb 	bls.w	801e160 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801dfea:	b95b      	cbnz	r3, 801e004 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801dfec:	783a      	ldrb	r2, [r7, #0]
 801dfee:	0993      	lsrs	r3, r2, #6
 801dff0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801dff4:	9201      	str	r2, [sp, #4]
 801dff6:	1e5a      	subs	r2, r3, #1
 801dff8:	2a02      	cmp	r2, #2
 801dffa:	bf8d      	iteet	hi
 801dffc:	787b      	ldrbhi	r3, [r7, #1]
 801dffe:	3701      	addls	r7, #1
 801e000:	b29b      	uxthls	r3, r3
 801e002:	3702      	addhi	r7, #2
 801e004:	b184      	cbz	r4, 801e028 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801e006:	429c      	cmp	r4, r3
 801e008:	bf91      	iteee	ls
 801e00a:	1b1c      	subls	r4, r3, r4
 801e00c:	1ae4      	subhi	r4, r4, r3
 801e00e:	46c4      	movhi	ip, r8
 801e010:	f04f 0a00 	movhi.w	sl, #0
 801e014:	bf9b      	ittet	ls
 801e016:	fa1f fa84 	uxthls.w	sl, r4
 801e01a:	2400      	movls	r4, #0
 801e01c:	b2a4      	uxthhi	r4, r4
 801e01e:	fa1f fc89 	uxthls.w	ip, r9
 801e022:	4653      	mov	r3, sl
 801e024:	46e0      	mov	r8, ip
 801e026:	e7dc      	b.n	801dfe2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801e028:	2204      	movs	r2, #4
 801e02a:	9905      	ldr	r1, [sp, #20]
 801e02c:	4543      	cmp	r3, r8
 801e02e:	4615      	mov	r5, r2
 801e030:	9a01      	ldr	r2, [sp, #4]
 801e032:	bf24      	itt	cs
 801e034:	eba3 0a08 	subcs.w	sl, r3, r8
 801e038:	46c6      	movcs	lr, r8
 801e03a:	fb15 1202 	smlabb	r2, r5, r2, r1
 801e03e:	9903      	ldr	r1, [sp, #12]
 801e040:	bf3c      	itt	cc
 801e042:	eba8 0c03 	subcc.w	ip, r8, r3
 801e046:	469e      	movcc	lr, r3
 801e048:	588a      	ldr	r2, [r1, r2]
 801e04a:	bf26      	itte	cs
 801e04c:	fa1f fa8a 	uxthcs.w	sl, sl
 801e050:	46a4      	movcs	ip, r4
 801e052:	fa1f fc8c 	uxthcc.w	ip, ip
 801e056:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801e05a:	bf38      	it	cc
 801e05c:	46a2      	movcc	sl, r4
 801e05e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801e062:	2900      	cmp	r1, #0
 801e064:	d066      	beq.n	801e134 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801e066:	29ff      	cmp	r1, #255	@ 0xff
 801e068:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801e06c:	d114      	bne.n	801e098 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801e06e:	9d02      	ldr	r5, [sp, #8]
 801e070:	2dff      	cmp	r5, #255	@ 0xff
 801e072:	d111      	bne.n	801e098 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801e074:	0951      	lsrs	r1, r2, #5
 801e076:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801e07a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e07e:	4486      	add	lr, r0
 801e080:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e084:	f026 0607 	bic.w	r6, r6, #7
 801e088:	430e      	orrs	r6, r1
 801e08a:	4316      	orrs	r6, r2
 801e08c:	b2b6      	uxth	r6, r6
 801e08e:	4586      	cmp	lr, r0
 801e090:	d051      	beq.n	801e136 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801e092:	f820 6b02 	strh.w	r6, [r0], #2
 801e096:	e7fa      	b.n	801e08e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801e098:	9d02      	ldr	r5, [sp, #8]
 801e09a:	b2f6      	uxtb	r6, r6
 801e09c:	4486      	add	lr, r0
 801e09e:	4369      	muls	r1, r5
 801e0a0:	1c4d      	adds	r5, r1, #1
 801e0a2:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801e0a6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801e0aa:	b2d2      	uxtb	r2, r2
 801e0ac:	122d      	asrs	r5, r5, #8
 801e0ae:	ea6f 0b05 	mvn.w	fp, r5
 801e0b2:	b2ad      	uxth	r5, r5
 801e0b4:	fb11 f105 	smulbb	r1, r1, r5
 801e0b8:	fa5f fb8b 	uxtb.w	fp, fp
 801e0bc:	fb16 f605 	smulbb	r6, r6, r5
 801e0c0:	fb12 f205 	smulbb	r2, r2, r5
 801e0c4:	b289      	uxth	r1, r1
 801e0c6:	b2b6      	uxth	r6, r6
 801e0c8:	b292      	uxth	r2, r2
 801e0ca:	9106      	str	r1, [sp, #24]
 801e0cc:	9607      	str	r6, [sp, #28]
 801e0ce:	9208      	str	r2, [sp, #32]
 801e0d0:	4586      	cmp	lr, r0
 801e0d2:	d030      	beq.n	801e136 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801e0d4:	8802      	ldrh	r2, [r0, #0]
 801e0d6:	9906      	ldr	r1, [sp, #24]
 801e0d8:	1216      	asrs	r6, r2, #8
 801e0da:	10d5      	asrs	r5, r2, #3
 801e0dc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e0e0:	00d2      	lsls	r2, r2, #3
 801e0e2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801e0e6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e0ea:	b2d2      	uxtb	r2, r2
 801e0ec:	fb06 160b 	mla	r6, r6, fp, r1
 801e0f0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801e0f4:	9907      	ldr	r1, [sp, #28]
 801e0f6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e0fa:	b2b6      	uxth	r6, r6
 801e0fc:	fb05 150b 	mla	r5, r5, fp, r1
 801e100:	9908      	ldr	r1, [sp, #32]
 801e102:	fb02 120b 	mla	r2, r2, fp, r1
 801e106:	1c71      	adds	r1, r6, #1
 801e108:	b2ad      	uxth	r5, r5
 801e10a:	b292      	uxth	r2, r2
 801e10c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801e110:	1c51      	adds	r1, r2, #1
 801e112:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801e116:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e11a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e11e:	4316      	orrs	r6, r2
 801e120:	1c6a      	adds	r2, r5, #1
 801e122:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801e126:	096d      	lsrs	r5, r5, #5
 801e128:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e12c:	432e      	orrs	r6, r5
 801e12e:	f820 6b02 	strh.w	r6, [r0], #2
 801e132:	e7cd      	b.n	801e0d0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801e134:	4470      	add	r0, lr
 801e136:	4543      	cmp	r3, r8
 801e138:	f4ff af73 	bcc.w	801e022 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801e13c:	fa1f fc89 	uxth.w	ip, r9
 801e140:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801e144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e146:	eba4 040c 	sub.w	r4, r4, ip
 801e14a:	881b      	ldrh	r3, [r3, #0]
 801e14c:	b2a4      	uxth	r4, r4
 801e14e:	eba3 0309 	sub.w	r3, r3, r9
 801e152:	2c00      	cmp	r4, #0
 801e154:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e158:	bf18      	it	ne
 801e15a:	f04f 0c00 	movne.w	ip, #0
 801e15e:	e760      	b.n	801e022 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801e160:	4b03      	ldr	r3, [pc, #12]	@ (801e170 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e162:	6818      	ldr	r0, [r3, #0]
 801e164:	6803      	ldr	r3, [r0, #0]
 801e166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e168:	4798      	blx	r3
 801e16a:	b00f      	add	sp, #60	@ 0x3c
 801e16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e170:	20027dc0 	.word	0x20027dc0
 801e174:	20027dba 	.word	0x20027dba

0801e178 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e17c:	b093      	sub	sp, #76	@ 0x4c
 801e17e:	461c      	mov	r4, r3
 801e180:	9205      	str	r2, [sp, #20]
 801e182:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801e186:	9101      	str	r1, [sp, #4]
 801e188:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e18a:	9202      	str	r2, [sp, #8]
 801e18c:	2a00      	cmp	r2, #0
 801e18e:	f000 812e 	beq.w	801e3ee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801e192:	6820      	ldr	r0, [r4, #0]
 801e194:	aa0e      	add	r2, sp, #56	@ 0x38
 801e196:	6861      	ldr	r1, [r4, #4]
 801e198:	c203      	stmia	r2!, {r0, r1}
 801e19a:	6818      	ldr	r0, [r3, #0]
 801e19c:	aa10      	add	r2, sp, #64	@ 0x40
 801e19e:	6859      	ldr	r1, [r3, #4]
 801e1a0:	c203      	stmia	r2!, {r0, r1}
 801e1a2:	a80e      	add	r0, sp, #56	@ 0x38
 801e1a4:	f7f8 f8a8 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1a8:	4621      	mov	r1, r4
 801e1aa:	a810      	add	r0, sp, #64	@ 0x40
 801e1ac:	f7f8 f8e8 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e1b0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801e1b4:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801e1b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e1bc:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801e1c0:	bfdb      	ittet	le
 801e1c2:	b2b3      	uxthle	r3, r6
 801e1c4:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801e1c8:	2301      	movgt	r3, #1
 801e1ca:	fb92 f3f3 	sdivle	r3, r2, r3
 801e1ce:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801e1d2:	441d      	add	r5, r3
 801e1d4:	fb92 f1f3 	sdiv	r1, r2, r3
 801e1d8:	fa1f fc81 	uxth.w	ip, r1
 801e1dc:	3d01      	subs	r5, #1
 801e1de:	fb0c 2413 	mls	r4, ip, r3, r2
 801e1e2:	4661      	mov	r1, ip
 801e1e4:	fb14 f406 	smulbb	r4, r4, r6
 801e1e8:	4404      	add	r4, r0
 801e1ea:	fb95 f5f3 	sdiv	r5, r5, r3
 801e1ee:	b2a4      	uxth	r4, r4
 801e1f0:	b131      	cbz	r1, 801e200 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801e1f2:	9b05      	ldr	r3, [sp, #20]
 801e1f4:	9901      	ldr	r1, [sp, #4]
 801e1f6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e1fa:	ba1b      	rev	r3, r3
 801e1fc:	4419      	add	r1, r3
 801e1fe:	9101      	str	r1, [sp, #4]
 801e200:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801e204:	b2ad      	uxth	r5, r5
 801e206:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801e20a:	4418      	add	r0, r3
 801e20c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801e210:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801e214:	00ad      	lsls	r5, r5, #2
 801e216:	441a      	add	r2, r3
 801e218:	4b76      	ldr	r3, [pc, #472]	@ (801e3f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801e21a:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801e21e:	6818      	ldr	r0, [r3, #0]
 801e220:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801e224:	6803      	ldr	r3, [r0, #0]
 801e226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e228:	4798      	blx	r3
 801e22a:	4973      	ldr	r1, [pc, #460]	@ (801e3f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801e22c:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801e230:	2c00      	cmp	r4, #0
 801e232:	880b      	ldrh	r3, [r1, #0]
 801e234:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801e238:	910d      	str	r1, [sp, #52]	@ 0x34
 801e23a:	fb03 c202 	mla	r2, r3, r2, ip
 801e23e:	bf08      	it	eq
 801e240:	46dc      	moveq	ip, fp
 801e242:	fb03 f306 	mul.w	r3, r3, r6
 801e246:	bf18      	it	ne
 801e248:	f04f 0c00 	movne.w	ip, #0
 801e24c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e250:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e254:	fa1f fc8c 	uxth.w	ip, ip
 801e258:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e25c:	9106      	str	r1, [sp, #24]
 801e25e:	9308      	str	r3, [sp, #32]
 801e260:	1d2b      	adds	r3, r5, #4
 801e262:	9309      	str	r3, [sp, #36]	@ 0x24
 801e264:	9b02      	ldr	r3, [sp, #8]
 801e266:	43da      	mvns	r2, r3
 801e268:	2300      	movs	r3, #0
 801e26a:	b2d2      	uxtb	r2, r2
 801e26c:	9303      	str	r3, [sp, #12]
 801e26e:	9207      	str	r2, [sp, #28]
 801e270:	9a08      	ldr	r2, [sp, #32]
 801e272:	4282      	cmp	r2, r0
 801e274:	f240 80b6 	bls.w	801e3e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801e278:	b963      	cbnz	r3, 801e294 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801e27a:	9b01      	ldr	r3, [sp, #4]
 801e27c:	781a      	ldrb	r2, [r3, #0]
 801e27e:	0993      	lsrs	r3, r2, #6
 801e280:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e284:	9203      	str	r2, [sp, #12]
 801e286:	1e5a      	subs	r2, r3, #1
 801e288:	2a02      	cmp	r2, #2
 801e28a:	d815      	bhi.n	801e2b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801e28c:	9a01      	ldr	r2, [sp, #4]
 801e28e:	b29b      	uxth	r3, r3
 801e290:	3201      	adds	r2, #1
 801e292:	9201      	str	r2, [sp, #4]
 801e294:	b1b4      	cbz	r4, 801e2c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801e296:	429c      	cmp	r4, r3
 801e298:	bf91      	iteee	ls
 801e29a:	1b1c      	subls	r4, r3, r4
 801e29c:	1ae4      	subhi	r4, r4, r3
 801e29e:	4666      	movhi	r6, ip
 801e2a0:	f04f 0800 	movhi.w	r8, #0
 801e2a4:	bf9b      	ittet	ls
 801e2a6:	fa1f f884 	uxthls.w	r8, r4
 801e2aa:	2400      	movls	r4, #0
 801e2ac:	b2a4      	uxthhi	r4, r4
 801e2ae:	fa1f f68b 	uxthls.w	r6, fp
 801e2b2:	4643      	mov	r3, r8
 801e2b4:	46b4      	mov	ip, r6
 801e2b6:	e7db      	b.n	801e270 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801e2b8:	9a01      	ldr	r2, [sp, #4]
 801e2ba:	9b01      	ldr	r3, [sp, #4]
 801e2bc:	3202      	adds	r2, #2
 801e2be:	785b      	ldrb	r3, [r3, #1]
 801e2c0:	9201      	str	r2, [sp, #4]
 801e2c2:	e7e7      	b.n	801e294 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801e2c4:	2203      	movs	r2, #3
 801e2c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e2c8:	4563      	cmp	r3, ip
 801e2ca:	4615      	mov	r5, r2
 801e2cc:	9a03      	ldr	r2, [sp, #12]
 801e2ce:	bf2c      	ite	cs
 801e2d0:	eba3 080c 	subcs.w	r8, r3, ip
 801e2d4:	ebac 0603 	subcc.w	r6, ip, r3
 801e2d8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801e2dc:	9905      	ldr	r1, [sp, #20]
 801e2de:	bf24      	itt	cs
 801e2e0:	fa1f f888 	uxthcs.w	r8, r8
 801e2e4:	46e1      	movcs	r9, ip
 801e2e6:	eb01 0502 	add.w	r5, r1, r2
 801e2ea:	9902      	ldr	r1, [sp, #8]
 801e2ec:	bf2f      	iteee	cs
 801e2ee:	4626      	movcs	r6, r4
 801e2f0:	b2b6      	uxthcc	r6, r6
 801e2f2:	4699      	movcc	r9, r3
 801e2f4:	46a0      	movcc	r8, r4
 801e2f6:	29ff      	cmp	r1, #255	@ 0xff
 801e2f8:	d04a      	beq.n	801e390 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801e2fa:	9f06      	ldr	r7, [sp, #24]
 801e2fc:	46ca      	mov	sl, r9
 801e2fe:	78a9      	ldrb	r1, [r5, #2]
 801e300:	9004      	str	r0, [sp, #16]
 801e302:	4379      	muls	r1, r7
 801e304:	910a      	str	r1, [sp, #40]	@ 0x28
 801e306:	7869      	ldrb	r1, [r5, #1]
 801e308:	4379      	muls	r1, r7
 801e30a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e30c:	9905      	ldr	r1, [sp, #20]
 801e30e:	5c8a      	ldrb	r2, [r1, r2]
 801e310:	437a      	muls	r2, r7
 801e312:	920c      	str	r2, [sp, #48]	@ 0x30
 801e314:	f1ba 0f00 	cmp.w	sl, #0
 801e318:	d03d      	beq.n	801e396 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801e31a:	9a04      	ldr	r2, [sp, #16]
 801e31c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e320:	9f07      	ldr	r7, [sp, #28]
 801e322:	8812      	ldrh	r2, [r2, #0]
 801e324:	fa1f fa8a 	uxth.w	sl, sl
 801e328:	46be      	mov	lr, r7
 801e32a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e32c:	1215      	asrs	r5, r2, #8
 801e32e:	10d1      	asrs	r1, r2, #3
 801e330:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e334:	00d2      	lsls	r2, r2, #3
 801e336:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e33a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e33e:	b2d2      	uxtb	r2, r2
 801e340:	fb05 750e 	mla	r5, r5, lr, r7
 801e344:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e348:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e34a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e34e:	b2ad      	uxth	r5, r5
 801e350:	fb01 710e 	mla	r1, r1, lr, r7
 801e354:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e356:	fb02 720e 	mla	r2, r2, lr, r7
 801e35a:	f105 0e01 	add.w	lr, r5, #1
 801e35e:	b289      	uxth	r1, r1
 801e360:	b292      	uxth	r2, r2
 801e362:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801e366:	f102 0e01 	add.w	lr, r2, #1
 801e36a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801e36e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801e372:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e376:	4315      	orrs	r5, r2
 801e378:	1c4a      	adds	r2, r1, #1
 801e37a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e37e:	9a04      	ldr	r2, [sp, #16]
 801e380:	0949      	lsrs	r1, r1, #5
 801e382:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e386:	430d      	orrs	r5, r1
 801e388:	f822 5b02 	strh.w	r5, [r2], #2
 801e38c:	9204      	str	r2, [sp, #16]
 801e38e:	e7c1      	b.n	801e314 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801e390:	4649      	mov	r1, r9
 801e392:	4686      	mov	lr, r0
 801e394:	b999      	cbnz	r1, 801e3be <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801e396:	4563      	cmp	r3, ip
 801e398:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801e39c:	d389      	bcc.n	801e2b2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801e39e:	fa1f f68b 	uxth.w	r6, fp
 801e3a2:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801e3a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3a8:	1ba4      	subs	r4, r4, r6
 801e3aa:	881b      	ldrh	r3, [r3, #0]
 801e3ac:	b2a4      	uxth	r4, r4
 801e3ae:	eba3 030b 	sub.w	r3, r3, fp
 801e3b2:	2c00      	cmp	r4, #0
 801e3b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e3b8:	bf18      	it	ne
 801e3ba:	2600      	movne	r6, #0
 801e3bc:	e779      	b.n	801e2b2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801e3be:	78aa      	ldrb	r2, [r5, #2]
 801e3c0:	3901      	subs	r1, #1
 801e3c2:	4f0e      	ldr	r7, [pc, #56]	@ (801e3fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801e3c4:	b289      	uxth	r1, r1
 801e3c6:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801e3ca:	786a      	ldrb	r2, [r5, #1]
 801e3cc:	00d2      	lsls	r2, r2, #3
 801e3ce:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e3d2:	ea4a 0202 	orr.w	r2, sl, r2
 801e3d6:	f895 a000 	ldrb.w	sl, [r5]
 801e3da:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801e3de:	f82e 2b02 	strh.w	r2, [lr], #2
 801e3e2:	e7d7      	b.n	801e394 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801e3e4:	4b03      	ldr	r3, [pc, #12]	@ (801e3f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801e3e6:	6818      	ldr	r0, [r3, #0]
 801e3e8:	6803      	ldr	r3, [r0, #0]
 801e3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3ec:	4798      	blx	r3
 801e3ee:	b013      	add	sp, #76	@ 0x4c
 801e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3f4:	20027dc0 	.word	0x20027dc0
 801e3f8:	20027dba 	.word	0x20027dba
 801e3fc:	fffff800 	.word	0xfffff800

0801e400 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e404:	b09d      	sub	sp, #116	@ 0x74
 801e406:	461c      	mov	r4, r3
 801e408:	4683      	mov	fp, r0
 801e40a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e40c:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801e410:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801e414:	920e      	str	r2, [sp, #56]	@ 0x38
 801e416:	2a00      	cmp	r2, #0
 801e418:	f000 81e4 	beq.w	801e7e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801e41c:	6820      	ldr	r0, [r4, #0]
 801e41e:	aa18      	add	r2, sp, #96	@ 0x60
 801e420:	6861      	ldr	r1, [r4, #4]
 801e422:	c203      	stmia	r2!, {r0, r1}
 801e424:	6818      	ldr	r0, [r3, #0]
 801e426:	aa1a      	add	r2, sp, #104	@ 0x68
 801e428:	6859      	ldr	r1, [r3, #4]
 801e42a:	c203      	stmia	r2!, {r0, r1}
 801e42c:	a818      	add	r0, sp, #96	@ 0x60
 801e42e:	f7f7 ff63 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e432:	4621      	mov	r1, r4
 801e434:	a81a      	add	r0, sp, #104	@ 0x68
 801e436:	f7f7 ffa3 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e43a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801e43e:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 801e442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e446:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801e44a:	bfdb      	ittet	le
 801e44c:	b29a      	uxthle	r2, r3
 801e44e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e452:	2201      	movgt	r2, #1
 801e454:	fb91 f2f2 	sdivle	r2, r1, r2
 801e458:	9202      	str	r2, [sp, #8]
 801e45a:	9802      	ldr	r0, [sp, #8]
 801e45c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801e460:	9902      	ldr	r1, [sp, #8]
 801e462:	fb92 f0f0 	sdiv	r0, r2, r0
 801e466:	b280      	uxth	r0, r0
 801e468:	440c      	add	r4, r1
 801e46a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e46c:	3c01      	subs	r4, #1
 801e46e:	9802      	ldr	r0, [sp, #8]
 801e470:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801e472:	fb05 2510 	mls	r5, r5, r0, r2
 801e476:	fb94 f4f1 	sdiv	r4, r4, r1
 801e47a:	fb15 f503 	smulbb	r5, r5, r3
 801e47e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801e482:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801e486:	3401      	adds	r4, #1
 801e488:	440d      	add	r5, r1
 801e48a:	4419      	add	r1, r3
 801e48c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801e490:	b2a4      	uxth	r4, r4
 801e492:	441a      	add	r2, r3
 801e494:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801e498:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801e49c:	00a4      	lsls	r4, r4, #2
 801e49e:	9306      	str	r3, [sp, #24]
 801e4a0:	b2ad      	uxth	r5, r5
 801e4a2:	4bb3      	ldr	r3, [pc, #716]	@ (801e770 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801e4a4:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801e4a8:	6818      	ldr	r0, [r3, #0]
 801e4aa:	6803      	ldr	r3, [r0, #0]
 801e4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4ae:	4798      	blx	r3
 801e4b0:	4bb0      	ldr	r3, [pc, #704]	@ (801e774 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801e4b2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801e4b6:	2d00      	cmp	r5, #0
 801e4b8:	881a      	ldrh	r2, [r3, #0]
 801e4ba:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801e4be:	fb02 f606 	mul.w	r6, r2, r6
 801e4c2:	fb02 7101 	mla	r1, r2, r1, r7
 801e4c6:	9316      	str	r3, [sp, #88]	@ 0x58
 801e4c8:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801e4cc:	4baa      	ldr	r3, [pc, #680]	@ (801e778 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801e4ce:	bf18      	it	ne
 801e4d0:	2100      	movne	r1, #0
 801e4d2:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801e4d6:	eba3 030b 	sub.w	r3, r3, fp
 801e4da:	920a      	str	r2, [sp, #40]	@ 0x28
 801e4dc:	f104 0204 	add.w	r2, r4, #4
 801e4e0:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e4e2:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e4e4:	9a06      	ldr	r2, [sp, #24]
 801e4e6:	bf08      	it	eq
 801e4e8:	4611      	moveq	r1, r2
 801e4ea:	2200      	movs	r2, #0
 801e4ec:	b289      	uxth	r1, r1
 801e4ee:	920d      	str	r2, [sp, #52]	@ 0x34
 801e4f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e4f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4f4:	fa12 f383 	uxtah	r3, r2, r3
 801e4f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e4fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e4fe:	3304      	adds	r3, #4
 801e500:	9308      	str	r3, [sp, #32]
 801e502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e504:	4543      	cmp	r3, r8
 801e506:	f240 8168 	bls.w	801e7da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801e50a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801e50e:	f04f 0e01 	mov.w	lr, #1
 801e512:	9a02      	ldr	r2, [sp, #8]
 801e514:	9808      	ldr	r0, [sp, #32]
 801e516:	fbb5 f3f3 	udiv	r3, r5, r3
 801e51a:	1ad3      	subs	r3, r2, r3
 801e51c:	7800      	ldrb	r0, [r0, #0]
 801e51e:	b29b      	uxth	r3, r3
 801e520:	9010      	str	r0, [sp, #64]	@ 0x40
 801e522:	3001      	adds	r0, #1
 801e524:	9314      	str	r3, [sp, #80]	@ 0x50
 801e526:	9b08      	ldr	r3, [sp, #32]
 801e528:	9007      	str	r0, [sp, #28]
 801e52a:	785a      	ldrb	r2, [r3, #1]
 801e52c:	789b      	ldrb	r3, [r3, #2]
 801e52e:	021b      	lsls	r3, r3, #8
 801e530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e534:	9a08      	ldr	r2, [sp, #32]
 801e536:	78d2      	ldrb	r2, [r2, #3]
 801e538:	4313      	orrs	r3, r2
 801e53a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e53c:	441a      	add	r2, r3
 801e53e:	1c50      	adds	r0, r2, #1
 801e540:	7852      	ldrb	r2, [r2, #1]
 801e542:	9005      	str	r0, [sp, #20]
 801e544:	0212      	lsls	r2, r2, #8
 801e546:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e548:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801e54c:	5cc3      	ldrb	r3, [r0, r3]
 801e54e:	431a      	orrs	r2, r3
 801e550:	b293      	uxth	r3, r2
 801e552:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801e556:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e558:	2300      	movs	r3, #0
 801e55a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e55c:	2301      	movs	r3, #1
 801e55e:	9301      	str	r3, [sp, #4]
 801e560:	9304      	str	r3, [sp, #16]
 801e562:	2300      	movs	r3, #0
 801e564:	9303      	str	r3, [sp, #12]
 801e566:	2d00      	cmp	r5, #0
 801e568:	d07d      	beq.n	801e666 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801e56a:	45ae      	cmp	lr, r5
 801e56c:	d26c      	bcs.n	801e648 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801e56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e570:	eba5 050e 	sub.w	r5, r5, lr
 801e574:	460c      	mov	r4, r1
 801e576:	4543      	cmp	r3, r8
 801e578:	b2ad      	uxth	r5, r5
 801e57a:	d802      	bhi.n	801e582 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801e57c:	e071      	b.n	801e662 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d15d      	bne.n	801e63e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801e582:	9b05      	ldr	r3, [sp, #20]
 801e584:	9a04      	ldr	r2, [sp, #16]
 801e586:	785b      	ldrb	r3, [r3, #1]
 801e588:	f1c2 0207 	rsb	r2, r2, #7
 801e58c:	9904      	ldr	r1, [sp, #16]
 801e58e:	4093      	lsls	r3, r2
 801e590:	005b      	lsls	r3, r3, #1
 801e592:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e596:	9b05      	ldr	r3, [sp, #20]
 801e598:	781b      	ldrb	r3, [r3, #0]
 801e59a:	410b      	asrs	r3, r1
 801e59c:	3101      	adds	r1, #1
 801e59e:	b2c9      	uxtb	r1, r1
 801e5a0:	b2db      	uxtb	r3, r3
 801e5a2:	2908      	cmp	r1, #8
 801e5a4:	9104      	str	r1, [sp, #16]
 801e5a6:	9905      	ldr	r1, [sp, #20]
 801e5a8:	ea43 0302 	orr.w	r3, r3, r2
 801e5ac:	bf0c      	ite	eq
 801e5ae:	3102      	addeq	r1, #2
 801e5b0:	3101      	addne	r1, #1
 801e5b2:	b29a      	uxth	r2, r3
 801e5b4:	bf05      	ittet	eq
 801e5b6:	9105      	streq	r1, [sp, #20]
 801e5b8:	2100      	moveq	r1, #0
 801e5ba:	9105      	strne	r1, [sp, #20]
 801e5bc:	9104      	streq	r1, [sp, #16]
 801e5be:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e5c0:	4291      	cmp	r1, r2
 801e5c2:	d30a      	bcc.n	801e5da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801e5c4:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 801e5c8:	2301      	movs	r3, #1
 801e5ca:	9907      	ldr	r1, [sp, #28]
 801e5cc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801e5d0:	d30f      	bcc.n	801e5f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801e5d2:	2100      	movs	r1, #0
 801e5d4:	9301      	str	r3, [sp, #4]
 801e5d6:	9103      	str	r1, [sp, #12]
 801e5d8:	e032      	b.n	801e640 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801e5da:	9b07      	ldr	r3, [sp, #28]
 801e5dc:	429a      	cmp	r2, r3
 801e5de:	d318      	bcc.n	801e612 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801e5e0:	9b01      	ldr	r3, [sp, #4]
 801e5e2:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801e5e6:	445b      	add	r3, fp
 801e5e8:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801e5ec:	9b01      	ldr	r3, [sp, #4]
 801e5ee:	3301      	adds	r3, #1
 801e5f0:	b29b      	uxth	r3, r3
 801e5f2:	9907      	ldr	r1, [sp, #28]
 801e5f4:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 801e5f8:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801e5fc:	7108      	strb	r0, [r1, #4]
 801e5fe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801e600:	80c8      	strh	r0, [r1, #6]
 801e602:	9801      	ldr	r0, [sp, #4]
 801e604:	3001      	adds	r0, #1
 801e606:	7148      	strb	r0, [r1, #5]
 801e608:	9907      	ldr	r1, [sp, #28]
 801e60a:	3101      	adds	r1, #1
 801e60c:	b289      	uxth	r1, r1
 801e60e:	9107      	str	r1, [sp, #28]
 801e610:	e7df      	b.n	801e5d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801e612:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801e616:	4611      	mov	r1, r2
 801e618:	795b      	ldrb	r3, [r3, #5]
 801e61a:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801e61e:	4458      	add	r0, fp
 801e620:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801e622:	4406      	add	r6, r0
 801e624:	2e00      	cmp	r6, #0
 801e626:	dd06      	ble.n	801e636 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801e628:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801e62c:	790e      	ldrb	r6, [r1, #4]
 801e62e:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801e632:	88c9      	ldrh	r1, [r1, #6]
 801e634:	e7f4      	b.n	801e620 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801e636:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 801e63a:	b29b      	uxth	r3, r3
 801e63c:	e7c5      	b.n	801e5ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801e63e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e640:	4621      	mov	r1, r4
 801e642:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e644:	469e      	mov	lr, r3
 801e646:	e78e      	b.n	801e566 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801e648:	9a03      	ldr	r2, [sp, #12]
 801e64a:	ebae 0305 	sub.w	r3, lr, r5
 801e64e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801e652:	442a      	add	r2, r5
 801e654:	b29b      	uxth	r3, r3
 801e656:	b292      	uxth	r2, r2
 801e658:	9203      	str	r2, [sp, #12]
 801e65a:	2500      	movs	r5, #0
 801e65c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e65e:	4542      	cmp	r2, r8
 801e660:	d88d      	bhi.n	801e57e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801e662:	4621      	mov	r1, r4
 801e664:	e74d      	b.n	801e502 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801e666:	458e      	cmp	lr, r1
 801e668:	f04f 0900 	mov.w	r9, #0
 801e66c:	bf2b      	itete	cs
 801e66e:	ebae 0301 	subcs.w	r3, lr, r1
 801e672:	eba1 040e 	subcc.w	r4, r1, lr
 801e676:	462c      	movcs	r4, r5
 801e678:	462b      	movcc	r3, r5
 801e67a:	bf27      	ittee	cs
 801e67c:	b29b      	uxthcs	r3, r3
 801e67e:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801e680:	b2a4      	uxthcc	r4, r4
 801e682:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 801e686:	9a03      	ldr	r2, [sp, #12]
 801e688:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e68a:	444a      	add	r2, r9
 801e68c:	4548      	cmp	r0, r9
 801e68e:	b292      	uxth	r2, r2
 801e690:	d074      	beq.n	801e77c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801e692:	2004      	movs	r0, #4
 801e694:	445a      	add	r2, fp
 801e696:	4605      	mov	r5, r0
 801e698:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801e69c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e69e:	fb15 0202 	smlabb	r2, r5, r2, r0
 801e6a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e6a4:	5880      	ldr	r0, [r0, r2]
 801e6a6:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801e6aa:	d014      	beq.n	801e6d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801e6ac:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801e6b0:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801e6b4:	d112      	bne.n	801e6dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801e6b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e6b8:	2aff      	cmp	r2, #255	@ 0xff
 801e6ba:	d10f      	bne.n	801e6dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801e6bc:	0942      	lsrs	r2, r0, #5
 801e6be:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801e6c2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e6c6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e6ca:	f025 0507 	bic.w	r5, r5, #7
 801e6ce:	4315      	orrs	r5, r2
 801e6d0:	4305      	orrs	r5, r0
 801e6d2:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801e6d6:	f109 0901 	add.w	r9, r9, #1
 801e6da:	e7d4      	b.n	801e686 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801e6dc:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801e6e0:	b2ed      	uxtb	r5, r5
 801e6e2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e6e6:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e6ea:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 801e6ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e6f2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801e6f6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e6fa:	9215      	str	r2, [sp, #84]	@ 0x54
 801e6fc:	fa5f fc8c 	uxtb.w	ip, ip
 801e700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e702:	b2c0      	uxtb	r0, r0
 801e704:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801e708:	fb02 fa0a 	mul.w	sl, r2, sl
 801e70c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e710:	f10a 0201 	add.w	r2, sl, #1
 801e714:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801e718:	1212      	asrs	r2, r2, #8
 801e71a:	fa1f fa82 	uxth.w	sl, r2
 801e71e:	43d2      	mvns	r2, r2
 801e720:	fb16 f60a 	smulbb	r6, r6, sl
 801e724:	b2d2      	uxtb	r2, r2
 801e726:	fb10 f00a 	smulbb	r0, r0, sl
 801e72a:	fb07 6702 	mla	r7, r7, r2, r6
 801e72e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801e730:	fb0c 0002 	mla	r0, ip, r2, r0
 801e734:	fb15 f50a 	smulbb	r5, r5, sl
 801e738:	b2bf      	uxth	r7, r7
 801e73a:	b280      	uxth	r0, r0
 801e73c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e740:	fb06 5602 	mla	r6, r6, r2, r5
 801e744:	1c7a      	adds	r2, r7, #1
 801e746:	1c45      	adds	r5, r0, #1
 801e748:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e74c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e750:	b2b6      	uxth	r6, r6
 801e752:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e756:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e75a:	432f      	orrs	r7, r5
 801e75c:	1c75      	adds	r5, r6, #1
 801e75e:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801e762:	096d      	lsrs	r5, r5, #5
 801e764:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e768:	432f      	orrs	r7, r5
 801e76a:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801e76e:	e7b2      	b.n	801e6d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801e770:	20027dc0 	.word	0x20027dc0
 801e774:	20027dba 	.word	0x20027dba
 801e778:	fffff7fb 	.word	0xfffff7fb
 801e77c:	9203      	str	r2, [sp, #12]
 801e77e:	458e      	cmp	lr, r1
 801e780:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e782:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801e786:	f4ff af68 	bcc.w	801e65a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801e78a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e78c:	9906      	ldr	r1, [sp, #24]
 801e78e:	8812      	ldrh	r2, [r2, #0]
 801e790:	1a52      	subs	r2, r2, r1
 801e792:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801e794:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801e798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e79a:	3201      	adds	r2, #1
 801e79c:	428a      	cmp	r2, r1
 801e79e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e7a0:	d111      	bne.n	801e7c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801e7a2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801e7a6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 801e7aa:	9b06      	ldr	r3, [sp, #24]
 801e7ac:	eba5 0509 	sub.w	r5, r5, r9
 801e7b0:	b2ad      	uxth	r5, r5
 801e7b2:	2d00      	cmp	r5, #0
 801e7b4:	bf08      	it	eq
 801e7b6:	4619      	moveq	r1, r3
 801e7b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e7ba:	bf18      	it	ne
 801e7bc:	2100      	movne	r1, #0
 801e7be:	3301      	adds	r3, #1
 801e7c0:	b289      	uxth	r1, r1
 801e7c2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e7c4:	e694      	b.n	801e4f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801e7c6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801e7ca:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801e7ce:	1b2d      	subs	r5, r5, r4
 801e7d0:	b2ad      	uxth	r5, r5
 801e7d2:	2d00      	cmp	r5, #0
 801e7d4:	bf18      	it	ne
 801e7d6:	2400      	movne	r4, #0
 801e7d8:	e740      	b.n	801e65c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801e7da:	4b04      	ldr	r3, [pc, #16]	@ (801e7ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801e7dc:	6818      	ldr	r0, [r3, #0]
 801e7de:	6803      	ldr	r3, [r0, #0]
 801e7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e7e2:	4798      	blx	r3
 801e7e4:	b01d      	add	sp, #116	@ 0x74
 801e7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7ea:	bf00      	nop
 801e7ec:	20027dc0 	.word	0x20027dc0

0801e7f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7f4:	b09f      	sub	sp, #124	@ 0x7c
 801e7f6:	461d      	mov	r5, r3
 801e7f8:	4604      	mov	r4, r0
 801e7fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e7fc:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801e800:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801e804:	920a      	str	r2, [sp, #40]	@ 0x28
 801e806:	2a00      	cmp	r2, #0
 801e808:	f000 81fe 	beq.w	801ec08 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801e80c:	6828      	ldr	r0, [r5, #0]
 801e80e:	aa1a      	add	r2, sp, #104	@ 0x68
 801e810:	6869      	ldr	r1, [r5, #4]
 801e812:	c203      	stmia	r2!, {r0, r1}
 801e814:	6818      	ldr	r0, [r3, #0]
 801e816:	aa1c      	add	r2, sp, #112	@ 0x70
 801e818:	6859      	ldr	r1, [r3, #4]
 801e81a:	c203      	stmia	r2!, {r0, r1}
 801e81c:	a81a      	add	r0, sp, #104	@ 0x68
 801e81e:	f7f7 fd6b 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e822:	4629      	mov	r1, r5
 801e824:	a81c      	add	r0, sp, #112	@ 0x70
 801e826:	f7f7 fdab 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e82a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801e82e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801e832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e836:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 801e83a:	bfdb      	ittet	le
 801e83c:	b29a      	uxthle	r2, r3
 801e83e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e842:	2201      	movgt	r2, #1
 801e844:	fb91 f2f2 	sdivle	r2, r1, r2
 801e848:	9201      	str	r2, [sp, #4]
 801e84a:	9801      	ldr	r0, [sp, #4]
 801e84c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801e850:	9901      	ldr	r1, [sp, #4]
 801e852:	fb92 f0f0 	sdiv	r0, r2, r0
 801e856:	b280      	uxth	r0, r0
 801e858:	440e      	add	r6, r1
 801e85a:	9010      	str	r0, [sp, #64]	@ 0x40
 801e85c:	3e01      	subs	r6, #1
 801e85e:	9801      	ldr	r0, [sp, #4]
 801e860:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e862:	fb05 2510 	mls	r5, r5, r0, r2
 801e866:	fb96 f6f1 	sdiv	r6, r6, r1
 801e86a:	fb15 f503 	smulbb	r5, r5, r3
 801e86e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801e872:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801e876:	3601      	adds	r6, #1
 801e878:	440d      	add	r5, r1
 801e87a:	4419      	add	r1, r3
 801e87c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801e880:	b2b6      	uxth	r6, r6
 801e882:	441a      	add	r2, r3
 801e884:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801e888:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801e88c:	b2ad      	uxth	r5, r5
 801e88e:	9304      	str	r3, [sp, #16]
 801e890:	4b96      	ldr	r3, [pc, #600]	@ (801eaec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801e892:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801e896:	6818      	ldr	r0, [r3, #0]
 801e898:	6803      	ldr	r3, [r0, #0]
 801e89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e89c:	4798      	blx	r3
 801e89e:	4b94      	ldr	r3, [pc, #592]	@ (801eaf0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801e8a0:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801e8a4:	2d00      	cmp	r5, #0
 801e8a6:	881a      	ldrh	r2, [r3, #0]
 801e8a8:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801e8ac:	fb02 f707 	mul.w	r7, r2, r7
 801e8b0:	fb02 c101 	mla	r1, r2, r1, ip
 801e8b4:	9318      	str	r3, [sp, #96]	@ 0x60
 801e8b6:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801e8ba:	4b8e      	ldr	r3, [pc, #568]	@ (801eaf4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801e8bc:	bf18      	it	ne
 801e8be:	2100      	movne	r1, #0
 801e8c0:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801e8c4:	eba3 0304 	sub.w	r3, r3, r4
 801e8c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e8ca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e8cc:	9319      	str	r3, [sp, #100]	@ 0x64
 801e8ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e8d2:	f106 0204 	add.w	r2, r6, #4
 801e8d6:	9206      	str	r2, [sp, #24]
 801e8d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e8da:	ea6f 0202 	mvn.w	r2, r2
 801e8de:	b2d2      	uxtb	r2, r2
 801e8e0:	9215      	str	r2, [sp, #84]	@ 0x54
 801e8e2:	9a04      	ldr	r2, [sp, #16]
 801e8e4:	bf08      	it	eq
 801e8e6:	4611      	moveq	r1, r2
 801e8e8:	2200      	movs	r2, #0
 801e8ea:	b289      	uxth	r1, r1
 801e8ec:	920d      	str	r2, [sp, #52]	@ 0x34
 801e8ee:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e8f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8f2:	fa12 f383 	uxtah	r3, r2, r3
 801e8f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e8f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e8fc:	3304      	adds	r3, #4
 801e8fe:	9307      	str	r3, [sp, #28]
 801e900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e902:	455b      	cmp	r3, fp
 801e904:	f240 817b 	bls.w	801ebfe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801e908:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801e90c:	f04f 0801 	mov.w	r8, #1
 801e910:	9a01      	ldr	r2, [sp, #4]
 801e912:	9807      	ldr	r0, [sp, #28]
 801e914:	46c4      	mov	ip, r8
 801e916:	f8cd 8008 	str.w	r8, [sp, #8]
 801e91a:	7800      	ldrb	r0, [r0, #0]
 801e91c:	fbb5 f3f3 	udiv	r3, r5, r3
 801e920:	1ad3      	subs	r3, r2, r3
 801e922:	9011      	str	r0, [sp, #68]	@ 0x44
 801e924:	3001      	adds	r0, #1
 801e926:	b29b      	uxth	r3, r3
 801e928:	9005      	str	r0, [sp, #20]
 801e92a:	9316      	str	r3, [sp, #88]	@ 0x58
 801e92c:	9b07      	ldr	r3, [sp, #28]
 801e92e:	785a      	ldrb	r2, [r3, #1]
 801e930:	789b      	ldrb	r3, [r3, #2]
 801e932:	021b      	lsls	r3, r3, #8
 801e934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e938:	9a07      	ldr	r2, [sp, #28]
 801e93a:	78d2      	ldrb	r2, [r2, #3]
 801e93c:	4313      	orrs	r3, r2
 801e93e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e940:	441a      	add	r2, r3
 801e942:	1c50      	adds	r0, r2, #1
 801e944:	7852      	ldrb	r2, [r2, #1]
 801e946:	9003      	str	r0, [sp, #12]
 801e948:	0212      	lsls	r2, r2, #8
 801e94a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e94c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801e950:	5cc3      	ldrb	r3, [r0, r3]
 801e952:	431a      	orrs	r2, r3
 801e954:	b293      	uxth	r3, r2
 801e956:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e95a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e95c:	2300      	movs	r3, #0
 801e95e:	9308      	str	r3, [sp, #32]
 801e960:	461a      	mov	r2, r3
 801e962:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e966:	930e      	str	r3, [sp, #56]	@ 0x38
 801e968:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801e96c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e96e:	2d00      	cmp	r5, #0
 801e970:	d07d      	beq.n	801ea6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801e972:	45ac      	cmp	ip, r5
 801e974:	d26d      	bcs.n	801ea52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801e976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e978:	eba5 050c 	sub.w	r5, r5, ip
 801e97c:	4608      	mov	r0, r1
 801e97e:	455b      	cmp	r3, fp
 801e980:	b2ad      	uxth	r5, r5
 801e982:	d802      	bhi.n	801e98a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801e984:	e071      	b.n	801ea6a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801e986:	2b00      	cmp	r3, #0
 801e988:	d15d      	bne.n	801ea46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801e98a:	9b03      	ldr	r3, [sp, #12]
 801e98c:	9a02      	ldr	r2, [sp, #8]
 801e98e:	785b      	ldrb	r3, [r3, #1]
 801e990:	f1c2 0207 	rsb	r2, r2, #7
 801e994:	9902      	ldr	r1, [sp, #8]
 801e996:	4093      	lsls	r3, r2
 801e998:	005b      	lsls	r3, r3, #1
 801e99a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e99e:	9b03      	ldr	r3, [sp, #12]
 801e9a0:	781b      	ldrb	r3, [r3, #0]
 801e9a2:	410b      	asrs	r3, r1
 801e9a4:	3101      	adds	r1, #1
 801e9a6:	b2c9      	uxtb	r1, r1
 801e9a8:	b2db      	uxtb	r3, r3
 801e9aa:	2908      	cmp	r1, #8
 801e9ac:	9102      	str	r1, [sp, #8]
 801e9ae:	9903      	ldr	r1, [sp, #12]
 801e9b0:	ea43 0302 	orr.w	r3, r3, r2
 801e9b4:	bf0c      	ite	eq
 801e9b6:	3102      	addeq	r1, #2
 801e9b8:	3101      	addne	r1, #1
 801e9ba:	b29a      	uxth	r2, r3
 801e9bc:	bf05      	ittet	eq
 801e9be:	9103      	streq	r1, [sp, #12]
 801e9c0:	2100      	moveq	r1, #0
 801e9c2:	9103      	strne	r1, [sp, #12]
 801e9c4:	9102      	streq	r1, [sp, #8]
 801e9c6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e9c8:	4291      	cmp	r1, r2
 801e9ca:	d30a      	bcc.n	801e9e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801e9cc:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e9d0:	2301      	movs	r3, #1
 801e9d2:	9905      	ldr	r1, [sp, #20]
 801e9d4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801e9d8:	d30f      	bcc.n	801e9fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801e9da:	2100      	movs	r1, #0
 801e9dc:	4698      	mov	r8, r3
 801e9de:	9100      	str	r1, [sp, #0]
 801e9e0:	e032      	b.n	801ea48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801e9e2:	9b05      	ldr	r3, [sp, #20]
 801e9e4:	429a      	cmp	r2, r3
 801e9e6:	d318      	bcc.n	801ea1a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801e9e8:	eb04 0308 	add.w	r3, r4, r8
 801e9ec:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801e9f0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801e9f4:	f108 0301 	add.w	r3, r8, #1
 801e9f8:	b29b      	uxth	r3, r3
 801e9fa:	9905      	ldr	r1, [sp, #20]
 801e9fc:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801ea00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ea04:	710e      	strb	r6, [r1, #4]
 801ea06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ea08:	80ce      	strh	r6, [r1, #6]
 801ea0a:	f108 0601 	add.w	r6, r8, #1
 801ea0e:	714e      	strb	r6, [r1, #5]
 801ea10:	9905      	ldr	r1, [sp, #20]
 801ea12:	3101      	adds	r1, #1
 801ea14:	b289      	uxth	r1, r1
 801ea16:	9105      	str	r1, [sp, #20]
 801ea18:	e7df      	b.n	801e9da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801ea1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ea1e:	4611      	mov	r1, r2
 801ea20:	795b      	ldrb	r3, [r3, #5]
 801ea22:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801ea26:	4426      	add	r6, r4
 801ea28:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801ea2a:	4437      	add	r7, r6
 801ea2c:	2f00      	cmp	r7, #0
 801ea2e:	dd06      	ble.n	801ea3e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801ea30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ea34:	790f      	ldrb	r7, [r1, #4]
 801ea36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ea3a:	88c9      	ldrh	r1, [r1, #6]
 801ea3c:	e7f4      	b.n	801ea28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801ea3e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801ea42:	b29b      	uxth	r3, r3
 801ea44:	e7c5      	b.n	801e9d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801ea46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea48:	920c      	str	r2, [sp, #48]	@ 0x30
 801ea4a:	4601      	mov	r1, r0
 801ea4c:	9a00      	ldr	r2, [sp, #0]
 801ea4e:	469c      	mov	ip, r3
 801ea50:	e78d      	b.n	801e96e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801ea52:	ebac 0305 	sub.w	r3, ip, r5
 801ea56:	1957      	adds	r7, r2, r5
 801ea58:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801ea5c:	b2ba      	uxth	r2, r7
 801ea5e:	b29b      	uxth	r3, r3
 801ea60:	9200      	str	r2, [sp, #0]
 801ea62:	2500      	movs	r5, #0
 801ea64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ea66:	455a      	cmp	r2, fp
 801ea68:	d88d      	bhi.n	801e986 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801ea6a:	4601      	mov	r1, r0
 801ea6c:	e748      	b.n	801e900 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801ea6e:	458c      	cmp	ip, r1
 801ea70:	bf27      	ittee	cs
 801ea72:	ebac 0301 	subcs.w	r3, ip, r1
 801ea76:	4628      	movcs	r0, r5
 801ea78:	eba1 000c 	subcc.w	r0, r1, ip
 801ea7c:	462b      	movcc	r3, r5
 801ea7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ea80:	bf27      	ittee	cs
 801ea82:	b29b      	uxthcs	r3, r3
 801ea84:	9109      	strcs	r1, [sp, #36]	@ 0x24
 801ea86:	b280      	uxthcc	r0, r0
 801ea88:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 801ea8c:	2dff      	cmp	r5, #255	@ 0xff
 801ea8e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ea90:	eb02 0705 	add.w	r7, r2, r5
 801ea94:	b2bd      	uxth	r5, r7
 801ea96:	9500      	str	r5, [sp, #0]
 801ea98:	d12e      	bne.n	801eaf8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801ea9a:	465e      	mov	r6, fp
 801ea9c:	9d00      	ldr	r5, [sp, #0]
 801ea9e:	42aa      	cmp	r2, r5
 801eaa0:	f040 8083 	bne.w	801ebaa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801eaa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eaa6:	458c      	cmp	ip, r1
 801eaa8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801eaac:	d3d9      	bcc.n	801ea62 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801eaae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801eab0:	9904      	ldr	r1, [sp, #16]
 801eab2:	8812      	ldrh	r2, [r2, #0]
 801eab4:	1a52      	subs	r2, r2, r1
 801eab6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801eab8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801eabc:	9a08      	ldr	r2, [sp, #32]
 801eabe:	3201      	adds	r2, #1
 801eac0:	428a      	cmp	r2, r1
 801eac2:	9208      	str	r2, [sp, #32]
 801eac4:	f040 8091 	bne.w	801ebea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801eac8:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801eacc:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 801ead0:	9b04      	ldr	r3, [sp, #16]
 801ead2:	eba5 050c 	sub.w	r5, r5, ip
 801ead6:	b2ad      	uxth	r5, r5
 801ead8:	2d00      	cmp	r5, #0
 801eada:	bf08      	it	eq
 801eadc:	4619      	moveq	r1, r3
 801eade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eae0:	bf18      	it	ne
 801eae2:	2100      	movne	r1, #0
 801eae4:	3301      	adds	r3, #1
 801eae6:	b289      	uxth	r1, r1
 801eae8:	930d      	str	r3, [sp, #52]	@ 0x34
 801eaea:	e700      	b.n	801e8ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801eaec:	20027dc0 	.word	0x20027dc0
 801eaf0:	20027dba 	.word	0x20027dba
 801eaf4:	fffff7fb 	.word	0xfffff7fb
 801eaf8:	46d9      	mov	r9, fp
 801eafa:	9d00      	ldr	r5, [sp, #0]
 801eafc:	42aa      	cmp	r2, r5
 801eafe:	d0d1      	beq.n	801eaa4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801eb00:	1c55      	adds	r5, r2, #1
 801eb02:	4422      	add	r2, r4
 801eb04:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 801eb08:	9a06      	ldr	r2, [sp, #24]
 801eb0a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eb0e:	9517      	str	r5, [sp, #92]	@ 0x5c
 801eb10:	4472      	add	r2, lr
 801eb12:	9212      	str	r2, [sp, #72]	@ 0x48
 801eb14:	f8b9 2000 	ldrh.w	r2, [r9]
 801eb18:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801eb1a:	1216      	asrs	r6, r2, #8
 801eb1c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801eb20:	10d5      	asrs	r5, r2, #3
 801eb22:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801eb24:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801eb28:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801eb2c:	00d2      	lsls	r2, r2, #3
 801eb2e:	fb1a fa07 	smulbb	sl, sl, r7
 801eb32:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eb36:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801eb38:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801eb3c:	b2d2      	uxtb	r2, r2
 801eb3e:	fb06 a607 	mla	r6, r6, r7, sl
 801eb42:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801eb44:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801eb48:	f897 a001 	ldrb.w	sl, [r7, #1]
 801eb4c:	b2b6      	uxth	r6, r6
 801eb4e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801eb50:	fb1a fa07 	smulbb	sl, sl, r7
 801eb54:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801eb56:	fb05 a507 	mla	r5, r5, r7, sl
 801eb5a:	9f06      	ldr	r7, [sp, #24]
 801eb5c:	f106 0a01 	add.w	sl, r6, #1
 801eb60:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801eb64:	b2ad      	uxth	r5, r5
 801eb66:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801eb68:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801eb6c:	f105 0a01 	add.w	sl, r5, #1
 801eb70:	fb1e fe07 	smulbb	lr, lr, r7
 801eb74:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801eb76:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb7a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801eb7e:	fb02 e207 	mla	r2, r2, r7, lr
 801eb82:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb86:	b292      	uxth	r2, r2
 801eb88:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801eb8c:	f102 0e01 	add.w	lr, r2, #1
 801eb90:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801eb94:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801eb98:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801eb9c:	ea4e 0606 	orr.w	r6, lr, r6
 801eba0:	ea46 060a 	orr.w	r6, r6, sl
 801eba4:	f829 6b02 	strh.w	r6, [r9], #2
 801eba8:	e7a7      	b.n	801eafa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801ebaa:	f102 0e01 	add.w	lr, r2, #1
 801ebae:	4422      	add	r2, r4
 801ebb0:	9f06      	ldr	r7, [sp, #24]
 801ebb2:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 801ebb6:	9a06      	ldr	r2, [sp, #24]
 801ebb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ebbc:	eb02 0a05 	add.w	sl, r2, r5
 801ebc0:	4a13      	ldr	r2, [pc, #76]	@ (801ec10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801ebc2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ebc6:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801ebca:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ebce:	00d2      	lsls	r2, r2, #3
 801ebd0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ebd4:	ea49 0202 	orr.w	r2, r9, r2
 801ebd8:	f817 9005 	ldrb.w	r9, [r7, r5]
 801ebdc:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801ebe0:	f826 2b02 	strh.w	r2, [r6], #2
 801ebe4:	fa1f f28e 	uxth.w	r2, lr
 801ebe8:	e758      	b.n	801ea9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801ebea:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801ebee:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801ebf2:	1a2d      	subs	r5, r5, r0
 801ebf4:	b2ad      	uxth	r5, r5
 801ebf6:	2d00      	cmp	r5, #0
 801ebf8:	bf18      	it	ne
 801ebfa:	2000      	movne	r0, #0
 801ebfc:	e732      	b.n	801ea64 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801ebfe:	4b05      	ldr	r3, [pc, #20]	@ (801ec14 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801ec00:	6818      	ldr	r0, [r3, #0]
 801ec02:	6803      	ldr	r3, [r0, #0]
 801ec04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec06:	4798      	blx	r3
 801ec08:	b01f      	add	sp, #124	@ 0x7c
 801ec0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec0e:	bf00      	nop
 801ec10:	fffff800 	.word	0xfffff800
 801ec14:	20027dc0 	.word	0x20027dc0

0801ec18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec1c:	b091      	sub	sp, #68	@ 0x44
 801ec1e:	469b      	mov	fp, r3
 801ec20:	4616      	mov	r6, r2
 801ec22:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ec26:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801ec2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ec2e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801ec32:	4604      	mov	r4, r0
 801ec34:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801ec38:	4640      	mov	r0, r8
 801ec3a:	460d      	mov	r5, r1
 801ec3c:	4659      	mov	r1, fp
 801ec3e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801ec42:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801ec46:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801ec4a:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801ec4e:	f7f1 faef 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801ec52:	4631      	mov	r1, r6
 801ec54:	4640      	mov	r0, r8
 801ec56:	f7f1 faeb 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801ec5a:	4b74      	ldr	r3, [pc, #464]	@ (801ee2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801ec5c:	8818      	ldrh	r0, [r3, #0]
 801ec5e:	4b74      	ldr	r3, [pc, #464]	@ (801ee30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801ec60:	b202      	sxth	r2, r0
 801ec62:	8819      	ldrh	r1, [r3, #0]
 801ec64:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801ec68:	b20e      	sxth	r6, r1
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	da07      	bge.n	801ec7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801ec6e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801ec72:	4463      	add	r3, ip
 801ec74:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801ec78:	2300      	movs	r3, #0
 801ec7a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801ec7e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801ec82:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801ec86:	1ad2      	subs	r2, r2, r3
 801ec88:	4594      	cmp	ip, r2
 801ec8a:	bfc4      	itt	gt
 801ec8c:	1ac2      	subgt	r2, r0, r3
 801ec8e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801ec92:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801ec96:	2a00      	cmp	r2, #0
 801ec98:	da07      	bge.n	801ecaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801ec9a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801ec9e:	4462      	add	r2, ip
 801eca0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801eca4:	2200      	movs	r2, #0
 801eca6:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801ecaa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801ecae:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801ecb2:	eba6 060a 	sub.w	r6, r6, sl
 801ecb6:	42b2      	cmp	r2, r6
 801ecb8:	bfc4      	itt	gt
 801ecba:	eba1 020a 	subgt.w	r2, r1, sl
 801ecbe:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801ecc2:	4a5c      	ldr	r2, [pc, #368]	@ (801ee34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801ecc4:	7812      	ldrb	r2, [r2, #0]
 801ecc6:	b9a2      	cbnz	r2, 801ecf2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801ecc8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801eccc:	4286      	cmp	r6, r0
 801ecce:	4640      	mov	r0, r8
 801ecd0:	9303      	str	r3, [sp, #12]
 801ecd2:	bf14      	ite	ne
 801ecd4:	2600      	movne	r6, #0
 801ecd6:	2601      	moveq	r6, #1
 801ecd8:	f7f1 faed 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ecdc:	9b03      	ldr	r3, [sp, #12]
 801ecde:	b160      	cbz	r0, 801ecfa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801ece0:	2300      	movs	r3, #0
 801ece2:	8023      	strh	r3, [r4, #0]
 801ece4:	8063      	strh	r3, [r4, #2]
 801ece6:	80a3      	strh	r3, [r4, #4]
 801ece8:	4620      	mov	r0, r4
 801ecea:	80e3      	strh	r3, [r4, #6]
 801ecec:	b011      	add	sp, #68	@ 0x44
 801ecee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecf2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801ecf6:	428e      	cmp	r6, r1
 801ecf8:	e7e9      	b.n	801ecce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801ecfa:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801ecfe:	a90e      	add	r1, sp, #56	@ 0x38
 801ed00:	900e      	str	r0, [sp, #56]	@ 0x38
 801ed02:	a80c      	add	r0, sp, #48	@ 0x30
 801ed04:	9205      	str	r2, [sp, #20]
 801ed06:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801ed0a:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801ed0e:	9206      	str	r2, [sp, #24]
 801ed10:	f8bb 2000 	ldrh.w	r2, [fp]
 801ed14:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801ed18:	1a9b      	subs	r3, r3, r2
 801ed1a:	b21b      	sxth	r3, r3
 801ed1c:	9303      	str	r3, [sp, #12]
 801ed1e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801ed22:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801ee3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801ed26:	ebaa 0a03 	sub.w	sl, sl, r3
 801ed2a:	fa0f f38a 	sxth.w	r3, sl
 801ed2e:	9304      	str	r3, [sp, #16]
 801ed30:	9b03      	ldr	r3, [sp, #12]
 801ed32:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801ed36:	9b04      	ldr	r3, [sp, #16]
 801ed38:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ed3c:	9b05      	ldr	r3, [sp, #20]
 801ed3e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801ed42:	9b06      	ldr	r3, [sp, #24]
 801ed44:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801ed48:	f7f7 fb1a 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed4c:	4640      	mov	r0, r8
 801ed4e:	f7f7 fad3 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed52:	a80e      	add	r0, sp, #56	@ 0x38
 801ed54:	f7f7 fad0 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed58:	4b37      	ldr	r3, [pc, #220]	@ (801ee38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ed5a:	4628      	mov	r0, r5
 801ed5c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801ed60:	881b      	ldrh	r3, [r3, #0]
 801ed62:	9307      	str	r3, [sp, #28]
 801ed64:	682b      	ldr	r3, [r5, #0]
 801ed66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed68:	4798      	blx	r3
 801ed6a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801ed6e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ed72:	4681      	mov	r9, r0
 801ed74:	f8db 0000 	ldr.w	r0, [fp]
 801ed78:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801ed7c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801ed7e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801ed82:	6803      	ldr	r3, [r0, #0]
 801ed84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed86:	4798      	blx	r3
 801ed88:	4607      	mov	r7, r0
 801ed8a:	f8db 0000 	ldr.w	r0, [fp]
 801ed8e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801ed92:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801ed96:	6803      	ldr	r3, [r0, #0]
 801ed98:	9109      	str	r1, [sp, #36]	@ 0x24
 801ed9a:	9208      	str	r2, [sp, #32]
 801ed9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ed9e:	4798      	blx	r3
 801eda0:	f010 0f01 	tst.w	r0, #1
 801eda4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801eda8:	d012      	beq.n	801edd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801edaa:	f8db 0000 	ldr.w	r0, [fp]
 801edae:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801edb2:	6803      	ldr	r3, [r0, #0]
 801edb4:	9200      	str	r2, [sp, #0]
 801edb6:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801edb8:	462b      	mov	r3, r5
 801edba:	e898 0006 	ldmia.w	r8, {r1, r2}
 801edbe:	47b0      	blx	r6
 801edc0:	9b03      	ldr	r3, [sp, #12]
 801edc2:	8023      	strh	r3, [r4, #0]
 801edc4:	9b04      	ldr	r3, [sp, #16]
 801edc6:	8063      	strh	r3, [r4, #2]
 801edc8:	9b05      	ldr	r3, [sp, #20]
 801edca:	80a3      	strh	r3, [r4, #4]
 801edcc:	9b06      	ldr	r3, [sp, #24]
 801edce:	e78b      	b.n	801ece8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801edd0:	fb09 f202 	mul.w	r2, r9, r2
 801edd4:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801edd8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801eddc:	440f      	add	r7, r1
 801edde:	b166      	cbz	r6, 801edfa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801ede0:	9a07      	ldr	r2, [sp, #28]
 801ede2:	4592      	cmp	sl, r2
 801ede4:	d109      	bne.n	801edfa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801ede6:	f8db 0000 	ldr.w	r0, [fp]
 801edea:	fb09 f303 	mul.w	r3, r9, r3
 801edee:	4629      	mov	r1, r5
 801edf0:	6802      	ldr	r2, [r0, #0]
 801edf2:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801edf4:	463a      	mov	r2, r7
 801edf6:	47b0      	blx	r6
 801edf8:	e7e2      	b.n	801edc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801edfa:	fb0a f303 	mul.w	r3, sl, r3
 801edfe:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801ee02:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801ee3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801ee06:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801ee0a:	4545      	cmp	r5, r8
 801ee0c:	d2d8      	bcs.n	801edc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801ee0e:	f8db 0000 	ldr.w	r0, [fp]
 801ee12:	4629      	mov	r1, r5
 801ee14:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ee18:	4435      	add	r5, r6
 801ee1a:	6802      	ldr	r2, [r0, #0]
 801ee1c:	005b      	lsls	r3, r3, #1
 801ee1e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801ee22:	463a      	mov	r2, r7
 801ee24:	47d0      	blx	sl
 801ee26:	444f      	add	r7, r9
 801ee28:	e7ef      	b.n	801ee0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801ee2a:	bf00      	nop
 801ee2c:	20027db4 	.word	0x20027db4
 801ee30:	20027db6 	.word	0x20027db6
 801ee34:	20027db8 	.word	0x20027db8
 801ee38:	20027dba 	.word	0x20027dba
 801ee3c:	20027dc0 	.word	0x20027dc0

0801ee40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee42:	4606      	mov	r6, r0
 801ee44:	b087      	sub	sp, #28
 801ee46:	460c      	mov	r4, r1
 801ee48:	4617      	mov	r7, r2
 801ee4a:	461d      	mov	r5, r3
 801ee4c:	b333      	cbz	r3, 801ee9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ee4e:	4608      	mov	r0, r1
 801ee50:	f7f1 fa31 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ee54:	bb10      	cbnz	r0, 801ee9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ee56:	6820      	ldr	r0, [r4, #0]
 801ee58:	ab04      	add	r3, sp, #16
 801ee5a:	6861      	ldr	r1, [r4, #4]
 801ee5c:	4c1b      	ldr	r4, [pc, #108]	@ (801eecc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801ee5e:	c303      	stmia	r3!, {r0, r1}
 801ee60:	a804      	add	r0, sp, #16
 801ee62:	f7f7 fa49 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee66:	6820      	ldr	r0, [r4, #0]
 801ee68:	6803      	ldr	r3, [r0, #0]
 801ee6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee6c:	4798      	blx	r3
 801ee6e:	2dff      	cmp	r5, #255	@ 0xff
 801ee70:	d016      	beq.n	801eea0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ee72:	f010 0f08 	tst.w	r0, #8
 801ee76:	6820      	ldr	r0, [r4, #0]
 801ee78:	d015      	beq.n	801eea6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801ee7a:	2400      	movs	r4, #0
 801ee7c:	6801      	ldr	r1, [r0, #0]
 801ee7e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ee82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ee86:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801ee8a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801ee8e:	9401      	str	r4, [sp, #4]
 801ee90:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801ee94:	9400      	str	r4, [sp, #0]
 801ee96:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801ee98:	4639      	mov	r1, r7
 801ee9a:	47a0      	blx	r4
 801ee9c:	b007      	add	sp, #28
 801ee9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eea0:	f010 0f02 	tst.w	r0, #2
 801eea4:	e7e7      	b.n	801ee76 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801eea6:	6803      	ldr	r3, [r0, #0]
 801eea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eeaa:	4798      	blx	r3
 801eeac:	4b08      	ldr	r3, [pc, #32]	@ (801eed0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801eeae:	4601      	mov	r1, r0
 801eeb0:	4630      	mov	r0, r6
 801eeb2:	881a      	ldrh	r2, [r3, #0]
 801eeb4:	6833      	ldr	r3, [r6, #0]
 801eeb6:	e9cd 7500 	strd	r7, r5, [sp]
 801eeba:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801eebc:	ab04      	add	r3, sp, #16
 801eebe:	47a8      	blx	r5
 801eec0:	6820      	ldr	r0, [r4, #0]
 801eec2:	6803      	ldr	r3, [r0, #0]
 801eec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eec6:	4798      	blx	r3
 801eec8:	e7e8      	b.n	801ee9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801eeca:	bf00      	nop
 801eecc:	20027dc0 	.word	0x20027dc0
 801eed0:	20027dba 	.word	0x20027dba

0801eed4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801eed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eed8:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801eedc:	4688      	mov	r8, r1
 801eede:	4614      	mov	r4, r2
 801eee0:	461d      	mov	r5, r3
 801eee2:	9e08      	ldr	r6, [sp, #32]
 801eee4:	2f00      	cmp	r7, #0
 801eee6:	f000 80ab 	beq.w	801f040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7f1 f9e3 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eef0:	2800      	cmp	r0, #0
 801eef2:	f040 80a5 	bne.w	801f040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801eef6:	f9b5 1000 	ldrsh.w	r1, [r5]
 801eefa:	2fff      	cmp	r7, #255	@ 0xff
 801eefc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ef00:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801ef04:	fb04 1303 	mla	r3, r4, r3, r1
 801ef08:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801ef0c:	eba4 0200 	sub.w	r2, r4, r0
 801ef10:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801ef14:	fb04 f505 	mul.w	r5, r4, r5
 801ef18:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801ef1c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801ef20:	d04a      	beq.n	801efb8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801ef22:	b2bc      	uxth	r4, r7
 801ef24:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801ef28:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801ef2c:	fa5f f788 	uxtb.w	r7, r8
 801ef30:	b2f3      	uxtb	r3, r6
 801ef32:	0040      	lsls	r0, r0, #1
 801ef34:	fb0e fe04 	mul.w	lr, lr, r4
 801ef38:	4367      	muls	r7, r4
 801ef3a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801ef3e:	4363      	muls	r3, r4
 801ef40:	fa1f fc8c 	uxth.w	ip, ip
 801ef44:	42a9      	cmp	r1, r5
 801ef46:	d27b      	bcs.n	801f040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ef48:	eb01 0900 	add.w	r9, r1, r0
 801ef4c:	4549      	cmp	r1, r9
 801ef4e:	d231      	bcs.n	801efb4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801ef50:	880a      	ldrh	r2, [r1, #0]
 801ef52:	1214      	asrs	r4, r2, #8
 801ef54:	10d6      	asrs	r6, r2, #3
 801ef56:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801ef5a:	00d2      	lsls	r2, r2, #3
 801ef5c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ef60:	b2d2      	uxtb	r2, r2
 801ef62:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801ef66:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ef6a:	fb14 f40c 	smulbb	r4, r4, ip
 801ef6e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801ef72:	fb12 f20c 	smulbb	r2, r2, ip
 801ef76:	fb16 f60c 	smulbb	r6, r6, ip
 801ef7a:	4474      	add	r4, lr
 801ef7c:	441a      	add	r2, r3
 801ef7e:	b2a4      	uxth	r4, r4
 801ef80:	443e      	add	r6, r7
 801ef82:	b292      	uxth	r2, r2
 801ef84:	f104 0a01 	add.w	sl, r4, #1
 801ef88:	b2b6      	uxth	r6, r6
 801ef8a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ef8e:	f102 0a01 	add.w	sl, r2, #1
 801ef92:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801ef96:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801ef9a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ef9e:	4322      	orrs	r2, r4
 801efa0:	1c74      	adds	r4, r6, #1
 801efa2:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801efa6:	0976      	lsrs	r6, r6, #5
 801efa8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801efac:	4332      	orrs	r2, r6
 801efae:	f821 2b02 	strh.w	r2, [r1], #2
 801efb2:	e7cb      	b.n	801ef4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801efb4:	4441      	add	r1, r8
 801efb6:	e7c5      	b.n	801ef44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801efb8:	0973      	lsrs	r3, r6, #5
 801efba:	4f22      	ldr	r7, [pc, #136]	@ (801f044 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801efbc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801efc0:	ea08 0707 	and.w	r7, r8, r7
 801efc4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801efc8:	433b      	orrs	r3, r7
 801efca:	07e7      	lsls	r7, r4, #31
 801efcc:	ea43 0306 	orr.w	r3, r3, r6
 801efd0:	b29b      	uxth	r3, r3
 801efd2:	d50b      	bpl.n	801efec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801efd4:	0040      	lsls	r0, r0, #1
 801efd6:	0052      	lsls	r2, r2, #1
 801efd8:	42a9      	cmp	r1, r5
 801efda:	d231      	bcs.n	801f040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801efdc:	180c      	adds	r4, r1, r0
 801efde:	42a1      	cmp	r1, r4
 801efe0:	d202      	bcs.n	801efe8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801efe2:	f821 3b02 	strh.w	r3, [r1], #2
 801efe6:	e7fa      	b.n	801efde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801efe8:	4411      	add	r1, r2
 801efea:	e7f5      	b.n	801efd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801efec:	078e      	lsls	r6, r1, #30
 801efee:	d008      	beq.n	801f002 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801eff0:	0066      	lsls	r6, r4, #1
 801eff2:	460a      	mov	r2, r1
 801eff4:	42aa      	cmp	r2, r5
 801eff6:	d202      	bcs.n	801effe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801eff8:	8013      	strh	r3, [r2, #0]
 801effa:	4432      	add	r2, r6
 801effc:	e7fa      	b.n	801eff4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801effe:	3102      	adds	r1, #2
 801f000:	3801      	subs	r0, #1
 801f002:	07c2      	lsls	r2, r0, #31
 801f004:	d50b      	bpl.n	801f01e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801f006:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801f00a:	0066      	lsls	r6, r4, #1
 801f00c:	3a01      	subs	r2, #1
 801f00e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801f012:	42aa      	cmp	r2, r5
 801f014:	d202      	bcs.n	801f01c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801f016:	8013      	strh	r3, [r2, #0]
 801f018:	4432      	add	r2, r6
 801f01a:	e7fa      	b.n	801f012 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801f01c:	3801      	subs	r0, #1
 801f01e:	b178      	cbz	r0, 801f040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f020:	1040      	asrs	r0, r0, #1
 801f022:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801f026:	0080      	lsls	r0, r0, #2
 801f028:	0064      	lsls	r4, r4, #1
 801f02a:	42a9      	cmp	r1, r5
 801f02c:	d208      	bcs.n	801f040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f02e:	180e      	adds	r6, r1, r0
 801f030:	460a      	mov	r2, r1
 801f032:	42b2      	cmp	r2, r6
 801f034:	d202      	bcs.n	801f03c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801f036:	f842 3b04 	str.w	r3, [r2], #4
 801f03a:	e7fa      	b.n	801f032 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801f03c:	4421      	add	r1, r4
 801f03e:	e7f4      	b.n	801f02a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801f040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f044:	00fff800 	.word	0x00fff800

0801f048 <_ZN8touchgfx8LCD16bppC1Ev>:
 801f048:	2200      	movs	r2, #0
 801f04a:	4912      	ldr	r1, [pc, #72]	@ (801f094 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801f04c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801f050:	6001      	str	r1, [r0, #0]
 801f052:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801f056:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801f05a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801f05e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801f062:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801f066:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801f06a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801f06e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801f072:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801f076:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801f07a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801f07e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801f082:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 801f086:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 801f08a:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801f08e:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801f092:	4770      	bx	lr
 801f094:	0802e500 	.word	0x0802e500

0801f098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f09c:	b08d      	sub	sp, #52	@ 0x34
 801f09e:	460d      	mov	r5, r1
 801f0a0:	4604      	mov	r4, r0
 801f0a2:	4699      	mov	r9, r3
 801f0a4:	6808      	ldr	r0, [r1, #0]
 801f0a6:	ab08      	add	r3, sp, #32
 801f0a8:	6849      	ldr	r1, [r1, #4]
 801f0aa:	c303      	stmia	r3!, {r0, r1}
 801f0ac:	6810      	ldr	r0, [r2, #0]
 801f0ae:	ab0a      	add	r3, sp, #40	@ 0x28
 801f0b0:	6851      	ldr	r1, [r2, #4]
 801f0b2:	c303      	stmia	r3!, {r0, r1}
 801f0b4:	a808      	add	r0, sp, #32
 801f0b6:	f7f7 f91f 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f0ba:	4629      	mov	r1, r5
 801f0bc:	a80a      	add	r0, sp, #40	@ 0x28
 801f0be:	4d67      	ldr	r5, [pc, #412]	@ (801f25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801f0c0:	f7f7 f95e 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f0c4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801f0c8:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801f0cc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801f0d0:	6828      	ldr	r0, [r5, #0]
 801f0d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f0d6:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 801f0da:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801f0de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f0e2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f0e6:	440a      	add	r2, r1
 801f0e8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801f0ec:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801f0f0:	4413      	add	r3, r2
 801f0f2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801f0f6:	6803      	ldr	r3, [r0, #0]
 801f0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f0fa:	4798      	blx	r3
 801f0fc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f100:	d119      	bne.n	801f136 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f102:	f010 0f20 	tst.w	r0, #32
 801f106:	6828      	ldr	r0, [r5, #0]
 801f108:	d018      	beq.n	801f13c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801f10a:	2500      	movs	r5, #0
 801f10c:	6801      	ldr	r1, [r0, #0]
 801f10e:	b2b6      	uxth	r6, r6
 801f110:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f114:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801f118:	9601      	str	r6, [sp, #4]
 801f11a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801f11e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801f122:	9502      	str	r5, [sp, #8]
 801f124:	fa1f f588 	uxth.w	r5, r8
 801f128:	9500      	str	r5, [sp, #0]
 801f12a:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801f12c:	4621      	mov	r1, r4
 801f12e:	47a8      	blx	r5
 801f130:	b00d      	add	sp, #52	@ 0x34
 801f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f136:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f13a:	e7e4      	b.n	801f106 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f13c:	6803      	ldr	r3, [r0, #0]
 801f13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f140:	4798      	blx	r3
 801f142:	4947      	ldr	r1, [pc, #284]	@ (801f260 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801f144:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801f148:	880b      	ldrh	r3, [r1, #0]
 801f14a:	468a      	mov	sl, r1
 801f14c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801f150:	fb03 5202 	mla	r2, r3, r2, r5
 801f154:	4373      	muls	r3, r6
 801f156:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f15a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f15e:	9307      	str	r3, [sp, #28]
 801f160:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f164:	9306      	str	r3, [sp, #24]
 801f166:	9b07      	ldr	r3, [sp, #28]
 801f168:	4298      	cmp	r0, r3
 801f16a:	d270      	bcs.n	801f24e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801f16c:	9b06      	ldr	r3, [sp, #24]
 801f16e:	4621      	mov	r1, r4
 801f170:	eb00 0b03 	add.w	fp, r0, r3
 801f174:	4558      	cmp	r0, fp
 801f176:	d25d      	bcs.n	801f234 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801f178:	f851 4b04 	ldr.w	r4, [r1], #4
 801f17c:	0e23      	lsrs	r3, r4, #24
 801f17e:	d014      	beq.n	801f1aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801f180:	2bff      	cmp	r3, #255	@ 0xff
 801f182:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801f186:	d112      	bne.n	801f1ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801f188:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f18c:	d10f      	bne.n	801f1ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801f18e:	0963      	lsrs	r3, r4, #5
 801f190:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801f194:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f198:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f19c:	f02c 0c07 	bic.w	ip, ip, #7
 801f1a0:	ea43 0c0c 	orr.w	ip, r3, ip
 801f1a4:	ea4c 0404 	orr.w	r4, ip, r4
 801f1a8:	8004      	strh	r4, [r0, #0]
 801f1aa:	3002      	adds	r0, #2
 801f1ac:	e7e2      	b.n	801f174 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801f1ae:	fb09 f303 	mul.w	r3, r9, r3
 801f1b2:	8807      	ldrh	r7, [r0, #0]
 801f1b4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801f1b8:	fa5f fc8c 	uxtb.w	ip, ip
 801f1bc:	1c5a      	adds	r2, r3, #1
 801f1be:	123e      	asrs	r6, r7, #8
 801f1c0:	10fd      	asrs	r5, r7, #3
 801f1c2:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801f1c6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f1ca:	00ff      	lsls	r7, r7, #3
 801f1cc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f1d0:	1212      	asrs	r2, r2, #8
 801f1d2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f1d6:	b293      	uxth	r3, r2
 801f1d8:	43d2      	mvns	r2, r2
 801f1da:	b2ff      	uxtb	r7, r7
 801f1dc:	fb1e fe03 	smulbb	lr, lr, r3
 801f1e0:	b2d2      	uxtb	r2, r2
 801f1e2:	fb1c fc03 	smulbb	ip, ip, r3
 801f1e6:	b2e4      	uxtb	r4, r4
 801f1e8:	fb06 e602 	mla	r6, r6, r2, lr
 801f1ec:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f1f0:	fb14 f403 	smulbb	r4, r4, r3
 801f1f4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801f1f8:	b2b6      	uxth	r6, r6
 801f1fa:	fb05 c502 	mla	r5, r5, r2, ip
 801f1fe:	fb07 4702 	mla	r7, r7, r2, r4
 801f202:	f106 0e01 	add.w	lr, r6, #1
 801f206:	b2ad      	uxth	r5, r5
 801f208:	b2bf      	uxth	r7, r7
 801f20a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801f20e:	f105 0c01 	add.w	ip, r5, #1
 801f212:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801f216:	1c7e      	adds	r6, r7, #1
 801f218:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f21c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801f220:	096d      	lsrs	r5, r5, #5
 801f222:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f226:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f22a:	ea46 060e 	orr.w	r6, r6, lr
 801f22e:	432e      	orrs	r6, r5
 801f230:	8006      	strh	r6, [r0, #0]
 801f232:	e7ba      	b.n	801f1aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801f234:	f8ba 3000 	ldrh.w	r3, [sl]
 801f238:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801f23c:	eba3 0308 	sub.w	r3, r3, r8
 801f240:	eba4 0408 	sub.w	r4, r4, r8
 801f244:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f248:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f24c:	e78b      	b.n	801f166 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801f24e:	4b03      	ldr	r3, [pc, #12]	@ (801f25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801f250:	6818      	ldr	r0, [r3, #0]
 801f252:	6803      	ldr	r3, [r0, #0]
 801f254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f256:	4798      	blx	r3
 801f258:	e76a      	b.n	801f130 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801f25a:	bf00      	nop
 801f25c:	20027dc0 	.word	0x20027dc0
 801f260:	20027dba 	.word	0x20027dba

0801f264 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801f264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f268:	b085      	sub	sp, #20
 801f26a:	6810      	ldr	r0, [r2, #0]
 801f26c:	460c      	mov	r4, r1
 801f26e:	6851      	ldr	r1, [r2, #4]
 801f270:	466d      	mov	r5, sp
 801f272:	4616      	mov	r6, r2
 801f274:	c503      	stmia	r5!, {r0, r1}
 801f276:	6818      	ldr	r0, [r3, #0]
 801f278:	6859      	ldr	r1, [r3, #4]
 801f27a:	c503      	stmia	r5!, {r0, r1}
 801f27c:	4668      	mov	r0, sp
 801f27e:	4d2e      	ldr	r5, [pc, #184]	@ (801f338 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801f280:	f7f7 f83a 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f284:	4631      	mov	r1, r6
 801f286:	a802      	add	r0, sp, #8
 801f288:	4e2c      	ldr	r6, [pc, #176]	@ (801f33c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801f28a:	f7f7 f879 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f28e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801f292:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f296:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f29a:	6828      	ldr	r0, [r5, #0]
 801f29c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f2a0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801f2a4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801f2a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f2ac:	f8bd 1000 	ldrh.w	r1, [sp]
 801f2b0:	440a      	add	r2, r1
 801f2b2:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f2b6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f2ba:	4413      	add	r3, r2
 801f2bc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f2c0:	6803      	ldr	r3, [r0, #0]
 801f2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2c4:	4798      	blx	r3
 801f2c6:	8833      	ldrh	r3, [r6, #0]
 801f2c8:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801f2cc:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801f2d0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f2d4:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801f340 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801f2d8:	fb03 1202 	mla	r2, r3, r2, r1
 801f2dc:	fb08 f303 	mul.w	r3, r8, r3
 801f2e0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f2e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f2e8:	4298      	cmp	r0, r3
 801f2ea:	d21d      	bcs.n	801f328 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801f2ec:	eb00 080c 	add.w	r8, r0, ip
 801f2f0:	4540      	cmp	r0, r8
 801f2f2:	d20f      	bcs.n	801f314 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801f2f4:	f854 1b04 	ldr.w	r1, [r4], #4
 801f2f8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801f2fc:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801f300:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801f304:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f308:	ea42 0209 	orr.w	r2, r2, r9
 801f30c:	430a      	orrs	r2, r1
 801f30e:	f820 2b02 	strh.w	r2, [r0], #2
 801f312:	e7ed      	b.n	801f2f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801f314:	8832      	ldrh	r2, [r6, #0]
 801f316:	1bd2      	subs	r2, r2, r7
 801f318:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f31c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f320:	1bd2      	subs	r2, r2, r7
 801f322:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801f326:	e7df      	b.n	801f2e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801f328:	6828      	ldr	r0, [r5, #0]
 801f32a:	6803      	ldr	r3, [r0, #0]
 801f32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f32e:	4798      	blx	r3
 801f330:	b005      	add	sp, #20
 801f332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f336:	bf00      	nop
 801f338:	20027dc0 	.word	0x20027dc0
 801f33c:	20027dba 	.word	0x20027dba
 801f340:	fffff800 	.word	0xfffff800

0801f344 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f348:	b08e      	sub	sp, #56	@ 0x38
 801f34a:	460e      	mov	r6, r1
 801f34c:	4604      	mov	r4, r0
 801f34e:	461d      	mov	r5, r3
 801f350:	6808      	ldr	r0, [r1, #0]
 801f352:	ab0a      	add	r3, sp, #40	@ 0x28
 801f354:	6849      	ldr	r1, [r1, #4]
 801f356:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 801f52c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801f35a:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 801f530 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801f35e:	c303      	stmia	r3!, {r0, r1}
 801f360:	6810      	ldr	r0, [r2, #0]
 801f362:	ab0c      	add	r3, sp, #48	@ 0x30
 801f364:	6851      	ldr	r1, [r2, #4]
 801f366:	c303      	stmia	r3!, {r0, r1}
 801f368:	a80a      	add	r0, sp, #40	@ 0x28
 801f36a:	f7f6 ffc5 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f36e:	4631      	mov	r1, r6
 801f370:	a80c      	add	r0, sp, #48	@ 0x30
 801f372:	f7f7 f805 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f376:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f37a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f37e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801f382:	f8d8 0000 	ldr.w	r0, [r8]
 801f386:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f38a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801f38e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801f392:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f396:	440c      	add	r4, r1
 801f398:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801f39c:	440a      	add	r2, r1
 801f39e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801f3a2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801f3a6:	4413      	add	r3, r2
 801f3a8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801f3ac:	6803      	ldr	r3, [r0, #0]
 801f3ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f3b0:	4798      	blx	r3
 801f3b2:	2dff      	cmp	r5, #255	@ 0xff
 801f3b4:	d124      	bne.n	801f400 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801f3b6:	f010 0f01 	tst.w	r0, #1
 801f3ba:	f8d8 0000 	ldr.w	r0, [r8]
 801f3be:	d022      	beq.n	801f406 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801f3c0:	2100      	movs	r1, #0
 801f3c2:	f04f 0e01 	mov.w	lr, #1
 801f3c6:	f8d0 c000 	ldr.w	ip, [r0]
 801f3ca:	b2b6      	uxth	r6, r6
 801f3cc:	f8cd e018 	str.w	lr, [sp, #24]
 801f3d0:	b2bf      	uxth	r7, r7
 801f3d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801f3d6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801f3da:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801f3de:	f8b9 e000 	ldrh.w	lr, [r9]
 801f3e2:	9503      	str	r5, [sp, #12]
 801f3e4:	9601      	str	r6, [sp, #4]
 801f3e6:	9700      	str	r7, [sp, #0]
 801f3e8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801f3ec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801f3f0:	9102      	str	r1, [sp, #8]
 801f3f2:	4621      	mov	r1, r4
 801f3f4:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801f3f8:	47a8      	blx	r5
 801f3fa:	b00e      	add	sp, #56	@ 0x38
 801f3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f400:	f010 0f04 	tst.w	r0, #4
 801f404:	e7d9      	b.n	801f3ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801f406:	6803      	ldr	r3, [r0, #0]
 801f408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f40a:	4798      	blx	r3
 801f40c:	f8b9 3000 	ldrh.w	r3, [r9]
 801f410:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f414:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801f418:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801f41c:	435e      	muls	r6, r3
 801f41e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801f422:	2dff      	cmp	r5, #255	@ 0xff
 801f424:	fb03 1202 	mla	r2, r3, r2, r1
 801f428:	ebac 0c07 	sub.w	ip, ip, r7
 801f42c:	eba3 0707 	sub.w	r7, r3, r7
 801f430:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f434:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f438:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f43c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801f440:	d049      	beq.n	801f4d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801f442:	43eb      	mvns	r3, r5
 801f444:	fa1f f985 	uxth.w	r9, r5
 801f448:	b2db      	uxtb	r3, r3
 801f44a:	42b0      	cmp	r0, r6
 801f44c:	d266      	bcs.n	801f51c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801f44e:	eb00 0a0e 	add.w	sl, r0, lr
 801f452:	4550      	cmp	r0, sl
 801f454:	4621      	mov	r1, r4
 801f456:	f104 0403 	add.w	r4, r4, #3
 801f45a:	d25b      	bcs.n	801f514 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801f45c:	8802      	ldrh	r2, [r0, #0]
 801f45e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f462:	ea4f 2822 	mov.w	r8, r2, asr #8
 801f466:	fb11 f109 	smulbb	r1, r1, r9
 801f46a:	10d5      	asrs	r5, r2, #3
 801f46c:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801f470:	00d2      	lsls	r2, r2, #3
 801f472:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f476:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801f47a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f47e:	fb08 1803 	mla	r8, r8, r3, r1
 801f482:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801f486:	b2d2      	uxtb	r2, r2
 801f488:	fb11 f109 	smulbb	r1, r1, r9
 801f48c:	fa1f f888 	uxth.w	r8, r8
 801f490:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f494:	fb05 1503 	mla	r5, r5, r3, r1
 801f498:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f49c:	fb11 f109 	smulbb	r1, r1, r9
 801f4a0:	b2ad      	uxth	r5, r5
 801f4a2:	fb02 1203 	mla	r2, r2, r3, r1
 801f4a6:	f108 0101 	add.w	r1, r8, #1
 801f4aa:	b292      	uxth	r2, r2
 801f4ac:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801f4b0:	1c51      	adds	r1, r2, #1
 801f4b2:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801f4b6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f4ba:	1c69      	adds	r1, r5, #1
 801f4bc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f4c0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f4c4:	096d      	lsrs	r5, r5, #5
 801f4c6:	ea42 0208 	orr.w	r2, r2, r8
 801f4ca:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f4ce:	432a      	orrs	r2, r5
 801f4d0:	f820 2b02 	strh.w	r2, [r0], #2
 801f4d4:	e7bd      	b.n	801f452 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801f4d6:	4a14      	ldr	r2, [pc, #80]	@ (801f528 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801f4d8:	42b0      	cmp	r0, r6
 801f4da:	d21f      	bcs.n	801f51c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801f4dc:	eb00 050e 	add.w	r5, r0, lr
 801f4e0:	42a8      	cmp	r0, r5
 801f4e2:	4621      	mov	r1, r4
 801f4e4:	f104 0403 	add.w	r4, r4, #3
 801f4e8:	d210      	bcs.n	801f50c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801f4ea:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801f4ee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f4f2:	00db      	lsls	r3, r3, #3
 801f4f4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801f4f8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f4fc:	430b      	orrs	r3, r1
 801f4fe:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f502:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801f506:	f820 3b02 	strh.w	r3, [r0], #2
 801f50a:	e7e9      	b.n	801f4e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801f50c:	4438      	add	r0, r7
 801f50e:	eb01 040c 	add.w	r4, r1, ip
 801f512:	e7e1      	b.n	801f4d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801f514:	4438      	add	r0, r7
 801f516:	eb01 040c 	add.w	r4, r1, ip
 801f51a:	e796      	b.n	801f44a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801f51c:	4b03      	ldr	r3, [pc, #12]	@ (801f52c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801f51e:	6818      	ldr	r0, [r3, #0]
 801f520:	6803      	ldr	r3, [r0, #0]
 801f522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f524:	4798      	blx	r3
 801f526:	e768      	b.n	801f3fa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801f528:	fffff800 	.word	0xfffff800
 801f52c:	20027dc0 	.word	0x20027dc0
 801f530:	20027dba 	.word	0x20027dba

0801f534 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f534:	b4f0      	push	{r4, r5, r6, r7}
 801f536:	4616      	mov	r6, r2
 801f538:	461c      	mov	r4, r3
 801f53a:	460d      	mov	r5, r1
 801f53c:	9a04      	ldr	r2, [sp, #16]
 801f53e:	2e01      	cmp	r6, #1
 801f540:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f544:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801f548:	d012      	beq.n	801f570 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801f54a:	d303      	bcc.n	801f554 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801f54c:	2e02      	cmp	r6, #2
 801f54e:	d00a      	beq.n	801f566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801f550:	bcf0      	pop	{r4, r5, r6, r7}
 801f552:	4770      	bx	lr
 801f554:	6805      	ldr	r5, [r0, #0]
 801f556:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801f55a:	68ed      	ldr	r5, [r5, #12]
 801f55c:	4613      	mov	r3, r2
 801f55e:	4622      	mov	r2, r4
 801f560:	46ac      	mov	ip, r5
 801f562:	bcf0      	pop	{r4, r5, r6, r7}
 801f564:	4760      	bx	ip
 801f566:	4621      	mov	r1, r4
 801f568:	4628      	mov	r0, r5
 801f56a:	bcf0      	pop	{r4, r5, r6, r7}
 801f56c:	f7ff bd94 	b.w	801f098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f570:	4621      	mov	r1, r4
 801f572:	4628      	mov	r0, r5
 801f574:	bcf0      	pop	{r4, r5, r6, r7}
 801f576:	f7ff bee5 	b.w	801f344 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801f57c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f580:	b093      	sub	sp, #76	@ 0x4c
 801f582:	4681      	mov	r9, r0
 801f584:	4688      	mov	r8, r1
 801f586:	6810      	ldr	r0, [r2, #0]
 801f588:	6851      	ldr	r1, [r2, #4]
 801f58a:	ac0e      	add	r4, sp, #56	@ 0x38
 801f58c:	4616      	mov	r6, r2
 801f58e:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 801f592:	4f6b      	ldr	r7, [pc, #428]	@ (801f740 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801f594:	c403      	stmia	r4!, {r0, r1}
 801f596:	6818      	ldr	r0, [r3, #0]
 801f598:	ac10      	add	r4, sp, #64	@ 0x40
 801f59a:	6859      	ldr	r1, [r3, #4]
 801f59c:	c403      	stmia	r4!, {r0, r1}
 801f59e:	a80e      	add	r0, sp, #56	@ 0x38
 801f5a0:	f7f6 feaa 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5a4:	4631      	mov	r1, r6
 801f5a6:	a810      	add	r0, sp, #64	@ 0x40
 801f5a8:	4e66      	ldr	r6, [pc, #408]	@ (801f744 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801f5aa:	f7f6 fee9 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5ae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801f5b2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801f5b6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 801f5ba:	6830      	ldr	r0, [r6, #0]
 801f5bc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f5c0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801f5c4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801f5c8:	4489      	add	r9, r1
 801f5ca:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801f5ce:	440a      	add	r2, r1
 801f5d0:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801f5d4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801f5d8:	4413      	add	r3, r2
 801f5da:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801f5de:	6803      	ldr	r3, [r0, #0]
 801f5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f5e2:	4798      	blx	r3
 801f5e4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801f5e8:	6830      	ldr	r0, [r6, #0]
 801f5ea:	d01d      	beq.n	801f628 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801f5ec:	2200      	movs	r2, #0
 801f5ee:	6801      	ldr	r1, [r0, #0]
 801f5f0:	b2a4      	uxth	r4, r4
 801f5f2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801f5f6:	b2ad      	uxth	r5, r5
 801f5f8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801f5fc:	220b      	movs	r2, #11
 801f5fe:	9207      	str	r2, [sp, #28]
 801f600:	883a      	ldrh	r2, [r7, #0]
 801f602:	9502      	str	r5, [sp, #8]
 801f604:	9206      	str	r2, [sp, #24]
 801f606:	2201      	movs	r2, #1
 801f608:	9401      	str	r4, [sp, #4]
 801f60a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801f60e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 801f612:	9203      	str	r2, [sp, #12]
 801f614:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801f618:	9200      	str	r2, [sp, #0]
 801f61a:	4642      	mov	r2, r8
 801f61c:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801f61e:	4649      	mov	r1, r9
 801f620:	47a0      	blx	r4
 801f622:	b013      	add	sp, #76	@ 0x4c
 801f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f628:	6803      	ldr	r3, [r0, #0]
 801f62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f62c:	4798      	blx	r3
 801f62e:	883b      	ldrh	r3, [r7, #0]
 801f630:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f634:	f04f 0e04 	mov.w	lr, #4
 801f638:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801f63c:	435d      	muls	r5, r3
 801f63e:	fb03 1202 	mla	r2, r3, r2, r1
 801f642:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f646:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801f64a:	920c      	str	r2, [sp, #48]	@ 0x30
 801f64c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801f650:	1b12      	subs	r2, r2, r4
 801f652:	920d      	str	r2, [sp, #52]	@ 0x34
 801f654:	0062      	lsls	r2, r4, #1
 801f656:	1b1c      	subs	r4, r3, r4
 801f658:	920a      	str	r2, [sp, #40]	@ 0x28
 801f65a:	0063      	lsls	r3, r4, #1
 801f65c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f65e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f660:	4298      	cmp	r0, r3
 801f662:	d266      	bcs.n	801f732 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801f664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f666:	eb00 0b03 	add.w	fp, r0, r3
 801f66a:	4558      	cmp	r0, fp
 801f66c:	d25c      	bcs.n	801f728 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801f66e:	f819 3b01 	ldrb.w	r3, [r9], #1
 801f672:	fb1e e303 	smlabb	r3, lr, r3, lr
 801f676:	f858 2003 	ldr.w	r2, [r8, r3]
 801f67a:	0e11      	lsrs	r1, r2, #24
 801f67c:	d012      	beq.n	801f6a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f67e:	29ff      	cmp	r1, #255	@ 0xff
 801f680:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801f684:	d110      	bne.n	801f6a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801f686:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801f68a:	d10d      	bne.n	801f6a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801f68c:	0953      	lsrs	r3, r2, #5
 801f68e:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801f692:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f696:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f69a:	f027 0707 	bic.w	r7, r7, #7
 801f69e:	431f      	orrs	r7, r3
 801f6a0:	433a      	orrs	r2, r7
 801f6a2:	8002      	strh	r2, [r0, #0]
 801f6a4:	3002      	adds	r0, #2
 801f6a6:	e7e0      	b.n	801f66a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801f6a8:	fb0a f101 	mul.w	r1, sl, r1
 801f6ac:	8806      	ldrh	r6, [r0, #0]
 801f6ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801f6b2:	b2d2      	uxtb	r2, r2
 801f6b4:	1c4b      	adds	r3, r1, #1
 801f6b6:	1235      	asrs	r5, r6, #8
 801f6b8:	10f4      	asrs	r4, r6, #3
 801f6ba:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801f6be:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f6c2:	00f6      	lsls	r6, r6, #3
 801f6c4:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801f6c8:	121b      	asrs	r3, r3, #8
 801f6ca:	b2f6      	uxtb	r6, r6
 801f6cc:	b299      	uxth	r1, r3
 801f6ce:	43db      	mvns	r3, r3
 801f6d0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f6d4:	fb1c fc01 	smulbb	ip, ip, r1
 801f6d8:	b2db      	uxtb	r3, r3
 801f6da:	fb12 f201 	smulbb	r2, r2, r1
 801f6de:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f6e2:	fb05 c503 	mla	r5, r5, r3, ip
 801f6e6:	b2ff      	uxtb	r7, r7
 801f6e8:	fb06 2203 	mla	r2, r6, r3, r2
 801f6ec:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f6f0:	fb17 f701 	smulbb	r7, r7, r1
 801f6f4:	b2ad      	uxth	r5, r5
 801f6f6:	b292      	uxth	r2, r2
 801f6f8:	fb04 7403 	mla	r4, r4, r3, r7
 801f6fc:	f105 0c01 	add.w	ip, r5, #1
 801f700:	1c57      	adds	r7, r2, #1
 801f702:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f706:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f70a:	b2a4      	uxth	r4, r4
 801f70c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801f710:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f714:	433d      	orrs	r5, r7
 801f716:	1c67      	adds	r7, r4, #1
 801f718:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801f71c:	0964      	lsrs	r4, r4, #5
 801f71e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801f722:	4325      	orrs	r5, r4
 801f724:	8005      	strh	r5, [r0, #0]
 801f726:	e7bd      	b.n	801f6a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f728:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f72a:	4418      	add	r0, r3
 801f72c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f72e:	4499      	add	r9, r3
 801f730:	e795      	b.n	801f65e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801f732:	4b04      	ldr	r3, [pc, #16]	@ (801f744 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801f734:	6818      	ldr	r0, [r3, #0]
 801f736:	6803      	ldr	r3, [r0, #0]
 801f738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f73a:	4798      	blx	r3
 801f73c:	e771      	b.n	801f622 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801f73e:	bf00      	nop
 801f740:	20027dba 	.word	0x20027dba
 801f744:	20027dc0 	.word	0x20027dc0

0801f748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f74c:	b087      	sub	sp, #28
 801f74e:	4680      	mov	r8, r0
 801f750:	460d      	mov	r5, r1
 801f752:	4614      	mov	r4, r2
 801f754:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801f758:	2e00      	cmp	r6, #0
 801f75a:	f000 80b9 	beq.w	801f8d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801f75e:	6810      	ldr	r0, [r2, #0]
 801f760:	af02      	add	r7, sp, #8
 801f762:	6851      	ldr	r1, [r2, #4]
 801f764:	c703      	stmia	r7!, {r0, r1}
 801f766:	6818      	ldr	r0, [r3, #0]
 801f768:	af04      	add	r7, sp, #16
 801f76a:	6859      	ldr	r1, [r3, #4]
 801f76c:	c703      	stmia	r7!, {r0, r1}
 801f76e:	a802      	add	r0, sp, #8
 801f770:	f7f6 fdc2 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f774:	4621      	mov	r1, r4
 801f776:	a804      	add	r0, sp, #16
 801f778:	f7f6 fe02 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f77c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f780:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f784:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801f788:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f78c:	fb14 2103 	smlabb	r1, r4, r3, r2
 801f790:	eb08 0401 	add.w	r4, r8, r1
 801f794:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f798:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f79c:	440a      	add	r2, r1
 801f79e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801f7a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f7a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f7aa:	4413      	add	r3, r2
 801f7ac:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f7b0:	4b49      	ldr	r3, [pc, #292]	@ (801f8d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801f7b2:	6818      	ldr	r0, [r3, #0]
 801f7b4:	6803      	ldr	r3, [r0, #0]
 801f7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7b8:	4798      	blx	r3
 801f7ba:	4b48      	ldr	r3, [pc, #288]	@ (801f8dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801f7bc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f7c0:	2eff      	cmp	r6, #255	@ 0xff
 801f7c2:	881a      	ldrh	r2, [r3, #0]
 801f7c4:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801f7c8:	fb02 c101 	mla	r1, r2, r1, ip
 801f7cc:	fb02 f207 	mul.w	r2, r2, r7
 801f7d0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f7d4:	f105 0104 	add.w	r1, r5, #4
 801f7d8:	461d      	mov	r5, r3
 801f7da:	d05a      	beq.n	801f892 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801f7dc:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 801f7e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f7e4:	b2b6      	uxth	r6, r6
 801f7e6:	9301      	str	r3, [sp, #4]
 801f7e8:	fa1f fe8e 	uxth.w	lr, lr
 801f7ec:	4282      	cmp	r2, r0
 801f7ee:	d96a      	bls.n	801f8c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801f7f0:	eb00 0b0a 	add.w	fp, r0, sl
 801f7f4:	4583      	cmp	fp, r0
 801f7f6:	d940      	bls.n	801f87a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801f7f8:	8805      	ldrh	r5, [r0, #0]
 801f7fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f7fe:	122f      	asrs	r7, r5, #8
 801f800:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f804:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f808:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f80c:	00ed      	lsls	r5, r5, #3
 801f80e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f812:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f816:	fb17 f70e 	smulbb	r7, r7, lr
 801f81a:	b2ed      	uxtb	r5, r5
 801f81c:	fb19 f90e 	smulbb	r9, r9, lr
 801f820:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f824:	fb15 f50e 	smulbb	r5, r5, lr
 801f828:	fb0c 7c06 	mla	ip, ip, r6, r7
 801f82c:	10df      	asrs	r7, r3, #3
 801f82e:	00db      	lsls	r3, r3, #3
 801f830:	fa1f fc8c 	uxth.w	ip, ip
 801f834:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f838:	b2db      	uxtb	r3, r3
 801f83a:	fb07 9706 	mla	r7, r7, r6, r9
 801f83e:	f10c 0901 	add.w	r9, ip, #1
 801f842:	fb03 5306 	mla	r3, r3, r6, r5
 801f846:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801f84a:	b29b      	uxth	r3, r3
 801f84c:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 801f850:	b2bf      	uxth	r7, r7
 801f852:	f103 0c01 	add.w	ip, r3, #1
 801f856:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f85a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f85e:	ea4c 0c09 	orr.w	ip, ip, r9
 801f862:	f107 0901 	add.w	r9, r7, #1
 801f866:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f86a:	097f      	lsrs	r7, r7, #5
 801f86c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f870:	ea4c 0c07 	orr.w	ip, ip, r7
 801f874:	f820 cb02 	strh.w	ip, [r0], #2
 801f878:	e7bc      	b.n	801f7f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801f87a:	9b01      	ldr	r3, [sp, #4]
 801f87c:	881b      	ldrh	r3, [r3, #0]
 801f87e:	eba3 0308 	sub.w	r3, r3, r8
 801f882:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f886:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f88a:	eba3 0308 	sub.w	r3, r3, r8
 801f88e:	441c      	add	r4, r3
 801f890:	e7ac      	b.n	801f7ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801f892:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f896:	4282      	cmp	r2, r0
 801f898:	d915      	bls.n	801f8c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801f89a:	eb00 060a 	add.w	r6, r0, sl
 801f89e:	4286      	cmp	r6, r0
 801f8a0:	d906      	bls.n	801f8b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801f8a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f8a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f8aa:	f820 3b02 	strh.w	r3, [r0], #2
 801f8ae:	e7f6      	b.n	801f89e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801f8b0:	882b      	ldrh	r3, [r5, #0]
 801f8b2:	eba3 0308 	sub.w	r3, r3, r8
 801f8b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f8ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f8be:	eba3 0308 	sub.w	r3, r3, r8
 801f8c2:	441c      	add	r4, r3
 801f8c4:	e7e7      	b.n	801f896 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801f8c6:	4b04      	ldr	r3, [pc, #16]	@ (801f8d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801f8c8:	6818      	ldr	r0, [r3, #0]
 801f8ca:	6803      	ldr	r3, [r0, #0]
 801f8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8ce:	4798      	blx	r3
 801f8d0:	b007      	add	sp, #28
 801f8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8d6:	bf00      	nop
 801f8d8:	20027dc0 	.word	0x20027dc0
 801f8dc:	20027dba 	.word	0x20027dba

0801f8e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e4:	b091      	sub	sp, #68	@ 0x44
 801f8e6:	4680      	mov	r8, r0
 801f8e8:	460f      	mov	r7, r1
 801f8ea:	4614      	mov	r4, r2
 801f8ec:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 801f8f0:	2d00      	cmp	r5, #0
 801f8f2:	d051      	beq.n	801f998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801f8f4:	6810      	ldr	r0, [r2, #0]
 801f8f6:	ae0c      	add	r6, sp, #48	@ 0x30
 801f8f8:	6851      	ldr	r1, [r2, #4]
 801f8fa:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 801fafc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801f8fe:	c603      	stmia	r6!, {r0, r1}
 801f900:	6818      	ldr	r0, [r3, #0]
 801f902:	ae0e      	add	r6, sp, #56	@ 0x38
 801f904:	6859      	ldr	r1, [r3, #4]
 801f906:	c603      	stmia	r6!, {r0, r1}
 801f908:	a80c      	add	r0, sp, #48	@ 0x30
 801f90a:	f7f6 fcf5 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f90e:	4621      	mov	r1, r4
 801f910:	a80e      	add	r0, sp, #56	@ 0x38
 801f912:	f7f6 fd35 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f916:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f91a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f91e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801f922:	f8d9 0000 	ldr.w	r0, [r9]
 801f926:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f92a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801f92e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 801f932:	eb08 0401 	add.w	r4, r8, r1
 801f936:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801f93a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 801fb00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801f93e:	440a      	add	r2, r1
 801f940:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801f944:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801f948:	4413      	add	r3, r2
 801f94a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801f94e:	6803      	ldr	r3, [r0, #0]
 801f950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f952:	4798      	blx	r3
 801f954:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801f958:	f8d9 0000 	ldr.w	r0, [r9]
 801f95c:	d01f      	beq.n	801f99e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f95e:	2200      	movs	r2, #0
 801f960:	6801      	ldr	r1, [r0, #0]
 801f962:	b2b6      	uxth	r6, r6
 801f964:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f968:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801f96c:	220b      	movs	r2, #11
 801f96e:	9207      	str	r2, [sp, #28]
 801f970:	f8b8 2000 	ldrh.w	r2, [r8]
 801f974:	9601      	str	r6, [sp, #4]
 801f976:	9206      	str	r2, [sp, #24]
 801f978:	2201      	movs	r2, #1
 801f97a:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801f97e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801f982:	9203      	str	r2, [sp, #12]
 801f984:	fa1f f28a 	uxth.w	r2, sl
 801f988:	9202      	str	r2, [sp, #8]
 801f98a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801f98e:	9200      	str	r2, [sp, #0]
 801f990:	463a      	mov	r2, r7
 801f992:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801f994:	4621      	mov	r1, r4
 801f996:	47a8      	blx	r5
 801f998:	b011      	add	sp, #68	@ 0x44
 801f99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f99e:	6803      	ldr	r3, [r0, #0]
 801f9a0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801f9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9a6:	4798      	blx	r3
 801f9a8:	f8b8 2000 	ldrh.w	r2, [r8]
 801f9ac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f9b0:	2dff      	cmp	r5, #255	@ 0xff
 801f9b2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801f9b6:	fb0a fa02 	mul.w	sl, sl, r2
 801f9ba:	fb02 1303 	mla	r3, r2, r3, r1
 801f9be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f9c2:	d062      	beq.n	801fa8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801f9c4:	ea6f 0c05 	mvn.w	ip, r5
 801f9c8:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801f9cc:	b2ad      	uxth	r5, r5
 801f9ce:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801f9d2:	fa5f fc8c 	uxtb.w	ip, ip
 801f9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9da:	4298      	cmp	r0, r3
 801f9dc:	f080 8085 	bcs.w	801faea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801f9e0:	eb00 0b09 	add.w	fp, r0, r9
 801f9e4:	4558      	cmp	r0, fp
 801f9e6:	d246      	bcs.n	801fa76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801f9e8:	f814 eb01 	ldrb.w	lr, [r4], #1
 801f9ec:	2303      	movs	r3, #3
 801f9ee:	2204      	movs	r2, #4
 801f9f0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801f9f4:	8803      	ldrh	r3, [r0, #0]
 801f9f6:	eb07 0a0e 	add.w	sl, r7, lr
 801f9fa:	1219      	asrs	r1, r3, #8
 801f9fc:	10da      	asrs	r2, r3, #3
 801f9fe:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801fa02:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801fa06:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801fa0a:	00db      	lsls	r3, r3, #3
 801fa0c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801fa10:	fb18 f805 	smulbb	r8, r8, r5
 801fa14:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801fa18:	fb1e fe05 	smulbb	lr, lr, r5
 801fa1c:	b2db      	uxtb	r3, r3
 801fa1e:	fb01 810c 	mla	r1, r1, ip, r8
 801fa22:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fa26:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801fa2a:	fb18 f805 	smulbb	r8, r8, r5
 801fa2e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801fa32:	b289      	uxth	r1, r1
 801fa34:	fb02 820c 	mla	r2, r2, ip, r8
 801fa38:	fb03 e30c 	mla	r3, r3, ip, lr
 801fa3c:	f101 0801 	add.w	r8, r1, #1
 801fa40:	b292      	uxth	r2, r2
 801fa42:	b29b      	uxth	r3, r3
 801fa44:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801fa48:	f102 0801 	add.w	r8, r2, #1
 801fa4c:	f103 0e01 	add.w	lr, r3, #1
 801fa50:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801fa54:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801fa58:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801fa5c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fa60:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801fa64:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801fa68:	ea4e 0101 	orr.w	r1, lr, r1
 801fa6c:	ea41 0108 	orr.w	r1, r1, r8
 801fa70:	f820 1b02 	strh.w	r1, [r0], #2
 801fa74:	e7b6      	b.n	801f9e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801fa76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa78:	881b      	ldrh	r3, [r3, #0]
 801fa7a:	1b9b      	subs	r3, r3, r6
 801fa7c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fa80:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801fa84:	1b9b      	subs	r3, r3, r6
 801fa86:	441c      	add	r4, r3
 801fa88:	e7a6      	b.n	801f9d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801fa8a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801fa8e:	2203      	movs	r2, #3
 801fa90:	2504      	movs	r5, #4
 801fa92:	4919      	ldr	r1, [pc, #100]	@ (801faf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801fa94:	4550      	cmp	r0, sl
 801fa96:	d228      	bcs.n	801faea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801fa98:	eb00 0c09 	add.w	ip, r0, r9
 801fa9c:	4560      	cmp	r0, ip
 801fa9e:	4623      	mov	r3, r4
 801faa0:	d219      	bcs.n	801fad6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801faa2:	f893 e000 	ldrb.w	lr, [r3]
 801faa6:	3401      	adds	r4, #1
 801faa8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801faac:	eb07 0b0e 	add.w	fp, r7, lr
 801fab0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801fab4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801fab8:	f89b b001 	ldrb.w	fp, [fp, #1]
 801fabc:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801fac0:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801fac4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fac8:	ea43 030b 	orr.w	r3, r3, fp
 801facc:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801fad0:	f820 3b02 	strh.w	r3, [r0], #2
 801fad4:	e7e2      	b.n	801fa9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801fad6:	f8b8 3000 	ldrh.w	r3, [r8]
 801fada:	1b9b      	subs	r3, r3, r6
 801fadc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fae0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801fae4:	1b9b      	subs	r3, r3, r6
 801fae6:	441c      	add	r4, r3
 801fae8:	e7d4      	b.n	801fa94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801faea:	4b04      	ldr	r3, [pc, #16]	@ (801fafc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801faec:	6818      	ldr	r0, [r3, #0]
 801faee:	6803      	ldr	r3, [r0, #0]
 801faf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801faf2:	4798      	blx	r3
 801faf4:	e750      	b.n	801f998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801faf6:	bf00      	nop
 801faf8:	fffff800 	.word	0xfffff800
 801fafc:	20027dc0 	.word	0x20027dc0
 801fb00:	20027dba 	.word	0x20027dba

0801fb04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801fb04:	b4f0      	push	{r4, r5, r6, r7}
 801fb06:	460c      	mov	r4, r1
 801fb08:	4611      	mov	r1, r2
 801fb0a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801fb0e:	461a      	mov	r2, r3
 801fb10:	780f      	ldrb	r7, [r1, #0]
 801fb12:	9b04      	ldr	r3, [sp, #16]
 801fb14:	2f01      	cmp	r7, #1
 801fb16:	784e      	ldrb	r6, [r1, #1]
 801fb18:	d038      	beq.n	801fb8c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801fb1a:	d31f      	bcc.n	801fb5c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 801fb1c:	2f02      	cmp	r7, #2
 801fb1e:	d14d      	bne.n	801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fb20:	2e03      	cmp	r6, #3
 801fb22:	d84b      	bhi.n	801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fb24:	e8df f006 	tbb	[pc, r6]
 801fb28:	17140702 	.word	0x17140702
 801fb2c:	9504      	str	r5, [sp, #16]
 801fb2e:	4620      	mov	r0, r4
 801fb30:	bcf0      	pop	{r4, r5, r6, r7}
 801fb32:	f7ff be09 	b.w	801f748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801fb36:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801fb38:	2800      	cmp	r0, #0
 801fb3a:	d03f      	beq.n	801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fb3c:	6806      	ldr	r6, [r0, #0]
 801fb3e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801fb42:	68b5      	ldr	r5, [r6, #8]
 801fb44:	4613      	mov	r3, r2
 801fb46:	46ac      	mov	ip, r5
 801fb48:	460a      	mov	r2, r1
 801fb4a:	4621      	mov	r1, r4
 801fb4c:	bcf0      	pop	{r4, r5, r6, r7}
 801fb4e:	4760      	bx	ip
 801fb50:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801fb54:	e7f0      	b.n	801fb38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801fb56:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801fb5a:	e7ed      	b.n	801fb38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801fb5c:	2e03      	cmp	r6, #3
 801fb5e:	d82d      	bhi.n	801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fb60:	e8df f006 	tbb	[pc, r6]
 801fb64:	110e0702 	.word	0x110e0702
 801fb68:	9504      	str	r5, [sp, #16]
 801fb6a:	4620      	mov	r0, r4
 801fb6c:	bcf0      	pop	{r4, r5, r6, r7}
 801fb6e:	f7ff bd05 	b.w	801f57c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801fb72:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801fb74:	b310      	cbz	r0, 801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fb76:	6806      	ldr	r6, [r0, #0]
 801fb78:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801fb7c:	68f5      	ldr	r5, [r6, #12]
 801fb7e:	e7e1      	b.n	801fb44 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801fb80:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801fb84:	e7f6      	b.n	801fb74 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801fb86:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801fb8a:	e7f3      	b.n	801fb74 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801fb8c:	2e03      	cmp	r6, #3
 801fb8e:	d815      	bhi.n	801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fb90:	e8df f006 	tbb	[pc, r6]
 801fb94:	110e0702 	.word	0x110e0702
 801fb98:	9504      	str	r5, [sp, #16]
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	bcf0      	pop	{r4, r5, r6, r7}
 801fb9e:	f7ff be9f 	b.w	801f8e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801fba2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801fba4:	b150      	cbz	r0, 801fbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801fba6:	6806      	ldr	r6, [r0, #0]
 801fba8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801fbac:	6935      	ldr	r5, [r6, #16]
 801fbae:	e7c9      	b.n	801fb44 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801fbb0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801fbb4:	e7f6      	b.n	801fba4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801fbb6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801fbba:	e7f3      	b.n	801fba4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801fbbc:	bcf0      	pop	{r4, r5, r6, r7}
 801fbbe:	4770      	bx	lr

0801fbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc4:	b087      	sub	sp, #28
 801fbc6:	4604      	mov	r4, r0
 801fbc8:	460e      	mov	r6, r1
 801fbca:	6810      	ldr	r0, [r2, #0]
 801fbcc:	6851      	ldr	r1, [r2, #4]
 801fbce:	ad02      	add	r5, sp, #8
 801fbd0:	4617      	mov	r7, r2
 801fbd2:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 801fbd6:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 801fe08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801fbda:	c503      	stmia	r5!, {r0, r1}
 801fbdc:	6818      	ldr	r0, [r3, #0]
 801fbde:	ad04      	add	r5, sp, #16
 801fbe0:	6859      	ldr	r1, [r3, #4]
 801fbe2:	c503      	stmia	r5!, {r0, r1}
 801fbe4:	a802      	add	r0, sp, #8
 801fbe6:	f7f6 fb87 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fbea:	4639      	mov	r1, r7
 801fbec:	a804      	add	r0, sp, #16
 801fbee:	f7f6 fbc7 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fbf2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801fbf6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801fbfa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801fbfe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801fc02:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fc06:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801fc0a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801fc0e:	440e      	add	r6, r1
 801fc10:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801fc14:	440a      	add	r2, r1
 801fc16:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fc1a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801fc1e:	4413      	add	r3, r2
 801fc20:	f8ad 3012 	strh.w	r3, [sp, #18]
 801fc24:	4b77      	ldr	r3, [pc, #476]	@ (801fe04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801fc26:	6818      	ldr	r0, [r3, #0]
 801fc28:	6803      	ldr	r3, [r0, #0]
 801fc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc2c:	4798      	blx	r3
 801fc2e:	f8b9 b000 	ldrh.w	fp, [r9]
 801fc32:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801fc36:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801fc3a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801fc3e:	fb05 f50b 	mul.w	r5, r5, fp
 801fc42:	fb0b 2303 	mla	r3, fp, r3, r2
 801fc46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc4a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fc4e:	9300      	str	r3, [sp, #0]
 801fc50:	d069      	beq.n	801fd26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801fc52:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801fc56:	4558      	cmp	r0, fp
 801fc58:	f080 80cc 	bcs.w	801fdf4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801fc5c:	9b00      	ldr	r3, [sp, #0]
 801fc5e:	4631      	mov	r1, r6
 801fc60:	18c3      	adds	r3, r0, r3
 801fc62:	9301      	str	r3, [sp, #4]
 801fc64:	9b01      	ldr	r3, [sp, #4]
 801fc66:	4298      	cmp	r0, r3
 801fc68:	d24f      	bcs.n	801fd0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801fc6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fc6e:	2a00      	cmp	r2, #0
 801fc70:	d048      	beq.n	801fd04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801fc72:	fb0a f202 	mul.w	r2, sl, r2
 801fc76:	1c53      	adds	r3, r2, #1
 801fc78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fc7c:	121b      	asrs	r3, r3, #8
 801fc7e:	d041      	beq.n	801fd04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801fc80:	8802      	ldrh	r2, [r0, #0]
 801fc82:	b29e      	uxth	r6, r3
 801fc84:	f8b4 c000 	ldrh.w	ip, [r4]
 801fc88:	43db      	mvns	r3, r3
 801fc8a:	1215      	asrs	r5, r2, #8
 801fc8c:	b2db      	uxtb	r3, r3
 801fc8e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fc92:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fc96:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801fc9a:	fb15 f503 	smulbb	r5, r5, r3
 801fc9e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fca2:	00d2      	lsls	r2, r2, #3
 801fca4:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801fca8:	fb07 5706 	mla	r7, r7, r6, r5
 801fcac:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fcb0:	b2d2      	uxtb	r2, r2
 801fcb2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fcb6:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fcba:	fb1e fe03 	smulbb	lr, lr, r3
 801fcbe:	b2bf      	uxth	r7, r7
 801fcc0:	fb12 f203 	smulbb	r2, r2, r3
 801fcc4:	fa5f fc8c 	uxtb.w	ip, ip
 801fcc8:	fb05 e506 	mla	r5, r5, r6, lr
 801fccc:	f107 0e01 	add.w	lr, r7, #1
 801fcd0:	fb0c 2c06 	mla	ip, ip, r6, r2
 801fcd4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801fcd8:	fa1f fc8c 	uxth.w	ip, ip
 801fcdc:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 801fce0:	b2ad      	uxth	r5, r5
 801fce2:	f10c 0701 	add.w	r7, ip, #1
 801fce6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fcea:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fcee:	ea47 070e 	orr.w	r7, r7, lr
 801fcf2:	f105 0e01 	add.w	lr, r5, #1
 801fcf6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801fcfa:	096d      	lsrs	r5, r5, #5
 801fcfc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fd00:	432f      	orrs	r7, r5
 801fd02:	8007      	strh	r7, [r0, #0]
 801fd04:	3002      	adds	r0, #2
 801fd06:	3402      	adds	r4, #2
 801fd08:	e7ac      	b.n	801fc64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801fd0a:	f8b9 3000 	ldrh.w	r3, [r9]
 801fd0e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801fd12:	eba3 0308 	sub.w	r3, r3, r8
 801fd16:	eba6 0608 	sub.w	r6, r6, r8
 801fd1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fd1e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801fd22:	440e      	add	r6, r1
 801fd24:	e797      	b.n	801fc56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801fd26:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801fd2a:	42a8      	cmp	r0, r5
 801fd2c:	d262      	bcs.n	801fdf4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801fd2e:	9b00      	ldr	r3, [sp, #0]
 801fd30:	4631      	mov	r1, r6
 801fd32:	eb00 0b03 	add.w	fp, r0, r3
 801fd36:	4558      	cmp	r0, fp
 801fd38:	d24e      	bcs.n	801fdd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801fd3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd3e:	b12b      	cbz	r3, 801fd4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801fd40:	2bff      	cmp	r3, #255	@ 0xff
 801fd42:	f8b4 e000 	ldrh.w	lr, [r4]
 801fd46:	d104      	bne.n	801fd52 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801fd48:	f8a0 e000 	strh.w	lr, [r0]
 801fd4c:	3002      	adds	r0, #2
 801fd4e:	3402      	adds	r4, #2
 801fd50:	e7f1      	b.n	801fd36 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801fd52:	8802      	ldrh	r2, [r0, #0]
 801fd54:	b29f      	uxth	r7, r3
 801fd56:	43db      	mvns	r3, r3
 801fd58:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fd5c:	1216      	asrs	r6, r2, #8
 801fd5e:	b2db      	uxtb	r3, r3
 801fd60:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fd64:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fd68:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801fd6c:	00d2      	lsls	r2, r2, #3
 801fd6e:	fb16 f603 	smulbb	r6, r6, r3
 801fd72:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801fd76:	b2d2      	uxtb	r2, r2
 801fd78:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fd7c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fd80:	fb1a fa03 	smulbb	sl, sl, r3
 801fd84:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fd88:	fa1f fc8c 	uxth.w	ip, ip
 801fd8c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fd90:	fb12 f303 	smulbb	r3, r2, r3
 801fd94:	fa5f fe8e 	uxtb.w	lr, lr
 801fd98:	fb06 a607 	mla	r6, r6, r7, sl
 801fd9c:	f10c 0201 	add.w	r2, ip, #1
 801fda0:	fb0e 3307 	mla	r3, lr, r7, r3
 801fda4:	b2b6      	uxth	r6, r6
 801fda6:	b29b      	uxth	r3, r3
 801fda8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fdac:	f106 0a01 	add.w	sl, r6, #1
 801fdb0:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801fdb4:	f103 0c01 	add.w	ip, r3, #1
 801fdb8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801fdbc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801fdc0:	0976      	lsrs	r6, r6, #5
 801fdc2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fdc6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fdca:	ea4c 0c02 	orr.w	ip, ip, r2
 801fdce:	ea4c 0c06 	orr.w	ip, ip, r6
 801fdd2:	f8a0 c000 	strh.w	ip, [r0]
 801fdd6:	e7b9      	b.n	801fd4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801fdd8:	f8b9 3000 	ldrh.w	r3, [r9]
 801fddc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801fde0:	eba3 0308 	sub.w	r3, r3, r8
 801fde4:	eba6 0608 	sub.w	r6, r6, r8
 801fde8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fdec:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801fdf0:	440e      	add	r6, r1
 801fdf2:	e79a      	b.n	801fd2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801fdf4:	4b03      	ldr	r3, [pc, #12]	@ (801fe04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801fdf6:	6818      	ldr	r0, [r3, #0]
 801fdf8:	6803      	ldr	r3, [r0, #0]
 801fdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fdfc:	4798      	blx	r3
 801fdfe:	b007      	add	sp, #28
 801fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe04:	20027dc0 	.word	0x20027dc0
 801fe08:	20027dba 	.word	0x20027dba

0801fe0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe10:	b089      	sub	sp, #36	@ 0x24
 801fe12:	4607      	mov	r7, r0
 801fe14:	4688      	mov	r8, r1
 801fe16:	4692      	mov	sl, r2
 801fe18:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801fe1c:	4699      	mov	r9, r3
 801fe1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fe20:	2e00      	cmp	r6, #0
 801fe22:	d048      	beq.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801fe24:	4608      	mov	r0, r1
 801fe26:	f7fa f811 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fe2a:	4605      	mov	r5, r0
 801fe2c:	4640      	mov	r0, r8
 801fe2e:	f7fa f841 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fe32:	f8ad 000e 	strh.w	r0, [sp, #14]
 801fe36:	4640      	mov	r0, r8
 801fe38:	f8ad a008 	strh.w	sl, [sp, #8]
 801fe3c:	f8ad 500c 	strh.w	r5, [sp, #12]
 801fe40:	f8ad 900a 	strh.w	r9, [sp, #10]
 801fe44:	f7fa f8f4 	bl	801a030 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe48:	4605      	mov	r5, r0
 801fe4a:	4640      	mov	r0, r8
 801fe4c:	f7fa f920 	bl	801a090 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801fe50:	4682      	mov	sl, r0
 801fe52:	4640      	mov	r0, r8
 801fe54:	f7fa f970 	bl	801a138 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fe58:	2810      	cmp	r0, #16
 801fe5a:	d82c      	bhi.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801fe5c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801fe60:	00ba00ca 	.word	0x00ba00ca
 801fe64:	002b0011 	.word	0x002b0011
 801fe68:	002b002b 	.word	0x002b002b
 801fe6c:	002b002b 	.word	0x002b002b
 801fe70:	002b002b 	.word	0x002b002b
 801fe74:	00c1002b 	.word	0x00c1002b
 801fe78:	002b002b 	.word	0x002b002b
 801fe7c:	002b0180 	.word	0x002b0180
 801fe80:	0173      	.short	0x0173
 801fe82:	4bbc      	ldr	r3, [pc, #752]	@ (8020174 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 801fe84:	6818      	ldr	r0, [r3, #0]
 801fe86:	6803      	ldr	r3, [r0, #0]
 801fe88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fe8a:	4798      	blx	r3
 801fe8c:	2eff      	cmp	r6, #255	@ 0xff
 801fe8e:	d101      	bne.n	801fe94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801fe90:	0683      	lsls	r3, r0, #26
 801fe92:	d506      	bpl.n	801fea2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 801fe94:	4633      	mov	r3, r6
 801fe96:	4622      	mov	r2, r4
 801fe98:	a902      	add	r1, sp, #8
 801fe9a:	4628      	mov	r0, r5
 801fe9c:	f7ff f8fc 	bl	801f098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fea0:	e009      	b.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801fea2:	4640      	mov	r0, r8
 801fea4:	f7fa f88c 	bl	8019fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801fea8:	b940      	cbnz	r0, 801febc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 801feaa:	4623      	mov	r3, r4
 801feac:	aa02      	add	r2, sp, #8
 801feae:	4629      	mov	r1, r5
 801feb0:	4638      	mov	r0, r7
 801feb2:	f7ff f9d7 	bl	801f264 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801feb6:	b009      	add	sp, #36	@ 0x24
 801feb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801febc:	f10d 0918 	add.w	r9, sp, #24
 801fec0:	4641      	mov	r1, r8
 801fec2:	f10d 0810 	add.w	r8, sp, #16
 801fec6:	4648      	mov	r0, r9
 801fec8:	f7fa f828 	bl	8019f1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801fecc:	e899 0003 	ldmia.w	r9, {r0, r1}
 801fed0:	e888 0003 	stmia.w	r8, {r0, r1}
 801fed4:	4640      	mov	r0, r8
 801fed6:	4621      	mov	r1, r4
 801fed8:	f7f0 f9aa 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 801fedc:	4640      	mov	r0, r8
 801fede:	f7f0 f9ea 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801fee2:	2800      	cmp	r0, #0
 801fee4:	d1d6      	bne.n	801fe94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801fee6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801feea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801feee:	4293      	cmp	r3, r2
 801fef0:	dd12      	ble.n	801ff18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 801fef2:	1a9b      	subs	r3, r3, r2
 801fef4:	f9b4 0000 	ldrsh.w	r0, [r4]
 801fef8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fefc:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ff00:	4628      	mov	r0, r5
 801ff02:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ff06:	464a      	mov	r2, r9
 801ff08:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ff0c:	a902      	add	r1, sp, #8
 801ff0e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ff12:	4633      	mov	r3, r6
 801ff14:	f7ff f8c0 	bl	801f098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ff18:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ff1c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ff20:	4293      	cmp	r3, r2
 801ff22:	dd12      	ble.n	801ff4a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 801ff24:	1a9b      	subs	r3, r3, r2
 801ff26:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ff2a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ff2e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ff32:	464a      	mov	r2, r9
 801ff34:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ff38:	4628      	mov	r0, r5
 801ff3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ff3e:	23ff      	movs	r3, #255	@ 0xff
 801ff40:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ff44:	a902      	add	r1, sp, #8
 801ff46:	f7ff f8a7 	bl	801f098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ff4a:	4643      	mov	r3, r8
 801ff4c:	aa02      	add	r2, sp, #8
 801ff4e:	4629      	mov	r1, r5
 801ff50:	4638      	mov	r0, r7
 801ff52:	f7ff f987 	bl	801f264 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801ff56:	88a2      	ldrh	r2, [r4, #4]
 801ff58:	8823      	ldrh	r3, [r4, #0]
 801ff5a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ff5e:	4413      	add	r3, r2
 801ff60:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ff64:	440a      	add	r2, r1
 801ff66:	b29b      	uxth	r3, r3
 801ff68:	b292      	uxth	r2, r2
 801ff6a:	b218      	sxth	r0, r3
 801ff6c:	b211      	sxth	r1, r2
 801ff6e:	4288      	cmp	r0, r1
 801ff70:	dd12      	ble.n	801ff98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 801ff72:	1a9b      	subs	r3, r3, r2
 801ff74:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ff78:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801ff7c:	464a      	mov	r2, r9
 801ff7e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ff82:	a902      	add	r1, sp, #8
 801ff84:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ff88:	23ff      	movs	r3, #255	@ 0xff
 801ff8a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ff8e:	4628      	mov	r0, r5
 801ff90:	f8ad 601a 	strh.w	r6, [sp, #26]
 801ff94:	f7ff f880 	bl	801f098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ff98:	88e2      	ldrh	r2, [r4, #6]
 801ff9a:	8863      	ldrh	r3, [r4, #2]
 801ff9c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ffa0:	4413      	add	r3, r2
 801ffa2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ffa6:	440a      	add	r2, r1
 801ffa8:	b29b      	uxth	r3, r3
 801ffaa:	b292      	uxth	r2, r2
 801ffac:	b218      	sxth	r0, r3
 801ffae:	b211      	sxth	r1, r2
 801ffb0:	4288      	cmp	r0, r1
 801ffb2:	dd80      	ble.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801ffb4:	1a9b      	subs	r3, r3, r2
 801ffb6:	f9b4 6000 	ldrsh.w	r6, [r4]
 801ffba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ffbe:	464a      	mov	r2, r9
 801ffc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ffc4:	23ff      	movs	r3, #255	@ 0xff
 801ffc6:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ffca:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ffce:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ffd2:	e761      	b.n	801fe98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801ffd4:	4633      	mov	r3, r6
 801ffd6:	4622      	mov	r2, r4
 801ffd8:	a902      	add	r1, sp, #8
 801ffda:	4628      	mov	r0, r5
 801ffdc:	f7ff f9b2 	bl	801f344 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801ffe0:	e769      	b.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801ffe2:	e9cd 4600 	strd	r4, r6, [sp]
 801ffe6:	ab02      	add	r3, sp, #8
 801ffe8:	4652      	mov	r2, sl
 801ffea:	4629      	mov	r1, r5
 801ffec:	4638      	mov	r0, r7
 801ffee:	f7ff fd89 	bl	801fb04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801fff2:	e760      	b.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801fff4:	4640      	mov	r0, r8
 801fff6:	f7f9 ffe3 	bl	8019fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801fffa:	b948      	cbnz	r0, 8020010 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 801fffc:	683b      	ldr	r3, [r7, #0]
 801fffe:	aa02      	add	r2, sp, #8
 8020000:	4629      	mov	r1, r5
 8020002:	e9cd 6000 	strd	r6, r0, [sp]
 8020006:	4638      	mov	r0, r7
 8020008:	68de      	ldr	r6, [r3, #12]
 802000a:	4623      	mov	r3, r4
 802000c:	47b0      	blx	r6
 802000e:	e752      	b.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020010:	f10d 0918 	add.w	r9, sp, #24
 8020014:	4641      	mov	r1, r8
 8020016:	f10d 0810 	add.w	r8, sp, #16
 802001a:	4648      	mov	r0, r9
 802001c:	f7f9 ff7e 	bl	8019f1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020020:	e899 0003 	ldmia.w	r9, {r0, r1}
 8020024:	e888 0003 	stmia.w	r8, {r0, r1}
 8020028:	4640      	mov	r0, r8
 802002a:	4621      	mov	r1, r4
 802002c:	f7f0 f900 	bl	8010230 <_ZN8touchgfx4RectaNERKS0_>
 8020030:	4640      	mov	r0, r8
 8020032:	f7f0 f940 	bl	80102b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020036:	b138      	cbz	r0, 8020048 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8020038:	4623      	mov	r3, r4
 802003a:	9600      	str	r6, [sp, #0]
 802003c:	aa02      	add	r2, sp, #8
 802003e:	4651      	mov	r1, sl
 8020040:	4628      	mov	r0, r5
 8020042:	f7ff fdbd 	bl	801fbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020046:	e736      	b.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020048:	683b      	ldr	r3, [r7, #0]
 802004a:	aa02      	add	r2, sp, #8
 802004c:	4629      	mov	r1, r5
 802004e:	e9cd 6000 	strd	r6, r0, [sp]
 8020052:	4638      	mov	r0, r7
 8020054:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8020058:	4643      	mov	r3, r8
 802005a:	47d8      	blx	fp
 802005c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020060:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020064:	4293      	cmp	r3, r2
 8020066:	dd13      	ble.n	8020090 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8020068:	f9b4 0000 	ldrsh.w	r0, [r4]
 802006c:	1a9b      	subs	r3, r3, r2
 802006e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020072:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020076:	4628      	mov	r0, r5
 8020078:	f8ad 201a 	strh.w	r2, [sp, #26]
 802007c:	aa02      	add	r2, sp, #8
 802007e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020082:	4651      	mov	r1, sl
 8020084:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020088:	464b      	mov	r3, r9
 802008a:	9600      	str	r6, [sp, #0]
 802008c:	f7ff fd98 	bl	801fbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020090:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020094:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020098:	4293      	cmp	r3, r2
 802009a:	dd13      	ble.n	80200c4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 802009c:	1a9b      	subs	r3, r3, r2
 802009e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80200a2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80200a6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80200aa:	aa02      	add	r2, sp, #8
 80200ac:	f8ad 001a 	strh.w	r0, [sp, #26]
 80200b0:	4628      	mov	r0, r5
 80200b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80200b6:	464b      	mov	r3, r9
 80200b8:	f8ad 101e 	strh.w	r1, [sp, #30]
 80200bc:	4651      	mov	r1, sl
 80200be:	9600      	str	r6, [sp, #0]
 80200c0:	f7ff fd7e 	bl	801fbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80200c4:	88a2      	ldrh	r2, [r4, #4]
 80200c6:	8823      	ldrh	r3, [r4, #0]
 80200c8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80200cc:	4413      	add	r3, r2
 80200ce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80200d2:	440a      	add	r2, r1
 80200d4:	b29b      	uxth	r3, r3
 80200d6:	b292      	uxth	r2, r2
 80200d8:	b218      	sxth	r0, r3
 80200da:	b211      	sxth	r1, r2
 80200dc:	4288      	cmp	r0, r1
 80200de:	dd13      	ble.n	8020108 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 80200e0:	1a9b      	subs	r3, r3, r2
 80200e2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80200e6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80200ea:	aa02      	add	r2, sp, #8
 80200ec:	f8ad 1018 	strh.w	r1, [sp, #24]
 80200f0:	4651      	mov	r1, sl
 80200f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80200f6:	464b      	mov	r3, r9
 80200f8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80200fc:	4628      	mov	r0, r5
 80200fe:	9600      	str	r6, [sp, #0]
 8020100:	f8ad 701a 	strh.w	r7, [sp, #26]
 8020104:	f7ff fd5c 	bl	801fbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020108:	88e2      	ldrh	r2, [r4, #6]
 802010a:	8863      	ldrh	r3, [r4, #2]
 802010c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020110:	4413      	add	r3, r2
 8020112:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020116:	440a      	add	r2, r1
 8020118:	b29b      	uxth	r3, r3
 802011a:	b292      	uxth	r2, r2
 802011c:	b218      	sxth	r0, r3
 802011e:	b211      	sxth	r1, r2
 8020120:	4288      	cmp	r0, r1
 8020122:	f77f aec8 	ble.w	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020126:	f9b4 7000 	ldrsh.w	r7, [r4]
 802012a:	1a9b      	subs	r3, r3, r2
 802012c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020130:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020134:	464b      	mov	r3, r9
 8020136:	f8ad 7018 	strh.w	r7, [sp, #24]
 802013a:	f8ad 101a 	strh.w	r1, [sp, #26]
 802013e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020142:	9600      	str	r6, [sp, #0]
 8020144:	e77a      	b.n	802003c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8020146:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802014a:	2800      	cmp	r0, #0
 802014c:	f43f aeb3 	beq.w	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020150:	6803      	ldr	r3, [r0, #0]
 8020152:	9600      	str	r6, [sp, #0]
 8020154:	68de      	ldr	r6, [r3, #12]
 8020156:	4623      	mov	r3, r4
 8020158:	aa02      	add	r2, sp, #8
 802015a:	4629      	mov	r1, r5
 802015c:	47b0      	blx	r6
 802015e:	e6aa      	b.n	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020160:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8020164:	2800      	cmp	r0, #0
 8020166:	f43f aea6 	beq.w	801feb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 802016a:	6803      	ldr	r3, [r0, #0]
 802016c:	9600      	str	r6, [sp, #0]
 802016e:	689e      	ldr	r6, [r3, #8]
 8020170:	e7f1      	b.n	8020156 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8020172:	bf00      	nop
 8020174:	20027dc0 	.word	0x20027dc0

08020178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8020178:	b180      	cbz	r0, 802019c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802017a:	2903      	cmp	r1, #3
 802017c:	d81c      	bhi.n	80201b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802017e:	e8df f001 	tbb	[pc, r1]
 8020182:	1d02      	.short	0x1d02
 8020184:	1f08      	.short	0x1f08
 8020186:	4b10      	ldr	r3, [pc, #64]	@ (80201c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020188:	8818      	ldrh	r0, [r3, #0]
 802018a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802018e:	4240      	negs	r0, r0
 8020190:	4770      	bx	lr
 8020192:	4b0d      	ldr	r3, [pc, #52]	@ (80201c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020194:	8818      	ldrh	r0, [r3, #0]
 8020196:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802019a:	4770      	bx	lr
 802019c:	2903      	cmp	r1, #3
 802019e:	d80b      	bhi.n	80201b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80201a0:	a301      	add	r3, pc, #4	@ (adr r3, 80201a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 80201a2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80201a6:	bf00      	nop
 80201a8:	080201bd 	.word	0x080201bd
 80201ac:	08020193 	.word	0x08020193
 80201b0:	080201c1 	.word	0x080201c1
 80201b4:	08020187 	.word	0x08020187
 80201b8:	2000      	movs	r0, #0
 80201ba:	4770      	bx	lr
 80201bc:	2001      	movs	r0, #1
 80201be:	4770      	bx	lr
 80201c0:	f04f 30ff 	mov.w	r0, #4294967295
 80201c4:	4770      	bx	lr
 80201c6:	bf00      	nop
 80201c8:	20027dba 	.word	0x20027dba

080201cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80201cc:	b180      	cbz	r0, 80201f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80201ce:	2903      	cmp	r1, #3
 80201d0:	d81c      	bhi.n	802020c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80201d2:	e8df f001 	tbb	[pc, r1]
 80201d6:	021d      	.short	0x021d
 80201d8:	071f      	.short	0x071f
 80201da:	4b10      	ldr	r3, [pc, #64]	@ (802021c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80201dc:	8818      	ldrh	r0, [r3, #0]
 80201de:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80201e2:	4770      	bx	lr
 80201e4:	4b0d      	ldr	r3, [pc, #52]	@ (802021c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80201e6:	8818      	ldrh	r0, [r3, #0]
 80201e8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80201ec:	4240      	negs	r0, r0
 80201ee:	4770      	bx	lr
 80201f0:	2903      	cmp	r1, #3
 80201f2:	d80b      	bhi.n	802020c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80201f4:	a301      	add	r3, pc, #4	@ (adr r3, 80201fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 80201f6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80201fa:	bf00      	nop
 80201fc:	080201db 	.word	0x080201db
 8020200:	08020215 	.word	0x08020215
 8020204:	080201e5 	.word	0x080201e5
 8020208:	08020211 	.word	0x08020211
 802020c:	2000      	movs	r0, #0
 802020e:	4770      	bx	lr
 8020210:	2001      	movs	r0, #1
 8020212:	4770      	bx	lr
 8020214:	f04f 30ff 	mov.w	r0, #4294967295
 8020218:	4770      	bx	lr
 802021a:	bf00      	nop
 802021c:	20027dba 	.word	0x20027dba

08020220 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020224:	b099      	sub	sp, #100	@ 0x64
 8020226:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020228:	a914      	add	r1, sp, #80	@ 0x50
 802022a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 802022e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8020232:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8020236:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 802023a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 802023e:	e881 000c 	stmia.w	r1, {r2, r3}
 8020242:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8020246:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 802024a:	9309      	str	r3, [sp, #36]	@ 0x24
 802024c:	f891 900d 	ldrb.w	r9, [r1, #13]
 8020250:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020254:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8020258:	9310      	str	r3, [sp, #64]	@ 0x40
 802025a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 802025e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020260:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8020264:	798f      	ldrb	r7, [r1, #6]
 8020266:	431f      	orrs	r7, r3
 8020268:	f000 8195 	beq.w	8020596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802026c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8020270:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8020274:	f891 9007 	ldrb.w	r9, [r1, #7]
 8020278:	ea59 0903 	orrs.w	r9, r9, r3
 802027c:	f000 818b 	beq.w	8020596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020280:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020284:	b29b      	uxth	r3, r3
 8020286:	2d00      	cmp	r5, #0
 8020288:	f000 812e 	beq.w	80204e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 802028c:	1aed      	subs	r5, r5, r3
 802028e:	b2ad      	uxth	r5, r5
 8020290:	042b      	lsls	r3, r5, #16
 8020292:	d502      	bpl.n	802029a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020294:	1b64      	subs	r4, r4, r5
 8020296:	2500      	movs	r5, #0
 8020298:	b224      	sxth	r4, r4
 802029a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802029e:	a814      	add	r0, sp, #80	@ 0x50
 80202a0:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80202a4:	428c      	cmp	r4, r1
 80202a6:	b28b      	uxth	r3, r1
 80202a8:	bfbf      	itttt	lt
 80202aa:	18ed      	addlt	r5, r5, r3
 80202ac:	1b2c      	sublt	r4, r5, r4
 80202ae:	b2a5      	uxthlt	r5, r4
 80202b0:	460c      	movlt	r4, r1
 80202b2:	8891      	ldrh	r1, [r2, #4]
 80202b4:	440b      	add	r3, r1
 80202b6:	4621      	mov	r1, r4
 80202b8:	b21b      	sxth	r3, r3
 80202ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80202bc:	88d3      	ldrh	r3, [r2, #6]
 80202be:	8852      	ldrh	r2, [r2, #2]
 80202c0:	4413      	add	r3, r2
 80202c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80202c4:	b21b      	sxth	r3, r3
 80202c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80202c8:	4bbd      	ldr	r3, [pc, #756]	@ (80205c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80202ca:	f893 b000 	ldrb.w	fp, [r3]
 80202ce:	f10b 3cff 	add.w	ip, fp, #4294967295
 80202d2:	f1dc 0300 	rsbs	r3, ip, #0
 80202d6:	eb43 030c 	adc.w	r3, r3, ip
 80202da:	930e      	str	r3, [sp, #56]	@ 0x38
 80202dc:	4653      	mov	r3, sl
 80202de:	f7f5 fe80 	bl	8015fe2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80202e2:	4621      	mov	r1, r4
 80202e4:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80202e8:	4653      	mov	r3, sl
 80202ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80202ec:	a814      	add	r0, sp, #80	@ 0x50
 80202ee:	f7f5 fe95 	bl	801601c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80202f2:	a918      	add	r1, sp, #96	@ 0x60
 80202f4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80202f8:	a817      	add	r0, sp, #92	@ 0x5c
 80202fa:	f7f5 ffbb 	bl	8016274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80202fe:	f1ba 0f00 	cmp.w	sl, #0
 8020302:	f040 80f4 	bne.w	80204ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8020306:	f1bb 0f01 	cmp.w	fp, #1
 802030a:	f040 80f8 	bne.w	80204fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 802030e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020310:	2b00      	cmp	r3, #0
 8020312:	f040 8145 	bne.w	80205a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020316:	b2ba      	uxth	r2, r7
 8020318:	b905      	cbnz	r5, 802031c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 802031a:	b16e      	cbz	r6, 8020338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 802031c:	fb06 5302 	mla	r3, r6, r2, r5
 8020320:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8020322:	4631      	mov	r1, r6
 8020324:	fb08 f303 	mul.w	r3, r8, r3
 8020328:	f003 0607 	and.w	r6, r3, #7
 802032c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8020330:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020332:	eba9 0301 	sub.w	r3, r9, r1
 8020336:	930a      	str	r3, [sp, #40]	@ 0x28
 8020338:	4651      	mov	r1, sl
 802033a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802033c:	f7ff ff1c 	bl	8020178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020340:	4681      	mov	r9, r0
 8020342:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8020344:	f7ff ff42 	bl	80201cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802034a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802034c:	4683      	mov	fp, r0
 802034e:	eba3 0a01 	sub.w	sl, r3, r1
 8020352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020354:	459a      	cmp	sl, r3
 8020356:	bfa8      	it	ge
 8020358:	469a      	movge	sl, r3
 802035a:	f1ba 0f00 	cmp.w	sl, #0
 802035e:	f340 811a 	ble.w	8020596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020362:	1b64      	subs	r4, r4, r5
 8020364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020366:	1b1c      	subs	r4, r3, r4
 8020368:	42bc      	cmp	r4, r7
 802036a:	bfd4      	ite	le
 802036c:	ebc5 0504 	rsble	r5, r5, r4
 8020370:	ebc5 0507 	rsbgt	r5, r5, r7
 8020374:	2d00      	cmp	r5, #0
 8020376:	f340 810e 	ble.w	8020596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802037a:	1b52      	subs	r2, r2, r5
 802037c:	fb08 f302 	mul.w	r3, r8, r2
 8020380:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020384:	2b00      	cmp	r3, #0
 8020386:	f040 8116 	bne.w	80205b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802038a:	4b8e      	ldr	r3, [pc, #568]	@ (80205c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802038c:	6818      	ldr	r0, [r3, #0]
 802038e:	6803      	ldr	r3, [r0, #0]
 8020390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020392:	4798      	blx	r3
 8020394:	2301      	movs	r3, #1
 8020396:	4a8c      	ldr	r2, [pc, #560]	@ (80205c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8020398:	fa03 f308 	lsl.w	r3, r3, r8
 802039c:	8811      	ldrh	r1, [r2, #0]
 802039e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 80203a2:	3b01      	subs	r3, #1
 80203a4:	b2db      	uxtb	r3, r3
 80203a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80203a8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 80203ac:	fb01 2303 	mla	r3, r1, r3, r2
 80203b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80203b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80203b6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80203b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80203bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80203be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80203c0:	0a19      	lsrs	r1, r3, #8
 80203c2:	b2cb      	uxtb	r3, r1
 80203c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80203c6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80203c8:	b2db      	uxtb	r3, r3
 80203ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80203cc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80203ce:	095a      	lsrs	r2, r3, #5
 80203d0:	4b7e      	ldr	r3, [pc, #504]	@ (80205cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80203d2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80203d6:	400b      	ands	r3, r1
 80203d8:	4313      	orrs	r3, r2
 80203da:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80203dc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80203e0:	4313      	orrs	r3, r2
 80203e2:	b29b      	uxth	r3, r3
 80203e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80203e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80203e8:	781a      	ldrb	r2, [r3, #0]
 80203ea:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80203ee:	fb05 b919 	mls	r9, r5, r9, fp
 80203f2:	4132      	asrs	r2, r6
 80203f4:	fb03 fb05 	mul.w	fp, r3, r5
 80203f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80203fa:	b2d2      	uxtb	r2, r2
 80203fc:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8020400:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020404:	f0c0 80f5 	bcc.w	80205f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8020408:	46ae      	mov	lr, r5
 802040a:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 802040e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8020412:	f0c0 80dd 	bcc.w	80205d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8020416:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020418:	4013      	ands	r3, r2
 802041a:	d055      	beq.n	80204c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802041c:	20ff      	movs	r0, #255	@ 0xff
 802041e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020420:	fb90 f1f1 	sdiv	r1, r0, r1
 8020424:	434b      	muls	r3, r1
 8020426:	2bfe      	cmp	r3, #254	@ 0xfe
 8020428:	dd03      	ble.n	8020432 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 802042a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802042c:	4281      	cmp	r1, r0
 802042e:	f000 80c4 	beq.w	80205ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020432:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020434:	f8bc 4000 	ldrh.w	r4, [ip]
 8020438:	fb11 f303 	smulbb	r3, r1, r3
 802043c:	1220      	asrs	r0, r4, #8
 802043e:	b29b      	uxth	r3, r3
 8020440:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020444:	1c59      	adds	r1, r3, #1
 8020446:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802044a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802044e:	10e1      	asrs	r1, r4, #3
 8020450:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020454:	00e4      	lsls	r4, r4, #3
 8020456:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802045a:	b29f      	uxth	r7, r3
 802045c:	43db      	mvns	r3, r3
 802045e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020462:	b2db      	uxtb	r3, r3
 8020464:	b2e4      	uxtb	r4, r4
 8020466:	9309      	str	r3, [sp, #36]	@ 0x24
 8020468:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802046a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802046e:	fb13 f907 	smulbb	r9, r3, r7
 8020472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020474:	fb00 9003 	mla	r0, r0, r3, r9
 8020478:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802047a:	fb13 f907 	smulbb	r9, r3, r7
 802047e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020480:	b280      	uxth	r0, r0
 8020482:	fb01 9103 	mla	r1, r1, r3, r9
 8020486:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020488:	fb13 f707 	smulbb	r7, r3, r7
 802048c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802048e:	b289      	uxth	r1, r1
 8020490:	fb04 7403 	mla	r4, r4, r3, r7
 8020494:	1c43      	adds	r3, r0, #1
 8020496:	b2a4      	uxth	r4, r4
 8020498:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802049c:	f104 0901 	add.w	r9, r4, #1
 80204a0:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80204a4:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80204a8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80204ac:	ea49 0000 	orr.w	r0, r9, r0
 80204b0:	f101 0901 	add.w	r9, r1, #1
 80204b4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80204b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80204bc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80204c0:	ea40 0009 	orr.w	r0, r0, r9
 80204c4:	f8ac 0000 	strh.w	r0, [ip]
 80204c8:	4446      	add	r6, r8
 80204ca:	b2b6      	uxth	r6, r6
 80204cc:	2e07      	cmp	r6, #7
 80204ce:	bf89      	itett	hi
 80204d0:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 80204d2:	fa42 f208 	asrls.w	r2, r2, r8
 80204d6:	2600      	movhi	r6, #0
 80204d8:	785a      	ldrbhi	r2, [r3, #1]
 80204da:	bf8a      	itet	hi
 80204dc:	3301      	addhi	r3, #1
 80204de:	b2d2      	uxtbls	r2, r2
 80204e0:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 80204e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80204e4:	449c      	add	ip, r3
 80204e6:	e792      	b.n	802040e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80204e8:	441c      	add	r4, r3
 80204ea:	b224      	sxth	r4, r4
 80204ec:	e6d5      	b.n	802029a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80204ee:	f1ba 0f01 	cmp.w	sl, #1
 80204f2:	f47f af0c 	bne.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80204f6:	f1bb 0f01 	cmp.w	fp, #1
 80204fa:	f47f af08 	bne.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80204fe:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 80205c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8020502:	f8db 0000 	ldr.w	r0, [fp]
 8020506:	6803      	ldr	r3, [r0, #0]
 8020508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802050a:	4798      	blx	r3
 802050c:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8020510:	465a      	mov	r2, fp
 8020512:	d006      	beq.n	8020522 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8020514:	f1b8 0f04 	cmp.w	r8, #4
 8020518:	d140      	bne.n	802059c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 802051a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802051c:	3300      	adds	r3, #0
 802051e:	bf18      	it	ne
 8020520:	2301      	movne	r3, #1
 8020522:	0580      	lsls	r0, r0, #22
 8020524:	d56e      	bpl.n	8020604 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8020526:	f1b8 0f08 	cmp.w	r8, #8
 802052a:	d16b      	bne.n	8020604 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 802052c:	2b00      	cmp	r3, #0
 802052e:	bf0c      	ite	eq
 8020530:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8020534:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8020538:	2d00      	cmp	r5, #0
 802053a:	f47f aee8 	bne.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802053e:	2e00      	cmp	r6, #0
 8020540:	f47f aee5 	bne.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020544:	19e3      	adds	r3, r4, r7
 8020546:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020548:	4283      	cmp	r3, r0
 802054a:	f73f aee0 	bgt.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802054e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020550:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020552:	444b      	add	r3, r9
 8020554:	4283      	cmp	r3, r0
 8020556:	f73f aeda 	bgt.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802055a:	b2bf      	uxth	r7, r7
 802055c:	f1b8 0f08 	cmp.w	r8, #8
 8020560:	6810      	ldr	r0, [r2, #0]
 8020562:	f04f 0500 	mov.w	r5, #0
 8020566:	bf18      	it	ne
 8020568:	3701      	addne	r7, #1
 802056a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 802056e:	6804      	ldr	r4, [r0, #0]
 8020570:	bf18      	it	ne
 8020572:	f027 0701 	bicne.w	r7, r7, #1
 8020576:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802057a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802057e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020580:	bf18      	it	ne
 8020582:	b2bf      	uxthne	r7, r7
 8020584:	9104      	str	r1, [sp, #16]
 8020586:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8020588:	e9cd 7900 	strd	r7, r9, [sp]
 802058c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8020590:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020592:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8020594:	47a0      	blx	r4
 8020596:	b019      	add	sp, #100	@ 0x64
 8020598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802059c:	2300      	movs	r3, #0
 802059e:	e7c0      	b.n	8020522 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80205a0:	2208      	movs	r2, #8
 80205a2:	fb92 f3f8 	sdiv	r3, r2, r8
 80205a6:	1e5a      	subs	r2, r3, #1
 80205a8:	443a      	add	r2, r7
 80205aa:	fb92 f2f3 	sdiv	r2, r2, r3
 80205ae:	fb12 f203 	smulbb	r2, r2, r3
 80205b2:	b292      	uxth	r2, r2
 80205b4:	e6b0      	b.n	8020318 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 80205b6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80205b8:	e6ec      	b.n	8020394 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 80205ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80205bc:	e782      	b.n	80204c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 80205be:	bf00      	nop
 80205c0:	20027db8 	.word	0x20027db8
 80205c4:	20027dc0 	.word	0x20027dc0
 80205c8:	20027dba 	.word	0x20027dba
 80205cc:	00fff800 	.word	0x00fff800
 80205d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80205d2:	b153      	cbz	r3, 80205ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80205d4:	441e      	add	r6, r3
 80205d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80205d8:	b2b6      	uxth	r6, r6
 80205da:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80205de:	f006 0607 	and.w	r6, r6, #7
 80205e2:	781a      	ldrb	r2, [r3, #0]
 80205e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80205e6:	4132      	asrs	r2, r6
 80205e8:	b2d2      	uxtb	r2, r2
 80205ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205ec:	445b      	add	r3, fp
 80205ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80205f0:	e706      	b.n	8020400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80205f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d1ce      	bne.n	8020596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80205f8:	4b05      	ldr	r3, [pc, #20]	@ (8020610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80205fa:	6818      	ldr	r0, [r3, #0]
 80205fc:	6803      	ldr	r3, [r0, #0]
 80205fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020600:	4798      	blx	r3
 8020602:	e7c8      	b.n	8020596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020604:	2b00      	cmp	r3, #0
 8020606:	f43f ae82 	beq.w	802030e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802060a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802060e:	e793      	b.n	8020538 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8020610:	20027dc0 	.word	0x20027dc0

08020614 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8020614:	b538      	push	{r3, r4, r5, lr}
 8020616:	4c15      	ldr	r4, [pc, #84]	@ (802066c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8020618:	4605      	mov	r5, r0
 802061a:	7823      	ldrb	r3, [r4, #0]
 802061c:	f3bf 8f5b 	dmb	ish
 8020620:	07da      	lsls	r2, r3, #31
 8020622:	d40b      	bmi.n	802063c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020624:	4620      	mov	r0, r4
 8020626:	f008 fac2 	bl	8028bae <__cxa_guard_acquire>
 802062a:	b138      	cbz	r0, 802063c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802062c:	4620      	mov	r0, r4
 802062e:	f008 faca 	bl	8028bc6 <__cxa_guard_release>
 8020632:	4a0f      	ldr	r2, [pc, #60]	@ (8020670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020634:	490f      	ldr	r1, [pc, #60]	@ (8020674 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8020636:	4810      	ldr	r0, [pc, #64]	@ (8020678 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020638:	f008 fab2 	bl	8028ba0 <__aeabi_atexit>
 802063c:	4c0f      	ldr	r4, [pc, #60]	@ (802067c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802063e:	7823      	ldrb	r3, [r4, #0]
 8020640:	f3bf 8f5b 	dmb	ish
 8020644:	07db      	lsls	r3, r3, #31
 8020646:	d40b      	bmi.n	8020660 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020648:	4620      	mov	r0, r4
 802064a:	f008 fab0 	bl	8028bae <__cxa_guard_acquire>
 802064e:	b138      	cbz	r0, 8020660 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020650:	4620      	mov	r0, r4
 8020652:	f008 fab8 	bl	8028bc6 <__cxa_guard_release>
 8020656:	4a06      	ldr	r2, [pc, #24]	@ (8020670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020658:	4909      	ldr	r1, [pc, #36]	@ (8020680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802065a:	480a      	ldr	r0, [pc, #40]	@ (8020684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802065c:	f008 faa0 	bl	8028ba0 <__aeabi_atexit>
 8020660:	4b05      	ldr	r3, [pc, #20]	@ (8020678 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020662:	616b      	str	r3, [r5, #20]
 8020664:	4b07      	ldr	r3, [pc, #28]	@ (8020684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020666:	61ab      	str	r3, [r5, #24]
 8020668:	bd38      	pop	{r3, r4, r5, pc}
 802066a:	bf00      	nop
 802066c:	20027ea4 	.word	0x20027ea4
 8020670:	20000000 	.word	0x20000000
 8020674:	0801c7b1 	.word	0x0801c7b1
 8020678:	200000bc 	.word	0x200000bc
 802067c:	20027ea8 	.word	0x20027ea8
 8020680:	0801c7af 	.word	0x0801c7af
 8020684:	200000c0 	.word	0x200000c0

08020688 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8020688:	b538      	push	{r3, r4, r5, lr}
 802068a:	4c15      	ldr	r4, [pc, #84]	@ (80206e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802068c:	4605      	mov	r5, r0
 802068e:	7823      	ldrb	r3, [r4, #0]
 8020690:	f3bf 8f5b 	dmb	ish
 8020694:	07da      	lsls	r2, r3, #31
 8020696:	d40b      	bmi.n	80206b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020698:	4620      	mov	r0, r4
 802069a:	f008 fa88 	bl	8028bae <__cxa_guard_acquire>
 802069e:	b138      	cbz	r0, 80206b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80206a0:	4620      	mov	r0, r4
 80206a2:	f008 fa90 	bl	8028bc6 <__cxa_guard_release>
 80206a6:	4a0f      	ldr	r2, [pc, #60]	@ (80206e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80206a8:	490f      	ldr	r1, [pc, #60]	@ (80206e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80206aa:	4810      	ldr	r0, [pc, #64]	@ (80206ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80206ac:	f008 fa78 	bl	8028ba0 <__aeabi_atexit>
 80206b0:	4c0f      	ldr	r4, [pc, #60]	@ (80206f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80206b2:	7823      	ldrb	r3, [r4, #0]
 80206b4:	f3bf 8f5b 	dmb	ish
 80206b8:	07db      	lsls	r3, r3, #31
 80206ba:	d40b      	bmi.n	80206d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80206bc:	4620      	mov	r0, r4
 80206be:	f008 fa76 	bl	8028bae <__cxa_guard_acquire>
 80206c2:	b138      	cbz	r0, 80206d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80206c4:	4620      	mov	r0, r4
 80206c6:	f008 fa7e 	bl	8028bc6 <__cxa_guard_release>
 80206ca:	4a06      	ldr	r2, [pc, #24]	@ (80206e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80206cc:	4909      	ldr	r1, [pc, #36]	@ (80206f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80206ce:	480a      	ldr	r0, [pc, #40]	@ (80206f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80206d0:	f008 fa66 	bl	8028ba0 <__aeabi_atexit>
 80206d4:	4b05      	ldr	r3, [pc, #20]	@ (80206ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80206d6:	60eb      	str	r3, [r5, #12]
 80206d8:	4b07      	ldr	r3, [pc, #28]	@ (80206f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80206da:	612b      	str	r3, [r5, #16]
 80206dc:	bd38      	pop	{r3, r4, r5, pc}
 80206de:	bf00      	nop
 80206e0:	20027e7c 	.word	0x20027e7c
 80206e4:	20000000 	.word	0x20000000
 80206e8:	0801c7b5 	.word	0x0801c7b5
 80206ec:	20000094 	.word	0x20000094
 80206f0:	20027e80 	.word	0x20027e80
 80206f4:	0801c7b3 	.word	0x0801c7b3
 80206f8:	20000098 	.word	0x20000098

080206fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80206fc:	b510      	push	{r4, lr}
 80206fe:	4604      	mov	r4, r0
 8020700:	f7ff ff88 	bl	8020614 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8020704:	4620      	mov	r0, r4
 8020706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802070a:	f7ff bfbd 	b.w	8020688 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08020710 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020710:	b538      	push	{r3, r4, r5, lr}
 8020712:	4c15      	ldr	r4, [pc, #84]	@ (8020768 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020714:	4605      	mov	r5, r0
 8020716:	7823      	ldrb	r3, [r4, #0]
 8020718:	f3bf 8f5b 	dmb	ish
 802071c:	07da      	lsls	r2, r3, #31
 802071e:	d40b      	bmi.n	8020738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020720:	4620      	mov	r0, r4
 8020722:	f008 fa44 	bl	8028bae <__cxa_guard_acquire>
 8020726:	b138      	cbz	r0, 8020738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020728:	4620      	mov	r0, r4
 802072a:	f008 fa4c 	bl	8028bc6 <__cxa_guard_release>
 802072e:	4a0f      	ldr	r2, [pc, #60]	@ (802076c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020730:	490f      	ldr	r1, [pc, #60]	@ (8020770 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020732:	4810      	ldr	r0, [pc, #64]	@ (8020774 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020734:	f008 fa34 	bl	8028ba0 <__aeabi_atexit>
 8020738:	4c0f      	ldr	r4, [pc, #60]	@ (8020778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802073a:	7823      	ldrb	r3, [r4, #0]
 802073c:	f3bf 8f5b 	dmb	ish
 8020740:	07db      	lsls	r3, r3, #31
 8020742:	d40b      	bmi.n	802075c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020744:	4620      	mov	r0, r4
 8020746:	f008 fa32 	bl	8028bae <__cxa_guard_acquire>
 802074a:	b138      	cbz	r0, 802075c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802074c:	4620      	mov	r0, r4
 802074e:	f008 fa3a 	bl	8028bc6 <__cxa_guard_release>
 8020752:	4a06      	ldr	r2, [pc, #24]	@ (802076c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020754:	4909      	ldr	r1, [pc, #36]	@ (802077c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020756:	480a      	ldr	r0, [pc, #40]	@ (8020780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020758:	f008 fa22 	bl	8028ba0 <__aeabi_atexit>
 802075c:	4b05      	ldr	r3, [pc, #20]	@ (8020774 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802075e:	626b      	str	r3, [r5, #36]	@ 0x24
 8020760:	4b07      	ldr	r3, [pc, #28]	@ (8020780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020762:	62ab      	str	r3, [r5, #40]	@ 0x28
 8020764:	bd38      	pop	{r3, r4, r5, pc}
 8020766:	bf00      	nop
 8020768:	20027eac 	.word	0x20027eac
 802076c:	20000000 	.word	0x20000000
 8020770:	0801c7a9 	.word	0x0801c7a9
 8020774:	200000c4 	.word	0x200000c4
 8020778:	20027eb0 	.word	0x20027eb0
 802077c:	0801c7a7 	.word	0x0801c7a7
 8020780:	200000c8 	.word	0x200000c8

08020784 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020784:	b538      	push	{r3, r4, r5, lr}
 8020786:	4c15      	ldr	r4, [pc, #84]	@ (80207dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020788:	4605      	mov	r5, r0
 802078a:	7823      	ldrb	r3, [r4, #0]
 802078c:	f3bf 8f5b 	dmb	ish
 8020790:	07da      	lsls	r2, r3, #31
 8020792:	d40b      	bmi.n	80207ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020794:	4620      	mov	r0, r4
 8020796:	f008 fa0a 	bl	8028bae <__cxa_guard_acquire>
 802079a:	b138      	cbz	r0, 80207ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802079c:	4620      	mov	r0, r4
 802079e:	f008 fa12 	bl	8028bc6 <__cxa_guard_release>
 80207a2:	4a0f      	ldr	r2, [pc, #60]	@ (80207e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80207a4:	490f      	ldr	r1, [pc, #60]	@ (80207e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80207a6:	4810      	ldr	r0, [pc, #64]	@ (80207e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80207a8:	f008 f9fa 	bl	8028ba0 <__aeabi_atexit>
 80207ac:	4c0f      	ldr	r4, [pc, #60]	@ (80207ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80207ae:	7823      	ldrb	r3, [r4, #0]
 80207b0:	f3bf 8f5b 	dmb	ish
 80207b4:	07db      	lsls	r3, r3, #31
 80207b6:	d40b      	bmi.n	80207d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80207b8:	4620      	mov	r0, r4
 80207ba:	f008 f9f8 	bl	8028bae <__cxa_guard_acquire>
 80207be:	b138      	cbz	r0, 80207d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80207c0:	4620      	mov	r0, r4
 80207c2:	f008 fa00 	bl	8028bc6 <__cxa_guard_release>
 80207c6:	4a06      	ldr	r2, [pc, #24]	@ (80207e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80207c8:	4909      	ldr	r1, [pc, #36]	@ (80207f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80207ca:	480a      	ldr	r0, [pc, #40]	@ (80207f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80207cc:	f008 f9e8 	bl	8028ba0 <__aeabi_atexit>
 80207d0:	4b05      	ldr	r3, [pc, #20]	@ (80207e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80207d2:	61eb      	str	r3, [r5, #28]
 80207d4:	4b07      	ldr	r3, [pc, #28]	@ (80207f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80207d6:	622b      	str	r3, [r5, #32]
 80207d8:	bd38      	pop	{r3, r4, r5, pc}
 80207da:	bf00      	nop
 80207dc:	20027e84 	.word	0x20027e84
 80207e0:	20000000 	.word	0x20000000
 80207e4:	0801c7ad 	.word	0x0801c7ad
 80207e8:	2000009c 	.word	0x2000009c
 80207ec:	20027e88 	.word	0x20027e88
 80207f0:	0801c7ab 	.word	0x0801c7ab
 80207f4:	200000a0 	.word	0x200000a0

080207f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80207f8:	b510      	push	{r4, lr}
 80207fa:	4604      	mov	r4, r0
 80207fc:	f7ff ff88 	bl	8020710 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020800:	4620      	mov	r0, r4
 8020802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020806:	f7ff bfbd 	b.w	8020784 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802080c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802080c:	b538      	push	{r3, r4, r5, lr}
 802080e:	4c15      	ldr	r4, [pc, #84]	@ (8020864 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020810:	4605      	mov	r5, r0
 8020812:	7823      	ldrb	r3, [r4, #0]
 8020814:	f3bf 8f5b 	dmb	ish
 8020818:	07da      	lsls	r2, r3, #31
 802081a:	d40b      	bmi.n	8020834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802081c:	4620      	mov	r0, r4
 802081e:	f008 f9c6 	bl	8028bae <__cxa_guard_acquire>
 8020822:	b138      	cbz	r0, 8020834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020824:	4620      	mov	r0, r4
 8020826:	f008 f9ce 	bl	8028bc6 <__cxa_guard_release>
 802082a:	4a0f      	ldr	r2, [pc, #60]	@ (8020868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802082c:	490f      	ldr	r1, [pc, #60]	@ (802086c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802082e:	4810      	ldr	r0, [pc, #64]	@ (8020870 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020830:	f008 f9b6 	bl	8028ba0 <__aeabi_atexit>
 8020834:	4c0f      	ldr	r4, [pc, #60]	@ (8020874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8020836:	7823      	ldrb	r3, [r4, #0]
 8020838:	f3bf 8f5b 	dmb	ish
 802083c:	07db      	lsls	r3, r3, #31
 802083e:	d40b      	bmi.n	8020858 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020840:	4620      	mov	r0, r4
 8020842:	f008 f9b4 	bl	8028bae <__cxa_guard_acquire>
 8020846:	b138      	cbz	r0, 8020858 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020848:	4620      	mov	r0, r4
 802084a:	f008 f9bc 	bl	8028bc6 <__cxa_guard_release>
 802084e:	4a06      	ldr	r2, [pc, #24]	@ (8020868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020850:	4909      	ldr	r1, [pc, #36]	@ (8020878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020852:	480a      	ldr	r0, [pc, #40]	@ (802087c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020854:	f008 f9a4 	bl	8028ba0 <__aeabi_atexit>
 8020858:	4b05      	ldr	r3, [pc, #20]	@ (8020870 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802085a:	636b      	str	r3, [r5, #52]	@ 0x34
 802085c:	4b07      	ldr	r3, [pc, #28]	@ (802087c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802085e:	63ab      	str	r3, [r5, #56]	@ 0x38
 8020860:	bd38      	pop	{r3, r4, r5, pc}
 8020862:	bf00      	nop
 8020864:	20027ebc 	.word	0x20027ebc
 8020868:	20000000 	.word	0x20000000
 802086c:	0801c7a1 	.word	0x0801c7a1
 8020870:	200000d4 	.word	0x200000d4
 8020874:	20027ec0 	.word	0x20027ec0
 8020878:	0801c79f 	.word	0x0801c79f
 802087c:	200000d8 	.word	0x200000d8

08020880 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020880:	b538      	push	{r3, r4, r5, lr}
 8020882:	4c15      	ldr	r4, [pc, #84]	@ (80208d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020884:	4605      	mov	r5, r0
 8020886:	7823      	ldrb	r3, [r4, #0]
 8020888:	f3bf 8f5b 	dmb	ish
 802088c:	07da      	lsls	r2, r3, #31
 802088e:	d40b      	bmi.n	80208a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020890:	4620      	mov	r0, r4
 8020892:	f008 f98c 	bl	8028bae <__cxa_guard_acquire>
 8020896:	b138      	cbz	r0, 80208a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020898:	4620      	mov	r0, r4
 802089a:	f008 f994 	bl	8028bc6 <__cxa_guard_release>
 802089e:	4a0f      	ldr	r2, [pc, #60]	@ (80208dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80208a0:	490f      	ldr	r1, [pc, #60]	@ (80208e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80208a2:	4810      	ldr	r0, [pc, #64]	@ (80208e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80208a4:	f008 f97c 	bl	8028ba0 <__aeabi_atexit>
 80208a8:	4c0f      	ldr	r4, [pc, #60]	@ (80208e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80208aa:	7823      	ldrb	r3, [r4, #0]
 80208ac:	f3bf 8f5b 	dmb	ish
 80208b0:	07db      	lsls	r3, r3, #31
 80208b2:	d40b      	bmi.n	80208cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80208b4:	4620      	mov	r0, r4
 80208b6:	f008 f97a 	bl	8028bae <__cxa_guard_acquire>
 80208ba:	b138      	cbz	r0, 80208cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80208bc:	4620      	mov	r0, r4
 80208be:	f008 f982 	bl	8028bc6 <__cxa_guard_release>
 80208c2:	4a06      	ldr	r2, [pc, #24]	@ (80208dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80208c4:	4909      	ldr	r1, [pc, #36]	@ (80208ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80208c6:	480a      	ldr	r0, [pc, #40]	@ (80208f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80208c8:	f008 f96a 	bl	8028ba0 <__aeabi_atexit>
 80208cc:	4b05      	ldr	r3, [pc, #20]	@ (80208e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80208ce:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80208d0:	4b07      	ldr	r3, [pc, #28]	@ (80208f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80208d2:	632b      	str	r3, [r5, #48]	@ 0x30
 80208d4:	bd38      	pop	{r3, r4, r5, pc}
 80208d6:	bf00      	nop
 80208d8:	20027e8c 	.word	0x20027e8c
 80208dc:	20000000 	.word	0x20000000
 80208e0:	0801c7a5 	.word	0x0801c7a5
 80208e4:	200000a4 	.word	0x200000a4
 80208e8:	20027e90 	.word	0x20027e90
 80208ec:	0801c7a3 	.word	0x0801c7a3
 80208f0:	200000a8 	.word	0x200000a8

080208f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80208f4:	b510      	push	{r4, lr}
 80208f6:	4604      	mov	r4, r0
 80208f8:	f7ff ff88 	bl	802080c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80208fc:	4620      	mov	r0, r4
 80208fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020902:	f7ff bfbd 	b.w	8020880 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020908 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8020908:	b538      	push	{r3, r4, r5, lr}
 802090a:	4c15      	ldr	r4, [pc, #84]	@ (8020960 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802090c:	4605      	mov	r5, r0
 802090e:	7823      	ldrb	r3, [r4, #0]
 8020910:	f3bf 8f5b 	dmb	ish
 8020914:	07da      	lsls	r2, r3, #31
 8020916:	d40b      	bmi.n	8020930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8020918:	4620      	mov	r0, r4
 802091a:	f008 f948 	bl	8028bae <__cxa_guard_acquire>
 802091e:	b138      	cbz	r0, 8020930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8020920:	4620      	mov	r0, r4
 8020922:	f008 f950 	bl	8028bc6 <__cxa_guard_release>
 8020926:	4a0f      	ldr	r2, [pc, #60]	@ (8020964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8020928:	490f      	ldr	r1, [pc, #60]	@ (8020968 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802092a:	4810      	ldr	r0, [pc, #64]	@ (802096c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802092c:	f008 f938 	bl	8028ba0 <__aeabi_atexit>
 8020930:	4c0f      	ldr	r4, [pc, #60]	@ (8020970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8020932:	7823      	ldrb	r3, [r4, #0]
 8020934:	f3bf 8f5b 	dmb	ish
 8020938:	07db      	lsls	r3, r3, #31
 802093a:	d40b      	bmi.n	8020954 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802093c:	4620      	mov	r0, r4
 802093e:	f008 f936 	bl	8028bae <__cxa_guard_acquire>
 8020942:	b138      	cbz	r0, 8020954 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8020944:	4620      	mov	r0, r4
 8020946:	f008 f93e 	bl	8028bc6 <__cxa_guard_release>
 802094a:	4a06      	ldr	r2, [pc, #24]	@ (8020964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802094c:	4909      	ldr	r1, [pc, #36]	@ (8020974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802094e:	480a      	ldr	r0, [pc, #40]	@ (8020978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8020950:	f008 f926 	bl	8028ba0 <__aeabi_atexit>
 8020954:	4b05      	ldr	r3, [pc, #20]	@ (802096c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8020956:	656b      	str	r3, [r5, #84]	@ 0x54
 8020958:	4b07      	ldr	r3, [pc, #28]	@ (8020978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802095a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802095c:	bd38      	pop	{r3, r4, r5, pc}
 802095e:	bf00      	nop
 8020960:	20027ec4 	.word	0x20027ec4
 8020964:	20000000 	.word	0x20000000
 8020968:	0801c791 	.word	0x0801c791
 802096c:	200000dc 	.word	0x200000dc
 8020970:	20027ec8 	.word	0x20027ec8
 8020974:	0801c78f 	.word	0x0801c78f
 8020978:	200000e0 	.word	0x200000e0

0802097c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802097c:	b538      	push	{r3, r4, r5, lr}
 802097e:	4c15      	ldr	r4, [pc, #84]	@ (80209d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8020980:	4605      	mov	r5, r0
 8020982:	7823      	ldrb	r3, [r4, #0]
 8020984:	f3bf 8f5b 	dmb	ish
 8020988:	07da      	lsls	r2, r3, #31
 802098a:	d40b      	bmi.n	80209a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802098c:	4620      	mov	r0, r4
 802098e:	f008 f90e 	bl	8028bae <__cxa_guard_acquire>
 8020992:	b138      	cbz	r0, 80209a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8020994:	4620      	mov	r0, r4
 8020996:	f008 f916 	bl	8028bc6 <__cxa_guard_release>
 802099a:	4a0f      	ldr	r2, [pc, #60]	@ (80209d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802099c:	490f      	ldr	r1, [pc, #60]	@ (80209dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802099e:	4810      	ldr	r0, [pc, #64]	@ (80209e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80209a0:	f008 f8fe 	bl	8028ba0 <__aeabi_atexit>
 80209a4:	4c0f      	ldr	r4, [pc, #60]	@ (80209e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80209a6:	7823      	ldrb	r3, [r4, #0]
 80209a8:	f3bf 8f5b 	dmb	ish
 80209ac:	07db      	lsls	r3, r3, #31
 80209ae:	d40b      	bmi.n	80209c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80209b0:	4620      	mov	r0, r4
 80209b2:	f008 f8fc 	bl	8028bae <__cxa_guard_acquire>
 80209b6:	b138      	cbz	r0, 80209c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80209b8:	4620      	mov	r0, r4
 80209ba:	f008 f904 	bl	8028bc6 <__cxa_guard_release>
 80209be:	4a06      	ldr	r2, [pc, #24]	@ (80209d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80209c0:	4909      	ldr	r1, [pc, #36]	@ (80209e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80209c2:	480a      	ldr	r0, [pc, #40]	@ (80209ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80209c4:	f008 f8ec 	bl	8028ba0 <__aeabi_atexit>
 80209c8:	4b05      	ldr	r3, [pc, #20]	@ (80209e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80209ca:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80209cc:	4b07      	ldr	r3, [pc, #28]	@ (80209ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80209ce:	652b      	str	r3, [r5, #80]	@ 0x50
 80209d0:	bd38      	pop	{r3, r4, r5, pc}
 80209d2:	bf00      	nop
 80209d4:	20027ecc 	.word	0x20027ecc
 80209d8:	20000000 	.word	0x20000000
 80209dc:	0801c795 	.word	0x0801c795
 80209e0:	200000e4 	.word	0x200000e4
 80209e4:	20027ed0 	.word	0x20027ed0
 80209e8:	0801c793 	.word	0x0801c793
 80209ec:	200000e8 	.word	0x200000e8

080209f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80209f0:	b538      	push	{r3, r4, r5, lr}
 80209f2:	4c15      	ldr	r4, [pc, #84]	@ (8020a48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80209f4:	4605      	mov	r5, r0
 80209f6:	7823      	ldrb	r3, [r4, #0]
 80209f8:	f3bf 8f5b 	dmb	ish
 80209fc:	07da      	lsls	r2, r3, #31
 80209fe:	d40b      	bmi.n	8020a18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8020a00:	4620      	mov	r0, r4
 8020a02:	f008 f8d4 	bl	8028bae <__cxa_guard_acquire>
 8020a06:	b138      	cbz	r0, 8020a18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8020a08:	4620      	mov	r0, r4
 8020a0a:	f008 f8dc 	bl	8028bc6 <__cxa_guard_release>
 8020a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8020a4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8020a10:	490f      	ldr	r1, [pc, #60]	@ (8020a50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8020a12:	4810      	ldr	r0, [pc, #64]	@ (8020a54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8020a14:	f008 f8c4 	bl	8028ba0 <__aeabi_atexit>
 8020a18:	4c0f      	ldr	r4, [pc, #60]	@ (8020a58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8020a1a:	7823      	ldrb	r3, [r4, #0]
 8020a1c:	f3bf 8f5b 	dmb	ish
 8020a20:	07db      	lsls	r3, r3, #31
 8020a22:	d40b      	bmi.n	8020a3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8020a24:	4620      	mov	r0, r4
 8020a26:	f008 f8c2 	bl	8028bae <__cxa_guard_acquire>
 8020a2a:	b138      	cbz	r0, 8020a3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8020a2c:	4620      	mov	r0, r4
 8020a2e:	f008 f8ca 	bl	8028bc6 <__cxa_guard_release>
 8020a32:	4a06      	ldr	r2, [pc, #24]	@ (8020a4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8020a34:	4909      	ldr	r1, [pc, #36]	@ (8020a5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8020a36:	480a      	ldr	r0, [pc, #40]	@ (8020a60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8020a38:	f008 f8b2 	bl	8028ba0 <__aeabi_atexit>
 8020a3c:	4b05      	ldr	r3, [pc, #20]	@ (8020a54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8020a3e:	646b      	str	r3, [r5, #68]	@ 0x44
 8020a40:	4b07      	ldr	r3, [pc, #28]	@ (8020a60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8020a42:	64ab      	str	r3, [r5, #72]	@ 0x48
 8020a44:	bd38      	pop	{r3, r4, r5, pc}
 8020a46:	bf00      	nop
 8020a48:	20027e94 	.word	0x20027e94
 8020a4c:	20000000 	.word	0x20000000
 8020a50:	0801c799 	.word	0x0801c799
 8020a54:	200000ac 	.word	0x200000ac
 8020a58:	20027e98 	.word	0x20027e98
 8020a5c:	0801c797 	.word	0x0801c797
 8020a60:	200000b0 	.word	0x200000b0

08020a64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8020a64:	b538      	push	{r3, r4, r5, lr}
 8020a66:	4c15      	ldr	r4, [pc, #84]	@ (8020abc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8020a68:	4605      	mov	r5, r0
 8020a6a:	7823      	ldrb	r3, [r4, #0]
 8020a6c:	f3bf 8f5b 	dmb	ish
 8020a70:	07da      	lsls	r2, r3, #31
 8020a72:	d40b      	bmi.n	8020a8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8020a74:	4620      	mov	r0, r4
 8020a76:	f008 f89a 	bl	8028bae <__cxa_guard_acquire>
 8020a7a:	b138      	cbz	r0, 8020a8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8020a7c:	4620      	mov	r0, r4
 8020a7e:	f008 f8a2 	bl	8028bc6 <__cxa_guard_release>
 8020a82:	4a0f      	ldr	r2, [pc, #60]	@ (8020ac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8020a84:	490f      	ldr	r1, [pc, #60]	@ (8020ac4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8020a86:	4810      	ldr	r0, [pc, #64]	@ (8020ac8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8020a88:	f008 f88a 	bl	8028ba0 <__aeabi_atexit>
 8020a8c:	4c0f      	ldr	r4, [pc, #60]	@ (8020acc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8020a8e:	7823      	ldrb	r3, [r4, #0]
 8020a90:	f3bf 8f5b 	dmb	ish
 8020a94:	07db      	lsls	r3, r3, #31
 8020a96:	d40b      	bmi.n	8020ab0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8020a98:	4620      	mov	r0, r4
 8020a9a:	f008 f888 	bl	8028bae <__cxa_guard_acquire>
 8020a9e:	b138      	cbz	r0, 8020ab0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	f008 f890 	bl	8028bc6 <__cxa_guard_release>
 8020aa6:	4a06      	ldr	r2, [pc, #24]	@ (8020ac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8020aa8:	4909      	ldr	r1, [pc, #36]	@ (8020ad0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8020aaa:	480a      	ldr	r0, [pc, #40]	@ (8020ad4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8020aac:	f008 f878 	bl	8028ba0 <__aeabi_atexit>
 8020ab0:	4b05      	ldr	r3, [pc, #20]	@ (8020ac8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8020ab2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8020ab4:	4b07      	ldr	r3, [pc, #28]	@ (8020ad4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8020ab6:	642b      	str	r3, [r5, #64]	@ 0x40
 8020ab8:	bd38      	pop	{r3, r4, r5, pc}
 8020aba:	bf00      	nop
 8020abc:	20027eb4 	.word	0x20027eb4
 8020ac0:	20000000 	.word	0x20000000
 8020ac4:	0801c79d 	.word	0x0801c79d
 8020ac8:	200000cc 	.word	0x200000cc
 8020acc:	20027eb8 	.word	0x20027eb8
 8020ad0:	0801c79b 	.word	0x0801c79b
 8020ad4:	200000d0 	.word	0x200000d0

08020ad8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8020ad8:	b510      	push	{r4, lr}
 8020ada:	4604      	mov	r4, r0
 8020adc:	f7ff ff14 	bl	8020908 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8020ae0:	4620      	mov	r0, r4
 8020ae2:	f7ff ff85 	bl	80209f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	f7ff ff48 	bl	802097c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8020aec:	4620      	mov	r0, r4
 8020aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020af2:	f7ff bfb7 	b.w	8020a64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08020af8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020af8:	b538      	push	{r3, r4, r5, lr}
 8020afa:	4c15      	ldr	r4, [pc, #84]	@ (8020b50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8020afc:	4605      	mov	r5, r0
 8020afe:	7823      	ldrb	r3, [r4, #0]
 8020b00:	f3bf 8f5b 	dmb	ish
 8020b04:	07da      	lsls	r2, r3, #31
 8020b06:	d40b      	bmi.n	8020b20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020b08:	4620      	mov	r0, r4
 8020b0a:	f008 f850 	bl	8028bae <__cxa_guard_acquire>
 8020b0e:	b138      	cbz	r0, 8020b20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020b10:	4620      	mov	r0, r4
 8020b12:	f008 f858 	bl	8028bc6 <__cxa_guard_release>
 8020b16:	4a0f      	ldr	r2, [pc, #60]	@ (8020b54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020b18:	490f      	ldr	r1, [pc, #60]	@ (8020b58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8020b1a:	4810      	ldr	r0, [pc, #64]	@ (8020b5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020b1c:	f008 f840 	bl	8028ba0 <__aeabi_atexit>
 8020b20:	4c0f      	ldr	r4, [pc, #60]	@ (8020b60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8020b22:	7823      	ldrb	r3, [r4, #0]
 8020b24:	f3bf 8f5b 	dmb	ish
 8020b28:	07db      	lsls	r3, r3, #31
 8020b2a:	d40b      	bmi.n	8020b44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020b2c:	4620      	mov	r0, r4
 8020b2e:	f008 f83e 	bl	8028bae <__cxa_guard_acquire>
 8020b32:	b138      	cbz	r0, 8020b44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020b34:	4620      	mov	r0, r4
 8020b36:	f008 f846 	bl	8028bc6 <__cxa_guard_release>
 8020b3a:	4a06      	ldr	r2, [pc, #24]	@ (8020b54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020b3c:	4909      	ldr	r1, [pc, #36]	@ (8020b64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8020b3e:	480a      	ldr	r0, [pc, #40]	@ (8020b68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020b40:	f008 f82e 	bl	8028ba0 <__aeabi_atexit>
 8020b44:	4b05      	ldr	r3, [pc, #20]	@ (8020b5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020b46:	666b      	str	r3, [r5, #100]	@ 0x64
 8020b48:	4b07      	ldr	r3, [pc, #28]	@ (8020b68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020b4a:	66ab      	str	r3, [r5, #104]	@ 0x68
 8020b4c:	bd38      	pop	{r3, r4, r5, pc}
 8020b4e:	bf00      	nop
 8020b50:	20027e9c 	.word	0x20027e9c
 8020b54:	20000000 	.word	0x20000000
 8020b58:	0801c789 	.word	0x0801c789
 8020b5c:	200000b4 	.word	0x200000b4
 8020b60:	20027ea0 	.word	0x20027ea0
 8020b64:	0801c787 	.word	0x0801c787
 8020b68:	200000b8 	.word	0x200000b8

08020b6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8020b6c:	b538      	push	{r3, r4, r5, lr}
 8020b6e:	4c15      	ldr	r4, [pc, #84]	@ (8020bc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020b70:	4605      	mov	r5, r0
 8020b72:	7823      	ldrb	r3, [r4, #0]
 8020b74:	f3bf 8f5b 	dmb	ish
 8020b78:	07da      	lsls	r2, r3, #31
 8020b7a:	d40b      	bmi.n	8020b94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020b7c:	4620      	mov	r0, r4
 8020b7e:	f008 f816 	bl	8028bae <__cxa_guard_acquire>
 8020b82:	b138      	cbz	r0, 8020b94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020b84:	4620      	mov	r0, r4
 8020b86:	f008 f81e 	bl	8028bc6 <__cxa_guard_release>
 8020b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8020bc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020b8c:	490f      	ldr	r1, [pc, #60]	@ (8020bcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8020b8e:	4810      	ldr	r0, [pc, #64]	@ (8020bd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020b90:	f008 f806 	bl	8028ba0 <__aeabi_atexit>
 8020b94:	4c0f      	ldr	r4, [pc, #60]	@ (8020bd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8020b96:	7823      	ldrb	r3, [r4, #0]
 8020b98:	f3bf 8f5b 	dmb	ish
 8020b9c:	07db      	lsls	r3, r3, #31
 8020b9e:	d40b      	bmi.n	8020bb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020ba0:	4620      	mov	r0, r4
 8020ba2:	f008 f804 	bl	8028bae <__cxa_guard_acquire>
 8020ba6:	b138      	cbz	r0, 8020bb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020ba8:	4620      	mov	r0, r4
 8020baa:	f008 f80c 	bl	8028bc6 <__cxa_guard_release>
 8020bae:	4a06      	ldr	r2, [pc, #24]	@ (8020bc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020bb0:	4909      	ldr	r1, [pc, #36]	@ (8020bd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8020bb2:	480a      	ldr	r0, [pc, #40]	@ (8020bdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020bb4:	f007 fff4 	bl	8028ba0 <__aeabi_atexit>
 8020bb8:	4b05      	ldr	r3, [pc, #20]	@ (8020bd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020bba:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8020bbc:	4b07      	ldr	r3, [pc, #28]	@ (8020bdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020bbe:	662b      	str	r3, [r5, #96]	@ 0x60
 8020bc0:	bd38      	pop	{r3, r4, r5, pc}
 8020bc2:	bf00      	nop
 8020bc4:	20027e74 	.word	0x20027e74
 8020bc8:	20000000 	.word	0x20000000
 8020bcc:	0801c78d 	.word	0x0801c78d
 8020bd0:	2000008c 	.word	0x2000008c
 8020bd4:	20027e78 	.word	0x20027e78
 8020bd8:	0801c78b 	.word	0x0801c78b
 8020bdc:	20000090 	.word	0x20000090

08020be0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8020be0:	b510      	push	{r4, lr}
 8020be2:	4604      	mov	r4, r0
 8020be4:	f7ff ff88 	bl	8020af8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020be8:	4620      	mov	r0, r4
 8020bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020bee:	f7ff bfbd 	b.w	8020b6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020bf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020bf4:	b538      	push	{r3, r4, r5, lr}
 8020bf6:	4c15      	ldr	r4, [pc, #84]	@ (8020c4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020bf8:	4605      	mov	r5, r0
 8020bfa:	7823      	ldrb	r3, [r4, #0]
 8020bfc:	f3bf 8f5b 	dmb	ish
 8020c00:	07da      	lsls	r2, r3, #31
 8020c02:	d40b      	bmi.n	8020c1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020c04:	4620      	mov	r0, r4
 8020c06:	f007 ffd2 	bl	8028bae <__cxa_guard_acquire>
 8020c0a:	b138      	cbz	r0, 8020c1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	f007 ffda 	bl	8028bc6 <__cxa_guard_release>
 8020c12:	4a0f      	ldr	r2, [pc, #60]	@ (8020c50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020c14:	490f      	ldr	r1, [pc, #60]	@ (8020c54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8020c16:	4810      	ldr	r0, [pc, #64]	@ (8020c58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020c18:	f007 ffc2 	bl	8028ba0 <__aeabi_atexit>
 8020c1c:	4c0f      	ldr	r4, [pc, #60]	@ (8020c5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8020c1e:	7823      	ldrb	r3, [r4, #0]
 8020c20:	f3bf 8f5b 	dmb	ish
 8020c24:	07db      	lsls	r3, r3, #31
 8020c26:	d40b      	bmi.n	8020c40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020c28:	4620      	mov	r0, r4
 8020c2a:	f007 ffc0 	bl	8028bae <__cxa_guard_acquire>
 8020c2e:	b138      	cbz	r0, 8020c40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020c30:	4620      	mov	r0, r4
 8020c32:	f007 ffc8 	bl	8028bc6 <__cxa_guard_release>
 8020c36:	4a06      	ldr	r2, [pc, #24]	@ (8020c50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020c38:	4909      	ldr	r1, [pc, #36]	@ (8020c60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8020c3a:	480a      	ldr	r0, [pc, #40]	@ (8020c64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020c3c:	f007 ffb0 	bl	8028ba0 <__aeabi_atexit>
 8020c40:	4b05      	ldr	r3, [pc, #20]	@ (8020c58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020c42:	676b      	str	r3, [r5, #116]	@ 0x74
 8020c44:	4b07      	ldr	r3, [pc, #28]	@ (8020c64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020c46:	67ab      	str	r3, [r5, #120]	@ 0x78
 8020c48:	bd38      	pop	{r3, r4, r5, pc}
 8020c4a:	bf00      	nop
 8020c4c:	20027e6c 	.word	0x20027e6c
 8020c50:	20000000 	.word	0x20000000
 8020c54:	0801c781 	.word	0x0801c781
 8020c58:	20000084 	.word	0x20000084
 8020c5c:	20027e70 	.word	0x20027e70
 8020c60:	0801c77f 	.word	0x0801c77f
 8020c64:	20000088 	.word	0x20000088

08020c68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8020c68:	b538      	push	{r3, r4, r5, lr}
 8020c6a:	4c15      	ldr	r4, [pc, #84]	@ (8020cc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8020c6c:	4605      	mov	r5, r0
 8020c6e:	7823      	ldrb	r3, [r4, #0]
 8020c70:	f3bf 8f5b 	dmb	ish
 8020c74:	07da      	lsls	r2, r3, #31
 8020c76:	d40b      	bmi.n	8020c90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020c78:	4620      	mov	r0, r4
 8020c7a:	f007 ff98 	bl	8028bae <__cxa_guard_acquire>
 8020c7e:	b138      	cbz	r0, 8020c90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020c80:	4620      	mov	r0, r4
 8020c82:	f007 ffa0 	bl	8028bc6 <__cxa_guard_release>
 8020c86:	4a0f      	ldr	r2, [pc, #60]	@ (8020cc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020c88:	490f      	ldr	r1, [pc, #60]	@ (8020cc8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8020c8a:	4810      	ldr	r0, [pc, #64]	@ (8020ccc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020c8c:	f007 ff88 	bl	8028ba0 <__aeabi_atexit>
 8020c90:	4c0f      	ldr	r4, [pc, #60]	@ (8020cd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020c92:	7823      	ldrb	r3, [r4, #0]
 8020c94:	f3bf 8f5b 	dmb	ish
 8020c98:	07db      	lsls	r3, r3, #31
 8020c9a:	d40b      	bmi.n	8020cb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020c9c:	4620      	mov	r0, r4
 8020c9e:	f007 ff86 	bl	8028bae <__cxa_guard_acquire>
 8020ca2:	b138      	cbz	r0, 8020cb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020ca4:	4620      	mov	r0, r4
 8020ca6:	f007 ff8e 	bl	8028bc6 <__cxa_guard_release>
 8020caa:	4a06      	ldr	r2, [pc, #24]	@ (8020cc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020cac:	4909      	ldr	r1, [pc, #36]	@ (8020cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8020cae:	480a      	ldr	r0, [pc, #40]	@ (8020cd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020cb0:	f007 ff76 	bl	8028ba0 <__aeabi_atexit>
 8020cb4:	4b05      	ldr	r3, [pc, #20]	@ (8020ccc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020cb6:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8020cb8:	4b07      	ldr	r3, [pc, #28]	@ (8020cd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020cba:	672b      	str	r3, [r5, #112]	@ 0x70
 8020cbc:	bd38      	pop	{r3, r4, r5, pc}
 8020cbe:	bf00      	nop
 8020cc0:	20027e64 	.word	0x20027e64
 8020cc4:	20000000 	.word	0x20000000
 8020cc8:	0801c785 	.word	0x0801c785
 8020ccc:	2000007c 	.word	0x2000007c
 8020cd0:	20027e68 	.word	0x20027e68
 8020cd4:	0801c783 	.word	0x0801c783
 8020cd8:	20000080 	.word	0x20000080

08020cdc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8020cdc:	b510      	push	{r4, lr}
 8020cde:	4604      	mov	r4, r0
 8020ce0:	f7ff ff88 	bl	8020bf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020cea:	f7ff bfbd 	b.w	8020c68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08020cee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8020cee:	b510      	push	{r4, lr}
 8020cf0:	4604      	mov	r4, r0
 8020cf2:	f7ff fff3 	bl	8020cdc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8020cf6:	4620      	mov	r0, r4
 8020cf8:	f7ff ff72 	bl	8020be0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8020cfc:	4620      	mov	r0, r4
 8020cfe:	f7ff fdf9 	bl	80208f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8020d02:	4620      	mov	r0, r4
 8020d04:	f7ff fcfa 	bl	80206fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8020d08:	4620      	mov	r0, r4
 8020d0a:	f7ff fd75 	bl	80207f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8020d0e:	4620      	mov	r0, r4
 8020d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d14:	f7ff bee0 	b.w	8020ad8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08020d18 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8020d18:	b538      	push	{r3, r4, r5, lr}
 8020d1a:	4c0b      	ldr	r4, [pc, #44]	@ (8020d48 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8020d1c:	4605      	mov	r5, r0
 8020d1e:	7823      	ldrb	r3, [r4, #0]
 8020d20:	f3bf 8f5b 	dmb	ish
 8020d24:	07db      	lsls	r3, r3, #31
 8020d26:	d40b      	bmi.n	8020d40 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8020d28:	4620      	mov	r0, r4
 8020d2a:	f007 ff40 	bl	8028bae <__cxa_guard_acquire>
 8020d2e:	b138      	cbz	r0, 8020d40 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8020d30:	4620      	mov	r0, r4
 8020d32:	f007 ff48 	bl	8028bc6 <__cxa_guard_release>
 8020d36:	4a05      	ldr	r2, [pc, #20]	@ (8020d4c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8020d38:	4905      	ldr	r1, [pc, #20]	@ (8020d50 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8020d3a:	4806      	ldr	r0, [pc, #24]	@ (8020d54 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8020d3c:	f007 ff30 	bl	8028ba0 <__aeabi_atexit>
 8020d40:	4b04      	ldr	r3, [pc, #16]	@ (8020d54 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8020d42:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8020d44:	bd38      	pop	{r3, r4, r5, pc}
 8020d46:	bf00      	nop
 8020d48:	20027e58 	.word	0x20027e58
 8020d4c:	20000000 	.word	0x20000000
 8020d50:	0801c77d 	.word	0x0801c77d
 8020d54:	20000074 	.word	0x20000074

08020d58 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8020d58:	b538      	push	{r3, r4, r5, lr}
 8020d5a:	4c0b      	ldr	r4, [pc, #44]	@ (8020d88 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8020d5c:	4605      	mov	r5, r0
 8020d5e:	7823      	ldrb	r3, [r4, #0]
 8020d60:	f3bf 8f5b 	dmb	ish
 8020d64:	07db      	lsls	r3, r3, #31
 8020d66:	d40b      	bmi.n	8020d80 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8020d68:	4620      	mov	r0, r4
 8020d6a:	f007 ff20 	bl	8028bae <__cxa_guard_acquire>
 8020d6e:	b138      	cbz	r0, 8020d80 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8020d70:	4620      	mov	r0, r4
 8020d72:	f007 ff28 	bl	8028bc6 <__cxa_guard_release>
 8020d76:	4a05      	ldr	r2, [pc, #20]	@ (8020d8c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8020d78:	4905      	ldr	r1, [pc, #20]	@ (8020d90 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8020d7a:	4806      	ldr	r0, [pc, #24]	@ (8020d94 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8020d7c:	f007 ff10 	bl	8028ba0 <__aeabi_atexit>
 8020d80:	4b04      	ldr	r3, [pc, #16]	@ (8020d94 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8020d82:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8020d86:	bd38      	pop	{r3, r4, r5, pc}
 8020d88:	20027e5c 	.word	0x20027e5c
 8020d8c:	20000000 	.word	0x20000000
 8020d90:	0801c77b 	.word	0x0801c77b
 8020d94:	20000078 	.word	0x20000078

08020d98 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8020d98:	b570      	push	{r4, r5, r6, lr}
 8020d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8020dd0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8020d9c:	4606      	mov	r6, r0
 8020d9e:	4c0d      	ldr	r4, [pc, #52]	@ (8020dd4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8020da0:	782b      	ldrb	r3, [r5, #0]
 8020da2:	f3bf 8f5b 	dmb	ish
 8020da6:	f013 0f01 	tst.w	r3, #1
 8020daa:	d10d      	bne.n	8020dc8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8020dac:	4628      	mov	r0, r5
 8020dae:	f007 fefe 	bl	8028bae <__cxa_guard_acquire>
 8020db2:	b148      	cbz	r0, 8020dc8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8020db4:	4b08      	ldr	r3, [pc, #32]	@ (8020dd8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8020db6:	4628      	mov	r0, r5
 8020db8:	6023      	str	r3, [r4, #0]
 8020dba:	f007 ff04 	bl	8028bc6 <__cxa_guard_release>
 8020dbe:	4a07      	ldr	r2, [pc, #28]	@ (8020ddc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	4907      	ldr	r1, [pc, #28]	@ (8020de0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8020dc4:	f007 feec 	bl	8028ba0 <__aeabi_atexit>
 8020dc8:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8020dcc:	bd70      	pop	{r4, r5, r6, pc}
 8020dce:	bf00      	nop
 8020dd0:	20027e60 	.word	0x20027e60
 8020dd4:	20027fd8 	.word	0x20027fd8
 8020dd8:	0802e29c 	.word	0x0802e29c
 8020ddc:	20000000 	.word	0x20000000
 8020de0:	0801c779 	.word	0x0801c779

08020de4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8020de4:	b510      	push	{r4, lr}
 8020de6:	4604      	mov	r4, r0
 8020de8:	f7ff ff96 	bl	8020d18 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8020dec:	4620      	mov	r0, r4
 8020dee:	f7ff ffb3 	bl	8020d58 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8020df2:	4620      	mov	r0, r4
 8020df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020df8:	f7ff bfce 	b.w	8020d98 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08020dfc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8020dfc:	b570      	push	{r4, r5, r6, lr}
 8020dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8020e34 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8020e00:	4606      	mov	r6, r0
 8020e02:	4c0d      	ldr	r4, [pc, #52]	@ (8020e38 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8020e04:	782b      	ldrb	r3, [r5, #0]
 8020e06:	f3bf 8f5b 	dmb	ish
 8020e0a:	f013 0f01 	tst.w	r3, #1
 8020e0e:	d10d      	bne.n	8020e2c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8020e10:	4628      	mov	r0, r5
 8020e12:	f007 fecc 	bl	8028bae <__cxa_guard_acquire>
 8020e16:	b148      	cbz	r0, 8020e2c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8020e18:	4b08      	ldr	r3, [pc, #32]	@ (8020e3c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8020e1a:	4628      	mov	r0, r5
 8020e1c:	6023      	str	r3, [r4, #0]
 8020e1e:	f007 fed2 	bl	8028bc6 <__cxa_guard_release>
 8020e22:	4a07      	ldr	r2, [pc, #28]	@ (8020e40 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8020e24:	4620      	mov	r0, r4
 8020e26:	4907      	ldr	r1, [pc, #28]	@ (8020e44 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x48>)
 8020e28:	f007 feba 	bl	8028ba0 <__aeabi_atexit>
 8020e2c:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8020e30:	bd70      	pop	{r4, r5, r6, pc}
 8020e32:	bf00      	nop
 8020e34:	20027e54 	.word	0x20027e54
 8020e38:	20027ed4 	.word	0x20027ed4
 8020e3c:	0802e2b8 	.word	0x0802e2b8
 8020e40:	20000000 	.word	0x20000000
 8020e44:	0801c777 	.word	0x0801c777

08020e48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8020e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e4c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8020e50:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8020e54:	2d00      	cmp	r5, #0
 8020e56:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8020e5a:	fb05 4c0e 	mla	ip, r5, lr, r4
 8020e5e:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8020e62:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8020e66:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8020e6a:	eb02 0a0c 	add.w	sl, r2, ip
 8020e6e:	8808      	ldrh	r0, [r1, #0]
 8020e70:	f2c0 80b0 	blt.w	8020fd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8020e74:	45ab      	cmp	fp, r5
 8020e76:	f340 80ad 	ble.w	8020fd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8020e7a:	2c00      	cmp	r4, #0
 8020e7c:	f2c0 80a8 	blt.w	8020fd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8020e80:	45a6      	cmp	lr, r4
 8020e82:	f340 80a5 	ble.w	8020fd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8020e86:	f812 200c 	ldrb.w	r2, [r2, ip]
 8020e8a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8020e8e:	1c62      	adds	r2, r4, #1
 8020e90:	f100 80a3 	bmi.w	8020fda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8020e94:	4596      	cmp	lr, r2
 8020e96:	f340 80a0 	ble.w	8020fda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8020e9a:	f1b9 0f00 	cmp.w	r9, #0
 8020e9e:	f000 809c 	beq.w	8020fda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8020ea2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020ea6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8020eaa:	3501      	adds	r5, #1
 8020eac:	f100 8099 	bmi.w	8020fe2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8020eb0:	45ab      	cmp	fp, r5
 8020eb2:	f340 8096 	ble.w	8020fe2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8020eb6:	2f00      	cmp	r7, #0
 8020eb8:	f000 8093 	beq.w	8020fe2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8020ebc:	2c00      	cmp	r4, #0
 8020ebe:	f2c0 808e 	blt.w	8020fde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8020ec2:	45a6      	cmp	lr, r4
 8020ec4:	f340 808b 	ble.w	8020fde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8020ec8:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8020ecc:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8020ed0:	3401      	adds	r4, #1
 8020ed2:	f100 8089 	bmi.w	8020fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8020ed6:	45a6      	cmp	lr, r4
 8020ed8:	f340 8086 	ble.w	8020fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8020edc:	f1b9 0f00 	cmp.w	r9, #0
 8020ee0:	f000 8082 	beq.w	8020fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8020ee4:	44d6      	add	lr, sl
 8020ee6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020eea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8020eee:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8020ef2:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8020ef6:	fb19 fe07 	smulbb	lr, r9, r7
 8020efa:	f1c7 0210 	rsb	r2, r7, #16
 8020efe:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8020f02:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8020f06:	eba2 0209 	sub.w	r2, r2, r9
 8020f0a:	ea44 0808 	orr.w	r8, r4, r8
 8020f0e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8020f12:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8020f16:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8020f1a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8020f1e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8020f22:	ea44 0c0c 	orr.w	ip, r4, ip
 8020f26:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8020f2a:	fb04 f40c 	mul.w	r4, r4, ip
 8020f2e:	fb02 4808 	mla	r8, r2, r8, r4
 8020f32:	041a      	lsls	r2, r3, #16
 8020f34:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8020f38:	b2b4      	uxth	r4, r6
 8020f3a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8020f3e:	43f6      	mvns	r6, r6
 8020f40:	4313      	orrs	r3, r2
 8020f42:	042a      	lsls	r2, r5, #16
 8020f44:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8020f48:	b2f6      	uxtb	r6, r6
 8020f4a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8020f4e:	fb0e 8303 	mla	r3, lr, r3, r8
 8020f52:	432a      	orrs	r2, r5
 8020f54:	fb07 3202 	mla	r2, r7, r2, r3
 8020f58:	10c7      	asrs	r7, r0, #3
 8020f5a:	0d53      	lsrs	r3, r2, #21
 8020f5c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020f60:	0952      	lsrs	r2, r2, #5
 8020f62:	fb17 f706 	smulbb	r7, r7, r6
 8020f66:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020f6a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020f6e:	431a      	orrs	r2, r3
 8020f70:	b293      	uxth	r3, r2
 8020f72:	1202      	asrs	r2, r0, #8
 8020f74:	121d      	asrs	r5, r3, #8
 8020f76:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020f7a:	00c0      	lsls	r0, r0, #3
 8020f7c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020f80:	fb12 f206 	smulbb	r2, r2, r6
 8020f84:	b2c0      	uxtb	r0, r0
 8020f86:	fb05 2504 	mla	r5, r5, r4, r2
 8020f8a:	10da      	asrs	r2, r3, #3
 8020f8c:	fb10 f006 	smulbb	r0, r0, r6
 8020f90:	00db      	lsls	r3, r3, #3
 8020f92:	b2ad      	uxth	r5, r5
 8020f94:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020f98:	b2db      	uxtb	r3, r3
 8020f9a:	fb02 7204 	mla	r2, r2, r4, r7
 8020f9e:	fb03 0004 	mla	r0, r3, r4, r0
 8020fa2:	1c6b      	adds	r3, r5, #1
 8020fa4:	b292      	uxth	r2, r2
 8020fa6:	b280      	uxth	r0, r0
 8020fa8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020fac:	1c43      	adds	r3, r0, #1
 8020fae:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020fb2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020fb6:	1c50      	adds	r0, r2, #1
 8020fb8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020fbc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020fc0:	0952      	lsrs	r2, r2, #5
 8020fc2:	432b      	orrs	r3, r5
 8020fc4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020fc8:	4313      	orrs	r3, r2
 8020fca:	800b      	strh	r3, [r1, #0]
 8020fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fd0:	4680      	mov	r8, r0
 8020fd2:	e75c      	b.n	8020e8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8020fd4:	4684      	mov	ip, r0
 8020fd6:	4680      	mov	r8, r0
 8020fd8:	e767      	b.n	8020eaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8020fda:	4684      	mov	ip, r0
 8020fdc:	e765      	b.n	8020eaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8020fde:	4605      	mov	r5, r0
 8020fe0:	e776      	b.n	8020ed0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8020fe2:	4603      	mov	r3, r0
 8020fe4:	4605      	mov	r5, r0
 8020fe6:	e782      	b.n	8020eee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8020fe8:	4603      	mov	r3, r0
 8020fea:	e780      	b.n	8020eee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08020fec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ff0:	b099      	sub	sp, #100	@ 0x64
 8020ff2:	9215      	str	r2, [sp, #84]	@ 0x54
 8020ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ff6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8020ff8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8020ffc:	9016      	str	r0, [sp, #88]	@ 0x58
 8020ffe:	930d      	str	r3, [sp, #52]	@ 0x34
 8021000:	6850      	ldr	r0, [r2, #4]
 8021002:	910c      	str	r1, [sp, #48]	@ 0x30
 8021004:	6812      	ldr	r2, [r2, #0]
 8021006:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 802100a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 802100e:	fb00 1303 	mla	r3, r0, r3, r1
 8021012:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8021016:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021018:	681b      	ldr	r3, [r3, #0]
 802101a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802101c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802101e:	685e      	ldr	r6, [r3, #4]
 8021020:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021022:	3604      	adds	r6, #4
 8021024:	43db      	mvns	r3, r3
 8021026:	b2db      	uxtb	r3, r3
 8021028:	930a      	str	r3, [sp, #40]	@ 0x28
 802102a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802102c:	2b00      	cmp	r3, #0
 802102e:	dc03      	bgt.n	8021038 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021030:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021032:	2b00      	cmp	r3, #0
 8021034:	f340 8225 	ble.w	8021482 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021038:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802103a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802103e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021042:	1e48      	subs	r0, r1, #1
 8021044:	1e57      	subs	r7, r2, #1
 8021046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021048:	2b00      	cmp	r3, #0
 802104a:	f340 80e3 	ble.w	8021214 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802104e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8021052:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021056:	d406      	bmi.n	8021066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021058:	4584      	cmp	ip, r0
 802105a:	da04      	bge.n	8021066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802105c:	2b00      	cmp	r3, #0
 802105e:	db02      	blt.n	8021066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021060:	42bb      	cmp	r3, r7
 8021062:	f2c0 80d8 	blt.w	8021216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021066:	f11c 0c01 	adds.w	ip, ip, #1
 802106a:	f100 80c9 	bmi.w	8021200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802106e:	4561      	cmp	r1, ip
 8021070:	f2c0 80c6 	blt.w	8021200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021074:	3301      	adds	r3, #1
 8021076:	f100 80c3 	bmi.w	8021200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802107a:	429a      	cmp	r2, r3
 802107c:	f2c0 80c0 	blt.w	8021200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021080:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021084:	4647      	mov	r7, r8
 8021086:	f1bb 0f00 	cmp.w	fp, #0
 802108a:	f340 80e3 	ble.w	8021254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802108e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021090:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021094:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021096:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802109a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802109e:	ea5f 422a 	movs.w	r2, sl, asr #16
 80210a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80210a6:	689b      	ldr	r3, [r3, #8]
 80210a8:	f100 8121 	bmi.w	80212ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80210ac:	f103 39ff 	add.w	r9, r3, #4294967295
 80210b0:	454a      	cmp	r2, r9
 80210b2:	f280 811c 	bge.w	80212ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80210b6:	f1bc 0f00 	cmp.w	ip, #0
 80210ba:	f2c0 8118 	blt.w	80212ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80210be:	f10e 39ff 	add.w	r9, lr, #4294967295
 80210c2:	45cc      	cmp	ip, r9
 80210c4:	f280 8113 	bge.w	80212ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80210c8:	b21b      	sxth	r3, r3
 80210ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80210cc:	fb0c 2203 	mla	r2, ip, r3, r2
 80210d0:	eb04 0902 	add.w	r9, r4, r2
 80210d4:	5ca2      	ldrb	r2, [r4, r2]
 80210d6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80210da:	2800      	cmp	r0, #0
 80210dc:	f000 80fe 	beq.w	80212dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80210e0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80210e4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80210e8:	9211      	str	r2, [sp, #68]	@ 0x44
 80210ea:	b151      	cbz	r1, 8021102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80210ec:	eb09 0203 	add.w	r2, r9, r3
 80210f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80210f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80210f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80210fa:	7853      	ldrb	r3, [r2, #1]
 80210fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021100:	9312      	str	r3, [sp, #72]	@ 0x48
 8021102:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021104:	fb10 f201 	smulbb	r2, r0, r1
 8021108:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802110a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802110e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021112:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8021116:	10d2      	asrs	r2, r2, #3
 8021118:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802111c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8021120:	ea4c 0c03 	orr.w	ip, ip, r3
 8021124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021126:	041b      	lsls	r3, r3, #16
 8021128:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802112c:	4323      	orrs	r3, r4
 802112e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021130:	4353      	muls	r3, r2
 8021132:	fb09 330c 	mla	r3, r9, ip, r3
 8021136:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802113a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802113e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021142:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021146:	f1c1 0c10 	rsb	ip, r1, #16
 802114a:	ebac 0c00 	sub.w	ip, ip, r0
 802114e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021152:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021156:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802115a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802115c:	0418      	lsls	r0, r3, #16
 802115e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021162:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021166:	4318      	orrs	r0, r3
 8021168:	fb02 c200 	mla	r2, r2, r0, ip
 802116c:	8838      	ldrh	r0, [r7, #0]
 802116e:	0d53      	lsrs	r3, r2, #21
 8021170:	0952      	lsrs	r2, r2, #5
 8021172:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021176:	1201      	asrs	r1, r0, #8
 8021178:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802117c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8021180:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021184:	00c0      	lsls	r0, r0, #3
 8021186:	431a      	orrs	r2, r3
 8021188:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 802118c:	fb11 f104 	smulbb	r1, r1, r4
 8021190:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021194:	b292      	uxth	r2, r2
 8021196:	fb1e fe04 	smulbb	lr, lr, r4
 802119a:	b2c0      	uxtb	r0, r0
 802119c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80211a0:	fb10 f004 	smulbb	r0, r0, r4
 80211a4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80211a8:	fb0c 1c03 	mla	ip, ip, r3, r1
 80211ac:	10d1      	asrs	r1, r2, #3
 80211ae:	00d2      	lsls	r2, r2, #3
 80211b0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80211b4:	fa1f fc8c 	uxth.w	ip, ip
 80211b8:	b2d2      	uxtb	r2, r2
 80211ba:	fb01 e103 	mla	r1, r1, r3, lr
 80211be:	fb02 0303 	mla	r3, r2, r3, r0
 80211c2:	b289      	uxth	r1, r1
 80211c4:	b29a      	uxth	r2, r3
 80211c6:	f10c 0301 	add.w	r3, ip, #1
 80211ca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80211ce:	1c53      	adds	r3, r2, #1
 80211d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80211d4:	1c4a      	adds	r2, r1, #1
 80211d6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80211da:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80211de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80211e2:	0949      	lsrs	r1, r1, #5
 80211e4:	ea43 030c 	orr.w	r3, r3, ip
 80211e8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80211ec:	430b      	orrs	r3, r1
 80211ee:	803b      	strh	r3, [r7, #0]
 80211f0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80211f2:	3702      	adds	r7, #2
 80211f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80211f8:	449a      	add	sl, r3
 80211fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80211fc:	441d      	add	r5, r3
 80211fe:	e742      	b.n	8021086 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021200:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021202:	f108 0802 	add.w	r8, r8, #2
 8021206:	449a      	add	sl, r3
 8021208:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802120a:	441d      	add	r5, r3
 802120c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802120e:	3b01      	subs	r3, #1
 8021210:	9309      	str	r3, [sp, #36]	@ 0x24
 8021212:	e718      	b.n	8021046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021214:	d023      	beq.n	802125e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021218:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802121a:	3b01      	subs	r3, #1
 802121c:	fb00 a003 	mla	r0, r0, r3, sl
 8021220:	1400      	asrs	r0, r0, #16
 8021222:	f53f af2d 	bmi.w	8021080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021226:	3901      	subs	r1, #1
 8021228:	4288      	cmp	r0, r1
 802122a:	f6bf af29 	bge.w	8021080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802122e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8021230:	fb01 5303 	mla	r3, r1, r3, r5
 8021234:	141b      	asrs	r3, r3, #16
 8021236:	f53f af23 	bmi.w	8021080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802123a:	3a01      	subs	r2, #1
 802123c:	4293      	cmp	r3, r2
 802123e:	f6bf af1f 	bge.w	8021080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021242:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8021246:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 802124a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802124e:	f1be 0f00 	cmp.w	lr, #0
 8021252:	dc6c      	bgt.n	802132e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021256:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802125a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802125e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021260:	2b00      	cmp	r3, #0
 8021262:	f340 810e 	ble.w	8021482 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802126a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802126c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021270:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021274:	eef0 6a62 	vmov.f32	s13, s5
 8021278:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802127c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021284:	ee16 aa90 	vmov	sl, s13
 8021288:	eef0 6a43 	vmov.f32	s13, s6
 802128c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021290:	ee16 5a90 	vmov	r5, s13
 8021294:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021298:	ee61 7a27 	vmul.f32	s15, s2, s15
 802129c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80212a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80212ac:	ee12 2a90 	vmov	r2, s5
 80212b0:	eef0 2a47 	vmov.f32	s5, s14
 80212b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80212b8:	ee13 2a10 	vmov	r2, s6
 80212bc:	9325      	str	r3, [sp, #148]	@ 0x94
 80212be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80212c0:	eeb0 3a67 	vmov.f32	s6, s15
 80212c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80212c8:	9326      	str	r3, [sp, #152]	@ 0x98
 80212ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80212cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80212ce:	3b01      	subs	r3, #1
 80212d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80212d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80212d4:	bf08      	it	eq
 80212d6:	4613      	moveq	r3, r2
 80212d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80212da:	e6a6      	b.n	802102a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80212dc:	2900      	cmp	r1, #0
 80212de:	f43f af10 	beq.w	8021102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80212e2:	f819 3003 	ldrb.w	r3, [r9, r3]
 80212e6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80212ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80212ec:	e709      	b.n	8021102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80212ee:	f112 0901 	adds.w	r9, r2, #1
 80212f2:	f53f af7d 	bmi.w	80211f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80212f6:	454b      	cmp	r3, r9
 80212f8:	f6ff af7a 	blt.w	80211f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80212fc:	f11c 0901 	adds.w	r9, ip, #1
 8021300:	f53f af76 	bmi.w	80211f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021304:	45ce      	cmp	lr, r9
 8021306:	f6ff af73 	blt.w	80211f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802130a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802130c:	b21b      	sxth	r3, r3
 802130e:	9202      	str	r2, [sp, #8]
 8021310:	fa0f f28e 	sxth.w	r2, lr
 8021314:	9300      	str	r3, [sp, #0]
 8021316:	4633      	mov	r3, r6
 8021318:	9201      	str	r2, [sp, #4]
 802131a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802131c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021320:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021324:	4639      	mov	r1, r7
 8021326:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021328:	f7ff fd8e 	bl	8020e48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802132c:	e760      	b.n	80211f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802132e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021330:	ea4f 422a 	mov.w	r2, sl, asr #16
 8021334:	1429      	asrs	r1, r5, #16
 8021336:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021338:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802133c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8021340:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021344:	fb03 2101 	mla	r1, r3, r1, r2
 8021348:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802134a:	440a      	add	r2, r1
 802134c:	5c61      	ldrb	r1, [r4, r1]
 802134e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8021352:	f1bc 0f00 	cmp.w	ip, #0
 8021356:	f000 808c 	beq.w	8021472 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802135a:	7857      	ldrb	r7, [r2, #1]
 802135c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8021360:	9413      	str	r4, [sp, #76]	@ 0x4c
 8021362:	b140      	cbz	r0, 8021376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021364:	18d7      	adds	r7, r2, r3
 8021366:	5cd3      	ldrb	r3, [r2, r3]
 8021368:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802136c:	9310      	str	r3, [sp, #64]	@ 0x40
 802136e:	787b      	ldrb	r3, [r7, #1]
 8021370:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021374:	9314      	str	r3, [sp, #80]	@ 0x50
 8021376:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021378:	fb1c f200 	smulbb	r2, ip, r0
 802137c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802137e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021382:	041f      	lsls	r7, r3, #16
 8021384:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021388:	10d2      	asrs	r2, r2, #3
 802138a:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 802138e:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8021392:	431f      	orrs	r7, r3
 8021394:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8021398:	9317      	str	r3, [sp, #92]	@ 0x5c
 802139a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802139c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802139e:	041b      	lsls	r3, r3, #16
 80213a0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80213a4:	ea43 030b 	orr.w	r3, r3, fp
 80213a8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80213ac:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80213b0:	4353      	muls	r3, r2
 80213b2:	fb04 3707 	mla	r7, r4, r7, r3
 80213b6:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80213ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80213bc:	ea43 0b01 	orr.w	fp, r3, r1
 80213c0:	f1c0 0110 	rsb	r1, r0, #16
 80213c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80213c6:	eba1 0c0c 	sub.w	ip, r1, ip
 80213ca:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80213ce:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80213d2:	fb0c 770b 	mla	r7, ip, fp, r7
 80213d6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80213da:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 80213de:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80213e2:	ea4c 0c0b 	orr.w	ip, ip, fp
 80213e6:	fb02 770c 	mla	r7, r2, ip, r7
 80213ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80213ec:	0d79      	lsrs	r1, r7, #21
 80213ee:	8812      	ldrh	r2, [r2, #0]
 80213f0:	097f      	lsrs	r7, r7, #5
 80213f2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80213f6:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80213fa:	430f      	orrs	r7, r1
 80213fc:	1211      	asrs	r1, r2, #8
 80213fe:	b2bb      	uxth	r3, r7
 8021400:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021404:	10d7      	asrs	r7, r2, #3
 8021406:	fb11 f104 	smulbb	r1, r1, r4
 802140a:	1218      	asrs	r0, r3, #8
 802140c:	00d2      	lsls	r2, r2, #3
 802140e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021412:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021416:	fb17 f704 	smulbb	r7, r7, r4
 802141a:	b2d2      	uxtb	r2, r2
 802141c:	fb00 1009 	mla	r0, r0, r9, r1
 8021420:	10d9      	asrs	r1, r3, #3
 8021422:	fb12 f204 	smulbb	r2, r2, r4
 8021426:	00db      	lsls	r3, r3, #3
 8021428:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802142c:	b280      	uxth	r0, r0
 802142e:	b2db      	uxtb	r3, r3
 8021430:	fb01 7109 	mla	r1, r1, r9, r7
 8021434:	fb03 2309 	mla	r3, r3, r9, r2
 8021438:	1c42      	adds	r2, r0, #1
 802143a:	b289      	uxth	r1, r1
 802143c:	b29b      	uxth	r3, r3
 802143e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021442:	1c4f      	adds	r7, r1, #1
 8021444:	1c5a      	adds	r2, r3, #1
 8021446:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802144a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802144e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021454:	0949      	lsrs	r1, r1, #5
 8021456:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802145a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802145e:	4310      	orrs	r0, r2
 8021460:	4308      	orrs	r0, r1
 8021462:	f823 0b02 	strh.w	r0, [r3], #2
 8021466:	930e      	str	r3, [sp, #56]	@ 0x38
 8021468:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802146a:	449a      	add	sl, r3
 802146c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802146e:	441d      	add	r5, r3
 8021470:	e6ed      	b.n	802124e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8021472:	2800      	cmp	r0, #0
 8021474:	f43f af7f 	beq.w	8021376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021478:	5cd3      	ldrb	r3, [r2, r3]
 802147a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802147e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021480:	e779      	b.n	8021376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021482:	b019      	add	sp, #100	@ 0x64
 8021484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021488 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802148c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8021490:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8021494:	f1b8 0f00 	cmp.w	r8, #0
 8021498:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 802149c:	fb08 470e 	mla	r7, r8, lr, r4
 80214a0:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 80214a4:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80214a8:	eb02 0907 	add.w	r9, r2, r7
 80214ac:	8808      	ldrh	r0, [r1, #0]
 80214ae:	db67      	blt.n	8021580 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80214b0:	45c2      	cmp	sl, r8
 80214b2:	dd65      	ble.n	8021580 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80214b4:	2c00      	cmp	r4, #0
 80214b6:	db61      	blt.n	802157c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80214b8:	45a6      	cmp	lr, r4
 80214ba:	dd5f      	ble.n	802157c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80214bc:	5dd2      	ldrb	r2, [r2, r7]
 80214be:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80214c2:	1c62      	adds	r2, r4, #1
 80214c4:	d45f      	bmi.n	8021586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80214c6:	4596      	cmp	lr, r2
 80214c8:	dd5d      	ble.n	8021586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80214ca:	2d00      	cmp	r5, #0
 80214cc:	d05b      	beq.n	8021586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80214ce:	f899 2001 	ldrb.w	r2, [r9, #1]
 80214d2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80214d6:	f118 0801 	adds.w	r8, r8, #1
 80214da:	d458      	bmi.n	802158e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80214dc:	45c2      	cmp	sl, r8
 80214de:	dd56      	ble.n	802158e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80214e0:	2e00      	cmp	r6, #0
 80214e2:	d054      	beq.n	802158e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80214e4:	2c00      	cmp	r4, #0
 80214e6:	db50      	blt.n	802158a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80214e8:	45a6      	cmp	lr, r4
 80214ea:	dd4e      	ble.n	802158a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80214ec:	f819 200e 	ldrb.w	r2, [r9, lr]
 80214f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80214f4:	3401      	adds	r4, #1
 80214f6:	d407      	bmi.n	8021508 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80214f8:	45a6      	cmp	lr, r4
 80214fa:	dd05      	ble.n	8021508 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80214fc:	b125      	cbz	r5, 8021508 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80214fe:	44ce      	add	lr, r9
 8021500:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021504:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8021508:	fb15 f406 	smulbb	r4, r5, r6
 802150c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8021510:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8021514:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021518:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802151c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8021520:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8021524:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8021528:	ea43 0c0c 	orr.w	ip, r3, ip
 802152c:	f1c6 0310 	rsb	r3, r6, #16
 8021530:	ea4e 0707 	orr.w	r7, lr, r7
 8021534:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8021538:	1b5b      	subs	r3, r3, r5
 802153a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802153e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021542:	437d      	muls	r5, r7
 8021544:	fb03 5c0c 	mla	ip, r3, ip, r5
 8021548:	0403      	lsls	r3, r0, #16
 802154a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802154e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021552:	4318      	orrs	r0, r3
 8021554:	0413      	lsls	r3, r2, #16
 8021556:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802155a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802155e:	fb04 c000 	mla	r0, r4, r0, ip
 8021562:	4313      	orrs	r3, r2
 8021564:	fb06 0003 	mla	r0, r6, r3, r0
 8021568:	0d43      	lsrs	r3, r0, #21
 802156a:	0940      	lsrs	r0, r0, #5
 802156c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021570:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8021574:	4318      	orrs	r0, r3
 8021576:	8008      	strh	r0, [r1, #0]
 8021578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802157c:	4684      	mov	ip, r0
 802157e:	e7a0      	b.n	80214c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8021580:	4607      	mov	r7, r0
 8021582:	4684      	mov	ip, r0
 8021584:	e7a7      	b.n	80214d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8021586:	4607      	mov	r7, r0
 8021588:	e7a5      	b.n	80214d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802158a:	4602      	mov	r2, r0
 802158c:	e7b2      	b.n	80214f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802158e:	4602      	mov	r2, r0
 8021590:	e7ba      	b.n	8021508 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08021592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021596:	b093      	sub	sp, #76	@ 0x4c
 8021598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802159c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802159e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80215a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80215a2:	9108      	str	r1, [sp, #32]
 80215a4:	6850      	ldr	r0, [r2, #4]
 80215a6:	9306      	str	r3, [sp, #24]
 80215a8:	6812      	ldr	r2, [r2, #0]
 80215aa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80215ae:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80215b2:	fb00 1303 	mla	r3, r0, r3, r1
 80215b6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80215ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	9307      	str	r3, [sp, #28]
 80215c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215c2:	685f      	ldr	r7, [r3, #4]
 80215c4:	3704      	adds	r7, #4
 80215c6:	9b08      	ldr	r3, [sp, #32]
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	dc03      	bgt.n	80215d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80215cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	f340 81b2 	ble.w	8021938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80215d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80215da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80215de:	1e48      	subs	r0, r1, #1
 80215e0:	f102 3cff 	add.w	ip, r2, #4294967295
 80215e4:	9b06      	ldr	r3, [sp, #24]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	f340 80a9 	ble.w	802173e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80215ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80215f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80215f4:	d406      	bmi.n	8021604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80215f6:	4586      	cmp	lr, r0
 80215f8:	da04      	bge.n	8021604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	db02      	blt.n	8021604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80215fe:	4563      	cmp	r3, ip
 8021600:	f2c0 809e 	blt.w	8021740 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8021604:	f11e 0e01 	adds.w	lr, lr, #1
 8021608:	f100 808f 	bmi.w	802172a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802160c:	4571      	cmp	r1, lr
 802160e:	f2c0 808c 	blt.w	802172a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021612:	3301      	adds	r3, #1
 8021614:	f100 8089 	bmi.w	802172a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021618:	429a      	cmp	r2, r3
 802161a:	f2c0 8086 	blt.w	802172a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802161e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021622:	46c8      	mov	r8, r9
 8021624:	f1bb 0f00 	cmp.w	fp, #0
 8021628:	f340 80a6 	ble.w	8021778 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802162c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802162e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021634:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021638:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802163c:	1422      	asrs	r2, r4, #16
 802163e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021642:	689b      	ldr	r3, [r3, #8]
 8021644:	f100 80e3 	bmi.w	802180e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021648:	f103 3aff 	add.w	sl, r3, #4294967295
 802164c:	4552      	cmp	r2, sl
 802164e:	f280 80de 	bge.w	802180e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021652:	f1bc 0f00 	cmp.w	ip, #0
 8021656:	f2c0 80da 	blt.w	802180e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802165a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802165e:	45d4      	cmp	ip, sl
 8021660:	f280 80d5 	bge.w	802180e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021664:	b21b      	sxth	r3, r3
 8021666:	9d07      	ldr	r5, [sp, #28]
 8021668:	fb0c 2203 	mla	r2, ip, r3, r2
 802166c:	eb05 0a02 	add.w	sl, r5, r2
 8021670:	5caa      	ldrb	r2, [r5, r2]
 8021672:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021676:	2800      	cmp	r0, #0
 8021678:	f000 80c0 	beq.w	80217fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802167c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021680:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021684:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021686:	b151      	cbz	r1, 802169e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021688:	eb0a 0203 	add.w	r2, sl, r3
 802168c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021690:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021694:	9309      	str	r3, [sp, #36]	@ 0x24
 8021696:	7853      	ldrb	r3, [r2, #1]
 8021698:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802169c:	930c      	str	r3, [sp, #48]	@ 0x30
 802169e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216a0:	fb10 f201 	smulbb	r2, r0, r1
 80216a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80216a6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80216aa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80216ae:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80216b2:	10d2      	asrs	r2, r2, #3
 80216b4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80216b8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80216bc:	ea4c 0c03 	orr.w	ip, ip, r3
 80216c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80216c2:	041b      	lsls	r3, r3, #16
 80216c4:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80216c8:	432b      	orrs	r3, r5
 80216ca:	4353      	muls	r3, r2
 80216cc:	fb0a 330c 	mla	r3, sl, ip, r3
 80216d0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80216d4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80216d8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80216dc:	ea4c 0e0e 	orr.w	lr, ip, lr
 80216e0:	f1c1 0c10 	rsb	ip, r1, #16
 80216e4:	ebac 0c00 	sub.w	ip, ip, r0
 80216e8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80216ec:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80216f0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80216f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216f6:	0418      	lsls	r0, r3, #16
 80216f8:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80216fc:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021700:	4318      	orrs	r0, r3
 8021702:	fb02 c200 	mla	r2, r2, r0, ip
 8021706:	0d53      	lsrs	r3, r2, #21
 8021708:	0952      	lsrs	r2, r2, #5
 802170a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802170e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021712:	431a      	orrs	r2, r3
 8021714:	f8a8 2000 	strh.w	r2, [r8]
 8021718:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802171a:	f108 0802 	add.w	r8, r8, #2
 802171e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021722:	441c      	add	r4, r3
 8021724:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021726:	441e      	add	r6, r3
 8021728:	e77c      	b.n	8021624 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802172a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802172c:	f109 0902 	add.w	r9, r9, #2
 8021730:	441c      	add	r4, r3
 8021732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021734:	441e      	add	r6, r3
 8021736:	9b06      	ldr	r3, [sp, #24]
 8021738:	3b01      	subs	r3, #1
 802173a:	9306      	str	r3, [sp, #24]
 802173c:	e752      	b.n	80215e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802173e:	d020      	beq.n	8021782 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021740:	9b06      	ldr	r3, [sp, #24]
 8021742:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8021744:	3b01      	subs	r3, #1
 8021746:	fb00 4003 	mla	r0, r0, r3, r4
 802174a:	1400      	asrs	r0, r0, #16
 802174c:	f53f af67 	bmi.w	802161e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021750:	3901      	subs	r1, #1
 8021752:	4288      	cmp	r0, r1
 8021754:	f6bf af63 	bge.w	802161e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021758:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802175a:	fb01 6303 	mla	r3, r1, r3, r6
 802175e:	141b      	asrs	r3, r3, #16
 8021760:	f53f af5d 	bmi.w	802161e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021764:	3a01      	subs	r2, #1
 8021766:	4293      	cmp	r3, r2
 8021768:	f6bf af59 	bge.w	802161e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802176c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021770:	46ca      	mov	sl, r9
 8021772:	f1b8 0f00 	cmp.w	r8, #0
 8021776:	dc67      	bgt.n	8021848 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8021778:	9b06      	ldr	r3, [sp, #24]
 802177a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802177e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021782:	9b08      	ldr	r3, [sp, #32]
 8021784:	2b00      	cmp	r3, #0
 8021786:	f340 80d7 	ble.w	8021938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802178a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802178e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021790:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021794:	eeb0 6a62 	vmov.f32	s12, s5
 8021798:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802179c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80217a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80217a4:	ee16 4a10 	vmov	r4, s12
 80217a8:	eeb0 6a43 	vmov.f32	s12, s6
 80217ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80217b0:	ee16 6a10 	vmov	r6, s12
 80217b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80217b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80217bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80217c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80217c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80217c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80217cc:	ee12 2a90 	vmov	r2, s5
 80217d0:	eef0 2a47 	vmov.f32	s5, s14
 80217d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80217d8:	ee13 2a10 	vmov	r2, s6
 80217dc:	931f      	str	r3, [sp, #124]	@ 0x7c
 80217de:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80217e0:	eeb0 3a67 	vmov.f32	s6, s15
 80217e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80217e8:	9320      	str	r3, [sp, #128]	@ 0x80
 80217ea:	9b08      	ldr	r3, [sp, #32]
 80217ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80217ee:	3b01      	subs	r3, #1
 80217f0:	9308      	str	r3, [sp, #32]
 80217f2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80217f4:	bf08      	it	eq
 80217f6:	4613      	moveq	r3, r2
 80217f8:	9306      	str	r3, [sp, #24]
 80217fa:	e6e4      	b.n	80215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80217fc:	2900      	cmp	r1, #0
 80217fe:	f43f af4e 	beq.w	802169e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021802:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021806:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802180a:	9309      	str	r3, [sp, #36]	@ 0x24
 802180c:	e747      	b.n	802169e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802180e:	f112 0a01 	adds.w	sl, r2, #1
 8021812:	d481      	bmi.n	8021718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021814:	4553      	cmp	r3, sl
 8021816:	f6ff af7f 	blt.w	8021718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802181a:	f11c 0a01 	adds.w	sl, ip, #1
 802181e:	f53f af7b 	bmi.w	8021718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021822:	45d6      	cmp	lr, sl
 8021824:	f6ff af78 	blt.w	8021718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021828:	b21b      	sxth	r3, r3
 802182a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802182e:	fa0f f28e 	sxth.w	r2, lr
 8021832:	9300      	str	r3, [sp, #0]
 8021834:	463b      	mov	r3, r7
 8021836:	9201      	str	r2, [sp, #4]
 8021838:	9a07      	ldr	r2, [sp, #28]
 802183a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802183e:	4641      	mov	r1, r8
 8021840:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021842:	f7ff fe21 	bl	8021488 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021846:	e767      	b.n	8021718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021848:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802184a:	1422      	asrs	r2, r4, #16
 802184c:	1431      	asrs	r1, r6, #16
 802184e:	9d07      	ldr	r5, [sp, #28]
 8021850:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021854:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8021858:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802185c:	fb03 2101 	mla	r1, r3, r1, r2
 8021860:	9a07      	ldr	r2, [sp, #28]
 8021862:	440a      	add	r2, r1
 8021864:	5c69      	ldrb	r1, [r5, r1]
 8021866:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802186a:	f1be 0f00 	cmp.w	lr, #0
 802186e:	d05c      	beq.n	802192a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8021870:	f892 c001 	ldrb.w	ip, [r2, #1]
 8021874:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8021878:	950d      	str	r5, [sp, #52]	@ 0x34
 802187a:	b150      	cbz	r0, 8021892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802187c:	eb02 0c03 	add.w	ip, r2, r3
 8021880:	5cd3      	ldrb	r3, [r2, r3]
 8021882:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021886:	930a      	str	r3, [sp, #40]	@ 0x28
 8021888:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802188c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021890:	930e      	str	r3, [sp, #56]	@ 0x38
 8021892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021894:	fb1e f200 	smulbb	r2, lr, r0
 8021898:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802189a:	f108 38ff 	add.w	r8, r8, #4294967295
 802189e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80218a2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80218a6:	10d2      	asrs	r2, r2, #3
 80218a8:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80218ac:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80218b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80218b4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80218b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80218ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218bc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80218be:	041b      	lsls	r3, r3, #16
 80218c0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80218c4:	ea43 030b 	orr.w	r3, r3, fp
 80218c8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80218cc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80218d0:	4353      	muls	r3, r2
 80218d2:	fb05 3c0c 	mla	ip, r5, ip, r3
 80218d6:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80218da:	ea43 0b01 	orr.w	fp, r3, r1
 80218de:	f1c0 0110 	rsb	r1, r0, #16
 80218e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80218e4:	eba1 0e0e 	sub.w	lr, r1, lr
 80218e8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80218ec:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80218f0:	fb0e cc0b 	mla	ip, lr, fp, ip
 80218f4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80218f8:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80218fc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8021900:	ea4b 0e0e 	orr.w	lr, fp, lr
 8021904:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021908:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802190c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021910:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021914:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021918:	ea43 0c0c 	orr.w	ip, r3, ip
 802191c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802191e:	441c      	add	r4, r3
 8021920:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021922:	f82a cb02 	strh.w	ip, [sl], #2
 8021926:	441e      	add	r6, r3
 8021928:	e723      	b.n	8021772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802192a:	2800      	cmp	r0, #0
 802192c:	d0b1      	beq.n	8021892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802192e:	5cd3      	ldrb	r3, [r2, r3]
 8021930:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021934:	930a      	str	r3, [sp, #40]	@ 0x28
 8021936:	e7ac      	b.n	8021892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8021938:	b013      	add	sp, #76	@ 0x4c
 802193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802193e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802193e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021942:	880d      	ldrh	r5, [r1, #0]
 8021944:	b087      	sub	sp, #28
 8021946:	10ef      	asrs	r7, r5, #3
 8021948:	9103      	str	r1, [sp, #12]
 802194a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 802194e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8021952:	00ed      	lsls	r5, r5, #3
 8021954:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021958:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 802195c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8021960:	b2ed      	uxtb	r5, r5
 8021962:	9701      	str	r7, [sp, #4]
 8021964:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8021968:	9502      	str	r5, [sp, #8]
 802196a:	9d01      	ldr	r5, [sp, #4]
 802196c:	9902      	ldr	r1, [sp, #8]
 802196e:	022d      	lsls	r5, r5, #8
 8021970:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8021974:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8021978:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 802197c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8021980:	430d      	orrs	r5, r1
 8021982:	fb06 0709 	mla	r7, r6, r9, r0
 8021986:	2e00      	cmp	r6, #0
 8021988:	9505      	str	r5, [sp, #20]
 802198a:	eb02 0c07 	add.w	ip, r2, r7
 802198e:	f2c0 80b6 	blt.w	8021afe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8021992:	45b3      	cmp	fp, r6
 8021994:	f340 80b3 	ble.w	8021afe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8021998:	2800      	cmp	r0, #0
 802199a:	f2c0 80ae 	blt.w	8021afa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802199e:	4581      	cmp	r9, r0
 80219a0:	f340 80ab 	ble.w	8021afa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80219a4:	5dd7      	ldrb	r7, [r2, r7]
 80219a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80219aa:	441f      	add	r7, r3
 80219ac:	1c42      	adds	r2, r0, #1
 80219ae:	f100 80a9 	bmi.w	8021b04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80219b2:	4591      	cmp	r9, r2
 80219b4:	f340 80a6 	ble.w	8021b04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80219b8:	2c00      	cmp	r4, #0
 80219ba:	f000 80a3 	beq.w	8021b04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80219be:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80219c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80219c6:	441d      	add	r5, r3
 80219c8:	3601      	adds	r6, #1
 80219ca:	f100 809f 	bmi.w	8021b0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80219ce:	45b3      	cmp	fp, r6
 80219d0:	f340 809c 	ble.w	8021b0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80219d4:	f1be 0f00 	cmp.w	lr, #0
 80219d8:	f000 8098 	beq.w	8021b0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80219dc:	2800      	cmp	r0, #0
 80219de:	f2c0 8093 	blt.w	8021b08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80219e2:	4581      	cmp	r9, r0
 80219e4:	f340 8090 	ble.w	8021b08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80219e8:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80219ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80219f0:	441e      	add	r6, r3
 80219f2:	3001      	adds	r0, #1
 80219f4:	f100 808d 	bmi.w	8021b12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80219f8:	4581      	cmp	r9, r0
 80219fa:	f340 808a 	ble.w	8021b12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80219fe:	2c00      	cmp	r4, #0
 8021a00:	f000 8087 	beq.w	8021b12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8021a04:	44e1      	add	r9, ip
 8021a06:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021a0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021a0e:	4413      	add	r3, r2
 8021a10:	b2a4      	uxth	r4, r4
 8021a12:	f897 c002 	ldrb.w	ip, [r7, #2]
 8021a16:	fa1f fe8e 	uxth.w	lr, lr
 8021a1a:	9901      	ldr	r1, [sp, #4]
 8021a1c:	fb04 fb0e 	mul.w	fp, r4, lr
 8021a20:	0124      	lsls	r4, r4, #4
 8021a22:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8021a26:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8021a2a:	eba4 040b 	sub.w	r4, r4, fp
 8021a2e:	fa1f f08e 	uxth.w	r0, lr
 8021a32:	b2a2      	uxth	r2, r4
 8021a34:	78ac      	ldrb	r4, [r5, #2]
 8021a36:	eba9 0900 	sub.w	r9, r9, r0
 8021a3a:	fa1f fe88 	uxth.w	lr, r8
 8021a3e:	4354      	muls	r4, r2
 8021a40:	ea6f 0808 	mvn.w	r8, r8
 8021a44:	fa1f f989 	uxth.w	r9, r9
 8021a48:	fa5f f888 	uxtb.w	r8, r8
 8021a4c:	fb09 440c 	mla	r4, r9, ip, r4
 8021a50:	f896 c002 	ldrb.w	ip, [r6, #2]
 8021a54:	fb1a fa08 	smulbb	sl, sl, r8
 8021a58:	fb00 440c 	mla	r4, r0, ip, r4
 8021a5c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8021a60:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8021a64:	787c      	ldrb	r4, [r7, #1]
 8021a66:	783f      	ldrb	r7, [r7, #0]
 8021a68:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021a6c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8021a70:	f895 a001 	ldrb.w	sl, [r5, #1]
 8021a74:	782d      	ldrb	r5, [r5, #0]
 8021a76:	fb02 fa0a 	mul.w	sl, r2, sl
 8021a7a:	fa1f fc8c 	uxth.w	ip, ip
 8021a7e:	436a      	muls	r2, r5
 8021a80:	7835      	ldrb	r5, [r6, #0]
 8021a82:	fb09 aa04 	mla	sl, r9, r4, sl
 8021a86:	7874      	ldrb	r4, [r6, #1]
 8021a88:	fb09 2207 	mla	r2, r9, r7, r2
 8021a8c:	fb00 aa04 	mla	sl, r0, r4, sl
 8021a90:	785c      	ldrb	r4, [r3, #1]
 8021a92:	fb00 2005 	mla	r0, r0, r5, r2
 8021a96:	781b      	ldrb	r3, [r3, #0]
 8021a98:	fb0b a404 	mla	r4, fp, r4, sl
 8021a9c:	fb11 fa08 	smulbb	sl, r1, r8
 8021aa0:	fb0b 0b03 	mla	fp, fp, r3, r0
 8021aa4:	9b02      	ldr	r3, [sp, #8]
 8021aa6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021aaa:	fb13 f808 	smulbb	r8, r3, r8
 8021aae:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8021ab2:	fb04 a40e 	mla	r4, r4, lr, sl
 8021ab6:	f10c 0301 	add.w	r3, ip, #1
 8021aba:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8021abe:	b2a4      	uxth	r4, r4
 8021ac0:	fa1f fe8e 	uxth.w	lr, lr
 8021ac4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021ac8:	f104 0a01 	add.w	sl, r4, #1
 8021acc:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8021ad0:	f10e 0c01 	add.w	ip, lr, #1
 8021ad4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021ad8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021adc:	0964      	lsrs	r4, r4, #5
 8021ade:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021ae2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8021ae6:	ea4c 0c03 	orr.w	ip, ip, r3
 8021aea:	9b03      	ldr	r3, [sp, #12]
 8021aec:	ea4c 0c04 	orr.w	ip, ip, r4
 8021af0:	f8a3 c000 	strh.w	ip, [r3]
 8021af4:	b007      	add	sp, #28
 8021af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021afa:	af05      	add	r7, sp, #20
 8021afc:	e756      	b.n	80219ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8021afe:	ad05      	add	r5, sp, #20
 8021b00:	462f      	mov	r7, r5
 8021b02:	e761      	b.n	80219c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8021b04:	ad05      	add	r5, sp, #20
 8021b06:	e75f      	b.n	80219c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8021b08:	ae05      	add	r6, sp, #20
 8021b0a:	e772      	b.n	80219f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8021b0c:	ab05      	add	r3, sp, #20
 8021b0e:	461e      	mov	r6, r3
 8021b10:	e77e      	b.n	8021a10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8021b12:	ab05      	add	r3, sp, #20
 8021b14:	e77c      	b.n	8021a10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08021b16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b1a:	b095      	sub	sp, #84	@ 0x54
 8021b1c:	9212      	str	r2, [sp, #72]	@ 0x48
 8021b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8021b22:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8021b26:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021b28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021b2a:	6850      	ldr	r0, [r2, #4]
 8021b2c:	910e      	str	r1, [sp, #56]	@ 0x38
 8021b2e:	6812      	ldr	r2, [r2, #0]
 8021b30:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8021b34:	fb00 1303 	mla	r3, r0, r3, r1
 8021b38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b3e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021b40:	681b      	ldr	r3, [r3, #0]
 8021b42:	930d      	str	r3, [sp, #52]	@ 0x34
 8021b44:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021b46:	685c      	ldr	r4, [r3, #4]
 8021b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021b4a:	3404      	adds	r4, #4
 8021b4c:	43db      	mvns	r3, r3
 8021b4e:	b2db      	uxtb	r3, r3
 8021b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	dc03      	bgt.n	8021b60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021b58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	f340 8255 	ble.w	802200a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8021b60:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021b62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021b66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021b6a:	1e48      	subs	r0, r1, #1
 8021b6c:	1e55      	subs	r5, r2, #1
 8021b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	f340 80f9 	ble.w	8021d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8021b76:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8021b78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021b7a:	1436      	asrs	r6, r6, #16
 8021b7c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021b80:	d406      	bmi.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b82:	4286      	cmp	r6, r0
 8021b84:	da04      	bge.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	db02      	blt.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b8a:	42ab      	cmp	r3, r5
 8021b8c:	f2c0 80ed 	blt.w	8021d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021b90:	3601      	adds	r6, #1
 8021b92:	f100 80da 	bmi.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021b96:	42b1      	cmp	r1, r6
 8021b98:	f2c0 80d7 	blt.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021b9c:	3301      	adds	r3, #1
 8021b9e:	f100 80d4 	bmi.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021ba2:	429a      	cmp	r2, r3
 8021ba4:	f2c0 80d1 	blt.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021baa:	9311      	str	r3, [sp, #68]	@ 0x44
 8021bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021bae:	930c      	str	r3, [sp, #48]	@ 0x30
 8021bb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	f340 80fa 	ble.w	8021dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8021bb8:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8021bba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021bbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021bbe:	68c6      	ldr	r6, [r0, #12]
 8021bc0:	141d      	asrs	r5, r3, #16
 8021bc2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8021bc4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021bc8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021bca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021bcc:	1400      	asrs	r0, r0, #16
 8021bce:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021bd2:	6892      	ldr	r2, [r2, #8]
 8021bd4:	f100 813e 	bmi.w	8021e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021bd8:	1e57      	subs	r7, r2, #1
 8021bda:	42b8      	cmp	r0, r7
 8021bdc:	f280 813a 	bge.w	8021e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021be0:	2d00      	cmp	r5, #0
 8021be2:	f2c0 8137 	blt.w	8021e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021be6:	1e77      	subs	r7, r6, #1
 8021be8:	42bd      	cmp	r5, r7
 8021bea:	f280 8133 	bge.w	8021e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021bee:	b212      	sxth	r2, r2
 8021bf0:	fb05 0002 	mla	r0, r5, r2, r0
 8021bf4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021bf6:	f815 a000 	ldrb.w	sl, [r5, r0]
 8021bfa:	182e      	adds	r6, r5, r0
 8021bfc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8021c00:	eb04 050a 	add.w	r5, r4, sl
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	f000 8117 	beq.w	8021e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021c0a:	f896 c001 	ldrb.w	ip, [r6, #1]
 8021c0e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021c12:	44a4      	add	ip, r4
 8021c14:	2900      	cmp	r1, #0
 8021c16:	f000 8117 	beq.w	8021e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021c1a:	18b0      	adds	r0, r6, r2
 8021c1c:	5cb2      	ldrb	r2, [r6, r2]
 8021c1e:	7840      	ldrb	r0, [r0, #1]
 8021c20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c28:	4422      	add	r2, r4
 8021c2a:	4420      	add	r0, r4
 8021c2c:	b29b      	uxth	r3, r3
 8021c2e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8021c32:	b289      	uxth	r1, r1
 8021c34:	f895 b002 	ldrb.w	fp, [r5, #2]
 8021c38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021c3a:	fb03 f901 	mul.w	r9, r3, r1
 8021c3e:	011b      	lsls	r3, r3, #4
 8021c40:	f8b6 e000 	ldrh.w	lr, [r6]
 8021c44:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021c48:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8021c4c:	eba3 0309 	sub.w	r3, r3, r9
 8021c50:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8021c54:	b289      	uxth	r1, r1
 8021c56:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8021c5a:	b29b      	uxth	r3, r3
 8021c5c:	eba8 0801 	sub.w	r8, r8, r1
 8021c60:	435f      	muls	r7, r3
 8021c62:	fa1f f888 	uxth.w	r8, r8
 8021c66:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c6a:	fb08 770b 	mla	r7, r8, fp, r7
 8021c6e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8021c72:	fb01 770b 	mla	r7, r1, fp, r7
 8021c76:	f890 b002 	ldrb.w	fp, [r0, #2]
 8021c7a:	fb09 770b 	mla	r7, r9, fp, r7
 8021c7e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8021c82:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8021c86:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021c8a:	fb1b fb03 	smulbb	fp, fp, r3
 8021c8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021c90:	fb07 b706 	mla	r7, r7, r6, fp
 8021c94:	f895 b001 	ldrb.w	fp, [r5, #1]
 8021c98:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021c9c:	f89c c000 	ldrb.w	ip, [ip]
 8021ca0:	b2bf      	uxth	r7, r7
 8021ca2:	435d      	muls	r5, r3
 8021ca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021ca6:	fb08 550b 	mla	r5, r8, fp, r5
 8021caa:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021cae:	fb01 550b 	mla	r5, r1, fp, r5
 8021cb2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021cb6:	fb09 550b 	mla	r5, r9, fp, r5
 8021cba:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8021cbe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021cc2:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8021cc6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021cca:	fa5f fe8e 	uxtb.w	lr, lr
 8021cce:	fb1b fb03 	smulbb	fp, fp, r3
 8021cd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cd4:	fb03 f30c 	mul.w	r3, r3, ip
 8021cd8:	f892 c000 	ldrb.w	ip, [r2]
 8021cdc:	fb05 b506 	mla	r5, r5, r6, fp
 8021ce0:	fb08 330a 	mla	r3, r8, sl, r3
 8021ce4:	b2ad      	uxth	r5, r5
 8021ce6:	fb01 330c 	mla	r3, r1, ip, r3
 8021cea:	f890 c000 	ldrb.w	ip, [r0]
 8021cee:	f105 0b01 	add.w	fp, r5, #1
 8021cf2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021cf8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021cfc:	fb1e fe03 	smulbb	lr, lr, r3
 8021d00:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021d04:	1c7b      	adds	r3, r7, #1
 8021d06:	096d      	lsrs	r5, r5, #5
 8021d08:	fb0c e606 	mla	r6, ip, r6, lr
 8021d0c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021d10:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021d14:	b2b6      	uxth	r6, r6
 8021d16:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8021d1a:	1c77      	adds	r7, r6, #1
 8021d1c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021d20:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021d24:	431f      	orrs	r7, r3
 8021d26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d28:	433d      	orrs	r5, r7
 8021d2a:	801d      	strh	r5, [r3, #0]
 8021d2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d2e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021d30:	3302      	adds	r3, #2
 8021d32:	930c      	str	r3, [sp, #48]	@ 0x30
 8021d34:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021d36:	4413      	add	r3, r2
 8021d38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021d3a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021d3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021d3e:	4413      	add	r3, r2
 8021d40:	9320      	str	r3, [sp, #128]	@ 0x80
 8021d42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d44:	3b01      	subs	r3, #1
 8021d46:	9311      	str	r3, [sp, #68]	@ 0x44
 8021d48:	e732      	b.n	8021bb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021d4a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021d4c:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8021d4e:	4433      	add	r3, r6
 8021d50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8021d52:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021d54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021d56:	4433      	add	r3, r6
 8021d58:	9320      	str	r3, [sp, #128]	@ 0x80
 8021d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d5c:	3b01      	subs	r3, #1
 8021d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021d62:	3302      	adds	r3, #2
 8021d64:	930a      	str	r3, [sp, #40]	@ 0x28
 8021d66:	e702      	b.n	8021b6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021d68:	d027      	beq.n	8021dba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8021d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d6c:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8021d6e:	3b01      	subs	r3, #1
 8021d70:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8021d72:	fb00 5003 	mla	r0, r0, r3, r5
 8021d76:	1400      	asrs	r0, r0, #16
 8021d78:	f53f af16 	bmi.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d7c:	3901      	subs	r1, #1
 8021d7e:	4288      	cmp	r0, r1
 8021d80:	f6bf af12 	bge.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d84:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8021d86:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8021d88:	fb01 0303 	mla	r3, r1, r3, r0
 8021d8c:	141b      	asrs	r3, r3, #16
 8021d8e:	f53f af0b 	bmi.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d92:	3a01      	subs	r2, #1
 8021d94:	4293      	cmp	r3, r2
 8021d96:	f6bf af07 	bge.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d9c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8021da0:	9311      	str	r3, [sp, #68]	@ 0x44
 8021da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021da4:	930c      	str	r3, [sp, #48]	@ 0x30
 8021da6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	dc70      	bgt.n	8021e8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8021dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021dae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021db0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021db4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8021dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	f340 8124 	ble.w	802200a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8021dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021dc6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021dc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021dcc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021dd0:	eef0 6a62 	vmov.f32	s13, s5
 8021dd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021dd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ddc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021de0:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8021de4:	eef0 6a43 	vmov.f32	s13, s6
 8021de8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dec:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8021df0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021df4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021df8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021dfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e08:	ee12 2a90 	vmov	r2, s5
 8021e0c:	eef0 2a47 	vmov.f32	s5, s14
 8021e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e14:	ee13 2a10 	vmov	r2, s6
 8021e18:	9321      	str	r3, [sp, #132]	@ 0x84
 8021e1a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021e1c:	eeb0 3a67 	vmov.f32	s6, s15
 8021e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e24:	9322      	str	r3, [sp, #136]	@ 0x88
 8021e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021e2a:	3b01      	subs	r3, #1
 8021e2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8021e2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021e30:	bf08      	it	eq
 8021e32:	4613      	moveq	r3, r2
 8021e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e36:	e68c      	b.n	8021b52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021e38:	b149      	cbz	r1, 8021e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8021e3a:	5cb2      	ldrb	r2, [r6, r2]
 8021e3c:	4628      	mov	r0, r5
 8021e3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021e42:	4422      	add	r2, r4
 8021e44:	46ac      	mov	ip, r5
 8021e46:	e6f1      	b.n	8021c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021e48:	4628      	mov	r0, r5
 8021e4a:	462a      	mov	r2, r5
 8021e4c:	e6ee      	b.n	8021c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021e4e:	4628      	mov	r0, r5
 8021e50:	462a      	mov	r2, r5
 8021e52:	e7f7      	b.n	8021e44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021e54:	1c47      	adds	r7, r0, #1
 8021e56:	f53f af69 	bmi.w	8021d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8021e5a:	42ba      	cmp	r2, r7
 8021e5c:	f6ff af66 	blt.w	8021d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8021e60:	1c6f      	adds	r7, r5, #1
 8021e62:	f53f af63 	bmi.w	8021d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8021e66:	42be      	cmp	r6, r7
 8021e68:	f6ff af60 	blt.w	8021d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8021e6c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021e6e:	b236      	sxth	r6, r6
 8021e70:	b212      	sxth	r2, r2
 8021e72:	9002      	str	r0, [sp, #8]
 8021e74:	9601      	str	r6, [sp, #4]
 8021e76:	9200      	str	r2, [sp, #0]
 8021e78:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021e7a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8021e7e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8021e82:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8021e86:	4623      	mov	r3, r4
 8021e88:	f7ff fd59 	bl	802193e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8021e8c:	e74e      	b.n	8021d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8021e8e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021e90:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8021e92:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021e96:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8021e98:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021e9a:	1400      	asrs	r0, r0, #16
 8021e9c:	142d      	asrs	r5, r5, #16
 8021e9e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021ea0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021ea4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021ea8:	fb02 5000 	mla	r0, r2, r0, r5
 8021eac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021eae:	f815 9000 	ldrb.w	r9, [r5, r0]
 8021eb2:	182e      	adds	r6, r5, r0
 8021eb4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021eb8:	eb04 0509 	add.w	r5, r4, r9
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	f000 8096 	beq.w	8021fee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021ec2:	7877      	ldrb	r7, [r6, #1]
 8021ec4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021ec8:	4427      	add	r7, r4
 8021eca:	2900      	cmp	r1, #0
 8021ecc:	f000 8097 	beq.w	8021ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8021ed0:	18b0      	adds	r0, r6, r2
 8021ed2:	5cb2      	ldrb	r2, [r6, r2]
 8021ed4:	7840      	ldrb	r0, [r0, #1]
 8021ed6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021eda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021ede:	4422      	add	r2, r4
 8021ee0:	4420      	add	r0, r4
 8021ee2:	b29b      	uxth	r3, r3
 8021ee4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021ee6:	b289      	uxth	r1, r1
 8021ee8:	f895 b002 	ldrb.w	fp, [r5, #2]
 8021eec:	f8b6 c000 	ldrh.w	ip, [r6]
 8021ef0:	fb03 f801 	mul.w	r8, r3, r1
 8021ef4:	011b      	lsls	r3, r3, #4
 8021ef6:	78be      	ldrb	r6, [r7, #2]
 8021ef8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8021efc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8021f00:	eba3 0308 	sub.w	r3, r3, r8
 8021f04:	f814 9009 	ldrb.w	r9, [r4, r9]
 8021f08:	b289      	uxth	r1, r1
 8021f0a:	b29b      	uxth	r3, r3
 8021f0c:	ebae 0e01 	sub.w	lr, lr, r1
 8021f10:	435e      	muls	r6, r3
 8021f12:	fa1f fe8e 	uxth.w	lr, lr
 8021f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8021f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f1a:	fb0e 660b 	mla	r6, lr, fp, r6
 8021f1e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8021f22:	fb01 660b 	mla	r6, r1, fp, r6
 8021f26:	f890 b002 	ldrb.w	fp, [r0, #2]
 8021f2a:	fb08 660b 	mla	r6, r8, fp, r6
 8021f2e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8021f32:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8021f36:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021f3a:	fb1b fb03 	smulbb	fp, fp, r3
 8021f3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021f40:	fb06 b60a 	mla	r6, r6, sl, fp
 8021f44:	f895 b001 	ldrb.w	fp, [r5, #1]
 8021f48:	787d      	ldrb	r5, [r7, #1]
 8021f4a:	783f      	ldrb	r7, [r7, #0]
 8021f4c:	b2b6      	uxth	r6, r6
 8021f4e:	435d      	muls	r5, r3
 8021f50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f52:	fb0e 550b 	mla	r5, lr, fp, r5
 8021f56:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021f5a:	fb01 550b 	mla	r5, r1, fp, r5
 8021f5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021f62:	fb08 550b 	mla	r5, r8, fp, r5
 8021f66:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8021f6a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021f6e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8021f72:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021f76:	fa5f fc8c 	uxtb.w	ip, ip
 8021f7a:	fb1b fb03 	smulbb	fp, fp, r3
 8021f7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021f80:	437b      	muls	r3, r7
 8021f82:	7817      	ldrb	r7, [r2, #0]
 8021f84:	fb05 b50a 	mla	r5, r5, sl, fp
 8021f88:	fb0e 3309 	mla	r3, lr, r9, r3
 8021f8c:	b2ad      	uxth	r5, r5
 8021f8e:	fb01 3307 	mla	r3, r1, r7, r3
 8021f92:	7807      	ldrb	r7, [r0, #0]
 8021f94:	f105 0b01 	add.w	fp, r5, #1
 8021f98:	fb08 3707 	mla	r7, r8, r7, r3
 8021f9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f9e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021fa2:	fb1c fc03 	smulbb	ip, ip, r3
 8021fa6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021faa:	1c73      	adds	r3, r6, #1
 8021fac:	096d      	lsrs	r5, r5, #5
 8021fae:	fb07 c70a 	mla	r7, r7, sl, ip
 8021fb2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021fb6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021fba:	b2bf      	uxth	r7, r7
 8021fbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021fbe:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021fc2:	1c7a      	adds	r2, r7, #1
 8021fc4:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021fc8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021fcc:	4316      	orrs	r6, r2
 8021fce:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021fd0:	432e      	orrs	r6, r5
 8021fd2:	f823 6b02 	strh.w	r6, [r3], #2
 8021fd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8021fd8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021fda:	4413      	add	r3, r2
 8021fdc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021fde:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021fe0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021fe2:	4413      	add	r3, r2
 8021fe4:	9320      	str	r3, [sp, #128]	@ 0x80
 8021fe6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021fe8:	3b01      	subs	r3, #1
 8021fea:	9311      	str	r3, [sp, #68]	@ 0x44
 8021fec:	e6db      	b.n	8021da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8021fee:	b149      	cbz	r1, 8022004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8021ff0:	5cb2      	ldrb	r2, [r6, r2]
 8021ff2:	4628      	mov	r0, r5
 8021ff4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ff8:	4422      	add	r2, r4
 8021ffa:	462f      	mov	r7, r5
 8021ffc:	e771      	b.n	8021ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8021ffe:	4628      	mov	r0, r5
 8022000:	462a      	mov	r2, r5
 8022002:	e76e      	b.n	8021ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022004:	4628      	mov	r0, r5
 8022006:	462a      	mov	r2, r5
 8022008:	e7f7      	b.n	8021ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802200a:	b015      	add	sp, #84	@ 0x54
 802200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022010 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022014:	880f      	ldrh	r7, [r1, #0]
 8022016:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 802201a:	023c      	lsls	r4, r7, #8
 802201c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022020:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8022024:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8022028:	017c      	lsls	r4, r7, #5
 802202a:	00ff      	lsls	r7, r7, #3
 802202c:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8022030:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8022034:	b2ff      	uxtb	r7, r7
 8022036:	ea4b 0404 	orr.w	r4, fp, r4
 802203a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 802203e:	4327      	orrs	r7, r4
 8022040:	fb05 ca0e 	mla	sl, r5, lr, ip
 8022044:	2d00      	cmp	r5, #0
 8022046:	9701      	str	r7, [sp, #4]
 8022048:	eb02 080a 	add.w	r8, r2, sl
 802204c:	db7e      	blt.n	802214c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802204e:	45a9      	cmp	r9, r5
 8022050:	dd7c      	ble.n	802214c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022052:	f1bc 0f00 	cmp.w	ip, #0
 8022056:	db77      	blt.n	8022148 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022058:	45e6      	cmp	lr, ip
 802205a:	dd75      	ble.n	8022148 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802205c:	f812 700a 	ldrb.w	r7, [r2, sl]
 8022060:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022064:	441f      	add	r7, r3
 8022066:	f11c 0201 	adds.w	r2, ip, #1
 802206a:	d472      	bmi.n	8022152 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802206c:	4596      	cmp	lr, r2
 802206e:	dd70      	ble.n	8022152 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022070:	2800      	cmp	r0, #0
 8022072:	d06e      	beq.n	8022152 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022074:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022078:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802207c:	441c      	add	r4, r3
 802207e:	3501      	adds	r5, #1
 8022080:	d46b      	bmi.n	802215a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022082:	45a9      	cmp	r9, r5
 8022084:	dd69      	ble.n	802215a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022086:	2e00      	cmp	r6, #0
 8022088:	d067      	beq.n	802215a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802208a:	f1bc 0f00 	cmp.w	ip, #0
 802208e:	db62      	blt.n	8022156 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022090:	45e6      	cmp	lr, ip
 8022092:	dd60      	ble.n	8022156 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022094:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802209c:	441d      	add	r5, r3
 802209e:	f11c 0201 	adds.w	r2, ip, #1
 80220a2:	d45d      	bmi.n	8022160 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80220a4:	4596      	cmp	lr, r2
 80220a6:	dd5b      	ble.n	8022160 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80220a8:	2800      	cmp	r0, #0
 80220aa:	d059      	beq.n	8022160 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80220ac:	44c6      	add	lr, r8
 80220ae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80220b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80220b6:	4413      	add	r3, r2
 80220b8:	b280      	uxth	r0, r0
 80220ba:	f897 e002 	ldrb.w	lr, [r7, #2]
 80220be:	b2b2      	uxth	r2, r6
 80220c0:	f897 9000 	ldrb.w	r9, [r7]
 80220c4:	787f      	ldrb	r7, [r7, #1]
 80220c6:	fb00 f602 	mul.w	r6, r0, r2
 80220ca:	0100      	lsls	r0, r0, #4
 80220cc:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80220d0:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 80220d4:	1b80      	subs	r0, r0, r6
 80220d6:	fa1f fc82 	uxth.w	ip, r2
 80220da:	b282      	uxth	r2, r0
 80220dc:	78a0      	ldrb	r0, [r4, #2]
 80220de:	eba8 080c 	sub.w	r8, r8, ip
 80220e2:	4350      	muls	r0, r2
 80220e4:	fa1f f888 	uxth.w	r8, r8
 80220e8:	fb08 0e0e 	mla	lr, r8, lr, r0
 80220ec:	78a8      	ldrb	r0, [r5, #2]
 80220ee:	fb0c e000 	mla	r0, ip, r0, lr
 80220f2:	f893 e002 	ldrb.w	lr, [r3, #2]
 80220f6:	fb06 0e0e 	mla	lr, r6, lr, r0
 80220fa:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 80220fe:	f894 e000 	ldrb.w	lr, [r4]
 8022102:	fb02 fe0e 	mul.w	lr, r2, lr
 8022106:	fb08 e909 	mla	r9, r8, r9, lr
 802210a:	f895 e000 	ldrb.w	lr, [r5]
 802210e:	fb0c 990e 	mla	r9, ip, lr, r9
 8022112:	f893 e000 	ldrb.w	lr, [r3]
 8022116:	785b      	ldrb	r3, [r3, #1]
 8022118:	fb06 9e0e 	mla	lr, r6, lr, r9
 802211c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022120:	ea4e 0e00 	orr.w	lr, lr, r0
 8022124:	7860      	ldrb	r0, [r4, #1]
 8022126:	4350      	muls	r0, r2
 8022128:	786a      	ldrb	r2, [r5, #1]
 802212a:	fb08 0007 	mla	r0, r8, r7, r0
 802212e:	fb0c 0202 	mla	r2, ip, r2, r0
 8022132:	fb06 2303 	mla	r3, r6, r3, r2
 8022136:	095b      	lsrs	r3, r3, #5
 8022138:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802213c:	ea4e 0303 	orr.w	r3, lr, r3
 8022140:	800b      	strh	r3, [r1, #0]
 8022142:	b003      	add	sp, #12
 8022144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022148:	af01      	add	r7, sp, #4
 802214a:	e78c      	b.n	8022066 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 802214c:	ac01      	add	r4, sp, #4
 802214e:	4627      	mov	r7, r4
 8022150:	e795      	b.n	802207e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022152:	ac01      	add	r4, sp, #4
 8022154:	e793      	b.n	802207e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022156:	ad01      	add	r5, sp, #4
 8022158:	e7a1      	b.n	802209e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802215a:	ab01      	add	r3, sp, #4
 802215c:	461d      	mov	r5, r3
 802215e:	e7ab      	b.n	80220b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8022160:	ab01      	add	r3, sp, #4
 8022162:	e7a9      	b.n	80220b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08022164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022168:	b08f      	sub	sp, #60	@ 0x3c
 802216a:	920c      	str	r2, [sp, #48]	@ 0x30
 802216c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802216e:	900d      	str	r0, [sp, #52]	@ 0x34
 8022170:	910a      	str	r1, [sp, #40]	@ 0x28
 8022172:	6850      	ldr	r0, [r2, #4]
 8022174:	9306      	str	r3, [sp, #24]
 8022176:	6812      	ldr	r2, [r2, #0]
 8022178:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 802217c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8022180:	fb00 1303 	mla	r3, r0, r3, r1
 8022184:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022188:	9307      	str	r3, [sp, #28]
 802218a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	9308      	str	r3, [sp, #32]
 8022190:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022192:	685c      	ldr	r4, [r3, #4]
 8022194:	3404      	adds	r4, #4
 8022196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022198:	2b00      	cmp	r3, #0
 802219a:	dc03      	bgt.n	80221a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802219c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802219e:	2b00      	cmp	r3, #0
 80221a0:	f340 81d5 	ble.w	802254e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80221a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80221a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221ae:	1e48      	subs	r0, r1, #1
 80221b0:	1e56      	subs	r6, r2, #1
 80221b2:	9b06      	ldr	r3, [sp, #24]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	f340 80b6 	ble.w	8022326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80221ba:	ea5f 472b 	movs.w	r7, fp, asr #16
 80221be:	ea4f 4325 	mov.w	r3, r5, asr #16
 80221c2:	d406      	bmi.n	80221d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80221c4:	4287      	cmp	r7, r0
 80221c6:	da04      	bge.n	80221d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	db02      	blt.n	80221d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80221cc:	42b3      	cmp	r3, r6
 80221ce:	f2c0 80ab 	blt.w	8022328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80221d2:	3701      	adds	r7, #1
 80221d4:	f100 809c 	bmi.w	8022310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80221d8:	42b9      	cmp	r1, r7
 80221da:	f2c0 8099 	blt.w	8022310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80221de:	3301      	adds	r3, #1
 80221e0:	f100 8096 	bmi.w	8022310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80221e4:	429a      	cmp	r2, r3
 80221e6:	f2c0 8093 	blt.w	8022310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80221ea:	9b06      	ldr	r3, [sp, #24]
 80221ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80221ee:	9b07      	ldr	r3, [sp, #28]
 80221f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80221f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	f340 80b4 	ble.w	8022362 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80221fa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80221fc:	142e      	asrs	r6, r5, #16
 80221fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022200:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022204:	68c7      	ldr	r7, [r0, #12]
 8022206:	ea5f 402b 	movs.w	r0, fp, asr #16
 802220a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802220e:	6892      	ldr	r2, [r2, #8]
 8022210:	f100 80fb 	bmi.w	802240a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022214:	f102 3cff 	add.w	ip, r2, #4294967295
 8022218:	4560      	cmp	r0, ip
 802221a:	f280 80f6 	bge.w	802240a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802221e:	2e00      	cmp	r6, #0
 8022220:	f2c0 80f3 	blt.w	802240a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022224:	f107 3cff 	add.w	ip, r7, #4294967295
 8022228:	4566      	cmp	r6, ip
 802222a:	f280 80ee 	bge.w	802240a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802222e:	b212      	sxth	r2, r2
 8022230:	fb06 0002 	mla	r0, r6, r2, r0
 8022234:	9e08      	ldr	r6, [sp, #32]
 8022236:	1837      	adds	r7, r6, r0
 8022238:	5c30      	ldrb	r0, [r6, r0]
 802223a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802223e:	eb04 0c08 	add.w	ip, r4, r8
 8022242:	2b00      	cmp	r3, #0
 8022244:	f000 80d3 	beq.w	80223ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022248:	787e      	ldrb	r6, [r7, #1]
 802224a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802224e:	4426      	add	r6, r4
 8022250:	2900      	cmp	r1, #0
 8022252:	f000 80d4 	beq.w	80223fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022256:	18b8      	adds	r0, r7, r2
 8022258:	5cba      	ldrb	r2, [r7, r2]
 802225a:	7840      	ldrb	r0, [r0, #1]
 802225c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022260:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022264:	4422      	add	r2, r4
 8022266:	4420      	add	r0, r4
 8022268:	b29b      	uxth	r3, r3
 802226a:	78b7      	ldrb	r7, [r6, #2]
 802226c:	b289      	uxth	r1, r1
 802226e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022272:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022276:	fb03 f901 	mul.w	r9, r3, r1
 802227a:	011b      	lsls	r3, r3, #4
 802227c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022280:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022284:	eba3 0309 	sub.w	r3, r3, r9
 8022288:	b289      	uxth	r1, r1
 802228a:	b29b      	uxth	r3, r3
 802228c:	ebae 0e01 	sub.w	lr, lr, r1
 8022290:	435f      	muls	r7, r3
 8022292:	fa1f fe8e 	uxth.w	lr, lr
 8022296:	fb0e 770a 	mla	r7, lr, sl, r7
 802229a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802229e:	fb01 770a 	mla	r7, r1, sl, r7
 80222a2:	f890 a002 	ldrb.w	sl, [r0, #2]
 80222a6:	fb09 7a0a 	mla	sl, r9, sl, r7
 80222aa:	f814 7008 	ldrb.w	r7, [r4, r8]
 80222ae:	f896 8000 	ldrb.w	r8, [r6]
 80222b2:	7876      	ldrb	r6, [r6, #1]
 80222b4:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80222b8:	fb03 f808 	mul.w	r8, r3, r8
 80222bc:	4373      	muls	r3, r6
 80222be:	fb0e 8807 	mla	r8, lr, r7, r8
 80222c2:	7817      	ldrb	r7, [r2, #0]
 80222c4:	fb0e 330c 	mla	r3, lr, ip, r3
 80222c8:	fb01 8807 	mla	r8, r1, r7, r8
 80222cc:	7807      	ldrb	r7, [r0, #0]
 80222ce:	fb09 8707 	mla	r7, r9, r7, r8
 80222d2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80222d6:	ea47 070a 	orr.w	r7, r7, sl
 80222da:	f892 a001 	ldrb.w	sl, [r2, #1]
 80222de:	fb01 310a 	mla	r1, r1, sl, r3
 80222e2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80222e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222e8:	fb09 1a0a 	mla	sl, r9, sl, r1
 80222ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80222f0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80222f4:	ea47 070a 	orr.w	r7, r7, sl
 80222f8:	801f      	strh	r7, [r3, #0]
 80222fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222fc:	3302      	adds	r3, #2
 80222fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8022300:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022302:	449b      	add	fp, r3
 8022304:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022306:	441d      	add	r5, r3
 8022308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802230a:	3b01      	subs	r3, #1
 802230c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802230e:	e770      	b.n	80221f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022310:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022312:	449b      	add	fp, r3
 8022314:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022316:	441d      	add	r5, r3
 8022318:	9b06      	ldr	r3, [sp, #24]
 802231a:	3b01      	subs	r3, #1
 802231c:	9306      	str	r3, [sp, #24]
 802231e:	9b07      	ldr	r3, [sp, #28]
 8022320:	3302      	adds	r3, #2
 8022322:	9307      	str	r3, [sp, #28]
 8022324:	e745      	b.n	80221b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022326:	d023      	beq.n	8022370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022328:	9b06      	ldr	r3, [sp, #24]
 802232a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802232c:	3b01      	subs	r3, #1
 802232e:	fb00 b003 	mla	r0, r0, r3, fp
 8022332:	1400      	asrs	r0, r0, #16
 8022334:	f53f af59 	bmi.w	80221ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022338:	3901      	subs	r1, #1
 802233a:	4288      	cmp	r0, r1
 802233c:	f6bf af55 	bge.w	80221ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022340:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022342:	fb01 5303 	mla	r3, r1, r3, r5
 8022346:	141b      	asrs	r3, r3, #16
 8022348:	f53f af4f 	bmi.w	80221ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802234c:	3a01      	subs	r2, #1
 802234e:	4293      	cmp	r3, r2
 8022350:	f6bf af4b 	bge.w	80221ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022354:	9b06      	ldr	r3, [sp, #24]
 8022356:	9309      	str	r3, [sp, #36]	@ 0x24
 8022358:	9b07      	ldr	r3, [sp, #28]
 802235a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802235c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802235e:	2b00      	cmp	r3, #0
 8022360:	dc70      	bgt.n	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022362:	9b06      	ldr	r3, [sp, #24]
 8022364:	9a07      	ldr	r2, [sp, #28]
 8022366:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802236a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802236e:	9307      	str	r3, [sp, #28]
 8022370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022372:	2b00      	cmp	r3, #0
 8022374:	f340 80eb 	ble.w	802254e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022378:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802237c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802237e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022386:	eef0 6a62 	vmov.f32	s13, s5
 802238a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802238e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022392:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022396:	ee16 ba90 	vmov	fp, s13
 802239a:	eef0 6a43 	vmov.f32	s13, s6
 802239e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223a2:	ee16 5a90 	vmov	r5, s13
 80223a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80223aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80223ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80223b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80223b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80223ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80223be:	ee12 2a90 	vmov	r2, s5
 80223c2:	eef0 2a47 	vmov.f32	s5, s14
 80223c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223ca:	ee13 2a10 	vmov	r2, s6
 80223ce:	931b      	str	r3, [sp, #108]	@ 0x6c
 80223d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80223d2:	eeb0 3a67 	vmov.f32	s6, s15
 80223d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223da:	931c      	str	r3, [sp, #112]	@ 0x70
 80223dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80223e0:	3b01      	subs	r3, #1
 80223e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80223e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80223e6:	bf08      	it	eq
 80223e8:	4613      	moveq	r3, r2
 80223ea:	9306      	str	r3, [sp, #24]
 80223ec:	e6d3      	b.n	8022196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80223ee:	b149      	cbz	r1, 8022404 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80223f0:	5cba      	ldrb	r2, [r7, r2]
 80223f2:	4660      	mov	r0, ip
 80223f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80223f8:	4422      	add	r2, r4
 80223fa:	4666      	mov	r6, ip
 80223fc:	e734      	b.n	8022268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 80223fe:	4660      	mov	r0, ip
 8022400:	4662      	mov	r2, ip
 8022402:	e731      	b.n	8022268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022404:	4660      	mov	r0, ip
 8022406:	4662      	mov	r2, ip
 8022408:	e7f7      	b.n	80223fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802240a:	f110 0c01 	adds.w	ip, r0, #1
 802240e:	f53f af74 	bmi.w	80222fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022412:	4562      	cmp	r2, ip
 8022414:	f6ff af71 	blt.w	80222fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022418:	f116 0c01 	adds.w	ip, r6, #1
 802241c:	f53f af6d 	bmi.w	80222fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022420:	4567      	cmp	r7, ip
 8022422:	f6ff af6a 	blt.w	80222fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022426:	b23f      	sxth	r7, r7
 8022428:	b212      	sxth	r2, r2
 802242a:	9701      	str	r7, [sp, #4]
 802242c:	9200      	str	r2, [sp, #0]
 802242e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022432:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022436:	4623      	mov	r3, r4
 8022438:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802243a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802243e:	f7ff fde7 	bl	8022010 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022442:	e75a      	b.n	80222fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022444:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022446:	ea4f 462b 	mov.w	r6, fp, asr #16
 802244a:	1428      	asrs	r0, r5, #16
 802244c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022450:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022454:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022458:	fb02 6000 	mla	r0, r2, r0, r6
 802245c:	9e08      	ldr	r6, [sp, #32]
 802245e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022462:	1837      	adds	r7, r6, r0
 8022464:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022468:	eb04 0c08 	add.w	ip, r4, r8
 802246c:	2b00      	cmp	r3, #0
 802246e:	d060      	beq.n	8022532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022470:	787e      	ldrb	r6, [r7, #1]
 8022472:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022476:	4426      	add	r6, r4
 8022478:	2900      	cmp	r1, #0
 802247a:	d062      	beq.n	8022542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802247c:	18b8      	adds	r0, r7, r2
 802247e:	5cba      	ldrb	r2, [r7, r2]
 8022480:	7840      	ldrb	r0, [r0, #1]
 8022482:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022486:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802248a:	4422      	add	r2, r4
 802248c:	4420      	add	r0, r4
 802248e:	b29b      	uxth	r3, r3
 8022490:	78b7      	ldrb	r7, [r6, #2]
 8022492:	b289      	uxth	r1, r1
 8022494:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022498:	f89c c001 	ldrb.w	ip, [ip, #1]
 802249c:	fb03 f901 	mul.w	r9, r3, r1
 80224a0:	011b      	lsls	r3, r3, #4
 80224a2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80224a6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80224aa:	eba3 0309 	sub.w	r3, r3, r9
 80224ae:	b289      	uxth	r1, r1
 80224b0:	b29b      	uxth	r3, r3
 80224b2:	ebae 0e01 	sub.w	lr, lr, r1
 80224b6:	435f      	muls	r7, r3
 80224b8:	fa1f fe8e 	uxth.w	lr, lr
 80224bc:	fb0e 770a 	mla	r7, lr, sl, r7
 80224c0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80224c4:	fb01 770a 	mla	r7, r1, sl, r7
 80224c8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80224cc:	fb09 7a0a 	mla	sl, r9, sl, r7
 80224d0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80224d4:	f896 8000 	ldrb.w	r8, [r6]
 80224d8:	7876      	ldrb	r6, [r6, #1]
 80224da:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80224de:	fb03 f808 	mul.w	r8, r3, r8
 80224e2:	4373      	muls	r3, r6
 80224e4:	7856      	ldrb	r6, [r2, #1]
 80224e6:	fb0e 8807 	mla	r8, lr, r7, r8
 80224ea:	7817      	ldrb	r7, [r2, #0]
 80224ec:	fb0e 330c 	mla	r3, lr, ip, r3
 80224f0:	fb01 8807 	mla	r8, r1, r7, r8
 80224f4:	7807      	ldrb	r7, [r0, #0]
 80224f6:	fb01 3306 	mla	r3, r1, r6, r3
 80224fa:	fb09 8707 	mla	r7, r9, r7, r8
 80224fe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022502:	ea47 070a 	orr.w	r7, r7, sl
 8022506:	f890 a001 	ldrb.w	sl, [r0, #1]
 802250a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802250e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022510:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022514:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022518:	ea47 070a 	orr.w	r7, r7, sl
 802251c:	f823 7b02 	strh.w	r7, [r3], #2
 8022520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022522:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022524:	449b      	add	fp, r3
 8022526:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022528:	441d      	add	r5, r3
 802252a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802252c:	3b01      	subs	r3, #1
 802252e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022530:	e714      	b.n	802235c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8022532:	b149      	cbz	r1, 8022548 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8022534:	5cba      	ldrb	r2, [r7, r2]
 8022536:	4660      	mov	r0, ip
 8022538:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802253c:	4422      	add	r2, r4
 802253e:	4666      	mov	r6, ip
 8022540:	e7a5      	b.n	802248e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022542:	4660      	mov	r0, ip
 8022544:	4662      	mov	r2, ip
 8022546:	e7a2      	b.n	802248e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022548:	4660      	mov	r0, ip
 802254a:	4662      	mov	r2, ip
 802254c:	e7f7      	b.n	802253e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 802254e:	b00f      	add	sp, #60	@ 0x3c
 8022550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022554 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022558:	b085      	sub	sp, #20
 802255a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 802255e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8022562:	9102      	str	r1, [sp, #8]
 8022564:	2c00      	cmp	r4, #0
 8022566:	fb04 710c 	mla	r1, r4, ip, r7
 802256a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802256e:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8022572:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8022576:	eb02 0e01 	add.w	lr, r2, r1
 802257a:	f2c0 8122 	blt.w	80227c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802257e:	45a0      	cmp	r8, r4
 8022580:	f340 811f 	ble.w	80227c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8022584:	2f00      	cmp	r7, #0
 8022586:	f2c0 811a 	blt.w	80227be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802258a:	45bc      	cmp	ip, r7
 802258c:	f340 8117 	ble.w	80227be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8022590:	5c52      	ldrb	r2, [r2, r1]
 8022592:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022596:	1c7a      	adds	r2, r7, #1
 8022598:	f100 8116 	bmi.w	80227c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802259c:	4594      	cmp	ip, r2
 802259e:	f340 8113 	ble.w	80227c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80225a2:	2e00      	cmp	r6, #0
 80225a4:	f000 8112 	beq.w	80227cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80225a8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80225ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80225b0:	3401      	adds	r4, #1
 80225b2:	f100 810f 	bmi.w	80227d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80225b6:	45a0      	cmp	r8, r4
 80225b8:	f340 810c 	ble.w	80227d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80225bc:	2800      	cmp	r0, #0
 80225be:	f000 810c 	beq.w	80227da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80225c2:	2f00      	cmp	r7, #0
 80225c4:	f2c0 8104 	blt.w	80227d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80225c8:	45bc      	cmp	ip, r7
 80225ca:	f340 8101 	ble.w	80227d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80225ce:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80225d2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80225d6:	3701      	adds	r7, #1
 80225d8:	f100 8102 	bmi.w	80227e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80225dc:	45bc      	cmp	ip, r7
 80225de:	f340 80ff 	ble.w	80227e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80225e2:	2e00      	cmp	r6, #0
 80225e4:	f000 80fe 	beq.w	80227e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80225e8:	44f4      	add	ip, lr
 80225ea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80225ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80225f2:	b2b6      	uxth	r6, r6
 80225f4:	b280      	uxth	r0, r0
 80225f6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80225fa:	fb00 fe06 	mul.w	lr, r0, r6
 80225fe:	0136      	lsls	r6, r6, #4
 8022600:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022604:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022608:	eba6 070e 	sub.w	r7, r6, lr
 802260c:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8022610:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022614:	b280      	uxth	r0, r0
 8022616:	b2bf      	uxth	r7, r7
 8022618:	1a1b      	subs	r3, r3, r0
 802261a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802261e:	fb0a f607 	mul.w	r6, sl, r7
 8022622:	b29b      	uxth	r3, r3
 8022624:	fb0b 6603 	mla	r6, fp, r3, r6
 8022628:	fb00 6609 	mla	r6, r0, r9, r6
 802262c:	fb0e 6608 	mla	r6, lr, r8, r6
 8022630:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022634:	9600      	str	r6, [sp, #0]
 8022636:	2e00      	cmp	r6, #0
 8022638:	f000 80be 	beq.w	80227b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802263c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8022640:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022644:	9e02      	ldr	r6, [sp, #8]
 8022646:	fb0b fc0c 	mul.w	ip, fp, ip
 802264a:	fb0b f505 	mul.w	r5, fp, r5
 802264e:	8836      	ldrh	r6, [r6, #0]
 8022650:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022654:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022658:	9501      	str	r5, [sp, #4]
 802265a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802265e:	44dc      	add	ip, fp
 8022660:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022664:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8022668:	9503      	str	r5, [sp, #12]
 802266a:	9d01      	ldr	r5, [sp, #4]
 802266c:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8022670:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022674:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8022678:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802267c:	fb0a fc0c 	mul.w	ip, sl, ip
 8022680:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022684:	fb0a fa01 	mul.w	sl, sl, r1
 8022688:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802268c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022690:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8022694:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8022698:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802269c:	4465      	add	r5, ip
 802269e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80226a2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80226a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226aa:	fb09 fc0c 	mul.w	ip, r9, ip
 80226ae:	0a2d      	lsrs	r5, r5, #8
 80226b0:	fb09 f904 	mul.w	r9, r9, r4
 80226b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80226b8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80226bc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80226c0:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80226c4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80226c8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80226cc:	437d      	muls	r5, r7
 80226ce:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80226d2:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80226d6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80226da:	4461      	add	r1, ip
 80226dc:	fb08 f404 	mul.w	r4, r8, r4
 80226e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80226e4:	fb08 f802 	mul.w	r8, r8, r2
 80226e8:	0a09      	lsrs	r1, r1, #8
 80226ea:	0a22      	lsrs	r2, r4, #8
 80226ec:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80226f0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80226f4:	fb07 f70a 	mul.w	r7, r7, sl
 80226f8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80226fc:	4414      	add	r4, r2
 80226fe:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8022702:	0a24      	lsrs	r4, r4, #8
 8022704:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022708:	9a03      	ldr	r2, [sp, #12]
 802270a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802270e:	fb02 5503 	mla	r5, r2, r3, r5
 8022712:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022716:	9a00      	ldr	r2, [sp, #0]
 8022718:	fb04 540e 	mla	r4, r4, lr, r5
 802271c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8022720:	1235      	asrs	r5, r6, #8
 8022722:	fb01 4100 	mla	r1, r1, r0, r4
 8022726:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802272a:	0a09      	lsrs	r1, r1, #8
 802272c:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8022730:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8022734:	fb03 7101 	mla	r1, r3, r1, r7
 8022738:	fb0e 1e08 	mla	lr, lr, r8, r1
 802273c:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8022740:	fb00 e101 	mla	r1, r0, r1, lr
 8022744:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8022748:	b287      	uxth	r7, r0
 802274a:	0a09      	lsrs	r1, r1, #8
 802274c:	437a      	muls	r2, r7
 802274e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8022752:	1c53      	adds	r3, r2, #1
 8022754:	4321      	orrs	r1, r4
 8022756:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802275a:	0c0a      	lsrs	r2, r1, #16
 802275c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8022760:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022764:	b2c8      	uxtb	r0, r1
 8022766:	fb12 f207 	smulbb	r2, r2, r7
 802276a:	fb14 f407 	smulbb	r4, r4, r7
 802276e:	b2db      	uxtb	r3, r3
 8022770:	fb10 f007 	smulbb	r0, r0, r7
 8022774:	fb05 2503 	mla	r5, r5, r3, r2
 8022778:	10f2      	asrs	r2, r6, #3
 802277a:	00f6      	lsls	r6, r6, #3
 802277c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022780:	b2ad      	uxth	r5, r5
 8022782:	b2f6      	uxtb	r6, r6
 8022784:	fb02 4203 	mla	r2, r2, r3, r4
 8022788:	fb06 0303 	mla	r3, r6, r3, r0
 802278c:	b294      	uxth	r4, r2
 802278e:	b299      	uxth	r1, r3
 8022790:	1c6b      	adds	r3, r5, #1
 8022792:	1c62      	adds	r2, r4, #1
 8022794:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022798:	1c4b      	adds	r3, r1, #1
 802279a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802279e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80227a2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80227a6:	0952      	lsrs	r2, r2, #5
 80227a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80227ac:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80227b0:	432b      	orrs	r3, r5
 80227b2:	4313      	orrs	r3, r2
 80227b4:	9a02      	ldr	r2, [sp, #8]
 80227b6:	8013      	strh	r3, [r2, #0]
 80227b8:	b005      	add	sp, #20
 80227ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227be:	2500      	movs	r5, #0
 80227c0:	e6e9      	b.n	8022596 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80227c2:	2100      	movs	r1, #0
 80227c4:	460d      	mov	r5, r1
 80227c6:	e6f3      	b.n	80225b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80227c8:	2100      	movs	r1, #0
 80227ca:	e6f1      	b.n	80225b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80227cc:	4631      	mov	r1, r6
 80227ce:	e6ef      	b.n	80225b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80227d0:	2400      	movs	r4, #0
 80227d2:	e700      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80227d4:	2200      	movs	r2, #0
 80227d6:	4614      	mov	r4, r2
 80227d8:	e70b      	b.n	80225f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80227da:	4602      	mov	r2, r0
 80227dc:	4604      	mov	r4, r0
 80227de:	e708      	b.n	80225f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80227e0:	2200      	movs	r2, #0
 80227e2:	e706      	b.n	80225f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80227e4:	4632      	mov	r2, r6
 80227e6:	e704      	b.n	80225f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080227e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80227e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227ec:	b09f      	sub	sp, #124	@ 0x7c
 80227ee:	921b      	str	r2, [sp, #108]	@ 0x6c
 80227f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80227f2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80227f4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80227f8:	901d      	str	r0, [sp, #116]	@ 0x74
 80227fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80227fc:	6850      	ldr	r0, [r2, #4]
 80227fe:	9119      	str	r1, [sp, #100]	@ 0x64
 8022800:	6812      	ldr	r2, [r2, #0]
 8022802:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8022804:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8022808:	fb00 1303 	mla	r3, r0, r3, r1
 802280c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022810:	930c      	str	r3, [sp, #48]	@ 0x30
 8022812:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022814:	681b      	ldr	r3, [r3, #0]
 8022816:	9312      	str	r3, [sp, #72]	@ 0x48
 8022818:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802281a:	685e      	ldr	r6, [r3, #4]
 802281c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8022820:	3604      	adds	r6, #4
 8022822:	930d      	str	r3, [sp, #52]	@ 0x34
 8022824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022826:	2b00      	cmp	r3, #0
 8022828:	dc03      	bgt.n	8022832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802282a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802282c:	2b00      	cmp	r3, #0
 802282e:	f340 8387 	ble.w	8022f40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8022832:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022834:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022838:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802283c:	1e48      	subs	r0, r1, #1
 802283e:	1e57      	subs	r7, r2, #1
 8022840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022842:	2b00      	cmp	r3, #0
 8022844:	f340 8194 	ble.w	8022b70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8022848:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802284a:	142b      	asrs	r3, r5, #16
 802284c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022850:	d406      	bmi.n	8022860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022852:	4584      	cmp	ip, r0
 8022854:	da04      	bge.n	8022860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022856:	2b00      	cmp	r3, #0
 8022858:	db02      	blt.n	8022860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802285a:	42bb      	cmp	r3, r7
 802285c:	f2c0 8189 	blt.w	8022b72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022860:	f11c 0c01 	adds.w	ip, ip, #1
 8022864:	f100 8177 	bmi.w	8022b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022868:	4561      	cmp	r1, ip
 802286a:	f2c0 8174 	blt.w	8022b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802286e:	3301      	adds	r3, #1
 8022870:	f100 8171 	bmi.w	8022b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022874:	429a      	cmp	r2, r3
 8022876:	f2c0 816e 	blt.w	8022b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802287a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802287c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802287e:	931a      	str	r3, [sp, #104]	@ 0x68
 8022880:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022882:	2b00      	cmp	r3, #0
 8022884:	f340 8193 	ble.w	8022bae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8022888:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802288a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802288e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022892:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022896:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022898:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802289c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802289e:	141b      	asrs	r3, r3, #16
 80228a0:	f100 81d6 	bmi.w	8022c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80228a4:	f100 38ff 	add.w	r8, r0, #4294967295
 80228a8:	4543      	cmp	r3, r8
 80228aa:	f280 81d1 	bge.w	8022c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80228ae:	f1bc 0f00 	cmp.w	ip, #0
 80228b2:	f2c0 81cd 	blt.w	8022c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80228b6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80228ba:	45c4      	cmp	ip, r8
 80228bc:	f280 81c8 	bge.w	8022c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80228c0:	b200      	sxth	r0, r0
 80228c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80228c4:	fb0c 3300 	mla	r3, ip, r0, r3
 80228c8:	eb04 0803 	add.w	r8, r4, r3
 80228cc:	5ce3      	ldrb	r3, [r4, r3]
 80228ce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80228d2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80228d6:	2a00      	cmp	r2, #0
 80228d8:	f000 81af 	beq.w	8022c3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80228dc:	f898 c001 	ldrb.w	ip, [r8, #1]
 80228e0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80228e4:	940e      	str	r4, [sp, #56]	@ 0x38
 80228e6:	0e24      	lsrs	r4, r4, #24
 80228e8:	9415      	str	r4, [sp, #84]	@ 0x54
 80228ea:	b179      	cbz	r1, 802290c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80228ec:	eb08 0c00 	add.w	ip, r8, r0
 80228f0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80228f4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80228f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80228fa:	0e00      	lsrs	r0, r0, #24
 80228fc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80228fe:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022902:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8022906:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022908:	0e00      	lsrs	r0, r0, #24
 802290a:	9016      	str	r0, [sp, #88]	@ 0x58
 802290c:	b292      	uxth	r2, r2
 802290e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8022910:	b289      	uxth	r1, r1
 8022912:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022914:	fb02 f901 	mul.w	r9, r2, r1
 8022918:	0112      	lsls	r2, r2, #4
 802291a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802291e:	eba2 0809 	sub.w	r8, r2, r9
 8022922:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8022926:	b289      	uxth	r1, r1
 8022928:	fa1f f888 	uxth.w	r8, r8
 802292c:	1a52      	subs	r2, r2, r1
 802292e:	fb08 f000 	mul.w	r0, r8, r0
 8022932:	b292      	uxth	r2, r2
 8022934:	fb02 000e 	mla	r0, r2, lr, r0
 8022938:	fb01 0004 	mla	r0, r1, r4, r0
 802293c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802293e:	fb09 0004 	mla	r0, r9, r4, r0
 8022942:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022946:	2800      	cmp	r0, #0
 8022948:	f000 80fa 	beq.w	8022b40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802294c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022950:	d01b      	beq.n	802298a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022952:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022956:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802295a:	fb0e fa0a 	mul.w	sl, lr, sl
 802295e:	fb0e fe03 	mul.w	lr, lr, r3
 8022962:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022966:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802296a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802296e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022972:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022976:	4453      	add	r3, sl
 8022978:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802297c:	0a1b      	lsrs	r3, r3, #8
 802297e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022982:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022986:	ea43 030c 	orr.w	r3, r3, ip
 802298a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802298c:	2cff      	cmp	r4, #255	@ 0xff
 802298e:	d021      	beq.n	80229d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8022990:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022992:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022996:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022998:	fb04 fb0b 	mul.w	fp, r4, fp
 802299c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802299e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80229a2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80229a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80229a8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80229ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80229b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80229b4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80229b8:	44de      	add	lr, fp
 80229ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80229be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80229c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80229c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80229ca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80229ce:	ea4e 040a 	orr.w	r4, lr, sl
 80229d2:	940e      	str	r4, [sp, #56]	@ 0x38
 80229d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80229d6:	2cff      	cmp	r4, #255	@ 0xff
 80229d8:	d021      	beq.n	8022a1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80229da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80229dc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80229e0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80229e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80229e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80229e8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80229ec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80229ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80229f2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80229f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80229fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80229fe:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022a02:	44de      	add	lr, fp
 8022a04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022a08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a10:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022a14:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022a18:	ea4e 040a 	orr.w	r4, lr, sl
 8022a1c:	940a      	str	r4, [sp, #40]	@ 0x28
 8022a1e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022a20:	2cff      	cmp	r4, #255	@ 0xff
 8022a22:	d021      	beq.n	8022a68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8022a24:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022a26:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022a2a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022a2c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022a30:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022a32:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022a36:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022a38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022a3c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022a40:	fb04 fa0a 	mul.w	sl, r4, sl
 8022a44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022a48:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022a4c:	44de      	add	lr, fp
 8022a4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022a52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022a5e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022a62:	ea4e 040a 	orr.w	r4, lr, sl
 8022a66:	940f      	str	r4, [sp, #60]	@ 0x3c
 8022a68:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022a6a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8022a6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022a72:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022a76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022a78:	fb08 fc0c 	mul.w	ip, r8, ip
 8022a7c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022a80:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022a84:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022a86:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022a8a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022a8e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022a90:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022a94:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022a98:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022a9a:	fb08 f80e 	mul.w	r8, r8, lr
 8022a9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022aa2:	fb02 8303 	mla	r3, r2, r3, r8
 8022aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022aa8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022aac:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8022ab0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022ab2:	fb01 330a 	mla	r3, r1, sl, r3
 8022ab6:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8022aba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022abc:	fb09 3901 	mla	r9, r9, r1, r3
 8022ac0:	883b      	ldrh	r3, [r7, #0]
 8022ac2:	4342      	muls	r2, r0
 8022ac4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022ac8:	1c50      	adds	r0, r2, #1
 8022aca:	1219      	asrs	r1, r3, #8
 8022acc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022ad0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022ad4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022ad8:	ea4c 0c09 	orr.w	ip, ip, r9
 8022adc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022ae0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8022ae4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8022ae8:	b2c0      	uxtb	r0, r0
 8022aea:	fb12 f204 	smulbb	r2, r2, r4
 8022aee:	fa5f fc8c 	uxtb.w	ip, ip
 8022af2:	fb1e fe04 	smulbb	lr, lr, r4
 8022af6:	fb01 2100 	mla	r1, r1, r0, r2
 8022afa:	10da      	asrs	r2, r3, #3
 8022afc:	fb1c fc04 	smulbb	ip, ip, r4
 8022b00:	00db      	lsls	r3, r3, #3
 8022b02:	b289      	uxth	r1, r1
 8022b04:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022b08:	b2db      	uxtb	r3, r3
 8022b0a:	fb02 e200 	mla	r2, r2, r0, lr
 8022b0e:	fb03 c300 	mla	r3, r3, r0, ip
 8022b12:	b292      	uxth	r2, r2
 8022b14:	fa1f fc83 	uxth.w	ip, r3
 8022b18:	1c4b      	adds	r3, r1, #1
 8022b1a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022b1e:	f10c 0301 	add.w	r3, ip, #1
 8022b22:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8022b26:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8022b2a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022b2e:	430b      	orrs	r3, r1
 8022b30:	1c51      	adds	r1, r2, #1
 8022b32:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022b36:	0952      	lsrs	r2, r2, #5
 8022b38:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022b3c:	4313      	orrs	r3, r2
 8022b3e:	803b      	strh	r3, [r7, #0]
 8022b40:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022b42:	3702      	adds	r7, #2
 8022b44:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8022b46:	441a      	add	r2, r3
 8022b48:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022b4a:	441d      	add	r5, r3
 8022b4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022b4e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8022b50:	3b01      	subs	r3, #1
 8022b52:	931a      	str	r3, [sp, #104]	@ 0x68
 8022b54:	e694      	b.n	8022880 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022b56:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022b58:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8022b5a:	441c      	add	r4, r3
 8022b5c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022b5e:	441d      	add	r5, r3
 8022b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b62:	9429      	str	r4, [sp, #164]	@ 0xa4
 8022b64:	3b01      	subs	r3, #1
 8022b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022b6a:	3302      	adds	r3, #2
 8022b6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8022b6e:	e667      	b.n	8022840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022b70:	d024      	beq.n	8022bbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8022b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b74:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8022b76:	3b01      	subs	r3, #1
 8022b78:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8022b7a:	fb00 4003 	mla	r0, r0, r3, r4
 8022b7e:	1400      	asrs	r0, r0, #16
 8022b80:	f53f ae7b 	bmi.w	802287a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022b84:	3901      	subs	r1, #1
 8022b86:	4288      	cmp	r0, r1
 8022b88:	f6bf ae77 	bge.w	802287a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022b8c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8022b8e:	fb01 5303 	mla	r3, r1, r3, r5
 8022b92:	141b      	asrs	r3, r3, #16
 8022b94:	f53f ae71 	bmi.w	802287a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022b98:	3a01      	subs	r2, #1
 8022b9a:	4293      	cmp	r3, r2
 8022b9c:	f6bf ae6d 	bge.w	802287a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022ba0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8022ba4:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8022ba8:	f1bb 0f00 	cmp.w	fp, #0
 8022bac:	dc70      	bgt.n	8022c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8022bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022bb0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022bb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022bb6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022bba:	930c      	str	r3, [sp, #48]	@ 0x30
 8022bbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	f340 81be 	ble.w	8022f40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8022bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022bc8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022bca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022bd2:	eef0 6a62 	vmov.f32	s13, s5
 8022bd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022bda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022bde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022be2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8022be6:	eef0 6a43 	vmov.f32	s13, s6
 8022bea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bee:	ee16 5a90 	vmov	r5, s13
 8022bf2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022bf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022bfa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022bfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c0a:	ee12 2a90 	vmov	r2, s5
 8022c0e:	eef0 2a47 	vmov.f32	s5, s14
 8022c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c16:	ee13 2a10 	vmov	r2, s6
 8022c1a:	932b      	str	r3, [sp, #172]	@ 0xac
 8022c1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022c1e:	eeb0 3a67 	vmov.f32	s6, s15
 8022c22:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c26:	932c      	str	r3, [sp, #176]	@ 0xb0
 8022c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022c2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022c2c:	3b01      	subs	r3, #1
 8022c2e:	9319      	str	r3, [sp, #100]	@ 0x64
 8022c30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022c32:	bf08      	it	eq
 8022c34:	4613      	moveq	r3, r2
 8022c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c38:	e5f4      	b.n	8022824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022c3a:	2900      	cmp	r1, #0
 8022c3c:	f43f ae66 	beq.w	802290c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8022c40:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022c44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8022c48:	900a      	str	r0, [sp, #40]	@ 0x28
 8022c4a:	0e00      	lsrs	r0, r0, #24
 8022c4c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022c4e:	e65d      	b.n	802290c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8022c50:	f113 0801 	adds.w	r8, r3, #1
 8022c54:	f53f af74 	bmi.w	8022b40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022c58:	4540      	cmp	r0, r8
 8022c5a:	f6ff af71 	blt.w	8022b40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022c5e:	f11c 0801 	adds.w	r8, ip, #1
 8022c62:	f53f af6d 	bmi.w	8022b40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022c66:	45c6      	cmp	lr, r8
 8022c68:	f6ff af6a 	blt.w	8022b40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022c6c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8022c6e:	b200      	sxth	r0, r0
 8022c70:	9302      	str	r3, [sp, #8]
 8022c72:	fa0f f38e 	sxth.w	r3, lr
 8022c76:	9000      	str	r0, [sp, #0]
 8022c78:	9301      	str	r3, [sp, #4]
 8022c7a:	4633      	mov	r3, r6
 8022c7c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8022c7e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022c82:	e9cd c203 	strd	ip, r2, [sp, #12]
 8022c86:	4639      	mov	r1, r7
 8022c88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022c8a:	f7ff fc63 	bl	8022554 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8022c8e:	e757      	b.n	8022b40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022c90:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022c92:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022c96:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8022c98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022c9c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022c9e:	1427      	asrs	r7, r4, #16
 8022ca0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022ca2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022ca6:	142b      	asrs	r3, r5, #16
 8022ca8:	fb01 7303 	mla	r3, r1, r3, r7
 8022cac:	18e7      	adds	r7, r4, r3
 8022cae:	5ce3      	ldrb	r3, [r4, r3]
 8022cb0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022cb4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022cb8:	2a00      	cmp	r2, #0
 8022cba:	f000 8137 	beq.w	8022f2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8022cbe:	f897 e001 	ldrb.w	lr, [r7, #1]
 8022cc2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8022cc6:	9410      	str	r4, [sp, #64]	@ 0x40
 8022cc8:	0e24      	lsrs	r4, r4, #24
 8022cca:	9417      	str	r4, [sp, #92]	@ 0x5c
 8022ccc:	b170      	cbz	r0, 8022cec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8022cce:	eb07 0e01 	add.w	lr, r7, r1
 8022cd2:	5c79      	ldrb	r1, [r7, r1]
 8022cd4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022cd8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022cda:	0e09      	lsrs	r1, r1, #24
 8022cdc:	9114      	str	r1, [sp, #80]	@ 0x50
 8022cde:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8022ce2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022ce6:	9111      	str	r1, [sp, #68]	@ 0x44
 8022ce8:	0e09      	lsrs	r1, r1, #24
 8022cea:	9118      	str	r1, [sp, #96]	@ 0x60
 8022cec:	b292      	uxth	r2, r2
 8022cee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022cf0:	b280      	uxth	r0, r0
 8022cf2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022cf4:	fb02 f800 	mul.w	r8, r2, r0
 8022cf8:	0112      	lsls	r2, r2, #4
 8022cfa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022cfe:	eba2 0e08 	sub.w	lr, r2, r8
 8022d02:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8022d06:	b280      	uxth	r0, r0
 8022d08:	fa1f fe8e 	uxth.w	lr, lr
 8022d0c:	1a12      	subs	r2, r2, r0
 8022d0e:	fb0e f101 	mul.w	r1, lr, r1
 8022d12:	b292      	uxth	r2, r2
 8022d14:	fb02 110c 	mla	r1, r2, ip, r1
 8022d18:	fb00 1104 	mla	r1, r0, r4, r1
 8022d1c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8022d1e:	fb08 1104 	mla	r1, r8, r4, r1
 8022d22:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022d26:	2900      	cmp	r1, #0
 8022d28:	f000 80f5 	beq.w	8022f16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8022d2c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022d30:	d019      	beq.n	8022d66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8022d32:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022d36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022d3a:	fb0c fa0a 	mul.w	sl, ip, sl
 8022d3e:	fb0c fc03 	mul.w	ip, ip, r3
 8022d42:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022d46:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022d4a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8022d4e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022d52:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022d56:	4453      	add	r3, sl
 8022d58:	0a3f      	lsrs	r7, r7, #8
 8022d5a:	0a1b      	lsrs	r3, r3, #8
 8022d5c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8022d60:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022d64:	433b      	orrs	r3, r7
 8022d66:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022d68:	2cff      	cmp	r4, #255	@ 0xff
 8022d6a:	d020      	beq.n	8022dae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8022d6c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022d6e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022d72:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022d74:	4367      	muls	r7, r4
 8022d76:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022d78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022d7c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022d80:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022d82:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022d86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022d8a:	fb04 fa0a 	mul.w	sl, r4, sl
 8022d8e:	44bc      	add	ip, r7
 8022d90:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022d94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022d9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022da0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022da4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022da8:	ea4c 040a 	orr.w	r4, ip, sl
 8022dac:	9410      	str	r4, [sp, #64]	@ 0x40
 8022dae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022db0:	2cff      	cmp	r4, #255	@ 0xff
 8022db2:	d020      	beq.n	8022df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8022db4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022db6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022dba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022dbc:	4367      	muls	r7, r4
 8022dbe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022dc0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022dc4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022dc8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022dca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022dce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022dd2:	fb04 fa0a 	mul.w	sl, r4, sl
 8022dd6:	44bc      	add	ip, r7
 8022dd8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022ddc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022de0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022de4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022de8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022dec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022df0:	ea4c 040a 	orr.w	r4, ip, sl
 8022df4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022df6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8022df8:	2cff      	cmp	r4, #255	@ 0xff
 8022dfa:	d020      	beq.n	8022e3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8022dfc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022dfe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022e02:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8022e04:	4367      	muls	r7, r4
 8022e06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022e08:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022e0c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022e10:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8022e12:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022e16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022e1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8022e1e:	44bc      	add	ip, r7
 8022e20:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022e24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022e2c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022e30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e34:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022e38:	ea4c 040a 	orr.w	r4, ip, sl
 8022e3c:	9411      	str	r4, [sp, #68]	@ 0x44
 8022e3e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022e40:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8022e44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022e48:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022e4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022e4e:	fb0e f707 	mul.w	r7, lr, r7
 8022e52:	fb02 770c 	mla	r7, r2, ip, r7
 8022e56:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022e5a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022e5c:	fb00 770c 	mla	r7, r0, ip, r7
 8022e60:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022e64:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022e66:	fb08 770c 	mla	r7, r8, ip, r7
 8022e6a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8022e6e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022e70:	fb0e fe0c 	mul.w	lr, lr, ip
 8022e74:	0a3f      	lsrs	r7, r7, #8
 8022e76:	fb02 e303 	mla	r3, r2, r3, lr
 8022e7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022e7c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8022e80:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8022e84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022e86:	fb00 330a 	mla	r3, r0, sl, r3
 8022e8a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8022e8e:	f8b9 0000 	ldrh.w	r0, [r9]
 8022e92:	fb08 3c0c 	mla	ip, r8, ip, r3
 8022e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022e98:	1202      	asrs	r2, r0, #8
 8022e9a:	434b      	muls	r3, r1
 8022e9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ea0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022ea4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022ea8:	1c59      	adds	r1, r3, #1
 8022eaa:	ea47 070c 	orr.w	r7, r7, ip
 8022eae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022eb2:	0c3b      	lsrs	r3, r7, #16
 8022eb4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022eb8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8022ebc:	b2ff      	uxtb	r7, r7
 8022ebe:	fb13 f304 	smulbb	r3, r3, r4
 8022ec2:	b2c9      	uxtb	r1, r1
 8022ec4:	fb1c fc04 	smulbb	ip, ip, r4
 8022ec8:	fb02 3201 	mla	r2, r2, r1, r3
 8022ecc:	10c3      	asrs	r3, r0, #3
 8022ece:	fb17 f704 	smulbb	r7, r7, r4
 8022ed2:	00c0      	lsls	r0, r0, #3
 8022ed4:	b292      	uxth	r2, r2
 8022ed6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8022eda:	b2c0      	uxtb	r0, r0
 8022edc:	fb03 c301 	mla	r3, r3, r1, ip
 8022ee0:	f102 0c01 	add.w	ip, r2, #1
 8022ee4:	fb00 7001 	mla	r0, r0, r1, r7
 8022ee8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022eec:	b280      	uxth	r0, r0
 8022eee:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8022ef2:	b29b      	uxth	r3, r3
 8022ef4:	1c42      	adds	r2, r0, #1
 8022ef6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022efa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022efe:	ea42 020c 	orr.w	r2, r2, ip
 8022f02:	f103 0c01 	add.w	ip, r3, #1
 8022f06:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8022f0a:	095b      	lsrs	r3, r3, #5
 8022f0c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022f10:	431a      	orrs	r2, r3
 8022f12:	f8a9 2000 	strh.w	r2, [r9]
 8022f16:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022f18:	f109 0902 	add.w	r9, r9, #2
 8022f1c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8022f1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f22:	441a      	add	r2, r3
 8022f24:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022f26:	9229      	str	r2, [sp, #164]	@ 0xa4
 8022f28:	441d      	add	r5, r3
 8022f2a:	e63d      	b.n	8022ba8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022f2c:	2800      	cmp	r0, #0
 8022f2e:	f43f aedd 	beq.w	8022cec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8022f32:	5c79      	ldrb	r1, [r7, r1]
 8022f34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022f38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022f3a:	0e09      	lsrs	r1, r1, #24
 8022f3c:	9114      	str	r1, [sp, #80]	@ 0x50
 8022f3e:	e6d5      	b.n	8022cec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8022f40:	b01f      	add	sp, #124	@ 0x7c
 8022f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8022f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f4a:	b089      	sub	sp, #36	@ 0x24
 8022f4c:	9101      	str	r1, [sp, #4]
 8022f4e:	9801      	ldr	r0, [sp, #4]
 8022f50:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8022f54:	8800      	ldrh	r0, [r0, #0]
 8022f56:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8022f5a:	1206      	asrs	r6, r0, #8
 8022f5c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8022f60:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8022f64:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022f68:	9602      	str	r6, [sp, #8]
 8022f6a:	10c6      	asrs	r6, r0, #3
 8022f6c:	00c0      	lsls	r0, r0, #3
 8022f6e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022f72:	b2c0      	uxtb	r0, r0
 8022f74:	9603      	str	r6, [sp, #12]
 8022f76:	9004      	str	r0, [sp, #16]
 8022f78:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8022f7c:	fb07 100c 	mla	r0, r7, ip, r1
 8022f80:	2f00      	cmp	r7, #0
 8022f82:	eb02 0e00 	add.w	lr, r2, r0
 8022f86:	f2c0 810a 	blt.w	802319e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8022f8a:	45b8      	cmp	r8, r7
 8022f8c:	f340 8107 	ble.w	802319e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8022f90:	2900      	cmp	r1, #0
 8022f92:	f2c0 8102 	blt.w	802319a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8022f96:	458c      	cmp	ip, r1
 8022f98:	f340 80ff 	ble.w	802319a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8022f9c:	5c12      	ldrb	r2, [r2, r0]
 8022f9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022fa2:	1c4a      	adds	r2, r1, #1
 8022fa4:	f100 80fe 	bmi.w	80231a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8022fa8:	4594      	cmp	ip, r2
 8022faa:	f340 80fb 	ble.w	80231a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8022fae:	2d00      	cmp	r5, #0
 8022fb0:	f000 80fa 	beq.w	80231a8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8022fb4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022fb8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022fbc:	3701      	adds	r7, #1
 8022fbe:	f100 80f7 	bmi.w	80231b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8022fc2:	45b8      	cmp	r8, r7
 8022fc4:	f340 80f4 	ble.w	80231b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8022fc8:	2c00      	cmp	r4, #0
 8022fca:	f000 80f4 	beq.w	80231b6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8022fce:	2900      	cmp	r1, #0
 8022fd0:	eb0e 020c 	add.w	r2, lr, ip
 8022fd4:	f2c0 80ea 	blt.w	80231ac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8022fd8:	458c      	cmp	ip, r1
 8022fda:	f340 80e7 	ble.w	80231ac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8022fde:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8022fe2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8022fe6:	3101      	adds	r1, #1
 8022fe8:	f100 80e8 	bmi.w	80231bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8022fec:	458c      	cmp	ip, r1
 8022fee:	f340 80e5 	ble.w	80231bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8022ff2:	2d00      	cmp	r5, #0
 8022ff4:	f000 80e4 	beq.w	80231c0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8022ff8:	7852      	ldrb	r2, [r2, #1]
 8022ffa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022ffe:	0e0b      	lsrs	r3, r1, #24
 8023000:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8023004:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023008:	9300      	str	r3, [sp, #0]
 802300a:	b2a4      	uxth	r4, r4
 802300c:	b2ab      	uxth	r3, r5
 802300e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023012:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023016:	fb03 f904 	mul.w	r9, r3, r4
 802301a:	011b      	lsls	r3, r3, #4
 802301c:	fb0a f505 	mul.w	r5, sl, r5
 8023020:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8023024:	eba3 0e09 	sub.w	lr, r3, r9
 8023028:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 802302c:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8023030:	0a28      	lsrs	r0, r5, #8
 8023032:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8023036:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802303a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802303e:	fb0a f303 	mul.w	r3, sl, r3
 8023042:	fb08 f707 	mul.w	r7, r8, r7
 8023046:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 802304a:	4405      	add	r5, r0
 802304c:	fb08 fc0c 	mul.w	ip, r8, ip
 8023050:	b2a4      	uxth	r4, r4
 8023052:	0a2d      	lsrs	r5, r5, #8
 8023054:	fa1f fe8e 	uxth.w	lr, lr
 8023058:	1b12      	subs	r2, r2, r4
 802305a:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 802305e:	b292      	uxth	r2, r2
 8023060:	9005      	str	r0, [sp, #20]
 8023062:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8023066:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802306a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802306e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023072:	0a1b      	lsrs	r3, r3, #8
 8023074:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023078:	9306      	str	r3, [sp, #24]
 802307a:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 802307e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023082:	4460      	add	r0, ip
 8023084:	fb0b f303 	mul.w	r3, fp, r3
 8023088:	fb0b f606 	mul.w	r6, fp, r6
 802308c:	0a00      	lsrs	r0, r0, #8
 802308e:	0a1d      	lsrs	r5, r3, #8
 8023090:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8023094:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023098:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802309c:	441d      	add	r5, r3
 802309e:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 80230a2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80230a6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80230aa:	0a2d      	lsrs	r5, r5, #8
 80230ac:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80230b0:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 80230b4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80230b8:	0a36      	lsrs	r6, r6, #8
 80230ba:	0a1b      	lsrs	r3, r3, #8
 80230bc:	fb05 f50e 	mul.w	r5, r5, lr
 80230c0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80230c4:	9307      	str	r3, [sp, #28]
 80230c6:	0e0b      	lsrs	r3, r1, #24
 80230c8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80230cc:	fb0e f606 	mul.w	r6, lr, r6
 80230d0:	435f      	muls	r7, r3
 80230d2:	4359      	muls	r1, r3
 80230d4:	9b05      	ldr	r3, [sp, #20]
 80230d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80230da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80230de:	fb03 5502 	mla	r5, r3, r2, r5
 80230e2:	9b06      	ldr	r3, [sp, #24]
 80230e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80230e8:	fb0e fe0b 	mul.w	lr, lr, fp
 80230ec:	44bc      	add	ip, r7
 80230ee:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 80230f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230f6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80230fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80230fe:	0a09      	lsrs	r1, r1, #8
 8023100:	fb0c 5509 	mla	r5, ip, r9, r5
 8023104:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023108:	fb00 5504 	mla	r5, r0, r4, r5
 802310c:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8023110:	9b07      	ldr	r3, [sp, #28]
 8023112:	fb02 6000 	mla	r0, r2, r0, r6
 8023116:	0a2d      	lsrs	r5, r5, #8
 8023118:	fb02 e20a 	mla	r2, r2, sl, lr
 802311c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023120:	fb09 0001 	mla	r0, r9, r1, r0
 8023124:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023128:	fb04 0003 	mla	r0, r4, r3, r0
 802312c:	9b00      	ldr	r3, [sp, #0]
 802312e:	fb04 2408 	mla	r4, r4, r8, r2
 8023132:	9a04      	ldr	r2, [sp, #16]
 8023134:	0a00      	lsrs	r0, r0, #8
 8023136:	fb09 4903 	mla	r9, r9, r3, r4
 802313a:	9b02      	ldr	r3, [sp, #8]
 802313c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023140:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8023144:	4305      	orrs	r5, r0
 8023146:	fa5f f989 	uxtb.w	r9, r9
 802314a:	fb03 f109 	mul.w	r1, r3, r9
 802314e:	9b03      	ldr	r3, [sp, #12]
 8023150:	fb03 f309 	mul.w	r3, r3, r9
 8023154:	fb02 f909 	mul.w	r9, r2, r9
 8023158:	1c4a      	adds	r2, r1, #1
 802315a:	1c58      	adds	r0, r3, #1
 802315c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023160:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023164:	0c2a      	lsrs	r2, r5, #16
 8023166:	0a2b      	lsrs	r3, r5, #8
 8023168:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802316c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023170:	0212      	lsls	r2, r2, #8
 8023172:	00db      	lsls	r3, r3, #3
 8023174:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8023178:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802317c:	4313      	orrs	r3, r2
 802317e:	f109 0201 	add.w	r2, r9, #1
 8023182:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023186:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802318a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802318e:	431d      	orrs	r5, r3
 8023190:	9b01      	ldr	r3, [sp, #4]
 8023192:	801d      	strh	r5, [r3, #0]
 8023194:	b009      	add	sp, #36	@ 0x24
 8023196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802319a:	2000      	movs	r0, #0
 802319c:	e701      	b.n	8022fa2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802319e:	2600      	movs	r6, #0
 80231a0:	4630      	mov	r0, r6
 80231a2:	e70b      	b.n	8022fbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80231a4:	2600      	movs	r6, #0
 80231a6:	e709      	b.n	8022fbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80231a8:	462e      	mov	r6, r5
 80231aa:	e707      	b.n	8022fbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80231ac:	2700      	movs	r7, #0
 80231ae:	e71a      	b.n	8022fe6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80231b0:	2100      	movs	r1, #0
 80231b2:	460f      	mov	r7, r1
 80231b4:	e723      	b.n	8022ffe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80231b6:	4621      	mov	r1, r4
 80231b8:	4627      	mov	r7, r4
 80231ba:	e720      	b.n	8022ffe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80231bc:	2100      	movs	r1, #0
 80231be:	e71e      	b.n	8022ffe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80231c0:	4629      	mov	r1, r5
 80231c2:	e71c      	b.n	8022ffe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080231c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231c8:	b09b      	sub	sp, #108	@ 0x6c
 80231ca:	9218      	str	r2, [sp, #96]	@ 0x60
 80231cc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80231ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80231d0:	9116      	str	r1, [sp, #88]	@ 0x58
 80231d2:	6850      	ldr	r0, [r2, #4]
 80231d4:	9307      	str	r3, [sp, #28]
 80231d6:	6812      	ldr	r2, [r2, #0]
 80231d8:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80231da:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80231de:	fb00 1303 	mla	r3, r0, r3, r1
 80231e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80231e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80231e8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80231ea:	681b      	ldr	r3, [r3, #0]
 80231ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80231ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80231f0:	685e      	ldr	r6, [r3, #4]
 80231f2:	3604      	adds	r6, #4
 80231f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	dc03      	bgt.n	8023202 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80231fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80231fc:	2b00      	cmp	r3, #0
 80231fe:	f340 8373 	ble.w	80238e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8023202:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023204:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023208:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802320c:	1e48      	subs	r0, r1, #1
 802320e:	1e57      	subs	r7, r2, #1
 8023210:	9b07      	ldr	r3, [sp, #28]
 8023212:	2b00      	cmp	r3, #0
 8023214:	f340 818f 	ble.w	8023536 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023218:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802321a:	142b      	asrs	r3, r5, #16
 802321c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023220:	d406      	bmi.n	8023230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023222:	4584      	cmp	ip, r0
 8023224:	da04      	bge.n	8023230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023226:	2b00      	cmp	r3, #0
 8023228:	db02      	blt.n	8023230 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802322a:	42bb      	cmp	r3, r7
 802322c:	f2c0 8184 	blt.w	8023538 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023230:	f11c 0c01 	adds.w	ip, ip, #1
 8023234:	f100 8172 	bmi.w	802351c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023238:	4561      	cmp	r1, ip
 802323a:	f2c0 816f 	blt.w	802351c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802323e:	3301      	adds	r3, #1
 8023240:	f100 816c 	bmi.w	802351c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023244:	429a      	cmp	r2, r3
 8023246:	f2c0 8169 	blt.w	802351c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802324a:	9b07      	ldr	r3, [sp, #28]
 802324c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802324e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023250:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023252:	2b00      	cmp	r3, #0
 8023254:	f340 818e 	ble.w	8023574 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8023258:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802325a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802325e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023262:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023266:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023268:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802326c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802326e:	141b      	asrs	r3, r3, #16
 8023270:	f100 81d1 	bmi.w	8023616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023274:	f101 38ff 	add.w	r8, r1, #4294967295
 8023278:	4543      	cmp	r3, r8
 802327a:	f280 81cc 	bge.w	8023616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802327e:	f1bc 0f00 	cmp.w	ip, #0
 8023282:	f2c0 81c8 	blt.w	8023616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023286:	f10e 38ff 	add.w	r8, lr, #4294967295
 802328a:	45c4      	cmp	ip, r8
 802328c:	f280 81c3 	bge.w	8023616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023290:	b209      	sxth	r1, r1
 8023292:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023294:	fb0c 3301 	mla	r3, ip, r1, r3
 8023298:	eb04 0803 	add.w	r8, r4, r3
 802329c:	5ce3      	ldrb	r3, [r4, r3]
 802329e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80232a2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80232a6:	2a00      	cmp	r2, #0
 80232a8:	f000 81aa 	beq.w	8023600 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80232ac:	f898 c001 	ldrb.w	ip, [r8, #1]
 80232b0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80232b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80232b6:	0e24      	lsrs	r4, r4, #24
 80232b8:	9412      	str	r4, [sp, #72]	@ 0x48
 80232ba:	b178      	cbz	r0, 80232dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80232bc:	eb08 0c01 	add.w	ip, r8, r1
 80232c0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80232c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80232c8:	9108      	str	r1, [sp, #32]
 80232ca:	0e09      	lsrs	r1, r1, #24
 80232cc:	9110      	str	r1, [sp, #64]	@ 0x40
 80232ce:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80232d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80232d6:	910c      	str	r1, [sp, #48]	@ 0x30
 80232d8:	0e09      	lsrs	r1, r1, #24
 80232da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80232dc:	b292      	uxth	r2, r2
 80232de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80232e0:	b280      	uxth	r0, r0
 80232e2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80232e4:	fb02 f900 	mul.w	r9, r2, r0
 80232e8:	0112      	lsls	r2, r2, #4
 80232ea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80232ee:	eba2 0809 	sub.w	r8, r2, r9
 80232f2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80232f6:	b280      	uxth	r0, r0
 80232f8:	fa1f f888 	uxth.w	r8, r8
 80232fc:	1a12      	subs	r2, r2, r0
 80232fe:	fb08 f101 	mul.w	r1, r8, r1
 8023302:	b292      	uxth	r2, r2
 8023304:	fb02 110e 	mla	r1, r2, lr, r1
 8023308:	fb00 1104 	mla	r1, r0, r4, r1
 802330c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802330e:	fb09 1104 	mla	r1, r9, r4, r1
 8023312:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023316:	2900      	cmp	r1, #0
 8023318:	f000 80f5 	beq.w	8023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802331c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023320:	d01b      	beq.n	802335a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023322:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023326:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802332a:	fb0e fa0a 	mul.w	sl, lr, sl
 802332e:	fb0e fe03 	mul.w	lr, lr, r3
 8023332:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023336:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802333a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802333e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023342:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023346:	4453      	add	r3, sl
 8023348:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802334c:	0a1b      	lsrs	r3, r3, #8
 802334e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023352:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023356:	ea43 030c 	orr.w	r3, r3, ip
 802335a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802335c:	2cff      	cmp	r4, #255	@ 0xff
 802335e:	d021      	beq.n	80233a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8023360:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023362:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023366:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023368:	fb04 fb0b 	mul.w	fp, r4, fp
 802336c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802336e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023372:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023374:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023378:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802337c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023380:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023384:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023388:	44de      	add	lr, fp
 802338a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802338e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023392:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023396:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802339a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802339e:	ea4e 040a 	orr.w	r4, lr, sl
 80233a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80233a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80233a6:	2cff      	cmp	r4, #255	@ 0xff
 80233a8:	d021      	beq.n	80233ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80233aa:	9c08      	ldr	r4, [sp, #32]
 80233ac:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80233b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80233b2:	fb04 fb0b 	mul.w	fp, r4, fp
 80233b6:	9c08      	ldr	r4, [sp, #32]
 80233b8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80233bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80233be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233c2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80233c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80233ca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233ce:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80233d2:	44de      	add	lr, fp
 80233d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233e0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80233e8:	ea4e 040a 	orr.w	r4, lr, sl
 80233ec:	9408      	str	r4, [sp, #32]
 80233ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80233f0:	2cff      	cmp	r4, #255	@ 0xff
 80233f2:	d021      	beq.n	8023438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80233f4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80233f6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80233fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80233fc:	fb04 fb0b 	mul.w	fp, r4, fp
 8023400:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023402:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023406:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023408:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802340c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023410:	fb04 fa0a 	mul.w	sl, r4, sl
 8023414:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023418:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802341c:	44de      	add	lr, fp
 802341e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023422:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023426:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802342a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802342e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023432:	ea4e 040a 	orr.w	r4, lr, sl
 8023436:	940c      	str	r4, [sp, #48]	@ 0x30
 8023438:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802343a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802343e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023442:	43c9      	mvns	r1, r1
 8023444:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023448:	9c08      	ldr	r4, [sp, #32]
 802344a:	fb08 fc0c 	mul.w	ip, r8, ip
 802344e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023452:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023456:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023458:	fb00 cc0e 	mla	ip, r0, lr, ip
 802345c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023460:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023462:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023466:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802346a:	fb08 f80e 	mul.w	r8, r8, lr
 802346e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023472:	fa5f fe81 	uxtb.w	lr, r1
 8023476:	fb02 8303 	mla	r3, r2, r3, r8
 802347a:	9a08      	ldr	r2, [sp, #32]
 802347c:	f8b7 8000 	ldrh.w	r8, [r7]
 8023480:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023484:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023488:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802348a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802348e:	fb00 330a 	mla	r3, r0, sl, r3
 8023492:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8023496:	ea4f 2228 	mov.w	r2, r8, asr #8
 802349a:	fb09 3900 	mla	r9, r9, r0, r3
 802349e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80234a2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80234a6:	b2c9      	uxtb	r1, r1
 80234a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80234ac:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80234b0:	fb02 f20e 	mul.w	r2, r2, lr
 80234b4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80234b8:	fb00 f00e 	mul.w	r0, r0, lr
 80234bc:	1c53      	adds	r3, r2, #1
 80234be:	fb01 f10e 	mul.w	r1, r1, lr
 80234c2:	ea4c 0c09 	orr.w	ip, ip, r9
 80234c6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80234ca:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80234ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80234d2:	4a60      	ldr	r2, [pc, #384]	@ (8023654 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80234d4:	b2db      	uxtb	r3, r3
 80234d6:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80234da:	1c43      	adds	r3, r0, #1
 80234dc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80234e0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80234e4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80234e8:	00db      	lsls	r3, r3, #3
 80234ea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80234ee:	4313      	orrs	r3, r2
 80234f0:	1c4a      	adds	r2, r1, #1
 80234f2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80234f6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80234fa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80234fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8023502:	f8a7 c000 	strh.w	ip, [r7]
 8023506:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023508:	3702      	adds	r7, #2
 802350a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802350c:	441a      	add	r2, r3
 802350e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023510:	441d      	add	r5, r3
 8023512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023514:	9225      	str	r2, [sp, #148]	@ 0x94
 8023516:	3b01      	subs	r3, #1
 8023518:	9317      	str	r3, [sp, #92]	@ 0x5c
 802351a:	e699      	b.n	8023250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802351c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802351e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023520:	441c      	add	r4, r3
 8023522:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023524:	441d      	add	r5, r3
 8023526:	9b07      	ldr	r3, [sp, #28]
 8023528:	9425      	str	r4, [sp, #148]	@ 0x94
 802352a:	3b01      	subs	r3, #1
 802352c:	9307      	str	r3, [sp, #28]
 802352e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023530:	3302      	adds	r3, #2
 8023532:	930a      	str	r3, [sp, #40]	@ 0x28
 8023534:	e66c      	b.n	8023210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023536:	d024      	beq.n	8023582 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8023538:	9b07      	ldr	r3, [sp, #28]
 802353a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802353c:	3b01      	subs	r3, #1
 802353e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023540:	fb00 4003 	mla	r0, r0, r3, r4
 8023544:	1400      	asrs	r0, r0, #16
 8023546:	f53f ae80 	bmi.w	802324a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802354a:	3901      	subs	r1, #1
 802354c:	4288      	cmp	r0, r1
 802354e:	f6bf ae7c 	bge.w	802324a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023552:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023554:	fb01 5303 	mla	r3, r1, r3, r5
 8023558:	141b      	asrs	r3, r3, #16
 802355a:	f53f ae76 	bmi.w	802324a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802355e:	3a01      	subs	r2, #1
 8023560:	4293      	cmp	r3, r2
 8023562:	f6bf ae72 	bge.w	802324a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023566:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802356a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802356e:	f1bb 0f00 	cmp.w	fp, #0
 8023572:	dc71      	bgt.n	8023658 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8023574:	9b07      	ldr	r3, [sp, #28]
 8023576:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802357a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802357c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023580:	930a      	str	r3, [sp, #40]	@ 0x28
 8023582:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023584:	2b00      	cmp	r3, #0
 8023586:	f340 81af 	ble.w	80238e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802358a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802358e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023590:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023594:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023598:	eef0 6a62 	vmov.f32	s13, s5
 802359c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80235a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80235a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235a8:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 80235ac:	eef0 6a43 	vmov.f32	s13, s6
 80235b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235b4:	ee16 5a90 	vmov	r5, s13
 80235b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80235bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80235c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80235c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80235c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80235cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80235d0:	ee12 2a90 	vmov	r2, s5
 80235d4:	eef0 2a47 	vmov.f32	s5, s14
 80235d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235dc:	ee13 2a10 	vmov	r2, s6
 80235e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80235e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80235e4:	eeb0 3a67 	vmov.f32	s6, s15
 80235e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80235ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80235f0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80235f2:	3b01      	subs	r3, #1
 80235f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80235f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80235f8:	bf08      	it	eq
 80235fa:	4613      	moveq	r3, r2
 80235fc:	9307      	str	r3, [sp, #28]
 80235fe:	e5f9      	b.n	80231f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8023600:	2800      	cmp	r0, #0
 8023602:	f43f ae6b 	beq.w	80232dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023606:	f818 1001 	ldrb.w	r1, [r8, r1]
 802360a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802360e:	9108      	str	r1, [sp, #32]
 8023610:	0e09      	lsrs	r1, r1, #24
 8023612:	9110      	str	r1, [sp, #64]	@ 0x40
 8023614:	e662      	b.n	80232dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023616:	f113 0801 	adds.w	r8, r3, #1
 802361a:	f53f af74 	bmi.w	8023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802361e:	4541      	cmp	r1, r8
 8023620:	f6ff af71 	blt.w	8023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023624:	f11c 0801 	adds.w	r8, ip, #1
 8023628:	f53f af6d 	bmi.w	8023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802362c:	45c6      	cmp	lr, r8
 802362e:	f6ff af6a 	blt.w	8023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023632:	b209      	sxth	r1, r1
 8023634:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023638:	fa0f f38e 	sxth.w	r3, lr
 802363c:	9100      	str	r1, [sp, #0]
 802363e:	4639      	mov	r1, r7
 8023640:	9301      	str	r3, [sp, #4]
 8023642:	4633      	mov	r3, r6
 8023644:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023648:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802364a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802364c:	f7ff fc7b 	bl	8022f46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8023650:	e759      	b.n	8023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023652:	bf00      	nop
 8023654:	fffff800 	.word	0xfffff800
 8023658:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802365a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802365e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023660:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023664:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023666:	1427      	asrs	r7, r4, #16
 8023668:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802366a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802366e:	142b      	asrs	r3, r5, #16
 8023670:	fb01 7303 	mla	r3, r1, r3, r7
 8023674:	18e7      	adds	r7, r4, r3
 8023676:	5ce3      	ldrb	r3, [r4, r3]
 8023678:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802367c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023680:	2a00      	cmp	r2, #0
 8023682:	f000 8127 	beq.w	80238d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8023686:	f897 e001 	ldrb.w	lr, [r7, #1]
 802368a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802368e:	940d      	str	r4, [sp, #52]	@ 0x34
 8023690:	0e24      	lsrs	r4, r4, #24
 8023692:	9414      	str	r4, [sp, #80]	@ 0x50
 8023694:	b170      	cbz	r0, 80236b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8023696:	eb07 0e01 	add.w	lr, r7, r1
 802369a:	5c79      	ldrb	r1, [r7, r1]
 802369c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80236a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80236a2:	0e09      	lsrs	r1, r1, #24
 80236a4:	9111      	str	r1, [sp, #68]	@ 0x44
 80236a6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80236aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80236ae:	910e      	str	r1, [sp, #56]	@ 0x38
 80236b0:	0e09      	lsrs	r1, r1, #24
 80236b2:	9115      	str	r1, [sp, #84]	@ 0x54
 80236b4:	b292      	uxth	r2, r2
 80236b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80236b8:	b280      	uxth	r0, r0
 80236ba:	fb02 f800 	mul.w	r8, r2, r0
 80236be:	0112      	lsls	r2, r2, #4
 80236c0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80236c4:	eba2 0e08 	sub.w	lr, r2, r8
 80236c8:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80236cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80236ce:	b280      	uxth	r0, r0
 80236d0:	fa1f fe8e 	uxth.w	lr, lr
 80236d4:	1a09      	subs	r1, r1, r0
 80236d6:	fb0e f202 	mul.w	r2, lr, r2
 80236da:	b289      	uxth	r1, r1
 80236dc:	fb01 220c 	mla	r2, r1, ip, r2
 80236e0:	fb00 2204 	mla	r2, r0, r4, r2
 80236e4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80236e6:	fb08 2204 	mla	r2, r8, r4, r2
 80236ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80236ee:	2a00      	cmp	r2, #0
 80236f0:	f000 80e5 	beq.w	80238be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80236f4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80236f8:	d019      	beq.n	802372e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80236fa:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80236fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023702:	fb0c fa0a 	mul.w	sl, ip, sl
 8023706:	fb0c fc03 	mul.w	ip, ip, r3
 802370a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802370e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023712:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8023716:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802371a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802371e:	4453      	add	r3, sl
 8023720:	0a3f      	lsrs	r7, r7, #8
 8023722:	0a1b      	lsrs	r3, r3, #8
 8023724:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023728:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802372c:	433b      	orrs	r3, r7
 802372e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023730:	2cff      	cmp	r4, #255	@ 0xff
 8023732:	d020      	beq.n	8023776 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8023734:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023736:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802373a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802373c:	4367      	muls	r7, r4
 802373e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023740:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023744:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023748:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802374a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802374e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023752:	fb04 fa0a 	mul.w	sl, r4, sl
 8023756:	44bc      	add	ip, r7
 8023758:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802375c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023760:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023764:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023768:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802376c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023770:	ea4c 040a 	orr.w	r4, ip, sl
 8023774:	940d      	str	r4, [sp, #52]	@ 0x34
 8023776:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023778:	2cff      	cmp	r4, #255	@ 0xff
 802377a:	d020      	beq.n	80237be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802377c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802377e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023782:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023784:	4367      	muls	r7, r4
 8023786:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023788:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802378c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023790:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023792:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023796:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802379a:	fb04 fa0a 	mul.w	sl, r4, sl
 802379e:	44bc      	add	ip, r7
 80237a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80237a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80237b8:	ea4c 040a 	orr.w	r4, ip, sl
 80237bc:	9409      	str	r4, [sp, #36]	@ 0x24
 80237be:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80237c0:	2cff      	cmp	r4, #255	@ 0xff
 80237c2:	d020      	beq.n	8023806 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80237c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80237c6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80237ca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80237cc:	4367      	muls	r7, r4
 80237ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80237d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80237d4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80237d8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80237da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80237de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80237e6:	44bc      	add	ip, r7
 80237e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80237ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023800:	ea4c 040a 	orr.w	r4, ip, sl
 8023804:	940e      	str	r4, [sp, #56]	@ 0x38
 8023806:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023808:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802380c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023810:	43d2      	mvns	r2, r2
 8023812:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023816:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023818:	b2d2      	uxtb	r2, r2
 802381a:	fb0e f707 	mul.w	r7, lr, r7
 802381e:	fb01 770c 	mla	r7, r1, ip, r7
 8023822:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023826:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023828:	fb00 770c 	mla	r7, r0, ip, r7
 802382c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023830:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023832:	fb08 770c 	mla	r7, r8, ip, r7
 8023836:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802383a:	fb0e fe0c 	mul.w	lr, lr, ip
 802383e:	0a3f      	lsrs	r7, r7, #8
 8023840:	fb01 e303 	mla	r3, r1, r3, lr
 8023844:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023846:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802384a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802384e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023850:	fb00 330a 	mla	r3, r0, sl, r3
 8023854:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8023858:	fb08 3c0c 	mla	ip, r8, ip, r3
 802385c:	f8b9 3000 	ldrh.w	r3, [r9]
 8023860:	1218      	asrs	r0, r3, #8
 8023862:	10d9      	asrs	r1, r3, #3
 8023864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023868:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802386c:	00db      	lsls	r3, r3, #3
 802386e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023872:	4350      	muls	r0, r2
 8023874:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023878:	b2db      	uxtb	r3, r3
 802387a:	4351      	muls	r1, r2
 802387c:	ea47 070c 	orr.w	r7, r7, ip
 8023880:	4353      	muls	r3, r2
 8023882:	1c42      	adds	r2, r0, #1
 8023884:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023888:	0c3a      	lsrs	r2, r7, #16
 802388a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802388e:	4a18      	ldr	r2, [pc, #96]	@ (80238f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8023890:	b2c0      	uxtb	r0, r0
 8023892:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8023896:	1c4a      	adds	r2, r1, #1
 8023898:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802389c:	0a3a      	lsrs	r2, r7, #8
 802389e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80238a2:	00c9      	lsls	r1, r1, #3
 80238a4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80238a8:	4301      	orrs	r1, r0
 80238aa:	1c58      	adds	r0, r3, #1
 80238ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80238b0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80238b4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80238b8:	4308      	orrs	r0, r1
 80238ba:	f8a9 0000 	strh.w	r0, [r9]
 80238be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80238c0:	f109 0902 	add.w	r9, r9, #2
 80238c4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80238c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80238ca:	441a      	add	r2, r3
 80238cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80238ce:	9225      	str	r2, [sp, #148]	@ 0x94
 80238d0:	441d      	add	r5, r3
 80238d2:	e64c      	b.n	802356e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80238d4:	2800      	cmp	r0, #0
 80238d6:	f43f aeed 	beq.w	80236b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80238da:	5c79      	ldrb	r1, [r7, r1]
 80238dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80238e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80238e2:	0e09      	lsrs	r1, r1, #24
 80238e4:	9111      	str	r1, [sp, #68]	@ 0x44
 80238e6:	e6e5      	b.n	80236b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80238e8:	b01b      	add	sp, #108	@ 0x6c
 80238ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238ee:	bf00      	nop
 80238f0:	fffff800 	.word	0xfffff800

080238f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80238f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238f8:	b085      	sub	sp, #20
 80238fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80238fe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8023902:	2800      	cmp	r0, #0
 8023904:	9103      	str	r1, [sp, #12]
 8023906:	fb00 7406 	mla	r4, r0, r6, r7
 802390a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802390e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8023912:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8023916:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802391a:	eb03 0904 	add.w	r9, r3, r4
 802391e:	9501      	str	r5, [sp, #4]
 8023920:	f2c0 8150 	blt.w	8023bc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8023924:	4583      	cmp	fp, r0
 8023926:	f340 814d 	ble.w	8023bc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802392a:	2f00      	cmp	r7, #0
 802392c:	f2c0 8146 	blt.w	8023bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8023930:	42be      	cmp	r6, r7
 8023932:	f340 8143 	ble.w	8023bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8023936:	f813 c004 	ldrb.w	ip, [r3, r4]
 802393a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802393e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8023942:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023946:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802394a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802394e:	4355      	muls	r5, r2
 8023950:	fb0c f203 	mul.w	r2, ip, r3
 8023954:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8023958:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802395c:	441d      	add	r5, r3
 802395e:	f102 0320 	add.w	r3, r2, #32
 8023962:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023966:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802396a:	0a1b      	lsrs	r3, r3, #8
 802396c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023970:	431c      	orrs	r4, r3
 8023972:	1c7b      	adds	r3, r7, #1
 8023974:	f100 812b 	bmi.w	8023bce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8023978:	429e      	cmp	r6, r3
 802397a:	f340 8128 	ble.w	8023bce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802397e:	2900      	cmp	r1, #0
 8023980:	f000 8128 	beq.w	8023bd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8023984:	9a01      	ldr	r2, [sp, #4]
 8023986:	f899 3001 	ldrb.w	r3, [r9, #1]
 802398a:	8855      	ldrh	r5, [r2, #2]
 802398c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8023990:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8023994:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023998:	fb08 f802 	mul.w	r8, r8, r2
 802399c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80239a0:	435d      	muls	r5, r3
 80239a2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80239a6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80239aa:	44d0      	add	r8, sl
 80239ac:	f105 0a20 	add.w	sl, r5, #32
 80239b0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80239b4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80239b8:	0a2d      	lsrs	r5, r5, #8
 80239ba:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80239be:	432a      	orrs	r2, r5
 80239c0:	3001      	adds	r0, #1
 80239c2:	f100 810d 	bmi.w	8023be0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80239c6:	4583      	cmp	fp, r0
 80239c8:	f340 810a 	ble.w	8023be0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80239cc:	f1be 0f00 	cmp.w	lr, #0
 80239d0:	f000 810b 	beq.w	8023bea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80239d4:	2f00      	cmp	r7, #0
 80239d6:	f2c0 8100 	blt.w	8023bda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80239da:	42be      	cmp	r6, r7
 80239dc:	f340 80fd 	ble.w	8023bda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80239e0:	9801      	ldr	r0, [sp, #4]
 80239e2:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80239e6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80239ea:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80239ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80239f2:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80239f6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80239fa:	fb0a fa00 	mul.w	sl, sl, r0
 80239fe:	fb05 f808 	mul.w	r8, r5, r8
 8023a02:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8023a06:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8023a0a:	4482      	add	sl, r0
 8023a0c:	f108 0020 	add.w	r0, r8, #32
 8023a10:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023a14:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8023a18:	0a00      	lsrs	r0, r0, #8
 8023a1a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023a1e:	ea4b 0b00 	orr.w	fp, fp, r0
 8023a22:	3701      	adds	r7, #1
 8023a24:	f100 80e6 	bmi.w	8023bf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8023a28:	42be      	cmp	r6, r7
 8023a2a:	f340 80e3 	ble.w	8023bf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8023a2e:	2900      	cmp	r1, #0
 8023a30:	f000 80e3 	beq.w	8023bfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8023a34:	3601      	adds	r6, #1
 8023a36:	9801      	ldr	r0, [sp, #4]
 8023a38:	f819 7006 	ldrb.w	r7, [r9, r6]
 8023a3c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8023a40:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8023a44:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8023a48:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023a4c:	fb09 f906 	mul.w	r9, r9, r6
 8023a50:	fb07 f800 	mul.w	r8, r7, r0
 8023a54:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8023a58:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8023a5c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8023a60:	44d1      	add	r9, sl
 8023a62:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8023a66:	f108 0020 	add.w	r0, r8, #32
 8023a6a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023a6e:	0a00      	lsrs	r0, r0, #8
 8023a70:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023a74:	4330      	orrs	r0, r6
 8023a76:	b28e      	uxth	r6, r1
 8023a78:	fa1f f98e 	uxth.w	r9, lr
 8023a7c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8023a80:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023a84:	fb06 f809 	mul.w	r8, r6, r9
 8023a88:	0136      	lsls	r6, r6, #4
 8023a8a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023a8e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023a92:	9601      	str	r6, [sp, #4]
 8023a94:	ea4a 0404 	orr.w	r4, sl, r4
 8023a98:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023a9c:	fa1f f689 	uxth.w	r6, r9
 8023aa0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023aa4:	fb11 f90e 	smulbb	r9, r1, lr
 8023aa8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023aac:	9602      	str	r6, [sp, #8]
 8023aae:	4626      	mov	r6, r4
 8023ab0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8023ab4:	f1ce 0410 	rsb	r4, lr, #16
 8023ab8:	ea4a 0202 	orr.w	r2, sl, r2
 8023abc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023ac0:	1a64      	subs	r4, r4, r1
 8023ac2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8023ac6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023aca:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8023ace:	434a      	muls	r2, r1
 8023ad0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8023ad4:	ea4a 0000 	orr.w	r0, sl, r0
 8023ad8:	9903      	ldr	r1, [sp, #12]
 8023ada:	fb04 2406 	mla	r4, r4, r6, r2
 8023ade:	9e02      	ldr	r6, [sp, #8]
 8023ae0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023ae4:	fb09 4200 	mla	r2, r9, r0, r4
 8023ae8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8023aec:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8023af0:	8808      	ldrh	r0, [r1, #0]
 8023af2:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023af6:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8023afa:	ea44 0b0b 	orr.w	fp, r4, fp
 8023afe:	9c01      	ldr	r4, [sp, #4]
 8023b00:	b289      	uxth	r1, r1
 8023b02:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8023b06:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8023b0a:	1ba4      	subs	r4, r4, r6
 8023b0c:	9e01      	ldr	r6, [sp, #4]
 8023b0e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023b12:	eba6 0608 	sub.w	r6, r6, r8
 8023b16:	b2a4      	uxth	r4, r4
 8023b18:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023b1c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023b20:	b2b6      	uxth	r6, r6
 8023b22:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023b26:	4373      	muls	r3, r6
 8023b28:	ea42 0e0e 	orr.w	lr, r2, lr
 8023b2c:	fb0c 3304 	mla	r3, ip, r4, r3
 8023b30:	9c02      	ldr	r4, [sp, #8]
 8023b32:	fa1f f28e 	uxth.w	r2, lr
 8023b36:	fb04 3505 	mla	r5, r4, r5, r3
 8023b3a:	10d4      	asrs	r4, r2, #3
 8023b3c:	fb08 5707 	mla	r7, r8, r7, r5
 8023b40:	1215      	asrs	r5, r2, #8
 8023b42:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8023b46:	00d2      	lsls	r2, r2, #3
 8023b48:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023b4c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023b50:	b2d2      	uxtb	r2, r2
 8023b52:	434f      	muls	r7, r1
 8023b54:	1c7b      	adds	r3, r7, #1
 8023b56:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023b5a:	1203      	asrs	r3, r0, #8
 8023b5c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8023b60:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8023b64:	b2ff      	uxtb	r7, r7
 8023b66:	fb13 f307 	smulbb	r3, r3, r7
 8023b6a:	fb05 3501 	mla	r5, r5, r1, r3
 8023b6e:	10c3      	asrs	r3, r0, #3
 8023b70:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8023b74:	b2ad      	uxth	r5, r5
 8023b76:	fb13 f307 	smulbb	r3, r3, r7
 8023b7a:	fb04 3401 	mla	r4, r4, r1, r3
 8023b7e:	00c3      	lsls	r3, r0, #3
 8023b80:	b2db      	uxtb	r3, r3
 8023b82:	b2a4      	uxth	r4, r4
 8023b84:	fb13 f307 	smulbb	r3, r3, r7
 8023b88:	fb02 3101 	mla	r1, r2, r1, r3
 8023b8c:	1c6b      	adds	r3, r5, #1
 8023b8e:	1c62      	adds	r2, r4, #1
 8023b90:	b289      	uxth	r1, r1
 8023b92:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023b96:	1c4b      	adds	r3, r1, #1
 8023b98:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8023b9c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023ba0:	9a03      	ldr	r2, [sp, #12]
 8023ba2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023ba6:	0964      	lsrs	r4, r4, #5
 8023ba8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023bac:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8023bb0:	432b      	orrs	r3, r5
 8023bb2:	4323      	orrs	r3, r4
 8023bb4:	8013      	strh	r3, [r2, #0]
 8023bb6:	b005      	add	sp, #20
 8023bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bbc:	f04f 0c00 	mov.w	ip, #0
 8023bc0:	4664      	mov	r4, ip
 8023bc2:	e6d6      	b.n	8023972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	469c      	mov	ip, r3
 8023bc8:	461a      	mov	r2, r3
 8023bca:	461c      	mov	r4, r3
 8023bcc:	e6f8      	b.n	80239c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8023bce:	2300      	movs	r3, #0
 8023bd0:	461a      	mov	r2, r3
 8023bd2:	e6f5      	b.n	80239c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8023bd4:	460b      	mov	r3, r1
 8023bd6:	460a      	mov	r2, r1
 8023bd8:	e6f2      	b.n	80239c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8023bda:	2500      	movs	r5, #0
 8023bdc:	46ab      	mov	fp, r5
 8023bde:	e720      	b.n	8023a22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8023be0:	2700      	movs	r7, #0
 8023be2:	463d      	mov	r5, r7
 8023be4:	4638      	mov	r0, r7
 8023be6:	46bb      	mov	fp, r7
 8023be8:	e745      	b.n	8023a76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8023bea:	4677      	mov	r7, lr
 8023bec:	4675      	mov	r5, lr
 8023bee:	4670      	mov	r0, lr
 8023bf0:	46f3      	mov	fp, lr
 8023bf2:	e740      	b.n	8023a76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8023bf4:	2700      	movs	r7, #0
 8023bf6:	4638      	mov	r0, r7
 8023bf8:	e73d      	b.n	8023a76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8023bfa:	460f      	mov	r7, r1
 8023bfc:	4608      	mov	r0, r1
 8023bfe:	e73a      	b.n	8023a76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08023c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c04:	b097      	sub	sp, #92	@ 0x5c
 8023c06:	9214      	str	r2, [sp, #80]	@ 0x50
 8023c08:	9308      	str	r3, [sp, #32]
 8023c0a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8023c0c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8023c10:	9015      	str	r0, [sp, #84]	@ 0x54
 8023c12:	9312      	str	r3, [sp, #72]	@ 0x48
 8023c14:	6850      	ldr	r0, [r2, #4]
 8023c16:	9111      	str	r1, [sp, #68]	@ 0x44
 8023c18:	6812      	ldr	r2, [r2, #0]
 8023c1a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8023c1e:	fb00 1303 	mla	r3, r0, r3, r1
 8023c22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8023c28:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023c2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023c30:	685b      	ldr	r3, [r3, #4]
 8023c32:	930c      	str	r3, [sp, #48]	@ 0x30
 8023c34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8023c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8023c3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	dc03      	bgt.n	8023c48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023c40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023c42:	2b00      	cmp	r3, #0
 8023c44:	f340 83cd 	ble.w	80243e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8023c48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023c4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c52:	1e48      	subs	r0, r1, #1
 8023c54:	1e55      	subs	r5, r2, #1
 8023c56:	9b08      	ldr	r3, [sp, #32]
 8023c58:	2b00      	cmp	r3, #0
 8023c5a:	f340 81a5 	ble.w	8023fa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023c5e:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8023c60:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023c62:	1436      	asrs	r6, r6, #16
 8023c64:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023c68:	d406      	bmi.n	8023c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023c6a:	4286      	cmp	r6, r0
 8023c6c:	da04      	bge.n	8023c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	db02      	blt.n	8023c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023c72:	42ab      	cmp	r3, r5
 8023c74:	f2c0 8199 	blt.w	8023faa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8023c78:	3601      	adds	r6, #1
 8023c7a:	f100 8186 	bmi.w	8023f8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023c7e:	42b1      	cmp	r1, r6
 8023c80:	f2c0 8183 	blt.w	8023f8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023c84:	3301      	adds	r3, #1
 8023c86:	f100 8180 	bmi.w	8023f8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023c8a:	429a      	cmp	r2, r3
 8023c8c:	f2c0 817d 	blt.w	8023f8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023c90:	9b08      	ldr	r3, [sp, #32]
 8023c92:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8023c96:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8023c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023c9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023c9c:	2b00      	cmp	r3, #0
 8023c9e:	f340 81a6 	ble.w	8023fee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023ca2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023ca4:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8023ca6:	1418      	asrs	r0, r3, #16
 8023ca8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023caa:	142d      	asrs	r5, r5, #16
 8023cac:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023cb0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023cb2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8023cb6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023cb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023cbc:	f100 81fa 	bmi.w	80240b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023cc0:	f102 3eff 	add.w	lr, r2, #4294967295
 8023cc4:	4575      	cmp	r5, lr
 8023cc6:	f280 81f5 	bge.w	80240b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023cca:	2800      	cmp	r0, #0
 8023ccc:	f2c0 81f2 	blt.w	80240b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023cd0:	f103 3eff 	add.w	lr, r3, #4294967295
 8023cd4:	4570      	cmp	r0, lr
 8023cd6:	f280 81ed 	bge.w	80240b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023cda:	b212      	sxth	r2, r2
 8023cdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cde:	fa1f fe81 	uxth.w	lr, r1
 8023ce2:	fb00 5002 	mla	r0, r0, r2, r5
 8023ce6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023cea:	eb03 0a00 	add.w	sl, r3, r0
 8023cee:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023cf2:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8023cf6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023cfa:	b29b      	uxth	r3, r3
 8023cfc:	f1bc 0f00 	cmp.w	ip, #0
 8023d00:	f000 81bb 	beq.w	802407a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8023d04:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8023d08:	eb0a 0b02 	add.w	fp, sl, r2
 8023d0c:	fa1f fa8c 	uxth.w	sl, ip
 8023d10:	940d      	str	r4, [sp, #52]	@ 0x34
 8023d12:	fb0a fe0e 	mul.w	lr, sl, lr
 8023d16:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023d1a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8023d1e:	eba5 050e 	sub.w	r5, r5, lr
 8023d22:	940e      	str	r4, [sp, #56]	@ 0x38
 8023d24:	fa1f fa8a 	uxth.w	sl, sl
 8023d28:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023d2a:	b2ad      	uxth	r5, r5
 8023d2c:	eba3 030a 	sub.w	r3, r3, sl
 8023d30:	fb08 f505 	mul.w	r5, r8, r5
 8023d34:	b29b      	uxth	r3, r3
 8023d36:	fb09 5303 	mla	r3, r9, r3, r5
 8023d3a:	fb0a 3304 	mla	r3, sl, r4, r3
 8023d3e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023d40:	fb0e 3304 	mla	r3, lr, r4, r3
 8023d44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d48:	2b00      	cmp	r3, #0
 8023d4a:	f000 8111 	beq.w	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023d4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023d50:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023d54:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023d58:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023d5c:	f000 8192 	beq.w	8024084 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8023d60:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8023d64:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023d68:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023d6c:	fb0a fe0e 	mul.w	lr, sl, lr
 8023d70:	fb09 f000 	mul.w	r0, r9, r0
 8023d74:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023d78:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8023d7c:	f100 0b20 	add.w	fp, r0, #32
 8023d80:	44ce      	add	lr, r9
 8023d82:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8023d86:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023d8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d8e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8023d92:	ea4e 0909 	orr.w	r9, lr, r9
 8023d96:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8023d9a:	8868      	ldrh	r0, [r5, #2]
 8023d9c:	d019      	beq.n	8023dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023d9e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8023da2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023da6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023daa:	fb0a fe0e 	mul.w	lr, sl, lr
 8023dae:	fb08 f800 	mul.w	r8, r8, r0
 8023db2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8023db6:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8023dba:	f108 0b20 	add.w	fp, r8, #32
 8023dbe:	4486      	add	lr, r0
 8023dc0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023dc4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023dc8:	0a00      	lsrs	r0, r0, #8
 8023dca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023dce:	ea4e 0000 	orr.w	r0, lr, r0
 8023dd2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8023dd6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8023dda:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023dde:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8023de2:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8023de6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023dea:	ea4e 0909 	orr.w	r9, lr, r9
 8023dee:	ea4a 0000 	orr.w	r0, sl, r0
 8023df2:	f1bc 0f00 	cmp.w	ip, #0
 8023df6:	f000 8147 	beq.w	8024088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8023dfa:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8023dfe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023e00:	3a01      	subs	r2, #1
 8023e02:	2cff      	cmp	r4, #255	@ 0xff
 8023e04:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8023e08:	f102 0202 	add.w	r2, r2, #2
 8023e0c:	eb05 0e02 	add.w	lr, r5, r2
 8023e10:	5aaa      	ldrh	r2, [r5, r2]
 8023e12:	d018      	beq.n	8023e46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8023e14:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8023e18:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023e1c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023e20:	fb04 fa02 	mul.w	sl, r4, r2
 8023e24:	fb08 f805 	mul.w	r8, r8, r5
 8023e28:	f10a 0520 	add.w	r5, sl, #32
 8023e2c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8023e30:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8023e34:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023e38:	4442      	add	r2, r8
 8023e3a:	0a2d      	lsrs	r5, r5, #8
 8023e3c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8023e40:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023e44:	432a      	orrs	r2, r5
 8023e46:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023e48:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8023e4c:	2cff      	cmp	r4, #255	@ 0xff
 8023e4e:	d01a      	beq.n	8023e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023e50:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8023e54:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023e58:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023e5c:	fb04 fa05 	mul.w	sl, r4, r5
 8023e60:	fb08 f80e 	mul.w	r8, r8, lr
 8023e64:	f10a 0e20 	add.w	lr, sl, #32
 8023e68:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023e6c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8023e70:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023e74:	4445      	add	r5, r8
 8023e76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e7a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023e7e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8023e82:	ea45 050e 	orr.w	r5, r5, lr
 8023e86:	fb1c fe01 	smulbb	lr, ip, r1
 8023e8a:	f1cc 0810 	rsb	r8, ip, #16
 8023e8e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023e92:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023e96:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023e9a:	eba8 0801 	sub.w	r8, r8, r1
 8023e9e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023ea2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023ea6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8023eaa:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023eae:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023eb2:	ea4a 0202 	orr.w	r2, sl, r2
 8023eb6:	4341      	muls	r1, r0
 8023eb8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023ebc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8023ec0:	fb09 1108 	mla	r1, r9, r8, r1
 8023ec4:	ea4b 0505 	orr.w	r5, fp, r5
 8023ec8:	fb0c 1102 	mla	r1, ip, r2, r1
 8023ecc:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023ed0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023ed4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023ed8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023edc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023ee0:	ea42 0e0e 	orr.w	lr, r2, lr
 8023ee4:	fa1f f28e 	uxth.w	r2, lr
 8023ee8:	2bff      	cmp	r3, #255	@ 0xff
 8023eea:	d103      	bne.n	8023ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023eec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023eee:	29ff      	cmp	r1, #255	@ 0xff
 8023ef0:	f000 80de 	beq.w	80240b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8023ef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023ef6:	1215      	asrs	r5, r2, #8
 8023ef8:	8838      	ldrh	r0, [r7, #0]
 8023efa:	434b      	muls	r3, r1
 8023efc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023f00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023f02:	f103 0c01 	add.w	ip, r3, #1
 8023f06:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8023f0a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8023f0e:	fa5f fc83 	uxtb.w	ip, r3
 8023f12:	1203      	asrs	r3, r0, #8
 8023f14:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8023f18:	fb13 f30c 	smulbb	r3, r3, ip
 8023f1c:	fb05 3501 	mla	r5, r5, r1, r3
 8023f20:	10c3      	asrs	r3, r0, #3
 8023f22:	10d1      	asrs	r1, r2, #3
 8023f24:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8023f28:	00d2      	lsls	r2, r2, #3
 8023f2a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023f2e:	b2ad      	uxth	r5, r5
 8023f30:	fb13 f30c 	smulbb	r3, r3, ip
 8023f34:	b2d2      	uxtb	r2, r2
 8023f36:	fb01 3104 	mla	r1, r1, r4, r3
 8023f3a:	00c3      	lsls	r3, r0, #3
 8023f3c:	b2db      	uxtb	r3, r3
 8023f3e:	b289      	uxth	r1, r1
 8023f40:	fb13 f30c 	smulbb	r3, r3, ip
 8023f44:	fb02 3304 	mla	r3, r2, r4, r3
 8023f48:	b29a      	uxth	r2, r3
 8023f4a:	1c6b      	adds	r3, r5, #1
 8023f4c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023f50:	1c53      	adds	r3, r2, #1
 8023f52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023f56:	1c4a      	adds	r2, r1, #1
 8023f58:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023f5c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023f60:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023f64:	0949      	lsrs	r1, r1, #5
 8023f66:	432b      	orrs	r3, r5
 8023f68:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023f6c:	430b      	orrs	r3, r1
 8023f6e:	803b      	strh	r3, [r7, #0]
 8023f70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023f72:	3702      	adds	r7, #2
 8023f74:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8023f76:	4413      	add	r3, r2
 8023f78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023f7a:	9321      	str	r3, [sp, #132]	@ 0x84
 8023f7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f7e:	441a      	add	r2, r3
 8023f80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023f82:	3b01      	subs	r3, #1
 8023f84:	9222      	str	r2, [sp, #136]	@ 0x88
 8023f86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023f88:	e687      	b.n	8023c9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023f8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023f8c:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8023f8e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8023f90:	4433      	add	r3, r6
 8023f92:	9321      	str	r3, [sp, #132]	@ 0x84
 8023f94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f96:	441c      	add	r4, r3
 8023f98:	9b08      	ldr	r3, [sp, #32]
 8023f9a:	3b01      	subs	r3, #1
 8023f9c:	9422      	str	r4, [sp, #136]	@ 0x88
 8023f9e:	9308      	str	r3, [sp, #32]
 8023fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023fa2:	3302      	adds	r3, #2
 8023fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fa6:	e656      	b.n	8023c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023fa8:	d028      	beq.n	8023ffc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023faa:	9b08      	ldr	r3, [sp, #32]
 8023fac:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8023fae:	3b01      	subs	r3, #1
 8023fb0:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8023fb2:	fb00 5003 	mla	r0, r0, r3, r5
 8023fb6:	1400      	asrs	r0, r0, #16
 8023fb8:	f53f ae6a 	bmi.w	8023c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023fbc:	3901      	subs	r1, #1
 8023fbe:	4288      	cmp	r0, r1
 8023fc0:	f6bf ae66 	bge.w	8023c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023fc4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8023fc6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8023fc8:	fb01 0303 	mla	r3, r1, r3, r0
 8023fcc:	141b      	asrs	r3, r3, #16
 8023fce:	f53f ae5f 	bmi.w	8023c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023fd2:	3a01      	subs	r2, #1
 8023fd4:	4293      	cmp	r3, r2
 8023fd6:	f6bf ae5b 	bge.w	8023c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023fda:	9b08      	ldr	r3, [sp, #32]
 8023fdc:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8023fe0:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8023fe4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023fe6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	f300 8082 	bgt.w	80240f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8023fee:	9b08      	ldr	r3, [sp, #32]
 8023ff0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ff6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ffc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023ffe:	2b00      	cmp	r3, #0
 8024000:	f340 81ef 	ble.w	80243e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024008:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802400a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802400e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024012:	eef0 6a62 	vmov.f32	s13, s5
 8024016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802401a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802401e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024022:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8024026:	eef0 6a43 	vmov.f32	s13, s6
 802402a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802402e:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8024032:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024036:	ee61 7a27 	vmul.f32	s15, s2, s15
 802403a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802403e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024042:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024046:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802404a:	ee12 2a90 	vmov	r2, s5
 802404e:	eef0 2a47 	vmov.f32	s5, s14
 8024052:	fb92 f3f3 	sdiv	r3, r2, r3
 8024056:	ee13 2a10 	vmov	r2, s6
 802405a:	9323      	str	r3, [sp, #140]	@ 0x8c
 802405c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802405e:	eeb0 3a67 	vmov.f32	s6, s15
 8024062:	fb92 f3f3 	sdiv	r3, r2, r3
 8024066:	9324      	str	r3, [sp, #144]	@ 0x90
 8024068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802406a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802406c:	3b01      	subs	r3, #1
 802406e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024070:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024072:	bf08      	it	eq
 8024074:	4613      	moveq	r3, r2
 8024076:	9308      	str	r3, [sp, #32]
 8024078:	e5df      	b.n	8023c3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802407a:	fb08 f505 	mul.w	r5, r8, r5
 802407e:	fb09 5303 	mla	r3, r9, r3, r5
 8024082:	e65f      	b.n	8023d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024084:	4681      	mov	r9, r0
 8024086:	e686      	b.n	8023d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024088:	f1c1 0210 	rsb	r2, r1, #16
 802408c:	4341      	muls	r1, r0
 802408e:	fb09 1902 	mla	r9, r9, r2, r1
 8024092:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024096:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802409a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802409e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80240a2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80240a6:	ea42 0909 	orr.w	r9, r2, r9
 80240aa:	fa1f f289 	uxth.w	r2, r9
 80240ae:	e71b      	b.n	8023ee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80240b0:	803a      	strh	r2, [r7, #0]
 80240b2:	e75d      	b.n	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240b4:	f115 0e01 	adds.w	lr, r5, #1
 80240b8:	f53f af5a 	bmi.w	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240bc:	4572      	cmp	r2, lr
 80240be:	f6ff af57 	blt.w	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240c2:	f110 0e01 	adds.w	lr, r0, #1
 80240c6:	f53f af53 	bmi.w	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240ca:	4573      	cmp	r3, lr
 80240cc:	f6ff af50 	blt.w	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80240d2:	b21b      	sxth	r3, r3
 80240d4:	b212      	sxth	r2, r2
 80240d6:	9502      	str	r5, [sp, #8]
 80240d8:	9301      	str	r3, [sp, #4]
 80240da:	9200      	str	r2, [sp, #0]
 80240dc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80240e0:	e9cd c405 	strd	ip, r4, [sp, #20]
 80240e4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80240e8:	4639      	mov	r1, r7
 80240ea:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80240ec:	f7ff fc02 	bl	80238f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80240f0:	e73e      	b.n	8023f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80240f4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80240f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80240fa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80240fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024100:	fa1f fc82 	uxth.w	ip, r2
 8024104:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024108:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802410a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802410e:	141f      	asrs	r7, r3, #16
 8024110:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024112:	141b      	asrs	r3, r3, #16
 8024114:	fb01 3707 	mla	r7, r1, r7, r3
 8024118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802411a:	eb03 0a07 	add.w	sl, r3, r7
 802411e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8024122:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8024126:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802412a:	b29b      	uxth	r3, r3
 802412c:	2d00      	cmp	r5, #0
 802412e:	f000 813d 	beq.w	80243ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8024132:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8024136:	eb0a 0b01 	add.w	fp, sl, r1
 802413a:	fa1f fa85 	uxth.w	sl, r5
 802413e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024140:	fb0a fc0c 	mul.w	ip, sl, ip
 8024144:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024148:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802414c:	eba0 000c 	sub.w	r0, r0, ip
 8024150:	9410      	str	r4, [sp, #64]	@ 0x40
 8024152:	fa1f fa8a 	uxth.w	sl, sl
 8024156:	b280      	uxth	r0, r0
 8024158:	eba3 030a 	sub.w	r3, r3, sl
 802415c:	fb08 f000 	mul.w	r0, r8, r0
 8024160:	b29b      	uxth	r3, r3
 8024162:	fb09 0303 	mla	r3, r9, r3, r0
 8024166:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024168:	fb0a 3300 	mla	r3, sl, r0, r3
 802416c:	fb0c 3304 	mla	r3, ip, r4, r3
 8024170:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024174:	2b00      	cmp	r3, #0
 8024176:	f000 810b 	beq.w	8024390 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802417a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802417c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024180:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024182:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024186:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802418a:	f000 8114 	beq.w	80243b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802418e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024192:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024196:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802419a:	fb0a fc0c 	mul.w	ip, sl, ip
 802419e:	fb09 f707 	mul.w	r7, r9, r7
 80241a2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80241a6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80241aa:	f107 0b20 	add.w	fp, r7, #32
 80241ae:	44cc      	add	ip, r9
 80241b0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80241b4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80241b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80241bc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80241c0:	ea4c 0909 	orr.w	r9, ip, r9
 80241c4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80241c8:	8847      	ldrh	r7, [r0, #2]
 80241ca:	d019      	beq.n	8024200 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80241cc:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80241d0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80241d4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80241d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80241dc:	fb08 f807 	mul.w	r8, r8, r7
 80241e0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80241e4:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80241e8:	f108 0b20 	add.w	fp, r8, #32
 80241ec:	44bc      	add	ip, r7
 80241ee:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80241f2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80241f6:	0a3f      	lsrs	r7, r7, #8
 80241f8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80241fc:	ea4c 0707 	orr.w	r7, ip, r7
 8024200:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024204:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024208:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802420c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8024210:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024214:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024218:	ea4c 0909 	orr.w	r9, ip, r9
 802421c:	ea4a 0707 	orr.w	r7, sl, r7
 8024220:	2d00      	cmp	r5, #0
 8024222:	f000 80ca 	beq.w	80243ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8024226:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802422a:	3901      	subs	r1, #1
 802422c:	0049      	lsls	r1, r1, #1
 802422e:	3102      	adds	r1, #2
 8024230:	eb00 0c01 	add.w	ip, r0, r1
 8024234:	5a41      	ldrh	r1, [r0, r1]
 8024236:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024238:	28ff      	cmp	r0, #255	@ 0xff
 802423a:	d019      	beq.n	8024270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802423c:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8024240:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024242:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024246:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802424a:	fb04 fa01 	mul.w	sl, r4, r1
 802424e:	fb08 f800 	mul.w	r8, r8, r0
 8024252:	f10a 0020 	add.w	r0, sl, #32
 8024256:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802425a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802425e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024262:	4441      	add	r1, r8
 8024264:	0a00      	lsrs	r0, r0, #8
 8024266:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802426a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802426e:	4301      	orrs	r1, r0
 8024270:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024272:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024276:	2cff      	cmp	r4, #255	@ 0xff
 8024278:	d01a      	beq.n	80242b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802427a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802427e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024282:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024286:	fb04 fa00 	mul.w	sl, r4, r0
 802428a:	fb08 f80c 	mul.w	r8, r8, ip
 802428e:	f10a 0c20 	add.w	ip, sl, #32
 8024292:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024296:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802429a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802429e:	4440      	add	r0, r8
 80242a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242a4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80242a8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80242ac:	ea40 000c 	orr.w	r0, r0, ip
 80242b0:	fb15 fc02 	smulbb	ip, r5, r2
 80242b4:	f1c5 0810 	rsb	r8, r5, #16
 80242b8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80242bc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80242c0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80242c4:	eba8 0802 	sub.w	r8, r8, r2
 80242c8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80242cc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80242d0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80242d4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80242d8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80242dc:	ea4a 0101 	orr.w	r1, sl, r1
 80242e0:	437a      	muls	r2, r7
 80242e2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80242e6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80242ea:	fb09 2208 	mla	r2, r9, r8, r2
 80242ee:	ea4b 0000 	orr.w	r0, fp, r0
 80242f2:	fb05 2201 	mla	r2, r5, r1, r2
 80242f6:	fb0c 2200 	mla	r2, ip, r0, r2
 80242fa:	0d57      	lsrs	r7, r2, #21
 80242fc:	0952      	lsrs	r2, r2, #5
 80242fe:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024302:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024306:	433a      	orrs	r2, r7
 8024308:	2bff      	cmp	r3, #255	@ 0xff
 802430a:	b292      	uxth	r2, r2
 802430c:	d102      	bne.n	8024314 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802430e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024310:	29ff      	cmp	r1, #255	@ 0xff
 8024312:	d063      	beq.n	80243dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8024314:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024316:	1215      	asrs	r5, r2, #8
 8024318:	f8be 1000 	ldrh.w	r1, [lr]
 802431c:	4343      	muls	r3, r0
 802431e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024320:	10cf      	asrs	r7, r1, #3
 8024322:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024326:	1c58      	adds	r0, r3, #1
 8024328:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802432c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024330:	1208      	asrs	r0, r1, #8
 8024332:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024336:	00c9      	lsls	r1, r1, #3
 8024338:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802433c:	b2db      	uxtb	r3, r3
 802433e:	b2c9      	uxtb	r1, r1
 8024340:	fb10 f003 	smulbb	r0, r0, r3
 8024344:	fb11 f103 	smulbb	r1, r1, r3
 8024348:	fb05 0504 	mla	r5, r5, r4, r0
 802434c:	10d0      	asrs	r0, r2, #3
 802434e:	fb17 f703 	smulbb	r7, r7, r3
 8024352:	00d2      	lsls	r2, r2, #3
 8024354:	b2ad      	uxth	r5, r5
 8024356:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802435a:	b2d2      	uxtb	r2, r2
 802435c:	fb00 7004 	mla	r0, r0, r4, r7
 8024360:	1c6b      	adds	r3, r5, #1
 8024362:	fb02 1204 	mla	r2, r2, r4, r1
 8024366:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802436a:	b292      	uxth	r2, r2
 802436c:	b280      	uxth	r0, r0
 802436e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024372:	1c57      	adds	r7, r2, #1
 8024374:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024378:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802437c:	433d      	orrs	r5, r7
 802437e:	1c47      	adds	r7, r0, #1
 8024380:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024384:	097f      	lsrs	r7, r7, #5
 8024386:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802438a:	433d      	orrs	r5, r7
 802438c:	f8ae 5000 	strh.w	r5, [lr]
 8024390:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024392:	f10e 0e02 	add.w	lr, lr, #2
 8024396:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024398:	4413      	add	r3, r2
 802439a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802439c:	9321      	str	r3, [sp, #132]	@ 0x84
 802439e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80243a0:	441a      	add	r2, r3
 80243a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80243a4:	3b01      	subs	r3, #1
 80243a6:	9222      	str	r2, [sp, #136]	@ 0x88
 80243a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80243aa:	e61c      	b.n	8023fe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80243ac:	fb08 f000 	mul.w	r0, r8, r0
 80243b0:	fb09 0303 	mla	r3, r9, r3, r0
 80243b4:	e6dc      	b.n	8024170 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 80243b6:	46b9      	mov	r9, r7
 80243b8:	e704      	b.n	80241c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80243ba:	f1c2 0110 	rsb	r1, r2, #16
 80243be:	437a      	muls	r2, r7
 80243c0:	fb09 2901 	mla	r9, r9, r1, r2
 80243c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80243c8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80243cc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80243d0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80243d4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80243d8:	4302      	orrs	r2, r0
 80243da:	e795      	b.n	8024308 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 80243dc:	f8ae 2000 	strh.w	r2, [lr]
 80243e0:	e7d6      	b.n	8024390 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 80243e2:	b017      	add	sp, #92	@ 0x5c
 80243e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080243e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80243e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243ec:	b085      	sub	sp, #20
 80243ee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80243f2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80243f6:	2800      	cmp	r0, #0
 80243f8:	9103      	str	r1, [sp, #12]
 80243fa:	fb00 7406 	mla	r4, r0, r6, r7
 80243fe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8024402:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8024406:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802440a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802440e:	eb02 0904 	add.w	r9, r2, r4
 8024412:	9501      	str	r5, [sp, #4]
 8024414:	f2c0 8141 	blt.w	802469a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024418:	4583      	cmp	fp, r0
 802441a:	f340 813e 	ble.w	802469a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802441e:	2f00      	cmp	r7, #0
 8024420:	f2c0 8137 	blt.w	8024692 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024424:	42be      	cmp	r6, r7
 8024426:	f340 8134 	ble.w	8024692 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802442a:	f812 c004 	ldrb.w	ip, [r2, r4]
 802442e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8024432:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8024436:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802443a:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802443e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024442:	4355      	muls	r5, r2
 8024444:	fb0c f203 	mul.w	r2, ip, r3
 8024448:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802444c:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8024450:	441d      	add	r5, r3
 8024452:	f102 0320 	add.w	r3, r2, #32
 8024456:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802445a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802445e:	0a1b      	lsrs	r3, r3, #8
 8024460:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024464:	431c      	orrs	r4, r3
 8024466:	1c7b      	adds	r3, r7, #1
 8024468:	f100 811c 	bmi.w	80246a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802446c:	429e      	cmp	r6, r3
 802446e:	f340 8119 	ble.w	80246a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024472:	2900      	cmp	r1, #0
 8024474:	f000 8119 	beq.w	80246aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8024478:	9a01      	ldr	r2, [sp, #4]
 802447a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802447e:	8855      	ldrh	r5, [r2, #2]
 8024480:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024484:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8024488:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802448c:	fb08 f802 	mul.w	r8, r8, r2
 8024490:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8024494:	435d      	muls	r5, r3
 8024496:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802449a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802449e:	44d0      	add	r8, sl
 80244a0:	f105 0a20 	add.w	sl, r5, #32
 80244a4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80244a8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80244ac:	0a2d      	lsrs	r5, r5, #8
 80244ae:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80244b2:	432a      	orrs	r2, r5
 80244b4:	3001      	adds	r0, #1
 80244b6:	f100 80fe 	bmi.w	80246b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80244ba:	4583      	cmp	fp, r0
 80244bc:	f340 80fb 	ble.w	80246b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80244c0:	f1be 0f00 	cmp.w	lr, #0
 80244c4:	f000 80fc 	beq.w	80246c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80244c8:	2f00      	cmp	r7, #0
 80244ca:	f2c0 80f1 	blt.w	80246b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80244ce:	42be      	cmp	r6, r7
 80244d0:	f340 80ee 	ble.w	80246b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80244d4:	9801      	ldr	r0, [sp, #4]
 80244d6:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80244da:	f819 5006 	ldrb.w	r5, [r9, r6]
 80244de:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80244e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80244e6:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80244ea:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80244ee:	fb0a fa00 	mul.w	sl, sl, r0
 80244f2:	fb05 f808 	mul.w	r8, r5, r8
 80244f6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80244fa:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80244fe:	4482      	add	sl, r0
 8024500:	f108 0020 	add.w	r0, r8, #32
 8024504:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024508:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802450c:	0a00      	lsrs	r0, r0, #8
 802450e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024512:	ea4b 0b00 	orr.w	fp, fp, r0
 8024516:	3701      	adds	r7, #1
 8024518:	f100 80d7 	bmi.w	80246ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802451c:	42be      	cmp	r6, r7
 802451e:	f340 80d4 	ble.w	80246ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8024522:	2900      	cmp	r1, #0
 8024524:	f000 80d4 	beq.w	80246d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8024528:	3601      	adds	r6, #1
 802452a:	9801      	ldr	r0, [sp, #4]
 802452c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024530:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8024534:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024538:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 802453c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024540:	fb09 f906 	mul.w	r9, r9, r6
 8024544:	fb07 f800 	mul.w	r8, r7, r0
 8024548:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 802454c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024550:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8024554:	44d1      	add	r9, sl
 8024556:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802455a:	f108 0020 	add.w	r0, r8, #32
 802455e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024562:	0a00      	lsrs	r0, r0, #8
 8024564:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024568:	4330      	orrs	r0, r6
 802456a:	b28e      	uxth	r6, r1
 802456c:	fa1f f98e 	uxth.w	r9, lr
 8024570:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8024574:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8024578:	fb06 f809 	mul.w	r8, r6, r9
 802457c:	0136      	lsls	r6, r6, #4
 802457e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024582:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024586:	9601      	str	r6, [sp, #4]
 8024588:	ea4a 0404 	orr.w	r4, sl, r4
 802458c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024590:	fa1f f689 	uxth.w	r6, r9
 8024594:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024598:	fb11 f90e 	smulbb	r9, r1, lr
 802459c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80245a0:	9602      	str	r6, [sp, #8]
 80245a2:	4626      	mov	r6, r4
 80245a4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80245a8:	f1ce 0410 	rsb	r4, lr, #16
 80245ac:	ea4a 0202 	orr.w	r2, sl, r2
 80245b0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80245b4:	1a64      	subs	r4, r4, r1
 80245b6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80245ba:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80245be:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80245c2:	434a      	muls	r2, r1
 80245c4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80245c8:	ea4a 0000 	orr.w	r0, sl, r0
 80245cc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80245d0:	fb04 2406 	mla	r4, r4, r6, r2
 80245d4:	9903      	ldr	r1, [sp, #12]
 80245d6:	fb09 4200 	mla	r2, r9, r0, r4
 80245da:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80245de:	9801      	ldr	r0, [sp, #4]
 80245e0:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80245e4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80245e8:	8809      	ldrh	r1, [r1, #0]
 80245ea:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80245ee:	ea44 0b0b 	orr.w	fp, r4, fp
 80245f2:	9c02      	ldr	r4, [sp, #8]
 80245f4:	1b00      	subs	r0, r0, r4
 80245f6:	9c01      	ldr	r4, [sp, #4]
 80245f8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80245fc:	eba4 0608 	sub.w	r6, r4, r8
 8024600:	b280      	uxth	r0, r0
 8024602:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024606:	b2b6      	uxth	r6, r6
 8024608:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802460c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024610:	4373      	muls	r3, r6
 8024612:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024616:	fb0c 3300 	mla	r3, ip, r0, r3
 802461a:	9802      	ldr	r0, [sp, #8]
 802461c:	ea42 0e0e 	orr.w	lr, r2, lr
 8024620:	fb00 3505 	mla	r5, r0, r5, r3
 8024624:	120b      	asrs	r3, r1, #8
 8024626:	10c8      	asrs	r0, r1, #3
 8024628:	fb08 5707 	mla	r7, r8, r7, r5
 802462c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8024630:	00c9      	lsls	r1, r1, #3
 8024632:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024636:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802463a:	fa1f f28e 	uxth.w	r2, lr
 802463e:	b2c9      	uxtb	r1, r1
 8024640:	b2ff      	uxtb	r7, r7
 8024642:	437b      	muls	r3, r7
 8024644:	4378      	muls	r0, r7
 8024646:	434f      	muls	r7, r1
 8024648:	1c59      	adds	r1, r3, #1
 802464a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802464e:	1213      	asrs	r3, r2, #8
 8024650:	f023 0307 	bic.w	r3, r3, #7
 8024654:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024658:	1c41      	adds	r1, r0, #1
 802465a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802465e:	10d1      	asrs	r1, r2, #3
 8024660:	021b      	lsls	r3, r3, #8
 8024662:	f021 0103 	bic.w	r1, r1, #3
 8024666:	00d2      	lsls	r2, r2, #3
 8024668:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802466c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024670:	00c9      	lsls	r1, r1, #3
 8024672:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024676:	430b      	orrs	r3, r1
 8024678:	1c79      	adds	r1, r7, #1
 802467a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802467e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024682:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024686:	431a      	orrs	r2, r3
 8024688:	9b03      	ldr	r3, [sp, #12]
 802468a:	801a      	strh	r2, [r3, #0]
 802468c:	b005      	add	sp, #20
 802468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024692:	f04f 0c00 	mov.w	ip, #0
 8024696:	4664      	mov	r4, ip
 8024698:	e6e5      	b.n	8024466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802469a:	2300      	movs	r3, #0
 802469c:	469c      	mov	ip, r3
 802469e:	461a      	mov	r2, r3
 80246a0:	461c      	mov	r4, r3
 80246a2:	e707      	b.n	80244b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80246a4:	2300      	movs	r3, #0
 80246a6:	461a      	mov	r2, r3
 80246a8:	e704      	b.n	80244b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80246aa:	460b      	mov	r3, r1
 80246ac:	460a      	mov	r2, r1
 80246ae:	e701      	b.n	80244b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80246b0:	2500      	movs	r5, #0
 80246b2:	46ab      	mov	fp, r5
 80246b4:	e72f      	b.n	8024516 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80246b6:	2700      	movs	r7, #0
 80246b8:	463d      	mov	r5, r7
 80246ba:	4638      	mov	r0, r7
 80246bc:	46bb      	mov	fp, r7
 80246be:	e754      	b.n	802456a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80246c0:	4677      	mov	r7, lr
 80246c2:	4675      	mov	r5, lr
 80246c4:	4670      	mov	r0, lr
 80246c6:	46f3      	mov	fp, lr
 80246c8:	e74f      	b.n	802456a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80246ca:	2700      	movs	r7, #0
 80246cc:	4638      	mov	r0, r7
 80246ce:	e74c      	b.n	802456a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80246d0:	460f      	mov	r7, r1
 80246d2:	4608      	mov	r0, r1
 80246d4:	e749      	b.n	802456a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080246d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80246d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246dc:	b093      	sub	sp, #76	@ 0x4c
 80246de:	9210      	str	r2, [sp, #64]	@ 0x40
 80246e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80246e2:	9011      	str	r0, [sp, #68]	@ 0x44
 80246e4:	910e      	str	r1, [sp, #56]	@ 0x38
 80246e6:	6850      	ldr	r0, [r2, #4]
 80246e8:	9306      	str	r3, [sp, #24]
 80246ea:	6812      	ldr	r2, [r2, #0]
 80246ec:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80246f0:	fb00 1303 	mla	r3, r0, r3, r1
 80246f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80246f8:	9307      	str	r3, [sp, #28]
 80246fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80246fc:	681b      	ldr	r3, [r3, #0]
 80246fe:	9308      	str	r3, [sp, #32]
 8024700:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024702:	685b      	ldr	r3, [r3, #4]
 8024704:	9309      	str	r3, [sp, #36]	@ 0x24
 8024706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024708:	2b00      	cmp	r3, #0
 802470a:	dc03      	bgt.n	8024714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802470c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802470e:	2b00      	cmp	r3, #0
 8024710:	f340 83b6 	ble.w	8024e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8024714:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024716:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802471a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802471e:	1e48      	subs	r0, r1, #1
 8024720:	1e55      	subs	r5, r2, #1
 8024722:	9b06      	ldr	r3, [sp, #24]
 8024724:	2b00      	cmp	r3, #0
 8024726:	f340 8165 	ble.w	80249f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802472a:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802472c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802472e:	1436      	asrs	r6, r6, #16
 8024730:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024734:	d406      	bmi.n	8024744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024736:	4286      	cmp	r6, r0
 8024738:	da04      	bge.n	8024744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802473a:	2b00      	cmp	r3, #0
 802473c:	db02      	blt.n	8024744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802473e:	42ab      	cmp	r3, r5
 8024740:	f2c0 8159 	blt.w	80249f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024744:	3601      	adds	r6, #1
 8024746:	f100 8146 	bmi.w	80249d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802474a:	42b1      	cmp	r1, r6
 802474c:	f2c0 8143 	blt.w	80249d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024750:	3301      	adds	r3, #1
 8024752:	f100 8140 	bmi.w	80249d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024756:	429a      	cmp	r2, r3
 8024758:	f2c0 813d 	blt.w	80249d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802475c:	9b06      	ldr	r3, [sp, #24]
 802475e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024762:	9f07      	ldr	r7, [sp, #28]
 8024764:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024768:	2b00      	cmp	r3, #0
 802476a:	f340 8166 	ble.w	8024a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802476e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024770:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024772:	1418      	asrs	r0, r3, #16
 8024774:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024776:	142d      	asrs	r5, r5, #16
 8024778:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802477c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802477e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024782:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024784:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024788:	f100 81f0 	bmi.w	8024b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802478c:	f102 3eff 	add.w	lr, r2, #4294967295
 8024790:	4575      	cmp	r5, lr
 8024792:	f280 81eb 	bge.w	8024b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024796:	2800      	cmp	r0, #0
 8024798:	f2c0 81e8 	blt.w	8024b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802479c:	f103 3eff 	add.w	lr, r3, #4294967295
 80247a0:	4570      	cmp	r0, lr
 80247a2:	f280 81e3 	bge.w	8024b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80247a6:	b212      	sxth	r2, r2
 80247a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247aa:	fa1f fe81 	uxth.w	lr, r1
 80247ae:	fb00 5002 	mla	r0, r0, r2, r5
 80247b2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80247b6:	eb03 0a00 	add.w	sl, r3, r0
 80247ba:	f813 9000 	ldrb.w	r9, [r3, r0]
 80247be:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80247c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80247c6:	b29b      	uxth	r3, r3
 80247c8:	f1bc 0f00 	cmp.w	ip, #0
 80247cc:	f000 817b 	beq.w	8024ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80247d0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80247d4:	eb0a 0b02 	add.w	fp, sl, r2
 80247d8:	fa1f fa8c 	uxth.w	sl, ip
 80247dc:	940a      	str	r4, [sp, #40]	@ 0x28
 80247de:	fb0a fe0e 	mul.w	lr, sl, lr
 80247e2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80247e6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80247ea:	eba5 050e 	sub.w	r5, r5, lr
 80247ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80247f0:	fa1f fa8a 	uxth.w	sl, sl
 80247f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80247f6:	b2ad      	uxth	r5, r5
 80247f8:	eba3 030a 	sub.w	r3, r3, sl
 80247fc:	fb08 f505 	mul.w	r5, r8, r5
 8024800:	b29b      	uxth	r3, r3
 8024802:	fb09 5303 	mla	r3, r9, r3, r5
 8024806:	fb0a 3304 	mla	r3, sl, r4, r3
 802480a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802480c:	fb0e 3304 	mla	r3, lr, r4, r3
 8024810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024814:	2b00      	cmp	r3, #0
 8024816:	f000 80d1 	beq.w	80249bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802481a:	9c08      	ldr	r4, [sp, #32]
 802481c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024820:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024824:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024828:	f000 8152 	beq.w	8024ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802482c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8024830:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024834:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024838:	fb0a fe0e 	mul.w	lr, sl, lr
 802483c:	fb09 f000 	mul.w	r0, r9, r0
 8024840:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024844:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8024848:	f100 0b20 	add.w	fp, r0, #32
 802484c:	44ce      	add	lr, r9
 802484e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024852:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024856:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802485a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802485e:	ea4e 0909 	orr.w	r9, lr, r9
 8024862:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024866:	8868      	ldrh	r0, [r5, #2]
 8024868:	d019      	beq.n	802489e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802486a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802486e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024872:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024876:	fb0a fe0e 	mul.w	lr, sl, lr
 802487a:	fb08 f800 	mul.w	r8, r8, r0
 802487e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8024882:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8024886:	f108 0b20 	add.w	fp, r8, #32
 802488a:	4486      	add	lr, r0
 802488c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024890:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024894:	0a00      	lsrs	r0, r0, #8
 8024896:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802489a:	ea4e 0000 	orr.w	r0, lr, r0
 802489e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80248a2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80248a6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80248aa:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80248ae:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80248b2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80248b6:	ea4e 0909 	orr.w	r9, lr, r9
 80248ba:	ea4a 0000 	orr.w	r0, sl, r0
 80248be:	f1bc 0f00 	cmp.w	ip, #0
 80248c2:	f000 8107 	beq.w	8024ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80248c6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80248ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80248cc:	3a01      	subs	r2, #1
 80248ce:	2cff      	cmp	r4, #255	@ 0xff
 80248d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80248d4:	f102 0202 	add.w	r2, r2, #2
 80248d8:	eb05 0e02 	add.w	lr, r5, r2
 80248dc:	5aaa      	ldrh	r2, [r5, r2]
 80248de:	d018      	beq.n	8024912 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80248e0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80248e4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80248e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80248ec:	fb04 fa02 	mul.w	sl, r4, r2
 80248f0:	fb08 f805 	mul.w	r8, r8, r5
 80248f4:	f10a 0520 	add.w	r5, sl, #32
 80248f8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80248fc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024900:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024904:	4442      	add	r2, r8
 8024906:	0a2d      	lsrs	r5, r5, #8
 8024908:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802490c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024910:	432a      	orrs	r2, r5
 8024912:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024914:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024918:	2cff      	cmp	r4, #255	@ 0xff
 802491a:	d01a      	beq.n	8024952 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802491c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8024920:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024924:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024928:	fb04 fa05 	mul.w	sl, r4, r5
 802492c:	fb08 f80e 	mul.w	r8, r8, lr
 8024930:	f10a 0e20 	add.w	lr, sl, #32
 8024934:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024938:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802493c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024940:	4445      	add	r5, r8
 8024942:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024946:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802494a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802494e:	ea45 050e 	orr.w	r5, r5, lr
 8024952:	fb1c fe01 	smulbb	lr, ip, r1
 8024956:	f1cc 0810 	rsb	r8, ip, #16
 802495a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802495e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024962:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024966:	eba8 0801 	sub.w	r8, r8, r1
 802496a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802496e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024972:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024976:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802497a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802497e:	ea4a 0202 	orr.w	r2, sl, r2
 8024982:	4341      	muls	r1, r0
 8024984:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024988:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802498c:	fb09 1108 	mla	r1, r9, r8, r1
 8024990:	ea4b 0505 	orr.w	r5, fp, r5
 8024994:	fb0c 1102 	mla	r1, ip, r2, r1
 8024998:	fb0e 1e05 	mla	lr, lr, r5, r1
 802499c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80249a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80249a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80249a8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80249ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80249b0:	fa1f f28e 	uxth.w	r2, lr
 80249b4:	2bff      	cmp	r3, #255	@ 0xff
 80249b6:	f040 80a1 	bne.w	8024afc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80249ba:	803a      	strh	r2, [r7, #0]
 80249bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80249be:	3702      	adds	r7, #2
 80249c0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80249c2:	4413      	add	r3, r2
 80249c4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80249c6:	931d      	str	r3, [sp, #116]	@ 0x74
 80249c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80249ca:	441a      	add	r2, r3
 80249cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80249ce:	3b01      	subs	r3, #1
 80249d0:	921e      	str	r2, [sp, #120]	@ 0x78
 80249d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80249d4:	e6c7      	b.n	8024766 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80249d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80249d8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80249da:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80249dc:	4433      	add	r3, r6
 80249de:	931d      	str	r3, [sp, #116]	@ 0x74
 80249e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80249e2:	441c      	add	r4, r3
 80249e4:	9b06      	ldr	r3, [sp, #24]
 80249e6:	3b01      	subs	r3, #1
 80249e8:	941e      	str	r4, [sp, #120]	@ 0x78
 80249ea:	9306      	str	r3, [sp, #24]
 80249ec:	9b07      	ldr	r3, [sp, #28]
 80249ee:	3302      	adds	r3, #2
 80249f0:	9307      	str	r3, [sp, #28]
 80249f2:	e696      	b.n	8024722 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80249f4:	d028      	beq.n	8024a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80249f6:	9b06      	ldr	r3, [sp, #24]
 80249f8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80249fa:	3b01      	subs	r3, #1
 80249fc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80249fe:	fb00 5003 	mla	r0, r0, r3, r5
 8024a02:	1400      	asrs	r0, r0, #16
 8024a04:	f53f aeaa 	bmi.w	802475c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024a08:	3901      	subs	r1, #1
 8024a0a:	4288      	cmp	r0, r1
 8024a0c:	f6bf aea6 	bge.w	802475c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024a10:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024a12:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8024a14:	fb01 0303 	mla	r3, r1, r3, r0
 8024a18:	141b      	asrs	r3, r3, #16
 8024a1a:	f53f ae9f 	bmi.w	802475c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024a1e:	3a01      	subs	r2, #1
 8024a20:	4293      	cmp	r3, r2
 8024a22:	f6bf ae9b 	bge.w	802475c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024a26:	9b06      	ldr	r3, [sp, #24]
 8024a28:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024a2c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8024a30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	f300 80b6 	bgt.w	8024ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024a3a:	9b06      	ldr	r3, [sp, #24]
 8024a3c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024a40:	9b07      	ldr	r3, [sp, #28]
 8024a42:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024a46:	9307      	str	r3, [sp, #28]
 8024a48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a4a:	2b00      	cmp	r3, #0
 8024a4c:	f340 8218 	ble.w	8024e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8024a50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024a54:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024a56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024a5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024a5e:	eef0 6a62 	vmov.f32	s13, s5
 8024a62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a6e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8024a72:	eef0 6a43 	vmov.f32	s13, s6
 8024a76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a7a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8024a7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024a82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024a86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a96:	ee12 2a90 	vmov	r2, s5
 8024a9a:	eef0 2a47 	vmov.f32	s5, s14
 8024a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024aa2:	ee13 2a10 	vmov	r2, s6
 8024aa6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024aa8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024aaa:	eeb0 3a67 	vmov.f32	s6, s15
 8024aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ab2:	9320      	str	r3, [sp, #128]	@ 0x80
 8024ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ab6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024ab8:	3b01      	subs	r3, #1
 8024aba:	930e      	str	r3, [sp, #56]	@ 0x38
 8024abc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024abe:	bf08      	it	eq
 8024ac0:	4613      	moveq	r3, r2
 8024ac2:	9306      	str	r3, [sp, #24]
 8024ac4:	e61f      	b.n	8024706 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8024ac6:	fb08 f505 	mul.w	r5, r8, r5
 8024aca:	fb09 5303 	mla	r3, r9, r3, r5
 8024ace:	e69f      	b.n	8024810 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8024ad0:	4681      	mov	r9, r0
 8024ad2:	e6c6      	b.n	8024862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8024ad4:	f1c1 0210 	rsb	r2, r1, #16
 8024ad8:	4341      	muls	r1, r0
 8024ada:	fb09 1902 	mla	r9, r9, r2, r1
 8024ade:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024ae2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024ae6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024aea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024aee:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024af2:	ea42 0909 	orr.w	r9, r2, r9
 8024af6:	fa1f f289 	uxth.w	r2, r9
 8024afa:	e75b      	b.n	80249b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8024afc:	f8b7 c000 	ldrh.w	ip, [r7]
 8024b00:	43db      	mvns	r3, r3
 8024b02:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024b06:	fa5f fe83 	uxtb.w	lr, r3
 8024b0a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024b0e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8024b12:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8024b16:	fb00 f00e 	mul.w	r0, r0, lr
 8024b1a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8024b1e:	b2db      	uxtb	r3, r3
 8024b20:	1c41      	adds	r1, r0, #1
 8024b22:	fb05 f50e 	mul.w	r5, r5, lr
 8024b26:	fb03 f30e 	mul.w	r3, r3, lr
 8024b2a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024b2e:	1211      	asrs	r1, r2, #8
 8024b30:	f021 0107 	bic.w	r1, r1, #7
 8024b34:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024b38:	48d3      	ldr	r0, [pc, #844]	@ (8024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8024b3a:	b2c9      	uxtb	r1, r1
 8024b3c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8024b40:	1c69      	adds	r1, r5, #1
 8024b42:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8024b46:	10d1      	asrs	r1, r2, #3
 8024b48:	00d2      	lsls	r2, r2, #3
 8024b4a:	f021 0103 	bic.w	r1, r1, #3
 8024b4e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8024b52:	00c9      	lsls	r1, r1, #3
 8024b54:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024b58:	4301      	orrs	r1, r0
 8024b5a:	1c58      	adds	r0, r3, #1
 8024b5c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024b60:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024b64:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024b68:	430a      	orrs	r2, r1
 8024b6a:	e726      	b.n	80249ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8024b6c:	f115 0e01 	adds.w	lr, r5, #1
 8024b70:	f53f af24 	bmi.w	80249bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8024b74:	4572      	cmp	r2, lr
 8024b76:	f6ff af21 	blt.w	80249bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8024b7a:	f110 0e01 	adds.w	lr, r0, #1
 8024b7e:	f53f af1d 	bmi.w	80249bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8024b82:	4573      	cmp	r3, lr
 8024b84:	f6ff af1a 	blt.w	80249bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8024b88:	b21b      	sxth	r3, r3
 8024b8a:	b212      	sxth	r2, r2
 8024b8c:	9301      	str	r3, [sp, #4]
 8024b8e:	9200      	str	r2, [sp, #0]
 8024b90:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8024b94:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8024b98:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8024b9c:	4639      	mov	r1, r7
 8024b9e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024ba0:	f7ff fc22 	bl	80243e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8024ba4:	e70a      	b.n	80249bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8024ba6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ba8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024bac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024bae:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8024bb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024bb4:	fa1f fc82 	uxth.w	ip, r2
 8024bb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024bbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024bbe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8024bc2:	141f      	asrs	r7, r3, #16
 8024bc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024bc6:	141b      	asrs	r3, r3, #16
 8024bc8:	fb01 3707 	mla	r7, r1, r7, r3
 8024bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bce:	eb03 0a07 	add.w	sl, r3, r7
 8024bd2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8024bd6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8024bda:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024bde:	b29b      	uxth	r3, r3
 8024be0:	2d00      	cmp	r5, #0
 8024be2:	f000 80fe 	beq.w	8024de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8024be6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8024bea:	eb0a 0b01 	add.w	fp, sl, r1
 8024bee:	fa1f fa85 	uxth.w	sl, r5
 8024bf2:	940c      	str	r4, [sp, #48]	@ 0x30
 8024bf4:	fb0a fc0c 	mul.w	ip, sl, ip
 8024bf8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024bfc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024c00:	eba0 000c 	sub.w	r0, r0, ip
 8024c04:	940d      	str	r4, [sp, #52]	@ 0x34
 8024c06:	fa1f fa8a 	uxth.w	sl, sl
 8024c0a:	b280      	uxth	r0, r0
 8024c0c:	eba3 030a 	sub.w	r3, r3, sl
 8024c10:	fb08 f000 	mul.w	r0, r8, r0
 8024c14:	b29b      	uxth	r3, r3
 8024c16:	fb09 0303 	mla	r3, r9, r3, r0
 8024c1a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024c1c:	fb0a 3300 	mla	r3, sl, r0, r3
 8024c20:	fb0c 3304 	mla	r3, ip, r4, r3
 8024c24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	f000 80cc 	beq.w	8024dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8024c2e:	9808      	ldr	r0, [sp, #32]
 8024c30:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024c34:	9c08      	ldr	r4, [sp, #32]
 8024c36:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024c3a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024c3e:	f000 80d5 	beq.w	8024dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8024c42:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024c46:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024c4a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024c4e:	fb0a fc0c 	mul.w	ip, sl, ip
 8024c52:	fb09 f707 	mul.w	r7, r9, r7
 8024c56:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8024c5a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8024c5e:	f107 0b20 	add.w	fp, r7, #32
 8024c62:	44cc      	add	ip, r9
 8024c64:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8024c68:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024c6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024c70:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8024c74:	ea4c 0909 	orr.w	r9, ip, r9
 8024c78:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024c7c:	8847      	ldrh	r7, [r0, #2]
 8024c7e:	d019      	beq.n	8024cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8024c80:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024c84:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024c88:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024c8c:	fb0a fc0c 	mul.w	ip, sl, ip
 8024c90:	fb08 f807 	mul.w	r8, r8, r7
 8024c94:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8024c98:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8024c9c:	f108 0b20 	add.w	fp, r8, #32
 8024ca0:	44bc      	add	ip, r7
 8024ca2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8024ca6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024caa:	0a3f      	lsrs	r7, r7, #8
 8024cac:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024cb0:	ea4c 0707 	orr.w	r7, ip, r7
 8024cb4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024cb8:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024cbc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024cc0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8024cc4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024cc8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024ccc:	ea4c 0909 	orr.w	r9, ip, r9
 8024cd0:	ea4a 0707 	orr.w	r7, sl, r7
 8024cd4:	2d00      	cmp	r5, #0
 8024cd6:	f000 808b 	beq.w	8024df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8024cda:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8024cde:	3901      	subs	r1, #1
 8024ce0:	0049      	lsls	r1, r1, #1
 8024ce2:	3102      	adds	r1, #2
 8024ce4:	eb00 0c01 	add.w	ip, r0, r1
 8024ce8:	5a41      	ldrh	r1, [r0, r1]
 8024cea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024cec:	28ff      	cmp	r0, #255	@ 0xff
 8024cee:	d019      	beq.n	8024d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8024cf0:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8024cf4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024cf6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024cfa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024cfe:	fb04 fa01 	mul.w	sl, r4, r1
 8024d02:	fb08 f800 	mul.w	r8, r8, r0
 8024d06:	f10a 0020 	add.w	r0, sl, #32
 8024d0a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024d0e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024d12:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024d16:	4441      	add	r1, r8
 8024d18:	0a00      	lsrs	r0, r0, #8
 8024d1a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024d1e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024d22:	4301      	orrs	r1, r0
 8024d24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024d26:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024d2a:	2cff      	cmp	r4, #255	@ 0xff
 8024d2c:	d01a      	beq.n	8024d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8024d2e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8024d32:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024d36:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024d3a:	fb04 fa00 	mul.w	sl, r4, r0
 8024d3e:	fb08 f80c 	mul.w	r8, r8, ip
 8024d42:	f10a 0c20 	add.w	ip, sl, #32
 8024d46:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024d4a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024d4e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024d52:	4440      	add	r0, r8
 8024d54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d58:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024d5c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8024d60:	ea40 000c 	orr.w	r0, r0, ip
 8024d64:	fb15 fc02 	smulbb	ip, r5, r2
 8024d68:	f1c5 0810 	rsb	r8, r5, #16
 8024d6c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024d70:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024d74:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024d78:	eba8 0802 	sub.w	r8, r8, r2
 8024d7c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024d80:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024d84:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024d88:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024d8c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024d90:	ea4a 0101 	orr.w	r1, sl, r1
 8024d94:	437a      	muls	r2, r7
 8024d96:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024d9a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024d9e:	fb09 2208 	mla	r2, r9, r8, r2
 8024da2:	ea4b 0000 	orr.w	r0, fp, r0
 8024da6:	fb05 2201 	mla	r2, r5, r1, r2
 8024daa:	fb0c 2200 	mla	r2, ip, r0, r2
 8024dae:	0d57      	lsrs	r7, r2, #21
 8024db0:	0952      	lsrs	r2, r2, #5
 8024db2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024db6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024dba:	433a      	orrs	r2, r7
 8024dbc:	2bff      	cmp	r3, #255	@ 0xff
 8024dbe:	b292      	uxth	r2, r2
 8024dc0:	d127      	bne.n	8024e12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8024dc2:	f8ae 2000 	strh.w	r2, [lr]
 8024dc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024dc8:	f10e 0e02 	add.w	lr, lr, #2
 8024dcc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8024dce:	4413      	add	r3, r2
 8024dd0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024dd2:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024dd6:	441a      	add	r2, r3
 8024dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024dda:	3b01      	subs	r3, #1
 8024ddc:	921e      	str	r2, [sp, #120]	@ 0x78
 8024dde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024de0:	e627      	b.n	8024a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024de2:	fb08 f000 	mul.w	r0, r8, r0
 8024de6:	fb09 0303 	mla	r3, r9, r3, r0
 8024dea:	e71b      	b.n	8024c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8024dec:	46b9      	mov	r9, r7
 8024dee:	e743      	b.n	8024c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8024df0:	f1c2 0110 	rsb	r1, r2, #16
 8024df4:	437a      	muls	r2, r7
 8024df6:	fb09 2901 	mla	r9, r9, r1, r2
 8024dfa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024dfe:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024e02:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024e06:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024e0a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024e0e:	4302      	orrs	r2, r0
 8024e10:	e7d4      	b.n	8024dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8024e12:	f8be 7000 	ldrh.w	r7, [lr]
 8024e16:	43db      	mvns	r3, r3
 8024e18:	4c1b      	ldr	r4, [pc, #108]	@ (8024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8024e1a:	1238      	asrs	r0, r7, #8
 8024e1c:	fa5f fc83 	uxtb.w	ip, r3
 8024e20:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024e24:	10fd      	asrs	r5, r7, #3
 8024e26:	00fb      	lsls	r3, r7, #3
 8024e28:	fb00 f00c 	mul.w	r0, r0, ip
 8024e2c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8024e30:	b2db      	uxtb	r3, r3
 8024e32:	fb05 f10c 	mul.w	r1, r5, ip
 8024e36:	1c45      	adds	r5, r0, #1
 8024e38:	fb03 f30c 	mul.w	r3, r3, ip
 8024e3c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024e40:	1215      	asrs	r5, r2, #8
 8024e42:	f025 0507 	bic.w	r5, r5, #7
 8024e46:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024e4a:	1c4d      	adds	r5, r1, #1
 8024e4c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8024e50:	10d1      	asrs	r1, r2, #3
 8024e52:	b2c0      	uxtb	r0, r0
 8024e54:	f021 0103 	bic.w	r1, r1, #3
 8024e58:	00d2      	lsls	r2, r2, #3
 8024e5a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8024e5e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8024e62:	00c9      	lsls	r1, r1, #3
 8024e64:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024e68:	4308      	orrs	r0, r1
 8024e6a:	1c59      	adds	r1, r3, #1
 8024e6c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024e70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e74:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8024e78:	4318      	orrs	r0, r3
 8024e7a:	f8ae 0000 	strh.w	r0, [lr]
 8024e7e:	e7a2      	b.n	8024dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8024e80:	b013      	add	sp, #76	@ 0x4c
 8024e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e86:	bf00      	nop
 8024e88:	fffff800 	.word	0xfffff800

08024e8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8024e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e90:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8024e94:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8024e98:	fb05 4c03 	mla	ip, r5, r3, r4
 8024e9c:	2d00      	cmp	r5, #0
 8024e9e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8024ea2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8024ea6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8024eaa:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8024eae:	8808      	ldrh	r0, [r1, #0]
 8024eb0:	f2c0 80a7 	blt.w	8025002 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8024eb4:	45aa      	cmp	sl, r5
 8024eb6:	f340 80a4 	ble.w	8025002 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8024eba:	2c00      	cmp	r4, #0
 8024ebc:	f2c0 809f 	blt.w	8024ffe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8024ec0:	42a3      	cmp	r3, r4
 8024ec2:	f340 809c 	ble.w	8024ffe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8024ec6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8024eca:	1c62      	adds	r2, r4, #1
 8024ecc:	f100 809c 	bmi.w	8025008 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8024ed0:	4293      	cmp	r3, r2
 8024ed2:	f340 8099 	ble.w	8025008 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8024ed6:	f1b9 0f00 	cmp.w	r9, #0
 8024eda:	f000 8095 	beq.w	8025008 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8024ede:	f8be c002 	ldrh.w	ip, [lr, #2]
 8024ee2:	3501      	adds	r5, #1
 8024ee4:	f100 8094 	bmi.w	8025010 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8024ee8:	45aa      	cmp	sl, r5
 8024eea:	f340 8091 	ble.w	8025010 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8024eee:	2f00      	cmp	r7, #0
 8024ef0:	f000 808e 	beq.w	8025010 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8024ef4:	2c00      	cmp	r4, #0
 8024ef6:	f2c0 8089 	blt.w	802500c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8024efa:	42a3      	cmp	r3, r4
 8024efc:	f340 8086 	ble.w	802500c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8024f00:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8024f04:	3401      	adds	r4, #1
 8024f06:	f100 8086 	bmi.w	8025016 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8024f0a:	42a3      	cmp	r3, r4
 8024f0c:	f340 8083 	ble.w	8025016 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8024f10:	f1b9 0f00 	cmp.w	r9, #0
 8024f14:	d07f      	beq.n	8025016 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8024f16:	3301      	adds	r3, #1
 8024f18:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8024f1c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8024f20:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8024f24:	fb19 fe07 	smulbb	lr, r9, r7
 8024f28:	f1c7 0210 	rsb	r2, r7, #16
 8024f2c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024f30:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8024f34:	eba2 0209 	sub.w	r2, r2, r9
 8024f38:	ea44 0808 	orr.w	r8, r4, r8
 8024f3c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8024f40:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024f44:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8024f48:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024f4c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8024f50:	ea44 0c0c 	orr.w	ip, r4, ip
 8024f54:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8024f58:	fb04 f40c 	mul.w	r4, r4, ip
 8024f5c:	fb02 4808 	mla	r8, r2, r8, r4
 8024f60:	041a      	lsls	r2, r3, #16
 8024f62:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024f66:	b2b4      	uxth	r4, r6
 8024f68:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8024f6c:	43f6      	mvns	r6, r6
 8024f6e:	4313      	orrs	r3, r2
 8024f70:	042a      	lsls	r2, r5, #16
 8024f72:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024f76:	b2f6      	uxtb	r6, r6
 8024f78:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8024f7c:	fb0e 8303 	mla	r3, lr, r3, r8
 8024f80:	432a      	orrs	r2, r5
 8024f82:	fb07 3202 	mla	r2, r7, r2, r3
 8024f86:	10c7      	asrs	r7, r0, #3
 8024f88:	0d53      	lsrs	r3, r2, #21
 8024f8a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024f8e:	0952      	lsrs	r2, r2, #5
 8024f90:	fb17 f706 	smulbb	r7, r7, r6
 8024f94:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024f98:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024f9c:	431a      	orrs	r2, r3
 8024f9e:	b293      	uxth	r3, r2
 8024fa0:	1202      	asrs	r2, r0, #8
 8024fa2:	121d      	asrs	r5, r3, #8
 8024fa4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8024fa8:	00c0      	lsls	r0, r0, #3
 8024faa:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024fae:	fb12 f206 	smulbb	r2, r2, r6
 8024fb2:	b2c0      	uxtb	r0, r0
 8024fb4:	fb05 2504 	mla	r5, r5, r4, r2
 8024fb8:	10da      	asrs	r2, r3, #3
 8024fba:	fb10 f006 	smulbb	r0, r0, r6
 8024fbe:	00db      	lsls	r3, r3, #3
 8024fc0:	b2ad      	uxth	r5, r5
 8024fc2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8024fc6:	b2db      	uxtb	r3, r3
 8024fc8:	fb02 7204 	mla	r2, r2, r4, r7
 8024fcc:	fb03 0004 	mla	r0, r3, r4, r0
 8024fd0:	1c6b      	adds	r3, r5, #1
 8024fd2:	b292      	uxth	r2, r2
 8024fd4:	b280      	uxth	r0, r0
 8024fd6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024fda:	1c43      	adds	r3, r0, #1
 8024fdc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024fe0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024fe4:	1c50      	adds	r0, r2, #1
 8024fe6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024fea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024fee:	0952      	lsrs	r2, r2, #5
 8024ff0:	432b      	orrs	r3, r5
 8024ff2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024ff6:	4313      	orrs	r3, r2
 8024ff8:	800b      	strh	r3, [r1, #0]
 8024ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ffe:	4680      	mov	r8, r0
 8025000:	e763      	b.n	8024eca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8025002:	4684      	mov	ip, r0
 8025004:	4680      	mov	r8, r0
 8025006:	e76c      	b.n	8024ee2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025008:	4684      	mov	ip, r0
 802500a:	e76a      	b.n	8024ee2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802500c:	4605      	mov	r5, r0
 802500e:	e779      	b.n	8024f04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8025010:	4603      	mov	r3, r0
 8025012:	4605      	mov	r5, r0
 8025014:	e782      	b.n	8024f1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8025016:	4603      	mov	r3, r0
 8025018:	e780      	b.n	8024f1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802501a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802501a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802501e:	b093      	sub	sp, #76	@ 0x4c
 8025020:	461d      	mov	r5, r3
 8025022:	9210      	str	r2, [sp, #64]	@ 0x40
 8025024:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025026:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 802502a:	910a      	str	r1, [sp, #40]	@ 0x28
 802502c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802502e:	6859      	ldr	r1, [r3, #4]
 8025030:	681b      	ldr	r3, [r3, #0]
 8025032:	9011      	str	r0, [sp, #68]	@ 0x44
 8025034:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8025038:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802503c:	fb01 2707 	mla	r7, r1, r7, r2
 8025040:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8025044:	9307      	str	r3, [sp, #28]
 8025046:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025048:	681b      	ldr	r3, [r3, #0]
 802504a:	9309      	str	r3, [sp, #36]	@ 0x24
 802504c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802504e:	43db      	mvns	r3, r3
 8025050:	b2db      	uxtb	r3, r3
 8025052:	9308      	str	r3, [sp, #32]
 8025054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025056:	2b00      	cmp	r3, #0
 8025058:	dc03      	bgt.n	8025062 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802505a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802505c:	2b00      	cmp	r3, #0
 802505e:	f340 8205 	ble.w	802546c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025062:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025064:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025068:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802506c:	1e48      	subs	r0, r1, #1
 802506e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025072:	2d00      	cmp	r5, #0
 8025074:	f340 80da 	ble.w	802522c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025078:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802507c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025080:	d406      	bmi.n	8025090 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025082:	4586      	cmp	lr, r0
 8025084:	da04      	bge.n	8025090 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025086:	2b00      	cmp	r3, #0
 8025088:	db02      	blt.n	8025090 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802508a:	4563      	cmp	r3, ip
 802508c:	f2c0 80cf 	blt.w	802522e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025090:	f11e 0e01 	adds.w	lr, lr, #1
 8025094:	f100 80c1 	bmi.w	802521a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025098:	4571      	cmp	r1, lr
 802509a:	f2c0 80be 	blt.w	802521a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802509e:	3301      	adds	r3, #1
 80250a0:	f100 80bb 	bmi.w	802521a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80250a4:	429a      	cmp	r2, r3
 80250a6:	f2c0 80b8 	blt.w	802521a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80250aa:	46a9      	mov	r9, r5
 80250ac:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80250b0:	f1b9 0f00 	cmp.w	r9, #0
 80250b4:	f340 80d8 	ble.w	8025268 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80250b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80250ba:	1421      	asrs	r1, r4, #16
 80250bc:	ea4f 4026 	mov.w	r0, r6, asr #16
 80250c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80250c4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80250c8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80250cc:	f100 8112 	bmi.w	80252f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80250d0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80250d4:	4551      	cmp	r1, sl
 80250d6:	f280 810d 	bge.w	80252f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80250da:	2800      	cmp	r0, #0
 80250dc:	f2c0 810a 	blt.w	80252f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80250e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80250e4:	4550      	cmp	r0, sl
 80250e6:	f280 8105 	bge.w	80252f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80250ea:	fa0f f38e 	sxth.w	r3, lr
 80250ee:	fb00 1103 	mla	r1, r0, r3, r1
 80250f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80250f4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80250f8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80250fc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8025100:	f1bc 0f00 	cmp.w	ip, #0
 8025104:	d007      	beq.n	8025116 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8025106:	005b      	lsls	r3, r3, #1
 8025108:	eb0a 0003 	add.w	r0, sl, r3
 802510c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8025110:	930c      	str	r3, [sp, #48]	@ 0x30
 8025112:	8843      	ldrh	r3, [r0, #2]
 8025114:	930d      	str	r3, [sp, #52]	@ 0x34
 8025116:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802511a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802511e:	fb12 f30c 	smulbb	r3, r2, ip
 8025122:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025126:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802512a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802512e:	10db      	asrs	r3, r3, #3
 8025130:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025134:	ea40 000e 	orr.w	r0, r0, lr
 8025138:	f1cc 0e10 	rsb	lr, ip, #16
 802513c:	ea4a 0101 	orr.w	r1, sl, r1
 8025140:	9f08      	ldr	r7, [sp, #32]
 8025142:	ebae 0e02 	sub.w	lr, lr, r2
 8025146:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802514a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802514e:	4351      	muls	r1, r2
 8025150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025152:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025156:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025158:	0410      	lsls	r0, r2, #16
 802515a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802515e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025162:	4310      	orrs	r0, r2
 8025164:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025166:	0412      	lsls	r2, r2, #16
 8025168:	fb03 e000 	mla	r0, r3, r0, lr
 802516c:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8025170:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025174:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025178:	ea42 020e 	orr.w	r2, r2, lr
 802517c:	fb03 0302 	mla	r3, r3, r2, r0
 8025180:	f8b8 0000 	ldrh.w	r0, [r8]
 8025184:	0d5a      	lsrs	r2, r3, #21
 8025186:	095b      	lsrs	r3, r3, #5
 8025188:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802518c:	1201      	asrs	r1, r0, #8
 802518e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025192:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8025196:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802519a:	00c0      	lsls	r0, r0, #3
 802519c:	4313      	orrs	r3, r2
 802519e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80251a2:	fb11 f107 	smulbb	r1, r1, r7
 80251a6:	b2c0      	uxtb	r0, r0
 80251a8:	b29b      	uxth	r3, r3
 80251aa:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80251ae:	fb10 f007 	smulbb	r0, r0, r7
 80251b2:	fb1e fe07 	smulbb	lr, lr, r7
 80251b6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80251ba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80251be:	fb0c 1c02 	mla	ip, ip, r2, r1
 80251c2:	10d9      	asrs	r1, r3, #3
 80251c4:	00db      	lsls	r3, r3, #3
 80251c6:	fa1f fc8c 	uxth.w	ip, ip
 80251ca:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80251ce:	b2db      	uxtb	r3, r3
 80251d0:	fb01 e102 	mla	r1, r1, r2, lr
 80251d4:	fb03 0302 	mla	r3, r3, r2, r0
 80251d8:	b289      	uxth	r1, r1
 80251da:	b29a      	uxth	r2, r3
 80251dc:	f10c 0301 	add.w	r3, ip, #1
 80251e0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80251e4:	1c53      	adds	r3, r2, #1
 80251e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80251ea:	1c4a      	adds	r2, r1, #1
 80251ec:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80251f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80251f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80251f8:	0949      	lsrs	r1, r1, #5
 80251fa:	ea43 030c 	orr.w	r3, r3, ip
 80251fe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025202:	430b      	orrs	r3, r1
 8025204:	f8a8 3000 	strh.w	r3, [r8]
 8025208:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802520a:	f108 0802 	add.w	r8, r8, #2
 802520e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025212:	441c      	add	r4, r3
 8025214:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025216:	441e      	add	r6, r3
 8025218:	e74a      	b.n	80250b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802521a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802521c:	3d01      	subs	r5, #1
 802521e:	441c      	add	r4, r3
 8025220:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025222:	441e      	add	r6, r3
 8025224:	9b07      	ldr	r3, [sp, #28]
 8025226:	3302      	adds	r3, #2
 8025228:	9307      	str	r3, [sp, #28]
 802522a:	e722      	b.n	8025072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802522c:	d022      	beq.n	8025274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802522e:	1e6b      	subs	r3, r5, #1
 8025230:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025232:	fb00 4003 	mla	r0, r0, r3, r4
 8025236:	1400      	asrs	r0, r0, #16
 8025238:	f53f af37 	bmi.w	80250aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802523c:	3901      	subs	r1, #1
 802523e:	4288      	cmp	r0, r1
 8025240:	f6bf af33 	bge.w	80250aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025244:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025246:	fb01 6303 	mla	r3, r1, r3, r6
 802524a:	141b      	asrs	r3, r3, #16
 802524c:	f53f af2d 	bmi.w	80250aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025250:	3a01      	subs	r2, #1
 8025252:	4293      	cmp	r3, r2
 8025254:	f6bf af29 	bge.w	80250aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025258:	46a8      	mov	r8, r5
 802525a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802525e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8025262:	f1b8 0f00 	cmp.w	r8, #0
 8025266:	dc60      	bgt.n	802532a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8025268:	9b07      	ldr	r3, [sp, #28]
 802526a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802526e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025272:	9307      	str	r3, [sp, #28]
 8025274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025276:	2b00      	cmp	r3, #0
 8025278:	f340 80f8 	ble.w	802546c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802527c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025280:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025282:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025286:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802528a:	eef0 6a62 	vmov.f32	s13, s5
 802528e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025292:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802529a:	ee16 4a90 	vmov	r4, s13
 802529e:	eef0 6a43 	vmov.f32	s13, s6
 80252a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252a6:	ee16 6a90 	vmov	r6, s13
 80252aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80252b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80252ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80252be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80252c2:	ee12 2a90 	vmov	r2, s5
 80252c6:	eef0 2a47 	vmov.f32	s5, s14
 80252ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80252ce:	ee13 2a10 	vmov	r2, s6
 80252d2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80252d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80252d6:	eeb0 3a67 	vmov.f32	s6, s15
 80252da:	fb92 f3f3 	sdiv	r3, r2, r3
 80252de:	9320      	str	r3, [sp, #128]	@ 0x80
 80252e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80252e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80252e4:	3b01      	subs	r3, #1
 80252e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80252e8:	bf08      	it	eq
 80252ea:	4615      	moveq	r5, r2
 80252ec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80252ee:	bf18      	it	ne
 80252f0:	461d      	movne	r5, r3
 80252f2:	e6af      	b.n	8025054 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80252f4:	f111 0a01 	adds.w	sl, r1, #1
 80252f8:	d486      	bmi.n	8025208 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80252fa:	45d6      	cmp	lr, sl
 80252fc:	db84      	blt.n	8025208 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80252fe:	f110 0a01 	adds.w	sl, r0, #1
 8025302:	d481      	bmi.n	8025208 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025304:	4553      	cmp	r3, sl
 8025306:	f6ff af7f 	blt.w	8025208 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802530a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802530c:	b21b      	sxth	r3, r3
 802530e:	9101      	str	r1, [sp, #4]
 8025310:	4641      	mov	r1, r8
 8025312:	9300      	str	r3, [sp, #0]
 8025314:	fa0f f38e 	sxth.w	r3, lr
 8025318:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802531c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025322:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025324:	f7ff fdb2 	bl	8024e8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025328:	e76e      	b.n	8025208 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802532a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802532c:	1430      	asrs	r0, r6, #16
 802532e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025330:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025334:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025338:	1423      	asrs	r3, r4, #16
 802533a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802533e:	fb01 3000 	mla	r0, r1, r0, r3
 8025342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025344:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025348:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802534c:	8858      	ldrh	r0, [r3, #2]
 802534e:	f1be 0f00 	cmp.w	lr, #0
 8025352:	d00b      	beq.n	802536c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025354:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025358:	3901      	subs	r1, #1
 802535a:	0049      	lsls	r1, r1, #1
 802535c:	3102      	adds	r1, #2
 802535e:	eb03 0b01 	add.w	fp, r3, r1
 8025362:	5a5b      	ldrh	r3, [r3, r1]
 8025364:	930e      	str	r3, [sp, #56]	@ 0x38
 8025366:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802536a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802536c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025370:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025374:	fb12 f30e 	smulbb	r3, r2, lr
 8025378:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802537c:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8025380:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025384:	10db      	asrs	r3, r3, #3
 8025386:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802538a:	ea41 010c 	orr.w	r1, r1, ip
 802538e:	f1ce 0c10 	rsb	ip, lr, #16
 8025392:	ea4b 0000 	orr.w	r0, fp, r0
 8025396:	9f08      	ldr	r7, [sp, #32]
 8025398:	ebac 0c02 	sub.w	ip, ip, r2
 802539c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80253a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80253a4:	4350      	muls	r0, r2
 80253a6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80253aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80253ac:	fb0c 0c01 	mla	ip, ip, r1, r0
 80253b0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80253b2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80253b6:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80253ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253bc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80253c0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80253c4:	0412      	lsls	r2, r2, #16
 80253c6:	ea4b 0101 	orr.w	r1, fp, r1
 80253ca:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80253ce:	fb03 c101 	mla	r1, r3, r1, ip
 80253d2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80253d6:	4302      	orrs	r2, r0
 80253d8:	fb03 1202 	mla	r2, r3, r2, r1
 80253dc:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80253e0:	0952      	lsrs	r2, r2, #5
 80253e2:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80253e6:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80253ea:	f8b9 2000 	ldrh.w	r2, [r9]
 80253ee:	ea4b 0303 	orr.w	r3, fp, r3
 80253f2:	1211      	asrs	r1, r2, #8
 80253f4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80253f8:	b29b      	uxth	r3, r3
 80253fa:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80253fe:	00d2      	lsls	r2, r2, #3
 8025400:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8025404:	fb11 f107 	smulbb	r1, r1, r7
 8025408:	1218      	asrs	r0, r3, #8
 802540a:	fb1c fc07 	smulbb	ip, ip, r7
 802540e:	b2d2      	uxtb	r2, r2
 8025410:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025414:	fb12 f207 	smulbb	r2, r2, r7
 8025418:	fb00 100a 	mla	r0, r0, sl, r1
 802541c:	10d9      	asrs	r1, r3, #3
 802541e:	00db      	lsls	r3, r3, #3
 8025420:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025424:	b280      	uxth	r0, r0
 8025426:	b2db      	uxtb	r3, r3
 8025428:	fb01 c10a 	mla	r1, r1, sl, ip
 802542c:	fb03 230a 	mla	r3, r3, sl, r2
 8025430:	1c42      	adds	r2, r0, #1
 8025432:	b289      	uxth	r1, r1
 8025434:	b29b      	uxth	r3, r3
 8025436:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802543a:	f101 0c01 	add.w	ip, r1, #1
 802543e:	1c5a      	adds	r2, r3, #1
 8025440:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025444:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8025448:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802544c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802544e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025452:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025456:	441c      	add	r4, r3
 8025458:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802545c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802545e:	4310      	orrs	r0, r2
 8025460:	441e      	add	r6, r3
 8025462:	ea40 000c 	orr.w	r0, r0, ip
 8025466:	f829 0b02 	strh.w	r0, [r9], #2
 802546a:	e6fa      	b.n	8025262 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802546c:	b013      	add	sp, #76	@ 0x4c
 802546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8025472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025476:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802547a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802547e:	fb0e 4703 	mla	r7, lr, r3, r4
 8025482:	f1be 0f00 	cmp.w	lr, #0
 8025486:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 802548a:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802548e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8025492:	8808      	ldrh	r0, [r1, #0]
 8025494:	db60      	blt.n	8025558 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025496:	45f1      	cmp	r9, lr
 8025498:	dd5e      	ble.n	8025558 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802549a:	2c00      	cmp	r4, #0
 802549c:	db5a      	blt.n	8025554 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802549e:	42a3      	cmp	r3, r4
 80254a0:	dd58      	ble.n	8025554 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80254a2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80254a6:	1c62      	adds	r2, r4, #1
 80254a8:	d459      	bmi.n	802555e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80254aa:	4293      	cmp	r3, r2
 80254ac:	dd57      	ble.n	802555e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80254ae:	2d00      	cmp	r5, #0
 80254b0:	d055      	beq.n	802555e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80254b2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80254b6:	f11e 0e01 	adds.w	lr, lr, #1
 80254ba:	d454      	bmi.n	8025566 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80254bc:	45f1      	cmp	r9, lr
 80254be:	dd52      	ble.n	8025566 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80254c0:	2e00      	cmp	r6, #0
 80254c2:	d050      	beq.n	8025566 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80254c4:	2c00      	cmp	r4, #0
 80254c6:	db4c      	blt.n	8025562 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80254c8:	42a3      	cmp	r3, r4
 80254ca:	dd4a      	ble.n	8025562 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80254cc:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80254d0:	3401      	adds	r4, #1
 80254d2:	d405      	bmi.n	80254e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80254d4:	42a3      	cmp	r3, r4
 80254d6:	dd03      	ble.n	80254e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80254d8:	b115      	cbz	r5, 80254e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80254da:	3301      	adds	r3, #1
 80254dc:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80254e0:	fb15 f406 	smulbb	r4, r5, r6
 80254e4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80254e8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80254ec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80254f0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80254f4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80254f8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80254fc:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8025500:	ea43 0c0c 	orr.w	ip, r3, ip
 8025504:	f1c6 0310 	rsb	r3, r6, #16
 8025508:	ea4e 0707 	orr.w	r7, lr, r7
 802550c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8025510:	1b5b      	subs	r3, r3, r5
 8025512:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8025516:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802551a:	437d      	muls	r5, r7
 802551c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8025520:	0403      	lsls	r3, r0, #16
 8025522:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025526:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802552a:	4318      	orrs	r0, r3
 802552c:	0413      	lsls	r3, r2, #16
 802552e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025532:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025536:	fb04 c000 	mla	r0, r4, r0, ip
 802553a:	4313      	orrs	r3, r2
 802553c:	fb06 0003 	mla	r0, r6, r3, r0
 8025540:	0d43      	lsrs	r3, r0, #21
 8025542:	0940      	lsrs	r0, r0, #5
 8025544:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025548:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802554c:	4318      	orrs	r0, r3
 802554e:	8008      	strh	r0, [r1, #0]
 8025550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025554:	4684      	mov	ip, r0
 8025556:	e7a6      	b.n	80254a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8025558:	4607      	mov	r7, r0
 802555a:	4684      	mov	ip, r0
 802555c:	e7ab      	b.n	80254b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802555e:	4607      	mov	r7, r0
 8025560:	e7a9      	b.n	80254b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8025562:	4602      	mov	r2, r0
 8025564:	e7b4      	b.n	80254d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8025566:	4602      	mov	r2, r0
 8025568:	e7ba      	b.n	80254e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802556a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802556a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802556e:	b08f      	sub	sp, #60	@ 0x3c
 8025570:	461d      	mov	r5, r3
 8025572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025574:	9107      	str	r1, [sp, #28]
 8025576:	920c      	str	r2, [sp, #48]	@ 0x30
 8025578:	6859      	ldr	r1, [r3, #4]
 802557a:	681b      	ldr	r3, [r3, #0]
 802557c:	900d      	str	r0, [sp, #52]	@ 0x34
 802557e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8025582:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8025586:	fb01 2707 	mla	r7, r1, r7, r2
 802558a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802558e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025590:	f8d3 8000 	ldr.w	r8, [r3]
 8025594:	9b07      	ldr	r3, [sp, #28]
 8025596:	2b00      	cmp	r3, #0
 8025598:	dc03      	bgt.n	80255a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802559a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802559c:	2b00      	cmp	r3, #0
 802559e:	f340 8182 	ble.w	80258a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80255a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80255a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80255a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80255ac:	1e48      	subs	r0, r1, #1
 80255ae:	f102 3cff 	add.w	ip, r2, #4294967295
 80255b2:	2d00      	cmp	r5, #0
 80255b4:	f340 809b 	ble.w	80256ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80255b8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80255bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80255c0:	d406      	bmi.n	80255d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80255c2:	4586      	cmp	lr, r0
 80255c4:	da04      	bge.n	80255d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	db02      	blt.n	80255d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80255ca:	4563      	cmp	r3, ip
 80255cc:	f2c0 8090 	blt.w	80256f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80255d0:	f11e 0e01 	adds.w	lr, lr, #1
 80255d4:	f100 8084 	bmi.w	80256e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80255d8:	4571      	cmp	r1, lr
 80255da:	f2c0 8081 	blt.w	80256e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80255de:	3301      	adds	r3, #1
 80255e0:	d47e      	bmi.n	80256e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80255e2:	429a      	cmp	r2, r3
 80255e4:	db7c      	blt.n	80256e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80255e6:	46aa      	mov	sl, r5
 80255e8:	46b9      	mov	r9, r7
 80255ea:	f1ba 0f00 	cmp.w	sl, #0
 80255ee:	f340 8099 	ble.w	8025724 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80255f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80255f4:	1421      	asrs	r1, r4, #16
 80255f6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80255fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80255fe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025602:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025606:	f100 80d1 	bmi.w	80257ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802560a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802560e:	4559      	cmp	r1, fp
 8025610:	f280 80cc 	bge.w	80257ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025614:	2800      	cmp	r0, #0
 8025616:	f2c0 80c9 	blt.w	80257ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802561a:	f103 3bff 	add.w	fp, r3, #4294967295
 802561e:	4558      	cmp	r0, fp
 8025620:	f280 80c4 	bge.w	80257ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025624:	fa0f fe8e 	sxth.w	lr, lr
 8025628:	fb00 110e 	mla	r1, r0, lr, r1
 802562c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025630:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025634:	8841      	ldrh	r1, [r0, #2]
 8025636:	f1bc 0f00 	cmp.w	ip, #0
 802563a:	d00b      	beq.n	8025654 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802563c:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8025640:	3b01      	subs	r3, #1
 8025642:	005b      	lsls	r3, r3, #1
 8025644:	3302      	adds	r3, #2
 8025646:	eb00 0e03 	add.w	lr, r0, r3
 802564a:	5ac3      	ldrh	r3, [r0, r3]
 802564c:	9308      	str	r3, [sp, #32]
 802564e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025652:	9309      	str	r3, [sp, #36]	@ 0x24
 8025654:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025658:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802565c:	fb12 f30c 	smulbb	r3, r2, ip
 8025660:	f1cc 0e10 	rsb	lr, ip, #16
 8025664:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025668:	10db      	asrs	r3, r3, #3
 802566a:	ebae 0e02 	sub.w	lr, lr, r2
 802566e:	ea40 000b 	orr.w	r0, r0, fp
 8025672:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025676:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802567a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802567e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025682:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025686:	ea4b 0101 	orr.w	r1, fp, r1
 802568a:	4351      	muls	r1, r2
 802568c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802568e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025692:	0410      	lsls	r0, r2, #16
 8025694:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025698:	9908      	ldr	r1, [sp, #32]
 802569a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802569e:	4310      	orrs	r0, r2
 80256a0:	9a08      	ldr	r2, [sp, #32]
 80256a2:	0412      	lsls	r2, r2, #16
 80256a4:	fb03 e000 	mla	r0, r3, r0, lr
 80256a8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80256ac:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80256b0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80256b4:	ea42 020e 	orr.w	r2, r2, lr
 80256b8:	fb03 0302 	mla	r3, r3, r2, r0
 80256bc:	0d5a      	lsrs	r2, r3, #21
 80256be:	095b      	lsrs	r3, r3, #5
 80256c0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80256c4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80256c8:	4313      	orrs	r3, r2
 80256ca:	f8a9 3000 	strh.w	r3, [r9]
 80256ce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80256d0:	f109 0902 	add.w	r9, r9, #2
 80256d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80256d8:	441c      	add	r4, r3
 80256da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80256dc:	441e      	add	r6, r3
 80256de:	e784      	b.n	80255ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80256e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80256e2:	3d01      	subs	r5, #1
 80256e4:	3702      	adds	r7, #2
 80256e6:	441c      	add	r4, r3
 80256e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80256ea:	441e      	add	r6, r3
 80256ec:	e761      	b.n	80255b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80256ee:	d01d      	beq.n	802572c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80256f0:	1e6b      	subs	r3, r5, #1
 80256f2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80256f4:	fb00 4003 	mla	r0, r0, r3, r4
 80256f8:	1400      	asrs	r0, r0, #16
 80256fa:	f53f af74 	bmi.w	80255e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80256fe:	3901      	subs	r1, #1
 8025700:	4288      	cmp	r0, r1
 8025702:	f6bf af70 	bge.w	80255e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025706:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8025708:	fb01 6303 	mla	r3, r1, r3, r6
 802570c:	141b      	asrs	r3, r3, #16
 802570e:	f53f af6a 	bmi.w	80255e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025712:	3a01      	subs	r2, #1
 8025714:	4293      	cmp	r3, r2
 8025716:	f6bf af66 	bge.w	80255e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802571a:	46a9      	mov	r9, r5
 802571c:	46ba      	mov	sl, r7
 802571e:	f1b9 0f00 	cmp.w	r9, #0
 8025722:	dc5b      	bgt.n	80257dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8025724:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025728:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802572c:	9b07      	ldr	r3, [sp, #28]
 802572e:	2b00      	cmp	r3, #0
 8025730:	f340 80b9 	ble.w	80258a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8025734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025738:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802573a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802573e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025742:	eef0 6a62 	vmov.f32	s13, s5
 8025746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802574a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802574e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025752:	ee16 4a90 	vmov	r4, s13
 8025756:	eef0 6a43 	vmov.f32	s13, s6
 802575a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802575e:	ee16 6a90 	vmov	r6, s13
 8025762:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025766:	ee61 7a27 	vmul.f32	s15, s2, s15
 802576a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802576e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025772:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025776:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802577a:	ee12 2a90 	vmov	r2, s5
 802577e:	eef0 2a47 	vmov.f32	s5, s14
 8025782:	fb92 f3f3 	sdiv	r3, r2, r3
 8025786:	ee13 2a10 	vmov	r2, s6
 802578a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802578c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802578e:	eeb0 3a67 	vmov.f32	s6, s15
 8025792:	fb92 f3f3 	sdiv	r3, r2, r3
 8025796:	931c      	str	r3, [sp, #112]	@ 0x70
 8025798:	9b07      	ldr	r3, [sp, #28]
 802579a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802579c:	3b01      	subs	r3, #1
 802579e:	9307      	str	r3, [sp, #28]
 80257a0:	bf08      	it	eq
 80257a2:	4615      	moveq	r5, r2
 80257a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80257a6:	bf18      	it	ne
 80257a8:	461d      	movne	r5, r3
 80257aa:	e6f3      	b.n	8025594 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80257ac:	f111 0b01 	adds.w	fp, r1, #1
 80257b0:	d48d      	bmi.n	80256ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80257b2:	45de      	cmp	lr, fp
 80257b4:	db8b      	blt.n	80256ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80257b6:	f110 0b01 	adds.w	fp, r0, #1
 80257ba:	d488      	bmi.n	80256ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80257bc:	455b      	cmp	r3, fp
 80257be:	db86      	blt.n	80256ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80257c0:	b21b      	sxth	r3, r3
 80257c2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80257c6:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80257ca:	9300      	str	r3, [sp, #0]
 80257cc:	4642      	mov	r2, r8
 80257ce:	fa0f f38e 	sxth.w	r3, lr
 80257d2:	4649      	mov	r1, r9
 80257d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80257d6:	f7ff fe4c 	bl	8025472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80257da:	e778      	b.n	80256ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80257dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80257de:	1420      	asrs	r0, r4, #16
 80257e0:	1431      	asrs	r1, r6, #16
 80257e2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80257e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80257ea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80257ee:	fb03 0101 	mla	r1, r3, r1, r0
 80257f2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80257f6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80257fa:	8841      	ldrh	r1, [r0, #2]
 80257fc:	f1be 0f00 	cmp.w	lr, #0
 8025800:	d00b      	beq.n	802581a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025802:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8025806:	3b01      	subs	r3, #1
 8025808:	005b      	lsls	r3, r3, #1
 802580a:	3302      	adds	r3, #2
 802580c:	eb00 0b03 	add.w	fp, r0, r3
 8025810:	5ac3      	ldrh	r3, [r0, r3]
 8025812:	930a      	str	r3, [sp, #40]	@ 0x28
 8025814:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025818:	930b      	str	r3, [sp, #44]	@ 0x2c
 802581a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802581e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025822:	fb12 f30e 	smulbb	r3, r2, lr
 8025826:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802582a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802582e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025832:	10db      	asrs	r3, r3, #3
 8025834:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025838:	ea40 000c 	orr.w	r0, r0, ip
 802583c:	f1ce 0c10 	rsb	ip, lr, #16
 8025840:	ea4b 0101 	orr.w	r1, fp, r1
 8025844:	f109 39ff 	add.w	r9, r9, #4294967295
 8025848:	ebac 0c02 	sub.w	ip, ip, r2
 802584c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025850:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025854:	4351      	muls	r1, r2
 8025856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025858:	fb0c 1c00 	mla	ip, ip, r0, r1
 802585c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802585e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025862:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8025866:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025868:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802586c:	0412      	lsls	r2, r2, #16
 802586e:	ea4b 0000 	orr.w	r0, fp, r0
 8025872:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8025876:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802587a:	fb03 c000 	mla	r0, r3, r0, ip
 802587e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025882:	ea42 0b0b 	orr.w	fp, r2, fp
 8025886:	fb03 000b 	mla	r0, r3, fp, r0
 802588a:	0d43      	lsrs	r3, r0, #21
 802588c:	0940      	lsrs	r0, r0, #5
 802588e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025892:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025896:	4318      	orrs	r0, r3
 8025898:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802589a:	441c      	add	r4, r3
 802589c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802589e:	f82a 0b02 	strh.w	r0, [sl], #2
 80258a2:	441e      	add	r6, r3
 80258a4:	e73b      	b.n	802571e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80258a6:	b00f      	add	sp, #60	@ 0x3c
 80258a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080258ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80258ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258b0:	b085      	sub	sp, #20
 80258b2:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80258b6:	9102      	str	r1, [sp, #8]
 80258b8:	2c00      	cmp	r4, #0
 80258ba:	fb04 7103 	mla	r1, r4, r3, r7
 80258be:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80258c2:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80258c6:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80258ca:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80258ce:	f2c0 811b 	blt.w	8025b08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80258d2:	45a6      	cmp	lr, r4
 80258d4:	f340 8118 	ble.w	8025b08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80258d8:	2f00      	cmp	r7, #0
 80258da:	f2c0 8113 	blt.w	8025b04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80258de:	42bb      	cmp	r3, r7
 80258e0:	f340 8110 	ble.w	8025b04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80258e4:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80258e8:	1c7a      	adds	r2, r7, #1
 80258ea:	f100 8110 	bmi.w	8025b0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80258ee:	4293      	cmp	r3, r2
 80258f0:	f340 810d 	ble.w	8025b0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80258f4:	2e00      	cmp	r6, #0
 80258f6:	f000 810c 	beq.w	8025b12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80258fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80258fe:	3401      	adds	r4, #1
 8025900:	f100 810b 	bmi.w	8025b1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8025904:	45a6      	cmp	lr, r4
 8025906:	f340 8108 	ble.w	8025b1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802590a:	2800      	cmp	r0, #0
 802590c:	f000 8108 	beq.w	8025b20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8025910:	2f00      	cmp	r7, #0
 8025912:	f2c0 8100 	blt.w	8025b16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8025916:	42bb      	cmp	r3, r7
 8025918:	f340 80fd 	ble.w	8025b16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802591c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8025920:	3701      	adds	r7, #1
 8025922:	f100 8100 	bmi.w	8025b26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8025926:	42bb      	cmp	r3, r7
 8025928:	f340 80fd 	ble.w	8025b26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802592c:	2e00      	cmp	r6, #0
 802592e:	f000 80fc 	beq.w	8025b2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8025932:	3301      	adds	r3, #1
 8025934:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025938:	b2b6      	uxth	r6, r6
 802593a:	b280      	uxth	r0, r0
 802593c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8025940:	fb00 fe06 	mul.w	lr, r0, r6
 8025944:	0136      	lsls	r6, r6, #4
 8025946:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802594a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802594e:	eba6 070e 	sub.w	r7, r6, lr
 8025952:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8025956:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802595a:	b280      	uxth	r0, r0
 802595c:	b2bf      	uxth	r7, r7
 802595e:	1a1b      	subs	r3, r3, r0
 8025960:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025964:	fb0a f607 	mul.w	r6, sl, r7
 8025968:	b29b      	uxth	r3, r3
 802596a:	fb0b 6603 	mla	r6, fp, r3, r6
 802596e:	fb00 6609 	mla	r6, r0, r9, r6
 8025972:	fb0e 6608 	mla	r6, lr, r8, r6
 8025976:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802597a:	9600      	str	r6, [sp, #0]
 802597c:	2e00      	cmp	r6, #0
 802597e:	f000 80be 	beq.w	8025afe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8025982:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8025986:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802598a:	9e02      	ldr	r6, [sp, #8]
 802598c:	fb0b fc0c 	mul.w	ip, fp, ip
 8025990:	fb0b f505 	mul.w	r5, fp, r5
 8025994:	8836      	ldrh	r6, [r6, #0]
 8025996:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802599a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802599e:	9501      	str	r5, [sp, #4]
 80259a0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80259a4:	44dc      	add	ip, fp
 80259a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259aa:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80259ae:	9503      	str	r5, [sp, #12]
 80259b0:	9d01      	ldr	r5, [sp, #4]
 80259b2:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80259b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80259ba:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80259be:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80259c2:	fb0a fc0c 	mul.w	ip, sl, ip
 80259c6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80259ca:	fb0a fa01 	mul.w	sl, sl, r1
 80259ce:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80259d2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80259d6:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80259da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80259de:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80259e2:	4465      	add	r5, ip
 80259e4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80259e8:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80259ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259f0:	fb09 fc0c 	mul.w	ip, r9, ip
 80259f4:	0a2d      	lsrs	r5, r5, #8
 80259f6:	fb09 f904 	mul.w	r9, r9, r4
 80259fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80259fe:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8025a02:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025a06:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8025a0a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025a0e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8025a12:	437d      	muls	r5, r7
 8025a14:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025a18:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8025a1c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025a20:	4461      	add	r1, ip
 8025a22:	fb08 f404 	mul.w	r4, r8, r4
 8025a26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a2a:	fb08 f802 	mul.w	r8, r8, r2
 8025a2e:	0a09      	lsrs	r1, r1, #8
 8025a30:	0a22      	lsrs	r2, r4, #8
 8025a32:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8025a36:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8025a3a:	fb07 f70a 	mul.w	r7, r7, sl
 8025a3e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025a42:	4414      	add	r4, r2
 8025a44:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8025a48:	0a24      	lsrs	r4, r4, #8
 8025a4a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025a4e:	9a03      	ldr	r2, [sp, #12]
 8025a50:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025a54:	fb02 5503 	mla	r5, r2, r3, r5
 8025a58:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025a5c:	9a00      	ldr	r2, [sp, #0]
 8025a5e:	fb04 540e 	mla	r4, r4, lr, r5
 8025a62:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8025a66:	1235      	asrs	r5, r6, #8
 8025a68:	fb01 4100 	mla	r1, r1, r0, r4
 8025a6c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025a70:	0a09      	lsrs	r1, r1, #8
 8025a72:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8025a76:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8025a7a:	fb03 7101 	mla	r1, r3, r1, r7
 8025a7e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8025a82:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8025a86:	fb00 e101 	mla	r1, r0, r1, lr
 8025a8a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8025a8e:	b287      	uxth	r7, r0
 8025a90:	0a09      	lsrs	r1, r1, #8
 8025a92:	437a      	muls	r2, r7
 8025a94:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025a98:	1c53      	adds	r3, r2, #1
 8025a9a:	4321      	orrs	r1, r4
 8025a9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025aa0:	0c0a      	lsrs	r2, r1, #16
 8025aa2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8025aa6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025aaa:	b2c8      	uxtb	r0, r1
 8025aac:	fb12 f207 	smulbb	r2, r2, r7
 8025ab0:	fb14 f407 	smulbb	r4, r4, r7
 8025ab4:	b2db      	uxtb	r3, r3
 8025ab6:	fb10 f007 	smulbb	r0, r0, r7
 8025aba:	fb05 2503 	mla	r5, r5, r3, r2
 8025abe:	10f2      	asrs	r2, r6, #3
 8025ac0:	00f6      	lsls	r6, r6, #3
 8025ac2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025ac6:	b2ad      	uxth	r5, r5
 8025ac8:	b2f6      	uxtb	r6, r6
 8025aca:	fb02 4203 	mla	r2, r2, r3, r4
 8025ace:	fb06 0303 	mla	r3, r6, r3, r0
 8025ad2:	b294      	uxth	r4, r2
 8025ad4:	b299      	uxth	r1, r3
 8025ad6:	1c6b      	adds	r3, r5, #1
 8025ad8:	1c62      	adds	r2, r4, #1
 8025ada:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025ade:	1c4b      	adds	r3, r1, #1
 8025ae0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025ae4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025ae8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025aec:	0952      	lsrs	r2, r2, #5
 8025aee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025af2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025af6:	432b      	orrs	r3, r5
 8025af8:	4313      	orrs	r3, r2
 8025afa:	9a02      	ldr	r2, [sp, #8]
 8025afc:	8013      	strh	r3, [r2, #0]
 8025afe:	b005      	add	sp, #20
 8025b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b04:	2500      	movs	r5, #0
 8025b06:	e6ef      	b.n	80258e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8025b08:	2100      	movs	r1, #0
 8025b0a:	460d      	mov	r5, r1
 8025b0c:	e6f7      	b.n	80258fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8025b0e:	2100      	movs	r1, #0
 8025b10:	e6f5      	b.n	80258fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8025b12:	4631      	mov	r1, r6
 8025b14:	e6f3      	b.n	80258fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8025b16:	2400      	movs	r4, #0
 8025b18:	e702      	b.n	8025920 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8025b1a:	2200      	movs	r2, #0
 8025b1c:	4614      	mov	r4, r2
 8025b1e:	e70b      	b.n	8025938 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8025b20:	4602      	mov	r2, r0
 8025b22:	4604      	mov	r4, r0
 8025b24:	e708      	b.n	8025938 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8025b26:	2200      	movs	r2, #0
 8025b28:	e706      	b.n	8025938 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8025b2a:	4632      	mov	r2, r6
 8025b2c:	e704      	b.n	8025938 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08025b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b32:	b09d      	sub	sp, #116	@ 0x74
 8025b34:	9219      	str	r2, [sp, #100]	@ 0x64
 8025b36:	9307      	str	r3, [sp, #28]
 8025b38:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8025b3a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8025b3e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8025b40:	931a      	str	r3, [sp, #104]	@ 0x68
 8025b42:	6850      	ldr	r0, [r2, #4]
 8025b44:	9117      	str	r1, [sp, #92]	@ 0x5c
 8025b46:	6812      	ldr	r2, [r2, #0]
 8025b48:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8025b4c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8025b50:	fb00 1303 	mla	r3, r0, r3, r1
 8025b54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8025b5a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025b5c:	681b      	ldr	r3, [r3, #0]
 8025b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8025b60:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8025b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025b66:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	dc03      	bgt.n	8025b74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8025b6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	f340 8375 	ble.w	802625e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8025b74:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025b76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b7e:	1e48      	subs	r0, r1, #1
 8025b80:	1e57      	subs	r7, r2, #1
 8025b82:	9b07      	ldr	r3, [sp, #28]
 8025b84:	2b00      	cmp	r3, #0
 8025b86:	f340 818e 	ble.w	8025ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8025b8a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025b8e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025b92:	d406      	bmi.n	8025ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025b94:	4584      	cmp	ip, r0
 8025b96:	da04      	bge.n	8025ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025b98:	2b00      	cmp	r3, #0
 8025b9a:	db02      	blt.n	8025ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025b9c:	42bb      	cmp	r3, r7
 8025b9e:	f2c0 8183 	blt.w	8025ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8025ba2:	f11c 0c01 	adds.w	ip, ip, #1
 8025ba6:	f100 8173 	bmi.w	8025e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025baa:	4561      	cmp	r1, ip
 8025bac:	f2c0 8170 	blt.w	8025e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025bb0:	3301      	adds	r3, #1
 8025bb2:	f100 816d 	bmi.w	8025e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025bb6:	429a      	cmp	r2, r3
 8025bb8:	f2c0 816a 	blt.w	8025e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025bbc:	9b07      	ldr	r3, [sp, #28]
 8025bbe:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8025bc0:	9318      	str	r3, [sp, #96]	@ 0x60
 8025bc2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	f340 818c 	ble.w	8025ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8025bca:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8025bcc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025bd0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025bd2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025bd6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025bda:	1422      	asrs	r2, r4, #16
 8025bdc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025be0:	689b      	ldr	r3, [r3, #8]
 8025be2:	f100 81cd 	bmi.w	8025f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025be6:	f103 38ff 	add.w	r8, r3, #4294967295
 8025bea:	4542      	cmp	r2, r8
 8025bec:	f280 81c8 	bge.w	8025f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025bf0:	f1bc 0f00 	cmp.w	ip, #0
 8025bf4:	f2c0 81c4 	blt.w	8025f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025bf8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025bfc:	45c4      	cmp	ip, r8
 8025bfe:	f280 81bf 	bge.w	8025f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025c02:	b21b      	sxth	r3, r3
 8025c04:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8025c06:	fb0c 2203 	mla	r2, ip, r3, r2
 8025c0a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025c0e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025c12:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025c16:	2800      	cmp	r0, #0
 8025c18:	f000 81a9 	beq.w	8025f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8025c1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025c20:	950c      	str	r5, [sp, #48]	@ 0x30
 8025c22:	0e2d      	lsrs	r5, r5, #24
 8025c24:	9513      	str	r5, [sp, #76]	@ 0x4c
 8025c26:	b181      	cbz	r1, 8025c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025c28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025c2c:	3b01      	subs	r3, #1
 8025c2e:	009b      	lsls	r3, r3, #2
 8025c30:	3304      	adds	r3, #4
 8025c32:	eb08 0c03 	add.w	ip, r8, r3
 8025c36:	f858 3003 	ldr.w	r3, [r8, r3]
 8025c3a:	9308      	str	r3, [sp, #32]
 8025c3c:	0e1b      	lsrs	r3, r3, #24
 8025c3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8025c40:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025c44:	930d      	str	r3, [sp, #52]	@ 0x34
 8025c46:	0e1b      	lsrs	r3, r3, #24
 8025c48:	9314      	str	r3, [sp, #80]	@ 0x50
 8025c4a:	b280      	uxth	r0, r0
 8025c4c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025c4e:	b289      	uxth	r1, r1
 8025c50:	fb00 f901 	mul.w	r9, r0, r1
 8025c54:	0100      	lsls	r0, r0, #4
 8025c56:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025c5a:	eba0 0809 	sub.w	r8, r0, r9
 8025c5e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8025c62:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025c64:	b289      	uxth	r1, r1
 8025c66:	fa1f f888 	uxth.w	r8, r8
 8025c6a:	1a5b      	subs	r3, r3, r1
 8025c6c:	fb08 f000 	mul.w	r0, r8, r0
 8025c70:	b29b      	uxth	r3, r3
 8025c72:	fb03 000e 	mla	r0, r3, lr, r0
 8025c76:	fb01 0005 	mla	r0, r1, r5, r0
 8025c7a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025c7c:	fb09 0005 	mla	r0, r9, r5, r0
 8025c80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025c84:	2800      	cmp	r0, #0
 8025c86:	f000 80fa 	beq.w	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025c8a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025c8e:	d01b      	beq.n	8025cc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025c90:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8025c94:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025c98:	fb0e fa0a 	mul.w	sl, lr, sl
 8025c9c:	fb0e fe02 	mul.w	lr, lr, r2
 8025ca0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025ca4:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025ca8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025cac:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025cb0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025cb4:	4452      	add	r2, sl
 8025cb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cba:	0a12      	lsrs	r2, r2, #8
 8025cbc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025cc0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025cc4:	ea42 020c 	orr.w	r2, r2, ip
 8025cc8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8025cca:	2dff      	cmp	r5, #255	@ 0xff
 8025ccc:	d021      	beq.n	8025d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8025cce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025cd0:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8025cd4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8025cd6:	fb05 fb0b 	mul.w	fp, r5, fp
 8025cda:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025cdc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8025ce0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8025ce2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025ce6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025cea:	fb05 fa0a 	mul.w	sl, r5, sl
 8025cee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025cf2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025cf6:	44de      	add	lr, fp
 8025cf8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025cfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d04:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d08:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025d0c:	ea4e 050a 	orr.w	r5, lr, sl
 8025d10:	950c      	str	r5, [sp, #48]	@ 0x30
 8025d12:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025d14:	2dff      	cmp	r5, #255	@ 0xff
 8025d16:	d021      	beq.n	8025d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8025d18:	9d08      	ldr	r5, [sp, #32]
 8025d1a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8025d1e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025d20:	fb05 fb0b 	mul.w	fp, r5, fp
 8025d24:	9d08      	ldr	r5, [sp, #32]
 8025d26:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8025d2a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025d2c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d30:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025d34:	fb05 fa0a 	mul.w	sl, r5, sl
 8025d38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d3c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025d40:	44de      	add	lr, fp
 8025d42:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d4e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d52:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025d56:	ea4e 050a 	orr.w	r5, lr, sl
 8025d5a:	9508      	str	r5, [sp, #32]
 8025d5c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025d5e:	2dff      	cmp	r5, #255	@ 0xff
 8025d60:	d021      	beq.n	8025da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8025d62:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025d64:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8025d68:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025d6a:	fb05 fb0b 	mul.w	fp, r5, fp
 8025d6e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025d70:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8025d74:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025d76:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d7a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025d7e:	fb05 fa0a 	mul.w	sl, r5, sl
 8025d82:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d86:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025d8a:	44de      	add	lr, fp
 8025d8c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d98:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d9c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025da0:	ea4e 050a 	orr.w	r5, lr, sl
 8025da4:	950d      	str	r5, [sp, #52]	@ 0x34
 8025da6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025da8:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8025dac:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025db0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8025db4:	9d08      	ldr	r5, [sp, #32]
 8025db6:	fb08 fc0c 	mul.w	ip, r8, ip
 8025dba:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025dbe:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8025dc2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025dc4:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025dc8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8025dcc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025dce:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025dd2:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8025dd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025dd8:	fb08 f80e 	mul.w	r8, r8, lr
 8025ddc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025de0:	fb03 8202 	mla	r2, r3, r2, r8
 8025de4:	9b08      	ldr	r3, [sp, #32]
 8025de6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025dea:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8025dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025df0:	fb01 220a 	mla	r2, r1, sl, r2
 8025df4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8025df8:	883b      	ldrh	r3, [r7, #0]
 8025dfa:	fb09 2901 	mla	r9, r9, r1, r2
 8025dfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025e00:	1219      	asrs	r1, r3, #8
 8025e02:	4342      	muls	r2, r0
 8025e04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e08:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025e0c:	1c50      	adds	r0, r2, #1
 8025e0e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025e12:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025e16:	ea4c 0c09 	orr.w	ip, ip, r9
 8025e1a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025e1e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025e22:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025e26:	fa5f fc8c 	uxtb.w	ip, ip
 8025e2a:	fb12 f205 	smulbb	r2, r2, r5
 8025e2e:	b2c0      	uxtb	r0, r0
 8025e30:	fb1c fc05 	smulbb	ip, ip, r5
 8025e34:	fb01 2100 	mla	r1, r1, r0, r2
 8025e38:	10da      	asrs	r2, r3, #3
 8025e3a:	fb1e fe05 	smulbb	lr, lr, r5
 8025e3e:	00db      	lsls	r3, r3, #3
 8025e40:	b289      	uxth	r1, r1
 8025e42:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025e46:	b2db      	uxtb	r3, r3
 8025e48:	fb02 e200 	mla	r2, r2, r0, lr
 8025e4c:	fb03 c300 	mla	r3, r3, r0, ip
 8025e50:	b292      	uxth	r2, r2
 8025e52:	fa1f fc83 	uxth.w	ip, r3
 8025e56:	1c4b      	adds	r3, r1, #1
 8025e58:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025e5c:	f10c 0301 	add.w	r3, ip, #1
 8025e60:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025e64:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8025e68:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025e6c:	430b      	orrs	r3, r1
 8025e6e:	1c51      	adds	r1, r2, #1
 8025e70:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025e74:	0952      	lsrs	r2, r2, #5
 8025e76:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025e7a:	4313      	orrs	r3, r2
 8025e7c:	803b      	strh	r3, [r7, #0]
 8025e7e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025e80:	3702      	adds	r7, #2
 8025e82:	441c      	add	r4, r3
 8025e84:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025e86:	441e      	add	r6, r3
 8025e88:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025e8a:	3b01      	subs	r3, #1
 8025e8c:	9318      	str	r3, [sp, #96]	@ 0x60
 8025e8e:	e698      	b.n	8025bc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025e90:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025e92:	441c      	add	r4, r3
 8025e94:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025e96:	441e      	add	r6, r3
 8025e98:	9b07      	ldr	r3, [sp, #28]
 8025e9a:	3b01      	subs	r3, #1
 8025e9c:	9307      	str	r3, [sp, #28]
 8025e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ea0:	3302      	adds	r3, #2
 8025ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ea4:	e66d      	b.n	8025b82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8025ea6:	d023      	beq.n	8025ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025ea8:	9b07      	ldr	r3, [sp, #28]
 8025eaa:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8025eac:	3b01      	subs	r3, #1
 8025eae:	fb00 4003 	mla	r0, r0, r3, r4
 8025eb2:	1400      	asrs	r0, r0, #16
 8025eb4:	f53f ae82 	bmi.w	8025bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025eb8:	3901      	subs	r1, #1
 8025eba:	4288      	cmp	r0, r1
 8025ebc:	f6bf ae7e 	bge.w	8025bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025ec0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8025ec2:	fb01 6303 	mla	r3, r1, r3, r6
 8025ec6:	141b      	asrs	r3, r3, #16
 8025ec8:	f53f ae78 	bmi.w	8025bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025ecc:	3a01      	subs	r2, #1
 8025ece:	4293      	cmp	r3, r2
 8025ed0:	f6bf ae74 	bge.w	8025bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025ed4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025ed8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8025edc:	f1bb 0f00 	cmp.w	fp, #0
 8025ee0:	dc6c      	bgt.n	8025fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8025ee2:	9b07      	ldr	r3, [sp, #28]
 8025ee4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025eea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ef0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025ef2:	2b00      	cmp	r3, #0
 8025ef4:	f340 81b3 	ble.w	802625e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8025ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025efc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025efe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025f06:	eef0 6a62 	vmov.f32	s13, s5
 8025f0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025f12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f16:	ee16 4a90 	vmov	r4, s13
 8025f1a:	eef0 6a43 	vmov.f32	s13, s6
 8025f1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f22:	ee16 6a90 	vmov	r6, s13
 8025f26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025f3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025f3e:	ee12 2a90 	vmov	r2, s5
 8025f42:	eef0 2a47 	vmov.f32	s5, s14
 8025f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f4a:	ee13 2a10 	vmov	r2, s6
 8025f4e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8025f50:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025f52:	eeb0 3a67 	vmov.f32	s6, s15
 8025f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f5a:	932a      	str	r3, [sp, #168]	@ 0xa8
 8025f5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025f5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8025f60:	3b01      	subs	r3, #1
 8025f62:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025f64:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025f66:	bf08      	it	eq
 8025f68:	4613      	moveq	r3, r2
 8025f6a:	9307      	str	r3, [sp, #28]
 8025f6c:	e5fb      	b.n	8025b66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8025f6e:	2900      	cmp	r1, #0
 8025f70:	f43f ae6b 	beq.w	8025c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025f74:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025f78:	9308      	str	r3, [sp, #32]
 8025f7a:	0e1b      	lsrs	r3, r3, #24
 8025f7c:	9311      	str	r3, [sp, #68]	@ 0x44
 8025f7e:	e664      	b.n	8025c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025f80:	f112 0801 	adds.w	r8, r2, #1
 8025f84:	f53f af7b 	bmi.w	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025f88:	4543      	cmp	r3, r8
 8025f8a:	f6ff af78 	blt.w	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025f8e:	f11c 0801 	adds.w	r8, ip, #1
 8025f92:	f53f af74 	bmi.w	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025f96:	45c6      	cmp	lr, r8
 8025f98:	f6ff af71 	blt.w	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025f9c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8025f9e:	b21b      	sxth	r3, r3
 8025fa0:	9201      	str	r2, [sp, #4]
 8025fa2:	fa0f f28e 	sxth.w	r2, lr
 8025fa6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8025faa:	e9cd c002 	strd	ip, r0, [sp, #8]
 8025fae:	9200      	str	r2, [sp, #0]
 8025fb0:	4639      	mov	r1, r7
 8025fb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025fb4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8025fb6:	f7ff fc79 	bl	80258ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8025fba:	e760      	b.n	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025fbc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025fbe:	1427      	asrs	r7, r4, #16
 8025fc0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8025fc2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025fc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025fca:	1433      	asrs	r3, r6, #16
 8025fcc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025fd0:	fb01 7303 	mla	r3, r1, r3, r7
 8025fd4:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8025fd8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025fdc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025fe0:	2a00      	cmp	r2, #0
 8025fe2:	f000 8133 	beq.w	802624c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8025fe6:	687d      	ldr	r5, [r7, #4]
 8025fe8:	950e      	str	r5, [sp, #56]	@ 0x38
 8025fea:	0e2d      	lsrs	r5, r5, #24
 8025fec:	9515      	str	r5, [sp, #84]	@ 0x54
 8025fee:	b178      	cbz	r0, 8026010 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8025ff0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8025ff4:	3901      	subs	r1, #1
 8025ff6:	0089      	lsls	r1, r1, #2
 8025ff8:	3104      	adds	r1, #4
 8025ffa:	eb07 0e01 	add.w	lr, r7, r1
 8025ffe:	5879      	ldr	r1, [r7, r1]
 8026000:	9109      	str	r1, [sp, #36]	@ 0x24
 8026002:	0e09      	lsrs	r1, r1, #24
 8026004:	9112      	str	r1, [sp, #72]	@ 0x48
 8026006:	f8de 1004 	ldr.w	r1, [lr, #4]
 802600a:	910f      	str	r1, [sp, #60]	@ 0x3c
 802600c:	0e09      	lsrs	r1, r1, #24
 802600e:	9116      	str	r1, [sp, #88]	@ 0x58
 8026010:	b292      	uxth	r2, r2
 8026012:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026014:	b280      	uxth	r0, r0
 8026016:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026018:	fb02 f800 	mul.w	r8, r2, r0
 802601c:	0112      	lsls	r2, r2, #4
 802601e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026022:	eba2 0e08 	sub.w	lr, r2, r8
 8026026:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802602a:	b280      	uxth	r0, r0
 802602c:	fa1f fe8e 	uxth.w	lr, lr
 8026030:	1a12      	subs	r2, r2, r0
 8026032:	fb0e f101 	mul.w	r1, lr, r1
 8026036:	b292      	uxth	r2, r2
 8026038:	fb02 110c 	mla	r1, r2, ip, r1
 802603c:	fb00 1105 	mla	r1, r0, r5, r1
 8026040:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026042:	fb08 1105 	mla	r1, r8, r5, r1
 8026046:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802604a:	2900      	cmp	r1, #0
 802604c:	f000 80f5 	beq.w	802623a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8026050:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026054:	d019      	beq.n	802608a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8026056:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802605a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802605e:	fb0c fa0a 	mul.w	sl, ip, sl
 8026062:	fb0c fc03 	mul.w	ip, ip, r3
 8026066:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802606a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802606e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026072:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026076:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802607a:	4453      	add	r3, sl
 802607c:	0a3f      	lsrs	r7, r7, #8
 802607e:	0a1b      	lsrs	r3, r3, #8
 8026080:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026084:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026088:	433b      	orrs	r3, r7
 802608a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802608c:	2dff      	cmp	r5, #255	@ 0xff
 802608e:	d020      	beq.n	80260d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026090:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026092:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026096:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026098:	436f      	muls	r7, r5
 802609a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802609c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80260a0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80260a4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80260a6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80260aa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80260ae:	fb05 fa0a 	mul.w	sl, r5, sl
 80260b2:	44bc      	add	ip, r7
 80260b4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80260b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80260bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80260c0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80260c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260cc:	ea4c 050a 	orr.w	r5, ip, sl
 80260d0:	950e      	str	r5, [sp, #56]	@ 0x38
 80260d2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80260d4:	2dff      	cmp	r5, #255	@ 0xff
 80260d6:	d020      	beq.n	802611a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80260d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80260da:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80260de:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80260e0:	436f      	muls	r7, r5
 80260e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80260e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80260e8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80260ec:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80260ee:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80260f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80260f6:	fb05 fa0a 	mul.w	sl, r5, sl
 80260fa:	44bc      	add	ip, r7
 80260fc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026100:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026104:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026108:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802610c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026110:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026114:	ea4c 050a 	orr.w	r5, ip, sl
 8026118:	9509      	str	r5, [sp, #36]	@ 0x24
 802611a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802611c:	2dff      	cmp	r5, #255	@ 0xff
 802611e:	d020      	beq.n	8026162 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8026120:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026122:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026126:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026128:	436f      	muls	r7, r5
 802612a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802612c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026130:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026134:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026136:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802613a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802613e:	fb05 fa0a 	mul.w	sl, r5, sl
 8026142:	44bc      	add	ip, r7
 8026144:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026148:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802614c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026150:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026154:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026158:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802615c:	ea4c 050a 	orr.w	r5, ip, sl
 8026160:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026162:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026164:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026168:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802616c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026170:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026172:	fb0e f707 	mul.w	r7, lr, r7
 8026176:	fb02 770c 	mla	r7, r2, ip, r7
 802617a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802617e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026180:	fb00 770c 	mla	r7, r0, ip, r7
 8026184:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026188:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802618a:	fb08 770c 	mla	r7, r8, ip, r7
 802618e:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8026192:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026194:	fb0e fe0c 	mul.w	lr, lr, ip
 8026198:	0a3f      	lsrs	r7, r7, #8
 802619a:	fb02 e303 	mla	r3, r2, r3, lr
 802619e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80261a0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80261a4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80261a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80261aa:	fb00 330a 	mla	r3, r0, sl, r3
 80261ae:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80261b2:	f8b9 0000 	ldrh.w	r0, [r9]
 80261b6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80261ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261bc:	1202      	asrs	r2, r0, #8
 80261be:	4359      	muls	r1, r3
 80261c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261c4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80261c8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80261cc:	1c4b      	adds	r3, r1, #1
 80261ce:	ea47 070c 	orr.w	r7, r7, ip
 80261d2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80261d6:	0c3b      	lsrs	r3, r7, #16
 80261d8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80261dc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80261e0:	b2ff      	uxtb	r7, r7
 80261e2:	fb13 f305 	smulbb	r3, r3, r5
 80261e6:	b2c9      	uxtb	r1, r1
 80261e8:	fb17 f705 	smulbb	r7, r7, r5
 80261ec:	fb02 3201 	mla	r2, r2, r1, r3
 80261f0:	10c3      	asrs	r3, r0, #3
 80261f2:	fb1c fc05 	smulbb	ip, ip, r5
 80261f6:	00c0      	lsls	r0, r0, #3
 80261f8:	b292      	uxth	r2, r2
 80261fa:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80261fe:	b2c0      	uxtb	r0, r0
 8026200:	fb03 c301 	mla	r3, r3, r1, ip
 8026204:	fb00 7001 	mla	r0, r0, r1, r7
 8026208:	1c51      	adds	r1, r2, #1
 802620a:	b29b      	uxth	r3, r3
 802620c:	b280      	uxth	r0, r0
 802620e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026212:	f100 0c01 	add.w	ip, r0, #1
 8026216:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 802621a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802621e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026222:	ea4c 0202 	orr.w	r2, ip, r2
 8026226:	f103 0c01 	add.w	ip, r3, #1
 802622a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802622e:	095b      	lsrs	r3, r3, #5
 8026230:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026234:	431a      	orrs	r2, r3
 8026236:	f8a9 2000 	strh.w	r2, [r9]
 802623a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802623c:	f109 0902 	add.w	r9, r9, #2
 8026240:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026244:	441c      	add	r4, r3
 8026246:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026248:	441e      	add	r6, r3
 802624a:	e647      	b.n	8025edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802624c:	2800      	cmp	r0, #0
 802624e:	f43f aedf 	beq.w	8026010 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026252:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026256:	9109      	str	r1, [sp, #36]	@ 0x24
 8026258:	0e09      	lsrs	r1, r1, #24
 802625a:	9112      	str	r1, [sp, #72]	@ 0x48
 802625c:	e6d8      	b.n	8026010 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802625e:	b01d      	add	sp, #116	@ 0x74
 8026260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026264 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026268:	b085      	sub	sp, #20
 802626a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 802626e:	9102      	str	r1, [sp, #8]
 8026270:	2c00      	cmp	r4, #0
 8026272:	fb04 7103 	mla	r1, r4, r3, r7
 8026276:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802627a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802627e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026282:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8026286:	f2c0 810c 	blt.w	80264a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802628a:	45a6      	cmp	lr, r4
 802628c:	f340 8109 	ble.w	80264a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026290:	2f00      	cmp	r7, #0
 8026292:	f2c0 8104 	blt.w	802649e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026296:	42bb      	cmp	r3, r7
 8026298:	f340 8101 	ble.w	802649e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802629c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80262a0:	1c7a      	adds	r2, r7, #1
 80262a2:	f100 8101 	bmi.w	80264a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80262a6:	4293      	cmp	r3, r2
 80262a8:	f340 80fe 	ble.w	80264a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80262ac:	2e00      	cmp	r6, #0
 80262ae:	f000 80fd 	beq.w	80264ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80262b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80262b6:	3401      	adds	r4, #1
 80262b8:	f100 80fc 	bmi.w	80264b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80262bc:	45a6      	cmp	lr, r4
 80262be:	f340 80f9 	ble.w	80264b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80262c2:	2800      	cmp	r0, #0
 80262c4:	f000 80f9 	beq.w	80264ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80262c8:	2f00      	cmp	r7, #0
 80262ca:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80262ce:	f2c0 80ef 	blt.w	80264b0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80262d2:	42bb      	cmp	r3, r7
 80262d4:	f340 80ec 	ble.w	80264b0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80262d8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80262dc:	3701      	adds	r7, #1
 80262de:	f100 80ef 	bmi.w	80264c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80262e2:	42bb      	cmp	r3, r7
 80262e4:	f340 80ec 	ble.w	80264c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80262e8:	2e00      	cmp	r6, #0
 80262ea:	f000 80eb 	beq.w	80264c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80262ee:	6852      	ldr	r2, [r2, #4]
 80262f0:	b2b6      	uxth	r6, r6
 80262f2:	b280      	uxth	r0, r0
 80262f4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80262f8:	fb00 fe06 	mul.w	lr, r0, r6
 80262fc:	0136      	lsls	r6, r6, #4
 80262fe:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026302:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026306:	eba6 070e 	sub.w	r7, r6, lr
 802630a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802630e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026312:	b280      	uxth	r0, r0
 8026314:	b2bf      	uxth	r7, r7
 8026316:	1a1b      	subs	r3, r3, r0
 8026318:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802631c:	fb07 f60a 	mul.w	r6, r7, sl
 8026320:	b29b      	uxth	r3, r3
 8026322:	fb0b 6603 	mla	r6, fp, r3, r6
 8026326:	fb00 6609 	mla	r6, r0, r9, r6
 802632a:	fb0e 6608 	mla	r6, lr, r8, r6
 802632e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026332:	9600      	str	r6, [sp, #0]
 8026334:	2e00      	cmp	r6, #0
 8026336:	f000 80af 	beq.w	8026498 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802633a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802633e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026342:	9e02      	ldr	r6, [sp, #8]
 8026344:	fb0b fc0c 	mul.w	ip, fp, ip
 8026348:	fb0b f505 	mul.w	r5, fp, r5
 802634c:	8836      	ldrh	r6, [r6, #0]
 802634e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026352:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026356:	9501      	str	r5, [sp, #4]
 8026358:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802635c:	44dc      	add	ip, fp
 802635e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026362:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8026366:	9503      	str	r5, [sp, #12]
 8026368:	9d01      	ldr	r5, [sp, #4]
 802636a:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802636e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026372:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8026376:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802637a:	fb0a fc0c 	mul.w	ip, sl, ip
 802637e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026382:	fb0a fa01 	mul.w	sl, sl, r1
 8026386:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802638a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802638e:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8026392:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026396:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802639a:	4465      	add	r5, ip
 802639c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80263a0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80263a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263a8:	fb09 fc0c 	mul.w	ip, r9, ip
 80263ac:	0a2d      	lsrs	r5, r5, #8
 80263ae:	fb09 f904 	mul.w	r9, r9, r4
 80263b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80263b6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80263ba:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80263be:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80263c2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80263c6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80263ca:	437d      	muls	r5, r7
 80263cc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80263d0:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80263d4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80263d8:	4461      	add	r1, ip
 80263da:	fb08 f404 	mul.w	r4, r8, r4
 80263de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80263e2:	fb08 f802 	mul.w	r8, r8, r2
 80263e6:	0a09      	lsrs	r1, r1, #8
 80263e8:	0a22      	lsrs	r2, r4, #8
 80263ea:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80263ee:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80263f2:	fb07 f70a 	mul.w	r7, r7, sl
 80263f6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80263fa:	4414      	add	r4, r2
 80263fc:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026400:	0a24      	lsrs	r4, r4, #8
 8026402:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026406:	9a03      	ldr	r2, [sp, #12]
 8026408:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802640c:	fb02 5503 	mla	r5, r2, r3, r5
 8026410:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026414:	fb04 540e 	mla	r4, r4, lr, r5
 8026418:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802641c:	fb01 4100 	mla	r1, r1, r0, r4
 8026420:	0a09      	lsrs	r1, r1, #8
 8026422:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8026426:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802642a:	fb03 7101 	mla	r1, r3, r1, r7
 802642e:	9b00      	ldr	r3, [sp, #0]
 8026430:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026434:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8026438:	43da      	mvns	r2, r3
 802643a:	1233      	asrs	r3, r6, #8
 802643c:	fb00 e101 	mla	r1, r0, r1, lr
 8026440:	10f0      	asrs	r0, r6, #3
 8026442:	b2d2      	uxtb	r2, r2
 8026444:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026448:	0a09      	lsrs	r1, r1, #8
 802644a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802644e:	00f6      	lsls	r6, r6, #3
 8026450:	4353      	muls	r3, r2
 8026452:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026456:	4350      	muls	r0, r2
 8026458:	b2f6      	uxtb	r6, r6
 802645a:	4321      	orrs	r1, r4
 802645c:	4356      	muls	r6, r2
 802645e:	1c5a      	adds	r2, r3, #1
 8026460:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026464:	0c0b      	lsrs	r3, r1, #16
 8026466:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802646a:	1c42      	adds	r2, r0, #1
 802646c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026470:	0a0a      	lsrs	r2, r1, #8
 8026472:	021b      	lsls	r3, r3, #8
 8026474:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026478:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802647c:	00d2      	lsls	r2, r2, #3
 802647e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026482:	4313      	orrs	r3, r2
 8026484:	1c72      	adds	r2, r6, #1
 8026486:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802648a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802648e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8026492:	4319      	orrs	r1, r3
 8026494:	9b02      	ldr	r3, [sp, #8]
 8026496:	8019      	strh	r1, [r3, #0]
 8026498:	b005      	add	sp, #20
 802649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802649e:	2500      	movs	r5, #0
 80264a0:	e6fe      	b.n	80262a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80264a2:	2100      	movs	r1, #0
 80264a4:	460d      	mov	r5, r1
 80264a6:	e706      	b.n	80262b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80264a8:	2100      	movs	r1, #0
 80264aa:	e704      	b.n	80262b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80264ac:	4631      	mov	r1, r6
 80264ae:	e702      	b.n	80262b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80264b0:	2400      	movs	r4, #0
 80264b2:	e713      	b.n	80262dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80264b4:	2200      	movs	r2, #0
 80264b6:	4614      	mov	r4, r2
 80264b8:	e71a      	b.n	80262f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80264ba:	4602      	mov	r2, r0
 80264bc:	4604      	mov	r4, r0
 80264be:	e717      	b.n	80262f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80264c0:	2200      	movs	r2, #0
 80264c2:	e715      	b.n	80262f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80264c4:	4632      	mov	r2, r6
 80264c6:	e713      	b.n	80262f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

080264c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80264c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264cc:	b09b      	sub	sp, #108	@ 0x6c
 80264ce:	9218      	str	r2, [sp, #96]	@ 0x60
 80264d0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80264d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80264d4:	9116      	str	r1, [sp, #88]	@ 0x58
 80264d6:	6850      	ldr	r0, [r2, #4]
 80264d8:	9307      	str	r3, [sp, #28]
 80264da:	6812      	ldr	r2, [r2, #0]
 80264dc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80264e0:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 80264e4:	fb00 1303 	mla	r3, r0, r3, r1
 80264e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80264ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80264ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80264f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80264f6:	2b00      	cmp	r3, #0
 80264f8:	dc03      	bgt.n	8026502 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80264fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80264fc:	2b00      	cmp	r3, #0
 80264fe:	f340 8387 	ble.w	8026c10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026502:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026504:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026508:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802650c:	1e48      	subs	r0, r1, #1
 802650e:	1e57      	subs	r7, r2, #1
 8026510:	9b07      	ldr	r3, [sp, #28]
 8026512:	2b00      	cmp	r3, #0
 8026514:	f340 8166 	ble.w	80267e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8026518:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802651c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026520:	d406      	bmi.n	8026530 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026522:	4584      	cmp	ip, r0
 8026524:	da04      	bge.n	8026530 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026526:	2b00      	cmp	r3, #0
 8026528:	db02      	blt.n	8026530 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802652a:	42bb      	cmp	r3, r7
 802652c:	f2c0 815b 	blt.w	80267e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026530:	f11c 0c01 	adds.w	ip, ip, #1
 8026534:	f100 814b 	bmi.w	80267ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026538:	4561      	cmp	r1, ip
 802653a:	f2c0 8148 	blt.w	80267ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802653e:	3301      	adds	r3, #1
 8026540:	f100 8145 	bmi.w	80267ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026544:	429a      	cmp	r2, r3
 8026546:	f2c0 8142 	blt.w	80267ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802654a:	9b07      	ldr	r3, [sp, #28]
 802654c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802654e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026550:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026552:	2b00      	cmp	r3, #0
 8026554:	f340 8165 	ble.w	8026822 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026558:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802655a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802655e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026560:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026564:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026568:	1422      	asrs	r2, r4, #16
 802656a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802656e:	689b      	ldr	r3, [r3, #8]
 8026570:	f100 81d5 	bmi.w	802691e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026574:	f103 38ff 	add.w	r8, r3, #4294967295
 8026578:	4542      	cmp	r2, r8
 802657a:	f280 81d0 	bge.w	802691e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802657e:	f1bc 0f00 	cmp.w	ip, #0
 8026582:	f2c0 81cc 	blt.w	802691e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026586:	f10e 38ff 	add.w	r8, lr, #4294967295
 802658a:	45c4      	cmp	ip, r8
 802658c:	f280 81c7 	bge.w	802691e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026590:	b21b      	sxth	r3, r3
 8026592:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026594:	fb0c 2203 	mla	r2, ip, r3, r2
 8026598:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802659c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80265a0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80265a4:	2900      	cmp	r1, #0
 80265a6:	f000 8182 	beq.w	80268ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80265aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80265ae:	950b      	str	r5, [sp, #44]	@ 0x2c
 80265b0:	0e2d      	lsrs	r5, r5, #24
 80265b2:	9512      	str	r5, [sp, #72]	@ 0x48
 80265b4:	b180      	cbz	r0, 80265d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80265b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80265ba:	3b01      	subs	r3, #1
 80265bc:	009b      	lsls	r3, r3, #2
 80265be:	3304      	adds	r3, #4
 80265c0:	eb08 0c03 	add.w	ip, r8, r3
 80265c4:	f858 3003 	ldr.w	r3, [r8, r3]
 80265c8:	9308      	str	r3, [sp, #32]
 80265ca:	0e1b      	lsrs	r3, r3, #24
 80265cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80265ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80265d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80265d4:	0e1b      	lsrs	r3, r3, #24
 80265d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80265d8:	b289      	uxth	r1, r1
 80265da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80265dc:	b280      	uxth	r0, r0
 80265de:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80265e0:	fb01 f900 	mul.w	r9, r1, r0
 80265e4:	0109      	lsls	r1, r1, #4
 80265e6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80265ea:	eba1 0809 	sub.w	r8, r1, r9
 80265ee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80265f2:	b280      	uxth	r0, r0
 80265f4:	fa1f f888 	uxth.w	r8, r8
 80265f8:	1a09      	subs	r1, r1, r0
 80265fa:	fb08 f303 	mul.w	r3, r8, r3
 80265fe:	b289      	uxth	r1, r1
 8026600:	fb01 330e 	mla	r3, r1, lr, r3
 8026604:	fb00 3305 	mla	r3, r0, r5, r3
 8026608:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802660a:	fb09 3305 	mla	r3, r9, r5, r3
 802660e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026612:	2b00      	cmp	r3, #0
 8026614:	f000 80d2 	beq.w	80267bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026618:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802661c:	d01b      	beq.n	8026656 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802661e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8026622:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026626:	fb0e fa0a 	mul.w	sl, lr, sl
 802662a:	fb0e fe02 	mul.w	lr, lr, r2
 802662e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026632:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026636:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802663a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802663e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026642:	4452      	add	r2, sl
 8026644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026648:	0a12      	lsrs	r2, r2, #8
 802664a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802664e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026652:	ea42 020c 	orr.w	r2, r2, ip
 8026656:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026658:	2dff      	cmp	r5, #255	@ 0xff
 802665a:	d021      	beq.n	80266a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802665c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802665e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026662:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026664:	fb05 fb0b 	mul.w	fp, r5, fp
 8026668:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802666a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802666e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026670:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026674:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026678:	fb05 fa0a 	mul.w	sl, r5, sl
 802667c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026680:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026684:	44de      	add	lr, fp
 8026686:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802668a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802668e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026692:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026696:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802669a:	ea4e 050a 	orr.w	r5, lr, sl
 802669e:	950b      	str	r5, [sp, #44]	@ 0x2c
 80266a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80266a2:	2dff      	cmp	r5, #255	@ 0xff
 80266a4:	d021      	beq.n	80266ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80266a6:	9d08      	ldr	r5, [sp, #32]
 80266a8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80266ac:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80266ae:	fb05 fb0b 	mul.w	fp, r5, fp
 80266b2:	9d08      	ldr	r5, [sp, #32]
 80266b4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80266b8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80266ba:	fb05 fa0e 	mul.w	sl, r5, lr
 80266be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266c2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80266c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80266ca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80266ce:	44de      	add	lr, fp
 80266d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80266e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80266e4:	ea4e 050a 	orr.w	r5, lr, sl
 80266e8:	9508      	str	r5, [sp, #32]
 80266ea:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80266ec:	2dff      	cmp	r5, #255	@ 0xff
 80266ee:	d021      	beq.n	8026734 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80266f0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80266f2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80266f6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80266f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80266fc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80266fe:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026702:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026704:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026708:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802670c:	fb05 fa0a 	mul.w	sl, r5, sl
 8026710:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026714:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026718:	44de      	add	lr, fp
 802671a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802671e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026722:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026726:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802672a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802672e:	ea4e 050a 	orr.w	r5, lr, sl
 8026732:	950c      	str	r5, [sp, #48]	@ 0x30
 8026734:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026736:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802673a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802673e:	2bff      	cmp	r3, #255	@ 0xff
 8026740:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026744:	9d08      	ldr	r5, [sp, #32]
 8026746:	fb08 fc0c 	mul.w	ip, r8, ip
 802674a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802674e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8026752:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026754:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026758:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802675c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802675e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026762:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8026766:	fb08 f80e 	mul.w	r8, r8, lr
 802676a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802676e:	fb01 8202 	mla	r2, r1, r2, r8
 8026772:	9908      	ldr	r1, [sp, #32]
 8026774:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026778:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802677c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802677e:	fb00 220a 	mla	r2, r0, sl, r2
 8026782:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8026786:	fb09 2900 	mla	r9, r9, r0, r2
 802678a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802678e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026792:	ea4c 0c09 	orr.w	ip, ip, r9
 8026796:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802679a:	f040 8091 	bne.w	80268c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802679e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80267a2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80267a6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80267aa:	f022 0207 	bic.w	r2, r2, #7
 80267ae:	431a      	orrs	r2, r3
 80267b0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80267b4:	ea4c 0c02 	orr.w	ip, ip, r2
 80267b8:	f8a7 c000 	strh.w	ip, [r7]
 80267bc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80267be:	3702      	adds	r7, #2
 80267c0:	441c      	add	r4, r3
 80267c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80267c4:	441e      	add	r6, r3
 80267c6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80267c8:	3b01      	subs	r3, #1
 80267ca:	9317      	str	r3, [sp, #92]	@ 0x5c
 80267cc:	e6c0      	b.n	8026550 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80267ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80267d0:	441c      	add	r4, r3
 80267d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80267d4:	441e      	add	r6, r3
 80267d6:	9b07      	ldr	r3, [sp, #28]
 80267d8:	3b01      	subs	r3, #1
 80267da:	9307      	str	r3, [sp, #28]
 80267dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80267de:	3302      	adds	r3, #2
 80267e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80267e2:	e695      	b.n	8026510 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80267e4:	d024      	beq.n	8026830 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80267e6:	9b07      	ldr	r3, [sp, #28]
 80267e8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80267ea:	3b01      	subs	r3, #1
 80267ec:	fb00 4003 	mla	r0, r0, r3, r4
 80267f0:	1400      	asrs	r0, r0, #16
 80267f2:	f53f aeaa 	bmi.w	802654a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80267f6:	3901      	subs	r1, #1
 80267f8:	4288      	cmp	r0, r1
 80267fa:	f6bf aea6 	bge.w	802654a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80267fe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8026800:	fb01 6303 	mla	r3, r1, r3, r6
 8026804:	141b      	asrs	r3, r3, #16
 8026806:	f53f aea0 	bmi.w	802654a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802680a:	3a01      	subs	r2, #1
 802680c:	4293      	cmp	r3, r2
 802680e:	f6bf ae9c 	bge.w	802654a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026812:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026816:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802681a:	f1bb 0f00 	cmp.w	fp, #0
 802681e:	f300 809a 	bgt.w	8026956 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026822:	9b07      	ldr	r3, [sp, #28]
 8026824:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802682a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802682e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026830:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026832:	2b00      	cmp	r3, #0
 8026834:	f340 81ec 	ble.w	8026c10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802683c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802683e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026842:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026846:	eef0 6a62 	vmov.f32	s13, s5
 802684a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802684e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026852:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026856:	ee16 4a90 	vmov	r4, s13
 802685a:	eef0 6a43 	vmov.f32	s13, s6
 802685e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026862:	ee16 6a90 	vmov	r6, s13
 8026866:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802686a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802686e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026872:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802687a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802687e:	ee12 2a90 	vmov	r2, s5
 8026882:	eef0 2a47 	vmov.f32	s5, s14
 8026886:	fb92 f3f3 	sdiv	r3, r2, r3
 802688a:	ee13 2a10 	vmov	r2, s6
 802688e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8026890:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026892:	eeb0 3a67 	vmov.f32	s6, s15
 8026896:	fb92 f3f3 	sdiv	r3, r2, r3
 802689a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802689c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802689e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80268a0:	3b01      	subs	r3, #1
 80268a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80268a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80268a6:	bf08      	it	eq
 80268a8:	4613      	moveq	r3, r2
 80268aa:	9307      	str	r3, [sp, #28]
 80268ac:	e622      	b.n	80264f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80268ae:	2800      	cmp	r0, #0
 80268b0:	f43f ae92 	beq.w	80265d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80268b4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80268b8:	9308      	str	r3, [sp, #32]
 80268ba:	0e1b      	lsrs	r3, r3, #24
 80268bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80268be:	e68b      	b.n	80265d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80268c0:	8839      	ldrh	r1, [r7, #0]
 80268c2:	43db      	mvns	r3, r3
 80268c4:	4dd4      	ldr	r5, [pc, #848]	@ (8026c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80268c6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80268ca:	fa5f f883 	uxtb.w	r8, r3
 80268ce:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80268d2:	10c8      	asrs	r0, r1, #3
 80268d4:	00cb      	lsls	r3, r1, #3
 80268d6:	fb0e fe08 	mul.w	lr, lr, r8
 80268da:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80268de:	b2db      	uxtb	r3, r3
 80268e0:	f10e 0101 	add.w	r1, lr, #1
 80268e4:	fb00 f008 	mul.w	r0, r0, r8
 80268e8:	fb03 f308 	mul.w	r3, r3, r8
 80268ec:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80268f0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80268f4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80268f8:	f100 0e01 	add.w	lr, r0, #1
 80268fc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8026900:	b2c9      	uxtb	r1, r1
 8026902:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026906:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802690a:	00d2      	lsls	r2, r2, #3
 802690c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026910:	430a      	orrs	r2, r1
 8026912:	1c59      	adds	r1, r3, #1
 8026914:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026918:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802691c:	e748      	b.n	80267b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802691e:	f112 0801 	adds.w	r8, r2, #1
 8026922:	f53f af4b 	bmi.w	80267bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026926:	4543      	cmp	r3, r8
 8026928:	f6ff af48 	blt.w	80267bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802692c:	f11c 0801 	adds.w	r8, ip, #1
 8026930:	f53f af44 	bmi.w	80267bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026934:	45c6      	cmp	lr, r8
 8026936:	f6ff af41 	blt.w	80267bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802693a:	b21b      	sxth	r3, r3
 802693c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026940:	fa0f f28e 	sxth.w	r2, lr
 8026944:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026948:	9200      	str	r2, [sp, #0]
 802694a:	4639      	mov	r1, r7
 802694c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802694e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026950:	f7ff fc88 	bl	8026264 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8026954:	e732      	b.n	80267bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026956:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026958:	1421      	asrs	r1, r4, #16
 802695a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802695c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026960:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8026964:	1433      	asrs	r3, r6, #16
 8026966:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802696a:	fb07 1303 	mla	r3, r7, r3, r1
 802696e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8026970:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8026974:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026978:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802697c:	2a00      	cmp	r2, #0
 802697e:	f000 8108 	beq.w	8026b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8026982:	684d      	ldr	r5, [r1, #4]
 8026984:	950d      	str	r5, [sp, #52]	@ 0x34
 8026986:	0e2d      	lsrs	r5, r5, #24
 8026988:	9514      	str	r5, [sp, #80]	@ 0x50
 802698a:	b178      	cbz	r0, 80269ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802698c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8026990:	3f01      	subs	r7, #1
 8026992:	00bf      	lsls	r7, r7, #2
 8026994:	3704      	adds	r7, #4
 8026996:	eb01 0e07 	add.w	lr, r1, r7
 802699a:	59c9      	ldr	r1, [r1, r7]
 802699c:	9109      	str	r1, [sp, #36]	@ 0x24
 802699e:	0e09      	lsrs	r1, r1, #24
 80269a0:	9111      	str	r1, [sp, #68]	@ 0x44
 80269a2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80269a6:	910e      	str	r1, [sp, #56]	@ 0x38
 80269a8:	0e09      	lsrs	r1, r1, #24
 80269aa:	9115      	str	r1, [sp, #84]	@ 0x54
 80269ac:	b292      	uxth	r2, r2
 80269ae:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80269b0:	b280      	uxth	r0, r0
 80269b2:	fb02 f900 	mul.w	r9, r2, r0
 80269b6:	0112      	lsls	r2, r2, #4
 80269b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80269bc:	eba2 0e09 	sub.w	lr, r2, r9
 80269c0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80269c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80269c6:	b280      	uxth	r0, r0
 80269c8:	fa1f fe8e 	uxth.w	lr, lr
 80269cc:	1a09      	subs	r1, r1, r0
 80269ce:	fb0e f202 	mul.w	r2, lr, r2
 80269d2:	b289      	uxth	r1, r1
 80269d4:	fb01 220c 	mla	r2, r1, ip, r2
 80269d8:	fb00 2205 	mla	r2, r0, r5, r2
 80269dc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80269de:	fb09 2205 	mla	r2, r9, r5, r2
 80269e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80269e6:	2a00      	cmp	r2, #0
 80269e8:	f000 80ca 	beq.w	8026b80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80269ec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80269f0:	d019      	beq.n	8026a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80269f2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80269f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80269fa:	fb0c fa0a 	mul.w	sl, ip, sl
 80269fe:	fb0c fc03 	mul.w	ip, ip, r3
 8026a02:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026a06:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026a0a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026a0e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026a12:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026a16:	4453      	add	r3, sl
 8026a18:	0a3f      	lsrs	r7, r7, #8
 8026a1a:	0a1b      	lsrs	r3, r3, #8
 8026a1c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026a20:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026a24:	433b      	orrs	r3, r7
 8026a26:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026a28:	2dff      	cmp	r5, #255	@ 0xff
 8026a2a:	d020      	beq.n	8026a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8026a2c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026a2e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026a32:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026a34:	436f      	muls	r7, r5
 8026a36:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026a38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a3c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026a40:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026a42:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026a46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a4a:	fb05 fa0a 	mul.w	sl, r5, sl
 8026a4e:	44bc      	add	ip, r7
 8026a50:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026a54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a5c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a64:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026a68:	ea4c 050a 	orr.w	r5, ip, sl
 8026a6c:	950d      	str	r5, [sp, #52]	@ 0x34
 8026a6e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026a70:	2dff      	cmp	r5, #255	@ 0xff
 8026a72:	d020      	beq.n	8026ab6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8026a74:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026a76:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026a7a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026a7c:	436f      	muls	r7, r5
 8026a7e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026a80:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8026a84:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026a86:	fb05 fa0c 	mul.w	sl, r5, ip
 8026a8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a8e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026a92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a96:	44bc      	add	ip, r7
 8026a98:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026a9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026aa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026aa4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026aa8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026aac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026ab0:	ea4c 050a 	orr.w	r5, ip, sl
 8026ab4:	9509      	str	r5, [sp, #36]	@ 0x24
 8026ab6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026ab8:	2dff      	cmp	r5, #255	@ 0xff
 8026aba:	d020      	beq.n	8026afe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8026abc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026abe:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026ac2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026ac4:	436f      	muls	r7, r5
 8026ac6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026ac8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026acc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026ad0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026ad2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026ad6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ada:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ade:	44bc      	add	ip, r7
 8026ae0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ae8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026aec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026af0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026af4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026af8:	ea4c 050a 	orr.w	r5, ip, sl
 8026afc:	950e      	str	r5, [sp, #56]	@ 0x38
 8026afe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026b00:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026b04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026b08:	2aff      	cmp	r2, #255	@ 0xff
 8026b0a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026b0e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026b10:	fb0e f707 	mul.w	r7, lr, r7
 8026b14:	fb01 770c 	mla	r7, r1, ip, r7
 8026b18:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026b1c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026b1e:	fb00 770c 	mla	r7, r0, ip, r7
 8026b22:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026b26:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026b28:	fb09 770c 	mla	r7, r9, ip, r7
 8026b2c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8026b30:	fb0e fe0c 	mul.w	lr, lr, ip
 8026b34:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8026b38:	fb01 e303 	mla	r3, r1, r3, lr
 8026b3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026b3e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026b42:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026b46:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026b48:	fb00 330a 	mla	r3, r0, sl, r3
 8026b4c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8026b50:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026b54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b58:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026b5c:	ea47 070c 	orr.w	r7, r7, ip
 8026b60:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8026b64:	d11e      	bne.n	8026ba4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8026b66:	097a      	lsrs	r2, r7, #5
 8026b68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8026b6c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8026b70:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026b74:	f023 0307 	bic.w	r3, r3, #7
 8026b78:	4313      	orrs	r3, r2
 8026b7a:	431f      	orrs	r7, r3
 8026b7c:	f8a8 7000 	strh.w	r7, [r8]
 8026b80:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026b82:	f108 0802 	add.w	r8, r8, #2
 8026b86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026b8a:	441c      	add	r4, r3
 8026b8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026b8e:	441e      	add	r6, r3
 8026b90:	e643      	b.n	802681a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8026b92:	2800      	cmp	r0, #0
 8026b94:	f43f af0a 	beq.w	80269ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8026b98:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8026b9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8026b9e:	0e09      	lsrs	r1, r1, #24
 8026ba0:	9111      	str	r1, [sp, #68]	@ 0x44
 8026ba2:	e703      	b.n	80269ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8026ba4:	f8b8 1000 	ldrh.w	r1, [r8]
 8026ba8:	43d2      	mvns	r2, r2
 8026baa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8026bae:	fa5f fe82 	uxtb.w	lr, r2
 8026bb2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8026bb6:	10c8      	asrs	r0, r1, #3
 8026bb8:	00ca      	lsls	r2, r1, #3
 8026bba:	fb0c fc0e 	mul.w	ip, ip, lr
 8026bbe:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026bc2:	b2d2      	uxtb	r2, r2
 8026bc4:	f10c 0101 	add.w	r1, ip, #1
 8026bc8:	fb00 f00e 	mul.w	r0, r0, lr
 8026bcc:	fb02 f20e 	mul.w	r2, r2, lr
 8026bd0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026bd4:	0c39      	lsrs	r1, r7, #16
 8026bd6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026bda:	490f      	ldr	r1, [pc, #60]	@ (8026c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8026bdc:	fa5f fc8c 	uxtb.w	ip, ip
 8026be0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8026be4:	1c41      	adds	r1, r0, #1
 8026be6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026bea:	1c51      	adds	r1, r2, #1
 8026bec:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026bf0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026bf4:	00c0      	lsls	r0, r0, #3
 8026bf6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026bfa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026bfe:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8026c02:	ea4c 0c00 	orr.w	ip, ip, r0
 8026c06:	ea47 0c0c 	orr.w	ip, r7, ip
 8026c0a:	f8a8 c000 	strh.w	ip, [r8]
 8026c0e:	e7b7      	b.n	8026b80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8026c10:	b01b      	add	sp, #108	@ 0x6c
 8026c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c16:	bf00      	nop
 8026c18:	fffff800 	.word	0xfffff800

08026c1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8026c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c20:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8026c24:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8026c28:	2d00      	cmp	r5, #0
 8026c2a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8026c2e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8026c32:	fb05 0e03 	mla	lr, r5, r3, r0
 8026c36:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8026c3a:	f2c0 808c 	blt.w	8026d56 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8026c3e:	45a9      	cmp	r9, r5
 8026c40:	f340 8089 	ble.w	8026d56 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8026c44:	2800      	cmp	r0, #0
 8026c46:	f2c0 8084 	blt.w	8026d52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8026c4a:	4580      	cmp	r8, r0
 8026c4c:	f340 8081 	ble.w	8026d52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8026c50:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8026c54:	f01e 0f01 	tst.w	lr, #1
 8026c58:	5d16      	ldrb	r6, [r2, r4]
 8026c5a:	bf0c      	ite	eq
 8026c5c:	f006 060f 	andeq.w	r6, r6, #15
 8026c60:	1136      	asrne	r6, r6, #4
 8026c62:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026c66:	b2f6      	uxtb	r6, r6
 8026c68:	1c44      	adds	r4, r0, #1
 8026c6a:	d477      	bmi.n	8026d5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8026c6c:	45a0      	cmp	r8, r4
 8026c6e:	dd75      	ble.n	8026d5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8026c70:	2f00      	cmp	r7, #0
 8026c72:	d075      	beq.n	8026d60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8026c74:	f10e 0a01 	add.w	sl, lr, #1
 8026c78:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8026c7c:	f01a 0f01 	tst.w	sl, #1
 8026c80:	5d14      	ldrb	r4, [r2, r4]
 8026c82:	bf0c      	ite	eq
 8026c84:	f004 040f 	andeq.w	r4, r4, #15
 8026c88:	1124      	asrne	r4, r4, #4
 8026c8a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026c8e:	b2e4      	uxtb	r4, r4
 8026c90:	3501      	adds	r5, #1
 8026c92:	d469      	bmi.n	8026d68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8026c94:	45a9      	cmp	r9, r5
 8026c96:	dd67      	ble.n	8026d68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8026c98:	f1bc 0f00 	cmp.w	ip, #0
 8026c9c:	d067      	beq.n	8026d6e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8026c9e:	2800      	cmp	r0, #0
 8026ca0:	db60      	blt.n	8026d64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8026ca2:	4580      	cmp	r8, r0
 8026ca4:	dd5e      	ble.n	8026d64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8026ca6:	eb03 090e 	add.w	r9, r3, lr
 8026caa:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8026cae:	f019 0f01 	tst.w	r9, #1
 8026cb2:	5d55      	ldrb	r5, [r2, r5]
 8026cb4:	bf0c      	ite	eq
 8026cb6:	f005 050f 	andeq.w	r5, r5, #15
 8026cba:	112d      	asrne	r5, r5, #4
 8026cbc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8026cc0:	b2ed      	uxtb	r5, r5
 8026cc2:	3001      	adds	r0, #1
 8026cc4:	d456      	bmi.n	8026d74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8026cc6:	4580      	cmp	r8, r0
 8026cc8:	dd54      	ble.n	8026d74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8026cca:	2f00      	cmp	r7, #0
 8026ccc:	d054      	beq.n	8026d78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8026cce:	3301      	adds	r3, #1
 8026cd0:	449e      	add	lr, r3
 8026cd2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026cd6:	f01e 0f01 	tst.w	lr, #1
 8026cda:	5cd0      	ldrb	r0, [r2, r3]
 8026cdc:	bf0c      	ite	eq
 8026cde:	f000 000f 	andeq.w	r0, r0, #15
 8026ce2:	1100      	asrne	r0, r0, #4
 8026ce4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026ce8:	b2c3      	uxtb	r3, r0
 8026cea:	b2ba      	uxth	r2, r7
 8026cec:	fa1f fc8c 	uxth.w	ip, ip
 8026cf0:	fb02 f00c 	mul.w	r0, r2, ip
 8026cf4:	0112      	lsls	r2, r2, #4
 8026cf6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8026cfa:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8026cfe:	1a12      	subs	r2, r2, r0
 8026d00:	fa1f fc8c 	uxth.w	ip, ip
 8026d04:	b292      	uxth	r2, r2
 8026d06:	eba7 070c 	sub.w	r7, r7, ip
 8026d0a:	4362      	muls	r2, r4
 8026d0c:	b2bf      	uxth	r7, r7
 8026d0e:	fb06 2207 	mla	r2, r6, r7, r2
 8026d12:	fb0c 2505 	mla	r5, ip, r5, r2
 8026d16:	fb00 5303 	mla	r3, r0, r3, r5
 8026d1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026d1e:	b1b3      	cbz	r3, 8026d4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8026d20:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8026d24:	435a      	muls	r2, r3
 8026d26:	1c53      	adds	r3, r2, #1
 8026d28:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8026de4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8026d2e:	121b      	asrs	r3, r3, #8
 8026d30:	6812      	ldr	r2, [r2, #0]
 8026d32:	2bff      	cmp	r3, #255	@ 0xff
 8026d34:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8026d38:	d120      	bne.n	8026d7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8026d3a:	0950      	lsrs	r0, r2, #5
 8026d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8026de8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8026d3e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026d42:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026d46:	4033      	ands	r3, r6
 8026d48:	4318      	orrs	r0, r3
 8026d4a:	4302      	orrs	r2, r0
 8026d4c:	800a      	strh	r2, [r1, #0]
 8026d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d52:	2600      	movs	r6, #0
 8026d54:	e788      	b.n	8026c68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8026d56:	2400      	movs	r4, #0
 8026d58:	4626      	mov	r6, r4
 8026d5a:	e799      	b.n	8026c90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8026d5c:	2400      	movs	r4, #0
 8026d5e:	e797      	b.n	8026c90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8026d60:	463c      	mov	r4, r7
 8026d62:	e795      	b.n	8026c90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8026d64:	2500      	movs	r5, #0
 8026d66:	e7ac      	b.n	8026cc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8026d68:	2300      	movs	r3, #0
 8026d6a:	461d      	mov	r5, r3
 8026d6c:	e7bd      	b.n	8026cea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8026d6e:	4663      	mov	r3, ip
 8026d70:	4665      	mov	r5, ip
 8026d72:	e7ba      	b.n	8026cea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8026d74:	2300      	movs	r3, #0
 8026d76:	e7b8      	b.n	8026cea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8026d78:	463b      	mov	r3, r7
 8026d7a:	e7b6      	b.n	8026cea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8026d7c:	880d      	ldrh	r5, [r1, #0]
 8026d7e:	b29f      	uxth	r7, r3
 8026d80:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8026d84:	43db      	mvns	r3, r3
 8026d86:	122c      	asrs	r4, r5, #8
 8026d88:	fb10 f007 	smulbb	r0, r0, r7
 8026d8c:	b2db      	uxtb	r3, r3
 8026d8e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8026d92:	b2f6      	uxtb	r6, r6
 8026d94:	b2d2      	uxtb	r2, r2
 8026d96:	fb04 0403 	mla	r4, r4, r3, r0
 8026d9a:	10e8      	asrs	r0, r5, #3
 8026d9c:	fb12 f207 	smulbb	r2, r2, r7
 8026da0:	00ed      	lsls	r5, r5, #3
 8026da2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026da6:	b2a4      	uxth	r4, r4
 8026da8:	fb16 f607 	smulbb	r6, r6, r7
 8026dac:	b2ed      	uxtb	r5, r5
 8026dae:	fb00 6603 	mla	r6, r0, r3, r6
 8026db2:	fb05 2303 	mla	r3, r5, r3, r2
 8026db6:	b2b0      	uxth	r0, r6
 8026db8:	b29a      	uxth	r2, r3
 8026dba:	1c63      	adds	r3, r4, #1
 8026dbc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026dc0:	1c53      	adds	r3, r2, #1
 8026dc2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026dc6:	1c42      	adds	r2, r0, #1
 8026dc8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8026dcc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026dd0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026dd4:	0940      	lsrs	r0, r0, #5
 8026dd6:	4323      	orrs	r3, r4
 8026dd8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026ddc:	4303      	orrs	r3, r0
 8026dde:	800b      	strh	r3, [r1, #0]
 8026de0:	e7b5      	b.n	8026d4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8026de2:	bf00      	nop
 8026de4:	20027dd0 	.word	0x20027dd0
 8026de8:	00fff800 	.word	0x00fff800

08026dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026df0:	b097      	sub	sp, #92	@ 0x5c
 8026df2:	9214      	str	r2, [sp, #80]	@ 0x50
 8026df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8026df6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026df8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8026dfc:	9015      	str	r0, [sp, #84]	@ 0x54
 8026dfe:	910d      	str	r1, [sp, #52]	@ 0x34
 8026e00:	6850      	ldr	r0, [r2, #4]
 8026e02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026e04:	6812      	ldr	r2, [r2, #0]
 8026e06:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8026e0a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8026e0e:	fb00 1303 	mla	r3, r0, r3, r1
 8026e12:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8026e16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026e18:	689b      	ldr	r3, [r3, #8]
 8026e1a:	3301      	adds	r3, #1
 8026e1c:	f023 0301 	bic.w	r3, r3, #1
 8026e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026e24:	681f      	ldr	r7, [r3, #0]
 8026e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026e28:	2b00      	cmp	r3, #0
 8026e2a:	dc03      	bgt.n	8026e34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026e2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026e2e:	2b00      	cmp	r3, #0
 8026e30:	f340 8289 	ble.w	8027346 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8026e34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026e36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026e3e:	1e48      	subs	r0, r1, #1
 8026e40:	f102 3cff 	add.w	ip, r2, #4294967295
 8026e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e46:	2b00      	cmp	r3, #0
 8026e48:	f340 80c5 	ble.w	8026fd6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026e4c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026e50:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026e54:	d406      	bmi.n	8026e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026e56:	4586      	cmp	lr, r0
 8026e58:	da04      	bge.n	8026e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	db02      	blt.n	8026e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026e5e:	4563      	cmp	r3, ip
 8026e60:	f2c0 80ba 	blt.w	8026fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8026e64:	f11e 0e01 	adds.w	lr, lr, #1
 8026e68:	f100 80ab 	bmi.w	8026fc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8026e6c:	4571      	cmp	r1, lr
 8026e6e:	f2c0 80a8 	blt.w	8026fc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8026e72:	3301      	adds	r3, #1
 8026e74:	f100 80a5 	bmi.w	8026fc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8026e78:	429a      	cmp	r2, r3
 8026e7a:	f2c0 80a2 	blt.w	8026fc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8026e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e80:	46c8      	mov	r8, r9
 8026e82:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8026e86:	930e      	str	r3, [sp, #56]	@ 0x38
 8026e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e8a:	2b00      	cmp	r3, #0
 8026e8c:	f340 80c4 	ble.w	8027018 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8026e90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026e92:	1430      	asrs	r0, r6, #16
 8026e94:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026e98:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026e9c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026ea0:	1423      	asrs	r3, r4, #16
 8026ea2:	f100 814f 	bmi.w	8027144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026ea6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026eaa:	455b      	cmp	r3, fp
 8026eac:	f280 814a 	bge.w	8027144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026eb0:	2800      	cmp	r0, #0
 8026eb2:	f2c0 8147 	blt.w	8027144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026eb6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026eba:	4558      	cmp	r0, fp
 8026ebc:	f280 8142 	bge.w	8027144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026ec0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8026ec2:	fb00 3305 	mla	r3, r0, r5, r3
 8026ec6:	0858      	lsrs	r0, r3, #1
 8026ec8:	07dd      	lsls	r5, r3, #31
 8026eca:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026ece:	bf54      	ite	pl
 8026ed0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026ed4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026ed8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026edc:	fa5f fc8c 	uxtb.w	ip, ip
 8026ee0:	2a00      	cmp	r2, #0
 8026ee2:	f000 80dd 	beq.w	80270a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8026ee6:	1c58      	adds	r0, r3, #1
 8026ee8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026eec:	07c0      	lsls	r0, r0, #31
 8026eee:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026ef2:	bf54      	ite	pl
 8026ef4:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026ef8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026efc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026f00:	fa5f f08e 	uxtb.w	r0, lr
 8026f04:	9010      	str	r0, [sp, #64]	@ 0x40
 8026f06:	b1d9      	cbz	r1, 8026f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8026f08:	4453      	add	r3, sl
 8026f0a:	0858      	lsrs	r0, r3, #1
 8026f0c:	07dd      	lsls	r5, r3, #31
 8026f0e:	f103 0301 	add.w	r3, r3, #1
 8026f12:	5c38      	ldrb	r0, [r7, r0]
 8026f14:	bf54      	ite	pl
 8026f16:	f000 000f 	andpl.w	r0, r0, #15
 8026f1a:	1100      	asrmi	r0, r0, #4
 8026f1c:	07dd      	lsls	r5, r3, #31
 8026f1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026f22:	b2c0      	uxtb	r0, r0
 8026f24:	900b      	str	r0, [sp, #44]	@ 0x2c
 8026f26:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026f2a:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026f2e:	bf54      	ite	pl
 8026f30:	f00e 030f 	andpl.w	r3, lr, #15
 8026f34:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026f38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026f3c:	b2db      	uxtb	r3, r3
 8026f3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8026f40:	b292      	uxth	r2, r2
 8026f42:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026f44:	b289      	uxth	r1, r1
 8026f46:	fb02 f301 	mul.w	r3, r2, r1
 8026f4a:	0112      	lsls	r2, r2, #4
 8026f4c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026f50:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8026f54:	1ad2      	subs	r2, r2, r3
 8026f56:	b289      	uxth	r1, r1
 8026f58:	b292      	uxth	r2, r2
 8026f5a:	1a40      	subs	r0, r0, r1
 8026f5c:	436a      	muls	r2, r5
 8026f5e:	b280      	uxth	r0, r0
 8026f60:	fb0c 2c00 	mla	ip, ip, r0, r2
 8026f64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026f66:	fb01 c102 	mla	r1, r1, r2, ip
 8026f6a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026f6c:	fb03 1302 	mla	r3, r3, r2, r1
 8026f70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026f74:	b1db      	cbz	r3, 8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026f76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026f78:	4353      	muls	r3, r2
 8026f7a:	1c5a      	adds	r2, r3, #1
 8026f7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026f80:	4ac6      	ldr	r2, [pc, #792]	@ (802729c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026f82:	121b      	asrs	r3, r3, #8
 8026f84:	6812      	ldr	r2, [r2, #0]
 8026f86:	2bff      	cmp	r3, #255	@ 0xff
 8026f88:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8026f8c:	f040 8099 	bne.w	80270c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8026f90:	0953      	lsrs	r3, r2, #5
 8026f92:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8026f96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026f9a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026f9e:	f02c 0c07 	bic.w	ip, ip, #7
 8026fa2:	ea43 0c0c 	orr.w	ip, r3, ip
 8026fa6:	ea4c 0202 	orr.w	r2, ip, r2
 8026faa:	f8a8 2000 	strh.w	r2, [r8]
 8026fae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026fb0:	f108 0802 	add.w	r8, r8, #2
 8026fb4:	441c      	add	r4, r3
 8026fb6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026fb8:	441e      	add	r6, r3
 8026fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026fbc:	3b01      	subs	r3, #1
 8026fbe:	930e      	str	r3, [sp, #56]	@ 0x38
 8026fc0:	e762      	b.n	8026e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026fc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026fc4:	f109 0902 	add.w	r9, r9, #2
 8026fc8:	441c      	add	r4, r3
 8026fca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026fcc:	441e      	add	r6, r3
 8026fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026fd0:	3b01      	subs	r3, #1
 8026fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8026fd4:	e736      	b.n	8026e44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026fd6:	d024      	beq.n	8027022 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026fda:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8026fdc:	3b01      	subs	r3, #1
 8026fde:	fb00 4003 	mla	r0, r0, r3, r4
 8026fe2:	1400      	asrs	r0, r0, #16
 8026fe4:	f53f af4b 	bmi.w	8026e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026fe8:	3901      	subs	r1, #1
 8026fea:	4288      	cmp	r0, r1
 8026fec:	f6bf af47 	bge.w	8026e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026ff0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8026ff2:	fb01 6303 	mla	r3, r1, r3, r6
 8026ff6:	141b      	asrs	r3, r3, #16
 8026ff8:	f53f af41 	bmi.w	8026e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026ffc:	3a01      	subs	r2, #1
 8026ffe:	4293      	cmp	r3, r2
 8027000:	f6bf af3d 	bge.w	8026e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027004:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8027008:	46c8      	mov	r8, r9
 802700a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802700e:	930e      	str	r3, [sp, #56]	@ 0x38
 8027010:	f1bb 0f00 	cmp.w	fp, #0
 8027014:	f300 80b7 	bgt.w	8027186 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802701a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802701e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027024:	2b00      	cmp	r3, #0
 8027026:	f340 818e 	ble.w	8027346 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802702a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802702e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027030:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027034:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027038:	eef0 6a62 	vmov.f32	s13, s5
 802703c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027040:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027044:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027048:	ee16 4a90 	vmov	r4, s13
 802704c:	eef0 6a43 	vmov.f32	s13, s6
 8027050:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027054:	ee16 6a90 	vmov	r6, s13
 8027058:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802705c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027060:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027064:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027068:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802706c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027070:	ee12 2a90 	vmov	r2, s5
 8027074:	eef0 2a47 	vmov.f32	s5, s14
 8027078:	fb92 f3f3 	sdiv	r3, r2, r3
 802707c:	ee13 2a10 	vmov	r2, s6
 8027080:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027082:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027084:	eeb0 3a67 	vmov.f32	s6, s15
 8027088:	fb92 f3f3 	sdiv	r3, r2, r3
 802708c:	9324      	str	r3, [sp, #144]	@ 0x90
 802708e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027090:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027092:	3b01      	subs	r3, #1
 8027094:	930d      	str	r3, [sp, #52]	@ 0x34
 8027096:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027098:	bf08      	it	eq
 802709a:	4613      	moveq	r3, r2
 802709c:	9309      	str	r3, [sp, #36]	@ 0x24
 802709e:	e6c2      	b.n	8026e26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80270a0:	2900      	cmp	r1, #0
 80270a2:	f43f af4d 	beq.w	8026f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80270a6:	eb0a 0003 	add.w	r0, sl, r3
 80270aa:	0843      	lsrs	r3, r0, #1
 80270ac:	07c0      	lsls	r0, r0, #31
 80270ae:	5cfb      	ldrb	r3, [r7, r3]
 80270b0:	bf54      	ite	pl
 80270b2:	f003 030f 	andpl.w	r3, r3, #15
 80270b6:	111b      	asrmi	r3, r3, #4
 80270b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80270bc:	b2db      	uxtb	r3, r3
 80270be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80270c0:	e73e      	b.n	8026f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80270c2:	f8b8 e000 	ldrh.w	lr, [r8]
 80270c6:	fa1f fb83 	uxth.w	fp, r3
 80270ca:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80270ce:	43db      	mvns	r3, r3
 80270d0:	ea4f 202e 	mov.w	r0, lr, asr #8
 80270d4:	fb11 f10b 	smulbb	r1, r1, fp
 80270d8:	b2db      	uxtb	r3, r3
 80270da:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80270de:	fa5f fc8c 	uxtb.w	ip, ip
 80270e2:	b2d2      	uxtb	r2, r2
 80270e4:	fb00 1003 	mla	r0, r0, r3, r1
 80270e8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80270ec:	fb1c fc0b 	smulbb	ip, ip, fp
 80270f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80270f4:	b280      	uxth	r0, r0
 80270f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80270fa:	fb12 fb0b 	smulbb	fp, r2, fp
 80270fe:	fa5f fe8e 	uxtb.w	lr, lr
 8027102:	fb01 cc03 	mla	ip, r1, r3, ip
 8027106:	fb0e bb03 	mla	fp, lr, r3, fp
 802710a:	1c43      	adds	r3, r0, #1
 802710c:	fa1f fc8c 	uxth.w	ip, ip
 8027110:	fa1f fb8b 	uxth.w	fp, fp
 8027114:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027118:	f10c 0101 	add.w	r1, ip, #1
 802711c:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8027120:	f10b 0001 	add.w	r0, fp, #1
 8027124:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027128:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802712c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027130:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027134:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027138:	4318      	orrs	r0, r3
 802713a:	ea40 000c 	orr.w	r0, r0, ip
 802713e:	f8a8 0000 	strh.w	r0, [r8]
 8027142:	e734      	b.n	8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027144:	f113 0b01 	adds.w	fp, r3, #1
 8027148:	f53f af31 	bmi.w	8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802714c:	45dc      	cmp	ip, fp
 802714e:	f6ff af2e 	blt.w	8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027152:	f110 0b01 	adds.w	fp, r0, #1
 8027156:	f53f af2a 	bmi.w	8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802715a:	45de      	cmp	lr, fp
 802715c:	f6ff af27 	blt.w	8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027160:	9302      	str	r3, [sp, #8]
 8027162:	fa0f f38e 	sxth.w	r3, lr
 8027166:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027168:	9301      	str	r3, [sp, #4]
 802716a:	fa0f f38c 	sxth.w	r3, ip
 802716e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027172:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027176:	9300      	str	r3, [sp, #0]
 8027178:	463a      	mov	r2, r7
 802717a:	4653      	mov	r3, sl
 802717c:	4641      	mov	r1, r8
 802717e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027180:	f7ff fd4c 	bl	8026c1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8027184:	e713      	b.n	8026fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027186:	1422      	asrs	r2, r4, #16
 8027188:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802718a:	1433      	asrs	r3, r6, #16
 802718c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027190:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027194:	fb05 2303 	mla	r3, r5, r3, r2
 8027198:	085a      	lsrs	r2, r3, #1
 802719a:	07dd      	lsls	r5, r3, #31
 802719c:	5cba      	ldrb	r2, [r7, r2]
 802719e:	bf54      	ite	pl
 80271a0:	f002 020f 	andpl.w	r2, r2, #15
 80271a4:	1112      	asrmi	r2, r2, #4
 80271a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80271aa:	b2d2      	uxtb	r2, r2
 80271ac:	2900      	cmp	r1, #0
 80271ae:	d077      	beq.n	80272a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80271b0:	f103 0e01 	add.w	lr, r3, #1
 80271b4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80271b8:	f01e 0f01 	tst.w	lr, #1
 80271bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80271c0:	bf0c      	ite	eq
 80271c2:	f00c 0c0f 	andeq.w	ip, ip, #15
 80271c6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80271ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80271ce:	fa5f f58c 	uxtb.w	r5, ip
 80271d2:	9512      	str	r5, [sp, #72]	@ 0x48
 80271d4:	b308      	cbz	r0, 802721a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80271d6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80271d8:	442b      	add	r3, r5
 80271da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80271de:	07dd      	lsls	r5, r3, #31
 80271e0:	f103 0301 	add.w	r3, r3, #1
 80271e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80271e8:	bf54      	ite	pl
 80271ea:	f00c 0c0f 	andpl.w	ip, ip, #15
 80271ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80271f2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80271f6:	fa5f f58c 	uxtb.w	r5, ip
 80271fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80271fe:	950c      	str	r5, [sp, #48]	@ 0x30
 8027200:	07dd      	lsls	r5, r3, #31
 8027202:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027206:	bf54      	ite	pl
 8027208:	f00c 0c0f 	andpl.w	ip, ip, #15
 802720c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027210:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027214:	fa5f f38c 	uxtb.w	r3, ip
 8027218:	9313      	str	r3, [sp, #76]	@ 0x4c
 802721a:	b289      	uxth	r1, r1
 802721c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802721e:	b280      	uxth	r0, r0
 8027220:	fb01 f300 	mul.w	r3, r1, r0
 8027224:	0109      	lsls	r1, r1, #4
 8027226:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802722a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802722e:	1ac9      	subs	r1, r1, r3
 8027230:	b280      	uxth	r0, r0
 8027232:	b289      	uxth	r1, r1
 8027234:	ebac 0c00 	sub.w	ip, ip, r0
 8027238:	4369      	muls	r1, r5
 802723a:	fa1f fc8c 	uxth.w	ip, ip
 802723e:	fb02 120c 	mla	r2, r2, ip, r1
 8027242:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027244:	fb00 2001 	mla	r0, r0, r1, r2
 8027248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802724a:	fb03 0302 	mla	r3, r3, r2, r0
 802724e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027252:	b1d3      	cbz	r3, 802728a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027254:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027256:	4353      	muls	r3, r2
 8027258:	1c5a      	adds	r2, r3, #1
 802725a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802725e:	4a0f      	ldr	r2, [pc, #60]	@ (802729c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027260:	121b      	asrs	r3, r3, #8
 8027262:	6812      	ldr	r2, [r2, #0]
 8027264:	2bff      	cmp	r3, #255	@ 0xff
 8027266:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802726a:	d12d      	bne.n	80272c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802726c:	0953      	lsrs	r3, r2, #5
 802726e:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8027272:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027276:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802727a:	f02c 0c07 	bic.w	ip, ip, #7
 802727e:	ea43 0c0c 	orr.w	ip, r3, ip
 8027282:	ea4c 0202 	orr.w	r2, ip, r2
 8027286:	f8a8 2000 	strh.w	r2, [r8]
 802728a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802728c:	f108 0802 	add.w	r8, r8, #2
 8027290:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027294:	441c      	add	r4, r3
 8027296:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027298:	441e      	add	r6, r3
 802729a:	e6b9      	b.n	8027010 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802729c:	20027dd0 	.word	0x20027dd0
 80272a0:	2800      	cmp	r0, #0
 80272a2:	d0ba      	beq.n	802721a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80272a4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80272a6:	442b      	add	r3, r5
 80272a8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80272ac:	07db      	lsls	r3, r3, #31
 80272ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80272b2:	bf54      	ite	pl
 80272b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80272b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80272bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80272c0:	fa5f f38c 	uxtb.w	r3, ip
 80272c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80272c6:	e7a8      	b.n	802721a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80272c8:	f8b8 e000 	ldrh.w	lr, [r8]
 80272cc:	fa1f fa83 	uxth.w	sl, r3
 80272d0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80272d4:	43db      	mvns	r3, r3
 80272d6:	ea4f 202e 	mov.w	r0, lr, asr #8
 80272da:	fb11 f10a 	smulbb	r1, r1, sl
 80272de:	b2db      	uxtb	r3, r3
 80272e0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80272e4:	b2d2      	uxtb	r2, r2
 80272e6:	fa5f fc8c 	uxtb.w	ip, ip
 80272ea:	fb00 1003 	mla	r0, r0, r3, r1
 80272ee:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80272f2:	fb12 f20a 	smulbb	r2, r2, sl
 80272f6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80272fa:	b280      	uxth	r0, r0
 80272fc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027300:	fb1c fc0a 	smulbb	ip, ip, sl
 8027304:	fa5f fe8e 	uxtb.w	lr, lr
 8027308:	fb0e 2203 	mla	r2, lr, r3, r2
 802730c:	fb01 cc03 	mla	ip, r1, r3, ip
 8027310:	1c43      	adds	r3, r0, #1
 8027312:	b292      	uxth	r2, r2
 8027314:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027318:	1c51      	adds	r1, r2, #1
 802731a:	fa1f fc8c 	uxth.w	ip, ip
 802731e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8027322:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027326:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802732a:	4308      	orrs	r0, r1
 802732c:	f10c 0101 	add.w	r1, ip, #1
 8027330:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027334:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027338:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802733c:	ea40 000c 	orr.w	r0, r0, ip
 8027340:	f8a8 0000 	strh.w	r0, [r8]
 8027344:	e7a1      	b.n	802728a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027346:	b017      	add	sp, #92	@ 0x5c
 8027348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802734c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027350:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8027354:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027358:	2d00      	cmp	r5, #0
 802735a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802735e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027362:	fb05 0e03 	mla	lr, r5, r3, r0
 8027366:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802736a:	f2c0 80b0 	blt.w	80274ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802736e:	45a9      	cmp	r9, r5
 8027370:	f340 80ad 	ble.w	80274ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027374:	2800      	cmp	r0, #0
 8027376:	f2c0 80a8 	blt.w	80274ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802737a:	4580      	cmp	r8, r0
 802737c:	f340 80a5 	ble.w	80274ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027380:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027384:	f01e 0f01 	tst.w	lr, #1
 8027388:	5d16      	ldrb	r6, [r2, r4]
 802738a:	bf0c      	ite	eq
 802738c:	f006 060f 	andeq.w	r6, r6, #15
 8027390:	1136      	asrne	r6, r6, #4
 8027392:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027396:	b2f6      	uxtb	r6, r6
 8027398:	1c44      	adds	r4, r0, #1
 802739a:	f100 809b 	bmi.w	80274d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802739e:	45a0      	cmp	r8, r4
 80273a0:	f340 8098 	ble.w	80274d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80273a4:	2f00      	cmp	r7, #0
 80273a6:	f000 8097 	beq.w	80274d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80273aa:	f10e 0a01 	add.w	sl, lr, #1
 80273ae:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80273b2:	f01a 0f01 	tst.w	sl, #1
 80273b6:	5d14      	ldrb	r4, [r2, r4]
 80273b8:	bf0c      	ite	eq
 80273ba:	f004 040f 	andeq.w	r4, r4, #15
 80273be:	1124      	asrne	r4, r4, #4
 80273c0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80273c4:	b2e4      	uxtb	r4, r4
 80273c6:	3501      	adds	r5, #1
 80273c8:	f100 808a 	bmi.w	80274e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80273cc:	45a9      	cmp	r9, r5
 80273ce:	f340 8087 	ble.w	80274e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80273d2:	f1bc 0f00 	cmp.w	ip, #0
 80273d6:	f000 8086 	beq.w	80274e6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80273da:	2800      	cmp	r0, #0
 80273dc:	db7e      	blt.n	80274dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80273de:	4580      	cmp	r8, r0
 80273e0:	dd7c      	ble.n	80274dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80273e2:	eb03 090e 	add.w	r9, r3, lr
 80273e6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80273ea:	f019 0f01 	tst.w	r9, #1
 80273ee:	5d55      	ldrb	r5, [r2, r5]
 80273f0:	bf0c      	ite	eq
 80273f2:	f005 050f 	andeq.w	r5, r5, #15
 80273f6:	112d      	asrne	r5, r5, #4
 80273f8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80273fc:	b2ed      	uxtb	r5, r5
 80273fe:	3001      	adds	r0, #1
 8027400:	d474      	bmi.n	80274ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027402:	4580      	cmp	r8, r0
 8027404:	dd72      	ble.n	80274ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027406:	2f00      	cmp	r7, #0
 8027408:	d072      	beq.n	80274f0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802740a:	3301      	adds	r3, #1
 802740c:	449e      	add	lr, r3
 802740e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027412:	f01e 0f01 	tst.w	lr, #1
 8027416:	5cd0      	ldrb	r0, [r2, r3]
 8027418:	bf0c      	ite	eq
 802741a:	f000 000f 	andeq.w	r0, r0, #15
 802741e:	1100      	asrne	r0, r0, #4
 8027420:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027424:	b2c3      	uxtb	r3, r0
 8027426:	b2ba      	uxth	r2, r7
 8027428:	fa1f fc8c 	uxth.w	ip, ip
 802742c:	fb02 f00c 	mul.w	r0, r2, ip
 8027430:	0112      	lsls	r2, r2, #4
 8027432:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027436:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802743a:	1a12      	subs	r2, r2, r0
 802743c:	fa1f fc8c 	uxth.w	ip, ip
 8027440:	b292      	uxth	r2, r2
 8027442:	eba7 070c 	sub.w	r7, r7, ip
 8027446:	4362      	muls	r2, r4
 8027448:	b2bf      	uxth	r7, r7
 802744a:	fb06 2207 	mla	r2, r6, r7, r2
 802744e:	fb0c 2505 	mla	r5, ip, r5, r2
 8027452:	fb00 5303 	mla	r3, r0, r3, r5
 8027456:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802745a:	b3a3      	cbz	r3, 80274c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802745c:	4a25      	ldr	r2, [pc, #148]	@ (80274f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802745e:	880e      	ldrh	r6, [r1, #0]
 8027460:	6815      	ldr	r5, [r2, #0]
 8027462:	b29a      	uxth	r2, r3
 8027464:	1234      	asrs	r4, r6, #8
 8027466:	43db      	mvns	r3, r3
 8027468:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802746c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8027470:	b2db      	uxtb	r3, r3
 8027472:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027476:	fb10 f002 	smulbb	r0, r0, r2
 802747a:	b2ed      	uxtb	r5, r5
 802747c:	fb17 f702 	smulbb	r7, r7, r2
 8027480:	fb04 0403 	mla	r4, r4, r3, r0
 8027484:	10f0      	asrs	r0, r6, #3
 8027486:	fb15 f202 	smulbb	r2, r5, r2
 802748a:	00f6      	lsls	r6, r6, #3
 802748c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027490:	b2a4      	uxth	r4, r4
 8027492:	b2f6      	uxtb	r6, r6
 8027494:	fb00 7003 	mla	r0, r0, r3, r7
 8027498:	fb06 2303 	mla	r3, r6, r3, r2
 802749c:	b280      	uxth	r0, r0
 802749e:	b29a      	uxth	r2, r3
 80274a0:	1c63      	adds	r3, r4, #1
 80274a2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80274a6:	1c53      	adds	r3, r2, #1
 80274a8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80274ac:	1c42      	adds	r2, r0, #1
 80274ae:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80274b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80274b6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80274ba:	0940      	lsrs	r0, r0, #5
 80274bc:	4323      	orrs	r3, r4
 80274be:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80274c2:	4303      	orrs	r3, r0
 80274c4:	800b      	strh	r3, [r1, #0]
 80274c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274ca:	2600      	movs	r6, #0
 80274cc:	e764      	b.n	8027398 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 80274ce:	2400      	movs	r4, #0
 80274d0:	4626      	mov	r6, r4
 80274d2:	e778      	b.n	80273c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80274d4:	2400      	movs	r4, #0
 80274d6:	e776      	b.n	80273c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80274d8:	463c      	mov	r4, r7
 80274da:	e774      	b.n	80273c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80274dc:	2500      	movs	r5, #0
 80274de:	e78e      	b.n	80273fe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 80274e0:	2300      	movs	r3, #0
 80274e2:	461d      	mov	r5, r3
 80274e4:	e79f      	b.n	8027426 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80274e6:	4663      	mov	r3, ip
 80274e8:	4665      	mov	r5, ip
 80274ea:	e79c      	b.n	8027426 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80274ec:	2300      	movs	r3, #0
 80274ee:	e79a      	b.n	8027426 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80274f0:	463b      	mov	r3, r7
 80274f2:	e798      	b.n	8027426 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80274f4:	20027dd0 	.word	0x20027dd0

080274f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80274f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274fc:	b093      	sub	sp, #76	@ 0x4c
 80274fe:	461d      	mov	r5, r3
 8027500:	920c      	str	r2, [sp, #48]	@ 0x30
 8027502:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027504:	9011      	str	r0, [sp, #68]	@ 0x44
 8027506:	9107      	str	r1, [sp, #28]
 8027508:	6850      	ldr	r0, [r2, #4]
 802750a:	6812      	ldr	r2, [r2, #0]
 802750c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8027510:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8027514:	fb00 1303 	mla	r3, r0, r3, r1
 8027518:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802751c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802751e:	689b      	ldr	r3, [r3, #8]
 8027520:	3301      	adds	r3, #1
 8027522:	f023 0301 	bic.w	r3, r3, #1
 8027526:	9306      	str	r3, [sp, #24]
 8027528:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802752a:	681f      	ldr	r7, [r3, #0]
 802752c:	9b07      	ldr	r3, [sp, #28]
 802752e:	2b00      	cmp	r3, #0
 8027530:	dc03      	bgt.n	802753a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8027532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027534:	2b00      	cmp	r3, #0
 8027536:	f340 8267 	ble.w	8027a08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802753a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802753c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027540:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027544:	1e48      	subs	r0, r1, #1
 8027546:	f102 3cff 	add.w	ip, r2, #4294967295
 802754a:	2d00      	cmp	r5, #0
 802754c:	f340 80b7 	ble.w	80276be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027550:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027554:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027558:	d406      	bmi.n	8027568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802755a:	4586      	cmp	lr, r0
 802755c:	da04      	bge.n	8027568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802755e:	2b00      	cmp	r3, #0
 8027560:	db02      	blt.n	8027568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027562:	4563      	cmp	r3, ip
 8027564:	f2c0 80ac 	blt.w	80276c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8027568:	f11e 0e01 	adds.w	lr, lr, #1
 802756c:	f100 809f 	bmi.w	80276ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027570:	4571      	cmp	r1, lr
 8027572:	f2c0 809c 	blt.w	80276ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027576:	3301      	adds	r3, #1
 8027578:	f100 8099 	bmi.w	80276ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802757c:	429a      	cmp	r2, r3
 802757e:	f2c0 8096 	blt.w	80276ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027582:	46c8      	mov	r8, r9
 8027584:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8027588:	9509      	str	r5, [sp, #36]	@ 0x24
 802758a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802758c:	2b00      	cmp	r3, #0
 802758e:	f340 80b5 	ble.w	80276fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8027592:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027596:	1430      	asrs	r0, r6, #16
 8027598:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802759c:	9308      	str	r3, [sp, #32]
 802759e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80275a0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80275a4:	1423      	asrs	r3, r4, #16
 80275a6:	f100 813f 	bmi.w	8027828 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80275aa:	f10c 3bff 	add.w	fp, ip, #4294967295
 80275ae:	455b      	cmp	r3, fp
 80275b0:	f280 813a 	bge.w	8027828 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80275b4:	2800      	cmp	r0, #0
 80275b6:	f2c0 8137 	blt.w	8027828 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80275ba:	f10e 3bff 	add.w	fp, lr, #4294967295
 80275be:	4558      	cmp	r0, fp
 80275c0:	f280 8132 	bge.w	8027828 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80275c4:	9a06      	ldr	r2, [sp, #24]
 80275c6:	fb00 3302 	mla	r3, r0, r2, r3
 80275ca:	0858      	lsrs	r0, r3, #1
 80275cc:	07da      	lsls	r2, r3, #31
 80275ce:	9a08      	ldr	r2, [sp, #32]
 80275d0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80275d4:	bf54      	ite	pl
 80275d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80275da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80275de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80275e2:	fa5f fc8c 	uxtb.w	ip, ip
 80275e6:	2a00      	cmp	r2, #0
 80275e8:	f000 80cc 	beq.w	8027784 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80275ec:	1c58      	adds	r0, r3, #1
 80275ee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80275f2:	07c0      	lsls	r0, r0, #31
 80275f4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80275f8:	bf54      	ite	pl
 80275fa:	f00e 0e0f 	andpl.w	lr, lr, #15
 80275fe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027602:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027606:	fa5f fe8e 	uxtb.w	lr, lr
 802760a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802760e:	b1b9      	cbz	r1, 8027640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027610:	4453      	add	r3, sl
 8027612:	0858      	lsrs	r0, r3, #1
 8027614:	07da      	lsls	r2, r3, #31
 8027616:	5c38      	ldrb	r0, [r7, r0]
 8027618:	bf54      	ite	pl
 802761a:	f000 000f 	andpl.w	r0, r0, #15
 802761e:	1100      	asrmi	r0, r0, #4
 8027620:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027624:	b2c0      	uxtb	r0, r0
 8027626:	900a      	str	r0, [sp, #40]	@ 0x28
 8027628:	1c58      	adds	r0, r3, #1
 802762a:	0843      	lsrs	r3, r0, #1
 802762c:	07c2      	lsls	r2, r0, #31
 802762e:	5cfb      	ldrb	r3, [r7, r3]
 8027630:	bf54      	ite	pl
 8027632:	f003 030f 	andpl.w	r3, r3, #15
 8027636:	111b      	asrmi	r3, r3, #4
 8027638:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802763c:	b2db      	uxtb	r3, r3
 802763e:	930e      	str	r3, [sp, #56]	@ 0x38
 8027640:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027644:	b289      	uxth	r1, r1
 8027646:	fb02 f301 	mul.w	r3, r2, r1
 802764a:	0112      	lsls	r2, r2, #4
 802764c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027650:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8027654:	1ad2      	subs	r2, r2, r3
 8027656:	b289      	uxth	r1, r1
 8027658:	b292      	uxth	r2, r2
 802765a:	1a40      	subs	r0, r0, r1
 802765c:	fa1f fe80 	uxth.w	lr, r0
 8027660:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027662:	4342      	muls	r2, r0
 8027664:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802766a:	fb01 c102 	mla	r1, r1, r2, ip
 802766e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027670:	fb03 1302 	mla	r3, r3, r2, r1
 8027674:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027678:	2bff      	cmp	r3, #255	@ 0xff
 802767a:	f040 8094 	bne.w	80277a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802767e:	4bbf      	ldr	r3, [pc, #764]	@ (802797c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8027680:	681a      	ldr	r2, [r3, #0]
 8027682:	4bbf      	ldr	r3, [pc, #764]	@ (8027980 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8027684:	0951      	lsrs	r1, r2, #5
 8027686:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802768a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802768e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027692:	430b      	orrs	r3, r1
 8027694:	4313      	orrs	r3, r2
 8027696:	f8a8 3000 	strh.w	r3, [r8]
 802769a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802769c:	f108 0802 	add.w	r8, r8, #2
 80276a0:	441c      	add	r4, r3
 80276a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80276a4:	441e      	add	r6, r3
 80276a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80276a8:	3b01      	subs	r3, #1
 80276aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80276ac:	e76d      	b.n	802758a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80276ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80276b0:	3d01      	subs	r5, #1
 80276b2:	f109 0902 	add.w	r9, r9, #2
 80276b6:	441c      	add	r4, r3
 80276b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80276ba:	441e      	add	r6, r3
 80276bc:	e745      	b.n	802754a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80276be:	d021      	beq.n	8027704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80276c0:	1e6b      	subs	r3, r5, #1
 80276c2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80276c4:	fb00 4003 	mla	r0, r0, r3, r4
 80276c8:	1400      	asrs	r0, r0, #16
 80276ca:	f53f af5a 	bmi.w	8027582 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80276ce:	3901      	subs	r1, #1
 80276d0:	4288      	cmp	r0, r1
 80276d2:	f6bf af56 	bge.w	8027582 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80276d6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80276d8:	fb01 6303 	mla	r3, r1, r3, r6
 80276dc:	141b      	asrs	r3, r3, #16
 80276de:	f53f af50 	bmi.w	8027582 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80276e2:	3a01      	subs	r2, #1
 80276e4:	4293      	cmp	r3, r2
 80276e6:	f6bf af4c 	bge.w	8027582 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80276ea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80276ee:	46a8      	mov	r8, r5
 80276f0:	46ce      	mov	lr, r9
 80276f2:	9308      	str	r3, [sp, #32]
 80276f4:	f1b8 0f00 	cmp.w	r8, #0
 80276f8:	f300 80b6 	bgt.w	8027868 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80276fc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027700:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027704:	9b07      	ldr	r3, [sp, #28]
 8027706:	2b00      	cmp	r3, #0
 8027708:	f340 817e 	ble.w	8027a08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802770c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027710:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027712:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027716:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802771a:	eef0 6a62 	vmov.f32	s13, s5
 802771e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027722:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027726:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802772a:	ee16 4a90 	vmov	r4, s13
 802772e:	eef0 6a43 	vmov.f32	s13, s6
 8027732:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027736:	ee16 6a90 	vmov	r6, s13
 802773a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802773e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027742:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027746:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802774a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802774e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027752:	ee12 2a90 	vmov	r2, s5
 8027756:	eef0 2a47 	vmov.f32	s5, s14
 802775a:	fb92 f3f3 	sdiv	r3, r2, r3
 802775e:	ee13 2a10 	vmov	r2, s6
 8027762:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027764:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027766:	eeb0 3a67 	vmov.f32	s6, s15
 802776a:	fb92 f3f3 	sdiv	r3, r2, r3
 802776e:	9320      	str	r3, [sp, #128]	@ 0x80
 8027770:	9b07      	ldr	r3, [sp, #28]
 8027772:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027774:	3b01      	subs	r3, #1
 8027776:	9307      	str	r3, [sp, #28]
 8027778:	bf08      	it	eq
 802777a:	4615      	moveq	r5, r2
 802777c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802777e:	bf18      	it	ne
 8027780:	461d      	movne	r5, r3
 8027782:	e6d3      	b.n	802752c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8027784:	2900      	cmp	r1, #0
 8027786:	f43f af5b 	beq.w	8027640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802778a:	eb0a 0003 	add.w	r0, sl, r3
 802778e:	0843      	lsrs	r3, r0, #1
 8027790:	07c0      	lsls	r0, r0, #31
 8027792:	5cfb      	ldrb	r3, [r7, r3]
 8027794:	bf54      	ite	pl
 8027796:	f003 030f 	andpl.w	r3, r3, #15
 802779a:	111b      	asrmi	r3, r3, #4
 802779c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80277a0:	b2db      	uxtb	r3, r3
 80277a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80277a4:	e74c      	b.n	8027640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	f43f af77 	beq.w	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80277ac:	4a73      	ldr	r2, [pc, #460]	@ (802797c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80277ae:	fa1f fe83 	uxth.w	lr, r3
 80277b2:	f8b8 c000 	ldrh.w	ip, [r8]
 80277b6:	43db      	mvns	r3, r3
 80277b8:	6810      	ldr	r0, [r2, #0]
 80277ba:	ea4f 212c 	mov.w	r1, ip, asr #8
 80277be:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80277c2:	b2db      	uxtb	r3, r3
 80277c4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80277c8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80277cc:	fb12 f20e 	smulbb	r2, r2, lr
 80277d0:	b2c0      	uxtb	r0, r0
 80277d2:	fb1b fb0e 	smulbb	fp, fp, lr
 80277d6:	fb01 2103 	mla	r1, r1, r3, r2
 80277da:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80277de:	fb10 fe0e 	smulbb	lr, r0, lr
 80277e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80277e6:	b289      	uxth	r1, r1
 80277e8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80277ec:	fa5f fc8c 	uxtb.w	ip, ip
 80277f0:	fb02 b203 	mla	r2, r2, r3, fp
 80277f4:	1c48      	adds	r0, r1, #1
 80277f6:	fb0c e303 	mla	r3, ip, r3, lr
 80277fa:	b292      	uxth	r2, r2
 80277fc:	b29b      	uxth	r3, r3
 80277fe:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8027802:	f102 0b01 	add.w	fp, r2, #1
 8027806:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802780a:	1c59      	adds	r1, r3, #1
 802780c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8027810:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027814:	0952      	lsrs	r2, r2, #5
 8027816:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802781a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802781e:	4301      	orrs	r1, r0
 8027820:	4311      	orrs	r1, r2
 8027822:	f8a8 1000 	strh.w	r1, [r8]
 8027826:	e738      	b.n	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027828:	f113 0b01 	adds.w	fp, r3, #1
 802782c:	f53f af35 	bmi.w	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027830:	45dc      	cmp	ip, fp
 8027832:	f6ff af32 	blt.w	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027836:	f110 0b01 	adds.w	fp, r0, #1
 802783a:	f53f af2e 	bmi.w	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802783e:	45de      	cmp	lr, fp
 8027840:	f6ff af2b 	blt.w	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027844:	9302      	str	r3, [sp, #8]
 8027846:	fa0f f38e 	sxth.w	r3, lr
 802784a:	9a08      	ldr	r2, [sp, #32]
 802784c:	9301      	str	r3, [sp, #4]
 802784e:	fa0f f38c 	sxth.w	r3, ip
 8027852:	9105      	str	r1, [sp, #20]
 8027854:	4641      	mov	r1, r8
 8027856:	9300      	str	r3, [sp, #0]
 8027858:	4653      	mov	r3, sl
 802785a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802785e:	463a      	mov	r2, r7
 8027860:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027862:	f7ff fd73 	bl	802734c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8027866:	e718      	b.n	802769a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027868:	1422      	asrs	r2, r4, #16
 802786a:	9906      	ldr	r1, [sp, #24]
 802786c:	1433      	asrs	r3, r6, #16
 802786e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027872:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027876:	fb01 2303 	mla	r3, r1, r3, r2
 802787a:	085a      	lsrs	r2, r3, #1
 802787c:	07d9      	lsls	r1, r3, #31
 802787e:	5cba      	ldrb	r2, [r7, r2]
 8027880:	bf54      	ite	pl
 8027882:	f002 020f 	andpl.w	r2, r2, #15
 8027886:	1112      	asrmi	r2, r2, #4
 8027888:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802788c:	b2d2      	uxtb	r2, r2
 802788e:	2800      	cmp	r0, #0
 8027890:	d063      	beq.n	802795a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8027892:	f103 0a01 	add.w	sl, r3, #1
 8027896:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802789a:	f01a 0f01 	tst.w	sl, #1
 802789e:	5c79      	ldrb	r1, [r7, r1]
 80278a0:	bf0c      	ite	eq
 80278a2:	f001 010f 	andeq.w	r1, r1, #15
 80278a6:	1109      	asrne	r1, r1, #4
 80278a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80278ac:	b2c9      	uxtb	r1, r1
 80278ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80278b0:	f1bc 0f00 	cmp.w	ip, #0
 80278b4:	d01a      	beq.n	80278ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80278b6:	9908      	ldr	r1, [sp, #32]
 80278b8:	440b      	add	r3, r1
 80278ba:	0859      	lsrs	r1, r3, #1
 80278bc:	f013 0f01 	tst.w	r3, #1
 80278c0:	f103 0301 	add.w	r3, r3, #1
 80278c4:	5c79      	ldrb	r1, [r7, r1]
 80278c6:	bf0c      	ite	eq
 80278c8:	f001 010f 	andeq.w	r1, r1, #15
 80278cc:	1109      	asrne	r1, r1, #4
 80278ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80278d2:	b2c9      	uxtb	r1, r1
 80278d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80278d6:	0859      	lsrs	r1, r3, #1
 80278d8:	07db      	lsls	r3, r3, #31
 80278da:	5c79      	ldrb	r1, [r7, r1]
 80278dc:	bf54      	ite	pl
 80278de:	f001 010f 	andpl.w	r1, r1, #15
 80278e2:	1109      	asrmi	r1, r1, #4
 80278e4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80278e8:	b2c9      	uxtb	r1, r1
 80278ea:	9110      	str	r1, [sp, #64]	@ 0x40
 80278ec:	b280      	uxth	r0, r0
 80278ee:	fa1f fc8c 	uxth.w	ip, ip
 80278f2:	fb00 f30c 	mul.w	r3, r0, ip
 80278f6:	0100      	lsls	r0, r0, #4
 80278f8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80278fc:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8027900:	1ac0      	subs	r0, r0, r3
 8027902:	fa1f fc8c 	uxth.w	ip, ip
 8027906:	b280      	uxth	r0, r0
 8027908:	eba1 010c 	sub.w	r1, r1, ip
 802790c:	fa1f fa81 	uxth.w	sl, r1
 8027910:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027912:	4348      	muls	r0, r1
 8027914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027916:	fb02 020a 	mla	r2, r2, sl, r0
 802791a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802791e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027920:	fb03 c302 	mla	r3, r3, r2, ip
 8027924:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027928:	2bff      	cmp	r3, #255	@ 0xff
 802792a:	d12b      	bne.n	8027984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802792c:	4b13      	ldr	r3, [pc, #76]	@ (802797c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802792e:	681a      	ldr	r2, [r3, #0]
 8027930:	4b13      	ldr	r3, [pc, #76]	@ (8027980 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8027932:	0951      	lsrs	r1, r2, #5
 8027934:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027938:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802793c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027940:	430b      	orrs	r3, r1
 8027942:	4313      	orrs	r3, r2
 8027944:	f8ae 3000 	strh.w	r3, [lr]
 8027948:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802794a:	f10e 0e02 	add.w	lr, lr, #2
 802794e:	f108 38ff 	add.w	r8, r8, #4294967295
 8027952:	441c      	add	r4, r3
 8027954:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027956:	441e      	add	r6, r3
 8027958:	e6cc      	b.n	80276f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802795a:	f1bc 0f00 	cmp.w	ip, #0
 802795e:	d0c5      	beq.n	80278ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8027960:	9908      	ldr	r1, [sp, #32]
 8027962:	440b      	add	r3, r1
 8027964:	0859      	lsrs	r1, r3, #1
 8027966:	07db      	lsls	r3, r3, #31
 8027968:	5c79      	ldrb	r1, [r7, r1]
 802796a:	bf54      	ite	pl
 802796c:	f001 010f 	andpl.w	r1, r1, #15
 8027970:	1109      	asrmi	r1, r1, #4
 8027972:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027976:	b2c9      	uxtb	r1, r1
 8027978:	910b      	str	r1, [sp, #44]	@ 0x2c
 802797a:	e7b7      	b.n	80278ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802797c:	20027dd0 	.word	0x20027dd0
 8027980:	fffff800 	.word	0xfffff800
 8027984:	2b00      	cmp	r3, #0
 8027986:	d0df      	beq.n	8027948 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8027988:	4a21      	ldr	r2, [pc, #132]	@ (8027a10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802798a:	fa1f fa83 	uxth.w	sl, r3
 802798e:	f8be c000 	ldrh.w	ip, [lr]
 8027992:	43db      	mvns	r3, r3
 8027994:	6810      	ldr	r0, [r2, #0]
 8027996:	ea4f 212c 	mov.w	r1, ip, asr #8
 802799a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802799e:	b2db      	uxtb	r3, r3
 80279a0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80279a4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80279a8:	fb12 f20a 	smulbb	r2, r2, sl
 80279ac:	b2c0      	uxtb	r0, r0
 80279ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80279b2:	fb01 2103 	mla	r1, r1, r3, r2
 80279b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80279ba:	fb10 f00a 	smulbb	r0, r0, sl
 80279be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80279c2:	b289      	uxth	r1, r1
 80279c4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80279c8:	fa5f fc8c 	uxtb.w	ip, ip
 80279cc:	fb02 b203 	mla	r2, r2, r3, fp
 80279d0:	fb0c 0003 	mla	r0, ip, r3, r0
 80279d4:	1c4b      	adds	r3, r1, #1
 80279d6:	b292      	uxth	r2, r2
 80279d8:	b280      	uxth	r0, r0
 80279da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80279de:	f100 0b01 	add.w	fp, r0, #1
 80279e2:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80279e6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80279ea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80279ee:	ea4b 0101 	orr.w	r1, fp, r1
 80279f2:	f102 0b01 	add.w	fp, r2, #1
 80279f6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80279fa:	0952      	lsrs	r2, r2, #5
 80279fc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027a00:	4311      	orrs	r1, r2
 8027a02:	f8ae 1000 	strh.w	r1, [lr]
 8027a06:	e79f      	b.n	8027948 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8027a08:	b013      	add	sp, #76	@ 0x4c
 8027a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a0e:	bf00      	nop
 8027a10:	20027dd0 	.word	0x20027dd0

08027a14 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8027a14:	b570      	push	{r4, r5, r6, lr}
 8027a16:	1208      	asrs	r0, r1, #8
 8027a18:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8027a1c:	b29e      	uxth	r6, r3
 8027a1e:	1213      	asrs	r3, r2, #8
 8027a20:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027a24:	10cc      	asrs	r4, r1, #3
 8027a26:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027a2a:	00c9      	lsls	r1, r1, #3
 8027a2c:	fb10 f006 	smulbb	r0, r0, r6
 8027a30:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8027a34:	fb13 f305 	smulbb	r3, r3, r5
 8027a38:	fb14 f406 	smulbb	r4, r4, r6
 8027a3c:	4418      	add	r0, r3
 8027a3e:	10d3      	asrs	r3, r2, #3
 8027a40:	00d2      	lsls	r2, r2, #3
 8027a42:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8027a46:	b280      	uxth	r0, r0
 8027a48:	b2d2      	uxtb	r2, r2
 8027a4a:	fb13 f305 	smulbb	r3, r3, r5
 8027a4e:	fb12 f205 	smulbb	r2, r2, r5
 8027a52:	441c      	add	r4, r3
 8027a54:	b2cb      	uxtb	r3, r1
 8027a56:	fb13 f306 	smulbb	r3, r3, r6
 8027a5a:	b2a4      	uxth	r4, r4
 8027a5c:	4413      	add	r3, r2
 8027a5e:	1c42      	adds	r2, r0, #1
 8027a60:	b29b      	uxth	r3, r3
 8027a62:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027a66:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8027a6a:	1c58      	adds	r0, r3, #1
 8027a6c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027a70:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027a74:	4310      	orrs	r0, r2
 8027a76:	1c62      	adds	r2, r4, #1
 8027a78:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027a7c:	0964      	lsrs	r4, r4, #5
 8027a7e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8027a82:	4320      	orrs	r0, r4
 8027a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08027a88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8027a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a8c:	b08f      	sub	sp, #60	@ 0x3c
 8027a8e:	461c      	mov	r4, r3
 8027a90:	460d      	mov	r5, r1
 8027a92:	4616      	mov	r6, r2
 8027a94:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8027a98:	9004      	str	r0, [sp, #16]
 8027a9a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027a9c:	2f00      	cmp	r7, #0
 8027a9e:	f000 80f6 	beq.w	8027c8e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8027aa2:	6820      	ldr	r0, [r4, #0]
 8027aa4:	aa0a      	add	r2, sp, #40	@ 0x28
 8027aa6:	6861      	ldr	r1, [r4, #4]
 8027aa8:	f04f 0802 	mov.w	r8, #2
 8027aac:	3604      	adds	r6, #4
 8027aae:	c203      	stmia	r2!, {r0, r1}
 8027ab0:	6818      	ldr	r0, [r3, #0]
 8027ab2:	aa0c      	add	r2, sp, #48	@ 0x30
 8027ab4:	6859      	ldr	r1, [r3, #4]
 8027ab6:	c203      	stmia	r2!, {r0, r1}
 8027ab8:	a80a      	add	r0, sp, #40	@ 0x28
 8027aba:	f7ee fc1d 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027abe:	4621      	mov	r1, r4
 8027ac0:	a80c      	add	r0, sp, #48	@ 0x30
 8027ac2:	f7ee fc5d 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027ac6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8027aca:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8027ace:	f002 0301 	and.w	r3, r2, #1
 8027ad2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8027ad6:	9306      	str	r3, [sp, #24]
 8027ad8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8027adc:	f003 0101 	and.w	r1, r3, #1
 8027ae0:	9105      	str	r1, [sp, #20]
 8027ae2:	9805      	ldr	r0, [sp, #20]
 8027ae4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8027ae8:	4403      	add	r3, r0
 8027aea:	fb01 2303 	mla	r3, r1, r3, r2
 8027aee:	fb93 f3f8 	sdiv	r3, r3, r8
 8027af2:	441d      	add	r5, r3
 8027af4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8027af8:	441a      	add	r2, r3
 8027afa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8027afe:	4419      	add	r1, r3
 8027b00:	4b64      	ldr	r3, [pc, #400]	@ (8027c94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8027b02:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8027b06:	6818      	ldr	r0, [r3, #0]
 8027b08:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8027b0c:	6803      	ldr	r3, [r0, #0]
 8027b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027b10:	4798      	blx	r3
 8027b12:	4a61      	ldr	r2, [pc, #388]	@ (8027c98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8027b14:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8027b18:	2fff      	cmp	r7, #255	@ 0xff
 8027b1a:	8813      	ldrh	r3, [r2, #0]
 8027b1c:	4611      	mov	r1, r2
 8027b1e:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8027b22:	fb03 fb0b 	mul.w	fp, r3, fp
 8027b26:	fb03 a404 	mla	r4, r3, r4, sl
 8027b2a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8027b2e:	d06b      	beq.n	8027c08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8027b30:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8027b34:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8027b38:	9303      	str	r3, [sp, #12]
 8027b3a:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8027b3e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8027b42:	9b07      	ldr	r3, [sp, #28]
 8027b44:	42a3      	cmp	r3, r4
 8027b46:	f240 809d 	bls.w	8027c84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8027b4a:	9b06      	ldr	r3, [sp, #24]
 8027b4c:	2b00      	cmp	r3, #0
 8027b4e:	d039      	beq.n	8027bc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8027b50:	782b      	ldrb	r3, [r5, #0]
 8027b52:	f105 0801 	add.w	r8, r5, #1
 8027b56:	f109 3bff 	add.w	fp, r9, #4294967295
 8027b5a:	8822      	ldrh	r2, [r4, #0]
 8027b5c:	f003 030f 	and.w	r3, r3, #15
 8027b60:	9804      	ldr	r0, [sp, #16]
 8027b62:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8027b66:	9b03      	ldr	r3, [sp, #12]
 8027b68:	9300      	str	r3, [sp, #0]
 8027b6a:	463b      	mov	r3, r7
 8027b6c:	f7ff ff52 	bl	8027a14 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8027b70:	f824 0b02 	strh.w	r0, [r4], #2
 8027b74:	f1bb 0f01 	cmp.w	fp, #1
 8027b78:	46a2      	mov	sl, r4
 8027b7a:	f104 0404 	add.w	r4, r4, #4
 8027b7e:	dd24      	ble.n	8027bca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8027b80:	f898 3000 	ldrb.w	r3, [r8]
 8027b84:	f1ab 0b02 	sub.w	fp, fp, #2
 8027b88:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8027b8c:	091b      	lsrs	r3, r3, #4
 8027b8e:	9804      	ldr	r0, [sp, #16]
 8027b90:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8027b94:	9b03      	ldr	r3, [sp, #12]
 8027b96:	9300      	str	r3, [sp, #0]
 8027b98:	463b      	mov	r3, r7
 8027b9a:	f7ff ff3b 	bl	8027a14 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8027b9e:	f824 0c04 	strh.w	r0, [r4, #-4]
 8027ba2:	f818 3b01 	ldrb.w	r3, [r8], #1
 8027ba6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8027baa:	f003 030f 	and.w	r3, r3, #15
 8027bae:	9804      	ldr	r0, [sp, #16]
 8027bb0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8027bb4:	9b03      	ldr	r3, [sp, #12]
 8027bb6:	9300      	str	r3, [sp, #0]
 8027bb8:	463b      	mov	r3, r7
 8027bba:	f7ff ff2b 	bl	8027a14 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8027bbe:	f824 0c02 	strh.w	r0, [r4, #-2]
 8027bc2:	e7d7      	b.n	8027b74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8027bc4:	46a8      	mov	r8, r5
 8027bc6:	46cb      	mov	fp, r9
 8027bc8:	e7d4      	b.n	8027b74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8027bca:	d10e      	bne.n	8027bea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8027bcc:	f898 3000 	ldrb.w	r3, [r8]
 8027bd0:	f8ba 2000 	ldrh.w	r2, [sl]
 8027bd4:	091b      	lsrs	r3, r3, #4
 8027bd6:	9804      	ldr	r0, [sp, #16]
 8027bd8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8027bdc:	9b03      	ldr	r3, [sp, #12]
 8027bde:	9300      	str	r3, [sp, #0]
 8027be0:	463b      	mov	r3, r7
 8027be2:	f7ff ff17 	bl	8027a14 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8027be6:	f82a 0b02 	strh.w	r0, [sl], #2
 8027bea:	9b08      	ldr	r3, [sp, #32]
 8027bec:	9a05      	ldr	r2, [sp, #20]
 8027bee:	881c      	ldrh	r4, [r3, #0]
 8027bf0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8027bf4:	eba4 0409 	sub.w	r4, r4, r9
 8027bf8:	4413      	add	r3, r2
 8027bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027bfc:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8027c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8027c04:	441d      	add	r5, r3
 8027c06:	e79c      	b.n	8027b42 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8027c08:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8027c0c:	45a3      	cmp	fp, r4
 8027c0e:	d939      	bls.n	8027c84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8027c10:	9b06      	ldr	r3, [sp, #24]
 8027c12:	b1fb      	cbz	r3, 8027c54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8027c14:	782b      	ldrb	r3, [r5, #0]
 8027c16:	1c6a      	adds	r2, r5, #1
 8027c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8027c1c:	3402      	adds	r4, #2
 8027c1e:	f003 030f 	and.w	r3, r3, #15
 8027c22:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8027c26:	f824 3c02 	strh.w	r3, [r4, #-2]
 8027c2a:	2801      	cmp	r0, #1
 8027c2c:	4623      	mov	r3, r4
 8027c2e:	f104 0404 	add.w	r4, r4, #4
 8027c32:	dd12      	ble.n	8027c5a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8027c34:	7813      	ldrb	r3, [r2, #0]
 8027c36:	3802      	subs	r0, #2
 8027c38:	091b      	lsrs	r3, r3, #4
 8027c3a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8027c3e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8027c42:	f812 3b01 	ldrb.w	r3, [r2], #1
 8027c46:	f003 030f 	and.w	r3, r3, #15
 8027c4a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8027c4e:	f824 3c02 	strh.w	r3, [r4, #-2]
 8027c52:	e7ea      	b.n	8027c2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8027c54:	462a      	mov	r2, r5
 8027c56:	4648      	mov	r0, r9
 8027c58:	e7e7      	b.n	8027c2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8027c5a:	d106      	bne.n	8027c6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8027c5c:	7812      	ldrb	r2, [r2, #0]
 8027c5e:	3302      	adds	r3, #2
 8027c60:	0912      	lsrs	r2, r2, #4
 8027c62:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8027c66:	f823 2c02 	strh.w	r2, [r3, #-2]
 8027c6a:	880c      	ldrh	r4, [r1, #0]
 8027c6c:	9a05      	ldr	r2, [sp, #20]
 8027c6e:	eba4 0409 	sub.w	r4, r4, r9
 8027c72:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8027c76:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8027c7a:	4413      	add	r3, r2
 8027c7c:	fb93 f3f8 	sdiv	r3, r3, r8
 8027c80:	441d      	add	r5, r3
 8027c82:	e7c3      	b.n	8027c0c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8027c84:	4b03      	ldr	r3, [pc, #12]	@ (8027c94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8027c86:	6818      	ldr	r0, [r3, #0]
 8027c88:	6803      	ldr	r3, [r0, #0]
 8027c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027c8c:	4798      	blx	r3
 8027c8e:	b00f      	add	sp, #60	@ 0x3c
 8027c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c94:	20027dc0 	.word	0x20027dc0
 8027c98:	20027dba 	.word	0x20027dba

08027c9c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8027c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c9e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8027ca2:	0a0f      	lsrs	r7, r1, #8
 8027ca4:	2dff      	cmp	r5, #255	@ 0xff
 8027ca6:	d10c      	bne.n	8027cc2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8027ca8:	2bff      	cmp	r3, #255	@ 0xff
 8027caa:	d10a      	bne.n	8027cc2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8027cac:	0948      	lsrs	r0, r1, #5
 8027cae:	4b25      	ldr	r3, [pc, #148]	@ (8027d44 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8027cb0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8027cb4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027cb8:	403b      	ands	r3, r7
 8027cba:	4318      	orrs	r0, r3
 8027cbc:	4308      	orrs	r0, r1
 8027cbe:	b280      	uxth	r0, r0
 8027cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027cc2:	fb15 f503 	smulbb	r5, r5, r3
 8027cc6:	1214      	asrs	r4, r2, #8
 8027cc8:	10d6      	asrs	r6, r2, #3
 8027cca:	b2ab      	uxth	r3, r5
 8027ccc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027cd0:	00d0      	lsls	r0, r2, #3
 8027cd2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8027cd6:	1c5d      	adds	r5, r3, #1
 8027cd8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8027cdc:	b2c0      	uxtb	r0, r0
 8027cde:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8027ce2:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8027ce6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8027cea:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8027cee:	fa1f fc85 	uxth.w	ip, r5
 8027cf2:	43ed      	mvns	r5, r5
 8027cf4:	fb12 f20c 	smulbb	r2, r2, ip
 8027cf8:	b2eb      	uxtb	r3, r5
 8027cfa:	b2fd      	uxtb	r5, r7
 8027cfc:	fb04 2403 	mla	r4, r4, r3, r2
 8027d00:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8027d04:	fb15 f50c 	smulbb	r5, r5, ip
 8027d08:	b2c8      	uxtb	r0, r1
 8027d0a:	b2a4      	uxth	r4, r4
 8027d0c:	fb10 f00c 	smulbb	r0, r0, ip
 8027d10:	fb06 5503 	mla	r5, r6, r3, r5
 8027d14:	fb02 0003 	mla	r0, r2, r3, r0
 8027d18:	b2ad      	uxth	r5, r5
 8027d1a:	b283      	uxth	r3, r0
 8027d1c:	1c60      	adds	r0, r4, #1
 8027d1e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8027d22:	1c58      	adds	r0, r3, #1
 8027d24:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027d28:	1c6b      	adds	r3, r5, #1
 8027d2a:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8027d2e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027d32:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027d36:	096d      	lsrs	r5, r5, #5
 8027d38:	4320      	orrs	r0, r4
 8027d3a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027d3e:	4328      	orrs	r0, r5
 8027d40:	e7be      	b.n	8027cc0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 8027d42:	bf00      	nop
 8027d44:	00fff800 	.word	0x00fff800

08027d48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8027d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d4c:	461c      	mov	r4, r3
 8027d4e:	b08d      	sub	sp, #52	@ 0x34
 8027d50:	460d      	mov	r5, r1
 8027d52:	4616      	mov	r6, r2
 8027d54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027d56:	4680      	mov	r8, r0
 8027d58:	6861      	ldr	r1, [r4, #4]
 8027d5a:	aa08      	add	r2, sp, #32
 8027d5c:	6820      	ldr	r0, [r4, #0]
 8027d5e:	f04f 0a02 	mov.w	sl, #2
 8027d62:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8027d66:	3604      	adds	r6, #4
 8027d68:	c203      	stmia	r2!, {r0, r1}
 8027d6a:	6818      	ldr	r0, [r3, #0]
 8027d6c:	aa0a      	add	r2, sp, #40	@ 0x28
 8027d6e:	6859      	ldr	r1, [r3, #4]
 8027d70:	c203      	stmia	r2!, {r0, r1}
 8027d72:	a808      	add	r0, sp, #32
 8027d74:	f7ee fac0 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027d78:	4621      	mov	r1, r4
 8027d7a:	a80a      	add	r0, sp, #40	@ 0x28
 8027d7c:	f7ee fb00 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027d80:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8027d84:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8027d88:	f002 0301 	and.w	r3, r2, #1
 8027d8c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8027d90:	9303      	str	r3, [sp, #12]
 8027d92:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8027d96:	f003 0101 	and.w	r1, r3, #1
 8027d9a:	9102      	str	r1, [sp, #8]
 8027d9c:	9802      	ldr	r0, [sp, #8]
 8027d9e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8027da2:	4403      	add	r3, r0
 8027da4:	fb01 2303 	mla	r3, r1, r3, r2
 8027da8:	fb93 f3fa 	sdiv	r3, r3, sl
 8027dac:	441d      	add	r5, r3
 8027dae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027db2:	441a      	add	r2, r3
 8027db4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8027db8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8027dbc:	4419      	add	r1, r3
 8027dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8027eb8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8027dc0:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8027dc4:	6810      	ldr	r0, [r2, #0]
 8027dc6:	9205      	str	r2, [sp, #20]
 8027dc8:	6803      	ldr	r3, [r0, #0]
 8027dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027dcc:	4798      	blx	r3
 8027dce:	4b3b      	ldr	r3, [pc, #236]	@ (8027ebc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8027dd0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8027dd4:	8819      	ldrh	r1, [r3, #0]
 8027dd6:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8027dda:	434f      	muls	r7, r1
 8027ddc:	fb01 c404 	mla	r4, r1, r4, ip
 8027de0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8027de4:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8027de8:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8027dec:	9204      	str	r2, [sp, #16]
 8027dee:	9b04      	ldr	r3, [sp, #16]
 8027df0:	429c      	cmp	r4, r3
 8027df2:	d258      	bcs.n	8027ea6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8027df4:	9b03      	ldr	r3, [sp, #12]
 8027df6:	2b00      	cmp	r3, #0
 8027df8:	d034      	beq.n	8027e64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8027dfa:	782b      	ldrb	r3, [r5, #0]
 8027dfc:	1c6f      	adds	r7, r5, #1
 8027dfe:	f003 030f 	and.w	r3, r3, #15
 8027e02:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8027e06:	0e0b      	lsrs	r3, r1, #24
 8027e08:	d006      	beq.n	8027e18 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8027e0a:	8822      	ldrh	r2, [r4, #0]
 8027e0c:	4640      	mov	r0, r8
 8027e0e:	9300      	str	r3, [sp, #0]
 8027e10:	464b      	mov	r3, r9
 8027e12:	f7ff ff43 	bl	8027c9c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8027e16:	8020      	strh	r0, [r4, #0]
 8027e18:	3402      	adds	r4, #2
 8027e1a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8027e1e:	f1ba 0f01 	cmp.w	sl, #1
 8027e22:	dd22      	ble.n	8027e6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8027e24:	783b      	ldrb	r3, [r7, #0]
 8027e26:	091b      	lsrs	r3, r3, #4
 8027e28:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8027e2c:	0e0b      	lsrs	r3, r1, #24
 8027e2e:	d006      	beq.n	8027e3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8027e30:	8822      	ldrh	r2, [r4, #0]
 8027e32:	4640      	mov	r0, r8
 8027e34:	9300      	str	r3, [sp, #0]
 8027e36:	464b      	mov	r3, r9
 8027e38:	f7ff ff30 	bl	8027c9c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8027e3c:	8020      	strh	r0, [r4, #0]
 8027e3e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8027e42:	f003 030f 	and.w	r3, r3, #15
 8027e46:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8027e4a:	0e0b      	lsrs	r3, r1, #24
 8027e4c:	d006      	beq.n	8027e5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8027e4e:	8862      	ldrh	r2, [r4, #2]
 8027e50:	4640      	mov	r0, r8
 8027e52:	9300      	str	r3, [sp, #0]
 8027e54:	464b      	mov	r3, r9
 8027e56:	f7ff ff21 	bl	8027c9c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8027e5a:	8060      	strh	r0, [r4, #2]
 8027e5c:	3404      	adds	r4, #4
 8027e5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8027e62:	e7dc      	b.n	8027e1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8027e64:	462f      	mov	r7, r5
 8027e66:	46da      	mov	sl, fp
 8027e68:	e7d9      	b.n	8027e1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8027e6a:	d10d      	bne.n	8027e88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8027e6c:	783b      	ldrb	r3, [r7, #0]
 8027e6e:	091b      	lsrs	r3, r3, #4
 8027e70:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8027e74:	0e0b      	lsrs	r3, r1, #24
 8027e76:	d006      	beq.n	8027e86 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8027e78:	8822      	ldrh	r2, [r4, #0]
 8027e7a:	4640      	mov	r0, r8
 8027e7c:	9300      	str	r3, [sp, #0]
 8027e7e:	464b      	mov	r3, r9
 8027e80:	f7ff ff0c 	bl	8027c9c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8027e84:	8020      	strh	r0, [r4, #0]
 8027e86:	3402      	adds	r4, #2
 8027e88:	9b06      	ldr	r3, [sp, #24]
 8027e8a:	9a02      	ldr	r2, [sp, #8]
 8027e8c:	881b      	ldrh	r3, [r3, #0]
 8027e8e:	eba3 030b 	sub.w	r3, r3, fp
 8027e92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8027e96:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8027e9a:	4413      	add	r3, r2
 8027e9c:	9a07      	ldr	r2, [sp, #28]
 8027e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8027ea2:	441d      	add	r5, r3
 8027ea4:	e7a3      	b.n	8027dee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8027ea6:	9b05      	ldr	r3, [sp, #20]
 8027ea8:	6818      	ldr	r0, [r3, #0]
 8027eaa:	6803      	ldr	r3, [r0, #0]
 8027eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027eae:	4798      	blx	r3
 8027eb0:	b00d      	add	sp, #52	@ 0x34
 8027eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027eb6:	bf00      	nop
 8027eb8:	20027dc0 	.word	0x20027dc0
 8027ebc:	20027dba 	.word	0x20027dba

08027ec0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8027ec0:	b570      	push	{r4, r5, r6, lr}
 8027ec2:	1214      	asrs	r4, r2, #8
 8027ec4:	788d      	ldrb	r5, [r1, #2]
 8027ec6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8027eca:	10d0      	asrs	r0, r2, #3
 8027ecc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027ed0:	00d2      	lsls	r2, r2, #3
 8027ed2:	fb15 f503 	smulbb	r5, r5, r3
 8027ed6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027eda:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8027ede:	b2d2      	uxtb	r2, r2
 8027ee0:	fb04 5506 	mla	r5, r4, r6, r5
 8027ee4:	784c      	ldrb	r4, [r1, #1]
 8027ee6:	7809      	ldrb	r1, [r1, #0]
 8027ee8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8027eec:	fb14 f403 	smulbb	r4, r4, r3
 8027ef0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8027ef4:	fb11 f303 	smulbb	r3, r1, r3
 8027ef8:	b2ad      	uxth	r5, r5
 8027efa:	fb00 4406 	mla	r4, r0, r6, r4
 8027efe:	fb02 3306 	mla	r3, r2, r6, r3
 8027f02:	1c68      	adds	r0, r5, #1
 8027f04:	b2a4      	uxth	r4, r4
 8027f06:	b29b      	uxth	r3, r3
 8027f08:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8027f0c:	1c62      	adds	r2, r4, #1
 8027f0e:	1c58      	adds	r0, r3, #1
 8027f10:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027f14:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027f18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027f1c:	0964      	lsrs	r4, r4, #5
 8027f1e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027f22:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8027f26:	4328      	orrs	r0, r5
 8027f28:	4320      	orrs	r0, r4
 8027f2a:	bd70      	pop	{r4, r5, r6, pc}

08027f2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8027f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f30:	b08f      	sub	sp, #60	@ 0x3c
 8027f32:	461c      	mov	r4, r3
 8027f34:	4682      	mov	sl, r0
 8027f36:	460e      	mov	r6, r1
 8027f38:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8027f3c:	4615      	mov	r5, r2
 8027f3e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027f40:	2f00      	cmp	r7, #0
 8027f42:	f000 8141 	beq.w	80281c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8027f46:	6820      	ldr	r0, [r4, #0]
 8027f48:	aa0a      	add	r2, sp, #40	@ 0x28
 8027f4a:	6861      	ldr	r1, [r4, #4]
 8027f4c:	f04f 0802 	mov.w	r8, #2
 8027f50:	3504      	adds	r5, #4
 8027f52:	c203      	stmia	r2!, {r0, r1}
 8027f54:	6818      	ldr	r0, [r3, #0]
 8027f56:	aa0c      	add	r2, sp, #48	@ 0x30
 8027f58:	6859      	ldr	r1, [r3, #4]
 8027f5a:	c203      	stmia	r2!, {r0, r1}
 8027f5c:	a80a      	add	r0, sp, #40	@ 0x28
 8027f5e:	f7ee f9cb 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027f62:	4621      	mov	r1, r4
 8027f64:	a80c      	add	r0, sp, #48	@ 0x30
 8027f66:	f7ee fa0b 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027f6a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8027f6e:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8027f72:	f002 0301 	and.w	r3, r2, #1
 8027f76:	9306      	str	r3, [sp, #24]
 8027f78:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8027f7c:	f003 0101 	and.w	r1, r3, #1
 8027f80:	9105      	str	r1, [sp, #20]
 8027f82:	9805      	ldr	r0, [sp, #20]
 8027f84:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8027f88:	4403      	add	r3, r0
 8027f8a:	fb01 2303 	mla	r3, r1, r3, r2
 8027f8e:	fb93 f3f8 	sdiv	r3, r3, r8
 8027f92:	441e      	add	r6, r3
 8027f94:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8027f98:	441a      	add	r2, r3
 8027f9a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8027f9e:	4419      	add	r1, r3
 8027fa0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8027fa4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8027fa8:	9303      	str	r3, [sp, #12]
 8027faa:	4b89      	ldr	r3, [pc, #548]	@ (80281d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8027fac:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8027fb0:	6818      	ldr	r0, [r3, #0]
 8027fb2:	6803      	ldr	r3, [r0, #0]
 8027fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027fb6:	4798      	blx	r3
 8027fb8:	4a86      	ldr	r2, [pc, #536]	@ (80281d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8027fba:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8027fbe:	2fff      	cmp	r7, #255	@ 0xff
 8027fc0:	8813      	ldrh	r3, [r2, #0]
 8027fc2:	4694      	mov	ip, r2
 8027fc4:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8027fc8:	fb03 9404 	mla	r4, r3, r4, r9
 8027fcc:	fb03 f30b 	mul.w	r3, r3, fp
 8027fd0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8027fd4:	d071      	beq.n	80280ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8027fd6:	43f9      	mvns	r1, r7
 8027fd8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8027fdc:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8027fe0:	b2c9      	uxtb	r1, r1
 8027fe2:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8027fe6:	9104      	str	r1, [sp, #16]
 8027fe8:	9b07      	ldr	r3, [sp, #28]
 8027fea:	42a3      	cmp	r3, r4
 8027fec:	f240 80e7 	bls.w	80281be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8027ff0:	9b06      	ldr	r3, [sp, #24]
 8027ff2:	2b00      	cmp	r3, #0
 8027ff4:	d03d      	beq.n	8028072 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8027ff6:	7831      	ldrb	r1, [r6, #0]
 8027ff8:	4650      	mov	r0, sl
 8027ffa:	9b04      	ldr	r3, [sp, #16]
 8027ffc:	f106 0801 	add.w	r8, r6, #1
 8028000:	f001 010f 	and.w	r1, r1, #15
 8028004:	8822      	ldrh	r2, [r4, #0]
 8028006:	9300      	str	r3, [sp, #0]
 8028008:	463b      	mov	r3, r7
 802800a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802800e:	4429      	add	r1, r5
 8028010:	f7ff ff56 	bl	8027ec0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028014:	9b03      	ldr	r3, [sp, #12]
 8028016:	f824 0b02 	strh.w	r0, [r4], #2
 802801a:	f103 3bff 	add.w	fp, r3, #4294967295
 802801e:	f1bb 0f01 	cmp.w	fp, #1
 8028022:	46a1      	mov	r9, r4
 8028024:	f104 0404 	add.w	r4, r4, #4
 8028028:	dd27      	ble.n	802807a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802802a:	f898 1000 	ldrb.w	r1, [r8]
 802802e:	4650      	mov	r0, sl
 8028030:	9b04      	ldr	r3, [sp, #16]
 8028032:	f1ab 0b02 	sub.w	fp, fp, #2
 8028036:	0909      	lsrs	r1, r1, #4
 8028038:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802803c:	9300      	str	r3, [sp, #0]
 802803e:	463b      	mov	r3, r7
 8028040:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028044:	4429      	add	r1, r5
 8028046:	f7ff ff3b 	bl	8027ec0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802804a:	f824 0c04 	strh.w	r0, [r4, #-4]
 802804e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028052:	4650      	mov	r0, sl
 8028054:	9b04      	ldr	r3, [sp, #16]
 8028056:	f001 010f 	and.w	r1, r1, #15
 802805a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802805e:	9300      	str	r3, [sp, #0]
 8028060:	463b      	mov	r3, r7
 8028062:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028066:	4429      	add	r1, r5
 8028068:	f7ff ff2a 	bl	8027ec0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802806c:	f824 0c02 	strh.w	r0, [r4, #-2]
 8028070:	e7d5      	b.n	802801e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028072:	46b0      	mov	r8, r6
 8028074:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8028078:	e7d1      	b.n	802801e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802807a:	d10f      	bne.n	802809c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802807c:	f898 1000 	ldrb.w	r1, [r8]
 8028080:	4650      	mov	r0, sl
 8028082:	9b04      	ldr	r3, [sp, #16]
 8028084:	0909      	lsrs	r1, r1, #4
 8028086:	f8b9 2000 	ldrh.w	r2, [r9]
 802808a:	9300      	str	r3, [sp, #0]
 802808c:	463b      	mov	r3, r7
 802808e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028092:	4429      	add	r1, r5
 8028094:	f7ff ff14 	bl	8027ec0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028098:	f829 0b02 	strh.w	r0, [r9], #2
 802809c:	9b08      	ldr	r3, [sp, #32]
 802809e:	9a05      	ldr	r2, [sp, #20]
 80280a0:	881c      	ldrh	r4, [r3, #0]
 80280a2:	9b03      	ldr	r3, [sp, #12]
 80280a4:	1ae4      	subs	r4, r4, r3
 80280a6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80280aa:	4413      	add	r3, r2
 80280ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80280ae:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80280b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80280b6:	441e      	add	r6, r3
 80280b8:	e796      	b.n	8027fe8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 80280ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80280be:	4f46      	ldr	r7, [pc, #280]	@ (80281d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 80280c0:	42a3      	cmp	r3, r4
 80280c2:	d97c      	bls.n	80281be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 80280c4:	9a06      	ldr	r2, [sp, #24]
 80280c6:	2a00      	cmp	r2, #0
 80280c8:	d054      	beq.n	8028174 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80280ca:	7830      	ldrb	r0, [r6, #0]
 80280cc:	1c71      	adds	r1, r6, #1
 80280ce:	f000 000f 	and.w	r0, r0, #15
 80280d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80280d6:	eb05 0e00 	add.w	lr, r5, r0
 80280da:	5c28      	ldrb	r0, [r5, r0]
 80280dc:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80280e0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80280e4:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80280e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80280ec:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80280f0:	ea42 020e 	orr.w	r2, r2, lr
 80280f4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80280f8:	f824 2b02 	strh.w	r2, [r4], #2
 80280fc:	9a03      	ldr	r2, [sp, #12]
 80280fe:	f102 3eff 	add.w	lr, r2, #4294967295
 8028102:	f1be 0f01 	cmp.w	lr, #1
 8028106:	4620      	mov	r0, r4
 8028108:	f104 0404 	add.w	r4, r4, #4
 802810c:	dd36      	ble.n	802817c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802810e:	7808      	ldrb	r0, [r1, #0]
 8028110:	f1ae 0e02 	sub.w	lr, lr, #2
 8028114:	0900      	lsrs	r0, r0, #4
 8028116:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802811a:	eb05 0a00 	add.w	sl, r5, r0
 802811e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028122:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028126:	00d2      	lsls	r2, r2, #3
 8028128:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802812c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028130:	ea49 0202 	orr.w	r2, r9, r2
 8028134:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028138:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802813c:	f824 2c04 	strh.w	r2, [r4, #-4]
 8028140:	f811 0b01 	ldrb.w	r0, [r1], #1
 8028144:	f000 000f 	and.w	r0, r0, #15
 8028148:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802814c:	eb05 0a00 	add.w	sl, r5, r0
 8028150:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028154:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028158:	00d2      	lsls	r2, r2, #3
 802815a:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802815e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028162:	ea49 0202 	orr.w	r2, r9, r2
 8028166:	f815 9000 	ldrb.w	r9, [r5, r0]
 802816a:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802816e:	f824 2c02 	strh.w	r2, [r4, #-2]
 8028172:	e7c6      	b.n	8028102 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028174:	4631      	mov	r1, r6
 8028176:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802817a:	e7c2      	b.n	8028102 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802817c:	d111      	bne.n	80281a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802817e:	7809      	ldrb	r1, [r1, #0]
 8028180:	0909      	lsrs	r1, r1, #4
 8028182:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028186:	186c      	adds	r4, r5, r1
 8028188:	5c69      	ldrb	r1, [r5, r1]
 802818a:	78a2      	ldrb	r2, [r4, #2]
 802818c:	7864      	ldrb	r4, [r4, #1]
 802818e:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028192:	00e4      	lsls	r4, r4, #3
 8028194:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028198:	4322      	orrs	r2, r4
 802819a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802819e:	f820 2b02 	strh.w	r2, [r0], #2
 80281a2:	9a03      	ldr	r2, [sp, #12]
 80281a4:	f8bc 4000 	ldrh.w	r4, [ip]
 80281a8:	9905      	ldr	r1, [sp, #20]
 80281aa:	1aa4      	subs	r4, r4, r2
 80281ac:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80281b0:	440a      	add	r2, r1
 80281b2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80281b6:	fb92 f2f8 	sdiv	r2, r2, r8
 80281ba:	4416      	add	r6, r2
 80281bc:	e780      	b.n	80280c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 80281be:	4b04      	ldr	r3, [pc, #16]	@ (80281d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80281c0:	6818      	ldr	r0, [r3, #0]
 80281c2:	6803      	ldr	r3, [r0, #0]
 80281c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80281c6:	4798      	blx	r3
 80281c8:	b00f      	add	sp, #60	@ 0x3c
 80281ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281ce:	bf00      	nop
 80281d0:	20027dc0 	.word	0x20027dc0
 80281d4:	20027dba 	.word	0x20027dba
 80281d8:	fffff800 	.word	0xfffff800

080281dc <CRC_Lock>:
 80281dc:	4a2d      	ldr	r2, [pc, #180]	@ (8028294 <CRC_Lock+0xb8>)
 80281de:	b530      	push	{r4, r5, lr}
 80281e0:	6813      	ldr	r3, [r2, #0]
 80281e2:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80281e6:	f023 0301 	bic.w	r3, r3, #1
 80281ea:	6013      	str	r3, [r2, #0]
 80281ec:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80281f0:	4b29      	ldr	r3, [pc, #164]	@ (8028298 <CRC_Lock+0xbc>)
 80281f2:	681c      	ldr	r4, [r3, #0]
 80281f4:	4014      	ands	r4, r2
 80281f6:	42ac      	cmp	r4, r5
 80281f8:	d005      	beq.n	8028206 <CRC_Lock+0x2a>
 80281fa:	681c      	ldr	r4, [r3, #0]
 80281fc:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8028200:	4014      	ands	r4, r2
 8028202:	42ac      	cmp	r4, r5
 8028204:	d125      	bne.n	8028252 <CRC_Lock+0x76>
 8028206:	4b25      	ldr	r3, [pc, #148]	@ (802829c <CRC_Lock+0xc0>)
 8028208:	681b      	ldr	r3, [r3, #0]
 802820a:	2b00      	cmp	r3, #0
 802820c:	d139      	bne.n	8028282 <CRC_Lock+0xa6>
 802820e:	4b24      	ldr	r3, [pc, #144]	@ (80282a0 <CRC_Lock+0xc4>)
 8028210:	681a      	ldr	r2, [r3, #0]
 8028212:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028216:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802821a:	d00d      	beq.n	8028238 <CRC_Lock+0x5c>
 802821c:	681a      	ldr	r2, [r3, #0]
 802821e:	f240 4483 	movw	r4, #1155	@ 0x483
 8028222:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028226:	42a2      	cmp	r2, r4
 8028228:	d006      	beq.n	8028238 <CRC_Lock+0x5c>
 802822a:	681b      	ldr	r3, [r3, #0]
 802822c:	f240 4285 	movw	r2, #1157	@ 0x485
 8028230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028234:	4293      	cmp	r3, r2
 8028236:	d124      	bne.n	8028282 <CRC_Lock+0xa6>
 8028238:	4b1a      	ldr	r3, [pc, #104]	@ (80282a4 <CRC_Lock+0xc8>)
 802823a:	2201      	movs	r2, #1
 802823c:	601a      	str	r2, [r3, #0]
 802823e:	681a      	ldr	r2, [r3, #0]
 8028240:	2a00      	cmp	r2, #0
 8028242:	d1fc      	bne.n	802823e <CRC_Lock+0x62>
 8028244:	4b18      	ldr	r3, [pc, #96]	@ (80282a8 <CRC_Lock+0xcc>)
 8028246:	6018      	str	r0, [r3, #0]
 8028248:	6818      	ldr	r0, [r3, #0]
 802824a:	1a43      	subs	r3, r0, r1
 802824c:	4258      	negs	r0, r3
 802824e:	4158      	adcs	r0, r3
 8028250:	e00e      	b.n	8028270 <CRC_Lock+0x94>
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	4013      	ands	r3, r2
 8028256:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802825a:	4293      	cmp	r3, r2
 802825c:	d111      	bne.n	8028282 <CRC_Lock+0xa6>
 802825e:	4b13      	ldr	r3, [pc, #76]	@ (80282ac <CRC_Lock+0xd0>)
 8028260:	f240 4286 	movw	r2, #1158	@ 0x486
 8028264:	681b      	ldr	r3, [r3, #0]
 8028266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802826a:	4293      	cmp	r3, r2
 802826c:	d001      	beq.n	8028272 <CRC_Lock+0x96>
 802826e:	2000      	movs	r0, #0
 8028270:	bd30      	pop	{r4, r5, pc}
 8028272:	4b0f      	ldr	r3, [pc, #60]	@ (80282b0 <CRC_Lock+0xd4>)
 8028274:	2201      	movs	r2, #1
 8028276:	601a      	str	r2, [r3, #0]
 8028278:	681a      	ldr	r2, [r3, #0]
 802827a:	2a00      	cmp	r2, #0
 802827c:	d1fc      	bne.n	8028278 <CRC_Lock+0x9c>
 802827e:	4b0d      	ldr	r3, [pc, #52]	@ (80282b4 <CRC_Lock+0xd8>)
 8028280:	e7e1      	b.n	8028246 <CRC_Lock+0x6a>
 8028282:	4b0d      	ldr	r3, [pc, #52]	@ (80282b8 <CRC_Lock+0xdc>)
 8028284:	2201      	movs	r2, #1
 8028286:	601a      	str	r2, [r3, #0]
 8028288:	681a      	ldr	r2, [r3, #0]
 802828a:	2a00      	cmp	r2, #0
 802828c:	d1fc      	bne.n	8028288 <CRC_Lock+0xac>
 802828e:	4b0b      	ldr	r3, [pc, #44]	@ (80282bc <CRC_Lock+0xe0>)
 8028290:	e7d9      	b.n	8028246 <CRC_Lock+0x6a>
 8028292:	bf00      	nop
 8028294:	e0002000 	.word	0xe0002000
 8028298:	e000ed00 	.word	0xe000ed00
 802829c:	e0042000 	.word	0xe0042000
 80282a0:	5c001000 	.word	0x5c001000
 80282a4:	58024c08 	.word	0x58024c08
 80282a8:	58024c00 	.word	0x58024c00
 80282ac:	46008ff0 	.word	0x46008ff0
 80282b0:	46024c08 	.word	0x46024c08
 80282b4:	46024c00 	.word	0x46024c00
 80282b8:	40023008 	.word	0x40023008
 80282bc:	40023000 	.word	0x40023000

080282c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80282c0:	6101      	str	r1, [r0, #16]
 80282c2:	4770      	bx	lr

080282c4 <_ZN8touchgfx8Gestures4tickEv>:
 80282c4:	7b83      	ldrb	r3, [r0, #14]
 80282c6:	b14b      	cbz	r3, 80282dc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80282c8:	8903      	ldrh	r3, [r0, #8]
 80282ca:	3301      	adds	r3, #1
 80282cc:	b29b      	uxth	r3, r3
 80282ce:	2b07      	cmp	r3, #7
 80282d0:	8103      	strh	r3, [r0, #8]
 80282d2:	bf81      	itttt	hi
 80282d4:	2300      	movhi	r3, #0
 80282d6:	8143      	strhhi	r3, [r0, #10]
 80282d8:	8183      	strhhi	r3, [r0, #12]
 80282da:	7383      	strbhi	r3, [r0, #14]
 80282dc:	4770      	bx	lr
	...

080282e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80282e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80282e4:	4698      	mov	r8, r3
 80282e6:	8883      	ldrh	r3, [r0, #4]
 80282e8:	4604      	mov	r4, r0
 80282ea:	4617      	mov	r7, r2
 80282ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80282f0:	eba8 0303 	sub.w	r3, r8, r3
 80282f4:	4a19      	ldr	r2, [pc, #100]	@ (802835c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80282f6:	460e      	mov	r6, r1
 80282f8:	b21b      	sxth	r3, r3
 80282fa:	88c1      	ldrh	r1, [r0, #6]
 80282fc:	9200      	str	r2, [sp, #0]
 80282fe:	2000      	movs	r0, #0
 8028300:	2b00      	cmp	r3, #0
 8028302:	8aa2      	ldrh	r2, [r4, #20]
 8028304:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8028308:	bfb8      	it	lt
 802830a:	425b      	neglt	r3, r3
 802830c:	f88d 0004 	strb.w	r0, [sp, #4]
 8028310:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028314:	b21b      	sxth	r3, r3
 8028316:	f8ad 800a 	strh.w	r8, [sp, #10]
 802831a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802831e:	4293      	cmp	r3, r2
 8028320:	dc07      	bgt.n	8028332 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028322:	1a69      	subs	r1, r5, r1
 8028324:	b209      	sxth	r1, r1
 8028326:	2900      	cmp	r1, #0
 8028328:	bfb8      	it	lt
 802832a:	4249      	neglt	r1, r1
 802832c:	b209      	sxth	r1, r1
 802832e:	428a      	cmp	r2, r1
 8028330:	da10      	bge.n	8028354 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028332:	6920      	ldr	r0, [r4, #16]
 8028334:	4669      	mov	r1, sp
 8028336:	eba8 0606 	sub.w	r6, r8, r6
 802833a:	1bef      	subs	r7, r5, r7
 802833c:	6803      	ldr	r3, [r0, #0]
 802833e:	685b      	ldr	r3, [r3, #4]
 8028340:	4798      	blx	r3
 8028342:	2300      	movs	r3, #0
 8028344:	2001      	movs	r0, #1
 8028346:	8166      	strh	r6, [r4, #10]
 8028348:	8123      	strh	r3, [r4, #8]
 802834a:	81a7      	strh	r7, [r4, #12]
 802834c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028350:	80e5      	strh	r5, [r4, #6]
 8028352:	73a0      	strb	r0, [r4, #14]
 8028354:	b004      	add	sp, #16
 8028356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802835a:	bf00      	nop
 802835c:	0802e208 	.word	0x0802e208

08028360 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028362:	461e      	mov	r6, r3
 8028364:	1e4b      	subs	r3, r1, #1
 8028366:	b085      	sub	sp, #20
 8028368:	4604      	mov	r4, r0
 802836a:	2b01      	cmp	r3, #1
 802836c:	460d      	mov	r5, r1
 802836e:	4617      	mov	r7, r2
 8028370:	d84b      	bhi.n	802840a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028372:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028376:	1cd3      	adds	r3, r2, #3
 8028378:	b29b      	uxth	r3, r3
 802837a:	2b06      	cmp	r3, #6
 802837c:	d916      	bls.n	80283ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802837e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8028420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028382:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028386:	f8cd c004 	str.w	ip, [sp, #4]
 802838a:	f04f 0c00 	mov.w	ip, #0
 802838e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028392:	6900      	ldr	r0, [r0, #16]
 8028394:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028398:	a901      	add	r1, sp, #4
 802839a:	f88d c008 	strb.w	ip, [sp, #8]
 802839e:	f8ad 200a 	strh.w	r2, [sp, #10]
 80283a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80283a6:	6803      	ldr	r3, [r0, #0]
 80283a8:	689b      	ldr	r3, [r3, #8]
 80283aa:	4798      	blx	r3
 80283ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80283b0:	1cd3      	adds	r3, r2, #3
 80283b2:	b29b      	uxth	r3, r3
 80283b4:	2b06      	cmp	r3, #6
 80283b6:	d916      	bls.n	80283e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80283b8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8028420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80283bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80283c0:	f8cd c004 	str.w	ip, [sp, #4]
 80283c4:	f04f 0c01 	mov.w	ip, #1
 80283c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80283cc:	6920      	ldr	r0, [r4, #16]
 80283ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 80283d2:	a901      	add	r1, sp, #4
 80283d4:	f88d c008 	strb.w	ip, [sp, #8]
 80283d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80283dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80283e0:	6803      	ldr	r3, [r0, #0]
 80283e2:	689b      	ldr	r3, [r3, #8]
 80283e4:	4798      	blx	r3
 80283e6:	4b0d      	ldr	r3, [pc, #52]	@ (802841c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80283e8:	a901      	add	r1, sp, #4
 80283ea:	6920      	ldr	r0, [r4, #16]
 80283ec:	9301      	str	r3, [sp, #4]
 80283ee:	2300      	movs	r3, #0
 80283f0:	f88d 5008 	strb.w	r5, [sp, #8]
 80283f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80283f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80283fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028400:	6803      	ldr	r3, [r0, #0]
 8028402:	681b      	ldr	r3, [r3, #0]
 8028404:	4798      	blx	r3
 8028406:	b005      	add	sp, #20
 8028408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802840a:	2900      	cmp	r1, #0
 802840c:	d1eb      	bne.n	80283e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802840e:	80a2      	strh	r2, [r4, #4]
 8028410:	80c6      	strh	r6, [r0, #6]
 8028412:	60a1      	str	r1, [r4, #8]
 8028414:	81a1      	strh	r1, [r4, #12]
 8028416:	73a1      	strb	r1, [r4, #14]
 8028418:	e7e5      	b.n	80283e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802841a:	bf00      	nop
 802841c:	0802e1f4 	.word	0x0802e1f4
 8028420:	0802e21c 	.word	0x0802e21c

08028424 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8028424:	10c9      	asrs	r1, r1, #3
 8028426:	2900      	cmp	r1, #0
 8028428:	bfb8      	it	lt
 802842a:	4249      	neglt	r1, r1
 802842c:	2801      	cmp	r0, #1
 802842e:	d108      	bne.n	8028442 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028430:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028434:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8028438:	4601      	mov	r1, r0
 802843a:	dd02      	ble.n	8028442 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802843c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8028440:	4770      	bx	lr
 8028442:	29ff      	cmp	r1, #255	@ 0xff
 8028444:	bfa8      	it	ge
 8028446:	21ff      	movge	r1, #255	@ 0xff
 8028448:	4608      	mov	r0, r1
 802844a:	4770      	bx	lr

0802844c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802844c:	b410      	push	{r4}
 802844e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8028452:	429c      	cmp	r4, r3
 8028454:	d803      	bhi.n	802845e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8028456:	f85d 4b04 	ldr.w	r4, [sp], #4
 802845a:	f7ec ba43 	b.w	80148e4 <_ZN8touchgfx7Outline6lineToEii>
 802845e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028462:	4770      	bx	lr

08028464 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028468:	b08b      	sub	sp, #44	@ 0x2c
 802846a:	4606      	mov	r6, r0
 802846c:	468a      	mov	sl, r1
 802846e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028472:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8028476:	9308      	str	r3, [sp, #32]
 8028478:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802847c:	9309      	str	r3, [sp, #36]	@ 0x24
 802847e:	f7ec fb9c 	bl	8014bba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8028482:	68b5      	ldr	r5, [r6, #8]
 8028484:	4604      	mov	r4, r0
 8028486:	2d00      	cmp	r5, #0
 8028488:	d044      	beq.n	8028514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802848a:	6873      	ldr	r3, [r6, #4]
 802848c:	42ab      	cmp	r3, r5
 802848e:	d33d      	bcc.n	802850c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8028490:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028494:	f04f 0800 	mov.w	r8, #0
 8028498:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802849c:	eb02 0b03 	add.w	fp, r2, r3
 80284a0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80284a4:	fb02 1203 	mla	r2, r2, r3, r1
 80284a8:	9205      	str	r2, [sp, #20]
 80284aa:	1e6a      	subs	r2, r5, #1
 80284ac:	9204      	str	r2, [sp, #16]
 80284ae:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80284b2:	f9b4 7000 	ldrsh.w	r7, [r4]
 80284b6:	454b      	cmp	r3, r9
 80284b8:	463a      	mov	r2, r7
 80284ba:	d008      	beq.n	80284ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80284bc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80284c0:	eb03 0b09 	add.w	fp, r3, r9
 80284c4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80284c8:	fb03 1309 	mla	r3, r3, r9, r1
 80284cc:	9305      	str	r3, [sp, #20]
 80284ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80284d2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80284d6:	4498      	add	r8, r3
 80284d8:	9b04      	ldr	r3, [sp, #16]
 80284da:	3b01      	subs	r3, #1
 80284dc:	9304      	str	r3, [sp, #16]
 80284de:	9b04      	ldr	r3, [sp, #16]
 80284e0:	3301      	adds	r3, #1
 80284e2:	d015      	beq.n	8028510 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80284e4:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80284e8:	42bb      	cmp	r3, r7
 80284ea:	d117      	bne.n	802851c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80284ec:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80284f0:	9b04      	ldr	r3, [sp, #16]
 80284f2:	4548      	cmp	r0, r9
 80284f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80284f8:	d17d      	bne.n	80285f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80284fa:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80284fe:	4401      	add	r1, r0
 8028500:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8028504:	4480      	add	r8, r0
 8028506:	e7e9      	b.n	80284dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8028508:	461f      	mov	r7, r3
 802850a:	e042      	b.n	8028592 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802850c:	2000      	movs	r0, #0
 802850e:	e002      	b.n	8028516 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8028510:	2900      	cmp	r1, #0
 8028512:	d16d      	bne.n	80285f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8028514:	2001      	movs	r0, #1
 8028516:	b00b      	add	sp, #44	@ 0x2c
 8028518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802851c:	b379      	cbz	r1, 802857e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802851e:	2f00      	cmp	r7, #0
 8028520:	db29      	blt.n	8028576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028522:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8028526:	42bb      	cmp	r3, r7
 8028528:	dd25      	ble.n	8028576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802852a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802852e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8028532:	f7ff ff77 	bl	8028424 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8028536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028538:	fb10 f003 	smulbb	r0, r0, r3
 802853c:	b280      	uxth	r0, r0
 802853e:	1c41      	adds	r1, r0, #1
 8028540:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028544:	1209      	asrs	r1, r1, #8
 8028546:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802854a:	d014      	beq.n	8028576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802854c:	b2c9      	uxtb	r1, r1
 802854e:	9808      	ldr	r0, [sp, #32]
 8028550:	b2ba      	uxth	r2, r7
 8028552:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8028554:	9102      	str	r1, [sp, #8]
 8028556:	2101      	movs	r1, #1
 8028558:	4413      	add	r3, r2
 802855a:	4402      	add	r2, r0
 802855c:	9101      	str	r1, [sp, #4]
 802855e:	fa0f f18b 	sxth.w	r1, fp
 8028562:	f8da 0000 	ldr.w	r0, [sl]
 8028566:	b21b      	sxth	r3, r3
 8028568:	9100      	str	r1, [sp, #0]
 802856a:	b212      	sxth	r2, r2
 802856c:	6941      	ldr	r1, [r0, #20]
 802856e:	4650      	mov	r0, sl
 8028570:	460d      	mov	r5, r1
 8028572:	9905      	ldr	r1, [sp, #20]
 8028574:	47a8      	blx	r5
 8028576:	9b04      	ldr	r3, [sp, #16]
 8028578:	1c7a      	adds	r2, r7, #1
 802857a:	3301      	adds	r3, #1
 802857c:	d0ca      	beq.n	8028514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802857e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028582:	1abb      	subs	r3, r7, r2
 8028584:	2b00      	cmp	r3, #0
 8028586:	dd31      	ble.n	80285ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028588:	2a00      	cmp	r2, #0
 802858a:	dabd      	bge.n	8028508 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802858c:	2f00      	cmp	r7, #0
 802858e:	dd2d      	ble.n	80285ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028590:	2200      	movs	r2, #0
 8028592:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8028596:	19d1      	adds	r1, r2, r7
 8028598:	4299      	cmp	r1, r3
 802859a:	db02      	blt.n	80285a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802859c:	1a9f      	subs	r7, r3, r2
 802859e:	2f00      	cmp	r7, #0
 80285a0:	dd24      	ble.n	80285ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80285a2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80285a6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80285aa:	f7ff ff3b 	bl	8028424 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80285ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80285b0:	fb10 f003 	smulbb	r0, r0, r3
 80285b4:	b280      	uxth	r0, r0
 80285b6:	1c41      	adds	r1, r0, #1
 80285b8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80285bc:	1209      	asrs	r1, r1, #8
 80285be:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80285c2:	d013      	beq.n	80285ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80285c4:	b292      	uxth	r2, r2
 80285c6:	9808      	ldr	r0, [sp, #32]
 80285c8:	b2c9      	uxtb	r1, r1
 80285ca:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80285cc:	b23f      	sxth	r7, r7
 80285ce:	4413      	add	r3, r2
 80285d0:	9102      	str	r1, [sp, #8]
 80285d2:	4402      	add	r2, r0
 80285d4:	fa0f f18b 	sxth.w	r1, fp
 80285d8:	f8da 0000 	ldr.w	r0, [sl]
 80285dc:	b21b      	sxth	r3, r3
 80285de:	9100      	str	r1, [sp, #0]
 80285e0:	b212      	sxth	r2, r2
 80285e2:	9701      	str	r7, [sp, #4]
 80285e4:	9905      	ldr	r1, [sp, #20]
 80285e6:	6947      	ldr	r7, [r0, #20]
 80285e8:	4650      	mov	r0, sl
 80285ea:	47b8      	blx	r7
 80285ec:	464b      	mov	r3, r9
 80285ee:	e75e      	b.n	80284ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80285f0:	2f00      	cmp	r7, #0
 80285f2:	da96      	bge.n	8028522 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80285f4:	e78e      	b.n	8028514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80285f6:	2900      	cmp	r1, #0
 80285f8:	d0f8      	beq.n	80285ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80285fa:	e790      	b.n	802851e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080285fc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80285fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028600:	461e      	mov	r6, r3
 8028602:	4b36      	ldr	r3, [pc, #216]	@ (80286dc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8028604:	2500      	movs	r5, #0
 8028606:	f100 0814 	add.w	r8, r0, #20
 802860a:	4604      	mov	r4, r0
 802860c:	4617      	mov	r7, r2
 802860e:	e9c0 3100 	strd	r3, r1, [r0]
 8028612:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8028616:	8185      	strh	r5, [r0, #12]
 8028618:	8103      	strh	r3, [r0, #8]
 802861a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802861e:	81c5      	strh	r5, [r0, #14]
 8028620:	7283      	strb	r3, [r0, #10]
 8028622:	8205      	strh	r5, [r0, #16]
 8028624:	8245      	strh	r5, [r0, #18]
 8028626:	4640      	mov	r0, r8
 8028628:	f7eb fca2 	bl	8013f70 <_ZN8touchgfx7OutlineC1Ev>
 802862c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8028630:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8028634:	466b      	mov	r3, sp
 8028636:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802863a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802863e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8028642:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8028646:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802864a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802864e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8028652:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8028656:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802865a:	6830      	ldr	r0, [r6, #0]
 802865c:	6871      	ldr	r1, [r6, #4]
 802865e:	8872      	ldrh	r2, [r6, #2]
 8028660:	8835      	ldrh	r5, [r6, #0]
 8028662:	c303      	stmia	r3!, {r0, r1}
 8028664:	887b      	ldrh	r3, [r7, #2]
 8028666:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802866a:	4413      	add	r3, r2
 802866c:	883a      	ldrh	r2, [r7, #0]
 802866e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8028672:	442a      	add	r2, r5
 8028674:	81e3      	strh	r3, [r4, #14]
 8028676:	8220      	strh	r0, [r4, #16]
 8028678:	4668      	mov	r0, sp
 802867a:	81a2      	strh	r2, [r4, #12]
 802867c:	8261      	strh	r1, [r4, #18]
 802867e:	4639      	mov	r1, r7
 8028680:	f7ed fe7e 	bl	8016380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028684:	f104 000c 	add.w	r0, r4, #12
 8028688:	f7ed fe36 	bl	80162f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802868c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028690:	f8bd 2000 	ldrh.w	r2, [sp]
 8028694:	4640      	mov	r0, r8
 8028696:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802869a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802869e:	f7eb fc4b 	bl	8013f38 <_ZN8touchgfx7Outline5resetEv>
 80286a2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80286a6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80286aa:	4620      	mov	r0, r4
 80286ac:	015b      	lsls	r3, r3, #5
 80286ae:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80286b0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80286b4:	015b      	lsls	r3, r3, #5
 80286b6:	6523      	str	r3, [r4, #80]	@ 0x50
 80286b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80286bc:	015b      	lsls	r3, r3, #5
 80286be:	6563      	str	r3, [r4, #84]	@ 0x54
 80286c0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80286c4:	015b      	lsls	r3, r3, #5
 80286c6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80286c8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80286cc:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80286d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80286d4:	b002      	add	sp, #8
 80286d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80286da:	bf00      	nop
 80286dc:	0802e558 	.word	0x0802e558

080286e0 <_ZN8touchgfx6Canvas5closeEv>:
 80286e0:	b538      	push	{r3, r4, r5, lr}
 80286e2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80286e6:	4604      	mov	r4, r0
 80286e8:	b193      	cbz	r3, 8028710 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80286ea:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80286ee:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80286f2:	4213      	tst	r3, r2
 80286f4:	d10c      	bne.n	8028710 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80286f6:	f100 0514 	add.w	r5, r0, #20
 80286fa:	b123      	cbz	r3, 8028706 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80286fc:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8028700:	4628      	mov	r0, r5
 8028702:	f7ff fea3 	bl	802844c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028706:	4628      	mov	r0, r5
 8028708:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802870c:	f7ff fe9e 	bl	802844c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028710:	2300      	movs	r3, #0
 8028712:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8028716:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802871a:	4298      	cmp	r0, r3
 802871c:	bf34      	ite	cc
 802871e:	2000      	movcc	r0, #0
 8028720:	2001      	movcs	r0, #1
 8028722:	bd38      	pop	{r3, r4, r5, pc}

08028724 <_ZN8touchgfx6Canvas6renderEh>:
 8028724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028728:	7a85      	ldrb	r5, [r0, #10]
 802872a:	4604      	mov	r4, r0
 802872c:	4369      	muls	r1, r5
 802872e:	1c4d      	adds	r5, r1, #1
 8028730:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028734:	122d      	asrs	r5, r5, #8
 8028736:	f000 8098 	beq.w	802886a <_ZN8touchgfx6Canvas6renderEh+0x146>
 802873a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802873e:	2b00      	cmp	r3, #0
 8028740:	f000 8093 	beq.w	802886a <_ZN8touchgfx6Canvas6renderEh+0x146>
 8028744:	f7ff ffcc 	bl	80286e0 <_ZN8touchgfx6Canvas5closeEv>
 8028748:	4607      	mov	r7, r0
 802874a:	2800      	cmp	r0, #0
 802874c:	d045      	beq.n	80287da <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802874e:	6860      	ldr	r0, [r4, #4]
 8028750:	4e47      	ldr	r6, [pc, #284]	@ (8028870 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8028752:	6803      	ldr	r3, [r0, #0]
 8028754:	6837      	ldr	r7, [r6, #0]
 8028756:	689b      	ldr	r3, [r3, #8]
 8028758:	4798      	blx	r3
 802875a:	4601      	mov	r1, r0
 802875c:	4638      	mov	r0, r7
 802875e:	f7e8 fc6d 	bl	801103c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8028762:	4607      	mov	r7, r0
 8028764:	f7dd fa16 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8028768:	6803      	ldr	r3, [r0, #0]
 802876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802876c:	4798      	blx	r3
 802876e:	4680      	mov	r8, r0
 8028770:	f7dd fa10 	bl	8005b94 <_ZN8touchgfx3HAL3lcdEv>
 8028774:	6803      	ldr	r3, [r0, #0]
 8028776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028778:	4798      	blx	r3
 802877a:	280b      	cmp	r0, #11
 802877c:	d85a      	bhi.n	8028834 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802877e:	e8df f000 	tbb	[pc, r0]
 8028782:	5b50      	.short	0x5b50
 8028784:	3059066b 	.word	0x3059066b
 8028788:	64646440 	.word	0x64646440
 802878c:	6464      	.short	0x6464
 802878e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028792:	2208      	movs	r2, #8
 8028794:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028798:	fb91 f2f2 	sdiv	r2, r1, r2
 802879c:	fb08 2303 	mla	r3, r8, r3, r2
 80287a0:	441f      	add	r7, r3
 80287a2:	424b      	negs	r3, r1
 80287a4:	f001 0107 	and.w	r1, r1, #7
 80287a8:	f003 0307 	and.w	r3, r3, #7
 80287ac:	bf58      	it	pl
 80287ae:	4259      	negpl	r1, r3
 80287b0:	b2c9      	uxtb	r1, r1
 80287b2:	b2ed      	uxtb	r5, r5
 80287b4:	463a      	mov	r2, r7
 80287b6:	fa0f f388 	sxth.w	r3, r8
 80287ba:	f104 0014 	add.w	r0, r4, #20
 80287be:	e9cd 1500 	strd	r1, r5, [sp]
 80287c2:	6861      	ldr	r1, [r4, #4]
 80287c4:	f7ff fe4e 	bl	8028464 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80287c8:	4607      	mov	r7, r0
 80287ca:	6860      	ldr	r0, [r4, #4]
 80287cc:	6803      	ldr	r3, [r0, #0]
 80287ce:	691b      	ldr	r3, [r3, #16]
 80287d0:	4798      	blx	r3
 80287d2:	6830      	ldr	r0, [r6, #0]
 80287d4:	6803      	ldr	r3, [r0, #0]
 80287d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80287d8:	4798      	blx	r3
 80287da:	4638      	mov	r0, r7
 80287dc:	b002      	add	sp, #8
 80287de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80287e2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80287e6:	2204      	movs	r2, #4
 80287e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80287ec:	fb91 f2f2 	sdiv	r2, r1, r2
 80287f0:	fb08 2303 	mla	r3, r8, r3, r2
 80287f4:	441f      	add	r7, r3
 80287f6:	424b      	negs	r3, r1
 80287f8:	f001 0103 	and.w	r1, r1, #3
 80287fc:	f003 0303 	and.w	r3, r3, #3
 8028800:	e7d4      	b.n	80287ac <_ZN8touchgfx6Canvas6renderEh+0x88>
 8028802:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028806:	2202      	movs	r2, #2
 8028808:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802880c:	2900      	cmp	r1, #0
 802880e:	fb91 f2f2 	sdiv	r2, r1, r2
 8028812:	f001 0101 	and.w	r1, r1, #1
 8028816:	fb08 2303 	mla	r3, r8, r3, r2
 802881a:	bfb8      	it	lt
 802881c:	4249      	neglt	r1, r1
 802881e:	441f      	add	r7, r3
 8028820:	e7c6      	b.n	80287b0 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8028822:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802882a:	fb08 f303 	mul.w	r3, r8, r3
 802882e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8028832:	441f      	add	r7, r3
 8028834:	2100      	movs	r1, #0
 8028836:	e7bc      	b.n	80287b2 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8028838:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802883c:	2103      	movs	r1, #3
 802883e:	fb08 f203 	mul.w	r2, r8, r3
 8028842:	89a3      	ldrh	r3, [r4, #12]
 8028844:	fb13 2301 	smlabb	r3, r3, r1, r2
 8028848:	e7f3      	b.n	8028832 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802884a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802884e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028852:	fb08 2303 	mla	r3, r8, r3, r2
 8028856:	e7ec      	b.n	8028832 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8028858:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802885c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028860:	fb08 f303 	mul.w	r3, r8, r3
 8028864:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8028868:	e7e3      	b.n	8028832 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802886a:	2701      	movs	r7, #1
 802886c:	e7b5      	b.n	80287da <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802886e:	bf00      	nop
 8028870:	20027dc0 	.word	0x20027dc0

08028874 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8028874:	4b06      	ldr	r3, [pc, #24]	@ (8028890 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8028876:	b510      	push	{r4, lr}
 8028878:	781b      	ldrb	r3, [r3, #0]
 802887a:	2b01      	cmp	r3, #1
 802887c:	d107      	bne.n	802888e <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802887e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8028882:	680b      	ldr	r3, [r1, #0]
 8028884:	6814      	ldr	r4, [r2, #0]
 8028886:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802888a:	6013      	str	r3, [r2, #0]
 802888c:	600c      	str	r4, [r1, #0]
 802888e:	bd10      	pop	{r4, pc}
 8028890:	20027db8 	.word	0x20027db8

08028894 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8028894:	b513      	push	{r0, r1, r4, lr}
 8028896:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802889a:	4604      	mov	r4, r0
 802889c:	e9cd 2100 	strd	r2, r1, [sp]
 80288a0:	b9a3      	cbnz	r3, 80288cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80288a2:	466a      	mov	r2, sp
 80288a4:	a901      	add	r1, sp, #4
 80288a6:	4620      	mov	r0, r4
 80288a8:	f7ff ffe4 	bl	8028874 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80288ac:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80288ae:	9901      	ldr	r1, [sp, #4]
 80288b0:	9a00      	ldr	r2, [sp, #0]
 80288b2:	1ac9      	subs	r1, r1, r3
 80288b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80288b6:	1ad2      	subs	r2, r2, r3
 80288b8:	9101      	str	r1, [sp, #4]
 80288ba:	2a00      	cmp	r2, #0
 80288bc:	9200      	str	r2, [sp, #0]
 80288be:	da0b      	bge.n	80288d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80288c0:	2301      	movs	r3, #1
 80288c2:	2900      	cmp	r1, #0
 80288c4:	da0e      	bge.n	80288e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80288c6:	f043 0304 	orr.w	r3, r3, #4
 80288ca:	e013      	b.n	80288f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80288cc:	f7ff ff08 	bl	80286e0 <_ZN8touchgfx6Canvas5closeEv>
 80288d0:	2800      	cmp	r0, #0
 80288d2:	d1e6      	bne.n	80288a2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80288d4:	b002      	add	sp, #8
 80288d6:	bd10      	pop	{r4, pc}
 80288d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80288da:	429a      	cmp	r2, r3
 80288dc:	bfac      	ite	ge
 80288de:	2302      	movge	r3, #2
 80288e0:	2300      	movlt	r3, #0
 80288e2:	e7ee      	b.n	80288c2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80288e4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80288e6:	4281      	cmp	r1, r0
 80288e8:	bfac      	ite	ge
 80288ea:	2008      	movge	r0, #8
 80288ec:	2000      	movlt	r0, #0
 80288ee:	4318      	orrs	r0, r3
 80288f0:	b2c3      	uxtb	r3, r0
 80288f2:	b158      	cbz	r0, 802890c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80288f4:	2200      	movs	r2, #0
 80288f6:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80288fa:	9901      	ldr	r1, [sp, #4]
 80288fc:	9a00      	ldr	r2, [sp, #0]
 80288fe:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8028900:	6722      	str	r2, [r4, #112]	@ 0x70
 8028902:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8028906:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802890a:	e7e3      	b.n	80288d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802890c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8028910:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8028914:	4298      	cmp	r0, r3
 8028916:	d803      	bhi.n	8028920 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8028918:	f104 0014 	add.w	r0, r4, #20
 802891c:	f7eb fffc 	bl	8014918 <_ZN8touchgfx7Outline6moveToEii>
 8028920:	2301      	movs	r3, #1
 8028922:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8028926:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802892a:	2300      	movs	r3, #0
 802892c:	e7e5      	b.n	80288fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802892e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802892e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028930:	ab02      	add	r3, sp, #8
 8028932:	4604      	mov	r4, r0
 8028934:	9101      	str	r1, [sp, #4]
 8028936:	a901      	add	r1, sp, #4
 8028938:	f843 2d08 	str.w	r2, [r3, #-8]!
 802893c:	461a      	mov	r2, r3
 802893e:	f7ff ff99 	bl	8028874 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028942:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028944:	9901      	ldr	r1, [sp, #4]
 8028946:	9a00      	ldr	r2, [sp, #0]
 8028948:	1ac9      	subs	r1, r1, r3
 802894a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802894c:	1ad2      	subs	r2, r2, r3
 802894e:	9101      	str	r1, [sp, #4]
 8028950:	2a00      	cmp	r2, #0
 8028952:	9200      	str	r2, [sp, #0]
 8028954:	db1c      	blt.n	8028990 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8028956:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028958:	429a      	cmp	r2, r3
 802895a:	bfac      	ite	ge
 802895c:	2002      	movge	r0, #2
 802895e:	2000      	movlt	r0, #0
 8028960:	2900      	cmp	r1, #0
 8028962:	db17      	blt.n	8028994 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8028964:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8028966:	4299      	cmp	r1, r3
 8028968:	bfac      	ite	ge
 802896a:	2308      	movge	r3, #8
 802896c:	2300      	movlt	r3, #0
 802896e:	4303      	orrs	r3, r0
 8028970:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8028974:	b2dd      	uxtb	r5, r3
 8028976:	b978      	cbnz	r0, 8028998 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8028978:	f104 0014 	add.w	r0, r4, #20
 802897c:	f7ff fd66 	bl	802844c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028980:	9b01      	ldr	r3, [sp, #4]
 8028982:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8028986:	6623      	str	r3, [r4, #96]	@ 0x60
 8028988:	9b00      	ldr	r3, [sp, #0]
 802898a:	6663      	str	r3, [r4, #100]	@ 0x64
 802898c:	b002      	add	sp, #8
 802898e:	bd70      	pop	{r4, r5, r6, pc}
 8028990:	2001      	movs	r0, #1
 8028992:	e7e5      	b.n	8028960 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8028994:	2304      	movs	r3, #4
 8028996:	e7ea      	b.n	802896e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8028998:	b113      	cbz	r3, 80289a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802899a:	ea10 0305 	ands.w	r3, r0, r5
 802899e:	d11c      	bne.n	80289da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80289a0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80289a4:	f104 0614 	add.w	r6, r4, #20
 80289a8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80289ac:	b98b      	cbnz	r3, 80289d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80289ae:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80289b2:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80289b6:	4298      	cmp	r0, r3
 80289b8:	d802      	bhi.n	80289c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80289ba:	4630      	mov	r0, r6
 80289bc:	f7eb ffac 	bl	8014918 <_ZN8touchgfx7Outline6moveToEii>
 80289c0:	2301      	movs	r3, #1
 80289c2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80289c6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80289ca:	4630      	mov	r0, r6
 80289cc:	e9dd 2100 	ldrd	r2, r1, [sp]
 80289d0:	e7d4      	b.n	802897c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80289d2:	4630      	mov	r0, r6
 80289d4:	f7ff fd3a 	bl	802844c <_ZN8touchgfx10Rasterizer6lineToEii>
 80289d8:	e7f7      	b.n	80289ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80289da:	461d      	mov	r5, r3
 80289dc:	e7d0      	b.n	8028980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080289e0 <_ZN8touchgfx6CanvasD1Ev>:
 80289e0:	4b04      	ldr	r3, [pc, #16]	@ (80289f4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80289e2:	b510      	push	{r4, lr}
 80289e4:	4604      	mov	r4, r0
 80289e6:	f840 3b14 	str.w	r3, [r0], #20
 80289ea:	f7eb fa9d 	bl	8013f28 <_ZN8touchgfx7OutlineD1Ev>
 80289ee:	4620      	mov	r0, r4
 80289f0:	bd10      	pop	{r4, pc}
 80289f2:	bf00      	nop
 80289f4:	0802e558 	.word	0x0802e558

080289f8 <_ZN8touchgfx6CanvasD0Ev>:
 80289f8:	b510      	push	{r4, lr}
 80289fa:	4604      	mov	r4, r0
 80289fc:	f7ff fff0 	bl	80289e0 <_ZN8touchgfx6CanvasD1Ev>
 8028a00:	2174      	movs	r1, #116	@ 0x74
 8028a02:	4620      	mov	r0, r4
 8028a04:	f000 f8d1 	bl	8028baa <_ZdlPvj>
 8028a08:	4620      	mov	r0, r4
 8028a0a:	bd10      	pop	{r4, pc}

08028a0c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8028a0c:	790b      	ldrb	r3, [r1, #4]
 8028a0e:	2b00      	cmp	r3, #0
 8028a10:	bf0c      	ite	eq
 8028a12:	2301      	moveq	r3, #1
 8028a14:	2300      	movne	r3, #0
 8028a16:	b570      	push	{r4, r5, r6, lr}
 8028a18:	4604      	mov	r4, r0
 8028a1a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8028a1e:	460e      	mov	r6, r1
 8028a20:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8028a24:	d109      	bne.n	8028a3a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8028a26:	b14d      	cbz	r5, 8028a3c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8028a28:	7933      	ldrb	r3, [r6, #4]
 8028a2a:	2b01      	cmp	r3, #1
 8028a2c:	d10c      	bne.n	8028a48 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028a2e:	6823      	ldr	r3, [r4, #0]
 8028a30:	4620      	mov	r0, r4
 8028a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8028a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028a38:	4718      	bx	r3
 8028a3a:	b12d      	cbz	r5, 8028a48 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028a3c:	6823      	ldr	r3, [r4, #0]
 8028a3e:	4620      	mov	r0, r4
 8028a40:	695b      	ldr	r3, [r3, #20]
 8028a42:	4798      	blx	r3
 8028a44:	2d00      	cmp	r5, #0
 8028a46:	d1ef      	bne.n	8028a28 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8028a48:	bd70      	pop	{r4, r5, r6, pc}

08028a4a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8028a4a:	b570      	push	{r4, r5, r6, lr}
 8028a4c:	880b      	ldrh	r3, [r1, #0]
 8028a4e:	4605      	mov	r5, r0
 8028a50:	4604      	mov	r4, r0
 8028a52:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8028a54:	8813      	ldrh	r3, [r2, #0]
 8028a56:	f825 3f30 	strh.w	r3, [r5, #48]!
 8028a5a:	4628      	mov	r0, r5
 8028a5c:	f7f1 f9f6 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8028a60:	4606      	mov	r6, r0
 8028a62:	4628      	mov	r0, r5
 8028a64:	f7f1 fa26 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8028a68:	6823      	ldr	r3, [r4, #0]
 8028a6a:	4605      	mov	r5, r0
 8028a6c:	4631      	mov	r1, r6
 8028a6e:	4620      	mov	r0, r4
 8028a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028a72:	4798      	blx	r3
 8028a74:	6823      	ldr	r3, [r4, #0]
 8028a76:	4629      	mov	r1, r5
 8028a78:	4620      	mov	r0, r4
 8028a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028a80:	4718      	bx	r3

08028a82 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8028a82:	b510      	push	{r4, lr}
 8028a84:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8028a88:	4604      	mov	r4, r0
 8028a8a:	2bff      	cmp	r3, #255	@ 0xff
 8028a8c:	d006      	beq.n	8028a9c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8028a8e:	2300      	movs	r3, #0
 8028a90:	8003      	strh	r3, [r0, #0]
 8028a92:	8043      	strh	r3, [r0, #2]
 8028a94:	8083      	strh	r3, [r0, #4]
 8028a96:	80c3      	strh	r3, [r0, #6]
 8028a98:	4620      	mov	r0, r4
 8028a9a:	bd10      	pop	{r4, pc}
 8028a9c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8028aa0:	b11b      	cbz	r3, 8028aaa <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8028aa2:	3130      	adds	r1, #48	@ 0x30
 8028aa4:	f7f1 fa3a 	bl	8019f1c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8028aa8:	e7f6      	b.n	8028a98 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8028aaa:	312e      	adds	r1, #46	@ 0x2e
 8028aac:	e7fa      	b.n	8028aa4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08028ab0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8028ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ab4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8028ab8:	b08a      	sub	sp, #40	@ 0x28
 8028aba:	4604      	mov	r4, r0
 8028abc:	4688      	mov	r8, r1
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d066      	beq.n	8028b90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8028ac2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8028ac4:	a805      	add	r0, sp, #20
 8028ac6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8028aca:	f7f1 f9bf 	bl	8019e4c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8028ace:	4607      	mov	r7, r0
 8028ad0:	a805      	add	r0, sp, #20
 8028ad2:	f7f1 f9ef 	bl	8019eb4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8028ad6:	f9b8 6000 	ldrsh.w	r6, [r8]
 8028ada:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8028ade:	2300      	movs	r3, #0
 8028ae0:	4432      	add	r2, r6
 8028ae2:	9306      	str	r3, [sp, #24]
 8028ae4:	b292      	uxth	r2, r2
 8028ae6:	fa0f fc82 	sxth.w	ip, r2
 8028aea:	459c      	cmp	ip, r3
 8028aec:	dd52      	ble.n	8028b94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8028aee:	42b7      	cmp	r7, r6
 8028af0:	dd50      	ble.n	8028b94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8028af2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8028af6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8028afa:	442b      	add	r3, r5
 8028afc:	b29b      	uxth	r3, r3
 8028afe:	b219      	sxth	r1, r3
 8028b00:	2900      	cmp	r1, #0
 8028b02:	dd47      	ble.n	8028b94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8028b04:	42a8      	cmp	r0, r5
 8028b06:	dd45      	ble.n	8028b94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8028b08:	4567      	cmp	r7, ip
 8028b0a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8028b0e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028b12:	bfb8      	it	lt
 8028b14:	b2ba      	uxthlt	r2, r7
 8028b16:	4288      	cmp	r0, r1
 8028b18:	f8ad 6018 	strh.w	r6, [sp, #24]
 8028b1c:	bfb8      	it	lt
 8028b1e:	b283      	uxthlt	r3, r0
 8028b20:	1b92      	subs	r2, r2, r6
 8028b22:	f8ad 501a 	strh.w	r5, [sp, #26]
 8028b26:	1b5b      	subs	r3, r3, r5
 8028b28:	f8ad 201c 	strh.w	r2, [sp, #28]
 8028b2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8028b30:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8028b34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028b38:	429a      	cmp	r2, r3
 8028b3a:	d026      	beq.n	8028b8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8028b3c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8028b40:	2b00      	cmp	r3, #0
 8028b42:	dd22      	ble.n	8028b8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8028b44:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8028b48:	2b00      	cmp	r3, #0
 8028b4a:	dd1e      	ble.n	8028b8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8028b4c:	2300      	movs	r3, #0
 8028b4e:	a908      	add	r1, sp, #32
 8028b50:	4620      	mov	r0, r4
 8028b52:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8028b56:	6823      	ldr	r3, [r4, #0]
 8028b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b5a:	4798      	blx	r3
 8028b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8028b9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8028b5e:	681b      	ldr	r3, [r3, #0]
 8028b60:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8028b64:	b10a      	cbz	r2, 8028b6a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8028b66:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8028b68:	b900      	cbnz	r0, 8028b6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8028b6a:	6898      	ldr	r0, [r3, #8]
 8028b6c:	2501      	movs	r5, #1
 8028b6e:	6801      	ldr	r1, [r0, #0]
 8028b70:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8028b74:	9502      	str	r5, [sp, #8]
 8028b76:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8028b7a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8028b7e:	9401      	str	r4, [sp, #4]
 8028b80:	ac06      	add	r4, sp, #24
 8028b82:	9400      	str	r4, [sp, #0]
 8028b84:	688c      	ldr	r4, [r1, #8]
 8028b86:	a905      	add	r1, sp, #20
 8028b88:	47a0      	blx	r4
 8028b8a:	b00a      	add	sp, #40	@ 0x28
 8028b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b90:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8028b92:	e797      	b.n	8028ac4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8028b94:	2300      	movs	r3, #0
 8028b96:	9307      	str	r3, [sp, #28]
 8028b98:	e7ca      	b.n	8028b30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8028b9a:	bf00      	nop
 8028b9c:	20027dc0 	.word	0x20027dc0

08028ba0 <__aeabi_atexit>:
 8028ba0:	460b      	mov	r3, r1
 8028ba2:	4601      	mov	r1, r0
 8028ba4:	4618      	mov	r0, r3
 8028ba6:	f000 b911 	b.w	8028dcc <__cxa_atexit>

08028baa <_ZdlPvj>:
 8028baa:	f000 b812 	b.w	8028bd2 <_ZdlPv>

08028bae <__cxa_guard_acquire>:
 8028bae:	6802      	ldr	r2, [r0, #0]
 8028bb0:	07d2      	lsls	r2, r2, #31
 8028bb2:	4603      	mov	r3, r0
 8028bb4:	d405      	bmi.n	8028bc2 <__cxa_guard_acquire+0x14>
 8028bb6:	7842      	ldrb	r2, [r0, #1]
 8028bb8:	b102      	cbz	r2, 8028bbc <__cxa_guard_acquire+0xe>
 8028bba:	deff      	udf	#255	@ 0xff
 8028bbc:	2001      	movs	r0, #1
 8028bbe:	7058      	strb	r0, [r3, #1]
 8028bc0:	4770      	bx	lr
 8028bc2:	2000      	movs	r0, #0
 8028bc4:	4770      	bx	lr

08028bc6 <__cxa_guard_release>:
 8028bc6:	2301      	movs	r3, #1
 8028bc8:	6003      	str	r3, [r0, #0]
 8028bca:	4770      	bx	lr

08028bcc <__cxa_pure_virtual>:
 8028bcc:	b508      	push	{r3, lr}
 8028bce:	f000 f80f 	bl	8028bf0 <_ZSt9terminatev>

08028bd2 <_ZdlPv>:
 8028bd2:	f000 b845 	b.w	8028c60 <free>

08028bd6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028bd6:	b508      	push	{r3, lr}
 8028bd8:	4780      	blx	r0
 8028bda:	f000 f80e 	bl	8028bfa <abort>
	...

08028be0 <_ZSt13get_terminatev>:
 8028be0:	4b02      	ldr	r3, [pc, #8]	@ (8028bec <_ZSt13get_terminatev+0xc>)
 8028be2:	6818      	ldr	r0, [r3, #0]
 8028be4:	f3bf 8f5b 	dmb	ish
 8028be8:	4770      	bx	lr
 8028bea:	bf00      	nop
 8028bec:	200000ec 	.word	0x200000ec

08028bf0 <_ZSt9terminatev>:
 8028bf0:	b508      	push	{r3, lr}
 8028bf2:	f7ff fff5 	bl	8028be0 <_ZSt13get_terminatev>
 8028bf6:	f7ff ffee 	bl	8028bd6 <_ZN10__cxxabiv111__terminateEPFvvE>

08028bfa <abort>:
 8028bfa:	b508      	push	{r3, lr}
 8028bfc:	2006      	movs	r0, #6
 8028bfe:	f000 fae1 	bl	80291c4 <raise>
 8028c02:	2001      	movs	r0, #1
 8028c04:	f7dc fb66 	bl	80052d4 <_exit>

08028c08 <__assert_func>:
 8028c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028c0a:	4614      	mov	r4, r2
 8028c0c:	461a      	mov	r2, r3
 8028c0e:	4b09      	ldr	r3, [pc, #36]	@ (8028c34 <__assert_func+0x2c>)
 8028c10:	681b      	ldr	r3, [r3, #0]
 8028c12:	4605      	mov	r5, r0
 8028c14:	68d8      	ldr	r0, [r3, #12]
 8028c16:	b954      	cbnz	r4, 8028c2e <__assert_func+0x26>
 8028c18:	4b07      	ldr	r3, [pc, #28]	@ (8028c38 <__assert_func+0x30>)
 8028c1a:	461c      	mov	r4, r3
 8028c1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028c20:	9100      	str	r1, [sp, #0]
 8028c22:	462b      	mov	r3, r5
 8028c24:	4905      	ldr	r1, [pc, #20]	@ (8028c3c <__assert_func+0x34>)
 8028c26:	f000 f983 	bl	8028f30 <fiprintf>
 8028c2a:	f7ff ffe6 	bl	8028bfa <abort>
 8028c2e:	4b04      	ldr	r3, [pc, #16]	@ (8028c40 <__assert_func+0x38>)
 8028c30:	e7f4      	b.n	8028c1c <__assert_func+0x14>
 8028c32:	bf00      	nop
 8028c34:	200000fc 	.word	0x200000fc
 8028c38:	0802e59f 	.word	0x0802e59f
 8028c3c:	0802e571 	.word	0x0802e571
 8028c40:	0802e564 	.word	0x0802e564

08028c44 <atexit>:
 8028c44:	2300      	movs	r3, #0
 8028c46:	4601      	mov	r1, r0
 8028c48:	461a      	mov	r2, r3
 8028c4a:	4618      	mov	r0, r3
 8028c4c:	f000 bbbe 	b.w	80293cc <__register_exitproc>

08028c50 <malloc>:
 8028c50:	4b02      	ldr	r3, [pc, #8]	@ (8028c5c <malloc+0xc>)
 8028c52:	4601      	mov	r1, r0
 8028c54:	6818      	ldr	r0, [r3, #0]
 8028c56:	f000 b82d 	b.w	8028cb4 <_malloc_r>
 8028c5a:	bf00      	nop
 8028c5c:	200000fc 	.word	0x200000fc

08028c60 <free>:
 8028c60:	4b02      	ldr	r3, [pc, #8]	@ (8028c6c <free+0xc>)
 8028c62:	4601      	mov	r1, r0
 8028c64:	6818      	ldr	r0, [r3, #0]
 8028c66:	f000 bc0d 	b.w	8029484 <_free_r>
 8028c6a:	bf00      	nop
 8028c6c:	200000fc 	.word	0x200000fc

08028c70 <sbrk_aligned>:
 8028c70:	b570      	push	{r4, r5, r6, lr}
 8028c72:	4e0f      	ldr	r6, [pc, #60]	@ (8028cb0 <sbrk_aligned+0x40>)
 8028c74:	460c      	mov	r4, r1
 8028c76:	6831      	ldr	r1, [r6, #0]
 8028c78:	4605      	mov	r5, r0
 8028c7a:	b911      	cbnz	r1, 8028c82 <sbrk_aligned+0x12>
 8028c7c:	f000 fb48 	bl	8029310 <_sbrk_r>
 8028c80:	6030      	str	r0, [r6, #0]
 8028c82:	4621      	mov	r1, r4
 8028c84:	4628      	mov	r0, r5
 8028c86:	f000 fb43 	bl	8029310 <_sbrk_r>
 8028c8a:	1c43      	adds	r3, r0, #1
 8028c8c:	d103      	bne.n	8028c96 <sbrk_aligned+0x26>
 8028c8e:	f04f 34ff 	mov.w	r4, #4294967295
 8028c92:	4620      	mov	r0, r4
 8028c94:	bd70      	pop	{r4, r5, r6, pc}
 8028c96:	1cc4      	adds	r4, r0, #3
 8028c98:	f024 0403 	bic.w	r4, r4, #3
 8028c9c:	42a0      	cmp	r0, r4
 8028c9e:	d0f8      	beq.n	8028c92 <sbrk_aligned+0x22>
 8028ca0:	1a21      	subs	r1, r4, r0
 8028ca2:	4628      	mov	r0, r5
 8028ca4:	f000 fb34 	bl	8029310 <_sbrk_r>
 8028ca8:	3001      	adds	r0, #1
 8028caa:	d1f2      	bne.n	8028c92 <sbrk_aligned+0x22>
 8028cac:	e7ef      	b.n	8028c8e <sbrk_aligned+0x1e>
 8028cae:	bf00      	nop
 8028cb0:	2002881c 	.word	0x2002881c

08028cb4 <_malloc_r>:
 8028cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028cb8:	1ccd      	adds	r5, r1, #3
 8028cba:	f025 0503 	bic.w	r5, r5, #3
 8028cbe:	3508      	adds	r5, #8
 8028cc0:	2d0c      	cmp	r5, #12
 8028cc2:	bf38      	it	cc
 8028cc4:	250c      	movcc	r5, #12
 8028cc6:	2d00      	cmp	r5, #0
 8028cc8:	4606      	mov	r6, r0
 8028cca:	db01      	blt.n	8028cd0 <_malloc_r+0x1c>
 8028ccc:	42a9      	cmp	r1, r5
 8028cce:	d904      	bls.n	8028cda <_malloc_r+0x26>
 8028cd0:	230c      	movs	r3, #12
 8028cd2:	6033      	str	r3, [r6, #0]
 8028cd4:	2000      	movs	r0, #0
 8028cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028db0 <_malloc_r+0xfc>
 8028cde:	f000 f869 	bl	8028db4 <__malloc_lock>
 8028ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8028ce6:	461c      	mov	r4, r3
 8028ce8:	bb44      	cbnz	r4, 8028d3c <_malloc_r+0x88>
 8028cea:	4629      	mov	r1, r5
 8028cec:	4630      	mov	r0, r6
 8028cee:	f7ff ffbf 	bl	8028c70 <sbrk_aligned>
 8028cf2:	1c43      	adds	r3, r0, #1
 8028cf4:	4604      	mov	r4, r0
 8028cf6:	d158      	bne.n	8028daa <_malloc_r+0xf6>
 8028cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8028cfc:	4627      	mov	r7, r4
 8028cfe:	2f00      	cmp	r7, #0
 8028d00:	d143      	bne.n	8028d8a <_malloc_r+0xd6>
 8028d02:	2c00      	cmp	r4, #0
 8028d04:	d04b      	beq.n	8028d9e <_malloc_r+0xea>
 8028d06:	6823      	ldr	r3, [r4, #0]
 8028d08:	4639      	mov	r1, r7
 8028d0a:	4630      	mov	r0, r6
 8028d0c:	eb04 0903 	add.w	r9, r4, r3
 8028d10:	f000 fafe 	bl	8029310 <_sbrk_r>
 8028d14:	4581      	cmp	r9, r0
 8028d16:	d142      	bne.n	8028d9e <_malloc_r+0xea>
 8028d18:	6821      	ldr	r1, [r4, #0]
 8028d1a:	1a6d      	subs	r5, r5, r1
 8028d1c:	4629      	mov	r1, r5
 8028d1e:	4630      	mov	r0, r6
 8028d20:	f7ff ffa6 	bl	8028c70 <sbrk_aligned>
 8028d24:	3001      	adds	r0, #1
 8028d26:	d03a      	beq.n	8028d9e <_malloc_r+0xea>
 8028d28:	6823      	ldr	r3, [r4, #0]
 8028d2a:	442b      	add	r3, r5
 8028d2c:	6023      	str	r3, [r4, #0]
 8028d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8028d32:	685a      	ldr	r2, [r3, #4]
 8028d34:	bb62      	cbnz	r2, 8028d90 <_malloc_r+0xdc>
 8028d36:	f8c8 7000 	str.w	r7, [r8]
 8028d3a:	e00f      	b.n	8028d5c <_malloc_r+0xa8>
 8028d3c:	6822      	ldr	r2, [r4, #0]
 8028d3e:	1b52      	subs	r2, r2, r5
 8028d40:	d420      	bmi.n	8028d84 <_malloc_r+0xd0>
 8028d42:	2a0b      	cmp	r2, #11
 8028d44:	d917      	bls.n	8028d76 <_malloc_r+0xc2>
 8028d46:	1961      	adds	r1, r4, r5
 8028d48:	42a3      	cmp	r3, r4
 8028d4a:	6025      	str	r5, [r4, #0]
 8028d4c:	bf18      	it	ne
 8028d4e:	6059      	strne	r1, [r3, #4]
 8028d50:	6863      	ldr	r3, [r4, #4]
 8028d52:	bf08      	it	eq
 8028d54:	f8c8 1000 	streq.w	r1, [r8]
 8028d58:	5162      	str	r2, [r4, r5]
 8028d5a:	604b      	str	r3, [r1, #4]
 8028d5c:	4630      	mov	r0, r6
 8028d5e:	f000 f82f 	bl	8028dc0 <__malloc_unlock>
 8028d62:	f104 000b 	add.w	r0, r4, #11
 8028d66:	1d23      	adds	r3, r4, #4
 8028d68:	f020 0007 	bic.w	r0, r0, #7
 8028d6c:	1ac2      	subs	r2, r0, r3
 8028d6e:	bf1c      	itt	ne
 8028d70:	1a1b      	subne	r3, r3, r0
 8028d72:	50a3      	strne	r3, [r4, r2]
 8028d74:	e7af      	b.n	8028cd6 <_malloc_r+0x22>
 8028d76:	6862      	ldr	r2, [r4, #4]
 8028d78:	42a3      	cmp	r3, r4
 8028d7a:	bf0c      	ite	eq
 8028d7c:	f8c8 2000 	streq.w	r2, [r8]
 8028d80:	605a      	strne	r2, [r3, #4]
 8028d82:	e7eb      	b.n	8028d5c <_malloc_r+0xa8>
 8028d84:	4623      	mov	r3, r4
 8028d86:	6864      	ldr	r4, [r4, #4]
 8028d88:	e7ae      	b.n	8028ce8 <_malloc_r+0x34>
 8028d8a:	463c      	mov	r4, r7
 8028d8c:	687f      	ldr	r7, [r7, #4]
 8028d8e:	e7b6      	b.n	8028cfe <_malloc_r+0x4a>
 8028d90:	461a      	mov	r2, r3
 8028d92:	685b      	ldr	r3, [r3, #4]
 8028d94:	42a3      	cmp	r3, r4
 8028d96:	d1fb      	bne.n	8028d90 <_malloc_r+0xdc>
 8028d98:	2300      	movs	r3, #0
 8028d9a:	6053      	str	r3, [r2, #4]
 8028d9c:	e7de      	b.n	8028d5c <_malloc_r+0xa8>
 8028d9e:	230c      	movs	r3, #12
 8028da0:	6033      	str	r3, [r6, #0]
 8028da2:	4630      	mov	r0, r6
 8028da4:	f000 f80c 	bl	8028dc0 <__malloc_unlock>
 8028da8:	e794      	b.n	8028cd4 <_malloc_r+0x20>
 8028daa:	6005      	str	r5, [r0, #0]
 8028dac:	e7d6      	b.n	8028d5c <_malloc_r+0xa8>
 8028dae:	bf00      	nop
 8028db0:	20028820 	.word	0x20028820

08028db4 <__malloc_lock>:
 8028db4:	4801      	ldr	r0, [pc, #4]	@ (8028dbc <__malloc_lock+0x8>)
 8028db6:	f000 baf8 	b.w	80293aa <__retarget_lock_acquire_recursive>
 8028dba:	bf00      	nop
 8028dbc:	20028964 	.word	0x20028964

08028dc0 <__malloc_unlock>:
 8028dc0:	4801      	ldr	r0, [pc, #4]	@ (8028dc8 <__malloc_unlock+0x8>)
 8028dc2:	f000 baf3 	b.w	80293ac <__retarget_lock_release_recursive>
 8028dc6:	bf00      	nop
 8028dc8:	20028964 	.word	0x20028964

08028dcc <__cxa_atexit>:
 8028dcc:	b510      	push	{r4, lr}
 8028dce:	4604      	mov	r4, r0
 8028dd0:	4804      	ldr	r0, [pc, #16]	@ (8028de4 <__cxa_atexit+0x18>)
 8028dd2:	4613      	mov	r3, r2
 8028dd4:	b120      	cbz	r0, 8028de0 <__cxa_atexit+0x14>
 8028dd6:	460a      	mov	r2, r1
 8028dd8:	2002      	movs	r0, #2
 8028dda:	4621      	mov	r1, r4
 8028ddc:	f000 faf6 	bl	80293cc <__register_exitproc>
 8028de0:	bd10      	pop	{r4, pc}
 8028de2:	bf00      	nop
 8028de4:	080293cd 	.word	0x080293cd

08028de8 <std>:
 8028de8:	2300      	movs	r3, #0
 8028dea:	b510      	push	{r4, lr}
 8028dec:	4604      	mov	r4, r0
 8028dee:	e9c0 3300 	strd	r3, r3, [r0]
 8028df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028df6:	6083      	str	r3, [r0, #8]
 8028df8:	8181      	strh	r1, [r0, #12]
 8028dfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8028dfc:	81c2      	strh	r2, [r0, #14]
 8028dfe:	6183      	str	r3, [r0, #24]
 8028e00:	4619      	mov	r1, r3
 8028e02:	2208      	movs	r2, #8
 8028e04:	305c      	adds	r0, #92	@ 0x5c
 8028e06:	f000 f99b 	bl	8029140 <memset>
 8028e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8028e40 <std+0x58>)
 8028e0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8028e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8028e44 <std+0x5c>)
 8028e10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8028e12:	4b0d      	ldr	r3, [pc, #52]	@ (8028e48 <std+0x60>)
 8028e14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8028e16:	4b0d      	ldr	r3, [pc, #52]	@ (8028e4c <std+0x64>)
 8028e18:	6323      	str	r3, [r4, #48]	@ 0x30
 8028e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8028e50 <std+0x68>)
 8028e1c:	6224      	str	r4, [r4, #32]
 8028e1e:	429c      	cmp	r4, r3
 8028e20:	d006      	beq.n	8028e30 <std+0x48>
 8028e22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8028e26:	4294      	cmp	r4, r2
 8028e28:	d002      	beq.n	8028e30 <std+0x48>
 8028e2a:	33d0      	adds	r3, #208	@ 0xd0
 8028e2c:	429c      	cmp	r4, r3
 8028e2e:	d105      	bne.n	8028e3c <std+0x54>
 8028e30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8028e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028e38:	f000 bab6 	b.w	80293a8 <__retarget_lock_init_recursive>
 8028e3c:	bd10      	pop	{r4, pc}
 8028e3e:	bf00      	nop
 8028e40:	08028f91 	.word	0x08028f91
 8028e44:	08028fb3 	.word	0x08028fb3
 8028e48:	08028feb 	.word	0x08028feb
 8028e4c:	0802900f 	.word	0x0802900f
 8028e50:	20028824 	.word	0x20028824

08028e54 <stdio_exit_handler>:
 8028e54:	4a02      	ldr	r2, [pc, #8]	@ (8028e60 <stdio_exit_handler+0xc>)
 8028e56:	4903      	ldr	r1, [pc, #12]	@ (8028e64 <stdio_exit_handler+0x10>)
 8028e58:	4803      	ldr	r0, [pc, #12]	@ (8028e68 <stdio_exit_handler+0x14>)
 8028e5a:	f000 b87b 	b.w	8028f54 <_fwalk_sglue>
 8028e5e:	bf00      	nop
 8028e60:	200000f0 	.word	0x200000f0
 8028e64:	08029bc1 	.word	0x08029bc1
 8028e68:	20000100 	.word	0x20000100

08028e6c <cleanup_stdio>:
 8028e6c:	6841      	ldr	r1, [r0, #4]
 8028e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8028ea0 <cleanup_stdio+0x34>)
 8028e70:	4299      	cmp	r1, r3
 8028e72:	b510      	push	{r4, lr}
 8028e74:	4604      	mov	r4, r0
 8028e76:	d001      	beq.n	8028e7c <cleanup_stdio+0x10>
 8028e78:	f000 fea2 	bl	8029bc0 <_fflush_r>
 8028e7c:	68a1      	ldr	r1, [r4, #8]
 8028e7e:	4b09      	ldr	r3, [pc, #36]	@ (8028ea4 <cleanup_stdio+0x38>)
 8028e80:	4299      	cmp	r1, r3
 8028e82:	d002      	beq.n	8028e8a <cleanup_stdio+0x1e>
 8028e84:	4620      	mov	r0, r4
 8028e86:	f000 fe9b 	bl	8029bc0 <_fflush_r>
 8028e8a:	68e1      	ldr	r1, [r4, #12]
 8028e8c:	4b06      	ldr	r3, [pc, #24]	@ (8028ea8 <cleanup_stdio+0x3c>)
 8028e8e:	4299      	cmp	r1, r3
 8028e90:	d004      	beq.n	8028e9c <cleanup_stdio+0x30>
 8028e92:	4620      	mov	r0, r4
 8028e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028e98:	f000 be92 	b.w	8029bc0 <_fflush_r>
 8028e9c:	bd10      	pop	{r4, pc}
 8028e9e:	bf00      	nop
 8028ea0:	20028824 	.word	0x20028824
 8028ea4:	2002888c 	.word	0x2002888c
 8028ea8:	200288f4 	.word	0x200288f4

08028eac <global_stdio_init.part.0>:
 8028eac:	b510      	push	{r4, lr}
 8028eae:	4b0b      	ldr	r3, [pc, #44]	@ (8028edc <global_stdio_init.part.0+0x30>)
 8028eb0:	4c0b      	ldr	r4, [pc, #44]	@ (8028ee0 <global_stdio_init.part.0+0x34>)
 8028eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8028ee4 <global_stdio_init.part.0+0x38>)
 8028eb4:	601a      	str	r2, [r3, #0]
 8028eb6:	4620      	mov	r0, r4
 8028eb8:	2200      	movs	r2, #0
 8028eba:	2104      	movs	r1, #4
 8028ebc:	f7ff ff94 	bl	8028de8 <std>
 8028ec0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8028ec4:	2201      	movs	r2, #1
 8028ec6:	2109      	movs	r1, #9
 8028ec8:	f7ff ff8e 	bl	8028de8 <std>
 8028ecc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8028ed0:	2202      	movs	r2, #2
 8028ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028ed6:	2112      	movs	r1, #18
 8028ed8:	f7ff bf86 	b.w	8028de8 <std>
 8028edc:	2002895c 	.word	0x2002895c
 8028ee0:	20028824 	.word	0x20028824
 8028ee4:	08028e55 	.word	0x08028e55

08028ee8 <__sfp_lock_acquire>:
 8028ee8:	4801      	ldr	r0, [pc, #4]	@ (8028ef0 <__sfp_lock_acquire+0x8>)
 8028eea:	f000 ba5e 	b.w	80293aa <__retarget_lock_acquire_recursive>
 8028eee:	bf00      	nop
 8028ef0:	20028966 	.word	0x20028966

08028ef4 <__sfp_lock_release>:
 8028ef4:	4801      	ldr	r0, [pc, #4]	@ (8028efc <__sfp_lock_release+0x8>)
 8028ef6:	f000 ba59 	b.w	80293ac <__retarget_lock_release_recursive>
 8028efa:	bf00      	nop
 8028efc:	20028966 	.word	0x20028966

08028f00 <__sinit>:
 8028f00:	b510      	push	{r4, lr}
 8028f02:	4604      	mov	r4, r0
 8028f04:	f7ff fff0 	bl	8028ee8 <__sfp_lock_acquire>
 8028f08:	6a23      	ldr	r3, [r4, #32]
 8028f0a:	b11b      	cbz	r3, 8028f14 <__sinit+0x14>
 8028f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028f10:	f7ff bff0 	b.w	8028ef4 <__sfp_lock_release>
 8028f14:	4b04      	ldr	r3, [pc, #16]	@ (8028f28 <__sinit+0x28>)
 8028f16:	6223      	str	r3, [r4, #32]
 8028f18:	4b04      	ldr	r3, [pc, #16]	@ (8028f2c <__sinit+0x2c>)
 8028f1a:	681b      	ldr	r3, [r3, #0]
 8028f1c:	2b00      	cmp	r3, #0
 8028f1e:	d1f5      	bne.n	8028f0c <__sinit+0xc>
 8028f20:	f7ff ffc4 	bl	8028eac <global_stdio_init.part.0>
 8028f24:	e7f2      	b.n	8028f0c <__sinit+0xc>
 8028f26:	bf00      	nop
 8028f28:	08028e6d 	.word	0x08028e6d
 8028f2c:	2002895c 	.word	0x2002895c

08028f30 <fiprintf>:
 8028f30:	b40e      	push	{r1, r2, r3}
 8028f32:	b503      	push	{r0, r1, lr}
 8028f34:	4601      	mov	r1, r0
 8028f36:	ab03      	add	r3, sp, #12
 8028f38:	4805      	ldr	r0, [pc, #20]	@ (8028f50 <fiprintf+0x20>)
 8028f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8028f3e:	6800      	ldr	r0, [r0, #0]
 8028f40:	9301      	str	r3, [sp, #4]
 8028f42:	f000 fb13 	bl	802956c <_vfiprintf_r>
 8028f46:	b002      	add	sp, #8
 8028f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8028f4c:	b003      	add	sp, #12
 8028f4e:	4770      	bx	lr
 8028f50:	200000fc 	.word	0x200000fc

08028f54 <_fwalk_sglue>:
 8028f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028f58:	4607      	mov	r7, r0
 8028f5a:	4688      	mov	r8, r1
 8028f5c:	4614      	mov	r4, r2
 8028f5e:	2600      	movs	r6, #0
 8028f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028f64:	f1b9 0901 	subs.w	r9, r9, #1
 8028f68:	d505      	bpl.n	8028f76 <_fwalk_sglue+0x22>
 8028f6a:	6824      	ldr	r4, [r4, #0]
 8028f6c:	2c00      	cmp	r4, #0
 8028f6e:	d1f7      	bne.n	8028f60 <_fwalk_sglue+0xc>
 8028f70:	4630      	mov	r0, r6
 8028f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028f76:	89ab      	ldrh	r3, [r5, #12]
 8028f78:	2b01      	cmp	r3, #1
 8028f7a:	d907      	bls.n	8028f8c <_fwalk_sglue+0x38>
 8028f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028f80:	3301      	adds	r3, #1
 8028f82:	d003      	beq.n	8028f8c <_fwalk_sglue+0x38>
 8028f84:	4629      	mov	r1, r5
 8028f86:	4638      	mov	r0, r7
 8028f88:	47c0      	blx	r8
 8028f8a:	4306      	orrs	r6, r0
 8028f8c:	3568      	adds	r5, #104	@ 0x68
 8028f8e:	e7e9      	b.n	8028f64 <_fwalk_sglue+0x10>

08028f90 <__sread>:
 8028f90:	b510      	push	{r4, lr}
 8028f92:	460c      	mov	r4, r1
 8028f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028f98:	f000 f994 	bl	80292c4 <_read_r>
 8028f9c:	2800      	cmp	r0, #0
 8028f9e:	bfab      	itete	ge
 8028fa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8028fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8028fa4:	181b      	addge	r3, r3, r0
 8028fa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8028faa:	bfac      	ite	ge
 8028fac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8028fae:	81a3      	strhlt	r3, [r4, #12]
 8028fb0:	bd10      	pop	{r4, pc}

08028fb2 <__swrite>:
 8028fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fb6:	461f      	mov	r7, r3
 8028fb8:	898b      	ldrh	r3, [r1, #12]
 8028fba:	05db      	lsls	r3, r3, #23
 8028fbc:	4605      	mov	r5, r0
 8028fbe:	460c      	mov	r4, r1
 8028fc0:	4616      	mov	r6, r2
 8028fc2:	d505      	bpl.n	8028fd0 <__swrite+0x1e>
 8028fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028fc8:	2302      	movs	r3, #2
 8028fca:	2200      	movs	r2, #0
 8028fcc:	f000 f968 	bl	80292a0 <_lseek_r>
 8028fd0:	89a3      	ldrh	r3, [r4, #12]
 8028fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028fd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8028fda:	81a3      	strh	r3, [r4, #12]
 8028fdc:	4632      	mov	r2, r6
 8028fde:	463b      	mov	r3, r7
 8028fe0:	4628      	mov	r0, r5
 8028fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028fe6:	f000 b9a3 	b.w	8029330 <_write_r>

08028fea <__sseek>:
 8028fea:	b510      	push	{r4, lr}
 8028fec:	460c      	mov	r4, r1
 8028fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ff2:	f000 f955 	bl	80292a0 <_lseek_r>
 8028ff6:	1c43      	adds	r3, r0, #1
 8028ff8:	89a3      	ldrh	r3, [r4, #12]
 8028ffa:	bf15      	itete	ne
 8028ffc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8028ffe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029006:	81a3      	strheq	r3, [r4, #12]
 8029008:	bf18      	it	ne
 802900a:	81a3      	strhne	r3, [r4, #12]
 802900c:	bd10      	pop	{r4, pc}

0802900e <__sclose>:
 802900e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029012:	f000 b8df 	b.w	80291d4 <_close_r>

08029016 <__swbuf_r>:
 8029016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029018:	460e      	mov	r6, r1
 802901a:	4614      	mov	r4, r2
 802901c:	4605      	mov	r5, r0
 802901e:	b118      	cbz	r0, 8029028 <__swbuf_r+0x12>
 8029020:	6a03      	ldr	r3, [r0, #32]
 8029022:	b90b      	cbnz	r3, 8029028 <__swbuf_r+0x12>
 8029024:	f7ff ff6c 	bl	8028f00 <__sinit>
 8029028:	69a3      	ldr	r3, [r4, #24]
 802902a:	60a3      	str	r3, [r4, #8]
 802902c:	89a3      	ldrh	r3, [r4, #12]
 802902e:	071a      	lsls	r2, r3, #28
 8029030:	d501      	bpl.n	8029036 <__swbuf_r+0x20>
 8029032:	6923      	ldr	r3, [r4, #16]
 8029034:	b943      	cbnz	r3, 8029048 <__swbuf_r+0x32>
 8029036:	4621      	mov	r1, r4
 8029038:	4628      	mov	r0, r5
 802903a:	f000 f82b 	bl	8029094 <__swsetup_r>
 802903e:	b118      	cbz	r0, 8029048 <__swbuf_r+0x32>
 8029040:	f04f 37ff 	mov.w	r7, #4294967295
 8029044:	4638      	mov	r0, r7
 8029046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029048:	6823      	ldr	r3, [r4, #0]
 802904a:	6922      	ldr	r2, [r4, #16]
 802904c:	1a98      	subs	r0, r3, r2
 802904e:	6963      	ldr	r3, [r4, #20]
 8029050:	b2f6      	uxtb	r6, r6
 8029052:	4283      	cmp	r3, r0
 8029054:	4637      	mov	r7, r6
 8029056:	dc05      	bgt.n	8029064 <__swbuf_r+0x4e>
 8029058:	4621      	mov	r1, r4
 802905a:	4628      	mov	r0, r5
 802905c:	f000 fdb0 	bl	8029bc0 <_fflush_r>
 8029060:	2800      	cmp	r0, #0
 8029062:	d1ed      	bne.n	8029040 <__swbuf_r+0x2a>
 8029064:	68a3      	ldr	r3, [r4, #8]
 8029066:	3b01      	subs	r3, #1
 8029068:	60a3      	str	r3, [r4, #8]
 802906a:	6823      	ldr	r3, [r4, #0]
 802906c:	1c5a      	adds	r2, r3, #1
 802906e:	6022      	str	r2, [r4, #0]
 8029070:	701e      	strb	r6, [r3, #0]
 8029072:	6962      	ldr	r2, [r4, #20]
 8029074:	1c43      	adds	r3, r0, #1
 8029076:	429a      	cmp	r2, r3
 8029078:	d004      	beq.n	8029084 <__swbuf_r+0x6e>
 802907a:	89a3      	ldrh	r3, [r4, #12]
 802907c:	07db      	lsls	r3, r3, #31
 802907e:	d5e1      	bpl.n	8029044 <__swbuf_r+0x2e>
 8029080:	2e0a      	cmp	r6, #10
 8029082:	d1df      	bne.n	8029044 <__swbuf_r+0x2e>
 8029084:	4621      	mov	r1, r4
 8029086:	4628      	mov	r0, r5
 8029088:	f000 fd9a 	bl	8029bc0 <_fflush_r>
 802908c:	2800      	cmp	r0, #0
 802908e:	d0d9      	beq.n	8029044 <__swbuf_r+0x2e>
 8029090:	e7d6      	b.n	8029040 <__swbuf_r+0x2a>
	...

08029094 <__swsetup_r>:
 8029094:	b538      	push	{r3, r4, r5, lr}
 8029096:	4b29      	ldr	r3, [pc, #164]	@ (802913c <__swsetup_r+0xa8>)
 8029098:	4605      	mov	r5, r0
 802909a:	6818      	ldr	r0, [r3, #0]
 802909c:	460c      	mov	r4, r1
 802909e:	b118      	cbz	r0, 80290a8 <__swsetup_r+0x14>
 80290a0:	6a03      	ldr	r3, [r0, #32]
 80290a2:	b90b      	cbnz	r3, 80290a8 <__swsetup_r+0x14>
 80290a4:	f7ff ff2c 	bl	8028f00 <__sinit>
 80290a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290ac:	0719      	lsls	r1, r3, #28
 80290ae:	d422      	bmi.n	80290f6 <__swsetup_r+0x62>
 80290b0:	06da      	lsls	r2, r3, #27
 80290b2:	d407      	bmi.n	80290c4 <__swsetup_r+0x30>
 80290b4:	2209      	movs	r2, #9
 80290b6:	602a      	str	r2, [r5, #0]
 80290b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80290bc:	81a3      	strh	r3, [r4, #12]
 80290be:	f04f 30ff 	mov.w	r0, #4294967295
 80290c2:	e033      	b.n	802912c <__swsetup_r+0x98>
 80290c4:	0758      	lsls	r0, r3, #29
 80290c6:	d512      	bpl.n	80290ee <__swsetup_r+0x5a>
 80290c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80290ca:	b141      	cbz	r1, 80290de <__swsetup_r+0x4a>
 80290cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80290d0:	4299      	cmp	r1, r3
 80290d2:	d002      	beq.n	80290da <__swsetup_r+0x46>
 80290d4:	4628      	mov	r0, r5
 80290d6:	f000 f9d5 	bl	8029484 <_free_r>
 80290da:	2300      	movs	r3, #0
 80290dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80290de:	89a3      	ldrh	r3, [r4, #12]
 80290e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80290e4:	81a3      	strh	r3, [r4, #12]
 80290e6:	2300      	movs	r3, #0
 80290e8:	6063      	str	r3, [r4, #4]
 80290ea:	6923      	ldr	r3, [r4, #16]
 80290ec:	6023      	str	r3, [r4, #0]
 80290ee:	89a3      	ldrh	r3, [r4, #12]
 80290f0:	f043 0308 	orr.w	r3, r3, #8
 80290f4:	81a3      	strh	r3, [r4, #12]
 80290f6:	6923      	ldr	r3, [r4, #16]
 80290f8:	b94b      	cbnz	r3, 802910e <__swsetup_r+0x7a>
 80290fa:	89a3      	ldrh	r3, [r4, #12]
 80290fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029104:	d003      	beq.n	802910e <__swsetup_r+0x7a>
 8029106:	4621      	mov	r1, r4
 8029108:	4628      	mov	r0, r5
 802910a:	f000 fda7 	bl	8029c5c <__smakebuf_r>
 802910e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029112:	f013 0201 	ands.w	r2, r3, #1
 8029116:	d00a      	beq.n	802912e <__swsetup_r+0x9a>
 8029118:	2200      	movs	r2, #0
 802911a:	60a2      	str	r2, [r4, #8]
 802911c:	6962      	ldr	r2, [r4, #20]
 802911e:	4252      	negs	r2, r2
 8029120:	61a2      	str	r2, [r4, #24]
 8029122:	6922      	ldr	r2, [r4, #16]
 8029124:	b942      	cbnz	r2, 8029138 <__swsetup_r+0xa4>
 8029126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802912a:	d1c5      	bne.n	80290b8 <__swsetup_r+0x24>
 802912c:	bd38      	pop	{r3, r4, r5, pc}
 802912e:	0799      	lsls	r1, r3, #30
 8029130:	bf58      	it	pl
 8029132:	6962      	ldrpl	r2, [r4, #20]
 8029134:	60a2      	str	r2, [r4, #8]
 8029136:	e7f4      	b.n	8029122 <__swsetup_r+0x8e>
 8029138:	2000      	movs	r0, #0
 802913a:	e7f7      	b.n	802912c <__swsetup_r+0x98>
 802913c:	200000fc 	.word	0x200000fc

08029140 <memset>:
 8029140:	4402      	add	r2, r0
 8029142:	4603      	mov	r3, r0
 8029144:	4293      	cmp	r3, r2
 8029146:	d100      	bne.n	802914a <memset+0xa>
 8029148:	4770      	bx	lr
 802914a:	f803 1b01 	strb.w	r1, [r3], #1
 802914e:	e7f9      	b.n	8029144 <memset+0x4>

08029150 <strncmp>:
 8029150:	b510      	push	{r4, lr}
 8029152:	b16a      	cbz	r2, 8029170 <strncmp+0x20>
 8029154:	3901      	subs	r1, #1
 8029156:	1884      	adds	r4, r0, r2
 8029158:	f810 2b01 	ldrb.w	r2, [r0], #1
 802915c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029160:	429a      	cmp	r2, r3
 8029162:	d103      	bne.n	802916c <strncmp+0x1c>
 8029164:	42a0      	cmp	r0, r4
 8029166:	d001      	beq.n	802916c <strncmp+0x1c>
 8029168:	2a00      	cmp	r2, #0
 802916a:	d1f5      	bne.n	8029158 <strncmp+0x8>
 802916c:	1ad0      	subs	r0, r2, r3
 802916e:	bd10      	pop	{r4, pc}
 8029170:	4610      	mov	r0, r2
 8029172:	e7fc      	b.n	802916e <strncmp+0x1e>

08029174 <_raise_r>:
 8029174:	291f      	cmp	r1, #31
 8029176:	b538      	push	{r3, r4, r5, lr}
 8029178:	4605      	mov	r5, r0
 802917a:	460c      	mov	r4, r1
 802917c:	d904      	bls.n	8029188 <_raise_r+0x14>
 802917e:	2316      	movs	r3, #22
 8029180:	6003      	str	r3, [r0, #0]
 8029182:	f04f 30ff 	mov.w	r0, #4294967295
 8029186:	bd38      	pop	{r3, r4, r5, pc}
 8029188:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802918a:	b112      	cbz	r2, 8029192 <_raise_r+0x1e>
 802918c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029190:	b94b      	cbnz	r3, 80291a6 <_raise_r+0x32>
 8029192:	4628      	mov	r0, r5
 8029194:	f000 f8ba 	bl	802930c <_getpid_r>
 8029198:	4622      	mov	r2, r4
 802919a:	4601      	mov	r1, r0
 802919c:	4628      	mov	r0, r5
 802919e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80291a2:	f000 b8a1 	b.w	80292e8 <_kill_r>
 80291a6:	2b01      	cmp	r3, #1
 80291a8:	d00a      	beq.n	80291c0 <_raise_r+0x4c>
 80291aa:	1c59      	adds	r1, r3, #1
 80291ac:	d103      	bne.n	80291b6 <_raise_r+0x42>
 80291ae:	2316      	movs	r3, #22
 80291b0:	6003      	str	r3, [r0, #0]
 80291b2:	2001      	movs	r0, #1
 80291b4:	e7e7      	b.n	8029186 <_raise_r+0x12>
 80291b6:	2100      	movs	r1, #0
 80291b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80291bc:	4620      	mov	r0, r4
 80291be:	4798      	blx	r3
 80291c0:	2000      	movs	r0, #0
 80291c2:	e7e0      	b.n	8029186 <_raise_r+0x12>

080291c4 <raise>:
 80291c4:	4b02      	ldr	r3, [pc, #8]	@ (80291d0 <raise+0xc>)
 80291c6:	4601      	mov	r1, r0
 80291c8:	6818      	ldr	r0, [r3, #0]
 80291ca:	f7ff bfd3 	b.w	8029174 <_raise_r>
 80291ce:	bf00      	nop
 80291d0:	200000fc 	.word	0x200000fc

080291d4 <_close_r>:
 80291d4:	b538      	push	{r3, r4, r5, lr}
 80291d6:	4d06      	ldr	r5, [pc, #24]	@ (80291f0 <_close_r+0x1c>)
 80291d8:	2300      	movs	r3, #0
 80291da:	4604      	mov	r4, r0
 80291dc:	4608      	mov	r0, r1
 80291de:	602b      	str	r3, [r5, #0]
 80291e0:	f7dc f89a 	bl	8005318 <_close>
 80291e4:	1c43      	adds	r3, r0, #1
 80291e6:	d102      	bne.n	80291ee <_close_r+0x1a>
 80291e8:	682b      	ldr	r3, [r5, #0]
 80291ea:	b103      	cbz	r3, 80291ee <_close_r+0x1a>
 80291ec:	6023      	str	r3, [r4, #0]
 80291ee:	bd38      	pop	{r3, r4, r5, pc}
 80291f0:	20028960 	.word	0x20028960

080291f4 <_reclaim_reent>:
 80291f4:	4b29      	ldr	r3, [pc, #164]	@ (802929c <_reclaim_reent+0xa8>)
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	4283      	cmp	r3, r0
 80291fa:	b570      	push	{r4, r5, r6, lr}
 80291fc:	4604      	mov	r4, r0
 80291fe:	d04b      	beq.n	8029298 <_reclaim_reent+0xa4>
 8029200:	69c3      	ldr	r3, [r0, #28]
 8029202:	b1ab      	cbz	r3, 8029230 <_reclaim_reent+0x3c>
 8029204:	68db      	ldr	r3, [r3, #12]
 8029206:	b16b      	cbz	r3, 8029224 <_reclaim_reent+0x30>
 8029208:	2500      	movs	r5, #0
 802920a:	69e3      	ldr	r3, [r4, #28]
 802920c:	68db      	ldr	r3, [r3, #12]
 802920e:	5959      	ldr	r1, [r3, r5]
 8029210:	2900      	cmp	r1, #0
 8029212:	d13b      	bne.n	802928c <_reclaim_reent+0x98>
 8029214:	3504      	adds	r5, #4
 8029216:	2d80      	cmp	r5, #128	@ 0x80
 8029218:	d1f7      	bne.n	802920a <_reclaim_reent+0x16>
 802921a:	69e3      	ldr	r3, [r4, #28]
 802921c:	4620      	mov	r0, r4
 802921e:	68d9      	ldr	r1, [r3, #12]
 8029220:	f000 f930 	bl	8029484 <_free_r>
 8029224:	69e3      	ldr	r3, [r4, #28]
 8029226:	6819      	ldr	r1, [r3, #0]
 8029228:	b111      	cbz	r1, 8029230 <_reclaim_reent+0x3c>
 802922a:	4620      	mov	r0, r4
 802922c:	f000 f92a 	bl	8029484 <_free_r>
 8029230:	6961      	ldr	r1, [r4, #20]
 8029232:	b111      	cbz	r1, 802923a <_reclaim_reent+0x46>
 8029234:	4620      	mov	r0, r4
 8029236:	f000 f925 	bl	8029484 <_free_r>
 802923a:	69e1      	ldr	r1, [r4, #28]
 802923c:	b111      	cbz	r1, 8029244 <_reclaim_reent+0x50>
 802923e:	4620      	mov	r0, r4
 8029240:	f000 f920 	bl	8029484 <_free_r>
 8029244:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8029246:	b111      	cbz	r1, 802924e <_reclaim_reent+0x5a>
 8029248:	4620      	mov	r0, r4
 802924a:	f000 f91b 	bl	8029484 <_free_r>
 802924e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029250:	b111      	cbz	r1, 8029258 <_reclaim_reent+0x64>
 8029252:	4620      	mov	r0, r4
 8029254:	f000 f916 	bl	8029484 <_free_r>
 8029258:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802925a:	b111      	cbz	r1, 8029262 <_reclaim_reent+0x6e>
 802925c:	4620      	mov	r0, r4
 802925e:	f000 f911 	bl	8029484 <_free_r>
 8029262:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8029264:	b111      	cbz	r1, 802926c <_reclaim_reent+0x78>
 8029266:	4620      	mov	r0, r4
 8029268:	f000 f90c 	bl	8029484 <_free_r>
 802926c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802926e:	b111      	cbz	r1, 8029276 <_reclaim_reent+0x82>
 8029270:	4620      	mov	r0, r4
 8029272:	f000 f907 	bl	8029484 <_free_r>
 8029276:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8029278:	b111      	cbz	r1, 8029280 <_reclaim_reent+0x8c>
 802927a:	4620      	mov	r0, r4
 802927c:	f000 f902 	bl	8029484 <_free_r>
 8029280:	6a23      	ldr	r3, [r4, #32]
 8029282:	b14b      	cbz	r3, 8029298 <_reclaim_reent+0xa4>
 8029284:	4620      	mov	r0, r4
 8029286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802928a:	4718      	bx	r3
 802928c:	680e      	ldr	r6, [r1, #0]
 802928e:	4620      	mov	r0, r4
 8029290:	f000 f8f8 	bl	8029484 <_free_r>
 8029294:	4631      	mov	r1, r6
 8029296:	e7bb      	b.n	8029210 <_reclaim_reent+0x1c>
 8029298:	bd70      	pop	{r4, r5, r6, pc}
 802929a:	bf00      	nop
 802929c:	200000fc 	.word	0x200000fc

080292a0 <_lseek_r>:
 80292a0:	b538      	push	{r3, r4, r5, lr}
 80292a2:	4d07      	ldr	r5, [pc, #28]	@ (80292c0 <_lseek_r+0x20>)
 80292a4:	4604      	mov	r4, r0
 80292a6:	4608      	mov	r0, r1
 80292a8:	4611      	mov	r1, r2
 80292aa:	2200      	movs	r2, #0
 80292ac:	602a      	str	r2, [r5, #0]
 80292ae:	461a      	mov	r2, r3
 80292b0:	f7dc f83c 	bl	800532c <_lseek>
 80292b4:	1c43      	adds	r3, r0, #1
 80292b6:	d102      	bne.n	80292be <_lseek_r+0x1e>
 80292b8:	682b      	ldr	r3, [r5, #0]
 80292ba:	b103      	cbz	r3, 80292be <_lseek_r+0x1e>
 80292bc:	6023      	str	r3, [r4, #0]
 80292be:	bd38      	pop	{r3, r4, r5, pc}
 80292c0:	20028960 	.word	0x20028960

080292c4 <_read_r>:
 80292c4:	b538      	push	{r3, r4, r5, lr}
 80292c6:	4d07      	ldr	r5, [pc, #28]	@ (80292e4 <_read_r+0x20>)
 80292c8:	4604      	mov	r4, r0
 80292ca:	4608      	mov	r0, r1
 80292cc:	4611      	mov	r1, r2
 80292ce:	2200      	movs	r2, #0
 80292d0:	602a      	str	r2, [r5, #0]
 80292d2:	461a      	mov	r2, r3
 80292d4:	f7dc f804 	bl	80052e0 <_read>
 80292d8:	1c43      	adds	r3, r0, #1
 80292da:	d102      	bne.n	80292e2 <_read_r+0x1e>
 80292dc:	682b      	ldr	r3, [r5, #0]
 80292de:	b103      	cbz	r3, 80292e2 <_read_r+0x1e>
 80292e0:	6023      	str	r3, [r4, #0]
 80292e2:	bd38      	pop	{r3, r4, r5, pc}
 80292e4:	20028960 	.word	0x20028960

080292e8 <_kill_r>:
 80292e8:	b538      	push	{r3, r4, r5, lr}
 80292ea:	4d07      	ldr	r5, [pc, #28]	@ (8029308 <_kill_r+0x20>)
 80292ec:	2300      	movs	r3, #0
 80292ee:	4604      	mov	r4, r0
 80292f0:	4608      	mov	r0, r1
 80292f2:	4611      	mov	r1, r2
 80292f4:	602b      	str	r3, [r5, #0]
 80292f6:	f7db ffe5 	bl	80052c4 <_kill>
 80292fa:	1c43      	adds	r3, r0, #1
 80292fc:	d102      	bne.n	8029304 <_kill_r+0x1c>
 80292fe:	682b      	ldr	r3, [r5, #0]
 8029300:	b103      	cbz	r3, 8029304 <_kill_r+0x1c>
 8029302:	6023      	str	r3, [r4, #0]
 8029304:	bd38      	pop	{r3, r4, r5, pc}
 8029306:	bf00      	nop
 8029308:	20028960 	.word	0x20028960

0802930c <_getpid_r>:
 802930c:	f7db bfd8 	b.w	80052c0 <_getpid>

08029310 <_sbrk_r>:
 8029310:	b538      	push	{r3, r4, r5, lr}
 8029312:	4d06      	ldr	r5, [pc, #24]	@ (802932c <_sbrk_r+0x1c>)
 8029314:	2300      	movs	r3, #0
 8029316:	4604      	mov	r4, r0
 8029318:	4608      	mov	r0, r1
 802931a:	602b      	str	r3, [r5, #0]
 802931c:	f000 fcfc 	bl	8029d18 <_sbrk>
 8029320:	1c43      	adds	r3, r0, #1
 8029322:	d102      	bne.n	802932a <_sbrk_r+0x1a>
 8029324:	682b      	ldr	r3, [r5, #0]
 8029326:	b103      	cbz	r3, 802932a <_sbrk_r+0x1a>
 8029328:	6023      	str	r3, [r4, #0]
 802932a:	bd38      	pop	{r3, r4, r5, pc}
 802932c:	20028960 	.word	0x20028960

08029330 <_write_r>:
 8029330:	b538      	push	{r3, r4, r5, lr}
 8029332:	4d07      	ldr	r5, [pc, #28]	@ (8029350 <_write_r+0x20>)
 8029334:	4604      	mov	r4, r0
 8029336:	4608      	mov	r0, r1
 8029338:	4611      	mov	r1, r2
 802933a:	2200      	movs	r2, #0
 802933c:	602a      	str	r2, [r5, #0]
 802933e:	461a      	mov	r2, r3
 8029340:	f7db ffdc 	bl	80052fc <_write>
 8029344:	1c43      	adds	r3, r0, #1
 8029346:	d102      	bne.n	802934e <_write_r+0x1e>
 8029348:	682b      	ldr	r3, [r5, #0]
 802934a:	b103      	cbz	r3, 802934e <_write_r+0x1e>
 802934c:	6023      	str	r3, [r4, #0]
 802934e:	bd38      	pop	{r3, r4, r5, pc}
 8029350:	20028960 	.word	0x20028960

08029354 <__errno>:
 8029354:	4b01      	ldr	r3, [pc, #4]	@ (802935c <__errno+0x8>)
 8029356:	6818      	ldr	r0, [r3, #0]
 8029358:	4770      	bx	lr
 802935a:	bf00      	nop
 802935c:	200000fc 	.word	0x200000fc

08029360 <__libc_init_array>:
 8029360:	b570      	push	{r4, r5, r6, lr}
 8029362:	4d0d      	ldr	r5, [pc, #52]	@ (8029398 <__libc_init_array+0x38>)
 8029364:	4c0d      	ldr	r4, [pc, #52]	@ (802939c <__libc_init_array+0x3c>)
 8029366:	1b64      	subs	r4, r4, r5
 8029368:	10a4      	asrs	r4, r4, #2
 802936a:	2600      	movs	r6, #0
 802936c:	42a6      	cmp	r6, r4
 802936e:	d109      	bne.n	8029384 <__libc_init_array+0x24>
 8029370:	4d0b      	ldr	r5, [pc, #44]	@ (80293a0 <__libc_init_array+0x40>)
 8029372:	4c0c      	ldr	r4, [pc, #48]	@ (80293a4 <__libc_init_array+0x44>)
 8029374:	f000 fcde 	bl	8029d34 <_init>
 8029378:	1b64      	subs	r4, r4, r5
 802937a:	10a4      	asrs	r4, r4, #2
 802937c:	2600      	movs	r6, #0
 802937e:	42a6      	cmp	r6, r4
 8029380:	d105      	bne.n	802938e <__libc_init_array+0x2e>
 8029382:	bd70      	pop	{r4, r5, r6, pc}
 8029384:	f855 3b04 	ldr.w	r3, [r5], #4
 8029388:	4798      	blx	r3
 802938a:	3601      	adds	r6, #1
 802938c:	e7ee      	b.n	802936c <__libc_init_array+0xc>
 802938e:	f855 3b04 	ldr.w	r3, [r5], #4
 8029392:	4798      	blx	r3
 8029394:	3601      	adds	r6, #1
 8029396:	e7f2      	b.n	802937e <__libc_init_array+0x1e>
 8029398:	0802e6b4 	.word	0x0802e6b4
 802939c:	0802e6b4 	.word	0x0802e6b4
 80293a0:	0802e6b4 	.word	0x0802e6b4
 80293a4:	0802e6d0 	.word	0x0802e6d0

080293a8 <__retarget_lock_init_recursive>:
 80293a8:	4770      	bx	lr

080293aa <__retarget_lock_acquire_recursive>:
 80293aa:	4770      	bx	lr

080293ac <__retarget_lock_release_recursive>:
 80293ac:	4770      	bx	lr

080293ae <memcpy>:
 80293ae:	440a      	add	r2, r1
 80293b0:	4291      	cmp	r1, r2
 80293b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80293b6:	d100      	bne.n	80293ba <memcpy+0xc>
 80293b8:	4770      	bx	lr
 80293ba:	b510      	push	{r4, lr}
 80293bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80293c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80293c4:	4291      	cmp	r1, r2
 80293c6:	d1f9      	bne.n	80293bc <memcpy+0xe>
 80293c8:	bd10      	pop	{r4, pc}
	...

080293cc <__register_exitproc>:
 80293cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80293d0:	4d27      	ldr	r5, [pc, #156]	@ (8029470 <__register_exitproc+0xa4>)
 80293d2:	4607      	mov	r7, r0
 80293d4:	6828      	ldr	r0, [r5, #0]
 80293d6:	4691      	mov	r9, r2
 80293d8:	460e      	mov	r6, r1
 80293da:	4698      	mov	r8, r3
 80293dc:	f7ff ffe5 	bl	80293aa <__retarget_lock_acquire_recursive>
 80293e0:	4a24      	ldr	r2, [pc, #144]	@ (8029474 <__register_exitproc+0xa8>)
 80293e2:	6814      	ldr	r4, [r2, #0]
 80293e4:	b93c      	cbnz	r4, 80293f6 <__register_exitproc+0x2a>
 80293e6:	4b24      	ldr	r3, [pc, #144]	@ (8029478 <__register_exitproc+0xac>)
 80293e8:	6013      	str	r3, [r2, #0]
 80293ea:	4a24      	ldr	r2, [pc, #144]	@ (802947c <__register_exitproc+0xb0>)
 80293ec:	b112      	cbz	r2, 80293f4 <__register_exitproc+0x28>
 80293ee:	6812      	ldr	r2, [r2, #0]
 80293f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80293f4:	4c20      	ldr	r4, [pc, #128]	@ (8029478 <__register_exitproc+0xac>)
 80293f6:	6863      	ldr	r3, [r4, #4]
 80293f8:	2b1f      	cmp	r3, #31
 80293fa:	dd06      	ble.n	802940a <__register_exitproc+0x3e>
 80293fc:	6828      	ldr	r0, [r5, #0]
 80293fe:	f7ff ffd5 	bl	80293ac <__retarget_lock_release_recursive>
 8029402:	f04f 30ff 	mov.w	r0, #4294967295
 8029406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802940a:	b32f      	cbz	r7, 8029458 <__register_exitproc+0x8c>
 802940c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8029410:	b968      	cbnz	r0, 802942e <__register_exitproc+0x62>
 8029412:	4b1b      	ldr	r3, [pc, #108]	@ (8029480 <__register_exitproc+0xb4>)
 8029414:	2b00      	cmp	r3, #0
 8029416:	d0f1      	beq.n	80293fc <__register_exitproc+0x30>
 8029418:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802941c:	f7ff fc18 	bl	8028c50 <malloc>
 8029420:	2800      	cmp	r0, #0
 8029422:	d0eb      	beq.n	80293fc <__register_exitproc+0x30>
 8029424:	2300      	movs	r3, #0
 8029426:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802942a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802942e:	6863      	ldr	r3, [r4, #4]
 8029430:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029434:	2201      	movs	r2, #1
 8029436:	409a      	lsls	r2, r3
 8029438:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802943c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8029440:	4313      	orrs	r3, r2
 8029442:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8029446:	2f02      	cmp	r7, #2
 8029448:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802944c:	bf02      	ittt	eq
 802944e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8029452:	4313      	orreq	r3, r2
 8029454:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8029458:	6863      	ldr	r3, [r4, #4]
 802945a:	6828      	ldr	r0, [r5, #0]
 802945c:	1c5a      	adds	r2, r3, #1
 802945e:	3302      	adds	r3, #2
 8029460:	6062      	str	r2, [r4, #4]
 8029462:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8029466:	f7ff ffa1 	bl	80293ac <__retarget_lock_release_recursive>
 802946a:	2000      	movs	r0, #0
 802946c:	e7cb      	b.n	8029406 <__register_exitproc+0x3a>
 802946e:	bf00      	nop
 8029470:	2000014c 	.word	0x2000014c
 8029474:	200289f4 	.word	0x200289f4
 8029478:	20028968 	.word	0x20028968
 802947c:	0802e5a0 	.word	0x0802e5a0
 8029480:	08028c51 	.word	0x08028c51

08029484 <_free_r>:
 8029484:	b538      	push	{r3, r4, r5, lr}
 8029486:	4605      	mov	r5, r0
 8029488:	2900      	cmp	r1, #0
 802948a:	d041      	beq.n	8029510 <_free_r+0x8c>
 802948c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029490:	1f0c      	subs	r4, r1, #4
 8029492:	2b00      	cmp	r3, #0
 8029494:	bfb8      	it	lt
 8029496:	18e4      	addlt	r4, r4, r3
 8029498:	f7ff fc8c 	bl	8028db4 <__malloc_lock>
 802949c:	4a1d      	ldr	r2, [pc, #116]	@ (8029514 <_free_r+0x90>)
 802949e:	6813      	ldr	r3, [r2, #0]
 80294a0:	b933      	cbnz	r3, 80294b0 <_free_r+0x2c>
 80294a2:	6063      	str	r3, [r4, #4]
 80294a4:	6014      	str	r4, [r2, #0]
 80294a6:	4628      	mov	r0, r5
 80294a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80294ac:	f7ff bc88 	b.w	8028dc0 <__malloc_unlock>
 80294b0:	42a3      	cmp	r3, r4
 80294b2:	d908      	bls.n	80294c6 <_free_r+0x42>
 80294b4:	6820      	ldr	r0, [r4, #0]
 80294b6:	1821      	adds	r1, r4, r0
 80294b8:	428b      	cmp	r3, r1
 80294ba:	bf01      	itttt	eq
 80294bc:	6819      	ldreq	r1, [r3, #0]
 80294be:	685b      	ldreq	r3, [r3, #4]
 80294c0:	1809      	addeq	r1, r1, r0
 80294c2:	6021      	streq	r1, [r4, #0]
 80294c4:	e7ed      	b.n	80294a2 <_free_r+0x1e>
 80294c6:	461a      	mov	r2, r3
 80294c8:	685b      	ldr	r3, [r3, #4]
 80294ca:	b10b      	cbz	r3, 80294d0 <_free_r+0x4c>
 80294cc:	42a3      	cmp	r3, r4
 80294ce:	d9fa      	bls.n	80294c6 <_free_r+0x42>
 80294d0:	6811      	ldr	r1, [r2, #0]
 80294d2:	1850      	adds	r0, r2, r1
 80294d4:	42a0      	cmp	r0, r4
 80294d6:	d10b      	bne.n	80294f0 <_free_r+0x6c>
 80294d8:	6820      	ldr	r0, [r4, #0]
 80294da:	4401      	add	r1, r0
 80294dc:	1850      	adds	r0, r2, r1
 80294de:	4283      	cmp	r3, r0
 80294e0:	6011      	str	r1, [r2, #0]
 80294e2:	d1e0      	bne.n	80294a6 <_free_r+0x22>
 80294e4:	6818      	ldr	r0, [r3, #0]
 80294e6:	685b      	ldr	r3, [r3, #4]
 80294e8:	6053      	str	r3, [r2, #4]
 80294ea:	4408      	add	r0, r1
 80294ec:	6010      	str	r0, [r2, #0]
 80294ee:	e7da      	b.n	80294a6 <_free_r+0x22>
 80294f0:	d902      	bls.n	80294f8 <_free_r+0x74>
 80294f2:	230c      	movs	r3, #12
 80294f4:	602b      	str	r3, [r5, #0]
 80294f6:	e7d6      	b.n	80294a6 <_free_r+0x22>
 80294f8:	6820      	ldr	r0, [r4, #0]
 80294fa:	1821      	adds	r1, r4, r0
 80294fc:	428b      	cmp	r3, r1
 80294fe:	bf04      	itt	eq
 8029500:	6819      	ldreq	r1, [r3, #0]
 8029502:	685b      	ldreq	r3, [r3, #4]
 8029504:	6063      	str	r3, [r4, #4]
 8029506:	bf04      	itt	eq
 8029508:	1809      	addeq	r1, r1, r0
 802950a:	6021      	streq	r1, [r4, #0]
 802950c:	6054      	str	r4, [r2, #4]
 802950e:	e7ca      	b.n	80294a6 <_free_r+0x22>
 8029510:	bd38      	pop	{r3, r4, r5, pc}
 8029512:	bf00      	nop
 8029514:	20028820 	.word	0x20028820

08029518 <__sfputc_r>:
 8029518:	6893      	ldr	r3, [r2, #8]
 802951a:	3b01      	subs	r3, #1
 802951c:	2b00      	cmp	r3, #0
 802951e:	b410      	push	{r4}
 8029520:	6093      	str	r3, [r2, #8]
 8029522:	da08      	bge.n	8029536 <__sfputc_r+0x1e>
 8029524:	6994      	ldr	r4, [r2, #24]
 8029526:	42a3      	cmp	r3, r4
 8029528:	db01      	blt.n	802952e <__sfputc_r+0x16>
 802952a:	290a      	cmp	r1, #10
 802952c:	d103      	bne.n	8029536 <__sfputc_r+0x1e>
 802952e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029532:	f7ff bd70 	b.w	8029016 <__swbuf_r>
 8029536:	6813      	ldr	r3, [r2, #0]
 8029538:	1c58      	adds	r0, r3, #1
 802953a:	6010      	str	r0, [r2, #0]
 802953c:	7019      	strb	r1, [r3, #0]
 802953e:	4608      	mov	r0, r1
 8029540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029544:	4770      	bx	lr

08029546 <__sfputs_r>:
 8029546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029548:	4606      	mov	r6, r0
 802954a:	460f      	mov	r7, r1
 802954c:	4614      	mov	r4, r2
 802954e:	18d5      	adds	r5, r2, r3
 8029550:	42ac      	cmp	r4, r5
 8029552:	d101      	bne.n	8029558 <__sfputs_r+0x12>
 8029554:	2000      	movs	r0, #0
 8029556:	e007      	b.n	8029568 <__sfputs_r+0x22>
 8029558:	f814 1b01 	ldrb.w	r1, [r4], #1
 802955c:	463a      	mov	r2, r7
 802955e:	4630      	mov	r0, r6
 8029560:	f7ff ffda 	bl	8029518 <__sfputc_r>
 8029564:	1c43      	adds	r3, r0, #1
 8029566:	d1f3      	bne.n	8029550 <__sfputs_r+0xa>
 8029568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802956c <_vfiprintf_r>:
 802956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029570:	460d      	mov	r5, r1
 8029572:	b09d      	sub	sp, #116	@ 0x74
 8029574:	4614      	mov	r4, r2
 8029576:	4698      	mov	r8, r3
 8029578:	4606      	mov	r6, r0
 802957a:	b118      	cbz	r0, 8029584 <_vfiprintf_r+0x18>
 802957c:	6a03      	ldr	r3, [r0, #32]
 802957e:	b90b      	cbnz	r3, 8029584 <_vfiprintf_r+0x18>
 8029580:	f7ff fcbe 	bl	8028f00 <__sinit>
 8029584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029586:	07d9      	lsls	r1, r3, #31
 8029588:	d405      	bmi.n	8029596 <_vfiprintf_r+0x2a>
 802958a:	89ab      	ldrh	r3, [r5, #12]
 802958c:	059a      	lsls	r2, r3, #22
 802958e:	d402      	bmi.n	8029596 <_vfiprintf_r+0x2a>
 8029590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029592:	f7ff ff0a 	bl	80293aa <__retarget_lock_acquire_recursive>
 8029596:	89ab      	ldrh	r3, [r5, #12]
 8029598:	071b      	lsls	r3, r3, #28
 802959a:	d501      	bpl.n	80295a0 <_vfiprintf_r+0x34>
 802959c:	692b      	ldr	r3, [r5, #16]
 802959e:	b99b      	cbnz	r3, 80295c8 <_vfiprintf_r+0x5c>
 80295a0:	4629      	mov	r1, r5
 80295a2:	4630      	mov	r0, r6
 80295a4:	f7ff fd76 	bl	8029094 <__swsetup_r>
 80295a8:	b170      	cbz	r0, 80295c8 <_vfiprintf_r+0x5c>
 80295aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80295ac:	07dc      	lsls	r4, r3, #31
 80295ae:	d504      	bpl.n	80295ba <_vfiprintf_r+0x4e>
 80295b0:	f04f 30ff 	mov.w	r0, #4294967295
 80295b4:	b01d      	add	sp, #116	@ 0x74
 80295b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295ba:	89ab      	ldrh	r3, [r5, #12]
 80295bc:	0598      	lsls	r0, r3, #22
 80295be:	d4f7      	bmi.n	80295b0 <_vfiprintf_r+0x44>
 80295c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80295c2:	f7ff fef3 	bl	80293ac <__retarget_lock_release_recursive>
 80295c6:	e7f3      	b.n	80295b0 <_vfiprintf_r+0x44>
 80295c8:	2300      	movs	r3, #0
 80295ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80295cc:	2320      	movs	r3, #32
 80295ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80295d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80295d6:	2330      	movs	r3, #48	@ 0x30
 80295d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029788 <_vfiprintf_r+0x21c>
 80295dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80295e0:	f04f 0901 	mov.w	r9, #1
 80295e4:	4623      	mov	r3, r4
 80295e6:	469a      	mov	sl, r3
 80295e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80295ec:	b10a      	cbz	r2, 80295f2 <_vfiprintf_r+0x86>
 80295ee:	2a25      	cmp	r2, #37	@ 0x25
 80295f0:	d1f9      	bne.n	80295e6 <_vfiprintf_r+0x7a>
 80295f2:	ebba 0b04 	subs.w	fp, sl, r4
 80295f6:	d00b      	beq.n	8029610 <_vfiprintf_r+0xa4>
 80295f8:	465b      	mov	r3, fp
 80295fa:	4622      	mov	r2, r4
 80295fc:	4629      	mov	r1, r5
 80295fe:	4630      	mov	r0, r6
 8029600:	f7ff ffa1 	bl	8029546 <__sfputs_r>
 8029604:	3001      	adds	r0, #1
 8029606:	f000 80a7 	beq.w	8029758 <_vfiprintf_r+0x1ec>
 802960a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802960c:	445a      	add	r2, fp
 802960e:	9209      	str	r2, [sp, #36]	@ 0x24
 8029610:	f89a 3000 	ldrb.w	r3, [sl]
 8029614:	2b00      	cmp	r3, #0
 8029616:	f000 809f 	beq.w	8029758 <_vfiprintf_r+0x1ec>
 802961a:	2300      	movs	r3, #0
 802961c:	f04f 32ff 	mov.w	r2, #4294967295
 8029620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029624:	f10a 0a01 	add.w	sl, sl, #1
 8029628:	9304      	str	r3, [sp, #16]
 802962a:	9307      	str	r3, [sp, #28]
 802962c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029630:	931a      	str	r3, [sp, #104]	@ 0x68
 8029632:	4654      	mov	r4, sl
 8029634:	2205      	movs	r2, #5
 8029636:	f814 1b01 	ldrb.w	r1, [r4], #1
 802963a:	4853      	ldr	r0, [pc, #332]	@ (8029788 <_vfiprintf_r+0x21c>)
 802963c:	f7d6 fe00 	bl	8000240 <memchr>
 8029640:	9a04      	ldr	r2, [sp, #16]
 8029642:	b9d8      	cbnz	r0, 802967c <_vfiprintf_r+0x110>
 8029644:	06d1      	lsls	r1, r2, #27
 8029646:	bf44      	itt	mi
 8029648:	2320      	movmi	r3, #32
 802964a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802964e:	0713      	lsls	r3, r2, #28
 8029650:	bf44      	itt	mi
 8029652:	232b      	movmi	r3, #43	@ 0x2b
 8029654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029658:	f89a 3000 	ldrb.w	r3, [sl]
 802965c:	2b2a      	cmp	r3, #42	@ 0x2a
 802965e:	d015      	beq.n	802968c <_vfiprintf_r+0x120>
 8029660:	9a07      	ldr	r2, [sp, #28]
 8029662:	4654      	mov	r4, sl
 8029664:	2000      	movs	r0, #0
 8029666:	f04f 0c0a 	mov.w	ip, #10
 802966a:	4621      	mov	r1, r4
 802966c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029670:	3b30      	subs	r3, #48	@ 0x30
 8029672:	2b09      	cmp	r3, #9
 8029674:	d94b      	bls.n	802970e <_vfiprintf_r+0x1a2>
 8029676:	b1b0      	cbz	r0, 80296a6 <_vfiprintf_r+0x13a>
 8029678:	9207      	str	r2, [sp, #28]
 802967a:	e014      	b.n	80296a6 <_vfiprintf_r+0x13a>
 802967c:	eba0 0308 	sub.w	r3, r0, r8
 8029680:	fa09 f303 	lsl.w	r3, r9, r3
 8029684:	4313      	orrs	r3, r2
 8029686:	9304      	str	r3, [sp, #16]
 8029688:	46a2      	mov	sl, r4
 802968a:	e7d2      	b.n	8029632 <_vfiprintf_r+0xc6>
 802968c:	9b03      	ldr	r3, [sp, #12]
 802968e:	1d19      	adds	r1, r3, #4
 8029690:	681b      	ldr	r3, [r3, #0]
 8029692:	9103      	str	r1, [sp, #12]
 8029694:	2b00      	cmp	r3, #0
 8029696:	bfbb      	ittet	lt
 8029698:	425b      	neglt	r3, r3
 802969a:	f042 0202 	orrlt.w	r2, r2, #2
 802969e:	9307      	strge	r3, [sp, #28]
 80296a0:	9307      	strlt	r3, [sp, #28]
 80296a2:	bfb8      	it	lt
 80296a4:	9204      	strlt	r2, [sp, #16]
 80296a6:	7823      	ldrb	r3, [r4, #0]
 80296a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80296aa:	d10a      	bne.n	80296c2 <_vfiprintf_r+0x156>
 80296ac:	7863      	ldrb	r3, [r4, #1]
 80296ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80296b0:	d132      	bne.n	8029718 <_vfiprintf_r+0x1ac>
 80296b2:	9b03      	ldr	r3, [sp, #12]
 80296b4:	1d1a      	adds	r2, r3, #4
 80296b6:	681b      	ldr	r3, [r3, #0]
 80296b8:	9203      	str	r2, [sp, #12]
 80296ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80296be:	3402      	adds	r4, #2
 80296c0:	9305      	str	r3, [sp, #20]
 80296c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029798 <_vfiprintf_r+0x22c>
 80296c6:	7821      	ldrb	r1, [r4, #0]
 80296c8:	2203      	movs	r2, #3
 80296ca:	4650      	mov	r0, sl
 80296cc:	f7d6 fdb8 	bl	8000240 <memchr>
 80296d0:	b138      	cbz	r0, 80296e2 <_vfiprintf_r+0x176>
 80296d2:	9b04      	ldr	r3, [sp, #16]
 80296d4:	eba0 000a 	sub.w	r0, r0, sl
 80296d8:	2240      	movs	r2, #64	@ 0x40
 80296da:	4082      	lsls	r2, r0
 80296dc:	4313      	orrs	r3, r2
 80296de:	3401      	adds	r4, #1
 80296e0:	9304      	str	r3, [sp, #16]
 80296e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80296e6:	4829      	ldr	r0, [pc, #164]	@ (802978c <_vfiprintf_r+0x220>)
 80296e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80296ec:	2206      	movs	r2, #6
 80296ee:	f7d6 fda7 	bl	8000240 <memchr>
 80296f2:	2800      	cmp	r0, #0
 80296f4:	d03f      	beq.n	8029776 <_vfiprintf_r+0x20a>
 80296f6:	4b26      	ldr	r3, [pc, #152]	@ (8029790 <_vfiprintf_r+0x224>)
 80296f8:	bb1b      	cbnz	r3, 8029742 <_vfiprintf_r+0x1d6>
 80296fa:	9b03      	ldr	r3, [sp, #12]
 80296fc:	3307      	adds	r3, #7
 80296fe:	f023 0307 	bic.w	r3, r3, #7
 8029702:	3308      	adds	r3, #8
 8029704:	9303      	str	r3, [sp, #12]
 8029706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029708:	443b      	add	r3, r7
 802970a:	9309      	str	r3, [sp, #36]	@ 0x24
 802970c:	e76a      	b.n	80295e4 <_vfiprintf_r+0x78>
 802970e:	fb0c 3202 	mla	r2, ip, r2, r3
 8029712:	460c      	mov	r4, r1
 8029714:	2001      	movs	r0, #1
 8029716:	e7a8      	b.n	802966a <_vfiprintf_r+0xfe>
 8029718:	2300      	movs	r3, #0
 802971a:	3401      	adds	r4, #1
 802971c:	9305      	str	r3, [sp, #20]
 802971e:	4619      	mov	r1, r3
 8029720:	f04f 0c0a 	mov.w	ip, #10
 8029724:	4620      	mov	r0, r4
 8029726:	f810 2b01 	ldrb.w	r2, [r0], #1
 802972a:	3a30      	subs	r2, #48	@ 0x30
 802972c:	2a09      	cmp	r2, #9
 802972e:	d903      	bls.n	8029738 <_vfiprintf_r+0x1cc>
 8029730:	2b00      	cmp	r3, #0
 8029732:	d0c6      	beq.n	80296c2 <_vfiprintf_r+0x156>
 8029734:	9105      	str	r1, [sp, #20]
 8029736:	e7c4      	b.n	80296c2 <_vfiprintf_r+0x156>
 8029738:	fb0c 2101 	mla	r1, ip, r1, r2
 802973c:	4604      	mov	r4, r0
 802973e:	2301      	movs	r3, #1
 8029740:	e7f0      	b.n	8029724 <_vfiprintf_r+0x1b8>
 8029742:	ab03      	add	r3, sp, #12
 8029744:	9300      	str	r3, [sp, #0]
 8029746:	462a      	mov	r2, r5
 8029748:	4b12      	ldr	r3, [pc, #72]	@ (8029794 <_vfiprintf_r+0x228>)
 802974a:	a904      	add	r1, sp, #16
 802974c:	4630      	mov	r0, r6
 802974e:	f3af 8000 	nop.w
 8029752:	4607      	mov	r7, r0
 8029754:	1c78      	adds	r0, r7, #1
 8029756:	d1d6      	bne.n	8029706 <_vfiprintf_r+0x19a>
 8029758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802975a:	07d9      	lsls	r1, r3, #31
 802975c:	d405      	bmi.n	802976a <_vfiprintf_r+0x1fe>
 802975e:	89ab      	ldrh	r3, [r5, #12]
 8029760:	059a      	lsls	r2, r3, #22
 8029762:	d402      	bmi.n	802976a <_vfiprintf_r+0x1fe>
 8029764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029766:	f7ff fe21 	bl	80293ac <__retarget_lock_release_recursive>
 802976a:	89ab      	ldrh	r3, [r5, #12]
 802976c:	065b      	lsls	r3, r3, #25
 802976e:	f53f af1f 	bmi.w	80295b0 <_vfiprintf_r+0x44>
 8029772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029774:	e71e      	b.n	80295b4 <_vfiprintf_r+0x48>
 8029776:	ab03      	add	r3, sp, #12
 8029778:	9300      	str	r3, [sp, #0]
 802977a:	462a      	mov	r2, r5
 802977c:	4b05      	ldr	r3, [pc, #20]	@ (8029794 <_vfiprintf_r+0x228>)
 802977e:	a904      	add	r1, sp, #16
 8029780:	4630      	mov	r0, r6
 8029782:	f000 f879 	bl	8029878 <_printf_i>
 8029786:	e7e4      	b.n	8029752 <_vfiprintf_r+0x1e6>
 8029788:	0802e5a4 	.word	0x0802e5a4
 802978c:	0802e5ae 	.word	0x0802e5ae
 8029790:	00000000 	.word	0x00000000
 8029794:	08029547 	.word	0x08029547
 8029798:	0802e5aa 	.word	0x0802e5aa

0802979c <_printf_common>:
 802979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80297a0:	4616      	mov	r6, r2
 80297a2:	4698      	mov	r8, r3
 80297a4:	688a      	ldr	r2, [r1, #8]
 80297a6:	690b      	ldr	r3, [r1, #16]
 80297a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80297ac:	4293      	cmp	r3, r2
 80297ae:	bfb8      	it	lt
 80297b0:	4613      	movlt	r3, r2
 80297b2:	6033      	str	r3, [r6, #0]
 80297b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80297b8:	4607      	mov	r7, r0
 80297ba:	460c      	mov	r4, r1
 80297bc:	b10a      	cbz	r2, 80297c2 <_printf_common+0x26>
 80297be:	3301      	adds	r3, #1
 80297c0:	6033      	str	r3, [r6, #0]
 80297c2:	6823      	ldr	r3, [r4, #0]
 80297c4:	0699      	lsls	r1, r3, #26
 80297c6:	bf42      	ittt	mi
 80297c8:	6833      	ldrmi	r3, [r6, #0]
 80297ca:	3302      	addmi	r3, #2
 80297cc:	6033      	strmi	r3, [r6, #0]
 80297ce:	6825      	ldr	r5, [r4, #0]
 80297d0:	f015 0506 	ands.w	r5, r5, #6
 80297d4:	d106      	bne.n	80297e4 <_printf_common+0x48>
 80297d6:	f104 0a19 	add.w	sl, r4, #25
 80297da:	68e3      	ldr	r3, [r4, #12]
 80297dc:	6832      	ldr	r2, [r6, #0]
 80297de:	1a9b      	subs	r3, r3, r2
 80297e0:	42ab      	cmp	r3, r5
 80297e2:	dc26      	bgt.n	8029832 <_printf_common+0x96>
 80297e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80297e8:	6822      	ldr	r2, [r4, #0]
 80297ea:	3b00      	subs	r3, #0
 80297ec:	bf18      	it	ne
 80297ee:	2301      	movne	r3, #1
 80297f0:	0692      	lsls	r2, r2, #26
 80297f2:	d42b      	bmi.n	802984c <_printf_common+0xb0>
 80297f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80297f8:	4641      	mov	r1, r8
 80297fa:	4638      	mov	r0, r7
 80297fc:	47c8      	blx	r9
 80297fe:	3001      	adds	r0, #1
 8029800:	d01e      	beq.n	8029840 <_printf_common+0xa4>
 8029802:	6823      	ldr	r3, [r4, #0]
 8029804:	6922      	ldr	r2, [r4, #16]
 8029806:	f003 0306 	and.w	r3, r3, #6
 802980a:	2b04      	cmp	r3, #4
 802980c:	bf02      	ittt	eq
 802980e:	68e5      	ldreq	r5, [r4, #12]
 8029810:	6833      	ldreq	r3, [r6, #0]
 8029812:	1aed      	subeq	r5, r5, r3
 8029814:	68a3      	ldr	r3, [r4, #8]
 8029816:	bf0c      	ite	eq
 8029818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802981c:	2500      	movne	r5, #0
 802981e:	4293      	cmp	r3, r2
 8029820:	bfc4      	itt	gt
 8029822:	1a9b      	subgt	r3, r3, r2
 8029824:	18ed      	addgt	r5, r5, r3
 8029826:	2600      	movs	r6, #0
 8029828:	341a      	adds	r4, #26
 802982a:	42b5      	cmp	r5, r6
 802982c:	d11a      	bne.n	8029864 <_printf_common+0xc8>
 802982e:	2000      	movs	r0, #0
 8029830:	e008      	b.n	8029844 <_printf_common+0xa8>
 8029832:	2301      	movs	r3, #1
 8029834:	4652      	mov	r2, sl
 8029836:	4641      	mov	r1, r8
 8029838:	4638      	mov	r0, r7
 802983a:	47c8      	blx	r9
 802983c:	3001      	adds	r0, #1
 802983e:	d103      	bne.n	8029848 <_printf_common+0xac>
 8029840:	f04f 30ff 	mov.w	r0, #4294967295
 8029844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029848:	3501      	adds	r5, #1
 802984a:	e7c6      	b.n	80297da <_printf_common+0x3e>
 802984c:	18e1      	adds	r1, r4, r3
 802984e:	1c5a      	adds	r2, r3, #1
 8029850:	2030      	movs	r0, #48	@ 0x30
 8029852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029856:	4422      	add	r2, r4
 8029858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802985c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029860:	3302      	adds	r3, #2
 8029862:	e7c7      	b.n	80297f4 <_printf_common+0x58>
 8029864:	2301      	movs	r3, #1
 8029866:	4622      	mov	r2, r4
 8029868:	4641      	mov	r1, r8
 802986a:	4638      	mov	r0, r7
 802986c:	47c8      	blx	r9
 802986e:	3001      	adds	r0, #1
 8029870:	d0e6      	beq.n	8029840 <_printf_common+0xa4>
 8029872:	3601      	adds	r6, #1
 8029874:	e7d9      	b.n	802982a <_printf_common+0x8e>
	...

08029878 <_printf_i>:
 8029878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802987c:	7e0f      	ldrb	r7, [r1, #24]
 802987e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029880:	2f78      	cmp	r7, #120	@ 0x78
 8029882:	4691      	mov	r9, r2
 8029884:	4680      	mov	r8, r0
 8029886:	460c      	mov	r4, r1
 8029888:	469a      	mov	sl, r3
 802988a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802988e:	d807      	bhi.n	80298a0 <_printf_i+0x28>
 8029890:	2f62      	cmp	r7, #98	@ 0x62
 8029892:	d80a      	bhi.n	80298aa <_printf_i+0x32>
 8029894:	2f00      	cmp	r7, #0
 8029896:	f000 80d2 	beq.w	8029a3e <_printf_i+0x1c6>
 802989a:	2f58      	cmp	r7, #88	@ 0x58
 802989c:	f000 80b9 	beq.w	8029a12 <_printf_i+0x19a>
 80298a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80298a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80298a8:	e03a      	b.n	8029920 <_printf_i+0xa8>
 80298aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80298ae:	2b15      	cmp	r3, #21
 80298b0:	d8f6      	bhi.n	80298a0 <_printf_i+0x28>
 80298b2:	a101      	add	r1, pc, #4	@ (adr r1, 80298b8 <_printf_i+0x40>)
 80298b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80298b8:	08029911 	.word	0x08029911
 80298bc:	08029925 	.word	0x08029925
 80298c0:	080298a1 	.word	0x080298a1
 80298c4:	080298a1 	.word	0x080298a1
 80298c8:	080298a1 	.word	0x080298a1
 80298cc:	080298a1 	.word	0x080298a1
 80298d0:	08029925 	.word	0x08029925
 80298d4:	080298a1 	.word	0x080298a1
 80298d8:	080298a1 	.word	0x080298a1
 80298dc:	080298a1 	.word	0x080298a1
 80298e0:	080298a1 	.word	0x080298a1
 80298e4:	08029a25 	.word	0x08029a25
 80298e8:	0802994f 	.word	0x0802994f
 80298ec:	080299df 	.word	0x080299df
 80298f0:	080298a1 	.word	0x080298a1
 80298f4:	080298a1 	.word	0x080298a1
 80298f8:	08029a47 	.word	0x08029a47
 80298fc:	080298a1 	.word	0x080298a1
 8029900:	0802994f 	.word	0x0802994f
 8029904:	080298a1 	.word	0x080298a1
 8029908:	080298a1 	.word	0x080298a1
 802990c:	080299e7 	.word	0x080299e7
 8029910:	6833      	ldr	r3, [r6, #0]
 8029912:	1d1a      	adds	r2, r3, #4
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	6032      	str	r2, [r6, #0]
 8029918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802991c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029920:	2301      	movs	r3, #1
 8029922:	e09d      	b.n	8029a60 <_printf_i+0x1e8>
 8029924:	6833      	ldr	r3, [r6, #0]
 8029926:	6820      	ldr	r0, [r4, #0]
 8029928:	1d19      	adds	r1, r3, #4
 802992a:	6031      	str	r1, [r6, #0]
 802992c:	0606      	lsls	r6, r0, #24
 802992e:	d501      	bpl.n	8029934 <_printf_i+0xbc>
 8029930:	681d      	ldr	r5, [r3, #0]
 8029932:	e003      	b.n	802993c <_printf_i+0xc4>
 8029934:	0645      	lsls	r5, r0, #25
 8029936:	d5fb      	bpl.n	8029930 <_printf_i+0xb8>
 8029938:	f9b3 5000 	ldrsh.w	r5, [r3]
 802993c:	2d00      	cmp	r5, #0
 802993e:	da03      	bge.n	8029948 <_printf_i+0xd0>
 8029940:	232d      	movs	r3, #45	@ 0x2d
 8029942:	426d      	negs	r5, r5
 8029944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029948:	4859      	ldr	r0, [pc, #356]	@ (8029ab0 <_printf_i+0x238>)
 802994a:	230a      	movs	r3, #10
 802994c:	e011      	b.n	8029972 <_printf_i+0xfa>
 802994e:	6821      	ldr	r1, [r4, #0]
 8029950:	6833      	ldr	r3, [r6, #0]
 8029952:	0608      	lsls	r0, r1, #24
 8029954:	f853 5b04 	ldr.w	r5, [r3], #4
 8029958:	d402      	bmi.n	8029960 <_printf_i+0xe8>
 802995a:	0649      	lsls	r1, r1, #25
 802995c:	bf48      	it	mi
 802995e:	b2ad      	uxthmi	r5, r5
 8029960:	2f6f      	cmp	r7, #111	@ 0x6f
 8029962:	4853      	ldr	r0, [pc, #332]	@ (8029ab0 <_printf_i+0x238>)
 8029964:	6033      	str	r3, [r6, #0]
 8029966:	bf14      	ite	ne
 8029968:	230a      	movne	r3, #10
 802996a:	2308      	moveq	r3, #8
 802996c:	2100      	movs	r1, #0
 802996e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8029972:	6866      	ldr	r6, [r4, #4]
 8029974:	60a6      	str	r6, [r4, #8]
 8029976:	2e00      	cmp	r6, #0
 8029978:	bfa2      	ittt	ge
 802997a:	6821      	ldrge	r1, [r4, #0]
 802997c:	f021 0104 	bicge.w	r1, r1, #4
 8029980:	6021      	strge	r1, [r4, #0]
 8029982:	b90d      	cbnz	r5, 8029988 <_printf_i+0x110>
 8029984:	2e00      	cmp	r6, #0
 8029986:	d04b      	beq.n	8029a20 <_printf_i+0x1a8>
 8029988:	4616      	mov	r6, r2
 802998a:	fbb5 f1f3 	udiv	r1, r5, r3
 802998e:	fb03 5711 	mls	r7, r3, r1, r5
 8029992:	5dc7      	ldrb	r7, [r0, r7]
 8029994:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029998:	462f      	mov	r7, r5
 802999a:	42bb      	cmp	r3, r7
 802999c:	460d      	mov	r5, r1
 802999e:	d9f4      	bls.n	802998a <_printf_i+0x112>
 80299a0:	2b08      	cmp	r3, #8
 80299a2:	d10b      	bne.n	80299bc <_printf_i+0x144>
 80299a4:	6823      	ldr	r3, [r4, #0]
 80299a6:	07df      	lsls	r7, r3, #31
 80299a8:	d508      	bpl.n	80299bc <_printf_i+0x144>
 80299aa:	6923      	ldr	r3, [r4, #16]
 80299ac:	6861      	ldr	r1, [r4, #4]
 80299ae:	4299      	cmp	r1, r3
 80299b0:	bfde      	ittt	le
 80299b2:	2330      	movle	r3, #48	@ 0x30
 80299b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80299b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80299bc:	1b92      	subs	r2, r2, r6
 80299be:	6122      	str	r2, [r4, #16]
 80299c0:	f8cd a000 	str.w	sl, [sp]
 80299c4:	464b      	mov	r3, r9
 80299c6:	aa03      	add	r2, sp, #12
 80299c8:	4621      	mov	r1, r4
 80299ca:	4640      	mov	r0, r8
 80299cc:	f7ff fee6 	bl	802979c <_printf_common>
 80299d0:	3001      	adds	r0, #1
 80299d2:	d14a      	bne.n	8029a6a <_printf_i+0x1f2>
 80299d4:	f04f 30ff 	mov.w	r0, #4294967295
 80299d8:	b004      	add	sp, #16
 80299da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80299de:	6823      	ldr	r3, [r4, #0]
 80299e0:	f043 0320 	orr.w	r3, r3, #32
 80299e4:	6023      	str	r3, [r4, #0]
 80299e6:	4833      	ldr	r0, [pc, #204]	@ (8029ab4 <_printf_i+0x23c>)
 80299e8:	2778      	movs	r7, #120	@ 0x78
 80299ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80299ee:	6823      	ldr	r3, [r4, #0]
 80299f0:	6831      	ldr	r1, [r6, #0]
 80299f2:	061f      	lsls	r7, r3, #24
 80299f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80299f8:	d402      	bmi.n	8029a00 <_printf_i+0x188>
 80299fa:	065f      	lsls	r7, r3, #25
 80299fc:	bf48      	it	mi
 80299fe:	b2ad      	uxthmi	r5, r5
 8029a00:	6031      	str	r1, [r6, #0]
 8029a02:	07d9      	lsls	r1, r3, #31
 8029a04:	bf44      	itt	mi
 8029a06:	f043 0320 	orrmi.w	r3, r3, #32
 8029a0a:	6023      	strmi	r3, [r4, #0]
 8029a0c:	b11d      	cbz	r5, 8029a16 <_printf_i+0x19e>
 8029a0e:	2310      	movs	r3, #16
 8029a10:	e7ac      	b.n	802996c <_printf_i+0xf4>
 8029a12:	4827      	ldr	r0, [pc, #156]	@ (8029ab0 <_printf_i+0x238>)
 8029a14:	e7e9      	b.n	80299ea <_printf_i+0x172>
 8029a16:	6823      	ldr	r3, [r4, #0]
 8029a18:	f023 0320 	bic.w	r3, r3, #32
 8029a1c:	6023      	str	r3, [r4, #0]
 8029a1e:	e7f6      	b.n	8029a0e <_printf_i+0x196>
 8029a20:	4616      	mov	r6, r2
 8029a22:	e7bd      	b.n	80299a0 <_printf_i+0x128>
 8029a24:	6833      	ldr	r3, [r6, #0]
 8029a26:	6825      	ldr	r5, [r4, #0]
 8029a28:	6961      	ldr	r1, [r4, #20]
 8029a2a:	1d18      	adds	r0, r3, #4
 8029a2c:	6030      	str	r0, [r6, #0]
 8029a2e:	062e      	lsls	r6, r5, #24
 8029a30:	681b      	ldr	r3, [r3, #0]
 8029a32:	d501      	bpl.n	8029a38 <_printf_i+0x1c0>
 8029a34:	6019      	str	r1, [r3, #0]
 8029a36:	e002      	b.n	8029a3e <_printf_i+0x1c6>
 8029a38:	0668      	lsls	r0, r5, #25
 8029a3a:	d5fb      	bpl.n	8029a34 <_printf_i+0x1bc>
 8029a3c:	8019      	strh	r1, [r3, #0]
 8029a3e:	2300      	movs	r3, #0
 8029a40:	6123      	str	r3, [r4, #16]
 8029a42:	4616      	mov	r6, r2
 8029a44:	e7bc      	b.n	80299c0 <_printf_i+0x148>
 8029a46:	6833      	ldr	r3, [r6, #0]
 8029a48:	1d1a      	adds	r2, r3, #4
 8029a4a:	6032      	str	r2, [r6, #0]
 8029a4c:	681e      	ldr	r6, [r3, #0]
 8029a4e:	6862      	ldr	r2, [r4, #4]
 8029a50:	2100      	movs	r1, #0
 8029a52:	4630      	mov	r0, r6
 8029a54:	f7d6 fbf4 	bl	8000240 <memchr>
 8029a58:	b108      	cbz	r0, 8029a5e <_printf_i+0x1e6>
 8029a5a:	1b80      	subs	r0, r0, r6
 8029a5c:	6060      	str	r0, [r4, #4]
 8029a5e:	6863      	ldr	r3, [r4, #4]
 8029a60:	6123      	str	r3, [r4, #16]
 8029a62:	2300      	movs	r3, #0
 8029a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029a68:	e7aa      	b.n	80299c0 <_printf_i+0x148>
 8029a6a:	6923      	ldr	r3, [r4, #16]
 8029a6c:	4632      	mov	r2, r6
 8029a6e:	4649      	mov	r1, r9
 8029a70:	4640      	mov	r0, r8
 8029a72:	47d0      	blx	sl
 8029a74:	3001      	adds	r0, #1
 8029a76:	d0ad      	beq.n	80299d4 <_printf_i+0x15c>
 8029a78:	6823      	ldr	r3, [r4, #0]
 8029a7a:	079b      	lsls	r3, r3, #30
 8029a7c:	d413      	bmi.n	8029aa6 <_printf_i+0x22e>
 8029a7e:	68e0      	ldr	r0, [r4, #12]
 8029a80:	9b03      	ldr	r3, [sp, #12]
 8029a82:	4298      	cmp	r0, r3
 8029a84:	bfb8      	it	lt
 8029a86:	4618      	movlt	r0, r3
 8029a88:	e7a6      	b.n	80299d8 <_printf_i+0x160>
 8029a8a:	2301      	movs	r3, #1
 8029a8c:	4632      	mov	r2, r6
 8029a8e:	4649      	mov	r1, r9
 8029a90:	4640      	mov	r0, r8
 8029a92:	47d0      	blx	sl
 8029a94:	3001      	adds	r0, #1
 8029a96:	d09d      	beq.n	80299d4 <_printf_i+0x15c>
 8029a98:	3501      	adds	r5, #1
 8029a9a:	68e3      	ldr	r3, [r4, #12]
 8029a9c:	9903      	ldr	r1, [sp, #12]
 8029a9e:	1a5b      	subs	r3, r3, r1
 8029aa0:	42ab      	cmp	r3, r5
 8029aa2:	dcf2      	bgt.n	8029a8a <_printf_i+0x212>
 8029aa4:	e7eb      	b.n	8029a7e <_printf_i+0x206>
 8029aa6:	2500      	movs	r5, #0
 8029aa8:	f104 0619 	add.w	r6, r4, #25
 8029aac:	e7f5      	b.n	8029a9a <_printf_i+0x222>
 8029aae:	bf00      	nop
 8029ab0:	0802e5b5 	.word	0x0802e5b5
 8029ab4:	0802e5c6 	.word	0x0802e5c6

08029ab8 <__sflush_r>:
 8029ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ac0:	0716      	lsls	r6, r2, #28
 8029ac2:	4605      	mov	r5, r0
 8029ac4:	460c      	mov	r4, r1
 8029ac6:	d454      	bmi.n	8029b72 <__sflush_r+0xba>
 8029ac8:	684b      	ldr	r3, [r1, #4]
 8029aca:	2b00      	cmp	r3, #0
 8029acc:	dc02      	bgt.n	8029ad4 <__sflush_r+0x1c>
 8029ace:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029ad0:	2b00      	cmp	r3, #0
 8029ad2:	dd48      	ble.n	8029b66 <__sflush_r+0xae>
 8029ad4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029ad6:	2e00      	cmp	r6, #0
 8029ad8:	d045      	beq.n	8029b66 <__sflush_r+0xae>
 8029ada:	2300      	movs	r3, #0
 8029adc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029ae0:	682f      	ldr	r7, [r5, #0]
 8029ae2:	6a21      	ldr	r1, [r4, #32]
 8029ae4:	602b      	str	r3, [r5, #0]
 8029ae6:	d030      	beq.n	8029b4a <__sflush_r+0x92>
 8029ae8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8029aea:	89a3      	ldrh	r3, [r4, #12]
 8029aec:	0759      	lsls	r1, r3, #29
 8029aee:	d505      	bpl.n	8029afc <__sflush_r+0x44>
 8029af0:	6863      	ldr	r3, [r4, #4]
 8029af2:	1ad2      	subs	r2, r2, r3
 8029af4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029af6:	b10b      	cbz	r3, 8029afc <__sflush_r+0x44>
 8029af8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029afa:	1ad2      	subs	r2, r2, r3
 8029afc:	2300      	movs	r3, #0
 8029afe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029b00:	6a21      	ldr	r1, [r4, #32]
 8029b02:	4628      	mov	r0, r5
 8029b04:	47b0      	blx	r6
 8029b06:	1c43      	adds	r3, r0, #1
 8029b08:	89a3      	ldrh	r3, [r4, #12]
 8029b0a:	d106      	bne.n	8029b1a <__sflush_r+0x62>
 8029b0c:	6829      	ldr	r1, [r5, #0]
 8029b0e:	291d      	cmp	r1, #29
 8029b10:	d82b      	bhi.n	8029b6a <__sflush_r+0xb2>
 8029b12:	4a2a      	ldr	r2, [pc, #168]	@ (8029bbc <__sflush_r+0x104>)
 8029b14:	410a      	asrs	r2, r1
 8029b16:	07d6      	lsls	r6, r2, #31
 8029b18:	d427      	bmi.n	8029b6a <__sflush_r+0xb2>
 8029b1a:	2200      	movs	r2, #0
 8029b1c:	6062      	str	r2, [r4, #4]
 8029b1e:	04d9      	lsls	r1, r3, #19
 8029b20:	6922      	ldr	r2, [r4, #16]
 8029b22:	6022      	str	r2, [r4, #0]
 8029b24:	d504      	bpl.n	8029b30 <__sflush_r+0x78>
 8029b26:	1c42      	adds	r2, r0, #1
 8029b28:	d101      	bne.n	8029b2e <__sflush_r+0x76>
 8029b2a:	682b      	ldr	r3, [r5, #0]
 8029b2c:	b903      	cbnz	r3, 8029b30 <__sflush_r+0x78>
 8029b2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8029b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029b32:	602f      	str	r7, [r5, #0]
 8029b34:	b1b9      	cbz	r1, 8029b66 <__sflush_r+0xae>
 8029b36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029b3a:	4299      	cmp	r1, r3
 8029b3c:	d002      	beq.n	8029b44 <__sflush_r+0x8c>
 8029b3e:	4628      	mov	r0, r5
 8029b40:	f7ff fca0 	bl	8029484 <_free_r>
 8029b44:	2300      	movs	r3, #0
 8029b46:	6363      	str	r3, [r4, #52]	@ 0x34
 8029b48:	e00d      	b.n	8029b66 <__sflush_r+0xae>
 8029b4a:	2301      	movs	r3, #1
 8029b4c:	4628      	mov	r0, r5
 8029b4e:	47b0      	blx	r6
 8029b50:	4602      	mov	r2, r0
 8029b52:	1c50      	adds	r0, r2, #1
 8029b54:	d1c9      	bne.n	8029aea <__sflush_r+0x32>
 8029b56:	682b      	ldr	r3, [r5, #0]
 8029b58:	2b00      	cmp	r3, #0
 8029b5a:	d0c6      	beq.n	8029aea <__sflush_r+0x32>
 8029b5c:	2b1d      	cmp	r3, #29
 8029b5e:	d001      	beq.n	8029b64 <__sflush_r+0xac>
 8029b60:	2b16      	cmp	r3, #22
 8029b62:	d11e      	bne.n	8029ba2 <__sflush_r+0xea>
 8029b64:	602f      	str	r7, [r5, #0]
 8029b66:	2000      	movs	r0, #0
 8029b68:	e022      	b.n	8029bb0 <__sflush_r+0xf8>
 8029b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029b6e:	b21b      	sxth	r3, r3
 8029b70:	e01b      	b.n	8029baa <__sflush_r+0xf2>
 8029b72:	690f      	ldr	r7, [r1, #16]
 8029b74:	2f00      	cmp	r7, #0
 8029b76:	d0f6      	beq.n	8029b66 <__sflush_r+0xae>
 8029b78:	0793      	lsls	r3, r2, #30
 8029b7a:	680e      	ldr	r6, [r1, #0]
 8029b7c:	bf08      	it	eq
 8029b7e:	694b      	ldreq	r3, [r1, #20]
 8029b80:	600f      	str	r7, [r1, #0]
 8029b82:	bf18      	it	ne
 8029b84:	2300      	movne	r3, #0
 8029b86:	eba6 0807 	sub.w	r8, r6, r7
 8029b8a:	608b      	str	r3, [r1, #8]
 8029b8c:	f1b8 0f00 	cmp.w	r8, #0
 8029b90:	dde9      	ble.n	8029b66 <__sflush_r+0xae>
 8029b92:	6a21      	ldr	r1, [r4, #32]
 8029b94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8029b96:	4643      	mov	r3, r8
 8029b98:	463a      	mov	r2, r7
 8029b9a:	4628      	mov	r0, r5
 8029b9c:	47b0      	blx	r6
 8029b9e:	2800      	cmp	r0, #0
 8029ba0:	dc08      	bgt.n	8029bb4 <__sflush_r+0xfc>
 8029ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029baa:	81a3      	strh	r3, [r4, #12]
 8029bac:	f04f 30ff 	mov.w	r0, #4294967295
 8029bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029bb4:	4407      	add	r7, r0
 8029bb6:	eba8 0800 	sub.w	r8, r8, r0
 8029bba:	e7e7      	b.n	8029b8c <__sflush_r+0xd4>
 8029bbc:	dfbffffe 	.word	0xdfbffffe

08029bc0 <_fflush_r>:
 8029bc0:	b538      	push	{r3, r4, r5, lr}
 8029bc2:	690b      	ldr	r3, [r1, #16]
 8029bc4:	4605      	mov	r5, r0
 8029bc6:	460c      	mov	r4, r1
 8029bc8:	b913      	cbnz	r3, 8029bd0 <_fflush_r+0x10>
 8029bca:	2500      	movs	r5, #0
 8029bcc:	4628      	mov	r0, r5
 8029bce:	bd38      	pop	{r3, r4, r5, pc}
 8029bd0:	b118      	cbz	r0, 8029bda <_fflush_r+0x1a>
 8029bd2:	6a03      	ldr	r3, [r0, #32]
 8029bd4:	b90b      	cbnz	r3, 8029bda <_fflush_r+0x1a>
 8029bd6:	f7ff f993 	bl	8028f00 <__sinit>
 8029bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029bde:	2b00      	cmp	r3, #0
 8029be0:	d0f3      	beq.n	8029bca <_fflush_r+0xa>
 8029be2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8029be4:	07d0      	lsls	r0, r2, #31
 8029be6:	d404      	bmi.n	8029bf2 <_fflush_r+0x32>
 8029be8:	0599      	lsls	r1, r3, #22
 8029bea:	d402      	bmi.n	8029bf2 <_fflush_r+0x32>
 8029bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029bee:	f7ff fbdc 	bl	80293aa <__retarget_lock_acquire_recursive>
 8029bf2:	4628      	mov	r0, r5
 8029bf4:	4621      	mov	r1, r4
 8029bf6:	f7ff ff5f 	bl	8029ab8 <__sflush_r>
 8029bfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029bfc:	07da      	lsls	r2, r3, #31
 8029bfe:	4605      	mov	r5, r0
 8029c00:	d4e4      	bmi.n	8029bcc <_fflush_r+0xc>
 8029c02:	89a3      	ldrh	r3, [r4, #12]
 8029c04:	059b      	lsls	r3, r3, #22
 8029c06:	d4e1      	bmi.n	8029bcc <_fflush_r+0xc>
 8029c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029c0a:	f7ff fbcf 	bl	80293ac <__retarget_lock_release_recursive>
 8029c0e:	e7dd      	b.n	8029bcc <_fflush_r+0xc>

08029c10 <__swhatbuf_r>:
 8029c10:	b570      	push	{r4, r5, r6, lr}
 8029c12:	460c      	mov	r4, r1
 8029c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c18:	2900      	cmp	r1, #0
 8029c1a:	b096      	sub	sp, #88	@ 0x58
 8029c1c:	4615      	mov	r5, r2
 8029c1e:	461e      	mov	r6, r3
 8029c20:	da0d      	bge.n	8029c3e <__swhatbuf_r+0x2e>
 8029c22:	89a3      	ldrh	r3, [r4, #12]
 8029c24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029c28:	f04f 0100 	mov.w	r1, #0
 8029c2c:	bf14      	ite	ne
 8029c2e:	2340      	movne	r3, #64	@ 0x40
 8029c30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029c34:	2000      	movs	r0, #0
 8029c36:	6031      	str	r1, [r6, #0]
 8029c38:	602b      	str	r3, [r5, #0]
 8029c3a:	b016      	add	sp, #88	@ 0x58
 8029c3c:	bd70      	pop	{r4, r5, r6, pc}
 8029c3e:	466a      	mov	r2, sp
 8029c40:	f000 f848 	bl	8029cd4 <_fstat_r>
 8029c44:	2800      	cmp	r0, #0
 8029c46:	dbec      	blt.n	8029c22 <__swhatbuf_r+0x12>
 8029c48:	9901      	ldr	r1, [sp, #4]
 8029c4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8029c4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8029c52:	4259      	negs	r1, r3
 8029c54:	4159      	adcs	r1, r3
 8029c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8029c5a:	e7eb      	b.n	8029c34 <__swhatbuf_r+0x24>

08029c5c <__smakebuf_r>:
 8029c5c:	898b      	ldrh	r3, [r1, #12]
 8029c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029c60:	079d      	lsls	r5, r3, #30
 8029c62:	4606      	mov	r6, r0
 8029c64:	460c      	mov	r4, r1
 8029c66:	d507      	bpl.n	8029c78 <__smakebuf_r+0x1c>
 8029c68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8029c6c:	6023      	str	r3, [r4, #0]
 8029c6e:	6123      	str	r3, [r4, #16]
 8029c70:	2301      	movs	r3, #1
 8029c72:	6163      	str	r3, [r4, #20]
 8029c74:	b003      	add	sp, #12
 8029c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029c78:	ab01      	add	r3, sp, #4
 8029c7a:	466a      	mov	r2, sp
 8029c7c:	f7ff ffc8 	bl	8029c10 <__swhatbuf_r>
 8029c80:	9f00      	ldr	r7, [sp, #0]
 8029c82:	4605      	mov	r5, r0
 8029c84:	4639      	mov	r1, r7
 8029c86:	4630      	mov	r0, r6
 8029c88:	f7ff f814 	bl	8028cb4 <_malloc_r>
 8029c8c:	b948      	cbnz	r0, 8029ca2 <__smakebuf_r+0x46>
 8029c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029c92:	059a      	lsls	r2, r3, #22
 8029c94:	d4ee      	bmi.n	8029c74 <__smakebuf_r+0x18>
 8029c96:	f023 0303 	bic.w	r3, r3, #3
 8029c9a:	f043 0302 	orr.w	r3, r3, #2
 8029c9e:	81a3      	strh	r3, [r4, #12]
 8029ca0:	e7e2      	b.n	8029c68 <__smakebuf_r+0xc>
 8029ca2:	89a3      	ldrh	r3, [r4, #12]
 8029ca4:	6020      	str	r0, [r4, #0]
 8029ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8029caa:	81a3      	strh	r3, [r4, #12]
 8029cac:	9b01      	ldr	r3, [sp, #4]
 8029cae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8029cb2:	b15b      	cbz	r3, 8029ccc <__smakebuf_r+0x70>
 8029cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029cb8:	4630      	mov	r0, r6
 8029cba:	f000 f81d 	bl	8029cf8 <_isatty_r>
 8029cbe:	b128      	cbz	r0, 8029ccc <__smakebuf_r+0x70>
 8029cc0:	89a3      	ldrh	r3, [r4, #12]
 8029cc2:	f023 0303 	bic.w	r3, r3, #3
 8029cc6:	f043 0301 	orr.w	r3, r3, #1
 8029cca:	81a3      	strh	r3, [r4, #12]
 8029ccc:	89a3      	ldrh	r3, [r4, #12]
 8029cce:	431d      	orrs	r5, r3
 8029cd0:	81a5      	strh	r5, [r4, #12]
 8029cd2:	e7cf      	b.n	8029c74 <__smakebuf_r+0x18>

08029cd4 <_fstat_r>:
 8029cd4:	b538      	push	{r3, r4, r5, lr}
 8029cd6:	4d07      	ldr	r5, [pc, #28]	@ (8029cf4 <_fstat_r+0x20>)
 8029cd8:	2300      	movs	r3, #0
 8029cda:	4604      	mov	r4, r0
 8029cdc:	4608      	mov	r0, r1
 8029cde:	4611      	mov	r1, r2
 8029ce0:	602b      	str	r3, [r5, #0]
 8029ce2:	f7db fb1c 	bl	800531e <_fstat>
 8029ce6:	1c43      	adds	r3, r0, #1
 8029ce8:	d102      	bne.n	8029cf0 <_fstat_r+0x1c>
 8029cea:	682b      	ldr	r3, [r5, #0]
 8029cec:	b103      	cbz	r3, 8029cf0 <_fstat_r+0x1c>
 8029cee:	6023      	str	r3, [r4, #0]
 8029cf0:	bd38      	pop	{r3, r4, r5, pc}
 8029cf2:	bf00      	nop
 8029cf4:	20028960 	.word	0x20028960

08029cf8 <_isatty_r>:
 8029cf8:	b538      	push	{r3, r4, r5, lr}
 8029cfa:	4d06      	ldr	r5, [pc, #24]	@ (8029d14 <_isatty_r+0x1c>)
 8029cfc:	2300      	movs	r3, #0
 8029cfe:	4604      	mov	r4, r0
 8029d00:	4608      	mov	r0, r1
 8029d02:	602b      	str	r3, [r5, #0]
 8029d04:	f7db fb10 	bl	8005328 <_isatty>
 8029d08:	1c43      	adds	r3, r0, #1
 8029d0a:	d102      	bne.n	8029d12 <_isatty_r+0x1a>
 8029d0c:	682b      	ldr	r3, [r5, #0]
 8029d0e:	b103      	cbz	r3, 8029d12 <_isatty_r+0x1a>
 8029d10:	6023      	str	r3, [r4, #0]
 8029d12:	bd38      	pop	{r3, r4, r5, pc}
 8029d14:	20028960 	.word	0x20028960

08029d18 <_sbrk>:
 8029d18:	4a04      	ldr	r2, [pc, #16]	@ (8029d2c <_sbrk+0x14>)
 8029d1a:	6811      	ldr	r1, [r2, #0]
 8029d1c:	4603      	mov	r3, r0
 8029d1e:	b909      	cbnz	r1, 8029d24 <_sbrk+0xc>
 8029d20:	4903      	ldr	r1, [pc, #12]	@ (8029d30 <_sbrk+0x18>)
 8029d22:	6011      	str	r1, [r2, #0]
 8029d24:	6810      	ldr	r0, [r2, #0]
 8029d26:	4403      	add	r3, r0
 8029d28:	6013      	str	r3, [r2, #0]
 8029d2a:	4770      	bx	lr
 8029d2c:	20028b00 	.word	0x20028b00
 8029d30:	20028b08 	.word	0x20028b08

08029d34 <_init>:
 8029d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029d36:	bf00      	nop
 8029d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029d3a:	bc08      	pop	{r3}
 8029d3c:	469e      	mov	lr, r3
 8029d3e:	4770      	bx	lr

08029d40 <_fini>:
 8029d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029d42:	bf00      	nop
 8029d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029d46:	bc08      	pop	{r3}
 8029d48:	469e      	mov	lr, r3
 8029d4a:	4770      	bx	lr
